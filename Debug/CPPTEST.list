
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a160  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da8  0801a310  0801a310  0002a310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0b8  0801b0b8  00030294  2**0
                  CONTENTS
  4 .ARM          00000008  0801b0b8  0801b0b8  0002b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0c0  0801b0c0  00030294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0c0  0801b0c0  0002b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b0c4  0801b0c4  0002b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0801b0c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002280  20000298  0801b35c  00030298  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002518  0801b35c  00032518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003550f  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000064b9  00000000  00000000  000657d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002430  00000000  00000000  0006bc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002168  00000000  00000000  0006e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030035  00000000  00000000  00070228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021670  00000000  00000000  000a025d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f91a5  00000000  00000000  000c18cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001baa72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000afc0  00000000  00000000  001baaf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000298 	.word	0x20000298
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a2f8 	.word	0x0801a2f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000029c 	.word	0x2000029c
 80001ec:	0801a2f8 	.word	0x0801a2f8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	; 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d64:	f1a2 0201 	sub.w	r2, r2, #1
 8000d68:	d1ed      	bne.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_ldivmod>:
 8000ec4:	b97b      	cbnz	r3, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec6:	b972      	cbnz	r2, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	bfbe      	ittt	lt
 8000ecc:	2000      	movlt	r0, #0
 8000ece:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ed2:	e006      	blt.n	8000ee2 <__aeabi_ldivmod+0x1e>
 8000ed4:	bf08      	it	eq
 8000ed6:	2800      	cmpeq	r0, #0
 8000ed8:	bf1c      	itt	ne
 8000eda:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ede:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee2:	f000 b9bd 	b.w	8001260 <__aeabi_idiv0>
 8000ee6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eee:	2900      	cmp	r1, #0
 8000ef0:	db09      	blt.n	8000f06 <__aeabi_ldivmod+0x42>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db1a      	blt.n	8000f2c <__aeabi_ldivmod+0x68>
 8000ef6:	f000 f84d 	bl	8000f94 <__udivmoddi4>
 8000efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f02:	b004      	add	sp, #16
 8000f04:	4770      	bx	lr
 8000f06:	4240      	negs	r0, r0
 8000f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db1b      	blt.n	8000f48 <__aeabi_ldivmod+0x84>
 8000f10:	f000 f840 	bl	8000f94 <__udivmoddi4>
 8000f14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1c:	b004      	add	sp, #16
 8000f1e:	4240      	negs	r0, r0
 8000f20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f24:	4252      	negs	r2, r2
 8000f26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2a:	4770      	bx	lr
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f32:	f000 f82f 	bl	8000f94 <__udivmoddi4>
 8000f36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3e:	b004      	add	sp, #16
 8000f40:	4240      	negs	r0, r0
 8000f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f46:	4770      	bx	lr
 8000f48:	4252      	negs	r2, r2
 8000f4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4e:	f000 f821 	bl	8000f94 <__udivmoddi4>
 8000f52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5a:	b004      	add	sp, #16
 8000f5c:	4252      	negs	r2, r2
 8000f5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_uldivmod>:
 8000f64:	b953      	cbnz	r3, 8000f7c <__aeabi_uldivmod+0x18>
 8000f66:	b94a      	cbnz	r2, 8000f7c <__aeabi_uldivmod+0x18>
 8000f68:	2900      	cmp	r1, #0
 8000f6a:	bf08      	it	eq
 8000f6c:	2800      	cmpeq	r0, #0
 8000f6e:	bf1c      	itt	ne
 8000f70:	f04f 31ff 	movne.w	r1, #4294967295
 8000f74:	f04f 30ff 	movne.w	r0, #4294967295
 8000f78:	f000 b972 	b.w	8001260 <__aeabi_idiv0>
 8000f7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f84:	f000 f806 	bl	8000f94 <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr

08000f94 <__udivmoddi4>:
 8000f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f98:	9e08      	ldr	r6, [sp, #32]
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4688      	mov	r8, r1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d14b      	bne.n	800103a <__udivmoddi4+0xa6>
 8000fa2:	428a      	cmp	r2, r1
 8000fa4:	4615      	mov	r5, r2
 8000fa6:	d967      	bls.n	8001078 <__udivmoddi4+0xe4>
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	b14a      	cbz	r2, 8000fc2 <__udivmoddi4+0x2e>
 8000fae:	f1c2 0720 	rsb	r7, r2, #32
 8000fb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000fb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000fba:	4095      	lsls	r5, r2
 8000fbc:	ea47 0803 	orr.w	r8, r7, r3
 8000fc0:	4094      	lsls	r4, r2
 8000fc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fc6:	0c23      	lsrs	r3, r4, #16
 8000fc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000fcc:	fa1f fc85 	uxth.w	ip, r5
 8000fd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000fd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000fdc:	4299      	cmp	r1, r3
 8000fde:	d909      	bls.n	8000ff4 <__udivmoddi4+0x60>
 8000fe0:	18eb      	adds	r3, r5, r3
 8000fe2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000fe6:	f080 811b 	bcs.w	8001220 <__udivmoddi4+0x28c>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 8118 	bls.w	8001220 <__udivmoddi4+0x28c>
 8000ff0:	3f02      	subs	r7, #2
 8000ff2:	442b      	add	r3, r5
 8000ff4:	1a5b      	subs	r3, r3, r1
 8000ff6:	b2a4      	uxth	r4, r4
 8000ff8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ffc:	fb0e 3310 	mls	r3, lr, r0, r3
 8001000:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001004:	fb00 fc0c 	mul.w	ip, r0, ip
 8001008:	45a4      	cmp	ip, r4
 800100a:	d909      	bls.n	8001020 <__udivmoddi4+0x8c>
 800100c:	192c      	adds	r4, r5, r4
 800100e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001012:	f080 8107 	bcs.w	8001224 <__udivmoddi4+0x290>
 8001016:	45a4      	cmp	ip, r4
 8001018:	f240 8104 	bls.w	8001224 <__udivmoddi4+0x290>
 800101c:	3802      	subs	r0, #2
 800101e:	442c      	add	r4, r5
 8001020:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001024:	eba4 040c 	sub.w	r4, r4, ip
 8001028:	2700      	movs	r7, #0
 800102a:	b11e      	cbz	r6, 8001034 <__udivmoddi4+0xa0>
 800102c:	40d4      	lsrs	r4, r2
 800102e:	2300      	movs	r3, #0
 8001030:	e9c6 4300 	strd	r4, r3, [r6]
 8001034:	4639      	mov	r1, r7
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d909      	bls.n	8001052 <__udivmoddi4+0xbe>
 800103e:	2e00      	cmp	r6, #0
 8001040:	f000 80eb 	beq.w	800121a <__udivmoddi4+0x286>
 8001044:	2700      	movs	r7, #0
 8001046:	e9c6 0100 	strd	r0, r1, [r6]
 800104a:	4638      	mov	r0, r7
 800104c:	4639      	mov	r1, r7
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	fab3 f783 	clz	r7, r3
 8001056:	2f00      	cmp	r7, #0
 8001058:	d147      	bne.n	80010ea <__udivmoddi4+0x156>
 800105a:	428b      	cmp	r3, r1
 800105c:	d302      	bcc.n	8001064 <__udivmoddi4+0xd0>
 800105e:	4282      	cmp	r2, r0
 8001060:	f200 80fa 	bhi.w	8001258 <__udivmoddi4+0x2c4>
 8001064:	1a84      	subs	r4, r0, r2
 8001066:	eb61 0303 	sbc.w	r3, r1, r3
 800106a:	2001      	movs	r0, #1
 800106c:	4698      	mov	r8, r3
 800106e:	2e00      	cmp	r6, #0
 8001070:	d0e0      	beq.n	8001034 <__udivmoddi4+0xa0>
 8001072:	e9c6 4800 	strd	r4, r8, [r6]
 8001076:	e7dd      	b.n	8001034 <__udivmoddi4+0xa0>
 8001078:	b902      	cbnz	r2, 800107c <__udivmoddi4+0xe8>
 800107a:	deff      	udf	#255	; 0xff
 800107c:	fab2 f282 	clz	r2, r2
 8001080:	2a00      	cmp	r2, #0
 8001082:	f040 808f 	bne.w	80011a4 <__udivmoddi4+0x210>
 8001086:	1b49      	subs	r1, r1, r5
 8001088:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800108c:	fa1f f885 	uxth.w	r8, r5
 8001090:	2701      	movs	r7, #1
 8001092:	fbb1 fcfe 	udiv	ip, r1, lr
 8001096:	0c23      	lsrs	r3, r4, #16
 8001098:	fb0e 111c 	mls	r1, lr, ip, r1
 800109c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010a0:	fb08 f10c 	mul.w	r1, r8, ip
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d907      	bls.n	80010b8 <__udivmoddi4+0x124>
 80010a8:	18eb      	adds	r3, r5, r3
 80010aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80010ae:	d202      	bcs.n	80010b6 <__udivmoddi4+0x122>
 80010b0:	4299      	cmp	r1, r3
 80010b2:	f200 80cd 	bhi.w	8001250 <__udivmoddi4+0x2bc>
 80010b6:	4684      	mov	ip, r0
 80010b8:	1a59      	subs	r1, r3, r1
 80010ba:	b2a3      	uxth	r3, r4
 80010bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80010c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80010c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80010c8:	fb08 f800 	mul.w	r8, r8, r0
 80010cc:	45a0      	cmp	r8, r4
 80010ce:	d907      	bls.n	80010e0 <__udivmoddi4+0x14c>
 80010d0:	192c      	adds	r4, r5, r4
 80010d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80010d6:	d202      	bcs.n	80010de <__udivmoddi4+0x14a>
 80010d8:	45a0      	cmp	r8, r4
 80010da:	f200 80b6 	bhi.w	800124a <__udivmoddi4+0x2b6>
 80010de:	4618      	mov	r0, r3
 80010e0:	eba4 0408 	sub.w	r4, r4, r8
 80010e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010e8:	e79f      	b.n	800102a <__udivmoddi4+0x96>
 80010ea:	f1c7 0c20 	rsb	ip, r7, #32
 80010ee:	40bb      	lsls	r3, r7
 80010f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80010f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80010f8:	fa01 f407 	lsl.w	r4, r1, r7
 80010fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8001100:	fa21 f30c 	lsr.w	r3, r1, ip
 8001104:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001108:	4325      	orrs	r5, r4
 800110a:	fbb3 f9f8 	udiv	r9, r3, r8
 800110e:	0c2c      	lsrs	r4, r5, #16
 8001110:	fb08 3319 	mls	r3, r8, r9, r3
 8001114:	fa1f fa8e 	uxth.w	sl, lr
 8001118:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800111c:	fb09 f40a 	mul.w	r4, r9, sl
 8001120:	429c      	cmp	r4, r3
 8001122:	fa02 f207 	lsl.w	r2, r2, r7
 8001126:	fa00 f107 	lsl.w	r1, r0, r7
 800112a:	d90b      	bls.n	8001144 <__udivmoddi4+0x1b0>
 800112c:	eb1e 0303 	adds.w	r3, lr, r3
 8001130:	f109 30ff 	add.w	r0, r9, #4294967295
 8001134:	f080 8087 	bcs.w	8001246 <__udivmoddi4+0x2b2>
 8001138:	429c      	cmp	r4, r3
 800113a:	f240 8084 	bls.w	8001246 <__udivmoddi4+0x2b2>
 800113e:	f1a9 0902 	sub.w	r9, r9, #2
 8001142:	4473      	add	r3, lr
 8001144:	1b1b      	subs	r3, r3, r4
 8001146:	b2ad      	uxth	r5, r5
 8001148:	fbb3 f0f8 	udiv	r0, r3, r8
 800114c:	fb08 3310 	mls	r3, r8, r0, r3
 8001150:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001154:	fb00 fa0a 	mul.w	sl, r0, sl
 8001158:	45a2      	cmp	sl, r4
 800115a:	d908      	bls.n	800116e <__udivmoddi4+0x1da>
 800115c:	eb1e 0404 	adds.w	r4, lr, r4
 8001160:	f100 33ff 	add.w	r3, r0, #4294967295
 8001164:	d26b      	bcs.n	800123e <__udivmoddi4+0x2aa>
 8001166:	45a2      	cmp	sl, r4
 8001168:	d969      	bls.n	800123e <__udivmoddi4+0x2aa>
 800116a:	3802      	subs	r0, #2
 800116c:	4474      	add	r4, lr
 800116e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001172:	fba0 8902 	umull	r8, r9, r0, r2
 8001176:	eba4 040a 	sub.w	r4, r4, sl
 800117a:	454c      	cmp	r4, r9
 800117c:	46c2      	mov	sl, r8
 800117e:	464b      	mov	r3, r9
 8001180:	d354      	bcc.n	800122c <__udivmoddi4+0x298>
 8001182:	d051      	beq.n	8001228 <__udivmoddi4+0x294>
 8001184:	2e00      	cmp	r6, #0
 8001186:	d069      	beq.n	800125c <__udivmoddi4+0x2c8>
 8001188:	ebb1 050a 	subs.w	r5, r1, sl
 800118c:	eb64 0403 	sbc.w	r4, r4, r3
 8001190:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001194:	40fd      	lsrs	r5, r7
 8001196:	40fc      	lsrs	r4, r7
 8001198:	ea4c 0505 	orr.w	r5, ip, r5
 800119c:	e9c6 5400 	strd	r5, r4, [r6]
 80011a0:	2700      	movs	r7, #0
 80011a2:	e747      	b.n	8001034 <__udivmoddi4+0xa0>
 80011a4:	f1c2 0320 	rsb	r3, r2, #32
 80011a8:	fa20 f703 	lsr.w	r7, r0, r3
 80011ac:	4095      	lsls	r5, r2
 80011ae:	fa01 f002 	lsl.w	r0, r1, r2
 80011b2:	fa21 f303 	lsr.w	r3, r1, r3
 80011b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ba:	4338      	orrs	r0, r7
 80011bc:	0c01      	lsrs	r1, r0, #16
 80011be:	fbb3 f7fe 	udiv	r7, r3, lr
 80011c2:	fa1f f885 	uxth.w	r8, r5
 80011c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80011ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011ce:	fb07 f308 	mul.w	r3, r7, r8
 80011d2:	428b      	cmp	r3, r1
 80011d4:	fa04 f402 	lsl.w	r4, r4, r2
 80011d8:	d907      	bls.n	80011ea <__udivmoddi4+0x256>
 80011da:	1869      	adds	r1, r5, r1
 80011dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80011e0:	d22f      	bcs.n	8001242 <__udivmoddi4+0x2ae>
 80011e2:	428b      	cmp	r3, r1
 80011e4:	d92d      	bls.n	8001242 <__udivmoddi4+0x2ae>
 80011e6:	3f02      	subs	r7, #2
 80011e8:	4429      	add	r1, r5
 80011ea:	1acb      	subs	r3, r1, r3
 80011ec:	b281      	uxth	r1, r0
 80011ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80011f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80011f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011fa:	fb00 f308 	mul.w	r3, r0, r8
 80011fe:	428b      	cmp	r3, r1
 8001200:	d907      	bls.n	8001212 <__udivmoddi4+0x27e>
 8001202:	1869      	adds	r1, r5, r1
 8001204:	f100 3cff 	add.w	ip, r0, #4294967295
 8001208:	d217      	bcs.n	800123a <__udivmoddi4+0x2a6>
 800120a:	428b      	cmp	r3, r1
 800120c:	d915      	bls.n	800123a <__udivmoddi4+0x2a6>
 800120e:	3802      	subs	r0, #2
 8001210:	4429      	add	r1, r5
 8001212:	1ac9      	subs	r1, r1, r3
 8001214:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001218:	e73b      	b.n	8001092 <__udivmoddi4+0xfe>
 800121a:	4637      	mov	r7, r6
 800121c:	4630      	mov	r0, r6
 800121e:	e709      	b.n	8001034 <__udivmoddi4+0xa0>
 8001220:	4607      	mov	r7, r0
 8001222:	e6e7      	b.n	8000ff4 <__udivmoddi4+0x60>
 8001224:	4618      	mov	r0, r3
 8001226:	e6fb      	b.n	8001020 <__udivmoddi4+0x8c>
 8001228:	4541      	cmp	r1, r8
 800122a:	d2ab      	bcs.n	8001184 <__udivmoddi4+0x1f0>
 800122c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001230:	eb69 020e 	sbc.w	r2, r9, lr
 8001234:	3801      	subs	r0, #1
 8001236:	4613      	mov	r3, r2
 8001238:	e7a4      	b.n	8001184 <__udivmoddi4+0x1f0>
 800123a:	4660      	mov	r0, ip
 800123c:	e7e9      	b.n	8001212 <__udivmoddi4+0x27e>
 800123e:	4618      	mov	r0, r3
 8001240:	e795      	b.n	800116e <__udivmoddi4+0x1da>
 8001242:	4667      	mov	r7, ip
 8001244:	e7d1      	b.n	80011ea <__udivmoddi4+0x256>
 8001246:	4681      	mov	r9, r0
 8001248:	e77c      	b.n	8001144 <__udivmoddi4+0x1b0>
 800124a:	3802      	subs	r0, #2
 800124c:	442c      	add	r4, r5
 800124e:	e747      	b.n	80010e0 <__udivmoddi4+0x14c>
 8001250:	f1ac 0c02 	sub.w	ip, ip, #2
 8001254:	442b      	add	r3, r5
 8001256:	e72f      	b.n	80010b8 <__udivmoddi4+0x124>
 8001258:	4638      	mov	r0, r7
 800125a:	e708      	b.n	800106e <__udivmoddi4+0xda>
 800125c:	4637      	mov	r7, r6
 800125e:	e6e9      	b.n	8001034 <__udivmoddi4+0xa0>

08001260 <__aeabi_idiv0>:
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <IST8310+0x24>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 8001272:	f000 f915 	bl	80014a0 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 8001276:	210b      	movs	r1, #11
 8001278:	200a      	movs	r0, #10
 800127a:	f000 f8ff 	bl	800147c <IST8310_write_reg>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000780 	.word	0x20000780

0800128c <IST8310_updataIT>:

/*
 *  150hz gogo
 */
void IST8310_updataIT(){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af02      	add	r7, sp, #8
	while(1){
		if(bm_i2cFlag == bm_i2cIdle){
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <IST8310_updataIT+0x38>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <IST8310_updataIT+0x2c>
			HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <IST8310_updataIT+0x3c>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	2306      	movs	r3, #6
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <IST8310_updataIT+0x40>)
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	211c      	movs	r1, #28
 80012ac:	f009 f916 	bl	800a4dc <HAL_I2C_Mem_Read_IT>
			bm_i2cFlag = bm_i2cIST8310;
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <IST8310_updataIT+0x38>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]
			return;
 80012b6:	e003      	b.n	80012c0 <IST8310_updataIT+0x34>
		}
		else osDelay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f010 fecb 	bl	8012054 <osDelay>
		if(bm_i2cFlag == bm_i2cIdle){
 80012be:	e7e8      	b.n	8001292 <IST8310_updataIT+0x6>
	}
}
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000079c 	.word	0x2000079c
 80012c8:	20000780 	.word	0x20000780
 80012cc:	20000784 	.word	0x20000784

080012d0 <IST8310_i2cRxCpltCallback>:
void IST8310_i2cRxCpltCallback(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return;
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <IST8310_i2cRxCpltCallback+0x168>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	f040 8097 	bne.w	800140c <IST8310_i2cRxCpltCallback+0x13c>

	bm_i2cFlag = bm_i2cIdle;
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <IST8310_i2cRxCpltCallback+0x168>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012e6:	795b      	ldrb	r3, [r3, #5]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b51      	ldr	r3, [pc, #324]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012f8:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012fc:	79db      	ldrb	r3, [r3, #7]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b4e      	ldr	r3, [pc, #312]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001304:	799b      	ldrb	r3, [r3, #6]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b4b      	ldr	r3, [pc, #300]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 800130e:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 8001310:	4b4a      	ldr	r3, [pc, #296]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001312:	7a5b      	ldrb	r3, [r3, #9]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b48      	ldr	r3, [pc, #288]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 800131a:	7a1b      	ldrb	r3, [r3, #8]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b46      	ldr	r3, [pc, #280]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001324:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001328:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f909 	bl	8000544 <__aeabi_i2d>
 8001332:	a339      	add	r3, pc, #228	; (adr r3, 8001418 <IST8310_i2cRxCpltCallback+0x148>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff fbfe 	bl	8000b38 <__aeabi_dcmpgt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d166      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001344:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8fb 	bl	8000544 <__aeabi_i2d>
 800134e:	a334      	add	r3, pc, #208	; (adr r3, 8001420 <IST8310_i2cRxCpltCallback+0x150>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff fbd2 	bl	8000afc <__aeabi_dcmplt>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d158      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001360:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8ed 	bl	8000544 <__aeabi_i2d>
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 800136a:	a32b      	add	r3, pc, #172	; (adr r3, 8001418 <IST8310_i2cRxCpltCallback+0x148>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff fbe2 	bl	8000b38 <__aeabi_dcmpgt>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d14a      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 800137c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8df 	bl	8000544 <__aeabi_i2d>
 8001386:	a326      	add	r3, pc, #152	; (adr r3, 8001420 <IST8310_i2cRxCpltCallback+0x150>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fbb6 	bl	8000afc <__aeabi_dcmplt>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d13c      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001398:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8d1 	bl	8000544 <__aeabi_i2d>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 80013a2:	a321      	add	r3, pc, #132	; (adr r3, 8001428 <IST8310_i2cRxCpltCallback+0x158>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff fbc6 	bl	8000b38 <__aeabi_dcmpgt>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d12e      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8c3 	bl	8000544 <__aeabi_i2d>
 80013be:	a31c      	add	r3, pc, #112	; (adr r3, 8001430 <IST8310_i2cRxCpltCallback+0x160>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff fb9a 	bl	8000afc <__aeabi_dcmplt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d120      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013de:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013f2:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001406:	edc3 7a06 	vstr	s15, [r3, #24]
 800140a:	e002      	b.n	8001412 <IST8310_i2cRxCpltCallback+0x142>
	if(bm_i2cFlag != bm_i2cIST8310) return;
 800140c:	bf00      	nop
 800140e:	e000      	b.n	8001412 <IST8310_i2cRxCpltCallback+0x142>
		return;
 8001410:	bf00      	nop
}
 8001412:	bd80      	pop	{r7, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	55555556 	.word	0x55555556
 800141c:	40b4d655 	.word	0x40b4d655
 8001420:	55555556 	.word	0x55555556
 8001424:	c0b4d655 	.word	0xc0b4d655
 8001428:	aaaaaaab 	.word	0xaaaaaaab
 800142c:	40c0472a 	.word	0x40c0472a
 8001430:	aaaaaaab 	.word	0xaaaaaaab
 8001434:	c0c0472a 	.word	0xc0c0472a
 8001438:	2000079c 	.word	0x2000079c
 800143c:	20000780 	.word	0x20000780

08001440 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af04      	add	r7, sp, #16
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	4613      	mov	r3, r2
 800144e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <IST8310_write+0x38>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	b299      	uxth	r1, r3
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	b29b      	uxth	r3, r3
 800145c:	2264      	movs	r2, #100	; 0x64
 800145e:	9202      	str	r2, [sp, #8]
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	460a      	mov	r2, r1
 800146a:	211c      	movs	r1, #28
 800146c:	f008 fd16 	bl	8009e9c <HAL_I2C_Mem_Write>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000780 	.word	0x20000780

0800147c <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 800148c:	1db9      	adds	r1, r7, #6
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2201      	movs	r2, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ffd4 	bl	8001440 <IST8310_write>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 80014a4:	2101      	movs	r1, #1
 80014a6:	200b      	movs	r0, #11
 80014a8:	f7ff ffe8 	bl	800147c <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 80014ac:	2124      	movs	r1, #36	; 0x24
 80014ae:	2041      	movs	r0, #65	; 0x41
 80014b0:	f7ff ffe4 	bl	800147c <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 80014b4:	21c0      	movs	r1, #192	; 0xc0
 80014b6:	2042      	movs	r0, #66	; 0x42
 80014b8:	f7ff ffe0 	bl	800147c <IST8310_write_reg>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 80014c8:	4a38      	ldr	r2, [pc, #224]	; (80015ac <MPU9250+0xec>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 80014ce:	4b37      	ldr	r3, [pc, #220]	; (80015ac <MPU9250+0xec>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 80014d4:	4b35      	ldr	r3, [pc, #212]	; (80015ac <MPU9250+0xec>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <MPU9250+0xec>)
 80014dc:	2200      	movs	r2, #0
 80014de:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <MPU9250+0xec>)
 80014e2:	2206      	movs	r2, #6
 80014e4:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <MPU9250+0xec>)
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <MPU9250+0xec>)
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <MPU9250+0xec>)
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 80014fe:	2206      	movs	r2, #6
 8001500:	2100      	movs	r1, #0
 8001502:	482b      	ldr	r0, [pc, #172]	; (80015b0 <MPU9250+0xf0>)
 8001504:	f014 fbdb 	bl	8015cbe <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 8001508:	2206      	movs	r2, #6
 800150a:	2100      	movs	r1, #0
 800150c:	4829      	ldr	r0, [pc, #164]	; (80015b4 <MPU9250+0xf4>)
 800150e:	f014 fbd6 	bl	8015cbe <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 8001512:	2206      	movs	r2, #6
 8001514:	2100      	movs	r1, #0
 8001516:	4828      	ldr	r0, [pc, #160]	; (80015b8 <MPU9250+0xf8>)
 8001518:	f014 fbd1 	bl	8015cbe <memset>
	mpu9250.tmpCount = 0;
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <MPU9250+0xec>)
 800151e:	2200      	movs	r2, #0
 8001520:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 8001522:	220c      	movs	r2, #12
 8001524:	2100      	movs	r1, #0
 8001526:	4825      	ldr	r0, [pc, #148]	; (80015bc <MPU9250+0xfc>)
 8001528:	f014 fbc9 	bl	8015cbe <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 800152c:	220c      	movs	r2, #12
 800152e:	2100      	movs	r1, #0
 8001530:	4823      	ldr	r0, [pc, #140]	; (80015c0 <MPU9250+0x100>)
 8001532:	f014 fbc4 	bl	8015cbe <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 8001536:	220c      	movs	r2, #12
 8001538:	2100      	movs	r1, #0
 800153a:	4822      	ldr	r0, [pc, #136]	; (80015c4 <MPU9250+0x104>)
 800153c:	f014 fbbf 	bl	8015cbe <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 8001540:	220c      	movs	r2, #12
 8001542:	2100      	movs	r1, #0
 8001544:	4820      	ldr	r0, [pc, #128]	; (80015c8 <MPU9250+0x108>)
 8001546:	f014 fbba 	bl	8015cbe <memset>
	mpu9250.tmp = 0;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MPU9250+0xec>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 8001552:	220e      	movs	r2, #14
 8001554:	2100      	movs	r1, #0
 8001556:	481d      	ldr	r0, [pc, #116]	; (80015cc <MPU9250+0x10c>)
 8001558:	f014 fbb1 	bl	8015cbe <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 800155c:	2207      	movs	r2, #7
 800155e:	2100      	movs	r1, #0
 8001560:	481b      	ldr	r0, [pc, #108]	; (80015d0 <MPU9250+0x110>)
 8001562:	f014 fbac 	bl	8015cbe <memset>
	mpu9250.AK8963_lastUpdate = 0;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MPU9250+0xec>)
 8001568:	2200      	movs	r2, #0
 800156a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MPU9250+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MPU9250+0xec>)
 8001578:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <MPU9250+0x114>)
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MPU9250+0xec>)
 800157e:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <MPU9250+0x118>)
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MPU9250+0xec>)
 8001584:	4a15      	ldr	r2, [pc, #84]	; (80015dc <MPU9250+0x11c>)
 8001586:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 8001588:	f000 fa14 	bl	80019b4 <MPU9250_getMres>
	MPU9250_getGres();
 800158c:	f000 fa2e 	bl	80019ec <MPU9250_getGres>
	MPU9250_getAres();
 8001590:	f000 fa5e 	bl	8001a50 <MPU9250_getAres>

	MPU9250_resetMPU9250();
 8001594:	f000 fa8a 	bl	8001aac <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 8001598:	f000 fb76 	bl	8001c88 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 800159c:	f000 fb00 	bl	8001ba0 <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 80015a0:	f000 fa90 	bl	8001ac4 <MPU9250_initAK8963>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000408 	.word	0x20000408
 80015b0:	2000041c 	.word	0x2000041c
 80015b4:	20000422 	.word	0x20000422
 80015b8:	20000428 	.word	0x20000428
 80015bc:	20000430 	.word	0x20000430
 80015c0:	20000448 	.word	0x20000448
 80015c4:	20000454 	.word	0x20000454
 80015c8:	20000460 	.word	0x20000460
 80015cc:	20000470 	.word	0x20000470
 80015d0:	2000047e 	.word	0x2000047e
 80015d4:	438c0000 	.word	0x438c0000
 80015d8:	438e8000 	.word	0x438e8000
 80015dc:	43a50000 	.word	0x43a50000

080015e0 <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MPU9250_updateDMA+0x38>)
 80015e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10f      	bne.n	8001610 <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MPU9250_updateDMA+0x38>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MPU9250_updateDMA+0x38>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	230e      	movs	r3, #14
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MPU9250_updateDMA+0x3c>)
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2301      	movs	r3, #1
 8001606:	223b      	movs	r2, #59	; 0x3b
 8001608:	21d0      	movs	r1, #208	; 0xd0
 800160a:	f009 f825 	bl	800a658 <HAL_I2C_Mem_Read_DMA>
 800160e:	e000      	b.n	8001612 <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8001610:	bf00      	nop
}
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000408 	.word	0x20000408
 800161c:	20000470 	.word	0x20000470

08001620 <MPU9250_i2cRxCpltCallback>:

void MPU9250_i2cRxCpltCallback(){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MPU9250_i2cRxCpltCallback+0x80>)
 8001628:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800162c:	2b01      	cmp	r3, #1
 800162e:	d125      	bne.n	800167c <MPU9250_i2cRxCpltCallback+0x5c>
		if(MPU9250_calRawData() != MPU9250_Fail){
 8001630:	f000 f83a 	bl	80016a8 <MPU9250_calRawData>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MPU9250_i2cRxCpltCallback+0x1e>
			MPU9250_calCalibValue();
 800163a:	f000 f8b7 	bl	80017ac <MPU9250_calCalibValue>
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 800163e:	f011 fffd 	bl	801363c <xTaskGetTickCount>
 8001642:	4602      	mov	r2, r0
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MPU9250_i2cRxCpltCallback+0x80>)
 8001646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b0a      	cmp	r3, #10
 800164e:	d921      	bls.n	8001694 <MPU9250_i2cRxCpltCallback+0x74>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MPU9250_i2cRxCpltCallback+0x80>)
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MPU9250_i2cRxCpltCallback+0x80>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	2307      	movs	r3, #7
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MPU9250_i2cRxCpltCallback+0x84>)
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	2118      	movs	r1, #24
 800166a:	f008 fff5 	bl	800a658 <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 800166e:	f011 ffe5 	bl	801363c <xTaskGetTickCount>
 8001672:	4602      	mov	r2, r0
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <MPU9250_i2cRxCpltCallback+0x80>)
 8001676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return;
 800167a:	e00f      	b.n	800169c <MPU9250_i2cRxCpltCallback+0x7c>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MPU9250_i2cRxCpltCallback+0x80>)
 800167e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001682:	2b02      	cmp	r3, #2
 8001684:	d106      	bne.n	8001694 <MPU9250_i2cRxCpltCallback+0x74>
			if(AK8963_calRawData() == MPU9250_Success){
 8001686:	f000 f903 	bl	8001890 <AK8963_calRawData>
 800168a:	4603      	mov	r3, r0
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <MPU9250_i2cRxCpltCallback+0x74>
				AK8963_calCalibValue();
 8001690:	f000 f93c 	bl	800190c <AK8963_calCalibValue>
			}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <MPU9250_i2cRxCpltCallback+0x80>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000408 	.word	0x20000408
 80016a4:	2000047e 	.word	0x2000047e

080016a8 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 80016ac:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <MPU9250_calRawData+0x100>)
 80016ae:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <MPU9250_calRawData+0x100>)
 80016b8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	425b      	negs	r3, r3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <MPU9250_calRawData+0x100>)
 80016cc:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 80016ce:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <MPU9250_calRawData+0x100>)
 80016d0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <MPU9250_calRawData+0x100>)
 80016da:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	425b      	negs	r3, r3
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <MPU9250_calRawData+0x100>)
 80016ee:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <MPU9250_calRawData+0x100>)
 80016f2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <MPU9250_calRawData+0x100>)
 80016fc:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001700:	b21b      	sxth	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b21b      	sxth	r3, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	425b      	negs	r3, r3
 800170a:	b29b      	uxth	r3, r3
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001710:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001714:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21a      	sxth	r2, r3
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MPU9250_calRawData+0x100>)
 800171e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21a      	sxth	r2, r3
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MPU9250_calRawData+0x100>)
 800172a:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MPU9250_calRawData+0x100>)
 800172e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21a      	sxth	r2, r3
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001738:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800173c:	b21b      	sxth	r3, r3
 800173e:	4313      	orrs	r3, r2
 8001740:	b21a      	sxth	r2, r3
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001744:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001748:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b21a      	sxth	r2, r3
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001752:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001756:	b21b      	sxth	r3, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MPU9250_calRawData+0x100>)
 800175e:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001762:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MPU9250_calRawData+0x100>)
 800176c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001778:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MPU9250_calRawData+0x100>)
 800177c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <MPU9250_calRawData+0xf4>
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001786:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <MPU9250_calRawData+0xf4>
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MPU9250_calRawData+0x100>)
 8001790:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <MPU9250_calRawData+0xf4>
 8001798:	2300      	movs	r3, #0
 800179a:	e000      	b.n	800179e <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000408 	.word	0x20000408

080017ac <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 80017b0:	4b35      	ldr	r3, [pc, #212]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 80017b2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017be:	4b32      	ldr	r3, [pc, #200]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 80017c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 80017ca:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 80017d0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 80017de:	edd3 7a02 	vldr	s15, [r3, #8]
 80017e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 80017e8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 80017ec:	4b26      	ldr	r3, [pc, #152]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 80017ee:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 80017fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 8001806:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 800180c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 800181a:	edd3 7a03 	vldr	s15, [r3, #12]
 800181e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001822:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800188c <MPU9250_calCalibValue+0xe0>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 800182c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 8001832:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 8001840:	edd3 7a03 	vldr	s15, [r3, #12]
 8001844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001848:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800188c <MPU9250_calCalibValue+0xe0>
 800184c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 8001852:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 8001858:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 8001866:	edd3 7a03 	vldr	s15, [r3, #12]
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800188c <MPU9250_calCalibValue+0xe0>
 8001872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <MPU9250_calCalibValue+0xdc>)
 8001878:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000408 	.word	0x20000408
 800188c:	3c8efa35 	.word	0x3c8efa35

08001890 <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <AK8963_calRawData+0x78>)
 8001896:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <AK8963_calRawData+0x16>
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02b      	b.n	80018fe <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <AK8963_calRawData+0x78>)
 80018a8:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <AK8963_calRawData+0x78>)
 80018b2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <AK8963_calRawData+0x78>)
 80018be:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <AK8963_calRawData+0x78>)
 80018c2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <AK8963_calRawData+0x78>)
 80018cc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <AK8963_calRawData+0x78>)
 80018d8:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <AK8963_calRawData+0x78>)
 80018dc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <AK8963_calRawData+0x78>)
 80018e6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	425b      	negs	r3, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <AK8963_calRawData+0x78>)
 80018fa:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 80018fc:	2301      	movs	r3, #1
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	20000408 	.word	0x20000408

0800190c <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001912:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001920:	edd3 7a04 	vldr	s15, [r3, #16]
 8001924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 800192a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800192e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001934:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 800193e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001944:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001952:	edd3 7a04 	vldr	s15, [r3, #16]
 8001956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 800195c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001966:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800196a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001970:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001976:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001984:	edd3 7a04 	vldr	s15, [r3, #16]
 8001988:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 800198e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 8001998:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800199c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <AK8963_calCalibValue+0xa4>)
 80019a2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	20000408 	.word	0x20000408

080019b4 <MPU9250_getMres>:

void MPU9250_getMres() {
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MPU9250_getMres+0x2c>)
 80019ba:	799b      	ldrb	r3, [r3, #6]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <MPU9250_getMres+0x12>
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d004      	beq.n	80019ce <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 80019c4:	e007      	b.n	80019d6 <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MPU9250_getMres+0x2c>)
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <MPU9250_getMres+0x30>)
 80019ca:	611a      	str	r2, [r3, #16]
		  break;
 80019cc:	e003      	b.n	80019d6 <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <MPU9250_getMres+0x2c>)
 80019d0:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <MPU9250_getMres+0x34>)
 80019d2:	611a      	str	r2, [r3, #16]
		  break;
 80019d4:	bf00      	nop
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	20000408 	.word	0x20000408
 80019e4:	40bfebff 	.word	0x40bfebff
 80019e8:	3fbfebff 	.word	0x3fbfebff

080019ec <MPU9250_getGres>:

void MPU9250_getGres() {
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <MPU9250_getGres+0x50>)
 80019f2:	795b      	ldrb	r3, [r3, #5]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d81b      	bhi.n	8001a30 <MPU9250_getGres+0x44>
 80019f8:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <MPU9250_getGres+0x14>)
 80019fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fe:	bf00      	nop
 8001a00:	08001a11 	.word	0x08001a11
 8001a04:	08001a19 	.word	0x08001a19
 8001a08:	08001a21 	.word	0x08001a21
 8001a0c:	08001a29 	.word	0x08001a29
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <MPU9250_getGres+0x50>)
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <MPU9250_getGres+0x54>)
 8001a14:	60da      	str	r2, [r3, #12]
          break;
 8001a16:	e00b      	b.n	8001a30 <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MPU9250_getGres+0x50>)
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <MPU9250_getGres+0x58>)
 8001a1c:	60da      	str	r2, [r3, #12]
          break;
 8001a1e:	e007      	b.n	8001a30 <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MPU9250_getGres+0x50>)
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <MPU9250_getGres+0x5c>)
 8001a24:	60da      	str	r2, [r3, #12]
          break;
 8001a26:	e003      	b.n	8001a30 <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <MPU9250_getGres+0x50>)
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <MPU9250_getGres+0x60>)
 8001a2c:	60da      	str	r2, [r3, #12]
          break;
 8001a2e:	bf00      	nop
  }
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000408 	.word	0x20000408
 8001a40:	3bfa0000 	.word	0x3bfa0000
 8001a44:	3c7a0000 	.word	0x3c7a0000
 8001a48:	3cfa0000 	.word	0x3cfa0000
 8001a4c:	3d7a0000 	.word	0x3d7a0000

08001a50 <MPU9250_getAres>:


void MPU9250_getAres() {
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MPU9250_getAres+0x58>)
 8001a56:	791b      	ldrb	r3, [r3, #4]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d81f      	bhi.n	8001a9c <MPU9250_getAres+0x4c>
 8001a5c:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <MPU9250_getAres+0x14>)
 8001a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a62:	bf00      	nop
 8001a64:	08001a75 	.word	0x08001a75
 8001a68:	08001a7f 	.word	0x08001a7f
 8001a6c:	08001a89 	.word	0x08001a89
 8001a70:	08001a93 	.word	0x08001a93
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MPU9250_getAres+0x58>)
 8001a76:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001a7a:	609a      	str	r2, [r3, #8]
          break;
 8001a7c:	e00e      	b.n	8001a9c <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <MPU9250_getAres+0x58>)
 8001a80:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001a84:	609a      	str	r2, [r3, #8]
          break;
 8001a86:	e009      	b.n	8001a9c <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <MPU9250_getAres+0x58>)
 8001a8a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001a8e:	609a      	str	r2, [r3, #8]
          break;
 8001a90:	e004      	b.n	8001a9c <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <MPU9250_getAres+0x58>)
 8001a94:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001a98:	609a      	str	r2, [r3, #8]
          break;
 8001a9a:	bf00      	nop
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000408 	.word	0x20000408

08001aac <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	216b      	movs	r1, #107	; 0x6b
 8001ab4:	20d0      	movs	r0, #208	; 0xd0
 8001ab6:	f000 fb69 	bl	800218c <MPU9250_writeByte>
    HAL_Delay(10);
 8001aba:	200a      	movs	r0, #10
 8001abc:	f007 fa2c 	bl	8008f18 <HAL_Delay>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001aca:	2200      	movs	r2, #0
 8001acc:	210a      	movs	r1, #10
 8001ace:	2018      	movs	r0, #24
 8001ad0:	f000 fb5c 	bl	800218c <MPU9250_writeByte>
	HAL_Delay(10);
 8001ad4:	200a      	movs	r0, #10
 8001ad6:	f007 fa1f 	bl	8008f18 <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001ada:	220f      	movs	r2, #15
 8001adc:	210a      	movs	r1, #10
 8001ade:	2018      	movs	r0, #24
 8001ae0:	f000 fb54 	bl	800218c <MPU9250_writeByte>
	HAL_Delay(10);
 8001ae4:	200a      	movs	r0, #10
 8001ae6:	f007 fa17 	bl	8008f18 <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2203      	movs	r2, #3
 8001aee:	2110      	movs	r1, #16
 8001af0:	2018      	movs	r0, #24
 8001af2:	f000 fb69 	bl	80021c8 <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8001af6:	793b      	ldrb	r3, [r7, #4]
 8001af8:	3b80      	subs	r3, #128	; 0x80
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b02:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001b98 <MPU9250_initAK8963+0xd4>
 8001b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <MPU9250_initAK8963+0xd8>)
 8001b14:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001b18:	797b      	ldrb	r3, [r7, #5]
 8001b1a:	3b80      	subs	r3, #128	; 0x80
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b24:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001b98 <MPU9250_initAK8963+0xd4>
 8001b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MPU9250_initAK8963+0xd8>)
 8001b36:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 8001b3a:	79bb      	ldrb	r3, [r7, #6]
 8001b3c:	3b80      	subs	r3, #128	; 0x80
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b46:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b98 <MPU9250_initAK8963+0xd4>
 8001b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MPU9250_initAK8963+0xd8>)
 8001b58:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	210a      	movs	r1, #10
 8001b60:	2018      	movs	r0, #24
 8001b62:	f000 fb13 	bl	800218c <MPU9250_writeByte>
	HAL_Delay(10);
 8001b66:	200a      	movs	r0, #10
 8001b68:	f007 f9d6 	bl	8008f18 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MPU9250_initAK8963+0xd8>)
 8001b6e:	799b      	ldrb	r3, [r3, #6]
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	b25a      	sxtb	r2, r3
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MPU9250_initAK8963+0xd8>)
 8001b76:	79db      	ldrb	r3, [r3, #7]
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	210a      	movs	r1, #10
 8001b84:	2018      	movs	r0, #24
 8001b86:	f000 fb01 	bl	800218c <MPU9250_writeByte>
	HAL_Delay(10);
 8001b8a:	200a      	movs	r0, #10
 8001b8c:	f007 f9c4 	bl	8008f18 <HAL_Delay>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	43800000 	.word	0x43800000
 8001b9c:	20000408 	.word	0x20000408

08001ba0 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	216b      	movs	r1, #107	; 0x6b
 8001baa:	20d0      	movs	r0, #208	; 0xd0
 8001bac:	f000 faee 	bl	800218c <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001bb0:	2064      	movs	r0, #100	; 0x64
 8001bb2:	f007 f9b1 	bl	8008f18 <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	216b      	movs	r1, #107	; 0x6b
 8001bba:	20d0      	movs	r0, #208	; 0xd0
 8001bbc:	f000 fae6 	bl	800218c <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	211a      	movs	r1, #26
 8001bc4:	20d0      	movs	r0, #208	; 0xd0
 8001bc6:	f000 fae1 	bl	800218c <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001bca:	2204      	movs	r2, #4
 8001bcc:	2119      	movs	r1, #25
 8001bce:	20d0      	movs	r0, #208	; 0xd0
 8001bd0:	f000 fadc 	bl	800218c <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8001bd4:	211b      	movs	r1, #27
 8001bd6:	20d0      	movs	r0, #208	; 0xd0
 8001bd8:	f000 fb18 	bl	800220c <MPU9250_readByte>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f023 0302 	bic.w	r3, r3, #2
 8001be6:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f023 0318 	bic.w	r3, r3, #24
 8001bee:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <MPU9250_initMPU9250+0xe4>)
 8001bf2:	795b      	ldrb	r3, [r3, #5]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	b25a      	sxtb	r2, r3
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	461a      	mov	r2, r3
 8001c06:	211b      	movs	r1, #27
 8001c08:	20d0      	movs	r0, #208	; 0xd0
 8001c0a:	f000 fabf 	bl	800218c <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8001c0e:	211c      	movs	r1, #28
 8001c10:	20d0      	movs	r0, #208	; 0xd0
 8001c12:	f000 fafb 	bl	800220c <MPU9250_readByte>
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f023 0318 	bic.w	r3, r3, #24
 8001c20:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MPU9250_initMPU9250+0xe4>)
 8001c24:	791b      	ldrb	r3, [r3, #4]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	b25a      	sxtb	r2, r3
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	461a      	mov	r2, r3
 8001c38:	211c      	movs	r1, #28
 8001c3a:	20d0      	movs	r0, #208	; 0xd0
 8001c3c:	f000 faa6 	bl	800218c <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8001c40:	211d      	movs	r1, #29
 8001c42:	20d0      	movs	r0, #208	; 0xd0
 8001c44:	f000 fae2 	bl	800220c <MPU9250_readByte>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f023 030f 	bic.w	r3, r3, #15
 8001c52:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f043 0303 	orr.w	r3, r3, #3
 8001c5a:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	211d      	movs	r1, #29
 8001c62:	20d0      	movs	r0, #208	; 0xd0
 8001c64:	f000 fa92 	bl	800218c <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001c68:	2222      	movs	r2, #34	; 0x22
 8001c6a:	2137      	movs	r1, #55	; 0x37
 8001c6c:	20d0      	movs	r0, #208	; 0xd0
 8001c6e:	f000 fa8d 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001c72:	2201      	movs	r2, #1
 8001c74:	2138      	movs	r1, #56	; 0x38
 8001c76:	20d0      	movs	r0, #208	; 0xd0
 8001c78:	f000 fa88 	bl	800218c <MPU9250_writeByte>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000408 	.word	0x20000408

08001c88 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b094      	sub	sp, #80	; 0x50
 8001c8c:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c92:	2300      	movs	r3, #0
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	216b      	movs	r1, #107	; 0x6b
 8001caa:	20d0      	movs	r0, #208	; 0xd0
 8001cac:	f000 fa6e 	bl	800218c <MPU9250_writeByte>
  HAL_Delay(100);
 8001cb0:	2064      	movs	r0, #100	; 0x64
 8001cb2:	f007 f931 	bl	8008f18 <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	216b      	movs	r1, #107	; 0x6b
 8001cba:	20d0      	movs	r0, #208	; 0xd0
 8001cbc:	f000 fa66 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	216c      	movs	r1, #108	; 0x6c
 8001cc4:	20d0      	movs	r0, #208	; 0xd0
 8001cc6:	f000 fa61 	bl	800218c <MPU9250_writeByte>
  HAL_Delay(200);
 8001cca:	20c8      	movs	r0, #200	; 0xc8
 8001ccc:	f007 f924 	bl	8008f18 <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2138      	movs	r1, #56	; 0x38
 8001cd4:	20d0      	movs	r0, #208	; 0xd0
 8001cd6:	f000 fa59 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2123      	movs	r1, #35	; 0x23
 8001cde:	20d0      	movs	r0, #208	; 0xd0
 8001ce0:	f000 fa54 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	216b      	movs	r1, #107	; 0x6b
 8001ce8:	20d0      	movs	r0, #208	; 0xd0
 8001cea:	f000 fa4f 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2124      	movs	r1, #36	; 0x24
 8001cf2:	20d0      	movs	r0, #208	; 0xd0
 8001cf4:	f000 fa4a 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	216a      	movs	r1, #106	; 0x6a
 8001cfc:	20d0      	movs	r0, #208	; 0xd0
 8001cfe:	f000 fa45 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001d02:	220c      	movs	r2, #12
 8001d04:	216a      	movs	r1, #106	; 0x6a
 8001d06:	20d0      	movs	r0, #208	; 0xd0
 8001d08:	f000 fa40 	bl	800218c <MPU9250_writeByte>
  HAL_Delay(15);
 8001d0c:	200f      	movs	r0, #15
 8001d0e:	f007 f903 	bl	8008f18 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001d12:	2201      	movs	r2, #1
 8001d14:	211a      	movs	r1, #26
 8001d16:	20d0      	movs	r0, #208	; 0xd0
 8001d18:	f000 fa38 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2119      	movs	r1, #25
 8001d20:	20d0      	movs	r0, #208	; 0xd0
 8001d22:	f000 fa33 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001d26:	2200      	movs	r2, #0
 8001d28:	211b      	movs	r1, #27
 8001d2a:	20d0      	movs	r0, #208	; 0xd0
 8001d2c:	f000 fa2e 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001d30:	2200      	movs	r2, #0
 8001d32:	211c      	movs	r1, #28
 8001d34:	20d0      	movs	r0, #208	; 0xd0
 8001d36:	f000 fa29 	bl	800218c <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	216a      	movs	r1, #106	; 0x6a
 8001d3e:	20d0      	movs	r0, #208	; 0xd0
 8001d40:	f000 fa24 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001d44:	2278      	movs	r2, #120	; 0x78
 8001d46:	2123      	movs	r1, #35	; 0x23
 8001d48:	20d0      	movs	r0, #208	; 0xd0
 8001d4a:	f000 fa1f 	bl	800218c <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001d4e:	2028      	movs	r0, #40	; 0x28
 8001d50:	f007 f8e2 	bl	8008f18 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001d54:	2200      	movs	r2, #0
 8001d56:	2123      	movs	r1, #35	; 0x23
 8001d58:	20d0      	movs	r0, #208	; 0xd0
 8001d5a:	f000 fa17 	bl	800218c <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001d5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d62:	2202      	movs	r2, #2
 8001d64:	2172      	movs	r1, #114	; 0x72
 8001d66:	20d0      	movs	r0, #208	; 0xd0
 8001d68:	f000 fa2e 	bl	80021c8 <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001d6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001d82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001d86:	4ab3      	ldr	r2, [pc, #716]	; (8002054 <MPU9250_calibrateMPU9250+0x3cc>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	08db      	lsrs	r3, r3, #3
 8001d8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001d98:	e071      	b.n	8001e7e <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	813b      	strh	r3, [r7, #8]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	817b      	strh	r3, [r7, #10]
 8001da2:	2300      	movs	r3, #0
 8001da4:	81bb      	strh	r3, [r7, #12]
 8001da6:	2300      	movs	r3, #0
 8001da8:	803b      	strh	r3, [r7, #0]
 8001daa:	2300      	movs	r3, #0
 8001dac:	807b      	strh	r3, [r7, #2]
 8001dae:	2300      	movs	r3, #0
 8001db0:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8001db2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001db6:	220c      	movs	r2, #12
 8001db8:	2174      	movs	r1, #116	; 0x74
 8001dba:	20d0      	movs	r0, #208	; 0xd0
 8001dbc:	f000 fa04 	bl	80021c8 <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001dc0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001dd4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	b21a      	sxth	r2, r3
 8001ddc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001de8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001dfc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001e10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001e24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e3e:	4413      	add	r3, r2
 8001e40:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e48:	4413      	add	r3, r2
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001e66:	4413      	add	r3, r2
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 8001e74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001e7e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001e82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d387      	bcc.n	8001d9a <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001e8a:	6a3a      	ldr	r2, [r7, #32]
 8001e8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e90:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e94:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 8001e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 8001ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ea8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 8001eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 8001eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ebc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ec0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 8001ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ec8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ecc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <MPU9250_calibrateMPU9250+0x3d0>)
 8001ed4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee4:	ee17 3a90 	vmov	r3, s15
 8001ee8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	dd05      	ble.n	8001efe <MPU9250_calibrateMPU9250+0x276>
 8001ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ef4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efc:	e004      	b.n	8001f08 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f04:	4413      	add	r3, r2
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da00      	bge.n	8001f12 <MPU9250_calibrateMPU9250+0x28a>
 8001f10:	3303      	adds	r3, #3
 8001f12:	109b      	asrs	r3, r3, #2
 8001f14:	121b      	asrs	r3, r3, #8
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	425b      	negs	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da00      	bge.n	8001f26 <MPU9250_calibrateMPU9250+0x29e>
 8001f24:	3303      	adds	r3, #3
 8001f26:	109b      	asrs	r3, r3, #2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f30:	425b      	negs	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da00      	bge.n	8001f38 <MPU9250_calibrateMPU9250+0x2b0>
 8001f36:	3303      	adds	r3, #3
 8001f38:	109b      	asrs	r3, r3, #2
 8001f3a:	121b      	asrs	r3, r3, #8
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	425b      	negs	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da00      	bge.n	8001f4c <MPU9250_calibrateMPU9250+0x2c4>
 8001f4a:	3303      	adds	r3, #3
 8001f4c:	109b      	asrs	r3, r3, #2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	425b      	negs	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da00      	bge.n	8001f5e <MPU9250_calibrateMPU9250+0x2d6>
 8001f5c:	3303      	adds	r3, #3
 8001f5e:	109b      	asrs	r3, r3, #2
 8001f60:	121b      	asrs	r3, r3, #8
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6a:	425b      	negs	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	da00      	bge.n	8001f72 <MPU9250_calibrateMPU9250+0x2ea>
 8001f70:	3303      	adds	r3, #3
 8001f72:	109b      	asrs	r3, r3, #2
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8001f7a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2113      	movs	r1, #19
 8001f82:	20d0      	movs	r0, #208	; 0xd0
 8001f84:	f000 f902 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8001f88:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2114      	movs	r1, #20
 8001f90:	20d0      	movs	r0, #208	; 0xd0
 8001f92:	f000 f8fb 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 8001f96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2115      	movs	r1, #21
 8001f9e:	20d0      	movs	r0, #208	; 0xd0
 8001fa0:	f000 f8f4 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 8001fa4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2116      	movs	r1, #22
 8001fac:	20d0      	movs	r0, #208	; 0xd0
 8001fae:	f000 f8ed 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 8001fb2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2117      	movs	r1, #23
 8001fba:	20d0      	movs	r0, #208	; 0xd0
 8001fbc:	f000 f8e6 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8001fc0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2118      	movs	r1, #24
 8001fc8:	20d0      	movs	r0, #208	; 0xd0
 8001fca:	f000 f8df 	bl	800218c <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8001fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fde:	2202      	movs	r2, #2
 8001fe0:	2177      	movs	r1, #119	; 0x77
 8001fe2:	20d0      	movs	r0, #208	; 0xd0
 8001fe4:	f000 f8f0 	bl	80021c8 <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001fe8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8001ffa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ffe:	2202      	movs	r2, #2
 8002000:	217a      	movs	r1, #122	; 0x7a
 8002002:	20d0      	movs	r0, #208	; 0xd0
 8002004:	f000 f8e0 	bl	80021c8 <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8002008:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	b21b      	sxth	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 800201a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800201e:	2202      	movs	r2, #2
 8002020:	217d      	movs	r1, #125	; 0x7d
 8002022:	20d0      	movs	r0, #208	; 0xd0
 8002024:	f000 f8d0 	bl	80021c8 <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8002028:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21b      	sxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002036:	4313      	orrs	r3, r2
 8002038:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 800203a:	2301      	movs	r3, #1
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 800203e:	2300      	movs	r3, #0
 8002040:	743b      	strb	r3, [r7, #16]
 8002042:	2300      	movs	r3, #0
 8002044:	747b      	strb	r3, [r7, #17]
 8002046:	2300      	movs	r3, #0
 8002048:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 800204a:	2300      	movs	r3, #0
 800204c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002050:	e01e      	b.n	8002090 <MPU9250_calibrateMPU9250+0x408>
 8002052:	bf00      	nop
 8002054:	aaaaaaab 	.word	0xaaaaaaab
 8002058:	20000408 	.word	0x20000408
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 800205c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002066:	4413      	add	r3, r2
 8002068:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800206c:	461a      	mov	r2, r3
 800206e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <MPU9250_calibrateMPU9250+0x3fe>
 8002076:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800207a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800207e:	4413      	add	r3, r2
 8002080:	2201      	movs	r2, #1
 8002082:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 8002086:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800208a:	3301      	adds	r3, #1
 800208c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002090:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002094:	2b02      	cmp	r3, #2
 8002096:	d9e1      	bls.n	800205c <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da00      	bge.n	80020a2 <MPU9250_calibrateMPU9250+0x41a>
 80020a0:	3307      	adds	r3, #7
 80020a2:	10db      	asrs	r3, r3, #3
 80020a4:	425b      	negs	r3, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da00      	bge.n	80020b4 <MPU9250_calibrateMPU9250+0x42c>
 80020b2:	3307      	adds	r3, #7
 80020b4:	10db      	asrs	r3, r3, #3
 80020b6:	425b      	negs	r3, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	da00      	bge.n	80020c6 <MPU9250_calibrateMPU9250+0x43e>
 80020c4:	3307      	adds	r3, #7
 80020c6:	10db      	asrs	r3, r3, #3
 80020c8:	425b      	negs	r3, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	121b      	asrs	r3, r3, #8
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80020e0:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80020e4:	7c3b      	ldrb	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	121b      	asrs	r3, r3, #8
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002100:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002104:	7c7b      	ldrb	r3, [r7, #17]
 8002106:	4313      	orrs	r3, r2
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	121b      	asrs	r3, r3, #8
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002120:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002124:	7cbb      	ldrb	r3, [r7, #18]
 8002126:	4313      	orrs	r3, r2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 800212e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002132:	461a      	mov	r2, r3
 8002134:	2177      	movs	r1, #119	; 0x77
 8002136:	20d0      	movs	r0, #208	; 0xd0
 8002138:	f000 f828 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
 800213c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002140:	461a      	mov	r2, r3
 8002142:	2178      	movs	r1, #120	; 0x78
 8002144:	20d0      	movs	r0, #208	; 0xd0
 8002146:	f000 f821 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
 800214a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800214e:	461a      	mov	r2, r3
 8002150:	217a      	movs	r1, #122	; 0x7a
 8002152:	20d0      	movs	r0, #208	; 0xd0
 8002154:	f000 f81a 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
 8002158:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800215c:	461a      	mov	r2, r3
 800215e:	217b      	movs	r1, #123	; 0x7b
 8002160:	20d0      	movs	r0, #208	; 0xd0
 8002162:	f000 f813 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
 8002166:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800216a:	461a      	mov	r2, r3
 800216c:	217d      	movs	r1, #125	; 0x7d
 800216e:	20d0      	movs	r0, #208	; 0xd0
 8002170:	f000 f80c 	bl	800218c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
 8002174:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002178:	461a      	mov	r2, r3
 800217a:	217e      	movs	r1, #126	; 0x7e
 800217c:	20d0      	movs	r0, #208	; 0xd0
 800217e:	f000 f805 	bl	800218c <MPU9250_writeByte>

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 8002182:	bf00      	nop
 8002184:	3750      	adds	r7, #80	; 0x50
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop

0800218c <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af04      	add	r7, sp, #16
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
 8002196:	460b      	mov	r3, r1
 8002198:	71bb      	strb	r3, [r7, #6]
 800219a:	4613      	mov	r3, r2
 800219c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MPU9250_writeByte+0x38>)
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	b299      	uxth	r1, r3
 80021a6:	79bb      	ldrb	r3, [r7, #6]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	2364      	movs	r3, #100	; 0x64
 80021ac:	9302      	str	r3, [sp, #8]
 80021ae:	2301      	movs	r3, #1
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	1d7b      	adds	r3, r7, #5
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2301      	movs	r3, #1
 80021b8:	f007 fe70 	bl	8009e9c <HAL_I2C_Mem_Write>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000408 	.word	0x20000408

080021c8 <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af04      	add	r7, sp, #16
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	460b      	mov	r3, r1
 80021d6:	71bb      	strb	r3, [r7, #6]
 80021d8:	4613      	mov	r3, r2
 80021da:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <MPU9250_readBytes+0x40>)
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	b299      	uxth	r1, r3
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	b29c      	uxth	r4, r3
 80021e8:	797b      	ldrb	r3, [r7, #5]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2264      	movs	r2, #100	; 0x64
 80021ee:	9202      	str	r2, [sp, #8]
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	4622      	mov	r2, r4
 80021fa:	f007 ff49 	bl	800a090 <HAL_I2C_Mem_Read>
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bd90      	pop	{r4, r7, pc}
 8002206:	bf00      	nop
 8002208:	20000408 	.word	0x20000408

0800220c <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	460a      	mov	r2, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 800221c:	f107 030f 	add.w	r3, r7, #15
 8002220:	79b9      	ldrb	r1, [r7, #6]
 8002222:	79f8      	ldrb	r0, [r7, #7]
 8002224:	2201      	movs	r2, #1
 8002226:	f7ff ffcf 	bl	80021c8 <MPU9250_readBytes>
	return data;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <BME280>:
#include "bme280.h"
#include "math.h"

#define BME280_I2C bme280.hi2c

void BME280(I2C_HandleTypeDef *hi2c){
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	bme280.hi2c = hi2c;
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <BME280+0x1c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
	BME280_reset();
 8002242:	f000 f88f 	bl	8002364 <BME280_reset>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200007a0 	.word	0x200007a0

08002254 <BME280_updateIT>:

void BME280_updateIT(){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af02      	add	r7, sp, #8
	while(1){
		if(bm_i2cFlag == bm_i2cIdle){
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <BME280_updateIT+0x38>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10e      	bne.n	8002280 <BME280_updateIT+0x2c>
			HAL_I2C_Mem_Read_IT(BME280_I2C, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <BME280_updateIT+0x3c>)
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	2306      	movs	r3, #6
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <BME280_updateIT+0x40>)
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2301      	movs	r3, #1
 8002270:	22f7      	movs	r2, #247	; 0xf7
 8002272:	21ec      	movs	r1, #236	; 0xec
 8002274:	f008 f932 	bl	800a4dc <HAL_I2C_Mem_Read_IT>
			bm_i2cFlag = bm_i2cBME280;
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <BME280_updateIT+0x38>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
			return;
 800227e:	e003      	b.n	8002288 <BME280_updateIT+0x34>
		}
		else osDelay(1);
 8002280:	2001      	movs	r0, #1
 8002282:	f00f fee7 	bl	8012054 <osDelay>
		if(bm_i2cFlag == bm_i2cIdle){
 8002286:	e7e8      	b.n	800225a <BME280_updateIT+0x6>
	}
}
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000079c 	.word	0x2000079c
 8002290:	200007a0 	.word	0x200007a0
 8002294:	200007c0 	.word	0x200007c0

08002298 <BME280_i2cRxCpltCallback>:

void BME280_i2cRxCpltCallback(){
 8002298:	b598      	push	{r3, r4, r7, lr}
 800229a:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return;
 800229c:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <BME280_i2cRxCpltCallback+0xbc>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d154      	bne.n	800234e <BME280_i2cRxCpltCallback+0xb6>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 80022a4:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 80022a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022aa:	061a      	lsls	r2, r3, #24
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 80022ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	431a      	orrs	r2, r3
 80022b6:	4b28      	ldr	r3, [pc, #160]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 80022b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	4313      	orrs	r3, r2
 80022c0:	131b      	asrs	r3, r3, #12
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 80022c6:	609a      	str	r2, [r3, #8]
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 80022ca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80022ce:	061a      	lsls	r2, r3, #24
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 80022d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	431a      	orrs	r2, r3
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 80022dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	4313      	orrs	r3, r2
 80022e4:	131b      	asrs	r3, r3, #12
 80022e6:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 80022e8:	6053      	str	r3, [r2, #4]

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f9cc 	bl	800268c <BME280_compensate_P>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f914 	bl	8000524 <__aeabi_ui2d>
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <BME280_i2cRxCpltCallback+0xc4>)
 8002302:	f7fe fab3 	bl	800086c <__aeabi_ddiv>
 8002306:	4603      	mov	r3, r0
 8002308:	460c      	mov	r4, r1
 800230a:	4618      	mov	r0, r3
 800230c:	4621      	mov	r1, r4
 800230e:	f7fe fc7b 	bl	8000c08 <__aeabi_d2f>
 8002312:	4602      	mov	r2, r0
 8002314:	4b10      	ldr	r3, [pc, #64]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 8002316:	615a      	str	r2, [r3, #20]
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f979 	bl	8002614 <BME280_compensate_T>
 8002322:	4603      	mov	r3, r0
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f90d 	bl	8000544 <__aeabi_i2d>
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <BME280_i2cRxCpltCallback+0xc8>)
 8002330:	f7fe fa9c 	bl	800086c <__aeabi_ddiv>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	4618      	mov	r0, r3
 800233a:	4621      	mov	r1, r4
 800233c:	f7fe fc64 	bl	8000c08 <__aeabi_d2f>
 8002340:	4602      	mov	r2, r0
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <BME280_i2cRxCpltCallback+0xc0>)
 8002344:	611a      	str	r2, [r3, #16]

//    bme280.alt = 44330 * (1.0 - pow(bme280.P / bme280.base_P, 0.1903));

    bm_i2cFlag = bm_i2cIdle;
 8002346:	4b03      	ldr	r3, [pc, #12]	; (8002354 <BME280_i2cRxCpltCallback+0xbc>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e000      	b.n	8002350 <BME280_i2cRxCpltCallback+0xb8>
	if(bm_i2cFlag != bm_i2cBME280) return;
 800234e:	bf00      	nop
}
 8002350:	bd98      	pop	{r3, r4, r7, pc}
 8002352:	bf00      	nop
 8002354:	2000079c 	.word	0x2000079c
 8002358:	200007a0 	.word	0x200007a0
 800235c:	40d90000 	.word	0x40d90000
 8002360:	40590000 	.word	0x40590000

08002364 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 8002368:	22b6      	movs	r2, #182	; 0xb6
 800236a:	21e0      	movs	r1, #224	; 0xe0
 800236c:	20ec      	movs	r0, #236	; 0xec
 800236e:	f000 fb3b 	bl	80029e8 <BME280_writeByte>
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}

08002376 <BME280_readPressure>:
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_TEMP_MSB, 3, &rawData[0]);
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
}

int32_t BME280_readPressure(){
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_PRESS_MSB, 3, &rawData[0]);
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2203      	movs	r2, #3
 8002380:	21f7      	movs	r1, #247	; 0xf7
 8002382:	20ec      	movs	r0, #236	; 0xec
 8002384:	f000 fb4e 	bl	8002a24 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8002388:	793b      	ldrb	r3, [r7, #4]
 800238a:	061a      	lsls	r2, r3, #24
 800238c:	797b      	ldrb	r3, [r7, #5]
 800238e:	041b      	lsls	r3, r3, #16
 8002390:	431a      	orrs	r2, r3
 8002392:	79bb      	ldrb	r3, [r7, #6]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	4313      	orrs	r3, r2
 8002398:	131b      	asrs	r3, r3, #12
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <BME280_init>:
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_HUM_MSB, 2, &rawData[0]);
	  return (int16_t) (((int16_t) rawData[0] << 8 | rawData[1]) );
}

void BME280_init(uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b08f      	sub	sp, #60	; 0x3c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4604      	mov	r4, r0
 80023ac:	4608      	mov	r0, r1
 80023ae:	4611      	mov	r1, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	4603      	mov	r3, r0
 80023b8:	71bb      	strb	r3, [r7, #6]
 80023ba:	460b      	mov	r3, r1
 80023bc:	717b      	strb	r3, [r7, #5]
 80023be:	4613      	mov	r3, r2
 80023c0:	713b      	strb	r3, [r7, #4]
	// Configure the BME280
	  // Set H oversampling rate
	  BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	21f2      	movs	r1, #242	; 0xf2
 80023ce:	20ec      	movs	r0, #236	; 0xec
 80023d0:	f000 fb0a 	bl	80029e8 <BME280_writeByte>
	  // Set T and P oversampling rates and sensor mode
  	  BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 80023d4:	797b      	ldrb	r3, [r7, #5]
 80023d6:	015b      	lsls	r3, r3, #5
 80023d8:	b25a      	sxtb	r2, r3
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b25a      	sxtb	r2, r3
 80023e4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	21f4      	movs	r1, #244	; 0xf4
 80023f2:	20ec      	movs	r0, #236	; 0xec
 80023f4:	f000 faf8 	bl	80029e8 <BME280_writeByte>
	  // Set standby time interval in normal mode and bandwidth
	  BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 80023f8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023fc:	015b      	lsls	r3, r3, #5
 80023fe:	b25a      	sxtb	r2, r3
 8002400:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	b25b      	sxtb	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	b25b      	sxtb	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	21f5      	movs	r1, #245	; 0xf5
 8002412:	20ec      	movs	r0, #236	; 0xec
 8002414:	f000 fae8 	bl	80029e8 <BME280_writeByte>

	  //wait.
	  HAL_Delay(50);
 8002418:	2032      	movs	r0, #50	; 0x32
 800241a:	f006 fd7d 	bl	8008f18 <HAL_Delay>
	  uint8_t calib[26];
	  BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	221a      	movs	r2, #26
 8002424:	2188      	movs	r1, #136	; 0x88
 8002426:	20ec      	movs	r0, #236	; 0xec
 8002428:	f000 fafc 	bl	8002a24 <BME280_readBytes>
	  bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 800242c:	7a7b      	ldrb	r3, [r7, #9]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	b21a      	sxth	r2, r3
 8002432:	7a3b      	ldrb	r3, [r7, #8]
 8002434:	b21b      	sxth	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	b21b      	sxth	r3, r3
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b73      	ldr	r3, [pc, #460]	; (800260c <BME280_init+0x268>)
 800243e:	859a      	strh	r2, [r3, #44]	; 0x2c
	  bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 8002440:	7afb      	ldrb	r3, [r7, #11]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	b21a      	sxth	r2, r3
 8002446:	7abb      	ldrb	r3, [r7, #10]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21a      	sxth	r2, r3
 800244e:	4b6f      	ldr	r3, [pc, #444]	; (800260c <BME280_init+0x268>)
 8002450:	869a      	strh	r2, [r3, #52]	; 0x34
	  bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b21a      	sxth	r2, r3
 8002458:	7b3b      	ldrb	r3, [r7, #12]
 800245a:	b21b      	sxth	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b21a      	sxth	r2, r3
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <BME280_init+0x268>)
 8002462:	86da      	strh	r2, [r3, #54]	; 0x36
	  bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	b21a      	sxth	r2, r3
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	b21b      	sxth	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b21b      	sxth	r3, r3
 8002472:	b29a      	uxth	r2, r3
 8002474:	4b65      	ldr	r3, [pc, #404]	; (800260c <BME280_init+0x268>)
 8002476:	85da      	strh	r2, [r3, #46]	; 0x2e
	  bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 8002478:	7c7b      	ldrb	r3, [r7, #17]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	b21a      	sxth	r2, r3
 800247e:	7c3b      	ldrb	r3, [r7, #16]
 8002480:	b21b      	sxth	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b21a      	sxth	r2, r3
 8002486:	4b61      	ldr	r3, [pc, #388]	; (800260c <BME280_init+0x268>)
 8002488:	871a      	strh	r2, [r3, #56]	; 0x38
	  bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	b21a      	sxth	r2, r3
 8002490:	7cbb      	ldrb	r3, [r7, #18]
 8002492:	b21b      	sxth	r3, r3
 8002494:	4313      	orrs	r3, r2
 8002496:	b21a      	sxth	r2, r3
 8002498:	4b5c      	ldr	r3, [pc, #368]	; (800260c <BME280_init+0x268>)
 800249a:	875a      	strh	r2, [r3, #58]	; 0x3a
	  bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 800249c:	7d7b      	ldrb	r3, [r7, #21]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	b21a      	sxth	r2, r3
 80024a2:	7d3b      	ldrb	r3, [r7, #20]
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	4b58      	ldr	r3, [pc, #352]	; (800260c <BME280_init+0x268>)
 80024ac:	879a      	strh	r2, [r3, #60]	; 0x3c
	  bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	7dbb      	ldrb	r3, [r7, #22]
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b21a      	sxth	r2, r3
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <BME280_init+0x268>)
 80024be:	87da      	strh	r2, [r3, #62]	; 0x3e
	  bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 80024c0:	7e7b      	ldrb	r3, [r7, #25]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	7e3b      	ldrb	r3, [r7, #24]
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b21a      	sxth	r2, r3
 80024ce:	4b4f      	ldr	r3, [pc, #316]	; (800260c <BME280_init+0x268>)
 80024d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	  bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 80024d4:	7efb      	ldrb	r3, [r7, #27]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	b21a      	sxth	r2, r3
 80024da:	7ebb      	ldrb	r3, [r7, #26]
 80024dc:	b21b      	sxth	r3, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	4b4a      	ldr	r3, [pc, #296]	; (800260c <BME280_init+0x268>)
 80024e4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	  bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 80024e8:	7f7b      	ldrb	r3, [r7, #29]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	7f3b      	ldrb	r3, [r7, #28]
 80024f0:	b21b      	sxth	r3, r3
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	4b45      	ldr	r3, [pc, #276]	; (800260c <BME280_init+0x268>)
 80024f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	  bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	b21a      	sxth	r2, r3
 8002502:	7fbb      	ldrb	r3, [r7, #30]
 8002504:	b21b      	sxth	r3, r3
 8002506:	4313      	orrs	r3, r2
 8002508:	b21a      	sxth	r2, r3
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <BME280_init+0x268>)
 800250c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  bme280._dig_H1 = calib[25];
 8002510:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002514:	4b3d      	ldr	r3, [pc, #244]	; (800260c <BME280_init+0x268>)
 8002516:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	  BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	2207      	movs	r2, #7
 8002520:	21e1      	movs	r1, #225	; 0xe1
 8002522:	20ec      	movs	r0, #236	; 0xec
 8002524:	f000 fa7e 	bl	8002a24 <BME280_readBytes>
	  bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 8002528:	7a7b      	ldrb	r3, [r7, #9]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	b21a      	sxth	r2, r3
 800252e:	7a3b      	ldrb	r3, [r7, #8]
 8002530:	b21b      	sxth	r3, r3
 8002532:	4313      	orrs	r3, r2
 8002534:	b21a      	sxth	r2, r3
 8002536:	4b35      	ldr	r3, [pc, #212]	; (800260c <BME280_init+0x268>)
 8002538:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  bme280._dig_H3 = calib[2];
 800253c:	7aba      	ldrb	r2, [r7, #10]
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <BME280_init+0x268>)
 8002540:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	  bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	021a      	lsls	r2, r3, #8
 8002548:	7b3b      	ldrb	r3, [r7, #12]
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	111b      	asrs	r3, r3, #4
 8002552:	b29a      	uxth	r2, r3
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <BME280_init+0x268>)
 8002556:	861a      	strh	r2, [r3, #48]	; 0x30
	  bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 8002558:	7b7b      	ldrb	r3, [r7, #13]
 800255a:	021a      	lsls	r2, r3, #8
 800255c:	7b3b      	ldrb	r3, [r7, #12]
 800255e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002562:	4313      	orrs	r3, r2
 8002564:	111b      	asrs	r3, r3, #4
 8002566:	b29a      	uxth	r2, r3
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <BME280_init+0x268>)
 800256a:	865a      	strh	r2, [r3, #50]	; 0x32
	  bme280._dig_H6 = calib[6];
 800256c:	7bba      	ldrb	r2, [r7, #14]
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <BME280_init+0x268>)
 8002570:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	  /* base altitude set */
	  int32_t p = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
	  float comP = 0;
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
	  double sum = 0;
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	f04f 0400 	mov.w	r4, #0
 8002586:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	  for(int i=0; i<10; i++){
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258e:	e028      	b.n	80025e2 <BME280_init+0x23e>
		  p = BME280_readPressure();
 8002590:	f7ff fef1 	bl	8002376 <BME280_readPressure>
 8002594:	62b8      	str	r0, [r7, #40]	; 0x28
		  comP = BME280_compensate_P(p)/25600.0;
 8002596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002598:	f000 f878 	bl	800268c <BME280_compensate_P>
 800259c:	4603      	mov	r3, r0
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffc0 	bl	8000524 <__aeabi_ui2d>
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <BME280_init+0x26c>)
 80025aa:	f7fe f95f 	bl	800086c <__aeabi_ddiv>
 80025ae:	4603      	mov	r3, r0
 80025b0:	460c      	mov	r4, r1
 80025b2:	4618      	mov	r0, r3
 80025b4:	4621      	mov	r1, r4
 80025b6:	f7fe fb27 	bl	8000c08 <__aeabi_d2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
		  sum += comP;
 80025be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025c0:	f7fd ffd2 	bl	8000568 <__aeabi_f2d>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	461a      	mov	r2, r3
 80025ca:	4623      	mov	r3, r4
 80025cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025d0:	f7fd fe6c 	bl	80002ac <__adddf3>
 80025d4:	4603      	mov	r3, r0
 80025d6:	460c      	mov	r4, r1
 80025d8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	  for(int i=0; i<10; i++){
 80025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025de:	3301      	adds	r3, #1
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	ddd3      	ble.n	8002590 <BME280_init+0x1ec>
	  }
	  bme280.base_P = (float)sum/10;
 80025e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025ec:	f7fe fb0c 	bl	8000c08 <__aeabi_d2f>
 80025f0:	ee06 0a90 	vmov	s13, r0
 80025f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <BME280_init+0x268>)
 80025fe:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002602:	bf00      	nop
 8002604:	373c      	adds	r7, #60	; 0x3c
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}
 800260a:	bf00      	nop
 800260c:	200007a0 	.word	0x200007a0
 8002610:	40d90000 	.word	0x40d90000

08002614 <BME280_compensate_T>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	10da      	asrs	r2, r3, #3
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <BME280_compensate_T+0x74>)
 8002622:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <BME280_compensate_T+0x74>)
 800262a:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	12db      	asrs	r3, r3, #11
 8002634:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	111b      	asrs	r3, r3, #4
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <BME280_compensate_T+0x74>)
 800263c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	1112      	asrs	r2, r2, #4
 8002644:	4910      	ldr	r1, [pc, #64]	; (8002688 <BME280_compensate_T+0x74>)
 8002646:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8002648:	1a52      	subs	r2, r2, r1
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	131b      	asrs	r3, r3, #12
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <BME280_compensate_T+0x74>)
 8002652:	f9b2 2036 	ldrsh.w	r2, [r2, #54]	; 0x36
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	139b      	asrs	r3, r3, #14
 800265c:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	4a08      	ldr	r2, [pc, #32]	; (8002688 <BME280_compensate_T+0x74>)
 8002666:	64d3      	str	r3, [r2, #76]	; 0x4c
	  T = (bme280._t_fine * 5 + 128) >> 8;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <BME280_compensate_T+0x74>)
 800266a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	3380      	adds	r3, #128	; 0x80
 8002674:	121b      	asrs	r3, r3, #8
 8002676:	60fb      	str	r3, [r7, #12]
	  return T;
 8002678:	68fb      	ldr	r3, [r7, #12]
}
 800267a:	4618      	mov	r0, r3
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	200007a0 	.word	0x200007a0

0800268c <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 800268c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002690:	b088      	sub	sp, #32
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <BME280_compensate_P+0x1a0>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	4619      	mov	r1, r3
 800269c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80026a0:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80026a4:	f142 34ff 	adc.w	r4, r2, #4294967295
 80026a8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	fb02 f203 	mul.w	r2, r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	441a      	add	r2, r3
 80026be:	69b9      	ldr	r1, [r7, #24]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fba1 3403 	umull	r3, r4, r1, r3
 80026c6:	4422      	add	r2, r4
 80026c8:	4614      	mov	r4, r2
 80026ca:	4a58      	ldr	r2, [pc, #352]	; (800282c <BME280_compensate_P+0x1a0>)
 80026cc:	f9b2 2040 	ldrsh.w	r2, [r2, #64]	; 0x40
 80026d0:	b211      	sxth	r1, r2
 80026d2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80026d6:	fb01 f504 	mul.w	r5, r1, r4
 80026da:	fb03 f002 	mul.w	r0, r3, r2
 80026de:	4428      	add	r0, r5
 80026e0:	fba3 3401 	umull	r3, r4, r3, r1
 80026e4:	1902      	adds	r2, r0, r4
 80026e6:	4614      	mov	r4, r2
 80026e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80026ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 80026f0:	4b4e      	ldr	r3, [pc, #312]	; (800282c <BME280_compensate_P+0x1a0>)
 80026f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	fb04 f102 	mul.w	r1, r4, r2
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	fb03 f202 	mul.w	r2, r3, r2
 8002708:	1888      	adds	r0, r1, r2
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	fba2 1203 	umull	r1, r2, r2, r3
 8002710:	1883      	adds	r3, r0, r2
 8002712:	461a      	mov	r2, r3
 8002714:	f04f 0500 	mov.w	r5, #0
 8002718:	f04f 0600 	mov.w	r6, #0
 800271c:	0456      	lsls	r6, r2, #17
 800271e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8002722:	044d      	lsls	r5, r1, #17
 8002724:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002728:	186b      	adds	r3, r5, r1
 800272a:	eb46 0402 	adc.w	r4, r6, r2
 800272e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 8002732:	4b3e      	ldr	r3, [pc, #248]	; (800282c <BME280_compensate_P+0x1a0>)
 8002734:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002738:	b219      	sxth	r1, r3
 800273a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800273e:	f04f 0500 	mov.w	r5, #0
 8002742:	f04f 0600 	mov.w	r6, #0
 8002746:	00ce      	lsls	r6, r1, #3
 8002748:	2500      	movs	r5, #0
 800274a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800274e:	186b      	adds	r3, r5, r1
 8002750:	eb46 0402 	adc.w	r4, r6, r2
 8002754:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	fb02 f203 	mul.w	r2, r2, r3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	69b9      	ldr	r1, [r7, #24]
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	441a      	add	r2, r3
 800276a:	69b9      	ldr	r1, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fba1 3403 	umull	r3, r4, r1, r3
 8002772:	4422      	add	r2, r4
 8002774:	4614      	mov	r4, r2
 8002776:	4a2d      	ldr	r2, [pc, #180]	; (800282c <BME280_compensate_P+0x1a0>)
 8002778:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800277c:	b211      	sxth	r1, r2
 800277e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002782:	fb01 f504 	mul.w	r5, r1, r4
 8002786:	fb03 f002 	mul.w	r0, r3, r2
 800278a:	4428      	add	r0, r5
 800278c:	fba3 3401 	umull	r3, r4, r3, r1
 8002790:	1902      	adds	r2, r0, r4
 8002792:	4614      	mov	r4, r2
 8002794:	f04f 0100 	mov.w	r1, #0
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	0a19      	lsrs	r1, r3, #8
 800279e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80027a2:	1222      	asrs	r2, r4, #8
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <BME280_compensate_P+0x1a0>)
 80027a6:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80027b0:	69b8      	ldr	r0, [r7, #24]
 80027b2:	fb04 f500 	mul.w	r5, r4, r0
 80027b6:	69f8      	ldr	r0, [r7, #28]
 80027b8:	fb03 f000 	mul.w	r0, r3, r0
 80027bc:	4428      	add	r0, r5
 80027be:	69bd      	ldr	r5, [r7, #24]
 80027c0:	fba5 5603 	umull	r5, r6, r5, r3
 80027c4:	1983      	adds	r3, r0, r6
 80027c6:	461e      	mov	r6, r3
 80027c8:	f04f 0b00 	mov.w	fp, #0
 80027cc:	f04f 0c00 	mov.w	ip, #0
 80027d0:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80027d4:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80027d8:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80027dc:	eb1b 0301 	adds.w	r3, fp, r1
 80027e0:	eb4c 0402 	adc.w	r4, ip, r2
 80027e4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 80027e8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80027ec:	1c19      	adds	r1, r3, #0
 80027ee:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <BME280_compensate_P+0x1a0>)
 80027f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f04f 0400 	mov.w	r4, #0
 80027fc:	fb03 f502 	mul.w	r5, r3, r2
 8002800:	fb01 f004 	mul.w	r0, r1, r4
 8002804:	4428      	add	r0, r5
 8002806:	fba1 3403 	umull	r3, r4, r1, r3
 800280a:	1902      	adds	r2, r0, r4
 800280c:	4614      	mov	r4, r2
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	1061      	asrs	r1, r4, #1
 8002818:	17e2      	asrs	r2, r4, #31
 800281a:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 800281e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002822:	4323      	orrs	r3, r4
 8002824:	d104      	bne.n	8002830 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 8002826:	2300      	movs	r3, #0
 8002828:	e0d7      	b.n	80029da <BME280_compensate_P+0x34e>
 800282a:	bf00      	nop
 800282c:	200007a0 	.word	0x200007a0
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002836:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800283a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	ea4f 0963 	mov.w	r9, r3, asr #1
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 800284a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800284e:	4645      	mov	r5, r8
 8002850:	464e      	mov	r6, r9
 8002852:	1aed      	subs	r5, r5, r3
 8002854:	eb66 0604 	sbc.w	r6, r6, r4
 8002858:	46a8      	mov	r8, r5
 800285a:	46b1      	mov	r9, r6
 800285c:	eb18 0308 	adds.w	r3, r8, r8
 8002860:	eb49 0409 	adc.w	r4, r9, r9
 8002864:	4698      	mov	r8, r3
 8002866:	46a1      	mov	r9, r4
 8002868:	eb18 0805 	adds.w	r8, r8, r5
 800286c:	eb49 0906 	adc.w	r9, r9, r6
 8002870:	f04f 0100 	mov.w	r1, #0
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800287c:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002880:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002884:	eb18 0801 	adds.w	r8, r8, r1
 8002888:	eb49 0902 	adc.w	r9, r9, r2
 800288c:	f04f 0100 	mov.w	r1, #0
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002898:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800289c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80028a0:	4688      	mov	r8, r1
 80028a2:	4691      	mov	r9, r2
 80028a4:	eb18 0805 	adds.w	r8, r8, r5
 80028a8:	eb49 0906 	adc.w	r9, r9, r6
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80028b8:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80028bc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80028c0:	4688      	mov	r8, r1
 80028c2:	4691      	mov	r9, r2
 80028c4:	eb18 0005 	adds.w	r0, r8, r5
 80028c8:	eb49 0106 	adc.w	r1, r9, r6
 80028cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d0:	f7fe faf8 	bl	8000ec4 <__aeabi_ldivmod>
 80028d4:	4603      	mov	r3, r0
 80028d6:	460c      	mov	r4, r1
 80028d8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 80028dc:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <BME280_compensate_P+0x358>)
 80028de:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80028e2:	b219      	sxth	r1, r3
 80028e4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80028e8:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f04f 0400 	mov.w	r4, #0
 80028f4:	0b6b      	lsrs	r3, r5, #13
 80028f6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80028fa:	1374      	asrs	r4, r6, #13
 80028fc:	fb03 f502 	mul.w	r5, r3, r2
 8002900:	fb01 f004 	mul.w	r0, r1, r4
 8002904:	4428      	add	r0, r5
 8002906:	fba1 1203 	umull	r1, r2, r1, r3
 800290a:	1883      	adds	r3, r0, r2
 800290c:	461a      	mov	r2, r3
 800290e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	f04f 0400 	mov.w	r4, #0
 800291a:	0b6b      	lsrs	r3, r5, #13
 800291c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002920:	1374      	asrs	r4, r6, #13
 8002922:	fb03 f502 	mul.w	r5, r3, r2
 8002926:	fb01 f004 	mul.w	r0, r1, r4
 800292a:	4428      	add	r0, r5
 800292c:	fba1 1203 	umull	r1, r2, r1, r3
 8002930:	1883      	adds	r3, r0, r2
 8002932:	461a      	mov	r2, r3
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	0e4b      	lsrs	r3, r1, #25
 800293e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002942:	1654      	asrs	r4, r2, #25
 8002944:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 8002948:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <BME280_compensate_P+0x358>)
 800294a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800294e:	b21b      	sxth	r3, r3
 8002950:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	fb04 f102 	mul.w	r1, r4, r2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	fb03 f202 	mul.w	r2, r3, r2
 8002960:	1888      	adds	r0, r1, r2
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	fba2 1203 	umull	r1, r2, r2, r3
 8002968:	1883      	adds	r3, r0, r2
 800296a:	461a      	mov	r2, r3
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	f04f 0400 	mov.w	r4, #0
 8002974:	0ccb      	lsrs	r3, r1, #19
 8002976:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800297a:	14d4      	asrs	r4, r2, #19
 800297c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 8002980:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002984:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002988:	eb11 0803 	adds.w	r8, r1, r3
 800298c:	eb42 0904 	adc.w	r9, r2, r4
 8002990:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002994:	eb13 0508 	adds.w	r5, r3, r8
 8002998:	eb44 0609 	adc.w	r6, r4, r9
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	0a29      	lsrs	r1, r5, #8
 80029a6:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80029aa:	1232      	asrs	r2, r6, #8
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <BME280_compensate_P+0x358>)
 80029ae:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80029b2:	b21d      	sxth	r5, r3
 80029b4:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80029b8:	f04f 0800 	mov.w	r8, #0
 80029bc:	f04f 0900 	mov.w	r9, #0
 80029c0:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80029c4:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80029c8:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80029cc:	eb18 0301 	adds.w	r3, r8, r1
 80029d0:	eb49 0402 	adc.w	r4, r9, r2
 80029d4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 80029d8:	68bb      	ldr	r3, [r7, #8]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80029e4:	200007a0 	.word	0x200007a0

080029e8 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af04      	add	r7, sp, #16
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
 80029f2:	460b      	mov	r3, r1
 80029f4:	71bb      	strb	r3, [r7, #6]
 80029f6:	4613      	mov	r3, r2
 80029f8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(BME280_I2C, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <BME280_writeByte+0x38>)
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	b299      	uxth	r1, r3
 8002a02:	79bb      	ldrb	r3, [r7, #6]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	2364      	movs	r3, #100	; 0x64
 8002a08:	9302      	str	r3, [sp, #8]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	1d7b      	adds	r3, r7, #5
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	2301      	movs	r3, #1
 8002a14:	f007 fa42 	bl	8009e9c <HAL_I2C_Mem_Write>
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200007a0 	.word	0x200007a0

08002a24 <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71fb      	strb	r3, [r7, #7]
 8002a30:	460b      	mov	r3, r1
 8002a32:	71bb      	strb	r3, [r7, #6]
 8002a34:	4613      	mov	r3, r2
 8002a36:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(BME280_I2C, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <BME280_readBytes+0x40>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	b299      	uxth	r1, r3
 8002a40:	79bb      	ldrb	r3, [r7, #6]
 8002a42:	b29c      	uxth	r4, r3
 8002a44:	797b      	ldrb	r3, [r7, #5]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2264      	movs	r2, #100	; 0x64
 8002a4a:	9202      	str	r2, [sp, #8]
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2301      	movs	r3, #1
 8002a54:	4622      	mov	r2, r4
 8002a56:	f007 fb1b 	bl	800a090 <HAL_I2C_Mem_Read>
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200007a0 	.word	0x200007a0

08002a68 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 8002a70:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <TM_GPS_Init+0x124>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 8002a76:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <TM_GPS_Init+0x128>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 8002a7e:	4844      	ldr	r0, [pc, #272]	; (8002b90 <TM_GPS_Init+0x128>)
 8002a80:	f001 f9fa 	bl	8003e78 <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 8002a84:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	4a41      	ldr	r2, [pc, #260]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002a8e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 8002a90:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a98:	4a3e      	ldr	r2, [pc, #248]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002a9a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f043 0302 	orr.w	r3, r3, #2
 8002aa4:	4a3b      	ldr	r2, [pc, #236]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002aa6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f043 0320 	orr.w	r3, r3, #32
 8002ab0:	4a38      	ldr	r2, [pc, #224]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002ab2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 8002ab4:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	4a35      	ldr	r2, [pc, #212]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002abe:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 8002ac0:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	4a32      	ldr	r2, [pc, #200]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002aca:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 8002acc:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f043 0310 	orr.w	r3, r3, #16
 8002ad4:	4a2f      	ldr	r2, [pc, #188]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002ad6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae0:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002ae2:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002aee:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af8:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002afa:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b04:	4a23      	ldr	r2, [pc, #140]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b06:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b10:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b12:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 8002b14:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b1e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b28:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b2a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b34:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b36:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b42:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4c:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b4e:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	4a0e      	ldr	r2, [pc, #56]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b5a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <TM_GPS_Init+0x12c>)
 8002b66:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 8002b68:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <TM_GPS_Init+0x128>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <TM_GPS_Init+0x128>)
 8002b72:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b7a:	4907      	ldr	r1, [pc, #28]	; (8002b98 <TM_GPS_Init+0x130>)
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f00c ff4b 	bl	800fa18 <HAL_UART_Receive_DMA>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200003f8 	.word	0x200003f8
 8002b90:	20000528 	.word	0x20000528
 8002b94:	200002cc 	.word	0x200002cc
 8002b98:	20000654 	.word	0x20000654

08002b9c <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update() {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	70fb      	strb	r3, [r7, #3]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	e013      	b.n	8002bd4 <TM_GPS_Update+0x38>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 8002bac:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <TM_GPS_Update+0x68>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4812      	ldr	r0, [pc, #72]	; (8002c04 <TM_GPS_Update+0x68>)
 8002bbc:	f000 f8de 	bl	8002d7c <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <TM_GPS_Update+0x68>)
 8002bc2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <TM_GPS_Update+0x32>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	70fb      	strb	r3, [r7, #3]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	607b      	str	r3, [r7, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002bda:	dbe7      	blt.n	8002bac <TM_GPS_Update+0x10>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <TM_GPS_Update+0x6c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <TM_GPS_Update+0x54>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <TM_GPS_Update+0x68>)
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002bec:	2302      	movs	r3, #2
 8002bee:	e004      	b.n	8002bfa <TM_GPS_Update+0x5e>
	}
	
	/* We have old data */
	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <TM_GPS_Update+0x68>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002bf8:	2301      	movs	r3, #1

	return result;
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000528 	.word	0x20000528
 8002c08:	200003f8 	.word	0x200003f8

08002c0c <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c16:	4603      	mov	r3, r0
 8002c18:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	2b0e      	cmp	r3, #14
 8002c1e:	f200 8086 	bhi.w	8002d2e <TM_GPS_ConvertSpeed+0x122>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <TM_GPS_ConvertSpeed+0x1c>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c65 	.word	0x08002c65
 8002c2c:	08002c73 	.word	0x08002c73
 8002c30:	08002c81 	.word	0x08002c81
 8002c34:	08002c8f 	.word	0x08002c8f
 8002c38:	08002c9d 	.word	0x08002c9d
 8002c3c:	08002cab 	.word	0x08002cab
 8002c40:	08002cb9 	.word	0x08002cb9
 8002c44:	08002cc7 	.word	0x08002cc7
 8002c48:	08002cd5 	.word	0x08002cd5
 8002c4c:	08002ce3 	.word	0x08002ce3
 8002c50:	08002cf1 	.word	0x08002cf1
 8002c54:	08002cff 	.word	0x08002cff
 8002c58:	08002d0d 	.word	0x08002d0d
 8002c5c:	08002d1b 	.word	0x08002d1b
 8002c60:	08002d29 	.word	0x08002d29
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 8002c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c68:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002d40 <TM_GPS_ConvertSpeed+0x134>
 8002c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c70:	e05f      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 8002c72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c76:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002d44 <TM_GPS_ConvertSpeed+0x138>
 8002c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7e:	e058      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 8002c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c84:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002d48 <TM_GPS_ConvertSpeed+0x13c>
 8002c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8c:	e051      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 8002c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c92:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002d4c <TM_GPS_ConvertSpeed+0x140>
 8002c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9a:	e04a      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ca0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002d50 <TM_GPS_ConvertSpeed+0x144>
 8002ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca8:	e043      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002caa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002d54 <TM_GPS_ConvertSpeed+0x148>
 8002cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb6:	e03c      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 8002cb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cbc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002d58 <TM_GPS_ConvertSpeed+0x14c>
 8002cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc4:	e035      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 8002cc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cca:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002d5c <TM_GPS_ConvertSpeed+0x150>
 8002cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd2:	e02e      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 8002cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cd8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002d60 <TM_GPS_ConvertSpeed+0x154>
 8002cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce0:	e027      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 8002ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ce6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002d64 <TM_GPS_ConvertSpeed+0x158>
 8002cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cee:	e020      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 8002cf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cf4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d68 <TM_GPS_ConvertSpeed+0x15c>
 8002cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfc:	e019      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 8002cfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d02:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002d6c <TM_GPS_ConvertSpeed+0x160>
 8002d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0a:	e012      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 8002d0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d10:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d70 <TM_GPS_ConvertSpeed+0x164>
 8002d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d18:	e00b      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d1e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002d74 <TM_GPS_ConvertSpeed+0x168>
 8002d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d26:	e004      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d2c:	e001      	b.n	8002d32 <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 8002d2e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002d78 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 8002d32:	eeb0 0a67 	vmov.f32	s0, s15
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	3a06bdf5 	.word	0x3a06bdf5
 8002d44:	3f03afb8 	.word	0x3f03afb8
 8002d48:	3fed0e56 	.word	0x3fed0e56
 8002d4c:	41f6f5c3 	.word	0x41f6f5c3
 8002d50:	39a79d68 	.word	0x39a79d68
 8002d54:	3f9353f8 	.word	0x3f9353f8
 8002d58:	3fd81062 	.word	0x3fd81062
 8002d5c:	42ca999a 	.word	0x42ca999a
 8002d60:	4201999a 	.word	0x4201999a
 8002d64:	44f30000 	.word	0x44f30000
 8002d68:	43426666 	.word	0x43426666
 8002d6c:	42508f5c 	.word	0x42508f5c
 8002d70:	45438000 	.word	0x45438000
 8002d74:	4331b333 	.word	0x4331b333
 8002d78:	00000000 	.word	0x00000000

08002d7c <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f001 f847 	bl	8003e1c <TM_GPS_INT_FlagsOk>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f001 f86f 	bl	8003e78 <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	2b24      	cmp	r3, #36	; 0x24
 8002da6:	d116      	bne.n	8002dd6 <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002da8:	4b5d      	ldr	r3, [pc, #372]	; (8002f20 <TM_GPS_INT_Do+0x1a4>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 8002dae:	4b5d      	ldr	r3, [pc, #372]	; (8002f24 <TM_GPS_INT_Do+0x1a8>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 8002db4:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <TM_GPS_INT_Do+0x1ac>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002dba:	4b5c      	ldr	r3, [pc, #368]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 8002dc0:	4b5a      	ldr	r3, [pc, #360]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	b2d1      	uxtb	r1, r2
 8002dc8:	4a58      	ldr	r2, [pc, #352]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002dca:	7011      	strb	r1, [r2, #0]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4a58      	ldr	r2, [pc, #352]	; (8002f30 <TM_GPS_INT_Do+0x1b4>)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	5453      	strb	r3, [r2, r1]
 8002dd4:	e09b      	b.n	8002f0e <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	2b2c      	cmp	r3, #44	; 0x2c
 8002dda:	d120      	bne.n	8002e1e <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 8002ddc:	4b51      	ldr	r3, [pc, #324]	; (8002f24 <TM_GPS_INT_Do+0x1a8>)
 8002dde:	781a      	ldrb	r2, [r3, #0]
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	4053      	eors	r3, r2
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <TM_GPS_INT_Do+0x1a8>)
 8002de8:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 8002dea:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	b2d1      	uxtb	r1, r2
 8002df2:	4a4e      	ldr	r2, [pc, #312]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002df4:	7011      	strb	r1, [r2, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b4d      	ldr	r3, [pc, #308]	; (8002f30 <TM_GPS_INT_Do+0x1b4>)
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 f85e 	bl	8003ec0 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f89f 	bl	8002f48 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002e0a:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <TM_GPS_INT_Do+0x1ac>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b45      	ldr	r3, [pc, #276]	; (8002f28 <TM_GPS_INT_Do+0x1ac>)
 8002e14:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002e16:	4b45      	ldr	r3, [pc, #276]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e077      	b.n	8002f0e <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	2b0a      	cmp	r3, #10
 8002e22:	d113      	bne.n	8002e4c <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <TM_GPS_INT_Do+0x1ac>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002e2a:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <TM_GPS_INT_Do+0x1b8>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d16d      	bne.n	8002f0e <TM_GPS_INT_Do+0x192>
 8002e32:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <TM_GPS_INT_Do+0x1bc>)
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <TM_GPS_INT_Do+0x1c0>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d167      	bne.n	8002f0e <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 8002e3e:	4b40      	ldr	r3, [pc, #256]	; (8002f40 <TM_GPS_INT_Do+0x1c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e46:	4a3e      	ldr	r2, [pc, #248]	; (8002f40 <TM_GPS_INT_Do+0x1c4>)
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e060      	b.n	8002f0e <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	2b0d      	cmp	r3, #13
 8002e50:	d128      	bne.n	8002ea4 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 8002e52:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	b2d1      	uxtb	r1, r2
 8002e5a:	4a34      	ldr	r2, [pc, #208]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002e5c:	7011      	strb	r1, [r2, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <TM_GPS_INT_Do+0x1b4>)
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 8002e66:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <TM_GPS_INT_Do+0x1b4>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 ffac 	bl	8003dc8 <TM_GPS_INT_Hex2Dec>
 8002e70:	4603      	mov	r3, r0
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	b2dc      	uxtb	r4, r3
 8002e76:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <TM_GPS_INT_Do+0x1b4>)
 8002e78:	785b      	ldrb	r3, [r3, #1]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 ffa4 	bl	8003dc8 <TM_GPS_INT_Hex2Dec>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4423      	add	r3, r4
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <TM_GPS_INT_Do+0x1c8>)
 8002e88:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 8002e8a:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <TM_GPS_INT_Do+0x1c8>)
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <TM_GPS_INT_Do+0x1a8>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d002      	beq.n	8002e9c <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 ffee 	bl	8003e78 <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <TM_GPS_INT_Do+0x1ac>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e034      	b.n	8002f0e <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ea8:	d11c      	bne.n	8002ee4 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <TM_GPS_INT_Do+0x1a4>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	b2d1      	uxtb	r1, r2
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002eba:	7011      	strb	r1, [r2, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <TM_GPS_INT_Do+0x1b4>)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fffb 	bl	8003ec0 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f83c 	bl	8002f48 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <TM_GPS_INT_Do+0x1ac>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <TM_GPS_INT_Do+0x1ac>)
 8002eda:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e014      	b.n	8002f0e <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <TM_GPS_INT_Do+0x1a4>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <TM_GPS_INT_Do+0x1a8>)
 8002eee:	781a      	ldrb	r2, [r3, #0]
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	4053      	eors	r3, r2
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <TM_GPS_INT_Do+0x1a8>)
 8002ef8:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	b2d1      	uxtb	r1, r2
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <TM_GPS_INT_Do+0x1b0>)
 8002f04:	7011      	strb	r1, [r2, #0]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <TM_GPS_INT_Do+0x1b4>)
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fe44 	bl	8003b9c <TM_GPS_INT_Return>
 8002f14:	4603      	mov	r3, r0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200002c7 	.word	0x200002c7
 8002f24:	200002c5 	.word	0x200002c5
 8002f28:	200002c3 	.word	0x200002c3
 8002f2c:	200002c4 	.word	0x200002c4
 8002f30:	200002b4 	.word	0x200002b4
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000403 	.word	0x20000403
 8002f3c:	20000404 	.word	0x20000404
 8002f40:	200002c8 	.word	0x200002c8
 8002f44:	200002c6 	.word	0x200002c6

08002f48 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	ed2d 8b02 	vpush	{d8}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 8002f54:	48cb      	ldr	r0, [pc, #812]	; (8003284 <TM_GPS_INT_CheckTerm+0x33c>)
 8002f56:	7800      	ldrb	r0, [r0, #0]
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d134      	bne.n	8002fc6 <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 8002f5c:	49ca      	ldr	r1, [pc, #808]	; (8003288 <TM_GPS_INT_CheckTerm+0x340>)
 8002f5e:	48cb      	ldr	r0, [pc, #812]	; (800328c <TM_GPS_INT_CheckTerm+0x344>)
 8002f60:	f000 fecc 	bl	8003cfc <TM_GPS_INT_StringStartsWith>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 8002f6a:	4bc9      	ldr	r3, [pc, #804]	; (8003290 <TM_GPS_INT_CheckTerm+0x348>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e023      	b.n	8002fba <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 8002f72:	49c8      	ldr	r1, [pc, #800]	; (8003294 <TM_GPS_INT_CheckTerm+0x34c>)
 8002f74:	48c5      	ldr	r0, [pc, #788]	; (800328c <TM_GPS_INT_CheckTerm+0x344>)
 8002f76:	f000 fec1 	bl	8003cfc <TM_GPS_INT_StringStartsWith>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 8002f80:	4bc3      	ldr	r3, [pc, #780]	; (8003290 <TM_GPS_INT_CheckTerm+0x348>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e018      	b.n	8002fba <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 8002f88:	49c3      	ldr	r1, [pc, #780]	; (8003298 <TM_GPS_INT_CheckTerm+0x350>)
 8002f8a:	48c0      	ldr	r0, [pc, #768]	; (800328c <TM_GPS_INT_CheckTerm+0x344>)
 8002f8c:	f000 feb6 	bl	8003cfc <TM_GPS_INT_StringStartsWith>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8002f96:	4bbe      	ldr	r3, [pc, #760]	; (8003290 <TM_GPS_INT_CheckTerm+0x348>)
 8002f98:	2202      	movs	r2, #2
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e00d      	b.n	8002fba <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 8002f9e:	49bf      	ldr	r1, [pc, #764]	; (800329c <TM_GPS_INT_CheckTerm+0x354>)
 8002fa0:	48ba      	ldr	r0, [pc, #744]	; (800328c <TM_GPS_INT_CheckTerm+0x344>)
 8002fa2:	f000 feab 	bl	8003cfc <TM_GPS_INT_StringStartsWith>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 8002fac:	4bb8      	ldr	r3, [pc, #736]	; (8003290 <TM_GPS_INT_CheckTerm+0x348>)
 8002fae:	2203      	movs	r2, #3
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e002      	b.n	8002fba <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 8002fb4:	4bb6      	ldr	r3, [pc, #728]	; (8003290 <TM_GPS_INT_CheckTerm+0x348>)
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 8002fba:	49b4      	ldr	r1, [pc, #720]	; (800328c <TM_GPS_INT_CheckTerm+0x344>)
 8002fbc:	48b8      	ldr	r0, [pc, #736]	; (80032a0 <TM_GPS_INT_CheckTerm+0x358>)
 8002fbe:	f013 fff5 	bl	8016fac <strcpy>
 8002fc2:	f000 bdd1 	b.w	8003b68 <TM_GPS_INT_CheckTerm+0xc20>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8002fc6:	48b2      	ldr	r0, [pc, #712]	; (8003290 <TM_GPS_INT_CheckTerm+0x348>)
 8002fc8:	7800      	ldrb	r0, [r0, #0]
 8002fca:	0140      	lsls	r0, r0, #5
 8002fcc:	4dad      	ldr	r5, [pc, #692]	; (8003284 <TM_GPS_INT_CheckTerm+0x33c>)
 8002fce:	782d      	ldrb	r5, [r5, #0]
 8002fd0:	4328      	orrs	r0, r5
 8002fd2:	3801      	subs	r0, #1
 8002fd4:	2862      	cmp	r0, #98	; 0x62
 8002fd6:	f200 852f 	bhi.w	8003a38 <TM_GPS_INT_CheckTerm+0xaf0>
 8002fda:	a501      	add	r5, pc, #4	; (adr r5, 8002fe0 <TM_GPS_INT_CheckTerm+0x98>)
 8002fdc:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8002fe0:	08003589 	.word	0x08003589
 8002fe4:	0800316d 	.word	0x0800316d
 8002fe8:	0800325b 	.word	0x0800325b
 8002fec:	080032b9 	.word	0x080032b9
 8002ff0:	080033a7 	.word	0x080033a7
 8002ff4:	080033f1 	.word	0x080033f1
 8002ff8:	080033cf 	.word	0x080033cf
 8002ffc:	08003a39 	.word	0x08003a39
 8003000:	08003413 	.word	0x08003413
 8003004:	08003a39 	.word	0x08003a39
 8003008:	08003a39 	.word	0x08003a39
 800300c:	08003a39 	.word	0x08003a39
 8003010:	08003a39 	.word	0x08003a39
 8003014:	08003a39 	.word	0x08003a39
 8003018:	08003a39 	.word	0x08003a39
 800301c:	08003a39 	.word	0x08003a39
 8003020:	08003a39 	.word	0x08003a39
 8003024:	08003a39 	.word	0x08003a39
 8003028:	08003a39 	.word	0x08003a39
 800302c:	08003a39 	.word	0x08003a39
 8003030:	08003a39 	.word	0x08003a39
 8003034:	08003a39 	.word	0x08003a39
 8003038:	08003a39 	.word	0x08003a39
 800303c:	08003a39 	.word	0x08003a39
 8003040:	08003a39 	.word	0x08003a39
 8003044:	08003a39 	.word	0x08003a39
 8003048:	08003a39 	.word	0x08003a39
 800304c:	08003a39 	.word	0x08003a39
 8003050:	08003a39 	.word	0x08003a39
 8003054:	08003a39 	.word	0x08003a39
 8003058:	08003a39 	.word	0x08003a39
 800305c:	08003a39 	.word	0x08003a39
 8003060:	08003a39 	.word	0x08003a39
 8003064:	0800377f 	.word	0x0800377f
 8003068:	08003a39 	.word	0x08003a39
 800306c:	08003a39 	.word	0x08003a39
 8003070:	08003a39 	.word	0x08003a39
 8003074:	08003a39 	.word	0x08003a39
 8003078:	08003647 	.word	0x08003647
 800307c:	080037a3 	.word	0x080037a3
 8003080:	080036e5 	.word	0x080036e5
 8003084:	08003a39 	.word	0x08003a39
 8003088:	08003a39 	.word	0x08003a39
 800308c:	08003a39 	.word	0x08003a39
 8003090:	08003a39 	.word	0x08003a39
 8003094:	08003a39 	.word	0x08003a39
 8003098:	08003a39 	.word	0x08003a39
 800309c:	08003a39 	.word	0x08003a39
 80030a0:	08003a39 	.word	0x08003a39
 80030a4:	08003a39 	.word	0x08003a39
 80030a8:	08003a39 	.word	0x08003a39
 80030ac:	08003a39 	.word	0x08003a39
 80030b0:	08003a39 	.word	0x08003a39
 80030b4:	08003a39 	.word	0x08003a39
 80030b8:	08003a39 	.word	0x08003a39
 80030bc:	08003a39 	.word	0x08003a39
 80030c0:	08003a39 	.word	0x08003a39
 80030c4:	08003a39 	.word	0x08003a39
 80030c8:	08003a39 	.word	0x08003a39
 80030cc:	08003a39 	.word	0x08003a39
 80030d0:	08003a39 	.word	0x08003a39
 80030d4:	08003a39 	.word	0x08003a39
 80030d8:	08003a39 	.word	0x08003a39
 80030dc:	08003a39 	.word	0x08003a39
 80030e0:	08003a39 	.word	0x08003a39
 80030e4:	080039a5 	.word	0x080039a5
 80030e8:	080039c9 	.word	0x080039c9
 80030ec:	080039c9 	.word	0x080039c9
 80030f0:	080039c9 	.word	0x080039c9
 80030f4:	080039c9 	.word	0x080039c9
 80030f8:	080039c9 	.word	0x080039c9
 80030fc:	080039c9 	.word	0x080039c9
 8003100:	080039c9 	.word	0x080039c9
 8003104:	080039c9 	.word	0x080039c9
 8003108:	080039c9 	.word	0x080039c9
 800310c:	080039c9 	.word	0x080039c9
 8003110:	080039c9 	.word	0x080039c9
 8003114:	080039c9 	.word	0x080039c9
 8003118:	080038b1 	.word	0x080038b1
 800311c:	0800381d 	.word	0x0800381d
 8003120:	0800392b 	.word	0x0800392b
 8003124:	08003a39 	.word	0x08003a39
 8003128:	08003a39 	.word	0x08003a39
 800312c:	08003a39 	.word	0x08003a39
 8003130:	08003a39 	.word	0x08003a39
 8003134:	08003a39 	.word	0x08003a39
 8003138:	08003a39 	.word	0x08003a39
 800313c:	08003a39 	.word	0x08003a39
 8003140:	08003a39 	.word	0x08003a39
 8003144:	08003a39 	.word	0x08003a39
 8003148:	08003a39 	.word	0x08003a39
 800314c:	08003a39 	.word	0x08003a39
 8003150:	08003a39 	.word	0x08003a39
 8003154:	08003a39 	.word	0x08003a39
 8003158:	08003a39 	.word	0x08003a39
 800315c:	08003a39 	.word	0x08003a39
 8003160:	08003a39 	.word	0x08003a39
 8003164:	08003a39 	.word	0x08003a39
 8003168:	08003a15 	.word	0x08003a15
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800316c:	f107 0308 	add.w	r3, r7, #8
 8003170:	4619      	mov	r1, r3
 8003172:	4846      	ldr	r0, [pc, #280]	; (800328c <TM_GPS_INT_CheckTerm+0x344>)
 8003174:	f000 fddf 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4a49      	ldr	r2, [pc, #292]	; (80032a4 <TM_GPS_INT_CheckTerm+0x35c>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9cc 	bl	8000524 <__aeabi_ui2d>
 800318c:	4603      	mov	r3, r0
 800318e:	460c      	mov	r4, r1
 8003190:	4a45      	ldr	r2, [pc, #276]	; (80032a8 <TM_GPS_INT_CheckTerm+0x360>)
 8003192:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 8003196:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <TM_GPS_INT_CheckTerm+0x360>)
 8003198:	e9d3 4500 	ldrd	r4, r5, [r3]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <TM_GPS_INT_CheckTerm+0x35c>)
 80031a0:	fba3 1302 	umull	r1, r3, r3, r2
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	2164      	movs	r1, #100	; 0x64
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80032ac <TM_GPS_INT_CheckTerm+0x364>
 80031ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031be:	ee16 0a90 	vmov	r0, s13
 80031c2:	f7fd f9d1 	bl	8000568 <__aeabi_f2d>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4620      	mov	r0, r4
 80031cc:	4629      	mov	r1, r5
 80031ce:	f7fd f86d 	bl	80002ac <__adddf3>
 80031d2:	4603      	mov	r3, r0
 80031d4:	460c      	mov	r4, r1
 80031d6:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <TM_GPS_INT_CheckTerm+0x360>)
 80031d8:	e9c2 3400 	strd	r3, r4, [r2]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	3301      	adds	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	4a29      	ldr	r2, [pc, #164]	; (800328c <TM_GPS_INT_CheckTerm+0x344>)
 80031e6:	4413      	add	r3, r2
 80031e8:	f107 0208 	add.w	r2, r7, #8
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fda1 	bl	8003d36 <TM_GPS_INT_Atoi>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f992 	bl	8000524 <__aeabi_ui2d>
 8003200:	4604      	mov	r4, r0
 8003202:	460d      	mov	r5, r1
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	4619      	mov	r1, r3
 8003208:	200a      	movs	r0, #10
 800320a:	f000 fdc1 	bl	8003d90 <TM_GPS_INT_Pow>
 800320e:	4603      	mov	r3, r0
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd f987 	bl	8000524 <__aeabi_ui2d>
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <TM_GPS_INT_CheckTerm+0x368>)
 800321c:	f7fd f9fc 	bl	8000618 <__aeabi_dmul>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4620      	mov	r0, r4
 8003226:	4629      	mov	r1, r5
 8003228:	f7fd fb20 	bl	800086c <__aeabi_ddiv>
 800322c:	4603      	mov	r3, r0
 800322e:	460c      	mov	r4, r1
 8003230:	4618      	mov	r0, r3
 8003232:	4621      	mov	r1, r4
 8003234:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <TM_GPS_INT_CheckTerm+0x360>)
 8003236:	e9d3 3400 	ldrd	r3, r4, [r3]
 800323a:	461a      	mov	r2, r3
 800323c:	4623      	mov	r3, r4
 800323e:	f7fd f835 	bl	80002ac <__adddf3>
 8003242:	4603      	mov	r3, r0
 8003244:	460c      	mov	r4, r1
 8003246:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <TM_GPS_INT_CheckTerm+0x360>)
 8003248:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <TM_GPS_INT_CheckTerm+0x36c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <TM_GPS_INT_CheckTerm+0x36c>)
 8003256:	6013      	str	r3, [r2, #0]
			break;
 8003258:	e3f1      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <TM_GPS_INT_CheckTerm+0x344>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b53      	cmp	r3, #83	; 0x53
 8003260:	d108      	bne.n	8003274 <TM_GPS_INT_CheckTerm+0x32c>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <TM_GPS_INT_CheckTerm+0x360>)
 8003264:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003268:	4619      	mov	r1, r3
 800326a:	f084 4200 	eor.w	r2, r4, #2147483648	; 0x80000000
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <TM_GPS_INT_CheckTerm+0x360>)
 8003270:	e9c3 1200 	strd	r1, r2, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <TM_GPS_INT_CheckTerm+0x36c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <TM_GPS_INT_CheckTerm+0x36c>)
 800327e:	6013      	str	r3, [r2, #0]
			break;
 8003280:	e3dd      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
 8003282:	bf00      	nop
 8003284:	200002c3 	.word	0x200002c3
 8003288:	0801a310 	.word	0x0801a310
 800328c:	200002b4 	.word	0x200002b4
 8003290:	20000000 	.word	0x20000000
 8003294:	0801a318 	.word	0x0801a318
 8003298:	0801a320 	.word	0x0801a320
 800329c:	0801a328 	.word	0x0801a328
 80032a0:	200003fc 	.word	0x200003fc
 80032a4:	51eb851f 	.word	0x51eb851f
 80032a8:	200002d0 	.word	0x200002d0
 80032ac:	42700000 	.word	0x42700000
 80032b0:	404e0000 	.word	0x404e0000
 80032b4:	200002c8 	.word	0x200002c8
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80032b8:	f107 0308 	add.w	r3, r7, #8
 80032bc:	4619      	mov	r1, r3
 80032be:	48ab      	ldr	r0, [pc, #684]	; (800356c <TM_GPS_INT_CheckTerm+0x624>)
 80032c0:	f000 fd39 	bl	8003d36 <TM_GPS_INT_Atoi>
 80032c4:	4603      	mov	r3, r0
 80032c6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4aa9      	ldr	r2, [pc, #676]	; (8003570 <TM_GPS_INT_CheckTerm+0x628>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f926 	bl	8000524 <__aeabi_ui2d>
 80032d8:	4603      	mov	r3, r0
 80032da:	460c      	mov	r4, r1
 80032dc:	4aa5      	ldr	r2, [pc, #660]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 80032de:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 80032e2:	4ba4      	ldr	r3, [pc, #656]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 80032e4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	4ba1      	ldr	r3, [pc, #644]	; (8003570 <TM_GPS_INT_CheckTerm+0x628>)
 80032ec:	fba3 1302 	umull	r1, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2164      	movs	r1, #100	; 0x64
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8003578 <TM_GPS_INT_CheckTerm+0x630>
 8003306:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800330a:	ee16 0a90 	vmov	r0, s13
 800330e:	f7fd f92b 	bl	8000568 <__aeabi_f2d>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4620      	mov	r0, r4
 8003318:	4629      	mov	r1, r5
 800331a:	f7fc ffc7 	bl	80002ac <__adddf3>
 800331e:	4603      	mov	r3, r0
 8003320:	460c      	mov	r4, r1
 8003322:	4a94      	ldr	r2, [pc, #592]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 8003324:	e9c2 3402 	strd	r3, r4, [r2, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	3301      	adds	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	4a8e      	ldr	r2, [pc, #568]	; (800356c <TM_GPS_INT_CheckTerm+0x624>)
 8003332:	4413      	add	r3, r2
 8003334:	f107 0208 	add.w	r2, r7, #8
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fcfb 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f8ec 	bl	8000524 <__aeabi_ui2d>
 800334c:	4604      	mov	r4, r0
 800334e:	460d      	mov	r5, r1
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	4619      	mov	r1, r3
 8003354:	200a      	movs	r0, #10
 8003356:	f000 fd1b 	bl	8003d90 <TM_GPS_INT_Pow>
 800335a:	4603      	mov	r3, r0
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f8e1 	bl	8000524 <__aeabi_ui2d>
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	4b85      	ldr	r3, [pc, #532]	; (800357c <TM_GPS_INT_CheckTerm+0x634>)
 8003368:	f7fd f956 	bl	8000618 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4620      	mov	r0, r4
 8003372:	4629      	mov	r1, r5
 8003374:	f7fd fa7a 	bl	800086c <__aeabi_ddiv>
 8003378:	4603      	mov	r3, r0
 800337a:	460c      	mov	r4, r1
 800337c:	4618      	mov	r0, r3
 800337e:	4621      	mov	r1, r4
 8003380:	4b7c      	ldr	r3, [pc, #496]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 8003382:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003386:	461a      	mov	r2, r3
 8003388:	4623      	mov	r3, r4
 800338a:	f7fc ff8f 	bl	80002ac <__adddf3>
 800338e:	4603      	mov	r3, r0
 8003390:	460c      	mov	r4, r1
 8003392:	4a78      	ldr	r2, [pc, #480]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 8003394:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 8003398:	4b79      	ldr	r3, [pc, #484]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	4a77      	ldr	r2, [pc, #476]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 80033a2:	6013      	str	r3, [r2, #0]
			break;
 80033a4:	e34b      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 80033a6:	4a71      	ldr	r2, [pc, #452]	; (800356c <TM_GPS_INT_CheckTerm+0x624>)
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	2a57      	cmp	r2, #87	; 0x57
 80033ac:	d108      	bne.n	80033c0 <TM_GPS_INT_CheckTerm+0x478>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 80033ae:	4a71      	ldr	r2, [pc, #452]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 80033b0:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 80033b4:	460b      	mov	r3, r1
 80033b6:	f082 4400 	eor.w	r4, r2, #2147483648	; 0x80000000
 80033ba:	4a6e      	ldr	r2, [pc, #440]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 80033bc:	e9c2 3402 	strd	r3, r4, [r2, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 80033c0:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f043 0320 	orr.w	r3, r3, #32
 80033c8:	4a6d      	ldr	r2, [pc, #436]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 80033ca:	6013      	str	r3, [r2, #0]
			break;
 80033cc:	e337      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80033ce:	f107 0308 	add.w	r3, r7, #8
 80033d2:	4619      	mov	r1, r3
 80033d4:	4865      	ldr	r0, [pc, #404]	; (800356c <TM_GPS_INT_CheckTerm+0x624>)
 80033d6:	f000 fcae 	bl	8003d36 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b65      	ldr	r3, [pc, #404]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 80033e0:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 80033e2:	4b67      	ldr	r3, [pc, #412]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	4a65      	ldr	r2, [pc, #404]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 80033ec:	6013      	str	r3, [r2, #0]
			break;
 80033ee:	e326      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	4619      	mov	r1, r3
 80033f6:	485d      	ldr	r0, [pc, #372]	; (800356c <TM_GPS_INT_CheckTerm+0x624>)
 80033f8:	f000 fc9d 	bl	8003d36 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 8003402:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 8003404:	4b5e      	ldr	r3, [pc, #376]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	4a5c      	ldr	r2, [pc, #368]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 800340e:	6013      	str	r3, [r2, #0]
			break;
 8003410:	e315      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 8003412:	4b56      	ldr	r3, [pc, #344]	; (800356c <TM_GPS_INT_CheckTerm+0x624>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b2d      	cmp	r3, #45	; 0x2d
 8003418:	d156      	bne.n	80034c8 <TM_GPS_INT_CheckTerm+0x580>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 800341a:	f107 0308 	add.w	r3, r7, #8
 800341e:	4619      	mov	r1, r3
 8003420:	4858      	ldr	r0, [pc, #352]	; (8003584 <TM_GPS_INT_CheckTerm+0x63c>)
 8003422:	f000 fc88 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003426:	4603      	mov	r3, r0
 8003428:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 8003436:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3301      	adds	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	3301      	adds	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	4a48      	ldr	r2, [pc, #288]	; (800356c <TM_GPS_INT_CheckTerm+0x624>)
 800344a:	4413      	add	r3, r2
 800344c:	f107 0208 	add.w	r2, r7, #8
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fc6f 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003458:	4603      	mov	r3, r0
 800345a:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd f860 	bl	8000524 <__aeabi_ui2d>
 8003464:	4604      	mov	r4, r0
 8003466:	460d      	mov	r5, r1
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	4619      	mov	r1, r3
 800346c:	200a      	movs	r0, #10
 800346e:	f000 fc8f 	bl	8003d90 <TM_GPS_INT_Pow>
 8003472:	4603      	mov	r3, r0
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f855 	bl	8000524 <__aeabi_ui2d>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4620      	mov	r0, r4
 8003480:	4629      	mov	r1, r5
 8003482:	f7fd f9f3 	bl	800086c <__aeabi_ddiv>
 8003486:	4603      	mov	r3, r0
 8003488:	460c      	mov	r4, r1
 800348a:	4625      	mov	r5, r4
 800348c:	461c      	mov	r4, r3
 800348e:	4b39      	ldr	r3, [pc, #228]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd f868 	bl	8000568 <__aeabi_f2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4620      	mov	r0, r4
 800349e:	4629      	mov	r1, r5
 80034a0:	f7fc ff04 	bl	80002ac <__adddf3>
 80034a4:	4603      	mov	r3, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	4618      	mov	r0, r3
 80034aa:	4621      	mov	r1, r4
 80034ac:	f7fd fbac 	bl	8000c08 <__aeabi_d2f>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b30      	ldr	r3, [pc, #192]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 80034b4:	611a      	str	r2, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 80034b6:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 80034b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80034bc:	eef1 7a67 	vneg.f32	s15, s15
 80034c0:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 80034c2:	edc3 7a04 	vstr	s15, [r3, #16]
 80034c6:	e04a      	b.n	800355e <TM_GPS_INT_CheckTerm+0x616>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80034c8:	f107 0308 	add.w	r3, r7, #8
 80034cc:	4619      	mov	r1, r3
 80034ce:	4827      	ldr	r0, [pc, #156]	; (800356c <TM_GPS_INT_CheckTerm+0x624>)
 80034d0:	f000 fc31 	bl	8003d36 <TM_GPS_INT_Atoi>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e2:	4b24      	ldr	r3, [pc, #144]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 80034e4:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	3301      	adds	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	4a1e      	ldr	r2, [pc, #120]	; (800356c <TM_GPS_INT_CheckTerm+0x624>)
 80034f2:	4413      	add	r3, r2
 80034f4:	f107 0208 	add.w	r2, r7, #8
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fc1b 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003500:	4603      	mov	r3, r0
 8003502:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd f80c 	bl	8000524 <__aeabi_ui2d>
 800350c:	4604      	mov	r4, r0
 800350e:	460d      	mov	r5, r1
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	4619      	mov	r1, r3
 8003514:	200a      	movs	r0, #10
 8003516:	f000 fc3b 	bl	8003d90 <TM_GPS_INT_Pow>
 800351a:	4603      	mov	r3, r0
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd f801 	bl	8000524 <__aeabi_ui2d>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f7fd f99f 	bl	800086c <__aeabi_ddiv>
 800352e:	4603      	mov	r3, r0
 8003530:	460c      	mov	r4, r1
 8003532:	4625      	mov	r5, r4
 8003534:	461c      	mov	r4, r3
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd f814 	bl	8000568 <__aeabi_f2d>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4620      	mov	r0, r4
 8003546:	4629      	mov	r1, r5
 8003548:	f7fc feb0 	bl	80002ac <__adddf3>
 800354c:	4603      	mov	r3, r0
 800354e:	460c      	mov	r4, r1
 8003550:	4618      	mov	r0, r3
 8003552:	4621      	mov	r1, r4
 8003554:	f7fd fb58 	bl	8000c08 <__aeabi_d2f>
 8003558:	4602      	mov	r2, r0
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <TM_GPS_INT_CheckTerm+0x62c>)
 800355c:	611a      	str	r2, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f043 0310 	orr.w	r3, r3, #16
 8003566:	4a06      	ldr	r2, [pc, #24]	; (8003580 <TM_GPS_INT_CheckTerm+0x638>)
 8003568:	6013      	str	r3, [r2, #0]
			break;
 800356a:	e268      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
 800356c:	200002b4 	.word	0x200002b4
 8003570:	51eb851f 	.word	0x51eb851f
 8003574:	200002d0 	.word	0x200002d0
 8003578:	42700000 	.word	0x42700000
 800357c:	404e0000 	.word	0x404e0000
 8003580:	200002c8 	.word	0x200002c8
 8003584:	200002b5 	.word	0x200002b5
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	4619      	mov	r1, r3
 800358e:	48c2      	ldr	r0, [pc, #776]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 8003590:	f000 fbd1 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	4bc0      	ldr	r3, [pc, #768]	; (800389c <TM_GPS_INT_CheckTerm+0x954>)
 800359c:	fba3 1302 	umull	r1, r3, r3, r2
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	2164      	movs	r1, #100	; 0x64
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	4bbc      	ldr	r3, [pc, #752]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 80035ae:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ba:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80038a4 <TM_GPS_INT_CheckTerm+0x95c>
 80035be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c6:	ee17 2a90 	vmov	r2, s15
 80035ca:	4bb4      	ldr	r3, [pc, #720]	; (800389c <TM_GPS_INT_CheckTerm+0x954>)
 80035cc:	fb83 1302 	smull	r1, r3, r3, r2
 80035d0:	1159      	asrs	r1, r3, #5
 80035d2:	17d3      	asrs	r3, r2, #31
 80035d4:	1acb      	subs	r3, r1, r3
 80035d6:	2164      	movs	r1, #100	; 0x64
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	4baf      	ldr	r3, [pc, #700]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 80035e2:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ee:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80038a8 <TM_GPS_INT_CheckTerm+0x960>
 80035f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035fa:	ee17 2a90 	vmov	r2, s15
 80035fe:	4ba7      	ldr	r3, [pc, #668]	; (800389c <TM_GPS_INT_CheckTerm+0x954>)
 8003600:	fb83 1302 	smull	r1, r3, r3, r2
 8003604:	1159      	asrs	r1, r3, #5
 8003606:	17d3      	asrs	r3, r2, #31
 8003608:	1acb      	subs	r3, r1, r3
 800360a:	2164      	movs	r1, #100	; 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4ba2      	ldr	r3, [pc, #648]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 8003616:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	3301      	adds	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	4a9d      	ldr	r2, [pc, #628]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 8003622:	4413      	add	r3, r2
 8003624:	f107 0208 	add.w	r2, r7, #8
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fb83 	bl	8003d36 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	b29a      	uxth	r2, r3
 8003634:	4b9a      	ldr	r3, [pc, #616]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 8003636:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 8003638:	4b9c      	ldr	r3, [pc, #624]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003640:	4a9a      	ldr	r2, [pc, #616]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 8003642:	6013      	str	r3, [r2, #0]
			break;
 8003644:	e1fb      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003646:	f107 0308 	add.w	r3, r7, #8
 800364a:	4619      	mov	r1, r3
 800364c:	4892      	ldr	r0, [pc, #584]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 800364e:	f000 fb72 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003652:	4603      	mov	r3, r0
 8003654:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	ee07 3a90 	vmov	s15, r3
 800365c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003660:	4b8f      	ldr	r3, [pc, #572]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 8003662:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	3301      	adds	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	4a8a      	ldr	r2, [pc, #552]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 8003670:	4413      	add	r3, r2
 8003672:	f107 0208 	add.w	r2, r7, #8
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fb5c 	bl	8003d36 <TM_GPS_INT_Atoi>
 800367e:	4603      	mov	r3, r0
 8003680:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368c:	ee17 0a90 	vmov	r0, s15
 8003690:	f7fc ff6a 	bl	8000568 <__aeabi_f2d>
 8003694:	4604      	mov	r4, r0
 8003696:	460d      	mov	r5, r1
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	4619      	mov	r1, r3
 800369c:	200a      	movs	r0, #10
 800369e:	f000 fb77 	bl	8003d90 <TM_GPS_INT_Pow>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc ff3d 	bl	8000524 <__aeabi_ui2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4620      	mov	r0, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	f7fd f8db 	bl	800086c <__aeabi_ddiv>
 80036b6:	4603      	mov	r3, r0
 80036b8:	460c      	mov	r4, r1
 80036ba:	4618      	mov	r0, r3
 80036bc:	4621      	mov	r1, r4
 80036be:	f7fd faa3 	bl	8000c08 <__aeabi_d2f>
 80036c2:	ee07 0a10 	vmov	s14, r0
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 80036c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80036cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d0:	4b73      	ldr	r3, [pc, #460]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 80036d2:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 80036d6:	4b75      	ldr	r3, [pc, #468]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036de:	4a73      	ldr	r2, [pc, #460]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 80036e0:	6013      	str	r3, [r2, #0]
			break;
 80036e2:	e1ac      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80036e4:	f107 0308 	add.w	r3, r7, #8
 80036e8:	4619      	mov	r1, r3
 80036ea:	486b      	ldr	r0, [pc, #428]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 80036ec:	f000 fb23 	bl	8003d36 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4b6a      	ldr	r3, [pc, #424]	; (800389c <TM_GPS_INT_CheckTerm+0x954>)
 80036f4:	fba3 1302 	umull	r1, r3, r3, r2
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	2164      	movs	r1, #100	; 0x64
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	b2da      	uxtb	r2, r3
 8003704:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 8003706:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003712:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80038a4 <TM_GPS_INT_CheckTerm+0x95c>
 8003716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800371a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800371e:	ee17 2a90 	vmov	r2, s15
 8003722:	4b5e      	ldr	r3, [pc, #376]	; (800389c <TM_GPS_INT_CheckTerm+0x954>)
 8003724:	fb83 1302 	smull	r1, r3, r3, r2
 8003728:	1159      	asrs	r1, r3, #5
 800372a:	17d3      	asrs	r3, r2, #31
 800372c:	1acb      	subs	r3, r1, r3
 800372e:	2164      	movs	r1, #100	; 0x64
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	b2da      	uxtb	r2, r3
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 800373a:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80038a8 <TM_GPS_INT_CheckTerm+0x960>
 800374a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800374e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003752:	ee17 2a90 	vmov	r2, s15
 8003756:	4b51      	ldr	r3, [pc, #324]	; (800389c <TM_GPS_INT_CheckTerm+0x954>)
 8003758:	fb83 1302 	smull	r1, r3, r3, r2
 800375c:	1159      	asrs	r1, r3, #5
 800375e:	17d3      	asrs	r3, r2, #31
 8003760:	1acb      	subs	r3, r1, r3
 8003762:	2164      	movs	r1, #100	; 0x64
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	b2da      	uxtb	r2, r3
 800376c:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 800376e:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 8003770:	4b4e      	ldr	r3, [pc, #312]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003778:	4a4c      	ldr	r2, [pc, #304]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 800377a:	6013      	str	r3, [r2, #0]
			break;
 800377c:	e15f      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 800377e:	4b46      	ldr	r3, [pc, #280]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b41      	cmp	r3, #65	; 0x41
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	4b44      	ldr	r3, [pc, #272]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 8003790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 8003794:	4b45      	ldr	r3, [pc, #276]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800379c:	4a43      	ldr	r2, [pc, #268]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 800379e:	6013      	str	r3, [r2, #0]
			break;
 80037a0:	e14d      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	4619      	mov	r1, r3
 80037a8:	483b      	ldr	r0, [pc, #236]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 80037aa:	f000 fac4 	bl	8003d36 <TM_GPS_INT_Atoi>
 80037ae:	4603      	mov	r3, r0
 80037b0:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037bc:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 80037be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	3301      	adds	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	4a33      	ldr	r2, [pc, #204]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 80037cc:	4413      	add	r3, r2
 80037ce:	f107 0208 	add.w	r2, r7, #8
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 faae 	bl	8003d36 <TM_GPS_INT_Atoi>
 80037da:	4603      	mov	r3, r0
 80037dc:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	4619      	mov	r1, r3
 80037ec:	200a      	movs	r0, #10
 80037ee:	f000 facf 	bl	8003d90 <TM_GPS_INT_Pow>
 80037f2:	ee07 0a90 	vmov	s15, r0
 80037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fa:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 8003800:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 800380a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 800380e:	4b27      	ldr	r3, [pc, #156]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003816:	4a25      	ldr	r2, [pc, #148]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 8003818:	6013      	str	r3, [r2, #0]
			break;
 800381a:	e110      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800381c:	f107 0308 	add.w	r3, r7, #8
 8003820:	4619      	mov	r1, r3
 8003822:	481d      	ldr	r0, [pc, #116]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 8003824:	f000 fa87 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003828:	4603      	mov	r3, r0
 800382a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 8003838:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	3301      	adds	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <TM_GPS_INT_CheckTerm+0x950>)
 8003846:	4413      	add	r3, r2
 8003848:	f107 0208 	add.w	r2, r7, #8
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fa71 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	4619      	mov	r1, r3
 8003866:	200a      	movs	r0, #10
 8003868:	f000 fa92 	bl	8003d90 <TM_GPS_INT_Pow>
 800386c:	ee07 0a90 	vmov	s15, r0
 8003870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003874:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 800387a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800387e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <TM_GPS_INT_CheckTerm+0x958>)
 8003884:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003890:	4a06      	ldr	r2, [pc, #24]	; (80038ac <TM_GPS_INT_CheckTerm+0x964>)
 8003892:	6013      	str	r3, [r2, #0]
			break;
 8003894:	e0d3      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
 8003896:	bf00      	nop
 8003898:	200002b4 	.word	0x200002b4
 800389c:	51eb851f 	.word	0x51eb851f
 80038a0:	200002d0 	.word	0x200002d0
 80038a4:	3c23d70a 	.word	0x3c23d70a
 80038a8:	38d1b717 	.word	0x38d1b717
 80038ac:	200002c8 	.word	0x200002c8
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	4619      	mov	r1, r3
 80038b6:	48af      	ldr	r0, [pc, #700]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 80038b8:	f000 fa3d 	bl	8003d36 <TM_GPS_INT_Atoi>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ca:	4bab      	ldr	r3, [pc, #684]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 80038cc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	3301      	adds	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	4aa6      	ldr	r2, [pc, #664]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 80038da:	4413      	add	r3, r2
 80038dc:	f107 0208 	add.w	r2, r7, #8
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fa27 	bl	8003d36 <TM_GPS_INT_Atoi>
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	4619      	mov	r1, r3
 80038fa:	200a      	movs	r0, #10
 80038fc:	f000 fa48 	bl	8003d90 <TM_GPS_INT_Pow>
 8003900:	ee07 0a90 	vmov	s15, r0
 8003904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003908:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800390c:	4b9a      	ldr	r3, [pc, #616]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 800390e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003916:	4b98      	ldr	r3, [pc, #608]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 8003918:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 800391c:	4b97      	ldr	r3, [pc, #604]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003924:	4a95      	ldr	r2, [pc, #596]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 8003926:	6013      	str	r3, [r2, #0]
			break;
 8003928:	e089      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	4619      	mov	r1, r3
 8003930:	4890      	ldr	r0, [pc, #576]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003932:	f000 fa00 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003944:	4b8c      	ldr	r3, [pc, #560]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 8003946:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	3301      	adds	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	4a88      	ldr	r2, [pc, #544]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003954:	4413      	add	r3, r2
 8003956:	f107 0208 	add.w	r2, r7, #8
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f000 f9ea 	bl	8003d36 <TM_GPS_INT_Atoi>
 8003962:	4603      	mov	r3, r0
 8003964:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	4619      	mov	r1, r3
 8003974:	200a      	movs	r0, #10
 8003976:	f000 fa0b 	bl	8003d90 <TM_GPS_INT_Pow>
 800397a:	ee07 0a90 	vmov	s15, r0
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003986:	4b7c      	ldr	r3, [pc, #496]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 8003988:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800398c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003990:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 8003992:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 8003996:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800399e:	4a77      	ldr	r2, [pc, #476]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 80039a0:	6013      	str	r3, [r2, #0]
			break;
 80039a2:	e04c      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80039a4:	f107 0308 	add.w	r3, r7, #8
 80039a8:	4619      	mov	r1, r3
 80039aa:	4872      	ldr	r0, [pc, #456]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 80039ac:	f000 f9c3 	bl	8003d36 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	4b70      	ldr	r3, [pc, #448]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 80039b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 80039ba:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c2:	4a6e      	ldr	r2, [pc, #440]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 80039c4:	6013      	str	r3, [r2, #0]
			break;
 80039c6:	e03a      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80039c8:	f107 0308 	add.w	r3, r7, #8
 80039cc:	4619      	mov	r1, r3
 80039ce:	4869      	ldr	r0, [pc, #420]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 80039d0:	f000 f9b1 	bl	8003d36 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <TM_GPS_INT_CheckTerm+0xc38>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	3b03      	subs	r3, #3
 80039dc:	b2d1      	uxtb	r1, r2
 80039de:	4a66      	ldr	r2, [pc, #408]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 80039e0:	4413      	add	r3, r2
 80039e2:	460a      	mov	r2, r1
 80039e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 80039e8:	4b66      	ldr	r3, [pc, #408]	; (8003b84 <TM_GPS_INT_CheckTerm+0xc3c>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	4b64      	ldr	r3, [pc, #400]	; (8003b84 <TM_GPS_INT_CheckTerm+0xc3c>)
 80039f2:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 80039f4:	4b60      	ldr	r3, [pc, #384]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 80039f6:	7d1a      	ldrb	r2, [r3, #20]
 80039f8:	4b62      	ldr	r3, [pc, #392]	; (8003b84 <TM_GPS_INT_CheckTerm+0xc3c>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d11d      	bne.n	8003a3c <TM_GPS_INT_CheckTerm+0xaf4>
				ids_count = 0;						/* Reset count, we have all statements */
 8003a00:	4b60      	ldr	r3, [pc, #384]	; (8003b84 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8003a06:	4b5d      	ldr	r3, [pc, #372]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0e:	4a5b      	ldr	r2, [pc, #364]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a10:	6013      	str	r3, [r2, #0]
			}
			break;
 8003a12:	e013      	b.n	8003a3c <TM_GPS_INT_CheckTerm+0xaf4>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003a14:	f107 0308 	add.w	r3, r7, #8
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4856      	ldr	r0, [pc, #344]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a1c:	f000 f98b 	bl	8003d36 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 8003a2a:	4b54      	ldr	r3, [pc, #336]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a32:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a34:	6013      	str	r3, [r2, #0]
			break;
 8003a36:	e002      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
#endif
		default: 
			break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <TM_GPS_INT_CheckTerm+0xaf6>
			break;
 8003a3c:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 8003a3e:	4b52      	ldr	r3, [pc, #328]	; (8003b88 <TM_GPS_INT_CheckTerm+0xc40>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	f040 8090 	bne.w	8003b68 <TM_GPS_INT_CheckTerm+0xc20>
		if (GPS_Term_Number == 1) {
 8003a48:	4b4d      	ldr	r3, [pc, #308]	; (8003b80 <TM_GPS_INT_CheckTerm+0xc38>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d109      	bne.n	8003a64 <TM_GPS_INT_CheckTerm+0xb1c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 8003a50:	f107 0308 	add.w	r3, r7, #8
 8003a54:	4619      	mov	r1, r3
 8003a56:	4847      	ldr	r0, [pc, #284]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a58:	f000 f96d 	bl	8003d36 <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <TM_GPS_INT_CheckTerm+0xc44>)
 8003a62:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 8003a64:	4b46      	ldr	r3, [pc, #280]	; (8003b80 <TM_GPS_INT_CheckTerm+0xc38>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d109      	bne.n	8003a80 <TM_GPS_INT_CheckTerm+0xb38>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 8003a6c:	f107 0308 	add.w	r3, r7, #8
 8003a70:	4619      	mov	r1, r3
 8003a72:	4840      	ldr	r0, [pc, #256]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a74:	f000 f95f 	bl	8003d36 <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	4b44      	ldr	r3, [pc, #272]	; (8003b90 <TM_GPS_INT_CheckTerm+0xc48>)
 8003a7e:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <TM_GPS_INT_CheckTerm+0xc38>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d96f      	bls.n	8003b68 <TM_GPS_INT_CheckTerm+0xc20>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4839      	ldr	r0, [pc, #228]	; (8003b74 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a90:	f000 f951 	bl	8003d36 <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 8003a94:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <TM_GPS_INT_CheckTerm+0xc38>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3b04      	subs	r3, #4
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b3d      	ldr	r3, [pc, #244]	; (8003b94 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003a9e:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 8003aa0:	4b3c      	ldr	r3, [pc, #240]	; (8003b94 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <TM_GPS_INT_CheckTerm+0xc50>)
 8003aac:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 8003aae:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <TM_GPS_INT_CheckTerm+0xc48>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	333f      	adds	r3, #63	; 0x3f
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003ac8:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 8003aca:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b17      	cmp	r3, #23
 8003ad0:	d84a      	bhi.n	8003b68 <TM_GPS_INT_CheckTerm+0xc20>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8003ad2:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <TM_GPS_INT_CheckTerm+0xc50>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10e      	bne.n	8003af8 <TM_GPS_INT_CheckTerm+0xbb0>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	b2d0      	uxtb	r0, r2
 8003ae4:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	440b      	add	r3, r1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	3346      	adds	r3, #70	; 0x46
 8003af2:	4602      	mov	r2, r0
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e037      	b.n	8003b68 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 1) {
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <TM_GPS_INT_CheckTerm+0xc50>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10e      	bne.n	8003b1e <TM_GPS_INT_CheckTerm+0xbd6>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	b2d0      	uxtb	r0, r2
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	440b      	add	r3, r1
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4413      	add	r3, r2
 8003b16:	3347      	adds	r3, #71	; 0x47
 8003b18:	4602      	mov	r2, r0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e024      	b.n	8003b68 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 2) {
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <TM_GPS_INT_CheckTerm+0xc50>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d10e      	bne.n	8003b44 <TM_GPS_INT_CheckTerm+0xbfc>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	b290      	uxth	r0, r2
 8003b30:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 8003b32:	460b      	mov	r3, r1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	440b      	add	r3, r1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3348      	adds	r3, #72	; 0x48
 8003b3e:	4602      	mov	r2, r0
 8003b40:	801a      	strh	r2, [r3, #0]
 8003b42:	e011      	b.n	8003b68 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 3) {
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <TM_GPS_INT_CheckTerm+0xc50>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d10d      	bne.n	8003b68 <TM_GPS_INT_CheckTerm+0xc20>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	4619      	mov	r1, r3
 8003b54:	b2d0      	uxtb	r0, r2
 8003b56:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <TM_GPS_INT_CheckTerm+0xc30>)
 8003b58:	460b      	mov	r3, r1
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	440b      	add	r3, r1
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	334a      	adds	r3, #74	; 0x4a
 8003b64:	4602      	mov	r2, r0
 8003b66:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	ecbd 8b02 	vpop	{d8}
 8003b70:	bdb0      	pop	{r4, r5, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	200002b4 	.word	0x200002b4
 8003b78:	200002d0 	.word	0x200002d0
 8003b7c:	200002c8 	.word	0x200002c8
 8003b80:	200002c3 	.word	0x200002c3
 8003b84:	20000407 	.word	0x20000407
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	20000403 	.word	0x20000403
 8003b90:	20000404 	.word	0x20000404
 8003b94:	20000405 	.word	0x20000405
 8003b98:	20000406 	.word	0x20000406

08003b9c <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f939 	bl	8003e1c <TM_GPS_INT_FlagsOk>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 808d 	beq.w	8003ccc <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 8003bb2:	4b50      	ldr	r3, [pc, #320]	; (8003cf4 <TM_GPS_INT_Return+0x158>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 8003bb8:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003bba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003bc4:	4b4c      	ldr	r3, [pc, #304]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003bc6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8003bd0:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003bd2:	7d1a      	ldrb	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 8003bd8:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003bda:	7d5a      	ldrb	r2, [r3, #21]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 8003be0:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a43      	ldr	r2, [pc, #268]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003bec:	3316      	adds	r3, #22
 8003bee:	3216      	adds	r2, #22
 8003bf0:	6811      	ldr	r1, [r2, #0]
 8003bf2:	6019      	str	r1, [r3, #0]
 8003bf4:	8892      	ldrh	r2, [r2, #4]
 8003bf6:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 8003bf8:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3d      	ldr	r2, [pc, #244]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c04:	331c      	adds	r3, #28
 8003c06:	321c      	adds	r2, #28
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	8019      	strh	r1, [r3, #0]
 8003c0e:	3302      	adds	r3, #2
 8003c10:	0c12      	lsrs	r2, r2, #16
 8003c12:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 8003c14:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c16:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 8003c20:	4b35      	ldr	r3, [pc, #212]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 8003c28:	4b33      	ldr	r3, [pc, #204]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 8003c38:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8003c40:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c42:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e00d      	b.n	8003c6e <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	4928      	ldr	r1, [pc, #160]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c58:	440a      	add	r2, r1
 8003c5a:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	460a      	mov	r2, r1
 8003c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b0b      	cmp	r3, #11
 8003c72:	d9ee      	bls.n	8003c52 <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 8003c74:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c76:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e019      	b.n	8003cba <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	7bf9      	ldrb	r1, [r7, #15]
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	440b      	add	r3, r1
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4403      	add	r3, r0
 8003c96:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8003c9a:	4917      	ldr	r1, [pc, #92]	; (8003cf8 <TM_GPS_INT_Return+0x15c>)
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	440b      	add	r3, r1
 8003ca6:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8003caa:	4603      	mov	r3, r0
 8003cac:	6811      	ldr	r1, [r2, #0]
 8003cae:	6019      	str	r1, [r3, #0]
 8003cb0:	8892      	ldrh	r2, [r2, #4]
 8003cb2:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b17      	cmp	r3, #23
 8003cbe:	d9e2      	bls.n	8003c86 <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e00e      	b.n	8003cea <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <TM_GPS_INT_Return+0x158>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e004      	b.n	8003cea <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003ce8:	2301      	movs	r3, #1
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd90      	pop	{r4, r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200003f8 	.word	0x200003f8
 8003cf8:	200002d0 	.word	0x200002d0

08003cfc <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
	while (*str) {
 8003d06:	e00b      	b.n	8003d20 <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	603a      	str	r2, [r7, #0]
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	1c59      	adds	r1, r3, #1
 8003d14:	6079      	str	r1, [r7, #4]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e004      	b.n	8003d2a <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ef      	bne.n	8003d08 <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 8003d28:	2301      	movs	r3, #1
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 8003d36:	b480      	push	{r7}
 8003d38:	b085      	sub	sp, #20
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 8003d4a:	e012      	b.n	8003d72 <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	4619      	mov	r1, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	440b      	add	r3, r1
 8003d64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	601a      	str	r2, [r3, #0]
		count++;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b2f      	cmp	r3, #47	; 0x2f
 8003d78:	d903      	bls.n	8003d82 <TM_GPS_INT_Atoi+0x4c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b39      	cmp	r3, #57	; 0x39
 8003d80:	d9e4      	bls.n	8003d4c <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	460a      	mov	r2, r1
 8003d9a:	71fb      	strb	r3, [r7, #7]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 8003da0:	2301      	movs	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003da4:	e004      	b.n	8003db0 <TM_GPS_INT_Pow+0x20>
		ret *= x;
 8003da6:	79fa      	ldrb	r2, [r7, #7]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003db0:	79bb      	ldrb	r3, [r7, #6]
 8003db2:	1e5a      	subs	r2, r3, #1
 8003db4:	71ba      	strb	r2, [r7, #6]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f5      	bne.n	8003da6 <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	2b2f      	cmp	r3, #47	; 0x2f
 8003dd6:	d906      	bls.n	8003de6 <TM_GPS_INT_Hex2Dec+0x1e>
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b39      	cmp	r3, #57	; 0x39
 8003ddc:	d803      	bhi.n	8003de6 <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	3b30      	subs	r3, #48	; 0x30
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e014      	b.n	8003e10 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d906      	bls.n	8003dfa <TM_GPS_INT_Hex2Dec+0x32>
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	2b46      	cmp	r3, #70	; 0x46
 8003df0:	d803      	bhi.n	8003dfa <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	3b37      	subs	r3, #55	; 0x37
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	e00a      	b.n	8003e10 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2b60      	cmp	r3, #96	; 0x60
 8003dfe:	d906      	bls.n	8003e0e <TM_GPS_INT_Hex2Dec+0x46>
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	2b66      	cmp	r3, #102	; 0x66
 8003e04:	d803      	bhi.n	8003e0e <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	3b57      	subs	r3, #87	; 0x57
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e000      	b.n	8003e10 <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <TM_GPS_INT_FlagsOk+0x54>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <TM_GPS_INT_FlagsOk+0x58>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d118      	bne.n	8003e62 <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e00d      	b.n	8003e52 <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	333e      	adds	r3, #62	; 0x3e
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	7ddb      	ldrb	r3, [r3, #23]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e00b      	b.n	8003e64 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3eb      	bcc.n	8003e36 <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	200002c8 	.word	0x200002c8
 8003e74:	200002cc 	.word	0x200002cc

08003e78 <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <TM_GPS_INT_ClearFlags+0x44>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	e00a      	b.n	8003ea2 <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	333e      	adds	r3, #62	; 0x3e
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d3ee      	bcc.n	8003e8c <TM_GPS_INT_ClearFlags+0x14>
	}
}
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	200002c8 	.word	0x200002c8

08003ec0 <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 8003ec8:	4baf      	ldr	r3, [pc, #700]	; (8004188 <TM_GPS_INT_CheckEmpty+0x2c8>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	f040 8151 	bne.w	8004174 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003ed2:	4bae      	ldr	r3, [pc, #696]	; (800418c <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	015b      	lsls	r3, r3, #5
 8003ed8:	4aad      	ldr	r2, [pc, #692]	; (8004190 <TM_GPS_INT_CheckEmpty+0x2d0>)
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	2b62      	cmp	r3, #98	; 0x62
 8003ee2:	f200 8149 	bhi.w	8004178 <TM_GPS_INT_CheckEmpty+0x2b8>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <TM_GPS_INT_CheckEmpty+0x2c>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	080040db 	.word	0x080040db
 8003ef0:	08004079 	.word	0x08004079
 8003ef4:	08004087 	.word	0x08004087
 8003ef8:	08004095 	.word	0x08004095
 8003efc:	080040a3 	.word	0x080040a3
 8003f00:	080040bf 	.word	0x080040bf
 8003f04:	080040b1 	.word	0x080040b1
 8003f08:	08004179 	.word	0x08004179
 8003f0c:	080040cd 	.word	0x080040cd
 8003f10:	08004179 	.word	0x08004179
 8003f14:	08004179 	.word	0x08004179
 8003f18:	08004179 	.word	0x08004179
 8003f1c:	08004179 	.word	0x08004179
 8003f20:	08004179 	.word	0x08004179
 8003f24:	08004179 	.word	0x08004179
 8003f28:	08004179 	.word	0x08004179
 8003f2c:	08004179 	.word	0x08004179
 8003f30:	08004179 	.word	0x08004179
 8003f34:	08004179 	.word	0x08004179
 8003f38:	08004179 	.word	0x08004179
 8003f3c:	08004179 	.word	0x08004179
 8003f40:	08004179 	.word	0x08004179
 8003f44:	08004179 	.word	0x08004179
 8003f48:	08004179 	.word	0x08004179
 8003f4c:	08004179 	.word	0x08004179
 8003f50:	08004179 	.word	0x08004179
 8003f54:	08004179 	.word	0x08004179
 8003f58:	08004179 	.word	0x08004179
 8003f5c:	08004179 	.word	0x08004179
 8003f60:	08004179 	.word	0x08004179
 8003f64:	08004179 	.word	0x08004179
 8003f68:	08004179 	.word	0x08004179
 8003f6c:	08004179 	.word	0x08004179
 8003f70:	08004105 	.word	0x08004105
 8003f74:	08004179 	.word	0x08004179
 8003f78:	08004179 	.word	0x08004179
 8003f7c:	08004179 	.word	0x08004179
 8003f80:	08004179 	.word	0x08004179
 8003f84:	080040e9 	.word	0x080040e9
 8003f88:	08004113 	.word	0x08004113
 8003f8c:	080040f7 	.word	0x080040f7
 8003f90:	08004179 	.word	0x08004179
 8003f94:	08004179 	.word	0x08004179
 8003f98:	08004179 	.word	0x08004179
 8003f9c:	08004179 	.word	0x08004179
 8003fa0:	08004179 	.word	0x08004179
 8003fa4:	08004179 	.word	0x08004179
 8003fa8:	08004179 	.word	0x08004179
 8003fac:	08004179 	.word	0x08004179
 8003fb0:	08004179 	.word	0x08004179
 8003fb4:	08004179 	.word	0x08004179
 8003fb8:	08004179 	.word	0x08004179
 8003fbc:	08004179 	.word	0x08004179
 8003fc0:	08004179 	.word	0x08004179
 8003fc4:	08004179 	.word	0x08004179
 8003fc8:	08004179 	.word	0x08004179
 8003fcc:	08004179 	.word	0x08004179
 8003fd0:	08004179 	.word	0x08004179
 8003fd4:	08004179 	.word	0x08004179
 8003fd8:	08004179 	.word	0x08004179
 8003fdc:	08004179 	.word	0x08004179
 8003fe0:	08004179 	.word	0x08004179
 8003fe4:	08004179 	.word	0x08004179
 8003fe8:	08004179 	.word	0x08004179
 8003fec:	08004179 	.word	0x08004179
 8003ff0:	0800414b 	.word	0x0800414b
 8003ff4:	08004159 	.word	0x08004159
 8003ff8:	08004159 	.word	0x08004159
 8003ffc:	08004159 	.word	0x08004159
 8004000:	08004159 	.word	0x08004159
 8004004:	08004159 	.word	0x08004159
 8004008:	08004159 	.word	0x08004159
 800400c:	08004159 	.word	0x08004159
 8004010:	08004159 	.word	0x08004159
 8004014:	08004159 	.word	0x08004159
 8004018:	08004159 	.word	0x08004159
 800401c:	08004159 	.word	0x08004159
 8004020:	08004159 	.word	0x08004159
 8004024:	0800412f 	.word	0x0800412f
 8004028:	08004121 	.word	0x08004121
 800402c:	0800413d 	.word	0x0800413d
 8004030:	08004179 	.word	0x08004179
 8004034:	08004179 	.word	0x08004179
 8004038:	08004179 	.word	0x08004179
 800403c:	08004179 	.word	0x08004179
 8004040:	08004179 	.word	0x08004179
 8004044:	08004179 	.word	0x08004179
 8004048:	08004179 	.word	0x08004179
 800404c:	08004179 	.word	0x08004179
 8004050:	08004179 	.word	0x08004179
 8004054:	08004179 	.word	0x08004179
 8004058:	08004179 	.word	0x08004179
 800405c:	08004179 	.word	0x08004179
 8004060:	08004179 	.word	0x08004179
 8004064:	08004179 	.word	0x08004179
 8004068:	08004179 	.word	0x08004179
 800406c:	08004179 	.word	0x08004179
 8004070:	08004179 	.word	0x08004179
 8004074:	08004167 	.word	0x08004167
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 8004078:	4b46      	ldr	r3, [pc, #280]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	4a44      	ldr	r2, [pc, #272]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	e079      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 8004086:	4b43      	ldr	r3, [pc, #268]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408e:	4a41      	ldr	r2, [pc, #260]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e072      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 8004094:	4b3f      	ldr	r3, [pc, #252]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f043 0302 	orr.w	r3, r3, #2
 800409c:	4a3d      	ldr	r2, [pc, #244]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e06b      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 80040a2:	4b3c      	ldr	r3, [pc, #240]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f043 0320 	orr.w	r3, r3, #32
 80040aa:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e064      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 80040b0:	4b38      	ldr	r3, [pc, #224]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	4a36      	ldr	r2, [pc, #216]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	e05d      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 80040be:	4b35      	ldr	r3, [pc, #212]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f043 0308 	orr.w	r3, r3, #8
 80040c6:	4a33      	ldr	r2, [pc, #204]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e056      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 80040cc:	4b31      	ldr	r3, [pc, #196]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f043 0310 	orr.w	r3, r3, #16
 80040d4:	4a2f      	ldr	r2, [pc, #188]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e04f      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 80040da:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e2:	4a2c      	ldr	r2, [pc, #176]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e048      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f0:	4a28      	ldr	r2, [pc, #160]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e041      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 80040f6:	4b27      	ldr	r3, [pc, #156]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040fe:	4a25      	ldr	r2, [pc, #148]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e03a      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 8004104:	4b23      	ldr	r3, [pc, #140]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410c:	4a21      	ldr	r2, [pc, #132]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	e033      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411a:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e02c      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004128:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	e025      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 800412e:	4b19      	ldr	r3, [pc, #100]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004136:	4a17      	ldr	r2, [pc, #92]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e01e      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 800413c:	4b15      	ldr	r3, [pc, #84]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004144:	4a13      	ldr	r2, [pc, #76]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e017      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e010      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004162:	6013      	str	r3, [r2, #0]
				break;
 8004164:	e009      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e002      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 8004174:	bf00      	nop
 8004176:	e000      	b.n	800417a <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 8004178:	bf00      	nop
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	200002c4 	.word	0x200002c4
 800418c:	20000000 	.word	0x20000000
 8004190:	200002c3 	.word	0x200002c3
 8004194:	200002c8 	.word	0x200002c8

08004198 <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 8004198:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b3f      	cmp	r3, #63	; 0x3f
 80041b0:	dc16      	bgt.n	80041e0 <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 80041b2:	2201      	movs	r2, #1
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	4619      	mov	r1, r3
 80041bc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80041c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80041c4:	ea03 0b01 	and.w	fp, r3, r1
 80041c8:	ea04 0c02 	and.w	ip, r4, r2
 80041cc:	ea5b 030c 	orrs.w	r3, fp, ip
 80041d0:	d002      	beq.n	80041d8 <_bitCount64+0x40>
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	3301      	adds	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	3301      	adds	r3, #1
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	e7e5      	b.n	80041ac <_bitCount64+0x14>
	}
	return cnt;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80041ec:	4770      	bx	lr
	...

080041f0 <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 80041f8:	4a12      	ldr	r2, [pc, #72]	; (8004244 <SBUS_init+0x54>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 80041fe:	2219      	movs	r2, #25
 8004200:	2100      	movs	r1, #0
 8004202:	4811      	ldr	r0, [pc, #68]	; (8004248 <SBUS_init+0x58>)
 8004204:	f011 fd5b 	bl	8015cbe <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 8004208:	2219      	movs	r2, #25
 800420a:	2100      	movs	r1, #0
 800420c:	480f      	ldr	r0, [pc, #60]	; (800424c <SBUS_init+0x5c>)
 800420e:	f011 fd56 	bl	8015cbe <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	2100      	movs	r1, #0
 8004216:	480e      	ldr	r0, [pc, #56]	; (8004250 <SBUS_init+0x60>)
 8004218:	f011 fd51 	bl	8015cbe <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 800421c:	2224      	movs	r2, #36	; 0x24
 800421e:	2100      	movs	r1, #0
 8004220:	480c      	ldr	r0, [pc, #48]	; (8004254 <SBUS_init+0x64>)
 8004222:	f011 fd4c 	bl	8015cbe <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <SBUS_init+0x54>)
 8004228:	2200      	movs	r2, #0
 800422a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 800422e:	4b05      	ldr	r3, [pc, #20]	; (8004244 <SBUS_init+0x54>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2219      	movs	r2, #25
 8004234:	4904      	ldr	r1, [pc, #16]	; (8004248 <SBUS_init+0x58>)
 8004236:	4618      	mov	r0, r3
 8004238:	f00b fbee 	bl	800fa18 <HAL_UART_Receive_DMA>
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000490 	.word	0x20000490
 8004248:	20000494 	.word	0x20000494
 800424c:	200004ad 	.word	0x200004ad
 8004250:	200004c6 	.word	0x200004c6
 8004254:	200004ea 	.word	0x200004ea

08004258 <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 8004258:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 8004260:	4b3a      	ldr	r3, [pc, #232]	; (800434c <SBUS_decoding+0xf4>)
 8004262:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 800426e:	4b37      	ldr	r3, [pc, #220]	; (800434c <SBUS_decoding+0xf4>)
 8004270:	2200      	movs	r2, #0
 8004272:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 8004276:	2300      	movs	r3, #0
 8004278:	e1f6      	b.n	8004668 <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 800427a:	4b34      	ldr	r3, [pc, #208]	; (800434c <SBUS_decoding+0xf4>)
 800427c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004280:	3301      	adds	r3, #1
 8004282:	b2da      	uxtb	r2, r3
 8004284:	4b31      	ldr	r3, [pc, #196]	; (800434c <SBUS_decoding+0xf4>)
 8004286:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800428a:	4b30      	ldr	r3, [pc, #192]	; (800434c <SBUS_decoding+0xf4>)
 800428c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <SBUS_decoding+0x4e>
 800429e:	4b2b      	ldr	r3, [pc, #172]	; (800434c <SBUS_decoding+0xf4>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 80042a6:	4b29      	ldr	r3, [pc, #164]	; (800434c <SBUS_decoding+0xf4>)
 80042a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <SBUS_decoding+0x84>
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <SBUS_decoding+0xf4>)
 80042b6:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <SBUS_decoding+0xf4>)
 80042bc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80042c0:	4618      	mov	r0, r3
 80042c2:	2301      	movs	r3, #1
 80042c4:	4083      	lsls	r3, r0
 80042c6:	469b      	mov	fp, r3
 80042c8:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80042cc:	ea4b 0301 	orr.w	r3, fp, r1
 80042d0:	ea4c 0402 	orr.w	r4, ip, r2
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <SBUS_decoding+0xf4>)
 80042d6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 80042da:	e013      	b.n	8004304 <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 80042dc:	4b1b      	ldr	r3, [pc, #108]	; (800434c <SBUS_decoding+0xf4>)
 80042de:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 80042e2:	4b1a      	ldr	r3, [pc, #104]	; (800434c <SBUS_decoding+0xf4>)
 80042e4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80042e8:	4618      	mov	r0, r3
 80042ea:	2301      	movs	r3, #1
 80042ec:	4083      	lsls	r3, r0
 80042ee:	43db      	mvns	r3, r3
 80042f0:	469b      	mov	fp, r3
 80042f2:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80042f6:	ea0b 0301 	and.w	r3, fp, r1
 80042fa:	ea0c 0402 	and.w	r4, ip, r2
 80042fe:	4a13      	ldr	r2, [pc, #76]	; (800434c <SBUS_decoding+0xf4>)
 8004300:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 8004304:	4b11      	ldr	r3, [pc, #68]	; (800434c <SBUS_decoding+0xf4>)
 8004306:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800430a:	4618      	mov	r0, r3
 800430c:	4621      	mov	r1, r4
 800430e:	f7ff ff43 	bl	8004198 <_bitCount64>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <SBUS_decoding+0xf4>)
 8004318:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <SBUS_decoding+0xf4>)
 800431e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004322:	2b14      	cmp	r3, #20
 8004324:	d904      	bls.n	8004330 <SBUS_decoding+0xd8>
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <SBUS_decoding+0xf4>)
 8004328:	2201      	movs	r2, #1
 800432a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800432e:	e003      	b.n	8004338 <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <SBUS_decoding+0xf4>)
 8004332:	2202      	movs	r2, #2
 8004334:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <SBUS_decoding+0xf4>)
 800433a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <SBUS_decoding+0xf8>
 8004346:	2300      	movs	r3, #0
 8004348:	e18e      	b.n	8004668 <SBUS_decoding+0x410>
 800434a:	bf00      	nop
 800434c:	20000490 	.word	0x20000490

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 8004350:	4ba7      	ldr	r3, [pc, #668]	; (80045f0 <SBUS_decoding+0x398>)
 8004352:	7f9b      	ldrb	r3, [r3, #30]
 8004354:	b21a      	sxth	r2, r3
 8004356:	4ba6      	ldr	r3, [pc, #664]	; (80045f0 <SBUS_decoding+0x398>)
 8004358:	7fdb      	ldrb	r3, [r3, #31]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	b21b      	sxth	r3, r3
 800435e:	4313      	orrs	r3, r2
 8004360:	b21b      	sxth	r3, r3
 8004362:	b29b      	uxth	r3, r3
 8004364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004368:	b29a      	uxth	r2, r3
 800436a:	4ba1      	ldr	r3, [pc, #644]	; (80045f0 <SBUS_decoding+0x398>)
 800436c:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 800436e:	4ba0      	ldr	r3, [pc, #640]	; (80045f0 <SBUS_decoding+0x398>)
 8004370:	7fdb      	ldrb	r3, [r3, #31]
 8004372:	10db      	asrs	r3, r3, #3
 8004374:	b21a      	sxth	r2, r3
 8004376:	4b9e      	ldr	r3, [pc, #632]	; (80045f0 <SBUS_decoding+0x398>)
 8004378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437c:	015b      	lsls	r3, r3, #5
 800437e:	b21b      	sxth	r3, r3
 8004380:	4313      	orrs	r3, r2
 8004382:	b21b      	sxth	r3, r3
 8004384:	b29b      	uxth	r3, r3
 8004386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800438a:	b29a      	uxth	r2, r3
 800438c:	4b98      	ldr	r3, [pc, #608]	; (80045f0 <SBUS_decoding+0x398>)
 800438e:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 8004390:	4b97      	ldr	r3, [pc, #604]	; (80045f0 <SBUS_decoding+0x398>)
 8004392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004396:	119b      	asrs	r3, r3, #6
 8004398:	b21a      	sxth	r2, r3
 800439a:	4b95      	ldr	r3, [pc, #596]	; (80045f0 <SBUS_decoding+0x398>)
 800439c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	b21b      	sxth	r3, r3
 80043a4:	4313      	orrs	r3, r2
 80043a6:	b21a      	sxth	r2, r3
 80043a8:	4b91      	ldr	r3, [pc, #580]	; (80045f0 <SBUS_decoding+0x398>)
 80043aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80043ae:	029b      	lsls	r3, r3, #10
 80043b0:	b21b      	sxth	r3, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b21b      	sxth	r3, r3
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043bc:	b29a      	uxth	r2, r3
 80043be:	4b8c      	ldr	r3, [pc, #560]	; (80045f0 <SBUS_decoding+0x398>)
 80043c0:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 80043c2:	4b8b      	ldr	r3, [pc, #556]	; (80045f0 <SBUS_decoding+0x398>)
 80043c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80043c8:	105b      	asrs	r3, r3, #1
 80043ca:	b21a      	sxth	r2, r3
 80043cc:	4b88      	ldr	r3, [pc, #544]	; (80045f0 <SBUS_decoding+0x398>)
 80043ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80043d2:	01db      	lsls	r3, r3, #7
 80043d4:	b21b      	sxth	r3, r3
 80043d6:	4313      	orrs	r3, r2
 80043d8:	b21b      	sxth	r3, r3
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	4b83      	ldr	r3, [pc, #524]	; (80045f0 <SBUS_decoding+0x398>)
 80043e4:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 80043e6:	4b82      	ldr	r3, [pc, #520]	; (80045f0 <SBUS_decoding+0x398>)
 80043e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80043ec:	111b      	asrs	r3, r3, #4
 80043ee:	b21a      	sxth	r2, r3
 80043f0:	4b7f      	ldr	r3, [pc, #508]	; (80045f0 <SBUS_decoding+0x398>)
 80043f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	4313      	orrs	r3, r2
 80043fc:	b21b      	sxth	r3, r3
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004404:	b29a      	uxth	r2, r3
 8004406:	4b7a      	ldr	r3, [pc, #488]	; (80045f0 <SBUS_decoding+0x398>)
 8004408:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 800440a:	4b79      	ldr	r3, [pc, #484]	; (80045f0 <SBUS_decoding+0x398>)
 800440c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004410:	11db      	asrs	r3, r3, #7
 8004412:	b21a      	sxth	r2, r3
 8004414:	4b76      	ldr	r3, [pc, #472]	; (80045f0 <SBUS_decoding+0x398>)
 8004416:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	b21b      	sxth	r3, r3
 800441e:	4313      	orrs	r3, r2
 8004420:	b21a      	sxth	r2, r3
 8004422:	4b73      	ldr	r3, [pc, #460]	; (80045f0 <SBUS_decoding+0x398>)
 8004424:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004428:	025b      	lsls	r3, r3, #9
 800442a:	b21b      	sxth	r3, r3
 800442c:	4313      	orrs	r3, r2
 800442e:	b21b      	sxth	r3, r3
 8004430:	b29b      	uxth	r3, r3
 8004432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004436:	b29a      	uxth	r2, r3
 8004438:	4b6d      	ldr	r3, [pc, #436]	; (80045f0 <SBUS_decoding+0x398>)
 800443a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 800443e:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <SBUS_decoding+0x398>)
 8004440:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004444:	109b      	asrs	r3, r3, #2
 8004446:	b21a      	sxth	r2, r3
 8004448:	4b69      	ldr	r3, [pc, #420]	; (80045f0 <SBUS_decoding+0x398>)
 800444a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800444e:	019b      	lsls	r3, r3, #6
 8004450:	b21b      	sxth	r3, r3
 8004452:	4313      	orrs	r3, r2
 8004454:	b21b      	sxth	r3, r3
 8004456:	b29b      	uxth	r3, r3
 8004458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800445c:	b29a      	uxth	r2, r3
 800445e:	4b64      	ldr	r3, [pc, #400]	; (80045f0 <SBUS_decoding+0x398>)
 8004460:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 8004464:	4b62      	ldr	r3, [pc, #392]	; (80045f0 <SBUS_decoding+0x398>)
 8004466:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800446a:	115b      	asrs	r3, r3, #5
 800446c:	b21a      	sxth	r2, r3
 800446e:	4b60      	ldr	r3, [pc, #384]	; (80045f0 <SBUS_decoding+0x398>)
 8004470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	b21b      	sxth	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	b21b      	sxth	r3, r3
 800447c:	b29b      	uxth	r3, r3
 800447e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004482:	b29a      	uxth	r2, r3
 8004484:	4b5a      	ldr	r3, [pc, #360]	; (80045f0 <SBUS_decoding+0x398>)
 8004486:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 800448a:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <SBUS_decoding+0x398>)
 800448c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004490:	b21a      	sxth	r2, r3
 8004492:	4b57      	ldr	r3, [pc, #348]	; (80045f0 <SBUS_decoding+0x398>)
 8004494:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	b21b      	sxth	r3, r3
 800449c:	4313      	orrs	r3, r2
 800449e:	b21b      	sxth	r3, r3
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	4b51      	ldr	r3, [pc, #324]	; (80045f0 <SBUS_decoding+0x398>)
 80044aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 80044ae:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <SBUS_decoding+0x398>)
 80044b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044b4:	10db      	asrs	r3, r3, #3
 80044b6:	b21a      	sxth	r2, r3
 80044b8:	4b4d      	ldr	r3, [pc, #308]	; (80045f0 <SBUS_decoding+0x398>)
 80044ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80044be:	015b      	lsls	r3, r3, #5
 80044c0:	b21b      	sxth	r3, r3
 80044c2:	4313      	orrs	r3, r2
 80044c4:	b21b      	sxth	r3, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	4b48      	ldr	r3, [pc, #288]	; (80045f0 <SBUS_decoding+0x398>)
 80044d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 80044d4:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <SBUS_decoding+0x398>)
 80044d6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80044da:	119b      	asrs	r3, r3, #6
 80044dc:	b21a      	sxth	r2, r3
 80044de:	4b44      	ldr	r3, [pc, #272]	; (80045f0 <SBUS_decoding+0x398>)
 80044e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	b21b      	sxth	r3, r3
 80044e8:	4313      	orrs	r3, r2
 80044ea:	b21a      	sxth	r2, r3
 80044ec:	4b40      	ldr	r3, [pc, #256]	; (80045f0 <SBUS_decoding+0x398>)
 80044ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	b21b      	sxth	r3, r3
 80044f6:	4313      	orrs	r3, r2
 80044f8:	b21b      	sxth	r3, r3
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004500:	b29a      	uxth	r2, r3
 8004502:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <SBUS_decoding+0x398>)
 8004504:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 8004508:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <SBUS_decoding+0x398>)
 800450a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800450e:	105b      	asrs	r3, r3, #1
 8004510:	b21a      	sxth	r2, r3
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <SBUS_decoding+0x398>)
 8004514:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004518:	01db      	lsls	r3, r3, #7
 800451a:	b21b      	sxth	r3, r3
 800451c:	4313      	orrs	r3, r2
 800451e:	b21b      	sxth	r3, r3
 8004520:	b29b      	uxth	r3, r3
 8004522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004526:	b29a      	uxth	r2, r3
 8004528:	4b31      	ldr	r3, [pc, #196]	; (80045f0 <SBUS_decoding+0x398>)
 800452a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 800452e:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <SBUS_decoding+0x398>)
 8004530:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004534:	111b      	asrs	r3, r3, #4
 8004536:	b21a      	sxth	r2, r3
 8004538:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <SBUS_decoding+0x398>)
 800453a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	b21b      	sxth	r3, r3
 8004542:	4313      	orrs	r3, r2
 8004544:	b21b      	sxth	r3, r3
 8004546:	b29b      	uxth	r3, r3
 8004548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800454c:	b29a      	uxth	r2, r3
 800454e:	4b28      	ldr	r3, [pc, #160]	; (80045f0 <SBUS_decoding+0x398>)
 8004550:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 8004554:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <SBUS_decoding+0x398>)
 8004556:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800455a:	11db      	asrs	r3, r3, #7
 800455c:	b21a      	sxth	r2, r3
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <SBUS_decoding+0x398>)
 8004560:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	b21b      	sxth	r3, r3
 8004568:	4313      	orrs	r3, r2
 800456a:	b21a      	sxth	r2, r3
 800456c:	4b20      	ldr	r3, [pc, #128]	; (80045f0 <SBUS_decoding+0x398>)
 800456e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004572:	025b      	lsls	r3, r3, #9
 8004574:	b21b      	sxth	r3, r3
 8004576:	4313      	orrs	r3, r2
 8004578:	b21b      	sxth	r3, r3
 800457a:	b29b      	uxth	r3, r3
 800457c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004580:	b29a      	uxth	r2, r3
 8004582:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <SBUS_decoding+0x398>)
 8004584:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <SBUS_decoding+0x398>)
 800458a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800458e:	109b      	asrs	r3, r3, #2
 8004590:	b21a      	sxth	r2, r3
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <SBUS_decoding+0x398>)
 8004594:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	b21b      	sxth	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b21b      	sxth	r3, r3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <SBUS_decoding+0x398>)
 80045aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 80045ae:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <SBUS_decoding+0x398>)
 80045b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045b4:	115b      	asrs	r3, r3, #5
 80045b6:	b21a      	sxth	r2, r3
 80045b8:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <SBUS_decoding+0x398>)
 80045ba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	b21b      	sxth	r3, r3
 80045c2:	4313      	orrs	r3, r2
 80045c4:	b21b      	sxth	r3, r3
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <SBUS_decoding+0x398>)
 80045d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <SBUS_decoding+0x398>)
 80045d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <SBUS_decoding+0x39c>
 80045e2:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <SBUS_decoding+0x398>)
 80045e4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80045ec:	e007      	b.n	80045fe <SBUS_decoding+0x3a6>
 80045ee:	bf00      	nop
 80045f0:	20000490 	.word	0x20000490
 80045f4:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <SBUS_decoding+0x41c>)
 80045f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <SBUS_decoding+0x41c>)
 8004600:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <SBUS_decoding+0x3c0>
 800460c:	4b19      	ldr	r3, [pc, #100]	; (8004674 <SBUS_decoding+0x41c>)
 800460e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004612:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8004616:	e004      	b.n	8004622 <SBUS_decoding+0x3ca>
 8004618:	4b16      	ldr	r3, [pc, #88]	; (8004674 <SBUS_decoding+0x41c>)
 800461a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800461e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b11      	cmp	r3, #17
 800462a:	dc1c      	bgt.n	8004666 <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 800462c:	4a11      	ldr	r2, [pc, #68]	; (8004674 <SBUS_decoding+0x41c>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3318      	adds	r3, #24
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	88db      	ldrh	r3, [r3, #6]
 8004638:	461a      	mov	r2, r3
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	da00      	bge.n	8004646 <SBUS_decoding+0x3ee>
 8004644:	3307      	adds	r3, #7
 8004646:	10db      	asrs	r3, r3, #3
 8004648:	b29b      	uxth	r3, r3
 800464a:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800464e:	b299      	uxth	r1, r3
 8004650:	4a08      	ldr	r2, [pc, #32]	; (8004674 <SBUS_decoding+0x41c>)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	332c      	adds	r3, #44	; 0x2c
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4413      	add	r3, r2
 800465a:	460a      	mov	r2, r1
 800465c:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3301      	adds	r3, #1
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	e7df      	b.n	8004626 <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 8004666:	2301      	movs	r3, #1
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004672:	bf00      	nop
 8004674:	20000490 	.word	0x20000490

08004678 <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 800467e:	2300      	movs	r3, #0
 8004680:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <SBUS_uartRxCpltCallback+0xe8>)
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	4b35      	ldr	r3, [pc, #212]	; (8004760 <SBUS_uartRxCpltCallback+0xe8>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b18      	cmp	r3, #24
 800468e:	d862      	bhi.n	8004756 <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 8004690:	4b33      	ldr	r3, [pc, #204]	; (8004760 <SBUS_uartRxCpltCallback+0xe8>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	4b33      	ldr	r3, [pc, #204]	; (8004764 <SBUS_uartRxCpltCallback+0xec>)
 8004698:	4413      	add	r3, r2
 800469a:	791a      	ldrb	r2, [r3, #4]
 800469c:	4b32      	ldr	r3, [pc, #200]	; (8004768 <SBUS_uartRxCpltCallback+0xf0>)
 800469e:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 80046a0:	4b32      	ldr	r3, [pc, #200]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d120      	bne.n	80046ea <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 80046a8:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <SBUS_uartRxCpltCallback+0xf0>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b0f      	cmp	r3, #15
 80046ae:	d118      	bne.n	80046e2 <SBUS_uartRxCpltCallback+0x6a>
 80046b0:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <SBUS_uartRxCpltCallback+0xf8>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <SBUS_uartRxCpltCallback+0x4c>
 80046b8:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <SBUS_uartRxCpltCallback+0xf8>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10e      	bne.n	80046e2 <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 80046c4:	4b29      	ldr	r3, [pc, #164]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	4619      	mov	r1, r3
 80046ca:	4b27      	ldr	r3, [pc, #156]	; (8004768 <SBUS_uartRxCpltCallback+0xf0>)
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	4b25      	ldr	r3, [pc, #148]	; (8004764 <SBUS_uartRxCpltCallback+0xec>)
 80046d0:	440b      	add	r3, r1
 80046d2:	775a      	strb	r2, [r3, #29]
				_parserState++;
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	3301      	adds	r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	4b23      	ldr	r3, [pc, #140]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	e02e      	b.n	8004740 <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	e02a      	b.n	8004740 <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 80046ea:	4b20      	ldr	r3, [pc, #128]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b18      	cmp	r3, #24
 80046f0:	d80d      	bhi.n	800470e <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	4619      	mov	r1, r3
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <SBUS_uartRxCpltCallback+0xf0>)
 80046fa:	781a      	ldrb	r2, [r3, #0]
 80046fc:	4b19      	ldr	r3, [pc, #100]	; (8004764 <SBUS_uartRxCpltCallback+0xec>)
 80046fe:	440b      	add	r3, r1
 8004700:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8004702:	4b1a      	ldr	r3, [pc, #104]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b18      	ldr	r3, [pc, #96]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 800470c:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b19      	cmp	r3, #25
 8004714:	d114      	bne.n	8004740 <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <SBUS_uartRxCpltCallback+0xf0>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <SBUS_uartRxCpltCallback+0xb2>
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <SBUS_uartRxCpltCallback+0xf0>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	2b00      	cmp	r3, #0
 8004728:	d107      	bne.n	800473a <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 8004730:	f7ff fd92 	bl	8004258 <SBUS_decoding>
 8004734:	4603      	mov	r3, r0
 8004736:	71fb      	strb	r3, [r7, #7]
 8004738:	e002      	b.n	8004740 <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <SBUS_uartRxCpltCallback+0xf4>)
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <SBUS_uartRxCpltCallback+0xf0>)
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <SBUS_uartRxCpltCallback+0xf8>)
 8004746:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <SBUS_uartRxCpltCallback+0xe8>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	b2da      	uxtb	r2, r3
 8004750:	4b03      	ldr	r3, [pc, #12]	; (8004760 <SBUS_uartRxCpltCallback+0xe8>)
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e798      	b.n	8004688 <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 8004756:	79fb      	ldrb	r3, [r7, #7]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000523 	.word	0x20000523
 8004764:	20000490 	.word	0x20000490
 8004768:	20000521 	.word	0x20000521
 800476c:	20000520 	.word	0x20000520
 8004770:	20000522 	.word	0x20000522

08004774 <SBUS_getChannel>:
		printf("%d \t", sbus.compRcValue[i]);
	}
	printf("\r\n");
}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	3b01      	subs	r3, #1
 8004782:	4a05      	ldr	r2, [pc, #20]	; (8004798 <SBUS_getChannel+0x24>)
 8004784:	332c      	adds	r3, #44	; 0x2c
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4413      	add	r3, r2
 800478a:	885b      	ldrh	r3, [r3, #2]
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	20000490 	.word	0x20000490

0800479c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80047a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80047aa:	f010 f9e7 	bl	8014b7c <asinf>
 80047ae:	eef0 7a40 	vmov.f32	s15, s0
 80047b2:	eeb0 0a67 	vmov.f32	s0, s15
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80047c6:	edc7 0a00 	vstr	s1, [r7]
 80047ca:	edd7 0a00 	vldr	s1, [r7]
 80047ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80047d2:	f010 fa2b 	bl	8014c2c <atan2f>
 80047d6:	eef0 7a40 	vmov.f32	s15, s0
 80047da:	eeb0 0a67 	vmov.f32	s0, s15
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80047ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80047f2:	f010 f941 	bl	8014a78 <cosf>
 80047f6:	eef0 7a40 	vmov.f32	s15, s0
 80047fa:	eeb0 0a67 	vmov.f32	s0, s15
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	ed87 0a01 	vstr	s0, [r7, #4]
 800480e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004812:	f010 f971 	bl	8014af8 <sinf>
 8004816:	eef0 7a40 	vmov.f32	s15, s0
 800481a:	eeb0 0a67 	vmov.f32	s0, s15
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	ed87 0a01 	vstr	s0, [r7, #4]
 800482e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004832:	f010 f9fd 	bl	8014c30 <sqrtf>
 8004836:	eef0 7a40 	vmov.f32	s15, s0
 800483a:	eeb0 0a67 	vmov.f32	s0, s15
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 8004844:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8004848:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800484a:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <_ZL11microsecondv+0x40>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4619      	mov	r1, r3
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0b00 	mov.w	fp, #0
 8004858:	f04f 0c00 	mov.w	ip, #0
 800485c:	468c      	mov	ip, r1
 800485e:	f04f 0b00 	mov.w	fp, #0
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <_ZL11microsecondv+0x44>)
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004868:	4611      	mov	r1, r2
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	ea4b 0301 	orr.w	r3, fp, r1
 8004872:	ea4c 0402 	orr.w	r4, ip, r2
}
 8004876:	4618      	mov	r0, r3
 8004878:	4621      	mov	r1, r4
 800487a:	46bd      	mov	sp, r7
 800487c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	200007f0 	.word	0x200007f0
 8004888:	20001a5c 	.word	0x20001a5c

0800488c <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:

class MsgBus {
public:
	MsgBus() = default;

    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel);
 800488c:	b4b0      	push	{r4, r5, r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	e9d3 1200 	ldrd	r1, r2, [r3]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048a2:	42a2      	cmp	r2, r4
 80048a4:	bf08      	it	eq
 80048a6:	4299      	cmpeq	r1, r3
 80048a8:	d00b      	beq.n	80048c2 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x36>
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4614      	mov	r4, r2
 80048b0:	461d      	mov	r5, r3
 80048b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80048ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x38>
 80048c2:	2300      	movs	r3, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bcb0      	pop	{r4, r5, r7}
 80048cc:	4770      	bx	lr

080048ce <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
 80048ce:	b4b0      	push	{r4, r5, r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	4614      	mov	r4, r2
 80048de:	461d      	mov	r5, r3
 80048e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80048e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bcb0      	pop	{r4, r5, r7}
 80048f4:	4770      	bx	lr

080048f6 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity);
 80048f6:	b4b0      	push	{r4, r5, r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800490c:	42a2      	cmp	r2, r4
 800490e:	bf08      	it	eq
 8004910:	4299      	cmpeq	r1, r3
 8004912:	d00c      	beq.n	800492e <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x38>
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4615      	mov	r5, r2
 800491a:	f103 0418 	add.w	r4, r3, #24
 800491e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004922:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004926:	e885 0003 	stmia.w	r5, {r0, r1}
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x3a>
 800492e:	2300      	movs	r3, #0
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	bcb0      	pop	{r4, r5, r7}
 8004938:	4770      	bx	lr

0800493a <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
 800493a:	b4b0      	push	{r4, r5, r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	f103 0418 	add.w	r4, r3, #24
 800494c:	4615      	mov	r5, r2
 800494e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004952:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004956:	e884 0003 	stmia.w	r4, {r0, r1}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bcb0      	pop	{r4, r5, r7}
 8004962:	4770      	bx	lr

08004964 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag);
 8004964:	b4b0      	push	{r4, r5, r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800497a:	42a2      	cmp	r2, r4
 800497c:	bf08      	it	eq
 800497e:	4299      	cmpeq	r1, r3
 8004980:	d00c      	beq.n	800499c <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x38>
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4615      	mov	r5, r2
 8004988:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800498c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800498e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004990:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004994:	e885 0003 	stmia.w	r5, {r0, r1}
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x3a>
 800499c:	2300      	movs	r3, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bcb0      	pop	{r4, r5, r7}
 80049a6:	4770      	bx	lr

080049a8 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
 80049a8:	b4b0      	push	{r4, r5, r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80049ba:	4615      	mov	r5, r2
 80049bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80049c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bcb0      	pop	{r4, r5, r7}
 80049d0:	4770      	bx	lr

080049d2 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps);
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	3348      	adds	r3, #72	; 0x48
 80049e2:	4611      	mov	r1, r2
 80049e4:	2248      	movs	r2, #72	; 0x48
 80049e6:	4618      	mov	r0, r3
 80049e8:	f011 f95e 	bl	8015ca8 <memcpy>
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer);
 80049f4:	b490      	push	{r4, r7}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8004a06:	4613      	mov	r3, r2
 8004a08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc90      	pop	{r4, r7}
 8004a16:	4770      	bx	lr

08004a18 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller);
 8004a18:	b490      	push	{r4, r7}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8004a2e:	42a2      	cmp	r2, r4
 8004a30:	bf08      	it	eq
 8004a32:	4299      	cmpeq	r1, r3
 8004a34:	d008      	beq.n	8004a48 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE+0x30>
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4614      	mov	r4, r2
 8004a3c:	33a0      	adds	r3, #160	; 0xa0
 8004a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE+0x32>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc90      	pop	{r4, r7}
 8004a52:	4770      	bx	lr

08004a54 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
 8004a54:	b490      	push	{r4, r7}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8004a66:	4613      	mov	r3, r2
 8004a68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc90      	pop	{r4, r7}
 8004a76:	4770      	bx	lr

08004a78 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>:
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude);
 8004a78:	b4b0      	push	{r4, r5, r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8004a8e:	42a2      	cmp	r2, r4
 8004a90:	bf08      	it	eq
 8004a92:	4299      	cmpeq	r1, r3
 8004a94:	d00e      	beq.n	8004ab4 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x3c>
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4615      	mov	r5, r2
 8004a9c:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8004aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004aac:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x3e>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bcb0      	pop	{r4, r5, r7}
 8004abe:	4770      	bx	lr

08004ac0 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:
 8004ac0:	b4b0      	push	{r4, r5, r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8004ad2:	4615      	mov	r5, r2
 8004ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004adc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ae0:	e884 0003 	stmia.w	r4, {r0, r1}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bcb0      	pop	{r4, r5, r7}
 8004aec:	4770      	bx	lr

08004aee <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel);
 8004aee:	b4b0      	push	{r4, r5, r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 8004b04:	42a2      	cmp	r2, r4
 8004b06:	bf08      	it	eq
 8004b08:	4299      	cmpeq	r1, r3
 8004b0a:	d00c      	beq.n	8004b26 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x38>
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4615      	mov	r5, r2
 8004b12:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8004b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x3a>
 8004b26:	2300      	movs	r3, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bcb0      	pop	{r4, r5, r7}
 8004b30:	4770      	bx	lr

08004b32 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
 8004b32:	b4b0      	push	{r4, r5, r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8004b44:	4615      	mov	r5, r2
 8004b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bcb0      	pop	{r4, r5, r7}
 8004b5a:	4770      	bx	lr

08004b5c <_ZN2FC11SensorAccel8setAccelEfff>:
private:
    struct BodyAccel bodyAccel{};
};


void SensorAccel::setAccel(float x, float y, float z){
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b68:	edc7 0a01 	vstr	s1, [r7, #4]
 8004b6c:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004b70:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	d10d      	bne.n	8004b9a <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8004b7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8a:	d106      	bne.n	8004b9a <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8004b8c:	edd7 7a00 	vldr	s15, [r7]
 8004b90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d015      	beq.n	8004bc6 <_ZN2FC11SensorAccel8setAccelEfff+0x6a>
	this->bodyAccel.timestamp = microsecond();
 8004b9a:	f7ff fe53 	bl	8004844 <_ZL11microsecondv>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	609a      	str	r2, [r3, #8]
	this->bodyAccel.xyz[1] = y;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]
	this->bodyAccel.xyz[2] = z;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4804      	ldr	r0, [pc, #16]	; (8004bd0 <_ZN2FC11SensorAccel8setAccelEfff+0x74>)
 8004bc0:	f7ff fe85 	bl	80048ce <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
 8004bc4:	e000      	b.n	8004bc8 <_ZN2FC11SensorAccel8setAccelEfff+0x6c>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004bc6:	bf00      	nop
}
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd90      	pop	{r4, r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200007f8 	.word	0x200007f8

08004bd4 <_ZN2FC10SensorGyro7setGyroEfff>:
    void setGyro(float x, float y, float z);
private:
    struct BodyAngularVelocity bodyAngularVelocity;
};

void SensorGyro::setGyro(float x, float y, float z){
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004be0:	edc7 0a01 	vstr	s1, [r7, #4]
 8004be4:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004be8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d10d      	bne.n	8004c12 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8004bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c02:	d106      	bne.n	8004c12 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8004c04:	edd7 7a00 	vldr	s15, [r7]
 8004c08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c10:	d015      	beq.n	8004c3e <_ZN2FC10SensorGyro7setGyroEfff+0x6a>
	this->bodyAngularVelocity.timestamp = microsecond();
 8004c12:	f7ff fe17 	bl	8004844 <_ZL11microsecondv>
 8004c16:	4603      	mov	r3, r0
 8004c18:	460c      	mov	r4, r1
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	609a      	str	r2, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4619      	mov	r1, r3
 8004c36:	4804      	ldr	r0, [pc, #16]	; (8004c48 <_ZN2FC10SensorGyro7setGyroEfff+0x74>)
 8004c38:	f7ff fe7f 	bl	800493a <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
 8004c3c:	e000      	b.n	8004c40 <_ZN2FC10SensorGyro7setGyroEfff+0x6c>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004c3e:	bf00      	nop
}
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200007f8 	.word	0x200007f8

08004c4c <_ZN2FC9SensorMag6setMagEfff>:
    float bias[3];
    float scale[3];
};


void SensorMag::setMag(float x, float y, float z){
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c58:	edc7 0a01 	vstr	s1, [r7, #4]
 8004c5c:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6c:	d10d      	bne.n	8004c8a <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8004c6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	d106      	bne.n	8004c8a <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8004c7c:	edd7 7a00 	vldr	s15, [r7]
 8004c80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	d015      	beq.n	8004cb6 <_ZN2FC9SensorMag6setMagEfff+0x6a>
	this->bodyMag.timestamp = microsecond();
 8004c8a:	f7ff fddb 	bl	8004844 <_ZL11microsecondv>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	460c      	mov	r4, r1
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = x;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	609a      	str	r2, [r3, #8]
	this->bodyMag.xyz[1] = y;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]
	this->bodyMag.xyz[2] = z;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	611a      	str	r2, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4619      	mov	r1, r3
 8004cae:	4804      	ldr	r0, [pc, #16]	; (8004cc0 <_ZN2FC9SensorMag6setMagEfff+0x74>)
 8004cb0:	f7ff fe7a 	bl	80049a8 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>
 8004cb4:	e000      	b.n	8004cb8 <_ZN2FC9SensorMag6setMagEfff+0x6c>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004cb6:	bf00      	nop
}
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200007f8 	.word	0x200007f8
 8004cc4:	00000000 	.word	0x00000000

08004cc8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:


void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b091      	sub	sp, #68	; 0x44
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004cd0:	ed87 0b08 	vstr	d0, [r7, #32]
 8004cd4:	ed87 1b06 	vstr	d1, [r7, #24]
 8004cd8:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8004cdc:	edc7 2a05 	vstr	s5, [r7, #20]
 8004ce0:	ed87 3a04 	vstr	s6, [r7, #16]
 8004ce4:	edc7 3a03 	vstr	s7, [r7, #12]
 8004ce8:	ed87 4a02 	vstr	s8, [r7, #8]
 8004cec:	460b      	mov	r3, r1
 8004cee:	71fb      	strb	r3, [r7, #7]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	71bb      	strb	r3, [r7, #6]

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 8004cf4:	6938      	ldr	r0, [r7, #16]
 8004cf6:	f7fb fc37 	bl	8000568 <__aeabi_f2d>
 8004cfa:	a339      	add	r3, pc, #228	; (adr r3, 8004de0 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x118>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb fc8a 	bl	8000618 <__aeabi_dmul>
 8004d04:	4603      	mov	r3, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	4618      	mov	r0, r3
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	4b31      	ldr	r3, [pc, #196]	; (8004dd8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x110>)
 8004d12:	f7fb fdab 	bl	800086c <__aeabi_ddiv>
 8004d16:	4603      	mov	r3, r0
 8004d18:	460c      	mov	r4, r1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	f7fb ff73 	bl	8000c08 <__aeabi_d2f>
 8004d22:	4603      	mov	r3, r0
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 8004d26:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004d2a:	f7ff fd5b 	bl	80047e4 <_ZSt3cosf>
 8004d2e:	eeb0 7a40 	vmov.f32	s14, s0
 8004d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d3a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 8004d3e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004d42:	f7ff fd5f 	bl	8004804 <_ZSt3sinf>
 8004d46:	eeb0 7a40 	vmov.f32	s14, s0
 8004d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d52:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 8004d56:	f7ff fd75 	bl	8004844 <_ZL11microsecondv>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d60:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 8004d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d66:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004d6a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 8004d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d70:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004d74:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 8004d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d7a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004d7e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d86:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d98:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004da6:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	79fa      	ldrb	r2, [r7, #7]
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	79ba      	ldrb	r2, [r7, #6]
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4804      	ldr	r0, [pc, #16]	; (8004ddc <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x114>)
 8004dca:	f7ff fe02 	bl	80049d2 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>
}
 8004dce:	bf00      	nop
 8004dd0:	3744      	adds	r7, #68	; 0x44
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd90      	pop	{r4, r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40668000 	.word	0x40668000
 8004ddc:	200007f8 	.word	0x200007f8
 8004de0:	54442d18 	.word	0x54442d18
 8004de4:	400921fb 	.word	0x400921fb

08004de8 <_ZN2FC10SensorBaro7setBaroEff>:
private:
    struct Barometer barometer;
};


void SensorBaro::setBaro(float pressure, float temperature){
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004df4:	edc7 0a01 	vstr	s1, [r7, #4]
	this->barometer.timestamp = microsecond();
 8004df8:	f7ff fd24 	bl	8004844 <_ZL11microsecondv>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometer.pressure = pressure;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	609a      	str	r2, [r3, #8]
	this->barometer.temperature = temperature;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	60da      	str	r2, [r3, #12]

	msgBus.setBarometer(this->barometer);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4619      	mov	r1, r3
 8004e16:	4803      	ldr	r0, [pc, #12]	; (8004e24 <_ZN2FC10SensorBaro7setBaroEff+0x3c>)
 8004e18:	f7ff fdec 	bl	80049f4 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}
 8004e24:	200007f8 	.word	0x200007f8

08004e28 <_ZN2FC2RC5setRCEttttttttt>:

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode, uint16_t subMode,
			   uint16_t calibration, uint16_t calibration_sub)
{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	4608      	mov	r0, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	461a      	mov	r2, r3
 8004e36:	4603      	mov	r3, r0
 8004e38:	817b      	strh	r3, [r7, #10]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	813b      	strh	r3, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
	this->controller.timestamp = microsecond();
 8004e42:	f7ff fcff 	bl	8004844 <_ZL11microsecondv>
 8004e46:	4603      	mov	r3, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	e9c2 3400 	strd	r3, r4, [r2]
	this->controller.roll = roll;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	897a      	ldrh	r2, [r7, #10]
 8004e54:	811a      	strh	r2, [r3, #8]
	this->controller.pitch = pitch;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	893a      	ldrh	r2, [r7, #8]
 8004e5a:	815a      	strh	r2, [r3, #10]
	this->controller.yaw = yaw;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	819a      	strh	r2, [r3, #12]
	this->controller.throttle = throttle;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8c3a      	ldrh	r2, [r7, #32]
 8004e66:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controller);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4803      	ldr	r0, [pc, #12]	; (8004e7c <_ZN2FC2RC5setRCEttttttttt+0x54>)
 8004e6e:	f7ff fdf1 	bl	8004a54 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd90      	pop	{r4, r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200007f8 	.word	0x200007f8

08004e80 <_ZN2FC10ModuleAHRS4mainEv>:
    void calNedAccel();

    float invSqrt(float x);
};

void ModuleAHRS::main(){
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b0a1      	sub	sp, #132	; 0x84
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	/* no update */
	if(!msgBus.getBodyAccel(&this->bodyAccelSub)) return;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4822      	ldr	r0, [pc, #136]	; (8004f18 <_ZN2FC10ModuleAHRS4mainEv+0x98>)
 8004e8e:	f7ff fcfd 	bl	800488c <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f083 0301 	eor.w	r3, r3, #1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 81b1 	bne.w	8005202 <_ZN2FC10ModuleAHRS4mainEv+0x382>
	if(!msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub)) return;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	481c      	ldr	r0, [pc, #112]	; (8004f18 <_ZN2FC10ModuleAHRS4mainEv+0x98>)
 8004ea8:	f7ff fd25 	bl	80048f6 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f083 0301 	eor.w	r3, r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 81a6 	bne.w	8005206 <_ZN2FC10ModuleAHRS4mainEv+0x386>

	/* mag data not valid */
	if(!msgBus.getBodyMag(&this->bodyMagSub))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3330      	adds	r3, #48	; 0x30
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4815      	ldr	r0, [pc, #84]	; (8004f18 <_ZN2FC10ModuleAHRS4mainEv+0x98>)
 8004ec2:	f7ff fd4f 	bl	8004964 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f083 0301 	eor.w	r3, r3, #1
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d024      	beq.n	8004f1c <_ZN2FC10ModuleAHRS4mainEv+0x9c>
	{
		MadgwickAHRSupdateIMU(bodyAngularVelocitySub.xyz[0],
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	ed93 6a02 	vldr	s12, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	edd3 5a03 	vldr	s11, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	ed93 5a04 	vldr	s10, [r3, #16]
 8004ef6:	eef0 2a45 	vmov.f32	s5, s10
 8004efa:	eeb0 2a65 	vmov.f32	s4, s11
 8004efe:	eef0 1a46 	vmov.f32	s3, s12
 8004f02:	eeb0 1a66 	vmov.f32	s2, s13
 8004f06:	eef0 0a47 	vmov.f32	s1, s14
 8004f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 f8be 	bl	8006090 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 8004f14:	e02e      	b.n	8004f74 <_ZN2FC10ModuleAHRS4mainEv+0xf4>
 8004f16:	bf00      	nop
 8004f18:	200007f8 	.word	0x200007f8
							  bodyAccelSub.xyz[1],
							  bodyAccelSub.xyz[2]);
	}
	/* mag data valid */
	else{
		MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	ed93 6a02 	vldr	s12, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	edd3 5a03 	vldr	s11, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	ed93 5a04 	vldr	s10, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8004f52:	eeb0 3a64 	vmov.f32	s6, s9
 8004f56:	eef0 2a45 	vmov.f32	s5, s10
 8004f5a:	eeb0 2a65 	vmov.f32	s4, s11
 8004f5e:	eef0 1a46 	vmov.f32	s3, s12
 8004f62:	eeb0 1a66 	vmov.f32	s2, s13
 8004f66:	eef0 0a47 	vmov.f32	s1, s14
 8004f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f952 	bl	8005218 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
						   bodyMagSub.xyz[2]);
	}

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004f80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f98:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fe8:	eef0 0a67 	vmov.f32	s1, s15
 8004fec:	eeb0 0a46 	vmov.f32	s0, s12
 8004ff0:	f7ff fbe4 	bl	80047bc <_ZSt5atan2ff>
 8004ff4:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800501c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005020:	eeb0 0a67 	vmov.f32	s0, s15
 8005024:	f7ff fbba 	bl	800479c <_ZSt4asinf>
 8005028:	eef0 7a40 	vmov.f32	s15, s0
 800502c:	eef1 7a67 	vneg.f32	s15, s15
 8005030:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005058:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800507c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800508c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005090:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80050a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050a8:	eef0 0a67 	vmov.f32	s1, s15
 80050ac:	eeb0 0a46 	vmov.f32	s0, s12
 80050b0:	f7ff fb84 	bl	80047bc <_ZSt5atan2ff>
 80050b4:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74

    matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 80050d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050d4:	eef0 1a46 	vmov.f32	s3, s12
 80050d8:	eeb0 1a66 	vmov.f32	s2, s13
 80050dc:	eef0 0a47 	vmov.f32	s1, s14
 80050e0:	eeb0 0a67 	vmov.f32	s0, s15
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 fdb8 	bl	8006c5a <_ZN6matrix10QuaternionIfEC1Effff>
    matrix::Dcmf dcm(quat.inversed());		/* body -> NED DCM */
 80050ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80050ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 fde7 	bl	8006cc8 <_ZNK6matrix10QuaternionIfE8inversedEv>
 80050fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80050fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f001 fe50 	bl	8006daa <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
    matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
    							   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	ed93 7a03 	vldr	s14, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	edd3 6a04 	vldr	s13, [r3, #16]
 800511c:	f107 0318 	add.w	r3, r7, #24
 8005120:	eeb0 1a66 	vmov.f32	s2, s13
 8005124:	eef0 0a47 	vmov.f32	s1, s14
 8005128:	eeb0 0a67 	vmov.f32	s0, s15
 800512c:	4618      	mov	r0, r3
 800512e:	f001 ff85 	bl	800703c <_ZN6matrix7Vector3IfEC1Efff>

    matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 8005132:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005136:	f107 0218 	add.w	r2, r7, #24
 800513a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800513e:	4618      	mov	r0, r3
 8005140:	f001 ffa9 	bl	8007096 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 8005144:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005148:	f107 030c 	add.w	r3, r7, #12
 800514c:	4611      	mov	r1, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f001 fff2 	bl	8007138 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

    attitudePub.timestamp = microsecond();
 8005154:	f7ff fb76 	bl	8004844 <_ZL11microsecondv>
 8005158:	4603      	mov	r3, r0
 800515a:	460c      	mov	r4, r1
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    attitudePub.q[0] = this->q0;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	651a      	str	r2, [r3, #80]	; 0x50
    attitudePub.q[1] = this->q1;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
    attitudePub.q[2] = this->q2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	659a      	str	r2, [r3, #88]	; 0x58
    attitudePub.q[3] = this->q3;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	65da      	str	r2, [r3, #92]	; 0x5c
    attitudePub.roll = roll;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800518e:	661a      	str	r2, [r3, #96]	; 0x60
    attitudePub.pitch = pitch;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005194:	665a      	str	r2, [r3, #100]	; 0x64
    attitudePub.yaw = yaw;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800519a:	669a      	str	r2, [r3, #104]	; 0x68

    msgBus.setAttitude(attitudePub);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3348      	adds	r3, #72	; 0x48
 80051a0:	4619      	mov	r1, r3
 80051a2:	481b      	ldr	r0, [pc, #108]	; (8005210 <_ZN2FC10ModuleAHRS4mainEv+0x390>)
 80051a4:	f7ff fc8c 	bl	8004ac0 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

    nedAccelPub.timestamp = microsecond();
 80051a8:	f7ff fb4c 	bl	8004844 <_ZL11microsecondv>
 80051ac:	4603      	mov	r3, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    nedAccelPub.xyz[0] = tempNedAccel(0);
 80051b6:	f107 030c 	add.w	r3, r7, #12
 80051ba:	2100      	movs	r1, #0
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 ffe1 	bl	8007184 <_ZN6matrix6VectorIfLj3EEclEj>
 80051c2:	4603      	mov	r3, r0
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	679a      	str	r2, [r3, #120]	; 0x78
    nedAccelPub.xyz[1] = tempNedAccel(1);
 80051ca:	f107 030c 	add.w	r3, r7, #12
 80051ce:	2101      	movs	r1, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 ffd7 	bl	8007184 <_ZN6matrix6VectorIfLj3EEclEj>
 80051d6:	4603      	mov	r3, r0
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	67da      	str	r2, [r3, #124]	; 0x7c
    nedAccelPub.xyz[2] = tempNedAccel(2);
 80051de:	f107 030c 	add.w	r3, r7, #12
 80051e2:	2102      	movs	r1, #2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 ffcd 	bl	8007184 <_ZN6matrix6VectorIfLj3EEclEj>
 80051ea:	4603      	mov	r3, r0
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    msgBus.setNedAccel(nedAccelPub);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3370      	adds	r3, #112	; 0x70
 80051f8:	4619      	mov	r1, r3
 80051fa:	4805      	ldr	r0, [pc, #20]	; (8005210 <_ZN2FC10ModuleAHRS4mainEv+0x390>)
 80051fc:	f7ff fc99 	bl	8004b32 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>
 8005200:	e002      	b.n	8005208 <_ZN2FC10ModuleAHRS4mainEv+0x388>
	if(!msgBus.getBodyAccel(&this->bodyAccelSub)) return;
 8005202:	bf00      	nop
 8005204:	e000      	b.n	8005208 <_ZN2FC10ModuleAHRS4mainEv+0x388>
	if(!msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub)) return;
 8005206:	bf00      	nop
}
 8005208:	3784      	adds	r7, #132	; 0x84
 800520a:	46bd      	mov	sp, r7
 800520c:	bd90      	pop	{r4, r7, pc}
 800520e:	bf00      	nop
 8005210:	200007f8 	.word	0x200007f8
 8005214:	00000000 	.word	0x00000000

08005218 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 8005218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521a:	b0af      	sub	sp, #188	; 0xbc
 800521c:	af00      	add	r7, sp, #0
 800521e:	6278      	str	r0, [r7, #36]	; 0x24
 8005220:	ed87 0a08 	vstr	s0, [r7, #32]
 8005224:	edc7 0a07 	vstr	s1, [r7, #28]
 8005228:	ed87 1a06 	vstr	s2, [r7, #24]
 800522c:	edc7 1a05 	vstr	s3, [r7, #20]
 8005230:	ed87 2a04 	vstr	s4, [r7, #16]
 8005234:	edc7 2a03 	vstr	s5, [r7, #12]
 8005238:	ed87 3a02 	vstr	s6, [r7, #8]
 800523c:	edc7 3a01 	vstr	s7, [r7, #4]
 8005240:	ed87 4a00 	vstr	s8, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8005244:	edd7 7a02 	vldr	s15, [r7, #8]
 8005248:	eef5 7a40 	vcmp.f32	s15, #0.0
 800524c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005250:	d11e      	bne.n	8005290 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x78>
 8005252:	edd7 7a01 	vldr	s15, [r7, #4]
 8005256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800525a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525e:	d117      	bne.n	8005290 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x78>
 8005260:	edd7 7a00 	vldr	s15, [r7]
 8005264:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526c:	d110      	bne.n	8005290 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x78>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800526e:	edd7 2a03 	vldr	s5, [r7, #12]
 8005272:	ed97 2a04 	vldr	s4, [r7, #16]
 8005276:	edd7 1a05 	vldr	s3, [r7, #20]
 800527a:	ed97 1a06 	vldr	s2, [r7, #24]
 800527e:	edd7 0a07 	vldr	s1, [r7, #28]
 8005282:	ed97 0a08 	vldr	s0, [r7, #32]
 8005286:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005288:	f000 ff02 	bl	8006090 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 800528c:	f000 bef4 	b.w	8006078 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe60>
		return;
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005296:	eeb1 7a67 	vneg.f32	s14, s15
 800529a:	edd7 7a08 	vldr	s15, [r7, #32]
 800529e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80052a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80052ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80052ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80052be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ce:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80052d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80052dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80052e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80052ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80052f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80052fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005304:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800530c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005316:	edd7 7a07 	vldr	s15, [r7, #28]
 800531a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005324:	edd7 7a06 	vldr	s15, [r7, #24]
 8005328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800532c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005336:	edd7 7a08 	vldr	s15, [r7, #32]
 800533a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800533e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005342:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800534a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005354:	edd7 7a06 	vldr	s15, [r7, #24]
 8005358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005362:	edd7 7a07 	vldr	s15, [r7, #28]
 8005366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800536a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005374:	edd7 7a08 	vldr	s15, [r7, #32]
 8005378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800537c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005380:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005388:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800538c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005390:	edd7 7a05 	vldr	s15, [r7, #20]
 8005394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005398:	edd7 6a04 	vldr	s13, [r7, #16]
 800539c:	edd7 7a04 	vldr	s15, [r7, #16]
 80053a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80053ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80053b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053b8:	eeb0 0a67 	vmov.f32	s0, s15
 80053bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053be:	f001 f9c1 	bl	8006744 <_ZN2FC10ModuleAHRS7invSqrtEf>
 80053c2:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 80053c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80053ca:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 80053d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80053da:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 80053e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80053ea:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80053f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80053fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80053fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005402:	edd7 6a01 	vldr	s13, [r7, #4]
 8005406:	edd7 7a01 	vldr	s15, [r7, #4]
 800540a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800540e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005412:	edd7 6a00 	vldr	s13, [r7]
 8005416:	edd7 7a00 	vldr	s15, [r7]
 800541a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800541e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005422:	eeb0 0a67 	vmov.f32	s0, s15
 8005426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005428:	f001 f98c 	bl	8006744 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800542c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 8005430:	ed97 7a02 	vldr	s14, [r7, #8]
 8005434:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543c:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 8005440:	ed97 7a01 	vldr	s14, [r7, #4]
 8005444:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544c:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 8005450:	ed97 7a00 	vldr	s14, [r7]
 8005454:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545c:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005466:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800546a:	ed97 7a02 	vldr	s14, [r7, #8]
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800547c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005480:	ed97 7a01 	vldr	s14, [r7, #4]
 8005484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005488:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005492:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005496:	ed97 7a00 	vldr	s14, [r7]
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80054a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80054b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80054be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054c2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80054cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054d0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80054da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054de:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80054e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054ec:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80054f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005504:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800550e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800552c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005530:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005544:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005558:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800557c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005580:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005594:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80055a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80055b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055bc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80055cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80055e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80055e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80055ec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80055f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80055fa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80055fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005602:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800560c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005618:	edd7 6a02 	vldr	s13, [r7, #8]
 800561c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005624:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005628:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800562c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005630:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800563a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800563e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005642:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8005646:	edd7 7a00 	vldr	s15, [r7]
 800564a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800565c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005660:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005668:	ee37 7a67 	vsub.f32	s14, s14, s15
 800566c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005670:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800567c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8005686:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800568a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800568e:	edd7 6a01 	vldr	s13, [r7, #4]
 8005692:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800569a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80056a4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80056b6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056c2:	edd7 6a01 	vldr	s13, [r7, #4]
 80056c6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80056ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056d2:	edd7 6a01 	vldr	s13, [r7, #4]
 80056d6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80056da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056e2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80056e6:	edd7 7a00 	vldr	s15, [r7]
 80056ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80056f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056fc:	edd7 6a01 	vldr	s13, [r7, #4]
 8005700:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800570c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 8005710:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005714:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800571c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005720:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800572c:	eeb0 0a67 	vmov.f32	s0, s15
 8005730:	f7ff f878 	bl	8004824 <_ZSt4sqrtf>
 8005734:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8005738:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800573c:	eeb1 7a67 	vneg.f32	s14, s15
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005750:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800575c:	edd7 6a00 	vldr	s13, [r7]
 8005760:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005772:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800577a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800577e:	edd7 6a00 	vldr	s13, [r7]
 8005782:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800578a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800578e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005792:	edd7 7a01 	vldr	s15, [r7, #4]
 8005796:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80057a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057a8:	edd7 6a00 	vldr	s13, [r7]
 80057ac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80057b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057b8:	edd7 6a00 	vldr	s13, [r7]
 80057bc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80057c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 80057cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80057d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80057d4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 80057d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80057dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80057e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80057e4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80057e8:	eeb1 7a67 	vneg.f32	s14, s15
 80057ec:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80057f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057f4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80057f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005800:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005808:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800580c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005810:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005814:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005818:	edd7 7a04 	vldr	s15, [r7, #16]
 800581c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005820:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005828:	ee37 7a27 	vadd.f32	s14, s14, s15
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005832:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005836:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800583a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800583e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005842:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005846:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800584a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800584e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005852:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005856:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800585a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800585e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005862:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005866:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800586a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800586e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005872:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800587a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800587e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005882:	eef1 6a67 	vneg.f32	s13, s15
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800588c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005896:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800589a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800589e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80058a2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80058a6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80058aa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80058ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80058b6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80058ba:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80058be:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80058c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80058c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80058ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80058ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80058d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80058d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80058e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058ec:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80058f0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80058f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80058f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005900:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005904:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005908:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800590c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005910:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005914:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005918:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800591c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005920:	edd7 7a00 	vldr	s15, [r7]
 8005924:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800592c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005930:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005934:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005938:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800593c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005944:	edd7 7a05 	vldr	s15, [r7, #20]
 8005948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800594c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005954:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005958:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800595c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005960:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005964:	edd7 7a04 	vldr	s15, [r7, #16]
 8005968:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800596c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005974:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800597e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005982:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005986:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800598a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800598e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005992:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005996:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800599a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800599e:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80059a6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80059aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80059b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80059bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059c0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80059c4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80059c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059cc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80059d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80059d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80059dc:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80059e0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80059e4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80059e8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80059ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80059f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80059f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80059f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80059fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005a0a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 8005a18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005a20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a24:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005a28:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005a2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005a30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005a38:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005a3c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005a40:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005a44:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a48:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005a4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a54:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005a66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005a74:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005a78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005a7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a80:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005a84:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005a94:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005a98:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005a9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005aa0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005aa4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005aa8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005aac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ab0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ab4:	edd7 7a00 	vldr	s15, [r7]
 8005ab8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005ac8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005acc:	eeb1 7a67 	vneg.f32	s14, s15
 8005ad0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005ad4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ad8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005adc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ae0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ae4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005af0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005af4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005af8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005afc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b04:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005b16:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005b1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005b1e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005b22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005b2a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b2e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005b32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b36:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b3e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b4a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005b4e:	eef1 6a67 	vneg.f32	s13, s15
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005b58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 8005b62:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005b66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b6e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005b72:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005b76:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b7a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005b7e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005b86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b8a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005b8e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005b92:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005b96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005b9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ba2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ba6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005bb8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005bbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 8005bc6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005bca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005bce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005bd2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005bd6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005bda:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005bde:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005be2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005be6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005bea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005bee:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005bf2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005bf6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005bfa:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c02:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005c14:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8005c22:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005c26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c2e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005c32:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005c36:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c3a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c42:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005c46:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005c4a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c52:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005c5a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c5e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c62:	edd7 7a00 	vldr	s15, [r7]
 8005c66:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c72:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005c76:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005c7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005c7e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c86:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c8e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c96:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005c9a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005c9e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005ca2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005ca6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005caa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005cae:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005cbe:	eef1 6a67 	vneg.f32	s13, s15
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005cc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005cd2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005cd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cde:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005ce2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ce6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005cea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005cee:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005cf2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005cf6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005cfa:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005cfe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005d02:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005d06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d0a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d0e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d12:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d16:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d22:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d26:	eef1 6a67 	vneg.f32	s13, s15
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005d30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8005d3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d46:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005d4a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005d4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d52:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d5a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005d5e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005d62:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005d66:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d6a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d6e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005d88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d90:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005d94:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005da0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005da4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005da8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005dac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005db0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005db4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005db8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005dbc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005dc0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005dc4:	edd7 7a00 	vldr	s15, [r7]
 8005dc8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8005dd8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005ddc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005de4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005de8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005df4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005df8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e04:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005e08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e14:	eeb0 0a67 	vmov.f32	s0, s15
 8005e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e1a:	f000 fc93 	bl	8006744 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8005e1e:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 8005e22:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005e26:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 8005e32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005e36:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 8005e42:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005e46:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 8005e52:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005e56:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005e68:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e70:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e78:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005e82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e92:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005e9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eac:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005eb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebe:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ec6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)*1000000;	/*[second]*/
 8005eca:	f7fe fcbb 	bl	8004844 <_ZL11microsecondv>
 8005ece:	460a      	mov	r2, r1
 8005ed0:	4601      	mov	r1, r0
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8005ed8:	1ac9      	subs	r1, r1, r3
 8005eda:	eb62 0204 	sbc.w	r2, r2, r4
 8005ede:	460d      	mov	r5, r1
 8005ee0:	4616      	mov	r6, r2
 8005ee2:	462b      	mov	r3, r5
 8005ee4:	4634      	mov	r4, r6
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	0162      	lsls	r2, r4, #5
 8005ef0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005ef4:	0159      	lsls	r1, r3, #5
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4614      	mov	r4, r2
 8005efa:	1b5b      	subs	r3, r3, r5
 8005efc:	eb64 0406 	sbc.w	r4, r4, r6
 8005f00:	f04f 0100 	mov.w	r1, #0
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	0262      	lsls	r2, r4, #9
 8005f0a:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005f0e:	0259      	lsls	r1, r3, #9
 8005f10:	460b      	mov	r3, r1
 8005f12:	4614      	mov	r4, r2
 8005f14:	195b      	adds	r3, r3, r5
 8005f16:	eb44 0406 	adc.w	r4, r4, r6
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	01a2      	lsls	r2, r4, #6
 8005f24:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8005f28:	0199      	lsls	r1, r3, #6
 8005f2a:	1ac9      	subs	r1, r1, r3
 8005f2c:	eb62 0204 	sbc.w	r2, r2, r4
 8005f30:	194b      	adds	r3, r1, r5
 8005f32:	eb42 0406 	adc.w	r4, r2, r6
 8005f36:	4618      	mov	r0, r3
 8005f38:	4621      	mov	r1, r4
 8005f3a:	f7fa ff7d 	bl	8000e38 <__aeabi_ul2f>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fa fb0f 	bl	8000568 <__aeabi_f2d>
 8005f4a:	a34e      	add	r3, pc, #312	; (adr r3, 8006084 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe6c>)
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f7fa fdf2 	bl	8000b38 <__aeabi_dcmpgt>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xd46>
 8005f5a:	4b49      	ldr	r3, [pc, #292]	; (8006080 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe68>)
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005f64:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005f68:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005f80:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005f84:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005f9c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005fa0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8005fb8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005fbc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800601a:	eeb0 0a67 	vmov.f32	s0, s15
 800601e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006020:	f000 fb90 	bl	8006744 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006024:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800602e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006042:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8006056:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800605a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800606a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 8006078:	37bc      	adds	r7, #188	; 0xbc
 800607a:	46bd      	mov	sp, r7
 800607c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800607e:	bf00      	nop
 8006080:	3c23d70a 	.word	0x3c23d70a
 8006084:	47ae147b 	.word	0x47ae147b
 8006088:	3f847ae1 	.word	0x3f847ae1
 800608c:	00000000 	.word	0x00000000

08006090 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8006090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006092:	b0a1      	sub	sp, #132	; 0x84
 8006094:	af00      	add	r7, sp, #0
 8006096:	61f8      	str	r0, [r7, #28]
 8006098:	ed87 0a06 	vstr	s0, [r7, #24]
 800609c:	edc7 0a05 	vstr	s1, [r7, #20]
 80060a0:	ed87 1a04 	vstr	s2, [r7, #16]
 80060a4:	edc7 1a03 	vstr	s3, [r7, #12]
 80060a8:	ed87 2a02 	vstr	s4, [r7, #8]
 80060ac:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80060b6:	eeb1 7a67 	vneg.f32	s14, s15
 80060ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80060be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80060c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80060cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80060da:	edd7 7a04 	vldr	s15, [r7, #16]
 80060de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060ee:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80060f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80060fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006106:	edd7 7a04 	vldr	s15, [r7, #16]
 800610a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800610e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006118:	edd7 7a05 	vldr	s15, [r7, #20]
 800611c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006124:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800612c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006136:	edd7 7a05 	vldr	s15, [r7, #20]
 800613a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8006144:	edd7 7a04 	vldr	s15, [r7, #16]
 8006148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800614c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006156:	edd7 7a06 	vldr	s15, [r7, #24]
 800615a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800615e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006162:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800616a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006174:	edd7 7a04 	vldr	s15, [r7, #16]
 8006178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8006182:	edd7 7a05 	vldr	s15, [r7, #20]
 8006186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800618a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006194:	edd7 7a06 	vldr	s15, [r7, #24]
 8006198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800619c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061a8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80061ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80061b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80061b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061b8:	edd7 6a02 	vldr	s13, [r7, #8]
 80061bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80061c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061c8:	edd7 6a01 	vldr	s13, [r7, #4]
 80061cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80061d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061d8:	eeb0 0a67 	vmov.f32	s0, s15
 80061dc:	69f8      	ldr	r0, [r7, #28]
 80061de:	f000 fab1 	bl	8006744 <_ZN2FC10ModuleAHRS7invSqrtEf>
 80061e2:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 80061e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80061ea:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80061ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f2:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 80061f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80061fa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80061fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006202:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 8006206:	ed97 7a01 	vldr	s14, [r7, #4]
 800620a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006212:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800621c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006220:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800622a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800622e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006238:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800623c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006246:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800624a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8006254:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800625c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006266:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800626a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800626e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006278:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800627c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006280:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800628a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800628e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006292:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800629c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80062a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80062b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80062c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062cc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80062dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80062f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80062f8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80062fc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006304:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006308:	edd7 7a03 	vldr	s15, [r7, #12]
 800630c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006314:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006318:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800631c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006324:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006328:	edd7 7a02 	vldr	s15, [r7, #8]
 800632c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006334:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8006338:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800633c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006344:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006348:	edd7 7a03 	vldr	s15, [r7, #12]
 800634c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006350:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006354:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006358:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800635c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800636a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800636e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006372:	edd7 7a02 	vldr	s15, [r7, #8]
 8006376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800637a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800637e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006382:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006386:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800638a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800638e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006396:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800639a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800639e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063a6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80063aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80063ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063b6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80063ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80063be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80063c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80063cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063d0:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80063d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80063d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063e0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80063e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80063e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063f0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80063f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80063f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006400:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006408:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800640c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006418:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800641c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006428:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800642c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006438:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800643c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006440:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006444:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800644e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006452:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006456:	edd7 7a03 	vldr	s15, [r7, #12]
 800645a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800645e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006462:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006466:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800646a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800647c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006480:	edd7 7a02 	vldr	s15, [r7, #8]
 8006484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800648c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8006490:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006494:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800649c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80064a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80064a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064ac:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80064b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80064b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80064c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80064c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064cc:	eeb0 0a67 	vmov.f32	s0, s15
 80064d0:	69f8      	ldr	r0, [r7, #28]
 80064d2:	f000 f937 	bl	8006744 <_ZN2FC10ModuleAHRS7invSqrtEf>
 80064d6:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 80064da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80064de:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 80064ea:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80064ee:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80064f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 80064fa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80064fe:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006506:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 800650a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800650e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006516:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006520:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006528:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800652c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006530:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800653a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800653e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006542:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8006546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800654a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006554:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8006560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006564:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800656e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800657a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800657e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)*1000000;			/*[second]*/
 8006582:	f7fe f95f 	bl	8004844 <_ZL11microsecondv>
 8006586:	460a      	mov	r2, r1
 8006588:	4601      	mov	r1, r0
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8006590:	1ac9      	subs	r1, r1, r3
 8006592:	eb62 0204 	sbc.w	r2, r2, r4
 8006596:	460d      	mov	r5, r1
 8006598:	4616      	mov	r6, r2
 800659a:	462b      	mov	r3, r5
 800659c:	4634      	mov	r4, r6
 800659e:	f04f 0100 	mov.w	r1, #0
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	0162      	lsls	r2, r4, #5
 80065a8:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80065ac:	0159      	lsls	r1, r3, #5
 80065ae:	460b      	mov	r3, r1
 80065b0:	4614      	mov	r4, r2
 80065b2:	1b5b      	subs	r3, r3, r5
 80065b4:	eb64 0406 	sbc.w	r4, r4, r6
 80065b8:	f04f 0100 	mov.w	r1, #0
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	0262      	lsls	r2, r4, #9
 80065c2:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80065c6:	0259      	lsls	r1, r3, #9
 80065c8:	460b      	mov	r3, r1
 80065ca:	4614      	mov	r4, r2
 80065cc:	195b      	adds	r3, r3, r5
 80065ce:	eb44 0406 	adc.w	r4, r4, r6
 80065d2:	f04f 0100 	mov.w	r1, #0
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	01a2      	lsls	r2, r4, #6
 80065dc:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 80065e0:	0199      	lsls	r1, r3, #6
 80065e2:	1ac9      	subs	r1, r1, r3
 80065e4:	eb62 0204 	sbc.w	r2, r2, r4
 80065e8:	194b      	adds	r3, r1, r5
 80065ea:	eb42 0406 	adc.w	r4, r2, r6
 80065ee:	4618      	mov	r0, r3
 80065f0:	4621      	mov	r1, r4
 80065f2:	f7fa fc21 	bl	8000e38 <__aeabi_ul2f>
 80065f6:	4603      	mov	r3, r0
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7f9 ffb3 	bl	8000568 <__aeabi_f2d>
 8006602:	a34e      	add	r3, pc, #312	; (adr r3, 800673c <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6ac>)
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f7fa fa96 	bl	8000b38 <__aeabi_dcmpgt>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x586>
 8006612:	4b49      	ldr	r3, [pc, #292]	; (8006738 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6a8>)
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800661c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006620:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006638:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800663c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8006654:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006658:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800665c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006670:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006674:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800667c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8006692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80066a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80066b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80066ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066d2:	eeb0 0a67 	vmov.f32	s0, s15
 80066d6:	69f8      	ldr	r0, [r7, #28]
 80066d8:	f000 f834 	bl	8006744 <_ZN2FC10ModuleAHRS7invSqrtEf>
 80066dc:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80066e6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80066ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80066fa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800670e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006722:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 8006730:	bf00      	nop
 8006732:	3784      	adds	r7, #132	; 0x84
 8006734:	46bd      	mov	sp, r7
 8006736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006738:	3c23d70a 	.word	0x3c23d70a
 800673c:	47ae147b 	.word	0x47ae147b
 8006740:	3f847ae1 	.word	0x3f847ae1

08006744 <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 8006750:	edd7 7a00 	vldr	s15, [r7]
 8006754:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800675c:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006764:	f107 0310 	add.w	r3, r7, #16
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	105a      	asrs	r2, r3, #1
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800677e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006782:	edd7 7a05 	vldr	s15, [r7, #20]
 8006786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800678a:	edd7 7a04 	vldr	s15, [r7, #16]
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006796:	ee37 7a67 	vsub.f32	s14, s14, s15
 800679a:	edd7 7a04 	vldr	s15, [r7, #16]
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	ee07 3a90 	vmov	s15, r3
}
 80067ac:	eeb0 0a67 	vmov.f32	s0, s15
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	5f3759df 	.word	0x5f3759df

080067c0 <_Z13IST8310_timerP15tmrTimerControl>:
//	}
//}
#endif

#ifdef USE_IST8310
void IST8310_timer(TimerHandle_t pxTimer){
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	IST8310_updataIT();
 80067c8:	f7fa fd60 	bl	800128c <IST8310_updataIT>
}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <_Z12BME280_timerP15tmrTimerControl>:
#endif


#ifdef USE_BME280
void BME280_timer(TimerHandle_t pxTimer){
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	BME280_updateIT();
 80067dc:	f7fb fd3a 	bl	8002254 <BME280_updateIT>
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <_Z13MPU9250_timerP15tmrTimerControl>:
#endif

#ifdef USE_MPU9250
void MPU9250_timer(TimerHandle_t pxTimer){
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	MPU9250_updateDMA();
 80067f0:	f7fa fef6 	bl	80015e0 <MPU9250_updateDMA>
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <_Z16moduleAHRS_timerP15tmrTimerControl>:
#endif

#ifdef USE_AHRS
void moduleAHRS_timer(TimerHandle_t pxTimer){
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	moduleAHRS.main();
 8006804:	4803      	ldr	r0, [pc, #12]	; (8006814 <_Z16moduleAHRS_timerP15tmrTimerControl+0x18>)
 8006806:	f7fe fb3b 	bl	8004e80 <_ZN2FC10ModuleAHRS4mainEv>
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000008 	.word	0x20000008

08006818 <_Z10debug_mainPv>:
#endif

float tna;
float tat;
float tctl;
void debug_main(void* param){
 8006818:	b580      	push	{r7, lr}
 800681a:	b096      	sub	sp, #88	; 0x58
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]

	while(1){
		struct Attitude att;
		msgBus.getAttitude(&att);
 8006820:	f107 0308 	add.w	r3, r7, #8
 8006824:	4619      	mov	r1, r3
 8006826:	4810      	ldr	r0, [pc, #64]	; (8006868 <_Z10debug_mainPv+0x50>)
 8006828:	f7fe f926 	bl	8004a78 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
		tat = att.roll;
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	4a0f      	ldr	r2, [pc, #60]	; (800686c <_Z10debug_mainPv+0x54>)
 8006830:	6013      	str	r3, [r2, #0]


		struct NedAccel na;
		msgBus.getNedAccel(&na);
 8006832:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006836:	4619      	mov	r1, r3
 8006838:	480b      	ldr	r0, [pc, #44]	; (8006868 <_Z10debug_mainPv+0x50>)
 800683a:	f7fe f958 	bl	8004aee <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
		tna = na.xyz[1];
 800683e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006840:	4a0b      	ldr	r2, [pc, #44]	; (8006870 <_Z10debug_mainPv+0x58>)
 8006842:	6013      	str	r3, [r2, #0]

		struct Controller ctl;
		msgBus.getController(&ctl);
 8006844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006848:	4619      	mov	r1, r3
 800684a:	4807      	ldr	r0, [pc, #28]	; (8006868 <_Z10debug_mainPv+0x50>)
 800684c:	f7fe f8e4 	bl	8004a18 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
		tctl = ctl.throttle;
 8006850:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <_Z10debug_mainPv+0x5c>)
 800685c:	edc3 7a00 	vstr	s15, [r3]

		osDelay(10);
 8006860:	200a      	movs	r0, #10
 8006862:	f00b fbf7 	bl	8012054 <osDelay>
	}
 8006866:	e7db      	b.n	8006820 <_Z10debug_mainPv+0x8>
 8006868:	200007f8 	.word	0x200007f8
 800686c:	200009b4 	.word	0x200009b4
 8006870:	200009b0 	.word	0x200009b0
 8006874:	200009b8 	.word	0x200009b8

08006878 <cppMain>:
#define BME280_UPDATE_HZ 50
#define IST8310_UPDATE_HZ 100

#define AHRS_UPDATE_HZ 200

void cppMain(){
 8006878:	b590      	push	{r4, r7, lr}
 800687a:	b087      	sub	sp, #28
 800687c:	af02      	add	r7, sp, #8
    setvbuf(stdout, NULL, _IONBF, 0);
 800687e:	4b50      	ldr	r3, [pc, #320]	; (80069c0 <cppMain+0x148>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6898      	ldr	r0, [r3, #8]
 8006884:	2300      	movs	r3, #0
 8006886:	2202      	movs	r2, #2
 8006888:	2100      	movs	r1, #0
 800688a:	f010 fabb 	bl	8016e04 <setvbuf>

    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 800688e:	484d      	ldr	r0, [pc, #308]	; (80069c4 <cppMain+0x14c>)
 8006890:	f008 f9f3 	bl	800ec7a <HAL_TIM_Base_Start_IT>

#ifdef USE_MPU9250
	MPU9250(&hi2c1);
 8006894:	484c      	ldr	r0, [pc, #304]	; (80069c8 <cppMain+0x150>)
 8006896:	f7fa fe13 	bl	80014c0 <MPU9250>
	TimerHandle_t thMPU9250 = xTimerCreate("MPU9250_timer",
 800689a:	4b4c      	ldr	r3, [pc, #304]	; (80069cc <cppMain+0x154>)
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	2300      	movs	r3, #0
 80068a0:	2201      	movs	r2, #1
 80068a2:	2105      	movs	r1, #5
 80068a4:	484a      	ldr	r0, [pc, #296]	; (80069d0 <cppMain+0x158>)
 80068a6:	f00d fb29 	bl	8013efc <xTimerCreate>
 80068aa:	4603      	mov	r3, r0
							   pdMS_TO_TICKS(1000/MPU9250_UPDATE_HZ),
							   pdTRUE,
							   NULL,
							   MPU9250_timer);
 80068ac:	60fb      	str	r3, [r7, #12]
	if(thMPU9250 == NULL) {
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d100      	bne.n	80068b6 <cppMain+0x3e>
		/* timer heap error */
		while(1){
 80068b4:	e7fe      	b.n	80068b4 <cppMain+0x3c>

		}
	}
	/* timer start */
	if( xTimerStart( thMPU9250, 0 ) != pdPASS )
 80068b6:	68fc      	ldr	r4, [r7, #12]
 80068b8:	f00c fec0 	bl	801363c <xTaskGetTickCount>
 80068bc:	4602      	mov	r2, r0
 80068be:	2300      	movs	r3, #0
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	2101      	movs	r1, #1
 80068c6:	4620      	mov	r0, r4
 80068c8:	f00d fb74 	bl	8013fb4 <xTimerGenericCommand>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b01      	cmp	r3, #1
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280(&hi2c2);
 80068d0:	4840      	ldr	r0, [pc, #256]	; (80069d4 <cppMain+0x15c>)
 80068d2:	f7fb fcaf 	bl	8002234 <BME280>
	BME280_init(P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 80068d6:	2300      	movs	r3, #0
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	2304      	movs	r3, #4
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	2303      	movs	r3, #3
 80068e0:	2201      	movs	r2, #1
 80068e2:	2101      	movs	r1, #1
 80068e4:	2003      	movs	r0, #3
 80068e6:	f7fb fd5d 	bl	80023a4 <BME280_init>
	TimerHandle_t thBME280 = xTimerCreate("BME280_timer",
 80068ea:	4b3b      	ldr	r3, [pc, #236]	; (80069d8 <cppMain+0x160>)
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	2300      	movs	r3, #0
 80068f0:	2201      	movs	r2, #1
 80068f2:	2114      	movs	r1, #20
 80068f4:	4839      	ldr	r0, [pc, #228]	; (80069dc <cppMain+0x164>)
 80068f6:	f00d fb01 	bl	8013efc <xTimerCreate>
 80068fa:	4603      	mov	r3, r0
							   pdMS_TO_TICKS(1000/BME280_UPDATE_HZ),
							   pdTRUE,
							   NULL,
							   BME280_timer);
 80068fc:	60bb      	str	r3, [r7, #8]
	if(thBME280 == NULL) {
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d100      	bne.n	8006906 <cppMain+0x8e>
		while(1){
 8006904:	e7fe      	b.n	8006904 <cppMain+0x8c>
			/* timer heap error */
		}
	}
	/* timer start */
	if( xTimerStart( thBME280, 0 ) != pdPASS )
 8006906:	68bc      	ldr	r4, [r7, #8]
 8006908:	f00c fe98 	bl	801363c <xTaskGetTickCount>
 800690c:	4602      	mov	r2, r0
 800690e:	2300      	movs	r3, #0
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	2300      	movs	r3, #0
 8006914:	2101      	movs	r1, #1
 8006916:	4620      	mov	r0, r4
 8006918:	f00d fb4c 	bl	8013fb4 <xTimerGenericCommand>
 800691c:	4603      	mov	r3, r0
 800691e:	2b01      	cmp	r3, #1
		// The timer could not be set into the Active state.
	}
#endif

#ifdef USE_IST8310
	IST8310(&hi2c2);
 8006920:	482c      	ldr	r0, [pc, #176]	; (80069d4 <cppMain+0x15c>)
 8006922:	f7fa fc9f 	bl	8001264 <IST8310>
	TimerHandle_t thIST8310 = xTimerCreate("IST8310_timer",
 8006926:	4b2e      	ldr	r3, [pc, #184]	; (80069e0 <cppMain+0x168>)
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	2201      	movs	r2, #1
 800692e:	210a      	movs	r1, #10
 8006930:	482c      	ldr	r0, [pc, #176]	; (80069e4 <cppMain+0x16c>)
 8006932:	f00d fae3 	bl	8013efc <xTimerCreate>
 8006936:	4603      	mov	r3, r0
							   pdMS_TO_TICKS(1000/IST8310_UPDATE_HZ),
							   pdTRUE,
							   NULL,
							   IST8310_timer);
 8006938:	607b      	str	r3, [r7, #4]
	if(thIST8310 == NULL) {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d100      	bne.n	8006942 <cppMain+0xca>
		while(1){
 8006940:	e7fe      	b.n	8006940 <cppMain+0xc8>
			/* timer heap error */
		}
	}
	/* timer start */
	if( xTimerStart( thIST8310, 0 ) != pdPASS )
 8006942:	687c      	ldr	r4, [r7, #4]
 8006944:	f00c fe7a 	bl	801363c <xTaskGetTickCount>
 8006948:	4602      	mov	r2, r0
 800694a:	2300      	movs	r3, #0
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	2300      	movs	r3, #0
 8006950:	2101      	movs	r1, #1
 8006952:	4620      	mov	r0, r4
 8006954:	f00d fb2e 	bl	8013fb4 <xTimerGenericCommand>
 8006958:	4603      	mov	r3, r0
 800695a:	2b01      	cmp	r3, #1

#ifdef USE_GPS
	/*
	 *  GPS using DMA circular mode
	 */
    TM_GPS_Init(&huart8);
 800695c:	4822      	ldr	r0, [pc, #136]	; (80069e8 <cppMain+0x170>)
 800695e:	f7fc f883 	bl	8002a68 <TM_GPS_Init>
#endif

#ifdef USE_SBUS
	SBUS_init(&huart7);
 8006962:	4822      	ldr	r0, [pc, #136]	; (80069ec <cppMain+0x174>)
 8006964:	f7fd fc44 	bl	80041f0 <SBUS_init>
#endif

#ifdef USE_AHRS
	TimerHandle_t thModuleAHRS = xTimerCreate("moduleAHRS_timer",
 8006968:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <cppMain+0x178>)
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	2300      	movs	r3, #0
 800696e:	2201      	movs	r2, #1
 8006970:	2105      	movs	r1, #5
 8006972:	4820      	ldr	r0, [pc, #128]	; (80069f4 <cppMain+0x17c>)
 8006974:	f00d fac2 	bl	8013efc <xTimerCreate>
 8006978:	4603      	mov	r3, r0
							   pdMS_TO_TICKS(1000/AHRS_UPDATE_HZ),
							   pdTRUE,
							   NULL,
							   moduleAHRS_timer);
 800697a:	603b      	str	r3, [r7, #0]
	if(thModuleAHRS == NULL) {
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d100      	bne.n	8006984 <cppMain+0x10c>
		/* timer heap error */
		while(1){
 8006982:	e7fe      	b.n	8006982 <cppMain+0x10a>

		}
	}
	/* timer start */
	if( xTimerStart( thModuleAHRS, 0 ) != pdPASS )
 8006984:	683c      	ldr	r4, [r7, #0]
 8006986:	f00c fe59 	bl	801363c <xTaskGetTickCount>
 800698a:	4602      	mov	r2, r0
 800698c:	2300      	movs	r3, #0
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	2300      	movs	r3, #0
 8006992:	2101      	movs	r1, #1
 8006994:	4620      	mov	r0, r4
 8006996:	f00d fb0d 	bl	8013fb4 <xTimerGenericCommand>
 800699a:	4603      	mov	r3, r0
 800699c:	2b01      	cmp	r3, #1
	{
		// The timer could not be set into the Active state.
	}
#endif

    std::printf("boot complete\r\n");
 800699e:	4816      	ldr	r0, [pc, #88]	; (80069f8 <cppMain+0x180>)
 80069a0:	f010 fa18 	bl	8016dd4 <puts>

	xTaskCreate(debug_main,
 80069a4:	2300      	movs	r3, #0
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	2305      	movs	r3, #5
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	2300      	movs	r3, #0
 80069ae:	2280      	movs	r2, #128	; 0x80
 80069b0:	4912      	ldr	r1, [pc, #72]	; (80069fc <cppMain+0x184>)
 80069b2:	4813      	ldr	r0, [pc, #76]	; (8006a00 <cppMain+0x188>)
 80069b4:	f00c fbbc 	bl	8013130 <xTaskCreate>
//				4,
//				NULL);
//#endif


}
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd90      	pop	{r4, r7, pc}
 80069c0:	200000c4 	.word	0x200000c4
 80069c4:	20001a5c 	.word	0x20001a5c
 80069c8:	200016d0 	.word	0x200016d0
 80069cc:	080067e9 	.word	0x080067e9
 80069d0:	0801a33c 	.word	0x0801a33c
 80069d4:	20001724 	.word	0x20001724
 80069d8:	080067d5 	.word	0x080067d5
 80069dc:	0801a34c 	.word	0x0801a34c
 80069e0:	080067c1 	.word	0x080067c1
 80069e4:	0801a35c 	.word	0x0801a35c
 80069e8:	20001bdc 	.word	0x20001bdc
 80069ec:	20001a9c 	.word	0x20001a9c
 80069f0:	080067fd 	.word	0x080067fd
 80069f4:	0801a36c 	.word	0x0801a36c
 80069f8:	0801a380 	.word	0x0801a380
 80069fc:	0801a390 	.word	0x0801a390
 8006a00:	08006819 	.word	0x08006819

08006a04 <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
#ifdef USE_MPU9250
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4b2f      	ldr	r3, [pc, #188]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d137      	bne.n	8006a8a <HAL_I2C_MemRxCpltCallback+0x86>
		MPU9250_i2cRxCpltCallback();
 8006a1a:	f7fa fe01 	bl	8001620 <MPU9250_i2cRxCpltCallback>
		sensorAccel.setAccel(mpu9250.accel[0], mpu9250.accel[1], mpu9250.accel[2]);
 8006a1e:	4b2c      	ldr	r3, [pc, #176]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a20:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006a24:	4b2a      	ldr	r3, [pc, #168]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a26:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006a2a:	4b29      	ldr	r3, [pc, #164]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a2c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8006a30:	eeb0 1a66 	vmov.f32	s2, s13
 8006a34:	eef0 0a47 	vmov.f32	s1, s14
 8006a38:	eeb0 0a67 	vmov.f32	s0, s15
 8006a3c:	4825      	ldr	r0, [pc, #148]	; (8006ad4 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8006a3e:	f7fe f88d 	bl	8004b5c <_ZN2FC11SensorAccel8setAccelEfff>
		sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8006a42:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a44:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006a48:	4b21      	ldr	r3, [pc, #132]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a4a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8006a4e:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a50:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8006a54:	eeb0 1a66 	vmov.f32	s2, s13
 8006a58:	eef0 0a47 	vmov.f32	s1, s14
 8006a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a60:	481d      	ldr	r0, [pc, #116]	; (8006ad8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8006a62:	f7fe f8b7 	bl	8004bd4 <_ZN2FC10SensorGyro7setGyroEfff>
		sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
 8006a66:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a68:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006a6c:	4b18      	ldr	r3, [pc, #96]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a6e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8006a72:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006a74:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8006a78:	eeb0 1a66 	vmov.f32	s2, s13
 8006a7c:	eef0 0a47 	vmov.f32	s1, s14
 8006a80:	eeb0 0a67 	vmov.f32	s0, s15
 8006a84:	4815      	ldr	r0, [pc, #84]	; (8006adc <HAL_I2C_MemRxCpltCallback+0xd8>)
 8006a86:	f7fe f8e1 	bl	8004c4c <_ZN2FC9SensorMag6setMagEfff>
	}
#endif

#ifdef USE_IST8310
	if(hi2c->Instance == ist8310.hi2c->Instance){
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b14      	ldr	r3, [pc, #80]	; (8006ae0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d101      	bne.n	8006a9c <HAL_I2C_MemRxCpltCallback+0x98>
		IST8310_i2cRxCpltCallback();
 8006a98:	f7fa fc1a 	bl	80012d0 <IST8310_i2cRxCpltCallback>
	}
#endif

#ifdef USE_BME280
	if(hi2c->Instance == bme280.hi2c->Instance){
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d10e      	bne.n	8006ac8 <HAL_I2C_MemRxCpltCallback+0xc4>
		BME280_i2cRxCpltCallback();
 8006aaa:	f7fb fbf5 	bl	8002298 <BME280_i2cRxCpltCallback>
		sensorBaro.setBaro(bme280.P, bme280.T);
 8006aae:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8006ab0:	edd3 7a05 	vldr	s15, [r3, #20]
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8006ab6:	ed93 7a04 	vldr	s14, [r3, #16]
 8006aba:	eef0 0a47 	vmov.f32	s1, s14
 8006abe:	eeb0 0a67 	vmov.f32	s0, s15
 8006ac2:	4809      	ldr	r0, [pc, #36]	; (8006ae8 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8006ac4:	f7fe f990 	bl	8004de8 <_ZN2FC10SensorBaro7setBaroEff>
	}
#endif
}
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20000408 	.word	0x20000408
 8006ad4:	20000918 	.word	0x20000918
 8006ad8:	20000930 	.word	0x20000930
 8006adc:	200008e8 	.word	0x200008e8
 8006ae0:	20000780 	.word	0x20000780
 8006ae4:	200007a0 	.word	0x200007a0
 8006ae8:	20000948 	.word	0x20000948

08006aec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aee:	ed2d 8b06 	vpush	{d8-d10}
 8006af2:	b089      	sub	sp, #36	; 0x24
 8006af4:	af06      	add	r7, sp, #24
 8006af6:	6078      	str	r0, [r7, #4]
#ifdef USE_SBUS
	if(huart->Instance == sbus.huart->Instance){
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4b42      	ldr	r3, [pc, #264]	; (8006c08 <HAL_UART_RxCpltCallback+0x11c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d12e      	bne.n	8006b64 <HAL_UART_RxCpltCallback+0x78>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 8006b06:	f7fd fdb7 	bl	8004678 <SBUS_uartRxCpltCallback>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	bf0c      	ite	eq
 8006b10:	2301      	moveq	r3, #1
 8006b12:	2300      	movne	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d024      	beq.n	8006b64 <HAL_UART_RxCpltCallback+0x78>
			rc.setRC(SBUS_getChannel(2), SBUS_getChannel(3), SBUS_getChannel(3), SBUS_getChannel(1));
 8006b1a:	2002      	movs	r0, #2
 8006b1c:	f7fd fe2a 	bl	8004774 <SBUS_getChannel>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461c      	mov	r4, r3
 8006b24:	2003      	movs	r0, #3
 8006b26:	f7fd fe25 	bl	8004774 <SBUS_getChannel>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	461d      	mov	r5, r3
 8006b2e:	2003      	movs	r0, #3
 8006b30:	f7fd fe20 	bl	8004774 <SBUS_getChannel>
 8006b34:	4603      	mov	r3, r0
 8006b36:	461e      	mov	r6, r3
 8006b38:	2001      	movs	r0, #1
 8006b3a:	f7fd fe1b 	bl	8004774 <SBUS_getChannel>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	461a      	mov	r2, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	9305      	str	r3, [sp, #20]
 8006b46:	2300      	movs	r3, #0
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	9303      	str	r3, [sp, #12]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9302      	str	r3, [sp, #8]
 8006b52:	2300      	movs	r3, #0
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	9200      	str	r2, [sp, #0]
 8006b58:	4633      	mov	r3, r6
 8006b5a:	462a      	mov	r2, r5
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	482b      	ldr	r0, [pc, #172]	; (8006c0c <HAL_UART_RxCpltCallback+0x120>)
 8006b60:	f7fe f962 	bl	8004e28 <_ZN2FC2RC5setRCEttttttttt>
		}
	}
#endif
#ifdef USE_GPS
	if(huart->Instance == UART8){
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a29      	ldr	r2, [pc, #164]	; (8006c10 <HAL_UART_RxCpltCallback+0x124>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d145      	bne.n	8006bfa <HAL_UART_RxCpltCallback+0x10e>
		if(TM_GPS_Update() == TM_GPS_Result_NewData){
 8006b6e:	f7fc f815 	bl	8002b9c <TM_GPS_Update>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bf0c      	ite	eq
 8006b78:	2301      	moveq	r3, #1
 8006b7a:	2300      	movne	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d03b      	beq.n	8006bfa <HAL_UART_RxCpltCallback+0x10e>
			sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 8006b82:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <HAL_UART_RxCpltCallback+0x128>)
 8006b84:	ed93 8b00 	vldr	d8, [r3]
 8006b88:	4b22      	ldr	r3, [pc, #136]	; (8006c14 <HAL_UART_RxCpltCallback+0x128>)
 8006b8a:	ed93 9b02 	vldr	d9, [r3, #8]
 8006b8e:	4b21      	ldr	r3, [pc, #132]	; (8006c14 <HAL_UART_RxCpltCallback+0x128>)
 8006b90:	ed93 aa04 	vldr	s20, [r3, #16]
 8006b94:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <HAL_UART_RxCpltCallback+0x128>)
 8006b96:	edd3 7a08 	vldr	s15, [r3, #32]
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006ba0:	f7fc f834 	bl	8002c0c <TM_GPS_ConvertSpeed>
 8006ba4:	eeb0 6a40 	vmov.f32	s12, s0
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	; (8006c14 <HAL_UART_RxCpltCallback+0x128>)
 8006baa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006bae:	4b19      	ldr	r3, [pc, #100]	; (8006c14 <HAL_UART_RxCpltCallback+0x128>)
 8006bb0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006bb4:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <HAL_UART_RxCpltCallback+0x128>)
 8006bb6:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8006bba:	4b16      	ldr	r3, [pc, #88]	; (8006c14 <HAL_UART_RxCpltCallback+0x128>)
 8006bbc:	7d19      	ldrb	r1, [r3, #20]
 8006bbe:	4b15      	ldr	r3, [pc, #84]	; (8006c14 <HAL_UART_RxCpltCallback+0x128>)
 8006bc0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	f04f 0400 	mov.w	r4, #0
 8006bcc:	e9cd 3400 	strd	r3, r4, [sp]
 8006bd0:	eeb0 4a66 	vmov.f32	s8, s13
 8006bd4:	eef0 3a47 	vmov.f32	s7, s14
 8006bd8:	eeb0 3a67 	vmov.f32	s6, s15
 8006bdc:	eef0 2a46 	vmov.f32	s5, s12
 8006be0:	eeb0 2a4a 	vmov.f32	s4, s20
 8006be4:	eeb0 1a49 	vmov.f32	s2, s18
 8006be8:	eef0 1a69 	vmov.f32	s3, s19
 8006bec:	eeb0 0a48 	vmov.f32	s0, s16
 8006bf0:	eef0 0a68 	vmov.f32	s1, s17
 8006bf4:	4808      	ldr	r0, [pc, #32]	; (8006c18 <HAL_UART_RxCpltCallback+0x12c>)
 8006bf6:	f7fe f867 	bl	8004cc8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
#endif

	if(huart->Instance == USART2){
		// telemetry
	}
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	ecbd 8b06 	vpop	{d8-d10}
 8006c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000490 	.word	0x20000490
 8006c0c:	200009a0 	.word	0x200009a0
 8006c10:	40007c00 	.word	0x40007c00
 8006c14:	20000528 	.word	0x20000528
 8006c18:	20000958 	.word	0x20000958

08006c1c <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	461a      	mov	r2, r3
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	6053      	str	r3, [r2, #4]
 8006c2e:	6093      	str	r3, [r2, #8]
 8006c30:	60d3      	str	r3, [r2, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff ffe6 	bl	8006c1c <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b088      	sub	sp, #32
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6178      	str	r0, [r7, #20]
 8006c62:	ed87 0a04 	vstr	s0, [r7, #16]
 8006c66:	edc7 0a03 	vstr	s1, [r7, #12]
 8006c6a:	ed87 1a02 	vstr	s2, [r7, #8]
 8006c6e:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff ffe3 	bl	8006c40 <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2100      	movs	r1, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fa9e 	bl	80071c4 <_ZN6matrix6VectorIfLj4EEclEj>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6013      	str	r3, [r2, #0]
        q(1) = b;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	2101      	movs	r1, #1
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fa96 	bl	80071c4 <_ZN6matrix6VectorIfLj4EEclEj>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6013      	str	r3, [r2, #0]
        q(2) = c;
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2102      	movs	r1, #2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fa8e 	bl	80071c4 <_ZN6matrix6VectorIfLj4EEclEj>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6013      	str	r3, [r2, #0]
        q(3) = d;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	2103      	movs	r1, #3
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fa86 	bl	80071c4 <_ZN6matrix6VectorIfLj4EEclEj>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6013      	str	r3, [r2, #0]
    }
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <_ZNK6matrix10QuaternionIfE8inversedEv>:
    /**
     * Invert quaternion
     *
     * @return inverted quaternion
     */
    Quaternion inversed() const
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	ed2d 8b04 	vpush	{d8-d9}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
    {
        const Quaternion &q = *this;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
        Type normSq = q.dot(q);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4611      	mov	r1, r2
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fa8f 	bl	8007204 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>
 8006ce6:	ed87 0a02 	vstr	s0, [r7, #8]
        return Quaternion(
                   q(0)/normSq,
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2100      	movs	r1, #0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fabc 	bl	800726c <_ZNK6matrix6VectorIfLj4EEclEj>
 8006cf4:	eeb0 7a40 	vmov.f32	s14, s0
                   -q(1)/normSq,
                   -q(2)/normSq,
                   -q(3)/normSq);
 8006cf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006cfc:	ee87 8a27 	vdiv.f32	s16, s14, s15
                   -q(1)/normSq,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2101      	movs	r1, #1
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fab1 	bl	800726c <_ZNK6matrix6VectorIfLj4EEclEj>
 8006d0a:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 8006d0e:	eeb1 7a67 	vneg.f32	s14, s15
 8006d12:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d16:	eec7 8a27 	vdiv.f32	s17, s14, s15
                   -q(2)/normSq,
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 faa4 	bl	800726c <_ZNK6matrix6VectorIfLj4EEclEj>
 8006d24:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 8006d28:	eeb1 7a67 	vneg.f32	s14, s15
 8006d2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d30:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2103      	movs	r1, #3
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fa97 	bl	800726c <_ZNK6matrix6VectorIfLj4EEclEj>
 8006d3e:	eef0 7a40 	vmov.f32	s15, s0
 8006d42:	eeb1 7a67 	vneg.f32	s14, s15
 8006d46:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006d4e:	eef0 1a66 	vmov.f32	s3, s13
 8006d52:	eeb0 1a49 	vmov.f32	s2, s18
 8006d56:	eef0 0a68 	vmov.f32	s1, s17
 8006d5a:	eeb0 0a48 	vmov.f32	s0, s16
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff ff7b 	bl	8006c5a <_ZN6matrix10QuaternionIfEC1Effff>
    }
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	ecbd 8b04 	vpop	{d8-d9}
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	2324      	movs	r3, #36	; 0x24
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2100      	movs	r1, #0
 8006d82:	f00e ff9c 	bl	8015cbe <memset>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff ffe8 	bl	8006d70 <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 8006daa:	b580      	push	{r7, lr}
 8006dac:	ed2d 8b02 	vpush	{d8}
 8006db0:	b092      	sub	sp, #72	; 0x48
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
    {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff ffe8 	bl	8006d90 <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fa4f 	bl	800726c <_ZNK6matrix6VectorIfLj4EEclEj>
 8006dce:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fa48 	bl	800726c <_ZNK6matrix6VectorIfLj4EEclEj>
 8006ddc:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2102      	movs	r1, #2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fa41 	bl	800726c <_ZNK6matrix6VectorIfLj4EEclEj>
 8006dea:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2103      	movs	r1, #3
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fa3a 	bl	800726c <_ZNK6matrix6VectorIfLj4EEclEj>
 8006df8:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 8006dfc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006e00:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e08:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 8006e0c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006e10:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e18:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 8006e1c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006e20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e28:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 8006e2c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006e30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 8006e3c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006e40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e48:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 8006e4c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006e50:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e58:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 8006e5c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006e60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e68:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 8006e6c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006e70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e78:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 8006e7c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006e80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e88:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 8006e8c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006e90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e98:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 8006e9c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006ea0:	edd7 7a08 	vldr	s15, [r7, #32]
 8006ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006eac:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f9fa 	bl	80072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ec2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006ec6:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 8006eca:	ed97 7a07 	vldr	s14, [r7, #28]
 8006ece:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006ed2:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed8:	2201      	movs	r2, #1
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f9e7 	bl	80072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006ee8:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 8006eec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006ef0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ef4:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efa:	2202      	movs	r2, #2
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f9d6 	bl	80072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006f04:	4603      	mov	r3, r0
 8006f06:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006f0a:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 8006f0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006f12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006f16:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2101      	movs	r1, #1
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f9c5 	bl	80072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006f26:	4603      	mov	r3, r0
 8006f28:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006f2c:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 8006f30:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006f34:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f40:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f46:	2201      	movs	r2, #1
 8006f48:	2101      	movs	r1, #1
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 f9b0 	bl	80072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006f50:	4603      	mov	r3, r0
 8006f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f56:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006f5a:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 8006f5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006f62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006f66:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	2101      	movs	r1, #1
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 f99d 	bl	80072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006f76:	4603      	mov	r3, r0
 8006f78:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006f7c:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 8006f80:	ed97 7a06 	vldr	s14, [r7, #24]
 8006f84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006f88:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2102      	movs	r1, #2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f98c 	bl	80072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006f9e:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 8006fa2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006faa:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	2102      	movs	r1, #2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f97b 	bl	80072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006fc0:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 8006fc4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006fc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8006fcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006fd4:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fda:	2202      	movs	r2, #2
 8006fdc:	2102      	movs	r1, #2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f966 	bl	80072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fea:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006fee:	edc3 7a00 	vstr	s15, [r3]
    }
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3748      	adds	r7, #72	; 0x48
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	ecbd 8b02 	vpop	{d8}
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	461a      	mov	r2, r3
 800700c:	2300      	movs	r3, #0
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	6053      	str	r3, [r2, #4]
 8007012:	6093      	str	r3, [r2, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4618      	mov	r0, r3
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <_ZN6matrix6VectorIfLj3EEC1Ev>:
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff ffe7 	bl	8007000 <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	ed87 0a02 	vstr	s0, [r7, #8]
 8007048:	edc7 0a01 	vstr	s1, [r7, #4]
 800704c:	ed87 1a00 	vstr	s2, [r7]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff ffe5 	bl	8007022 <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	617b      	str	r3, [r7, #20]
        v(0) = x;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f000 f88f 	bl	8007184 <_ZN6matrix6VectorIfLj3EEclEj>
 8007066:	4602      	mov	r2, r0
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6013      	str	r3, [r2, #0]
        v(1) = y;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2101      	movs	r1, #1
 8007070:	4618      	mov	r0, r3
 8007072:	f000 f887 	bl	8007184 <_ZN6matrix6VectorIfLj3EEclEj>
 8007076:	4602      	mov	r2, r0
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6013      	str	r3, [r2, #0]
        v(2) = z;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2102      	movs	r1, #2
 8007080:	4618      	mov	r0, r3
 8007082:	f000 f87f 	bl	8007184 <_ZN6matrix6VectorIfLj3EEclEj>
 8007086:	4602      	mov	r2, r0
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	6013      	str	r3, [r2, #0]
    }
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 8007096:	b580      	push	{r7, lr}
 8007098:	ed2d 8b02 	vpush	{d8}
 800709c:	b088      	sub	sp, #32
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	461a      	mov	r2, r3
 80070ae:	2300      	movs	r3, #0
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	6053      	str	r3, [r2, #4]
 80070b4:	6093      	str	r3, [r2, #8]
        res.setZero();
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 f928 	bl	800730c <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 80070bc:	2300      	movs	r3, #0
 80070be:	61fb      	str	r3, [r7, #28]
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d831      	bhi.n	800712a <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d128      	bne.n	8007122 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d81f      	bhi.n	800711a <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	6938      	ldr	r0, [r7, #16]
 80070e0:	f000 f94c 	bl	800737c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 80070e4:	eeb0 8a40 	vmov.f32	s16, s0
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f977 	bl	80073e0 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 80070f2:	eef0 7a40 	vmov.f32	s15, s0
 80070f6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	69f9      	ldr	r1, [r7, #28]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f912 	bl	8007328 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 8007104:	4603      	mov	r3, r0
 8007106:	edd3 7a00 	vldr	s15, [r3]
 800710a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800710e:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	3301      	adds	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	e7dc      	b.n	80070d4 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	3301      	adds	r3, #1
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	e7d3      	b.n	80070ca <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	3301      	adds	r3, #1
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	e7ca      	b.n	80070c0 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 800712a:	bf00      	nop
    }
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	ecbd 8b02 	vpop	{d8}
 8007136:	bd80      	pop	{r7, pc}

08007138 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f978 	bl	800743c <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
    {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	461a      	mov	r2, r3
 8007164:	2300      	movs	r3, #0
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	6053      	str	r3, [r2, #4]
 800716a:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	220c      	movs	r2, #12
 8007172:	4618      	mov	r0, r3
 8007174:	f00e fd98 	bl	8015ca8 <memcpy>
    }
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d905      	bls.n	80071a0 <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 8007194:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 8007196:	4a09      	ldr	r2, [pc, #36]	; (80071bc <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 8007198:	2137      	movs	r1, #55	; 0x37
 800719a:	4809      	ldr	r0, [pc, #36]	; (80071c0 <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 800719c:	f00e fd1a 	bl	8015bd4 <__assert_func>

        MatrixM1 &v = *this;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 80071a4:	2200      	movs	r2, #0
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 f8bd 	bl	8007328 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 80071ae:	4603      	mov	r3, r0
    }
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	0801a39c 	.word	0x0801a39c
 80071bc:	0801a894 	.word	0x0801a894
 80071c0:	0801a3a4 	.word	0x0801a3a4

080071c4 <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
        assert(i < M);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d905      	bls.n	80071e0 <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 80071d4:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 80071d6:	4a09      	ldr	r2, [pc, #36]	; (80071fc <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 80071d8:	2137      	movs	r1, #55	; 0x37
 80071da:	4809      	ldr	r0, [pc, #36]	; (8007200 <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 80071dc:	f00e fcfa 	bl	8015bd4 <__assert_func>
        MatrixM1 &v = *this;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 80071e4:	2200      	movs	r2, #0
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f937 	bl	800745c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 80071ee:	4603      	mov	r3, r0
    }
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	0801a39c 	.word	0x0801a39c
 80071fc:	0801a430 	.word	0x0801a430
 8007200:	0801a3a4 	.word	0x0801a3a4

08007204 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>:

    Type dot(const MatrixM1 & b) const {
 8007204:	b580      	push	{r7, lr}
 8007206:	ed2d 8b02 	vpush	{d8}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
        const Vector &a(*this);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60fb      	str	r3, [r7, #12]
        Type r(0);
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	617b      	str	r3, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b03      	cmp	r3, #3
 8007224:	d818      	bhi.n	8007258 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x54>
            r += a(i)*b(i,0);
 8007226:	6939      	ldr	r1, [r7, #16]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f81f 	bl	800726c <_ZNK6matrix6VectorIfLj4EEclEj>
 800722e:	eeb0 8a40 	vmov.f32	s16, s0
 8007232:	2200      	movs	r2, #0
 8007234:	6939      	ldr	r1, [r7, #16]
 8007236:	6838      	ldr	r0, [r7, #0]
 8007238:	f000 f93a 	bl	80074b0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 800723c:	eef0 7a40 	vmov.f32	s15, s0
 8007240:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007244:	ed97 7a05 	vldr	s14, [r7, #20]
 8007248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800724c:	edc7 7a05 	vstr	s15, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	3301      	adds	r3, #1
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	e7e3      	b.n	8007220 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x1c>
        }
        return r;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	ee07 3a90 	vmov	s15, r3
    }
 800725e:	eeb0 0a67 	vmov.f32	s0, s15
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	ecbd 8b02 	vpop	{d8}
 800726a:	bd80      	pop	{r7, pc}

0800726c <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
        assert(i < M);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b03      	cmp	r3, #3
 800727a:	d905      	bls.n	8007288 <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 800727c:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 800727e:	4a0a      	ldr	r2, [pc, #40]	; (80072a8 <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 8007280:	212e      	movs	r1, #46	; 0x2e
 8007282:	480a      	ldr	r0, [pc, #40]	; (80072ac <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 8007284:	f00e fca6 	bl	8015bd4 <__assert_func>
        const MatrixM1 &v = *this;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800728c:	2200      	movs	r2, #0
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f90d 	bl	80074b0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 8007296:	eef0 7a40 	vmov.f32	s15, s0
    }
 800729a:	eeb0 0a67 	vmov.f32	s0, s15
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	0801a39c 	.word	0x0801a39c
 80072a8:	0801a5cc 	.word	0x0801a5cc
 80072ac:	0801a3a4 	.word	0x0801a3a4

080072b0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d905      	bls.n	80072ce <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 80072c2:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 80072c4:	4a0e      	ldr	r2, [pc, #56]	; (8007300 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 80072c6:	216e      	movs	r1, #110	; 0x6e
 80072c8:	480e      	ldr	r0, [pc, #56]	; (8007304 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 80072ca:	f00e fc83 	bl	8015bd4 <__assert_func>
        assert(j < N);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d905      	bls.n	80072e0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 80072d4:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 80072d6:	4a0a      	ldr	r2, [pc, #40]	; (8007300 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 80072d8:	2170      	movs	r1, #112	; 0x70
 80072da:	480a      	ldr	r0, [pc, #40]	; (8007304 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 80072dc:	f00e fc7a 	bl	8015bd4 <__assert_func>
        return _data[i][j];
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4413      	add	r3, r2
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4413      	add	r3, r2
    }
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	0801a39c 	.word	0x0801a39c
 8007300:	0801a644 	.word	0x0801a644
 8007304:	0801a3d4 	.word	0x0801a3d4
 8007308:	0801a404 	.word	0x0801a404

0800730c <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	220c      	movs	r2, #12
 8007318:	2100      	movs	r1, #0
 800731a:	4618      	mov	r0, r3
 800731c:	f00e fccf 	bl	8015cbe <memset>
    }
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d905      	bls.n	8007346 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800733a:	4b0c      	ldr	r3, [pc, #48]	; (800736c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 800733c:	4a0c      	ldr	r2, [pc, #48]	; (8007370 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800733e:	216e      	movs	r1, #110	; 0x6e
 8007340:	480c      	ldr	r0, [pc, #48]	; (8007374 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 8007342:	f00e fc47 	bl	8015bd4 <__assert_func>
        assert(j < N);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800734c:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800734e:	4a08      	ldr	r2, [pc, #32]	; (8007370 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 8007350:	2170      	movs	r1, #112	; 0x70
 8007352:	4808      	ldr	r0, [pc, #32]	; (8007374 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 8007354:	f00e fc3e 	bl	8015bd4 <__assert_func>
        return _data[i][j];
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4413      	add	r3, r2
    }
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	0801a39c 	.word	0x0801a39c
 8007370:	0801a804 	.word	0x0801a804
 8007374:	0801a3d4 	.word	0x0801a3d4
 8007378:	0801a404 	.word	0x0801a404

0800737c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d905      	bls.n	800739a <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 8007390:	4a10      	ldr	r2, [pc, #64]	; (80073d4 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 8007392:	2164      	movs	r1, #100	; 0x64
 8007394:	4810      	ldr	r0, [pc, #64]	; (80073d8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 8007396:	f00e fc1d 	bl	8015bd4 <__assert_func>
        assert(j < N);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d905      	bls.n	80073ac <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 80073a0:	4b0e      	ldr	r3, [pc, #56]	; (80073dc <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 80073a2:	4a0c      	ldr	r2, [pc, #48]	; (80073d4 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 80073a4:	2166      	movs	r1, #102	; 0x66
 80073a6:	480c      	ldr	r0, [pc, #48]	; (80073d8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 80073a8:	f00e fc14 	bl	8015bd4 <__assert_func>
        return _data[i][j];
 80073ac:	68f9      	ldr	r1, [r7, #12]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	4613      	mov	r3, r2
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	4413      	add	r3, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	ee07 3a90 	vmov	s15, r3
    }
 80073c4:	eeb0 0a67 	vmov.f32	s0, s15
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	0801a39c 	.word	0x0801a39c
 80073d4:	0801a6d4 	.word	0x0801a6d4
 80073d8:	0801a3d4 	.word	0x0801a3d4
 80073dc:	0801a404 	.word	0x0801a404

080073e0 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d905      	bls.n	80073fe <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 80073f2:	4b0e      	ldr	r3, [pc, #56]	; (800742c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 80073f4:	4a0e      	ldr	r2, [pc, #56]	; (8007430 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 80073f6:	2164      	movs	r1, #100	; 0x64
 80073f8:	480e      	ldr	r0, [pc, #56]	; (8007434 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 80073fa:	f00e fbeb 	bl	8015bd4 <__assert_func>
        assert(j < N);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 8007404:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 8007406:	4a0a      	ldr	r2, [pc, #40]	; (8007430 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 8007408:	2166      	movs	r1, #102	; 0x66
 800740a:	480a      	ldr	r0, [pc, #40]	; (8007434 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800740c:	f00e fbe2 	bl	8015bd4 <__assert_func>
        return _data[i][j];
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	440b      	add	r3, r1
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	ee07 3a90 	vmov	s15, r3
    }
 8007422:	eeb0 0a67 	vmov.f32	s0, s15
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	0801a39c 	.word	0x0801a39c
 8007430:	0801a76c 	.word	0x0801a76c
 8007434:	0801a3d4 	.word	0x0801a3d4
 8007438:	0801a404 	.word	0x0801a404

0800743c <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff fe83 	bl	8007156 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b03      	cmp	r3, #3
 800746c:	d905      	bls.n	800747a <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800746e:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 8007470:	4a0c      	ldr	r2, [pc, #48]	; (80074a4 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 8007472:	216e      	movs	r1, #110	; 0x6e
 8007474:	480c      	ldr	r0, [pc, #48]	; (80074a8 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 8007476:	f00e fbad 	bl	8015bd4 <__assert_func>
        assert(j < N);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 8007480:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 8007482:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 8007484:	2170      	movs	r1, #112	; 0x70
 8007486:	4808      	ldr	r0, [pc, #32]	; (80074a8 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 8007488:	f00e fba4 	bl	8015bd4 <__assert_func>
        return _data[i][j];
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4413      	add	r3, r2
    }
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	0801a39c 	.word	0x0801a39c
 80074a4:	0801a4a4 	.word	0x0801a4a4
 80074a8:	0801a3d4 	.word	0x0801a3d4
 80074ac:	0801a404 	.word	0x0801a404

080074b0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d905      	bls.n	80074ce <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 80074c2:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 80074c4:	4a0e      	ldr	r2, [pc, #56]	; (8007500 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 80074c6:	2164      	movs	r1, #100	; 0x64
 80074c8:	480e      	ldr	r0, [pc, #56]	; (8007504 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 80074ca:	f00e fb83 	bl	8015bd4 <__assert_func>
        assert(j < N);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 80074d4:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 80074d6:	4a0a      	ldr	r2, [pc, #40]	; (8007500 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 80074d8:	2166      	movs	r1, #102	; 0x66
 80074da:	480a      	ldr	r0, [pc, #40]	; (8007504 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 80074dc:	f00e fb7a 	bl	8015bd4 <__assert_func>
        return _data[i][j];
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	440b      	add	r3, r1
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	ee07 3a90 	vmov	s15, r3
    }
 80074f2:	eeb0 0a67 	vmov.f32	s0, s15
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	0801a39c 	.word	0x0801a39c
 8007500:	0801a534 	.word	0x0801a534
 8007504:	0801a3d4 	.word	0x0801a3d4
 8007508:	0801a404 	.word	0x0801a404

0800750c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007512:	2300      	movs	r3, #0
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	4b10      	ldr	r3, [pc, #64]	; (8007558 <MX_DMA_Init+0x4c>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	4a0f      	ldr	r2, [pc, #60]	; (8007558 <MX_DMA_Init+0x4c>)
 800751c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007520:	6313      	str	r3, [r2, #48]	; 0x30
 8007522:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <MX_DMA_Init+0x4c>)
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800752e:	2300      	movs	r3, #0
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	4b09      	ldr	r3, [pc, #36]	; (8007558 <MX_DMA_Init+0x4c>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007536:	4a08      	ldr	r2, [pc, #32]	; (8007558 <MX_DMA_Init+0x4c>)
 8007538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800753c:	6313      	str	r3, [r2, #48]	; 0x30
 800753e:	4b06      	ldr	r3, [pc, #24]	; (8007558 <MX_DMA_Init+0x4c>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007546:	603b      	str	r3, [r7, #0]
 8007548:	683b      	ldr	r3, [r7, #0]

}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40023800 	.word	0x40023800

0800755c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007560:	4a04      	ldr	r2, [pc, #16]	; (8007574 <MX_FREERTOS_Init+0x18>)
 8007562:	2100      	movs	r1, #0
 8007564:	4804      	ldr	r0, [pc, #16]	; (8007578 <MX_FREERTOS_Init+0x1c>)
 8007566:	f00a fccf 	bl	8011f08 <osThreadNew>
 800756a:	4602      	mov	r2, r0
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <MX_FREERTOS_Init+0x20>)
 800756e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8007570:	bf00      	nop
 8007572:	bd80      	pop	{r7, pc}
 8007574:	0801a908 	.word	0x0801a908
 8007578:	08007581 	.word	0x08007581
 800757c:	200016cc 	.word	0x200016cc

08007580 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007588:	2001      	movs	r0, #1
 800758a:	f00a fd63 	bl	8012054 <osDelay>
 800758e:	e7fb      	b.n	8007588 <StartDefaultTask+0x8>

08007590 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08e      	sub	sp, #56	; 0x38
 8007594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	605a      	str	r2, [r3, #4]
 80075a0:	609a      	str	r2, [r3, #8]
 80075a2:	60da      	str	r2, [r3, #12]
 80075a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075a6:	2300      	movs	r3, #0
 80075a8:	623b      	str	r3, [r7, #32]
 80075aa:	4b80      	ldr	r3, [pc, #512]	; (80077ac <MX_GPIO_Init+0x21c>)
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	4a7f      	ldr	r2, [pc, #508]	; (80077ac <MX_GPIO_Init+0x21c>)
 80075b0:	f043 0304 	orr.w	r3, r3, #4
 80075b4:	6313      	str	r3, [r2, #48]	; 0x30
 80075b6:	4b7d      	ldr	r3, [pc, #500]	; (80077ac <MX_GPIO_Init+0x21c>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80075c2:	2300      	movs	r3, #0
 80075c4:	61fb      	str	r3, [r7, #28]
 80075c6:	4b79      	ldr	r3, [pc, #484]	; (80077ac <MX_GPIO_Init+0x21c>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	4a78      	ldr	r2, [pc, #480]	; (80077ac <MX_GPIO_Init+0x21c>)
 80075cc:	f043 0320 	orr.w	r3, r3, #32
 80075d0:	6313      	str	r3, [r2, #48]	; 0x30
 80075d2:	4b76      	ldr	r3, [pc, #472]	; (80077ac <MX_GPIO_Init+0x21c>)
 80075d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80075de:	2300      	movs	r3, #0
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	4b72      	ldr	r3, [pc, #456]	; (80077ac <MX_GPIO_Init+0x21c>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	4a71      	ldr	r2, [pc, #452]	; (80077ac <MX_GPIO_Init+0x21c>)
 80075e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ec:	6313      	str	r3, [r2, #48]	; 0x30
 80075ee:	4b6f      	ldr	r3, [pc, #444]	; (80077ac <MX_GPIO_Init+0x21c>)
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f6:	61bb      	str	r3, [r7, #24]
 80075f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	4b6b      	ldr	r3, [pc, #428]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	4a6a      	ldr	r2, [pc, #424]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007604:	f043 0301 	orr.w	r3, r3, #1
 8007608:	6313      	str	r3, [r2, #48]	; 0x30
 800760a:	4b68      	ldr	r3, [pc, #416]	; (80077ac <MX_GPIO_Init+0x21c>)
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	4b64      	ldr	r3, [pc, #400]	; (80077ac <MX_GPIO_Init+0x21c>)
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	4a63      	ldr	r2, [pc, #396]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007620:	f043 0302 	orr.w	r3, r3, #2
 8007624:	6313      	str	r3, [r2, #48]	; 0x30
 8007626:	4b61      	ldr	r3, [pc, #388]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	4b5d      	ldr	r3, [pc, #372]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	4a5c      	ldr	r2, [pc, #368]	; (80077ac <MX_GPIO_Init+0x21c>)
 800763c:	f043 0310 	orr.w	r3, r3, #16
 8007640:	6313      	str	r3, [r2, #48]	; 0x30
 8007642:	4b5a      	ldr	r3, [pc, #360]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800764e:	2300      	movs	r3, #0
 8007650:	60bb      	str	r3, [r7, #8]
 8007652:	4b56      	ldr	r3, [pc, #344]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	4a55      	ldr	r2, [pc, #340]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007658:	f043 0308 	orr.w	r3, r3, #8
 800765c:	6313      	str	r3, [r2, #48]	; 0x30
 800765e:	4b53      	ldr	r3, [pc, #332]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	60bb      	str	r3, [r7, #8]
 8007668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	607b      	str	r3, [r7, #4]
 800766e:	4b4f      	ldr	r3, [pc, #316]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	4a4e      	ldr	r2, [pc, #312]	; (80077ac <MX_GPIO_Init+0x21c>)
 8007674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007678:	6313      	str	r3, [r2, #48]	; 0x30
 800767a:	4b4c      	ldr	r3, [pc, #304]	; (80077ac <MX_GPIO_Init+0x21c>)
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	607b      	str	r3, [r7, #4]
 8007684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8007686:	2200      	movs	r2, #0
 8007688:	f244 0181 	movw	r1, #16513	; 0x4081
 800768c:	4848      	ldr	r0, [pc, #288]	; (80077b0 <MX_GPIO_Init+0x220>)
 800768e:	f002 fab3 	bl	8009bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8007692:	2200      	movs	r2, #0
 8007694:	2140      	movs	r1, #64	; 0x40
 8007696:	4847      	ldr	r0, [pc, #284]	; (80077b4 <MX_GPIO_Init+0x224>)
 8007698:	f002 faae 	bl	8009bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800769c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80076a2:	4b45      	ldr	r3, [pc, #276]	; (80077b8 <MX_GPIO_Init+0x228>)
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80076aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ae:	4619      	mov	r1, r3
 80076b0:	4842      	ldr	r0, [pc, #264]	; (80077bc <MX_GPIO_Init+0x22c>)
 80076b2:	f002 f8df 	bl	8009874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80076b6:	2332      	movs	r3, #50	; 0x32
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ba:	2302      	movs	r3, #2
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076c2:	2303      	movs	r3, #3
 80076c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076c6:	230b      	movs	r3, #11
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ce:	4619      	mov	r1, r3
 80076d0:	483a      	ldr	r0, [pc, #232]	; (80077bc <MX_GPIO_Init+0x22c>)
 80076d2:	f002 f8cf 	bl	8009874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80076d6:	2386      	movs	r3, #134	; 0x86
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076da:	2302      	movs	r3, #2
 80076dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076e2:	2303      	movs	r3, #3
 80076e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076e6:	230b      	movs	r3, #11
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ee:	4619      	mov	r1, r3
 80076f0:	4833      	ldr	r0, [pc, #204]	; (80077c0 <MX_GPIO_Init+0x230>)
 80076f2:	f002 f8bf 	bl	8009874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80076f6:	f244 0381 	movw	r3, #16513	; 0x4081
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076fc:	2301      	movs	r3, #1
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007700:	2300      	movs	r3, #0
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007704:	2300      	movs	r3, #0
 8007706:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800770c:	4619      	mov	r1, r3
 800770e:	4828      	ldr	r0, [pc, #160]	; (80077b0 <MX_GPIO_Init+0x220>)
 8007710:	f002 f8b0 	bl	8009874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800771a:	2302      	movs	r3, #2
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800771e:	2300      	movs	r3, #0
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007722:	2303      	movs	r3, #3
 8007724:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007726:	230b      	movs	r3, #11
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800772a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800772e:	4619      	mov	r1, r3
 8007730:	481f      	ldr	r0, [pc, #124]	; (80077b0 <MX_GPIO_Init+0x220>)
 8007732:	f002 f89f 	bl	8009874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8007736:	2340      	movs	r3, #64	; 0x40
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800773a:	2301      	movs	r3, #1
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773e:	2300      	movs	r3, #0
 8007740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007742:	2300      	movs	r3, #0
 8007744:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800774a:	4619      	mov	r1, r3
 800774c:	4819      	ldr	r0, [pc, #100]	; (80077b4 <MX_GPIO_Init+0x224>)
 800774e:	f002 f891 	bl	8009874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8007752:	2380      	movs	r3, #128	; 0x80
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007756:	2300      	movs	r3, #0
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800775a:	2300      	movs	r3, #0
 800775c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800775e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007762:	4619      	mov	r1, r3
 8007764:	4813      	ldr	r0, [pc, #76]	; (80077b4 <MX_GPIO_Init+0x224>)
 8007766:	f002 f885 	bl	8009874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800776a:	2380      	movs	r3, #128	; 0x80
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <MX_GPIO_Init+0x228>)
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007772:	2300      	movs	r3, #0
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800777a:	4619      	mov	r1, r3
 800777c:	4811      	ldr	r0, [pc, #68]	; (80077c4 <MX_GPIO_Init+0x234>)
 800777e:	f002 f879 	bl	8009874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007782:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007788:	2302      	movs	r3, #2
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778c:	2300      	movs	r3, #0
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007790:	2303      	movs	r3, #3
 8007792:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007794:	230b      	movs	r3, #11
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800779c:	4619      	mov	r1, r3
 800779e:	4805      	ldr	r0, [pc, #20]	; (80077b4 <MX_GPIO_Init+0x224>)
 80077a0:	f002 f868 	bl	8009874 <HAL_GPIO_Init>

}
 80077a4:	bf00      	nop
 80077a6:	3738      	adds	r7, #56	; 0x38
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	40023800 	.word	0x40023800
 80077b0:	40020400 	.word	0x40020400
 80077b4:	40021800 	.word	0x40021800
 80077b8:	10110000 	.word	0x10110000
 80077bc:	40020800 	.word	0x40020800
 80077c0:	40020000 	.word	0x40020000
 80077c4:	40020c00 	.word	0x40020c00

080077c8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80077cc:	4b1b      	ldr	r3, [pc, #108]	; (800783c <MX_I2C1_Init+0x74>)
 80077ce:	4a1c      	ldr	r2, [pc, #112]	; (8007840 <MX_I2C1_Init+0x78>)
 80077d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80077d2:	4b1a      	ldr	r3, [pc, #104]	; (800783c <MX_I2C1_Init+0x74>)
 80077d4:	4a1b      	ldr	r2, [pc, #108]	; (8007844 <MX_I2C1_Init+0x7c>)
 80077d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80077d8:	4b18      	ldr	r3, [pc, #96]	; (800783c <MX_I2C1_Init+0x74>)
 80077da:	2200      	movs	r2, #0
 80077dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80077de:	4b17      	ldr	r3, [pc, #92]	; (800783c <MX_I2C1_Init+0x74>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077e4:	4b15      	ldr	r3, [pc, #84]	; (800783c <MX_I2C1_Init+0x74>)
 80077e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077ec:	4b13      	ldr	r3, [pc, #76]	; (800783c <MX_I2C1_Init+0x74>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80077f2:	4b12      	ldr	r3, [pc, #72]	; (800783c <MX_I2C1_Init+0x74>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077f8:	4b10      	ldr	r3, [pc, #64]	; (800783c <MX_I2C1_Init+0x74>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077fe:	4b0f      	ldr	r3, [pc, #60]	; (800783c <MX_I2C1_Init+0x74>)
 8007800:	2200      	movs	r2, #0
 8007802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007804:	480d      	ldr	r0, [pc, #52]	; (800783c <MX_I2C1_Init+0x74>)
 8007806:	f002 fa11 	bl	8009c2c <HAL_I2C_Init>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007810:	f000 fa28 	bl	8007c64 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007814:	2100      	movs	r1, #0
 8007816:	4809      	ldr	r0, [pc, #36]	; (800783c <MX_I2C1_Init+0x74>)
 8007818:	f005 f8d9 	bl	800c9ce <HAL_I2CEx_ConfigAnalogFilter>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8007822:	f000 fa1f 	bl	8007c64 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007826:	2100      	movs	r1, #0
 8007828:	4804      	ldr	r0, [pc, #16]	; (800783c <MX_I2C1_Init+0x74>)
 800782a:	f005 f90c 	bl	800ca46 <HAL_I2CEx_ConfigDigitalFilter>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8007834:	f000 fa16 	bl	8007c64 <Error_Handler>
  }

}
 8007838:	bf00      	nop
 800783a:	bd80      	pop	{r7, pc}
 800783c:	200016d0 	.word	0x200016d0
 8007840:	40005400 	.word	0x40005400
 8007844:	00061a80 	.word	0x00061a80

08007848 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800784c:	4b1b      	ldr	r3, [pc, #108]	; (80078bc <MX_I2C2_Init+0x74>)
 800784e:	4a1c      	ldr	r2, [pc, #112]	; (80078c0 <MX_I2C2_Init+0x78>)
 8007850:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007852:	4b1a      	ldr	r3, [pc, #104]	; (80078bc <MX_I2C2_Init+0x74>)
 8007854:	4a1b      	ldr	r2, [pc, #108]	; (80078c4 <MX_I2C2_Init+0x7c>)
 8007856:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007858:	4b18      	ldr	r3, [pc, #96]	; (80078bc <MX_I2C2_Init+0x74>)
 800785a:	2200      	movs	r2, #0
 800785c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800785e:	4b17      	ldr	r3, [pc, #92]	; (80078bc <MX_I2C2_Init+0x74>)
 8007860:	2200      	movs	r2, #0
 8007862:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007864:	4b15      	ldr	r3, [pc, #84]	; (80078bc <MX_I2C2_Init+0x74>)
 8007866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800786a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800786c:	4b13      	ldr	r3, [pc, #76]	; (80078bc <MX_I2C2_Init+0x74>)
 800786e:	2200      	movs	r2, #0
 8007870:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007872:	4b12      	ldr	r3, [pc, #72]	; (80078bc <MX_I2C2_Init+0x74>)
 8007874:	2200      	movs	r2, #0
 8007876:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007878:	4b10      	ldr	r3, [pc, #64]	; (80078bc <MX_I2C2_Init+0x74>)
 800787a:	2200      	movs	r2, #0
 800787c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800787e:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <MX_I2C2_Init+0x74>)
 8007880:	2200      	movs	r2, #0
 8007882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007884:	480d      	ldr	r0, [pc, #52]	; (80078bc <MX_I2C2_Init+0x74>)
 8007886:	f002 f9d1 	bl	8009c2c <HAL_I2C_Init>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8007890:	f000 f9e8 	bl	8007c64 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007894:	2100      	movs	r1, #0
 8007896:	4809      	ldr	r0, [pc, #36]	; (80078bc <MX_I2C2_Init+0x74>)
 8007898:	f005 f899 	bl	800c9ce <HAL_I2CEx_ConfigAnalogFilter>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80078a2:	f000 f9df 	bl	8007c64 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80078a6:	2100      	movs	r1, #0
 80078a8:	4804      	ldr	r0, [pc, #16]	; (80078bc <MX_I2C2_Init+0x74>)
 80078aa:	f005 f8cc 	bl	800ca46 <HAL_I2CEx_ConfigDigitalFilter>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80078b4:	f000 f9d6 	bl	8007c64 <Error_Handler>
  }

}
 80078b8:	bf00      	nop
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20001724 	.word	0x20001724
 80078c0:	40005800 	.word	0x40005800
 80078c4:	00061a80 	.word	0x00061a80

080078c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	; 0x30
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d0:	f107 031c 	add.w	r3, r7, #28
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	609a      	str	r2, [r3, #8]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a49      	ldr	r2, [pc, #292]	; (8007a0c <HAL_I2C_MspInit+0x144>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d15b      	bne.n	80079a2 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	61bb      	str	r3, [r7, #24]
 80078ee:	4b48      	ldr	r3, [pc, #288]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	4a47      	ldr	r2, [pc, #284]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 80078f4:	f043 0302 	orr.w	r3, r3, #2
 80078f8:	6313      	str	r3, [r2, #48]	; 0x30
 80078fa:	4b45      	ldr	r3, [pc, #276]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	61bb      	str	r3, [r7, #24]
 8007904:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8007906:	f44f 7310 	mov.w	r3, #576	; 0x240
 800790a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800790c:	2312      	movs	r3, #18
 800790e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007910:	2301      	movs	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007914:	2303      	movs	r3, #3
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007918:	2304      	movs	r3, #4
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800791c:	f107 031c 	add.w	r3, r7, #28
 8007920:	4619      	mov	r1, r3
 8007922:	483c      	ldr	r0, [pc, #240]	; (8007a14 <HAL_I2C_MspInit+0x14c>)
 8007924:	f001 ffa6 	bl	8009874 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	4b38      	ldr	r3, [pc, #224]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	4a37      	ldr	r2, [pc, #220]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 8007932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007936:	6413      	str	r3, [r2, #64]	; 0x40
 8007938:	4b35      	ldr	r3, [pc, #212]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8007944:	4b34      	ldr	r3, [pc, #208]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 8007946:	4a35      	ldr	r2, [pc, #212]	; (8007a1c <HAL_I2C_MspInit+0x154>)
 8007948:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800794a:	4b33      	ldr	r3, [pc, #204]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 800794c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007950:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007952:	4b31      	ldr	r3, [pc, #196]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 8007954:	2200      	movs	r2, #0
 8007956:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007958:	4b2f      	ldr	r3, [pc, #188]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 800795a:	2200      	movs	r2, #0
 800795c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800795e:	4b2e      	ldr	r3, [pc, #184]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 8007960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007964:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007966:	4b2c      	ldr	r3, [pc, #176]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 8007968:	2200      	movs	r2, #0
 800796a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800796c:	4b2a      	ldr	r3, [pc, #168]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 800796e:	2200      	movs	r2, #0
 8007970:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007972:	4b29      	ldr	r3, [pc, #164]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 8007974:	2200      	movs	r2, #0
 8007976:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007978:	4b27      	ldr	r3, [pc, #156]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 800797a:	2200      	movs	r2, #0
 800797c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800797e:	4b26      	ldr	r3, [pc, #152]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 8007980:	2200      	movs	r2, #0
 8007982:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007984:	4824      	ldr	r0, [pc, #144]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 8007986:	f001 fbcb 	bl	8009120 <HAL_DMA_Init>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8007990:	f000 f968 	bl	8007c64 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
 800799a:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <HAL_I2C_MspInit+0x150>)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80079a0:	e030      	b.n	8007a04 <HAL_I2C_MspInit+0x13c>
  else if(i2cHandle->Instance==I2C2)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <HAL_I2C_MspInit+0x158>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d12b      	bne.n	8007a04 <HAL_I2C_MspInit+0x13c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80079ac:	2300      	movs	r3, #0
 80079ae:	613b      	str	r3, [r7, #16]
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	4a16      	ldr	r2, [pc, #88]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 80079b6:	f043 0320 	orr.w	r3, r3, #32
 80079ba:	6313      	str	r3, [r2, #48]	; 0x30
 80079bc:	4b14      	ldr	r3, [pc, #80]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	613b      	str	r3, [r7, #16]
 80079c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80079c8:	2303      	movs	r3, #3
 80079ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80079cc:	2312      	movs	r3, #18
 80079ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80079d0:	2301      	movs	r3, #1
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079d4:	2303      	movs	r3, #3
 80079d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80079d8:	2304      	movs	r3, #4
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80079dc:	f107 031c 	add.w	r3, r7, #28
 80079e0:	4619      	mov	r1, r3
 80079e2:	4810      	ldr	r0, [pc, #64]	; (8007a24 <HAL_I2C_MspInit+0x15c>)
 80079e4:	f001 ff46 	bl	8009874 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	4b08      	ldr	r3, [pc, #32]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	4a07      	ldr	r2, [pc, #28]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 80079f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079f6:	6413      	str	r3, [r2, #64]	; 0x40
 80079f8:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <HAL_I2C_MspInit+0x148>)
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	68fb      	ldr	r3, [r7, #12]
}
 8007a04:	bf00      	nop
 8007a06:	3730      	adds	r7, #48	; 0x30
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40005400 	.word	0x40005400
 8007a10:	40023800 	.word	0x40023800
 8007a14:	40020400 	.word	0x40020400
 8007a18:	20001778 	.word	0x20001778
 8007a1c:	40026088 	.word	0x40026088
 8007a20:	40005800 	.word	0x40005800
 8007a24:	40021400 	.word	0x40021400

08007a28 <msOverFlow>:

static __inline void msOverFlow(){
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <msOverFlow+0x18>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3301      	adds	r3, #1
 8007a32:	4a03      	ldr	r2, [pc, #12]	; (8007a40 <msOverFlow+0x18>)
 8007a34:	6013      	str	r3, [r2, #0]
}
 8007a36:	bf00      	nop
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	200009bc 	.word	0x200009bc

08007a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a48:	f001 fa24 	bl	8008e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a4c:	f000 f82c 	bl	8007aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a50:	f7ff fd9e 	bl	8007590 <MX_GPIO_Init>
  MX_DMA_Init();
 8007a54:	f7ff fd5a 	bl	800750c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8007a58:	f000 ffbe 	bl	80089d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8007a5c:	f001 f968 	bl	8008d30 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8007a60:	f7ff feb2 	bl	80077c8 <MX_I2C1_Init>
  MX_TIM11_Init();
 8007a64:	f000 fde2 	bl	800862c <MX_TIM11_Init>
  MX_TIM3_Init();
 8007a68:	f000 fc7a 	bl	8008360 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007a6c:	f000 fcfa 	bl	8008464 <MX_TIM4_Init>
  MX_UART7_Init();
 8007a70:	f000 ff30 	bl	80088d4 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8007a74:	f000 ff86 	bl	8008984 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8007a78:	f7ff fee6 	bl	8007848 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007a7c:	f000 fc24 	bl	80082c8 <MX_TIM2_Init>
  MX_TIM10_Init();
 8007a80:	f000 fd88 	bl	8008594 <MX_TIM10_Init>
  MX_UART8_Init();
 8007a84:	f000 ff54 	bl	8008930 <MX_UART8_Init>
  MX_SDIO_SD_Init();
 8007a88:	f000 f8f4 	bl	8007c74 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8007a8c:	f009 feb4 	bl	80117f8 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8007a90:	f000 f874 	bl	8007b7c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  cppMain();
 8007a94:	f7fe fef0 	bl	8006878 <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8007a98:	f00a f982 	bl	8011da0 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8007a9c:	f7ff fd5e 	bl	800755c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8007aa0:	f00a f9d4 	bl	8011e4c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007aa4:	e7fe      	b.n	8007aa4 <main+0x60>
	...

08007aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b094      	sub	sp, #80	; 0x50
 8007aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007aae:	f107 0320 	add.w	r3, r7, #32
 8007ab2:	2230      	movs	r2, #48	; 0x30
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f00e f901 	bl	8015cbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007abc:	f107 030c 	add.w	r3, r7, #12
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	605a      	str	r2, [r3, #4]
 8007ac6:	609a      	str	r2, [r3, #8]
 8007ac8:	60da      	str	r2, [r3, #12]
 8007aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007acc:	2300      	movs	r3, #0
 8007ace:	60bb      	str	r3, [r7, #8]
 8007ad0:	4b28      	ldr	r3, [pc, #160]	; (8007b74 <SystemClock_Config+0xcc>)
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	4a27      	ldr	r2, [pc, #156]	; (8007b74 <SystemClock_Config+0xcc>)
 8007ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ada:	6413      	str	r3, [r2, #64]	; 0x40
 8007adc:	4b25      	ldr	r3, [pc, #148]	; (8007b74 <SystemClock_Config+0xcc>)
 8007ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae4:	60bb      	str	r3, [r7, #8]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	607b      	str	r3, [r7, #4]
 8007aec:	4b22      	ldr	r3, [pc, #136]	; (8007b78 <SystemClock_Config+0xd0>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a21      	ldr	r2, [pc, #132]	; (8007b78 <SystemClock_Config+0xd0>)
 8007af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	4b1f      	ldr	r3, [pc, #124]	; (8007b78 <SystemClock_Config+0xd0>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007b04:	2301      	movs	r3, #1
 8007b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007b18:	2308      	movs	r3, #8
 8007b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007b1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007b20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007b22:	2302      	movs	r3, #2
 8007b24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007b26:	2307      	movs	r3, #7
 8007b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b2a:	f107 0320 	add.w	r3, r7, #32
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f005 f8e6 	bl	800cd00 <HAL_RCC_OscConfig>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007b3a:	f000 f893 	bl	8007c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b3e:	230f      	movs	r3, #15
 8007b40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b42:	2302      	movs	r3, #2
 8007b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b46:	2300      	movs	r3, #0
 8007b48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007b4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007b4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007b56:	f107 030c 	add.w	r3, r7, #12
 8007b5a:	2105      	movs	r1, #5
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f005 fb3f 	bl	800d1e0 <HAL_RCC_ClockConfig>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8007b68:	f000 f87c 	bl	8007c64 <Error_Handler>
  }
}
 8007b6c:	bf00      	nop
 8007b6e:	3750      	adds	r7, #80	; 0x50
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	40023800 	.word	0x40023800
 8007b78:	40007000 	.word	0x40007000

08007b7c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8007b80:	2200      	movs	r2, #0
 8007b82:	2105      	movs	r1, #5
 8007b84:	201f      	movs	r0, #31
 8007b86:	f001 faa1 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007b8a:	201f      	movs	r0, #31
 8007b8c:	f001 faba 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8007b90:	2200      	movs	r2, #0
 8007b92:	2105      	movs	r1, #5
 8007b94:	2020      	movs	r0, #32
 8007b96:	f001 fa99 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007b9a:	2020      	movs	r0, #32
 8007b9c:	f001 fab2 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2105      	movs	r1, #5
 8007ba4:	2052      	movs	r0, #82	; 0x52
 8007ba6:	f001 fa91 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 8007baa:	2052      	movs	r0, #82	; 0x52
 8007bac:	f001 faaa 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2105      	movs	r1, #5
 8007bb4:	2021      	movs	r0, #33	; 0x21
 8007bb6:	f001 fa89 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007bba:	2021      	movs	r0, #33	; 0x21
 8007bbc:	f001 faa2 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* I2C2_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2105      	movs	r1, #5
 8007bc4:	2022      	movs	r0, #34	; 0x22
 8007bc6:	f001 fa81 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8007bca:	2022      	movs	r0, #34	; 0x22
 8007bcc:	f001 fa9a 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* SDIO_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2105      	movs	r1, #5
 8007bd4:	2031      	movs	r0, #49	; 0x31
 8007bd6:	f001 fa79 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007bda:	2031      	movs	r0, #49	; 0x31
 8007bdc:	f001 fa92 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8007be0:	2200      	movs	r2, #0
 8007be2:	2105      	movs	r1, #5
 8007be4:	200e      	movs	r0, #14
 8007be6:	f001 fa71 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8007bea:	200e      	movs	r0, #14
 8007bec:	f001 fa8a 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2105      	movs	r1, #5
 8007bf4:	2011      	movs	r0, #17
 8007bf6:	f001 fa69 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8007bfa:	2011      	movs	r0, #17
 8007bfc:	f001 fa82 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8007c00:	2200      	movs	r2, #0
 8007c02:	2105      	movs	r1, #5
 8007c04:	2010      	movs	r0, #16
 8007c06:	f001 fa61 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007c0a:	2010      	movs	r0, #16
 8007c0c:	f001 fa7a 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8007c10:	2200      	movs	r2, #0
 8007c12:	2105      	movs	r1, #5
 8007c14:	203b      	movs	r0, #59	; 0x3b
 8007c16:	f001 fa59 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007c1a:	203b      	movs	r0, #59	; 0x3b
 8007c1c:	f001 fa72 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8007c20:	2200      	movs	r2, #0
 8007c22:	2105      	movs	r1, #5
 8007c24:	2045      	movs	r0, #69	; 0x45
 8007c26:	f001 fa51 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8007c2a:	2045      	movs	r0, #69	; 0x45
 8007c2c:	f001 fa6a 	bl	8009104 <HAL_NVIC_EnableIRQ>
}
 8007c30:	bf00      	nop
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	/* microseond timer */
  if(htim->Instance == TIM2){
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c44:	d101      	bne.n	8007c4a <HAL_TIM_PeriodElapsedCallback+0x16>
	  msOverFlow();
 8007c46:	f7ff feef 	bl	8007a28 <msOverFlow>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d101      	bne.n	8007c58 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8007c54:	f001 f940 	bl	8008ed8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	40001000 	.word	0x40001000

08007c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007c68:	bf00      	nop
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
	...

08007c74 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8007c78:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <MX_SDIO_SD_Init+0x38>)
 8007c7a:	4a0d      	ldr	r2, [pc, #52]	; (8007cb0 <MX_SDIO_SD_Init+0x3c>)
 8007c7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8007c7e:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <MX_SDIO_SD_Init+0x38>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007c84:	4b09      	ldr	r3, [pc, #36]	; (8007cac <MX_SDIO_SD_Init+0x38>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007c8a:	4b08      	ldr	r3, [pc, #32]	; (8007cac <MX_SDIO_SD_Init+0x38>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007c90:	4b06      	ldr	r3, [pc, #24]	; (8007cac <MX_SDIO_SD_Init+0x38>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <MX_SDIO_SD_Init+0x38>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8007c9c:	4b03      	ldr	r3, [pc, #12]	; (8007cac <MX_SDIO_SD_Init+0x38>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	619a      	str	r2, [r3, #24]

}
 8007ca2:	bf00      	nop
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	20001898 	.word	0x20001898
 8007cb0:	40012c00 	.word	0x40012c00

08007cb4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	; 0x28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cbc:	f107 0314 	add.w	r3, r7, #20
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	609a      	str	r2, [r3, #8]
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a6c      	ldr	r2, [pc, #432]	; (8007e84 <HAL_SD_MspInit+0x1d0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	f040 80d2 	bne.w	8007e7c <HAL_SD_MspInit+0x1c8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007cd8:	2300      	movs	r3, #0
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	4b6a      	ldr	r3, [pc, #424]	; (8007e88 <HAL_SD_MspInit+0x1d4>)
 8007cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce0:	4a69      	ldr	r2, [pc, #420]	; (8007e88 <HAL_SD_MspInit+0x1d4>)
 8007ce2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ce6:	6453      	str	r3, [r2, #68]	; 0x44
 8007ce8:	4b67      	ldr	r3, [pc, #412]	; (8007e88 <HAL_SD_MspInit+0x1d4>)
 8007cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf0:	613b      	str	r3, [r7, #16]
 8007cf2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	4b63      	ldr	r3, [pc, #396]	; (8007e88 <HAL_SD_MspInit+0x1d4>)
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfc:	4a62      	ldr	r2, [pc, #392]	; (8007e88 <HAL_SD_MspInit+0x1d4>)
 8007cfe:	f043 0304 	orr.w	r3, r3, #4
 8007d02:	6313      	str	r3, [r2, #48]	; 0x30
 8007d04:	4b60      	ldr	r3, [pc, #384]	; (8007e88 <HAL_SD_MspInit+0x1d4>)
 8007d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d10:	2300      	movs	r3, #0
 8007d12:	60bb      	str	r3, [r7, #8]
 8007d14:	4b5c      	ldr	r3, [pc, #368]	; (8007e88 <HAL_SD_MspInit+0x1d4>)
 8007d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d18:	4a5b      	ldr	r2, [pc, #364]	; (8007e88 <HAL_SD_MspInit+0x1d4>)
 8007d1a:	f043 0308 	orr.w	r3, r3, #8
 8007d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8007d20:	4b59      	ldr	r3, [pc, #356]	; (8007e88 <HAL_SD_MspInit+0x1d4>)
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	60bb      	str	r3, [r7, #8]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8007d2c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d32:	2302      	movs	r3, #2
 8007d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d36:	2301      	movs	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007d3e:	230c      	movs	r3, #12
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d42:	f107 0314 	add.w	r3, r7, #20
 8007d46:	4619      	mov	r1, r3
 8007d48:	4850      	ldr	r0, [pc, #320]	; (8007e8c <HAL_SD_MspInit+0x1d8>)
 8007d4a:	f001 fd93 	bl	8009874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d54:	2302      	movs	r3, #2
 8007d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007d60:	230c      	movs	r3, #12
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d64:	f107 0314 	add.w	r3, r7, #20
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4848      	ldr	r0, [pc, #288]	; (8007e8c <HAL_SD_MspInit+0x1d8>)
 8007d6c:	f001 fd82 	bl	8009874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007d70:	2304      	movs	r3, #4
 8007d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d74:	2302      	movs	r3, #2
 8007d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007d80:	230c      	movs	r3, #12
 8007d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d84:	f107 0314 	add.w	r3, r7, #20
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4841      	ldr	r0, [pc, #260]	; (8007e90 <HAL_SD_MspInit+0x1dc>)
 8007d8c:	f001 fd72 	bl	8009874 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8007d90:	4b40      	ldr	r3, [pc, #256]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007d92:	4a41      	ldr	r2, [pc, #260]	; (8007e98 <HAL_SD_MspInit+0x1e4>)
 8007d94:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007d96:	4b3f      	ldr	r3, [pc, #252]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007d98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d9c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d9e:	4b3d      	ldr	r3, [pc, #244]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007da4:	4b3b      	ldr	r3, [pc, #236]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007daa:	4b3a      	ldr	r3, [pc, #232]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007db0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007db2:	4b38      	ldr	r3, [pc, #224]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007db8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007dba:	4b36      	ldr	r3, [pc, #216]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007dbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007dc0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007dc2:	4b34      	ldr	r3, [pc, #208]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007dc8:	4b32      	ldr	r3, [pc, #200]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007dce:	4b31      	ldr	r3, [pc, #196]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007dd4:	4b2f      	ldr	r3, [pc, #188]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007ddc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007de0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007de2:	4b2c      	ldr	r3, [pc, #176]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007de4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007de8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007dea:	482a      	ldr	r0, [pc, #168]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007dec:	f001 f998 	bl	8009120 <HAL_DMA_Init>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8007df6:	f7ff ff35 	bl	8007c64 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a25      	ldr	r2, [pc, #148]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007dfe:	641a      	str	r2, [r3, #64]	; 0x40
 8007e00:	4a24      	ldr	r2, [pc, #144]	; (8007e94 <HAL_SD_MspInit+0x1e0>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007e06:	4b25      	ldr	r3, [pc, #148]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e08:	4a25      	ldr	r2, [pc, #148]	; (8007ea0 <HAL_SD_MspInit+0x1ec>)
 8007e0a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007e0c:	4b23      	ldr	r3, [pc, #140]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e12:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e14:	4b21      	ldr	r3, [pc, #132]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e16:	2240      	movs	r2, #64	; 0x40
 8007e18:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e1a:	4b20      	ldr	r3, [pc, #128]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e20:	4b1e      	ldr	r3, [pc, #120]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e26:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007e28:	4b1c      	ldr	r3, [pc, #112]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e2e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007e30:	4b1a      	ldr	r3, [pc, #104]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e36:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007e38:	4b18      	ldr	r3, [pc, #96]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007e3e:	4b17      	ldr	r3, [pc, #92]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007e44:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e46:	2204      	movs	r2, #4
 8007e48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007e4a:	4b14      	ldr	r3, [pc, #80]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e4c:	2203      	movs	r2, #3
 8007e4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007e50:	4b12      	ldr	r3, [pc, #72]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007e56:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007e58:	4b10      	ldr	r3, [pc, #64]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8007e60:	480e      	ldr	r0, [pc, #56]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e62:	f001 f95d 	bl	8009120 <HAL_DMA_Init>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8007e6c:	f7ff fefa 	bl	8007c64 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e74:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e76:	4a09      	ldr	r2, [pc, #36]	; (8007e9c <HAL_SD_MspInit+0x1e8>)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8007e7c:	bf00      	nop
 8007e7e:	3728      	adds	r7, #40	; 0x28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40012c00 	.word	0x40012c00
 8007e88:	40023800 	.word	0x40023800
 8007e8c:	40020800 	.word	0x40020800
 8007e90:	40020c00 	.word	0x40020c00
 8007e94:	200017d8 	.word	0x200017d8
 8007e98:	40026458 	.word	0x40026458
 8007e9c:	20001838 	.word	0x20001838
 8007ea0:	400264a0 	.word	0x400264a0

08007ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
 8007eae:	4b12      	ldr	r3, [pc, #72]	; (8007ef8 <HAL_MspInit+0x54>)
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb2:	4a11      	ldr	r2, [pc, #68]	; (8007ef8 <HAL_MspInit+0x54>)
 8007eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8007eba:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <HAL_MspInit+0x54>)
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec2:	607b      	str	r3, [r7, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	603b      	str	r3, [r7, #0]
 8007eca:	4b0b      	ldr	r3, [pc, #44]	; (8007ef8 <HAL_MspInit+0x54>)
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	4a0a      	ldr	r2, [pc, #40]	; (8007ef8 <HAL_MspInit+0x54>)
 8007ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ed6:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <HAL_MspInit+0x54>)
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	210f      	movs	r1, #15
 8007ee6:	f06f 0001 	mvn.w	r0, #1
 8007eea:	f001 f8ef 	bl	80090cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	40023800 	.word	0x40023800

08007efc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08c      	sub	sp, #48	; 0x30
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	2036      	movs	r0, #54	; 0x36
 8007f12:	f001 f8db 	bl	80090cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8007f16:	2036      	movs	r0, #54	; 0x36
 8007f18:	f001 f8f4 	bl	8009104 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	4b1f      	ldr	r3, [pc, #124]	; (8007fa0 <HAL_InitTick+0xa4>)
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <HAL_InitTick+0xa4>)
 8007f26:	f043 0310 	orr.w	r3, r3, #16
 8007f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8007f2c:	4b1c      	ldr	r3, [pc, #112]	; (8007fa0 <HAL_InitTick+0xa4>)
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007f38:	f107 0210 	add.w	r2, r7, #16
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	4611      	mov	r1, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f005 fb3e 	bl	800d5c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007f48:	f005 fb14 	bl	800d574 <HAL_RCC_GetPCLK1Freq>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	4a13      	ldr	r2, [pc, #76]	; (8007fa4 <HAL_InitTick+0xa8>)
 8007f56:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5a:	0c9b      	lsrs	r3, r3, #18
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007f60:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <HAL_InitTick+0xac>)
 8007f62:	4a12      	ldr	r2, [pc, #72]	; (8007fac <HAL_InitTick+0xb0>)
 8007f64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8007f66:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <HAL_InitTick+0xac>)
 8007f68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007f6c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007f6e:	4a0e      	ldr	r2, [pc, #56]	; (8007fa8 <HAL_InitTick+0xac>)
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007f74:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <HAL_InitTick+0xac>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <HAL_InitTick+0xac>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007f80:	4809      	ldr	r0, [pc, #36]	; (8007fa8 <HAL_InitTick+0xac>)
 8007f82:	f006 fe4f 	bl	800ec24 <HAL_TIM_Base_Init>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007f8c:	4806      	ldr	r0, [pc, #24]	; (8007fa8 <HAL_InitTick+0xac>)
 8007f8e:	f006 fe74 	bl	800ec7a <HAL_TIM_Base_Start_IT>
 8007f92:	4603      	mov	r3, r0
 8007f94:	e000      	b.n	8007f98 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3730      	adds	r7, #48	; 0x30
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	431bde83 	.word	0x431bde83
 8007fa8:	2000191c 	.word	0x2000191c
 8007fac:	40001000 	.word	0x40001000

08007fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007fb4:	bf00      	nop
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007fc2:	e7fe      	b.n	8007fc2 <HardFault_Handler+0x4>

08007fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007fc8:	e7fe      	b.n	8007fc8 <MemManage_Handler+0x4>

08007fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007fce:	e7fe      	b.n	8007fce <BusFault_Handler+0x4>

08007fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007fd4:	e7fe      	b.n	8007fd4 <UsageFault_Handler+0x4>

08007fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007fda:	bf00      	nop
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8007fe8:	4802      	ldr	r0, [pc, #8]	; (8007ff4 <DMA1_Stream3_IRQHandler+0x10>)
 8007fea:	f001 f9c1 	bl	8009370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8007fee:	bf00      	nop
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20001b1c 	.word	0x20001b1c

08007ff8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007ffc:	4802      	ldr	r0, [pc, #8]	; (8008008 <DMA1_Stream5_IRQHandler+0x10>)
 8007ffe:	f001 f9b7 	bl	8009370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008002:	bf00      	nop
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20001778 	.word	0x20001778

0800800c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8008010:	4802      	ldr	r0, [pc, #8]	; (800801c <DMA1_Stream6_IRQHandler+0x10>)
 8008012:	f001 f9ad 	bl	8009370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008016:	bf00      	nop
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20001b7c 	.word	0x20001b7c

08008020 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8008024:	4802      	ldr	r0, [pc, #8]	; (8008030 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8008026:	f006 fe81 	bl	800ed2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800802a:	bf00      	nop
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20001a1c 	.word	0x20001a1c

08008034 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008038:	4802      	ldr	r0, [pc, #8]	; (8008044 <TIM2_IRQHandler+0x10>)
 800803a:	f006 fe77 	bl	800ed2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800803e:	bf00      	nop
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001a5c 	.word	0x20001a5c

08008048 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800804c:	4802      	ldr	r0, [pc, #8]	; (8008058 <I2C1_EV_IRQHandler+0x10>)
 800804e:	f002 fc4f 	bl	800a8f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8008052:	bf00      	nop
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	200016d0 	.word	0x200016d0

0800805c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8008060:	4802      	ldr	r0, [pc, #8]	; (800806c <I2C1_ER_IRQHandler+0x10>)
 8008062:	f002 fdab 	bl	800abbc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008066:	bf00      	nop
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	200016d0 	.word	0x200016d0

08008070 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8008074:	4802      	ldr	r0, [pc, #8]	; (8008080 <I2C2_EV_IRQHandler+0x10>)
 8008076:	f002 fc3b 	bl	800a8f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800807a:	bf00      	nop
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20001724 	.word	0x20001724

08008084 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8008088:	4802      	ldr	r0, [pc, #8]	; (8008094 <I2C2_ER_IRQHandler+0x10>)
 800808a:	f002 fd97 	bl	800abbc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800808e:	bf00      	nop
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20001724 	.word	0x20001724

08008098 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800809c:	4802      	ldr	r0, [pc, #8]	; (80080a8 <USART3_IRQHandler+0x10>)
 800809e:	f007 fd3b 	bl	800fb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80080a2:	bf00      	nop
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20001adc 	.word	0x20001adc

080080ac <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80080b0:	4802      	ldr	r0, [pc, #8]	; (80080bc <SDIO_IRQHandler+0x10>)
 80080b2:	f005 fd23 	bl	800dafc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80080b6:	bf00      	nop
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20001898 	.word	0x20001898

080080c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80080c4:	4802      	ldr	r0, [pc, #8]	; (80080d0 <TIM6_DAC_IRQHandler+0x10>)
 80080c6:	f006 fe31 	bl	800ed2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80080ca:	bf00      	nop
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	2000191c 	.word	0x2000191c

080080d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80080d8:	4802      	ldr	r0, [pc, #8]	; (80080e4 <DMA2_Stream3_IRQHandler+0x10>)
 80080da:	f001 f949 	bl	8009370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80080de:	bf00      	nop
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200017d8 	.word	0x200017d8

080080e8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80080ec:	4802      	ldr	r0, [pc, #8]	; (80080f8 <DMA2_Stream6_IRQHandler+0x10>)
 80080ee:	f001 f93f 	bl	8009370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80080f2:	bf00      	nop
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20001838 	.word	0x20001838

080080fc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8008100:	4802      	ldr	r0, [pc, #8]	; (800810c <UART7_IRQHandler+0x10>)
 8008102:	f007 fd09 	bl	800fb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8008106:	bf00      	nop
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20001a9c 	.word	0x20001a9c

08008110 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8008114:	4802      	ldr	r0, [pc, #8]	; (8008120 <UART8_IRQHandler+0x10>)
 8008116:	f007 fcff 	bl	800fb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800811a:	bf00      	nop
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20001bdc 	.word	0x20001bdc

08008124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008124:	b480      	push	{r7}
 8008126:	af00      	add	r7, sp, #0
	return 1;
 8008128:	2301      	movs	r3, #1
}
 800812a:	4618      	mov	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <_kill>:

int _kill(int pid, int sig)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800813e:	f00d fd67 	bl	8015c10 <__errno>
 8008142:	4602      	mov	r2, r0
 8008144:	2316      	movs	r3, #22
 8008146:	6013      	str	r3, [r2, #0]
	return -1;
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <_exit>:

void _exit (int status)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800815c:	f04f 31ff 	mov.w	r1, #4294967295
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff ffe7 	bl	8008134 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008166:	e7fe      	b.n	8008166 <_exit+0x12>

08008168 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	e00a      	b.n	8008190 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800817a:	f3af 8000 	nop.w
 800817e:	4601      	mov	r1, r0
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	60ba      	str	r2, [r7, #8]
 8008186:	b2ca      	uxtb	r2, r1
 8008188:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	3301      	adds	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	429a      	cmp	r2, r3
 8008196:	dbf0      	blt.n	800817a <_read+0x12>
	}

return len;
 8008198:	687b      	ldr	r3, [r7, #4]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b086      	sub	sp, #24
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081ae:	2300      	movs	r3, #0
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e009      	b.n	80081c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	60ba      	str	r2, [r7, #8]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	3301      	adds	r3, #1
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	dbf1      	blt.n	80081b4 <_write+0x12>
	}
	return len;
 80081d0:	687b      	ldr	r3, [r7, #4]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <_close>:

int _close(int file)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
	return -1;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008202:	605a      	str	r2, [r3, #4]
	return 0;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <_isatty>:

int _isatty(int file)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
	return 1;
 800821a:	2301      	movs	r3, #1
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
	return 0;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
	...

08008244 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800824c:	4b11      	ldr	r3, [pc, #68]	; (8008294 <_sbrk+0x50>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <_sbrk+0x16>
		heap_end = &end;
 8008254:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <_sbrk+0x50>)
 8008256:	4a10      	ldr	r2, [pc, #64]	; (8008298 <_sbrk+0x54>)
 8008258:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800825a:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <_sbrk+0x50>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <_sbrk+0x50>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4413      	add	r3, r2
 8008268:	466a      	mov	r2, sp
 800826a:	4293      	cmp	r3, r2
 800826c:	d907      	bls.n	800827e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800826e:	f00d fccf 	bl	8015c10 <__errno>
 8008272:	4602      	mov	r2, r0
 8008274:	230c      	movs	r3, #12
 8008276:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008278:	f04f 33ff 	mov.w	r3, #4294967295
 800827c:	e006      	b.n	800828c <_sbrk+0x48>
	}

	heap_end += incr;
 800827e:	4b05      	ldr	r3, [pc, #20]	; (8008294 <_sbrk+0x50>)
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4413      	add	r3, r2
 8008286:	4a03      	ldr	r2, [pc, #12]	; (8008294 <_sbrk+0x50>)
 8008288:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	200009c0 	.word	0x200009c0
 8008298:	20002518 	.word	0x20002518

0800829c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80082a0:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <SystemInit+0x28>)
 80082a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a6:	4a07      	ldr	r2, [pc, #28]	; (80082c4 <SystemInit+0x28>)
 80082a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <SystemInit+0x28>)
 80082b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082b6:	609a      	str	r2, [r3, #8]
#endif
}
 80082b8:	bf00      	nop
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	e000ed00 	.word	0xe000ed00

080082c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082ce:	f107 0308 	add.w	r3, r7, #8
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	605a      	str	r2, [r3, #4]
 80082d8:	609a      	str	r2, [r3, #8]
 80082da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082dc:	463b      	mov	r3, r7
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80082e4:	4b1d      	ldr	r3, [pc, #116]	; (800835c <MX_TIM2_Init+0x94>)
 80082e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80082ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80082ec:	4b1b      	ldr	r3, [pc, #108]	; (800835c <MX_TIM2_Init+0x94>)
 80082ee:	2253      	movs	r2, #83	; 0x53
 80082f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082f2:	4b1a      	ldr	r3, [pc, #104]	; (800835c <MX_TIM2_Init+0x94>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 80082f8:	4b18      	ldr	r3, [pc, #96]	; (800835c <MX_TIM2_Init+0x94>)
 80082fa:	f04f 32ff 	mov.w	r2, #4294967295
 80082fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008300:	4b16      	ldr	r3, [pc, #88]	; (800835c <MX_TIM2_Init+0x94>)
 8008302:	2200      	movs	r2, #0
 8008304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008306:	4b15      	ldr	r3, [pc, #84]	; (800835c <MX_TIM2_Init+0x94>)
 8008308:	2200      	movs	r2, #0
 800830a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800830c:	4813      	ldr	r0, [pc, #76]	; (800835c <MX_TIM2_Init+0x94>)
 800830e:	f006 fc89 	bl	800ec24 <HAL_TIM_Base_Init>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008318:	f7ff fca4 	bl	8007c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800831c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008322:	f107 0308 	add.w	r3, r7, #8
 8008326:	4619      	mov	r1, r3
 8008328:	480c      	ldr	r0, [pc, #48]	; (800835c <MX_TIM2_Init+0x94>)
 800832a:	f006 fecd 	bl	800f0c8 <HAL_TIM_ConfigClockSource>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008334:	f7ff fc96 	bl	8007c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008338:	2300      	movs	r3, #0
 800833a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800833c:	2300      	movs	r3, #0
 800833e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008340:	463b      	mov	r3, r7
 8008342:	4619      	mov	r1, r3
 8008344:	4805      	ldr	r0, [pc, #20]	; (800835c <MX_TIM2_Init+0x94>)
 8008346:	f007 fa89 	bl	800f85c <HAL_TIMEx_MasterConfigSynchronization>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008350:	f7ff fc88 	bl	8007c64 <Error_Handler>
  }

}
 8008354:	bf00      	nop
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	20001a5c 	.word	0x20001a5c

08008360 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08e      	sub	sp, #56	; 0x38
 8008364:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	605a      	str	r2, [r3, #4]
 8008370:	609a      	str	r2, [r3, #8]
 8008372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008374:	f107 0320 	add.w	r3, r7, #32
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800837e:	1d3b      	adds	r3, r7, #4
 8008380:	2200      	movs	r2, #0
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	605a      	str	r2, [r3, #4]
 8008386:	609a      	str	r2, [r3, #8]
 8008388:	60da      	str	r2, [r3, #12]
 800838a:	611a      	str	r2, [r3, #16]
 800838c:	615a      	str	r2, [r3, #20]
 800838e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8008390:	4b32      	ldr	r3, [pc, #200]	; (800845c <MX_TIM3_Init+0xfc>)
 8008392:	4a33      	ldr	r2, [pc, #204]	; (8008460 <MX_TIM3_Init+0x100>)
 8008394:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8008396:	4b31      	ldr	r3, [pc, #196]	; (800845c <MX_TIM3_Init+0xfc>)
 8008398:	2229      	movs	r2, #41	; 0x29
 800839a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800839c:	4b2f      	ldr	r3, [pc, #188]	; (800845c <MX_TIM3_Init+0xfc>)
 800839e:	2200      	movs	r2, #0
 80083a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 80083a2:	4b2e      	ldr	r3, [pc, #184]	; (800845c <MX_TIM3_Init+0xfc>)
 80083a4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80083a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083aa:	4b2c      	ldr	r3, [pc, #176]	; (800845c <MX_TIM3_Init+0xfc>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083b0:	4b2a      	ldr	r3, [pc, #168]	; (800845c <MX_TIM3_Init+0xfc>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80083b6:	4829      	ldr	r0, [pc, #164]	; (800845c <MX_TIM3_Init+0xfc>)
 80083b8:	f006 fc34 	bl	800ec24 <HAL_TIM_Base_Init>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80083c2:	f7ff fc4f 	bl	8007c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80083cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083d0:	4619      	mov	r1, r3
 80083d2:	4822      	ldr	r0, [pc, #136]	; (800845c <MX_TIM3_Init+0xfc>)
 80083d4:	f006 fe78 	bl	800f0c8 <HAL_TIM_ConfigClockSource>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80083de:	f7ff fc41 	bl	8007c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80083e2:	481e      	ldr	r0, [pc, #120]	; (800845c <MX_TIM3_Init+0xfc>)
 80083e4:	f006 fc6d 	bl	800ecc2 <HAL_TIM_PWM_Init>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80083ee:	f7ff fc39 	bl	8007c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083f2:	2300      	movs	r3, #0
 80083f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80083fa:	f107 0320 	add.w	r3, r7, #32
 80083fe:	4619      	mov	r1, r3
 8008400:	4816      	ldr	r0, [pc, #88]	; (800845c <MX_TIM3_Init+0xfc>)
 8008402:	f007 fa2b 	bl	800f85c <HAL_TIMEx_MasterConfigSynchronization>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800840c:	f7ff fc2a 	bl	8007c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008410:	2360      	movs	r3, #96	; 0x60
 8008412:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008420:	1d3b      	adds	r3, r7, #4
 8008422:	2200      	movs	r2, #0
 8008424:	4619      	mov	r1, r3
 8008426:	480d      	ldr	r0, [pc, #52]	; (800845c <MX_TIM3_Init+0xfc>)
 8008428:	f006 fd88 	bl	800ef3c <HAL_TIM_PWM_ConfigChannel>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8008432:	f7ff fc17 	bl	8007c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008436:	1d3b      	adds	r3, r7, #4
 8008438:	2204      	movs	r2, #4
 800843a:	4619      	mov	r1, r3
 800843c:	4807      	ldr	r0, [pc, #28]	; (800845c <MX_TIM3_Init+0xfc>)
 800843e:	f006 fd7d 	bl	800ef3c <HAL_TIM_PWM_ConfigChannel>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8008448:	f7ff fc0c 	bl	8007c64 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800844c:	4803      	ldr	r0, [pc, #12]	; (800845c <MX_TIM3_Init+0xfc>)
 800844e:	f000 f997 	bl	8008780 <HAL_TIM_MspPostInit>

}
 8008452:	bf00      	nop
 8008454:	3738      	adds	r7, #56	; 0x38
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	200019dc 	.word	0x200019dc
 8008460:	40000400 	.word	0x40000400

08008464 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08e      	sub	sp, #56	; 0x38
 8008468:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800846a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	605a      	str	r2, [r3, #4]
 8008474:	609a      	str	r2, [r3, #8]
 8008476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008478:	f107 0320 	add.w	r3, r7, #32
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008482:	1d3b      	adds	r3, r7, #4
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	605a      	str	r2, [r3, #4]
 800848a:	609a      	str	r2, [r3, #8]
 800848c:	60da      	str	r2, [r3, #12]
 800848e:	611a      	str	r2, [r3, #16]
 8008490:	615a      	str	r2, [r3, #20]
 8008492:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8008494:	4b3d      	ldr	r3, [pc, #244]	; (800858c <MX_TIM4_Init+0x128>)
 8008496:	4a3e      	ldr	r2, [pc, #248]	; (8008590 <MX_TIM4_Init+0x12c>)
 8008498:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 800849a:	4b3c      	ldr	r3, [pc, #240]	; (800858c <MX_TIM4_Init+0x128>)
 800849c:	2229      	movs	r2, #41	; 0x29
 800849e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084a0:	4b3a      	ldr	r3, [pc, #232]	; (800858c <MX_TIM4_Init+0x128>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 80084a6:	4b39      	ldr	r3, [pc, #228]	; (800858c <MX_TIM4_Init+0x128>)
 80084a8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80084ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084ae:	4b37      	ldr	r3, [pc, #220]	; (800858c <MX_TIM4_Init+0x128>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084b4:	4b35      	ldr	r3, [pc, #212]	; (800858c <MX_TIM4_Init+0x128>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80084ba:	4834      	ldr	r0, [pc, #208]	; (800858c <MX_TIM4_Init+0x128>)
 80084bc:	f006 fbb2 	bl	800ec24 <HAL_TIM_Base_Init>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80084c6:	f7ff fbcd 	bl	8007c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80084ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80084d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084d4:	4619      	mov	r1, r3
 80084d6:	482d      	ldr	r0, [pc, #180]	; (800858c <MX_TIM4_Init+0x128>)
 80084d8:	f006 fdf6 	bl	800f0c8 <HAL_TIM_ConfigClockSource>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80084e2:	f7ff fbbf 	bl	8007c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80084e6:	4829      	ldr	r0, [pc, #164]	; (800858c <MX_TIM4_Init+0x128>)
 80084e8:	f006 fbeb 	bl	800ecc2 <HAL_TIM_PWM_Init>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80084f2:	f7ff fbb7 	bl	8007c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80084f6:	2300      	movs	r3, #0
 80084f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80084fe:	f107 0320 	add.w	r3, r7, #32
 8008502:	4619      	mov	r1, r3
 8008504:	4821      	ldr	r0, [pc, #132]	; (800858c <MX_TIM4_Init+0x128>)
 8008506:	f007 f9a9 	bl	800f85c <HAL_TIMEx_MasterConfigSynchronization>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8008510:	f7ff fba8 	bl	8007c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008514:	2360      	movs	r3, #96	; 0x60
 8008516:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008524:	1d3b      	adds	r3, r7, #4
 8008526:	2200      	movs	r2, #0
 8008528:	4619      	mov	r1, r3
 800852a:	4818      	ldr	r0, [pc, #96]	; (800858c <MX_TIM4_Init+0x128>)
 800852c:	f006 fd06 	bl	800ef3c <HAL_TIM_PWM_ConfigChannel>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8008536:	f7ff fb95 	bl	8007c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800853a:	1d3b      	adds	r3, r7, #4
 800853c:	2204      	movs	r2, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4812      	ldr	r0, [pc, #72]	; (800858c <MX_TIM4_Init+0x128>)
 8008542:	f006 fcfb 	bl	800ef3c <HAL_TIM_PWM_ConfigChannel>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800854c:	f7ff fb8a 	bl	8007c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008550:	1d3b      	adds	r3, r7, #4
 8008552:	2208      	movs	r2, #8
 8008554:	4619      	mov	r1, r3
 8008556:	480d      	ldr	r0, [pc, #52]	; (800858c <MX_TIM4_Init+0x128>)
 8008558:	f006 fcf0 	bl	800ef3c <HAL_TIM_PWM_ConfigChannel>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8008562:	f7ff fb7f 	bl	8007c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	220c      	movs	r2, #12
 800856a:	4619      	mov	r1, r3
 800856c:	4807      	ldr	r0, [pc, #28]	; (800858c <MX_TIM4_Init+0x128>)
 800856e:	f006 fce5 	bl	800ef3c <HAL_TIM_PWM_ConfigChannel>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8008578:	f7ff fb74 	bl	8007c64 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800857c:	4803      	ldr	r0, [pc, #12]	; (800858c <MX_TIM4_Init+0x128>)
 800857e:	f000 f8ff 	bl	8008780 <HAL_TIM_MspPostInit>

}
 8008582:	bf00      	nop
 8008584:	3738      	adds	r7, #56	; 0x38
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	2000195c 	.word	0x2000195c
 8008590:	40000800 	.word	0x40000800

08008594 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800859a:	1d3b      	adds	r3, r7, #4
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	60da      	str	r2, [r3, #12]
 80085a6:	611a      	str	r2, [r3, #16]
 80085a8:	615a      	str	r2, [r3, #20]
 80085aa:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 80085ac:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <MX_TIM10_Init+0x90>)
 80085ae:	4a1e      	ldr	r2, [pc, #120]	; (8008628 <MX_TIM10_Init+0x94>)
 80085b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80085b2:	4b1c      	ldr	r3, [pc, #112]	; (8008624 <MX_TIM10_Init+0x90>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085b8:	4b1a      	ldr	r3, [pc, #104]	; (8008624 <MX_TIM10_Init+0x90>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 80085be:	4b19      	ldr	r3, [pc, #100]	; (8008624 <MX_TIM10_Init+0x90>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085c4:	4b17      	ldr	r3, [pc, #92]	; (8008624 <MX_TIM10_Init+0x90>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085ca:	4b16      	ldr	r3, [pc, #88]	; (8008624 <MX_TIM10_Init+0x90>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80085d0:	4814      	ldr	r0, [pc, #80]	; (8008624 <MX_TIM10_Init+0x90>)
 80085d2:	f006 fb27 	bl	800ec24 <HAL_TIM_Base_Init>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 80085dc:	f7ff fb42 	bl	8007c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80085e0:	4810      	ldr	r0, [pc, #64]	; (8008624 <MX_TIM10_Init+0x90>)
 80085e2:	f006 fb6e 	bl	800ecc2 <HAL_TIM_PWM_Init>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 80085ec:	f7ff fb3a 	bl	8007c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80085f0:	2360      	movs	r3, #96	; 0x60
 80085f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008600:	1d3b      	adds	r3, r7, #4
 8008602:	2200      	movs	r2, #0
 8008604:	4619      	mov	r1, r3
 8008606:	4807      	ldr	r0, [pc, #28]	; (8008624 <MX_TIM10_Init+0x90>)
 8008608:	f006 fc98 	bl	800ef3c <HAL_TIM_PWM_ConfigChannel>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8008612:	f7ff fb27 	bl	8007c64 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8008616:	4803      	ldr	r0, [pc, #12]	; (8008624 <MX_TIM10_Init+0x90>)
 8008618:	f000 f8b2 	bl	8008780 <HAL_TIM_MspPostInit>

}
 800861c:	bf00      	nop
 800861e:	3720      	adds	r7, #32
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	2000199c 	.word	0x2000199c
 8008628:	40014400 	.word	0x40014400

0800862c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8008630:	4b0e      	ldr	r3, [pc, #56]	; (800866c <MX_TIM11_Init+0x40>)
 8008632:	4a0f      	ldr	r2, [pc, #60]	; (8008670 <MX_TIM11_Init+0x44>)
 8008634:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1680-1;
 8008636:	4b0d      	ldr	r3, [pc, #52]	; (800866c <MX_TIM11_Init+0x40>)
 8008638:	f240 628f 	movw	r2, #1679	; 0x68f
 800863c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800863e:	4b0b      	ldr	r3, [pc, #44]	; (800866c <MX_TIM11_Init+0x40>)
 8008640:	2200      	movs	r2, #0
 8008642:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <MX_TIM11_Init+0x40>)
 8008646:	f240 32e7 	movw	r2, #999	; 0x3e7
 800864a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800864c:	4b07      	ldr	r3, [pc, #28]	; (800866c <MX_TIM11_Init+0x40>)
 800864e:	2200      	movs	r2, #0
 8008650:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008652:	4b06      	ldr	r3, [pc, #24]	; (800866c <MX_TIM11_Init+0x40>)
 8008654:	2200      	movs	r2, #0
 8008656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8008658:	4804      	ldr	r0, [pc, #16]	; (800866c <MX_TIM11_Init+0x40>)
 800865a:	f006 fae3 	bl	800ec24 <HAL_TIM_Base_Init>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8008664:	f7ff fafe 	bl	8007c64 <Error_Handler>
  }

}
 8008668:	bf00      	nop
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20001a1c 	.word	0x20001a1c
 8008670:	40014800 	.word	0x40014800

08008674 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008684:	d116      	bne.n	80086b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008686:	2300      	movs	r3, #0
 8008688:	61fb      	str	r3, [r7, #28]
 800868a:	4b38      	ldr	r3, [pc, #224]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	4a37      	ldr	r2, [pc, #220]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	6413      	str	r3, [r2, #64]	; 0x40
 8008696:	4b35      	ldr	r3, [pc, #212]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	61fb      	str	r3, [r7, #28]
 80086a0:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80086a2:	2200      	movs	r2, #0
 80086a4:	2105      	movs	r1, #5
 80086a6:	201c      	movs	r0, #28
 80086a8:	f000 fd10 	bl	80090cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80086ac:	201c      	movs	r0, #28
 80086ae:	f000 fd29 	bl	8009104 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80086b2:	e056      	b.n	8008762 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a2d      	ldr	r2, [pc, #180]	; (8008770 <HAL_TIM_Base_MspInit+0xfc>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d10e      	bne.n	80086dc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80086be:	2300      	movs	r3, #0
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	4b2a      	ldr	r3, [pc, #168]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	4a29      	ldr	r2, [pc, #164]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 80086c8:	f043 0302 	orr.w	r3, r3, #2
 80086cc:	6413      	str	r3, [r2, #64]	; 0x40
 80086ce:	4b27      	ldr	r3, [pc, #156]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	69bb      	ldr	r3, [r7, #24]
}
 80086da:	e042      	b.n	8008762 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a24      	ldr	r2, [pc, #144]	; (8008774 <HAL_TIM_Base_MspInit+0x100>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d10e      	bne.n	8008704 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80086e6:	2300      	movs	r3, #0
 80086e8:	617b      	str	r3, [r7, #20]
 80086ea:	4b20      	ldr	r3, [pc, #128]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	4a1f      	ldr	r2, [pc, #124]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 80086f0:	f043 0304 	orr.w	r3, r3, #4
 80086f4:	6413      	str	r3, [r2, #64]	; 0x40
 80086f6:	4b1d      	ldr	r3, [pc, #116]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	697b      	ldr	r3, [r7, #20]
}
 8008702:	e02e      	b.n	8008762 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM10)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a1b      	ldr	r2, [pc, #108]	; (8008778 <HAL_TIM_Base_MspInit+0x104>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d10e      	bne.n	800872c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800870e:	2300      	movs	r3, #0
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	4b16      	ldr	r3, [pc, #88]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 8008714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008716:	4a15      	ldr	r2, [pc, #84]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 8008718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800871c:	6453      	str	r3, [r2, #68]	; 0x44
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 8008720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008726:	613b      	str	r3, [r7, #16]
 8008728:	693b      	ldr	r3, [r7, #16]
}
 800872a:	e01a      	b.n	8008762 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a12      	ldr	r2, [pc, #72]	; (800877c <HAL_TIM_Base_MspInit+0x108>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d115      	bne.n	8008762 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 800873c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873e:	4a0b      	ldr	r2, [pc, #44]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 8008740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008744:	6453      	str	r3, [r2, #68]	; 0x44
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <HAL_TIM_Base_MspInit+0xf8>)
 8008748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8008752:	2200      	movs	r2, #0
 8008754:	2105      	movs	r1, #5
 8008756:	201a      	movs	r0, #26
 8008758:	f000 fcb8 	bl	80090cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800875c:	201a      	movs	r0, #26
 800875e:	f000 fcd1 	bl	8009104 <HAL_NVIC_EnableIRQ>
}
 8008762:	bf00      	nop
 8008764:	3720      	adds	r7, #32
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	40023800 	.word	0x40023800
 8008770:	40000400 	.word	0x40000400
 8008774:	40000800 	.word	0x40000800
 8008778:	40014400 	.word	0x40014400
 800877c:	40014800 	.word	0x40014800

08008780 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08c      	sub	sp, #48	; 0x30
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008788:	f107 031c 	add.w	r3, r7, #28
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	605a      	str	r2, [r3, #4]
 8008792:	609a      	str	r2, [r3, #8]
 8008794:	60da      	str	r2, [r3, #12]
 8008796:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a45      	ldr	r2, [pc, #276]	; (80088b4 <HAL_TIM_MspPostInit+0x134>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d13c      	bne.n	800881c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087a2:	2300      	movs	r3, #0
 80087a4:	61bb      	str	r3, [r7, #24]
 80087a6:	4b44      	ldr	r3, [pc, #272]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	4a43      	ldr	r2, [pc, #268]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 80087ac:	f043 0301 	orr.w	r3, r3, #1
 80087b0:	6313      	str	r3, [r2, #48]	; 0x30
 80087b2:	4b41      	ldr	r3, [pc, #260]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	61bb      	str	r3, [r7, #24]
 80087bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087be:	2300      	movs	r3, #0
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	4b3d      	ldr	r3, [pc, #244]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	4a3c      	ldr	r2, [pc, #240]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 80087c8:	f043 0304 	orr.w	r3, r3, #4
 80087cc:	6313      	str	r3, [r2, #48]	; 0x30
 80087ce:	4b3a      	ldr	r3, [pc, #232]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80087da:	2340      	movs	r3, #64	; 0x40
 80087dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087de:	2302      	movs	r3, #2
 80087e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087e6:	2300      	movs	r3, #0
 80087e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80087ea:	2302      	movs	r3, #2
 80087ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087ee:	f107 031c 	add.w	r3, r7, #28
 80087f2:	4619      	mov	r1, r3
 80087f4:	4831      	ldr	r0, [pc, #196]	; (80088bc <HAL_TIM_MspPostInit+0x13c>)
 80087f6:	f001 f83d 	bl	8009874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80087fa:	2380      	movs	r3, #128	; 0x80
 80087fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087fe:	2302      	movs	r3, #2
 8008800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008802:	2300      	movs	r3, #0
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008806:	2300      	movs	r3, #0
 8008808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800880a:	2302      	movs	r3, #2
 800880c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800880e:	f107 031c 	add.w	r3, r7, #28
 8008812:	4619      	mov	r1, r3
 8008814:	482a      	ldr	r0, [pc, #168]	; (80088c0 <HAL_TIM_MspPostInit+0x140>)
 8008816:	f001 f82d 	bl	8009874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800881a:	e047      	b.n	80088ac <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a28      	ldr	r2, [pc, #160]	; (80088c4 <HAL_TIM_MspPostInit+0x144>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d11f      	bne.n	8008866 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]
 800882a:	4b23      	ldr	r3, [pc, #140]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	4a22      	ldr	r2, [pc, #136]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 8008830:	f043 0308 	orr.w	r3, r3, #8
 8008834:	6313      	str	r3, [r2, #48]	; 0x30
 8008836:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	f003 0308 	and.w	r3, r3, #8
 800883e:	613b      	str	r3, [r7, #16]
 8008840:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8008842:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008848:	2302      	movs	r3, #2
 800884a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800884c:	2300      	movs	r3, #0
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008850:	2300      	movs	r3, #0
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008854:	2302      	movs	r3, #2
 8008856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008858:	f107 031c 	add.w	r3, r7, #28
 800885c:	4619      	mov	r1, r3
 800885e:	481a      	ldr	r0, [pc, #104]	; (80088c8 <HAL_TIM_MspPostInit+0x148>)
 8008860:	f001 f808 	bl	8009874 <HAL_GPIO_Init>
}
 8008864:	e022      	b.n	80088ac <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM10)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a18      	ldr	r2, [pc, #96]	; (80088cc <HAL_TIM_MspPostInit+0x14c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d11d      	bne.n	80088ac <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008870:	2300      	movs	r3, #0
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 8008876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008878:	4a0f      	ldr	r2, [pc, #60]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 800887a:	f043 0320 	orr.w	r3, r3, #32
 800887e:	6313      	str	r3, [r2, #48]	; 0x30
 8008880:	4b0d      	ldr	r3, [pc, #52]	; (80088b8 <HAL_TIM_MspPostInit+0x138>)
 8008882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008884:	f003 0320 	and.w	r3, r3, #32
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800888c:	2340      	movs	r3, #64	; 0x40
 800888e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008890:	2302      	movs	r3, #2
 8008892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008894:	2300      	movs	r3, #0
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008898:	2300      	movs	r3, #0
 800889a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800889c:	2303      	movs	r3, #3
 800889e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80088a0:	f107 031c 	add.w	r3, r7, #28
 80088a4:	4619      	mov	r1, r3
 80088a6:	480a      	ldr	r0, [pc, #40]	; (80088d0 <HAL_TIM_MspPostInit+0x150>)
 80088a8:	f000 ffe4 	bl	8009874 <HAL_GPIO_Init>
}
 80088ac:	bf00      	nop
 80088ae:	3730      	adds	r7, #48	; 0x30
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	40000400 	.word	0x40000400
 80088b8:	40023800 	.word	0x40023800
 80088bc:	40020000 	.word	0x40020000
 80088c0:	40020800 	.word	0x40020800
 80088c4:	40000800 	.word	0x40000800
 80088c8:	40020c00 	.word	0x40020c00
 80088cc:	40014400 	.word	0x40014400
 80088d0:	40021400 	.word	0x40021400

080088d4 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80088d8:	4b12      	ldr	r3, [pc, #72]	; (8008924 <MX_UART7_Init+0x50>)
 80088da:	4a13      	ldr	r2, [pc, #76]	; (8008928 <MX_UART7_Init+0x54>)
 80088dc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 80088de:	4b11      	ldr	r3, [pc, #68]	; (8008924 <MX_UART7_Init+0x50>)
 80088e0:	4a12      	ldr	r2, [pc, #72]	; (800892c <MX_UART7_Init+0x58>)
 80088e2:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 80088e4:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <MX_UART7_Init+0x50>)
 80088e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088ea:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 80088ec:	4b0d      	ldr	r3, [pc, #52]	; (8008924 <MX_UART7_Init+0x50>)
 80088ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80088f2:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 80088f4:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <MX_UART7_Init+0x50>)
 80088f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088fa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80088fc:	4b09      	ldr	r3, [pc, #36]	; (8008924 <MX_UART7_Init+0x50>)
 80088fe:	220c      	movs	r2, #12
 8008900:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008902:	4b08      	ldr	r3, [pc, #32]	; (8008924 <MX_UART7_Init+0x50>)
 8008904:	2200      	movs	r2, #0
 8008906:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8008908:	4b06      	ldr	r3, [pc, #24]	; (8008924 <MX_UART7_Init+0x50>)
 800890a:	2200      	movs	r2, #0
 800890c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800890e:	4805      	ldr	r0, [pc, #20]	; (8008924 <MX_UART7_Init+0x50>)
 8008910:	f007 f834 	bl	800f97c <HAL_UART_Init>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 800891a:	f7ff f9a3 	bl	8007c64 <Error_Handler>
  }

}
 800891e:	bf00      	nop
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20001a9c 	.word	0x20001a9c
 8008928:	40007800 	.word	0x40007800
 800892c:	000186a0 	.word	0x000186a0

08008930 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8008934:	4b11      	ldr	r3, [pc, #68]	; (800897c <MX_UART8_Init+0x4c>)
 8008936:	4a12      	ldr	r2, [pc, #72]	; (8008980 <MX_UART8_Init+0x50>)
 8008938:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 800893a:	4b10      	ldr	r3, [pc, #64]	; (800897c <MX_UART8_Init+0x4c>)
 800893c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8008940:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8008942:	4b0e      	ldr	r3, [pc, #56]	; (800897c <MX_UART8_Init+0x4c>)
 8008944:	2200      	movs	r2, #0
 8008946:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8008948:	4b0c      	ldr	r3, [pc, #48]	; (800897c <MX_UART8_Init+0x4c>)
 800894a:	2200      	movs	r2, #0
 800894c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800894e:	4b0b      	ldr	r3, [pc, #44]	; (800897c <MX_UART8_Init+0x4c>)
 8008950:	2200      	movs	r2, #0
 8008952:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8008954:	4b09      	ldr	r3, [pc, #36]	; (800897c <MX_UART8_Init+0x4c>)
 8008956:	220c      	movs	r2, #12
 8008958:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800895a:	4b08      	ldr	r3, [pc, #32]	; (800897c <MX_UART8_Init+0x4c>)
 800895c:	2200      	movs	r2, #0
 800895e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8008960:	4b06      	ldr	r3, [pc, #24]	; (800897c <MX_UART8_Init+0x4c>)
 8008962:	2200      	movs	r2, #0
 8008964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8008966:	4805      	ldr	r0, [pc, #20]	; (800897c <MX_UART8_Init+0x4c>)
 8008968:	f007 f808 	bl	800f97c <HAL_UART_Init>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8008972:	f7ff f977 	bl	8007c64 <Error_Handler>
  }

}
 8008976:	bf00      	nop
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20001bdc 	.word	0x20001bdc
 8008980:	40007c00 	.word	0x40007c00

08008984 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008988:	4b11      	ldr	r3, [pc, #68]	; (80089d0 <MX_USART2_UART_Init+0x4c>)
 800898a:	4a12      	ldr	r2, [pc, #72]	; (80089d4 <MX_USART2_UART_Init+0x50>)
 800898c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800898e:	4b10      	ldr	r3, [pc, #64]	; (80089d0 <MX_USART2_UART_Init+0x4c>)
 8008990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008996:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <MX_USART2_UART_Init+0x4c>)
 8008998:	2200      	movs	r2, #0
 800899a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800899c:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <MX_USART2_UART_Init+0x4c>)
 800899e:	2200      	movs	r2, #0
 80089a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <MX_USART2_UART_Init+0x4c>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80089a8:	4b09      	ldr	r3, [pc, #36]	; (80089d0 <MX_USART2_UART_Init+0x4c>)
 80089aa:	220c      	movs	r2, #12
 80089ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80089ae:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <MX_USART2_UART_Init+0x4c>)
 80089b0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80089b4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80089b6:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <MX_USART2_UART_Init+0x4c>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80089bc:	4804      	ldr	r0, [pc, #16]	; (80089d0 <MX_USART2_UART_Init+0x4c>)
 80089be:	f006 ffdd 	bl	800f97c <HAL_UART_Init>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80089c8:	f7ff f94c 	bl	8007c64 <Error_Handler>
  }

}
 80089cc:	bf00      	nop
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20001c1c 	.word	0x20001c1c
 80089d4:	40004400 	.word	0x40004400

080089d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <MX_USART3_UART_Init+0x4c>)
 80089de:	4a12      	ldr	r2, [pc, #72]	; (8008a28 <MX_USART3_UART_Init+0x50>)
 80089e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80089e2:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <MX_USART3_UART_Init+0x4c>)
 80089e4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80089e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80089ea:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <MX_USART3_UART_Init+0x4c>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80089f0:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <MX_USART3_UART_Init+0x4c>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <MX_USART3_UART_Init+0x4c>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <MX_USART3_UART_Init+0x4c>)
 80089fe:	220c      	movs	r2, #12
 8008a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <MX_USART3_UART_Init+0x4c>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <MX_USART3_UART_Init+0x4c>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008a0e:	4805      	ldr	r0, [pc, #20]	; (8008a24 <MX_USART3_UART_Init+0x4c>)
 8008a10:	f006 ffb4 	bl	800f97c <HAL_UART_Init>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008a1a:	f7ff f923 	bl	8007c64 <Error_Handler>
  }

}
 8008a1e:	bf00      	nop
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20001adc 	.word	0x20001adc
 8008a28:	40004800 	.word	0x40004800

08008a2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b090      	sub	sp, #64	; 0x40
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	605a      	str	r2, [r3, #4]
 8008a3e:	609a      	str	r2, [r3, #8]
 8008a40:	60da      	str	r2, [r3, #12]
 8008a42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a8c      	ldr	r2, [pc, #560]	; (8008c7c <HAL_UART_MspInit+0x250>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d15c      	bne.n	8008b08 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8008a4e:	2300      	movs	r3, #0
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a52:	4b8b      	ldr	r3, [pc, #556]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	4a8a      	ldr	r2, [pc, #552]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8008a5e:	4b88      	ldr	r3, [pc, #544]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6e:	4b84      	ldr	r3, [pc, #528]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a72:	4a83      	ldr	r2, [pc, #524]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008a74:	f043 0310 	orr.w	r3, r3, #16
 8008a78:	6313      	str	r3, [r2, #48]	; 0x30
 8008a7a:	4b81      	ldr	r3, [pc, #516]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7e:	f003 0310 	and.w	r3, r3, #16
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8008a86:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a90:	2301      	movs	r3, #1
 8008a92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a94:	2303      	movs	r3, #3
 8008a96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8008a98:	2308      	movs	r3, #8
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4878      	ldr	r0, [pc, #480]	; (8008c84 <HAL_UART_MspInit+0x258>)
 8008aa4:	f000 fee6 	bl	8009874 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8008aa8:	4b77      	ldr	r3, [pc, #476]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008aaa:	4a78      	ldr	r2, [pc, #480]	; (8008c8c <HAL_UART_MspInit+0x260>)
 8008aac:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8008aae:	4b76      	ldr	r3, [pc, #472]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008ab0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008ab4:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ab6:	4b74      	ldr	r3, [pc, #464]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008abc:	4b72      	ldr	r3, [pc, #456]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008ac2:	4b71      	ldr	r3, [pc, #452]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ac8:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008aca:	4b6f      	ldr	r3, [pc, #444]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ad0:	4b6d      	ldr	r3, [pc, #436]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8008ad6:	4b6c      	ldr	r3, [pc, #432]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008adc:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008ade:	4b6a      	ldr	r3, [pc, #424]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ae4:	4b68      	ldr	r3, [pc, #416]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8008aea:	4867      	ldr	r0, [pc, #412]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008aec:	f000 fb18 	bl	8009120 <HAL_DMA_Init>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8008af6:	f7ff f8b5 	bl	8007c64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a62      	ldr	r2, [pc, #392]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008afe:	635a      	str	r2, [r3, #52]	; 0x34
 8008b00:	4a61      	ldr	r2, [pc, #388]	; (8008c88 <HAL_UART_MspInit+0x25c>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008b06:	e109      	b.n	8008d1c <HAL_UART_MspInit+0x2f0>
  else if(uartHandle->Instance==UART8)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a60      	ldr	r2, [pc, #384]	; (8008c90 <HAL_UART_MspInit+0x264>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d163      	bne.n	8008bda <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART8_CLK_ENABLE();
 8008b12:	2300      	movs	r3, #0
 8008b14:	623b      	str	r3, [r7, #32]
 8008b16:	4b5a      	ldr	r3, [pc, #360]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	4a59      	ldr	r2, [pc, #356]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b20:	6413      	str	r3, [r2, #64]	; 0x40
 8008b22:	4b57      	ldr	r3, [pc, #348]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b2a:	623b      	str	r3, [r7, #32]
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	4b53      	ldr	r3, [pc, #332]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b36:	4a52      	ldr	r2, [pc, #328]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008b38:	f043 0310 	orr.w	r3, r3, #16
 8008b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b3e:	4b50      	ldr	r3, [pc, #320]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	f003 0310 	and.w	r3, r3, #16
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b52:	2301      	movs	r3, #1
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b56:	2303      	movs	r3, #3
 8008b58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8008b5a:	2308      	movs	r3, #8
 8008b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b62:	4619      	mov	r1, r3
 8008b64:	4847      	ldr	r0, [pc, #284]	; (8008c84 <HAL_UART_MspInit+0x258>)
 8008b66:	f000 fe85 	bl	8009874 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8008b6a:	4b4a      	ldr	r3, [pc, #296]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008b6c:	4a4a      	ldr	r2, [pc, #296]	; (8008c98 <HAL_UART_MspInit+0x26c>)
 8008b6e:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8008b70:	4b48      	ldr	r3, [pc, #288]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008b72:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008b76:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b78:	4b46      	ldr	r3, [pc, #280]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b7e:	4b45      	ldr	r3, [pc, #276]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b84:	4b43      	ldr	r3, [pc, #268]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b8a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b8c:	4b41      	ldr	r3, [pc, #260]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b92:	4b40      	ldr	r3, [pc, #256]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8008b98:	4b3e      	ldr	r3, [pc, #248]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b9e:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008ba0:	4b3c      	ldr	r3, [pc, #240]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ba6:	4b3b      	ldr	r3, [pc, #236]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8008bac:	4839      	ldr	r0, [pc, #228]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008bae:	f000 fab7 	bl	8009120 <HAL_DMA_Init>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <HAL_UART_MspInit+0x190>
      Error_Handler();
 8008bb8:	f7ff f854 	bl	8007c64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a35      	ldr	r2, [pc, #212]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8008bc2:	4a34      	ldr	r2, [pc, #208]	; (8008c94 <HAL_UART_MspInit+0x268>)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2105      	movs	r1, #5
 8008bcc:	2053      	movs	r0, #83	; 0x53
 8008bce:	f000 fa7d 	bl	80090cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8008bd2:	2053      	movs	r0, #83	; 0x53
 8008bd4:	f000 fa96 	bl	8009104 <HAL_NVIC_EnableIRQ>
}
 8008bd8:	e0a0      	b.n	8008d1c <HAL_UART_MspInit+0x2f0>
  else if(uartHandle->Instance==USART2)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a2f      	ldr	r2, [pc, #188]	; (8008c9c <HAL_UART_MspInit+0x270>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d161      	bne.n	8008ca8 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008be4:	2300      	movs	r3, #0
 8008be6:	61bb      	str	r3, [r7, #24]
 8008be8:	4b25      	ldr	r3, [pc, #148]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	4a24      	ldr	r2, [pc, #144]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8008bf4:	4b22      	ldr	r3, [pc, #136]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bfc:	61bb      	str	r3, [r7, #24]
 8008bfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c00:	2300      	movs	r3, #0
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	4b1e      	ldr	r3, [pc, #120]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c08:	4a1d      	ldr	r2, [pc, #116]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008c0a:	f043 0301 	orr.w	r3, r3, #1
 8008c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8008c10:	4b1b      	ldr	r3, [pc, #108]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	4b17      	ldr	r3, [pc, #92]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c24:	4a16      	ldr	r2, [pc, #88]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008c26:	f043 0308 	orr.w	r3, r3, #8
 8008c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2c:	4b14      	ldr	r3, [pc, #80]	; (8008c80 <HAL_UART_MspInit+0x254>)
 8008c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c30:	f003 0308 	and.w	r3, r3, #8
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c44:	2303      	movs	r3, #3
 8008c46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008c48:	2307      	movs	r3, #7
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c50:	4619      	mov	r1, r3
 8008c52:	4813      	ldr	r0, [pc, #76]	; (8008ca0 <HAL_UART_MspInit+0x274>)
 8008c54:	f000 fe0e 	bl	8009874 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8008c58:	2370      	movs	r3, #112	; 0x70
 8008c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c64:	2303      	movs	r3, #3
 8008c66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008c68:	2307      	movs	r3, #7
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c70:	4619      	mov	r1, r3
 8008c72:	480c      	ldr	r0, [pc, #48]	; (8008ca4 <HAL_UART_MspInit+0x278>)
 8008c74:	f000 fdfe 	bl	8009874 <HAL_GPIO_Init>
}
 8008c78:	e050      	b.n	8008d1c <HAL_UART_MspInit+0x2f0>
 8008c7a:	bf00      	nop
 8008c7c:	40007800 	.word	0x40007800
 8008c80:	40023800 	.word	0x40023800
 8008c84:	40021000 	.word	0x40021000
 8008c88:	20001b1c 	.word	0x20001b1c
 8008c8c:	40026058 	.word	0x40026058
 8008c90:	40007c00 	.word	0x40007c00
 8008c94:	20001b7c 	.word	0x20001b7c
 8008c98:	400260a0 	.word	0x400260a0
 8008c9c:	40004400 	.word	0x40004400
 8008ca0:	40020000 	.word	0x40020000
 8008ca4:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <HAL_UART_MspInit+0x2f8>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d134      	bne.n	8008d1c <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <HAL_UART_MspInit+0x2fc>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	4a1b      	ldr	r2, [pc, #108]	; (8008d28 <HAL_UART_MspInit+0x2fc>)
 8008cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8008cc2:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <HAL_UART_MspInit+0x2fc>)
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60bb      	str	r3, [r7, #8]
 8008cd2:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <HAL_UART_MspInit+0x2fc>)
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	4a14      	ldr	r2, [pc, #80]	; (8008d28 <HAL_UART_MspInit+0x2fc>)
 8008cd8:	f043 0308 	orr.w	r3, r3, #8
 8008cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cde:	4b12      	ldr	r3, [pc, #72]	; (8008d28 <HAL_UART_MspInit+0x2fc>)
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	60bb      	str	r3, [r7, #8]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8008cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008cfc:	2307      	movs	r3, #7
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d04:	4619      	mov	r1, r3
 8008d06:	4809      	ldr	r0, [pc, #36]	; (8008d2c <HAL_UART_MspInit+0x300>)
 8008d08:	f000 fdb4 	bl	8009874 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2105      	movs	r1, #5
 8008d10:	2027      	movs	r0, #39	; 0x27
 8008d12:	f000 f9db 	bl	80090cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008d16:	2027      	movs	r0, #39	; 0x27
 8008d18:	f000 f9f4 	bl	8009104 <HAL_NVIC_EnableIRQ>
}
 8008d1c:	bf00      	nop
 8008d1e:	3740      	adds	r7, #64	; 0x40
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	40004800 	.word	0x40004800
 8008d28:	40023800 	.word	0x40023800
 8008d2c:	40020c00 	.word	0x40020c00

08008d30 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d34:	4b14      	ldr	r3, [pc, #80]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008d3c:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d3e:	2204      	movs	r2, #4
 8008d40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d44:	2202      	movs	r2, #2
 8008d46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d48:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d50:	2202      	movs	r2, #2
 8008d52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008d54:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d56:	2201      	movs	r2, #1
 8008d58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d60:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008d66:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d68:	2201      	movs	r2, #1
 8008d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d6c:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d72:	4805      	ldr	r0, [pc, #20]	; (8008d88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008d74:	f003 fea6 	bl	800cac4 <HAL_PCD_Init>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8008d7e:	f7fe ff71 	bl	8007c64 <Error_Handler>
  }

}
 8008d82:	bf00      	nop
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20001c5c 	.word	0x20001c5c

08008d8c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08a      	sub	sp, #40	; 0x28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d94:	f107 0314 	add.w	r3, r7, #20
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	605a      	str	r2, [r3, #4]
 8008d9e:	609a      	str	r2, [r3, #8]
 8008da0:	60da      	str	r2, [r3, #12]
 8008da2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dac:	d13f      	bne.n	8008e2e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dae:	2300      	movs	r3, #0
 8008db0:	613b      	str	r3, [r7, #16]
 8008db2:	4b21      	ldr	r3, [pc, #132]	; (8008e38 <HAL_PCD_MspInit+0xac>)
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	4a20      	ldr	r2, [pc, #128]	; (8008e38 <HAL_PCD_MspInit+0xac>)
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8008dbe:	4b1e      	ldr	r3, [pc, #120]	; (8008e38 <HAL_PCD_MspInit+0xac>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008dca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ddc:	230a      	movs	r3, #10
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008de0:	f107 0314 	add.w	r3, r7, #20
 8008de4:	4619      	mov	r1, r3
 8008de6:	4815      	ldr	r0, [pc, #84]	; (8008e3c <HAL_PCD_MspInit+0xb0>)
 8008de8:	f000 fd44 	bl	8009874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008dfa:	f107 0314 	add.w	r3, r7, #20
 8008dfe:	4619      	mov	r1, r3
 8008e00:	480e      	ldr	r0, [pc, #56]	; (8008e3c <HAL_PCD_MspInit+0xb0>)
 8008e02:	f000 fd37 	bl	8009874 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <HAL_PCD_MspInit+0xac>)
 8008e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0a:	4a0b      	ldr	r2, [pc, #44]	; (8008e38 <HAL_PCD_MspInit+0xac>)
 8008e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e10:	6353      	str	r3, [r2, #52]	; 0x34
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <HAL_PCD_MspInit+0xac>)
 8008e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1a:	4a07      	ldr	r2, [pc, #28]	; (8008e38 <HAL_PCD_MspInit+0xac>)
 8008e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e20:	6453      	str	r3, [r2, #68]	; 0x44
 8008e22:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <HAL_PCD_MspInit+0xac>)
 8008e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e2e:	bf00      	nop
 8008e30:	3728      	adds	r7, #40	; 0x28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	40023800 	.word	0x40023800
 8008e3c:	40020000 	.word	0x40020000

08008e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e78 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008e44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008e46:	e003      	b.n	8008e50 <LoopCopyDataInit>

08008e48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008e4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008e4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008e4e:	3104      	adds	r1, #4

08008e50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008e50:	480b      	ldr	r0, [pc, #44]	; (8008e80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008e52:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008e54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008e56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008e58:	d3f6      	bcc.n	8008e48 <CopyDataInit>
  ldr  r2, =_sbss
 8008e5a:	4a0b      	ldr	r2, [pc, #44]	; (8008e88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008e5c:	e002      	b.n	8008e64 <LoopFillZerobss>

08008e5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008e5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008e60:	f842 3b04 	str.w	r3, [r2], #4

08008e64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008e64:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008e66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008e68:	d3f9      	bcc.n	8008e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e6a:	f7ff fa17 	bl	800829c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e6e:	f00c fee7 	bl	8015c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e72:	f7fe fde7 	bl	8007a44 <main>
  bx  lr    
 8008e76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008e78:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8008e7c:	0801b0c8 	.word	0x0801b0c8
  ldr  r0, =_sdata
 8008e80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008e84:	20000294 	.word	0x20000294
  ldr  r2, =_sbss
 8008e88:	20000298 	.word	0x20000298
  ldr  r3, = _ebss
 8008e8c:	20002518 	.word	0x20002518

08008e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e90:	e7fe      	b.n	8008e90 <ADC_IRQHandler>
	...

08008e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e98:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <HAL_Init+0x40>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a0d      	ldr	r2, [pc, #52]	; (8008ed4 <HAL_Init+0x40>)
 8008e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ea4:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <HAL_Init+0x40>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a0a      	ldr	r2, [pc, #40]	; (8008ed4 <HAL_Init+0x40>)
 8008eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008eb0:	4b08      	ldr	r3, [pc, #32]	; (8008ed4 <HAL_Init+0x40>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a07      	ldr	r2, [pc, #28]	; (8008ed4 <HAL_Init+0x40>)
 8008eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ebc:	2003      	movs	r0, #3
 8008ebe:	f000 f8fa 	bl	80090b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	f7ff f81a 	bl	8007efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008ec8:	f7fe ffec 	bl	8007ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	40023c00 	.word	0x40023c00

08008ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008edc:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <HAL_IncTick+0x20>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4b06      	ldr	r3, [pc, #24]	; (8008efc <HAL_IncTick+0x24>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	4a04      	ldr	r2, [pc, #16]	; (8008efc <HAL_IncTick+0x24>)
 8008eea:	6013      	str	r3, [r2, #0]
}
 8008eec:	bf00      	nop
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	200000b8 	.word	0x200000b8
 8008efc:	20002064 	.word	0x20002064

08008f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
  return uwTick;
 8008f04:	4b03      	ldr	r3, [pc, #12]	; (8008f14 <HAL_GetTick+0x14>)
 8008f06:	681b      	ldr	r3, [r3, #0]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	20002064 	.word	0x20002064

08008f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f20:	f7ff ffee 	bl	8008f00 <HAL_GetTick>
 8008f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d005      	beq.n	8008f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f32:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <HAL_Delay+0x40>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f3e:	bf00      	nop
 8008f40:	f7ff ffde 	bl	8008f00 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d8f7      	bhi.n	8008f40 <HAL_Delay+0x28>
  {
  }
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	200000b8 	.word	0x200000b8

08008f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f78:	4013      	ands	r3, r2
 8008f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f8e:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	60d3      	str	r3, [r2, #12]
}
 8008f94:	bf00      	nop
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	e000ed00 	.word	0xe000ed00

08008fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fa8:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <__NVIC_GetPriorityGrouping+0x18>)
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	0a1b      	lsrs	r3, r3, #8
 8008fae:	f003 0307 	and.w	r3, r3, #7
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	e000ed00 	.word	0xe000ed00

08008fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	db0b      	blt.n	8008fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	f003 021f 	and.w	r2, r3, #31
 8008fd8:	4907      	ldr	r1, [pc, #28]	; (8008ff8 <__NVIC_EnableIRQ+0x38>)
 8008fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	2001      	movs	r0, #1
 8008fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8008fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	e000e100 	.word	0xe000e100

08008ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900c:	2b00      	cmp	r3, #0
 800900e:	db0a      	blt.n	8009026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	b2da      	uxtb	r2, r3
 8009014:	490c      	ldr	r1, [pc, #48]	; (8009048 <__NVIC_SetPriority+0x4c>)
 8009016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800901a:	0112      	lsls	r2, r2, #4
 800901c:	b2d2      	uxtb	r2, r2
 800901e:	440b      	add	r3, r1
 8009020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009024:	e00a      	b.n	800903c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	b2da      	uxtb	r2, r3
 800902a:	4908      	ldr	r1, [pc, #32]	; (800904c <__NVIC_SetPriority+0x50>)
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	f003 030f 	and.w	r3, r3, #15
 8009032:	3b04      	subs	r3, #4
 8009034:	0112      	lsls	r2, r2, #4
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	440b      	add	r3, r1
 800903a:	761a      	strb	r2, [r3, #24]
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	e000e100 	.word	0xe000e100
 800904c:	e000ed00 	.word	0xe000ed00

08009050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009050:	b480      	push	{r7}
 8009052:	b089      	sub	sp, #36	; 0x24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f003 0307 	and.w	r3, r3, #7
 8009062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f1c3 0307 	rsb	r3, r3, #7
 800906a:	2b04      	cmp	r3, #4
 800906c:	bf28      	it	cs
 800906e:	2304      	movcs	r3, #4
 8009070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	3304      	adds	r3, #4
 8009076:	2b06      	cmp	r3, #6
 8009078:	d902      	bls.n	8009080 <NVIC_EncodePriority+0x30>
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	3b03      	subs	r3, #3
 800907e:	e000      	b.n	8009082 <NVIC_EncodePriority+0x32>
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009084:	f04f 32ff 	mov.w	r2, #4294967295
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	fa02 f303 	lsl.w	r3, r2, r3
 800908e:	43da      	mvns	r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	401a      	ands	r2, r3
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009098:	f04f 31ff 	mov.w	r1, #4294967295
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	43d9      	mvns	r1, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090a8:	4313      	orrs	r3, r2
         );
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3724      	adds	r7, #36	; 0x24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff ff4c 	bl	8008f5c <__NVIC_SetPriorityGrouping>
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80090de:	f7ff ff61 	bl	8008fa4 <__NVIC_GetPriorityGrouping>
 80090e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	6978      	ldr	r0, [r7, #20]
 80090ea:	f7ff ffb1 	bl	8009050 <NVIC_EncodePriority>
 80090ee:	4602      	mov	r2, r0
 80090f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f4:	4611      	mov	r1, r2
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff ff80 	bl	8008ffc <__NVIC_SetPriority>
}
 80090fc:	bf00      	nop
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800910e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff ff54 	bl	8008fc0 <__NVIC_EnableIRQ>
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800912c:	f7ff fee8 	bl	8008f00 <HAL_GetTick>
 8009130:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e099      	b.n	8009270 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0201 	bic.w	r2, r2, #1
 800915a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800915c:	e00f      	b.n	800917e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800915e:	f7ff fecf 	bl	8008f00 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	2b05      	cmp	r3, #5
 800916a:	d908      	bls.n	800917e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2203      	movs	r2, #3
 8009176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e078      	b.n	8009270 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e8      	bne.n	800915e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	4b38      	ldr	r3, [pc, #224]	; (8009278 <HAL_DMA_Init+0x158>)
 8009198:	4013      	ands	r3, r2
 800919a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d107      	bne.n	80091e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e0:	4313      	orrs	r3, r2
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f023 0307 	bic.w	r3, r3, #7
 80091fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	2b04      	cmp	r3, #4
 8009210:	d117      	bne.n	8009242 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	4313      	orrs	r3, r2
 800921a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00e      	beq.n	8009242 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 faab 	bl	8009780 <DMA_CheckFifoParam>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d008      	beq.n	8009242 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2240      	movs	r2, #64	; 0x40
 8009234:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800923e:	2301      	movs	r3, #1
 8009240:	e016      	b.n	8009270 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fa62 	bl	8009714 <DMA_CalcBaseAndBitshift>
 8009250:	4603      	mov	r3, r0
 8009252:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009258:	223f      	movs	r2, #63	; 0x3f
 800925a:	409a      	lsls	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	f010803f 	.word	0xf010803f

0800927c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009292:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <HAL_DMA_Start_IT+0x26>
 800929e:	2302      	movs	r3, #2
 80092a0:	e040      	b.n	8009324 <HAL_DMA_Start_IT+0xa8>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d12f      	bne.n	8009316 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2202      	movs	r2, #2
 80092ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f9f4 	bl	80096b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092d4:	223f      	movs	r2, #63	; 0x3f
 80092d6:	409a      	lsls	r2, r3
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f042 0216 	orr.w	r2, r2, #22
 80092ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d007      	beq.n	8009304 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0208 	orr.w	r2, r2, #8
 8009302:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f042 0201 	orr.w	r2, r2, #1
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e005      	b.n	8009322 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800931e:	2302      	movs	r3, #2
 8009320:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d004      	beq.n	800934a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2280      	movs	r2, #128	; 0x80
 8009344:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e00c      	b.n	8009364 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2205      	movs	r2, #5
 800934e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f022 0201 	bic.w	r2, r2, #1
 8009360:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800937c:	4b92      	ldr	r3, [pc, #584]	; (80095c8 <HAL_DMA_IRQHandler+0x258>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a92      	ldr	r2, [pc, #584]	; (80095cc <HAL_DMA_IRQHandler+0x25c>)
 8009382:	fba2 2303 	umull	r2, r3, r2, r3
 8009386:	0a9b      	lsrs	r3, r3, #10
 8009388:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939a:	2208      	movs	r2, #8
 800939c:	409a      	lsls	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4013      	ands	r3, r2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01a      	beq.n	80093dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0304 	and.w	r3, r3, #4
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d013      	beq.n	80093dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0204 	bic.w	r2, r2, #4
 80093c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c8:	2208      	movs	r2, #8
 80093ca:	409a      	lsls	r2, r3
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d4:	f043 0201 	orr.w	r2, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e0:	2201      	movs	r2, #1
 80093e2:	409a      	lsls	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4013      	ands	r3, r2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d012      	beq.n	8009412 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093fe:	2201      	movs	r2, #1
 8009400:	409a      	lsls	r2, r3
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940a:	f043 0202 	orr.w	r2, r3, #2
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009416:	2204      	movs	r2, #4
 8009418:	409a      	lsls	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	4013      	ands	r3, r2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d012      	beq.n	8009448 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009434:	2204      	movs	r2, #4
 8009436:	409a      	lsls	r2, r3
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009440:	f043 0204 	orr.w	r2, r3, #4
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800944c:	2210      	movs	r2, #16
 800944e:	409a      	lsls	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4013      	ands	r3, r2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d043      	beq.n	80094e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0308 	and.w	r3, r3, #8
 8009462:	2b00      	cmp	r3, #0
 8009464:	d03c      	beq.n	80094e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946a:	2210      	movs	r2, #16
 800946c:	409a      	lsls	r2, r3
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d018      	beq.n	80094b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d108      	bne.n	80094a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	2b00      	cmp	r3, #0
 8009494:	d024      	beq.n	80094e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	4798      	blx	r3
 800949e:	e01f      	b.n	80094e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01b      	beq.n	80094e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
 80094b0:	e016      	b.n	80094e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d107      	bne.n	80094d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 0208 	bic.w	r2, r2, #8
 80094ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e4:	2220      	movs	r2, #32
 80094e6:	409a      	lsls	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4013      	ands	r3, r2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 808e 	beq.w	800960e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0310 	and.w	r3, r3, #16
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8086 	beq.w	800960e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009506:	2220      	movs	r2, #32
 8009508:	409a      	lsls	r2, r3
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b05      	cmp	r3, #5
 8009518:	d136      	bne.n	8009588 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 0216 	bic.w	r2, r2, #22
 8009528:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	695a      	ldr	r2, [r3, #20]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009538:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	d103      	bne.n	800954a <HAL_DMA_IRQHandler+0x1da>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009546:	2b00      	cmp	r3, #0
 8009548:	d007      	beq.n	800955a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 0208 	bic.w	r2, r2, #8
 8009558:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955e:	223f      	movs	r2, #63	; 0x3f
 8009560:	409a      	lsls	r2, r3
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800957a:	2b00      	cmp	r3, #0
 800957c:	d07d      	beq.n	800967a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	4798      	blx	r3
        }
        return;
 8009586:	e078      	b.n	800967a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d01c      	beq.n	80095d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d108      	bne.n	80095b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d030      	beq.n	800960e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	4798      	blx	r3
 80095b4:	e02b      	b.n	800960e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d027      	beq.n	800960e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
 80095c6:	e022      	b.n	800960e <HAL_DMA_IRQHandler+0x29e>
 80095c8:	200000b0 	.word	0x200000b0
 80095cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10f      	bne.n	80095fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0210 	bic.w	r2, r2, #16
 80095ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009612:	2b00      	cmp	r3, #0
 8009614:	d032      	beq.n	800967c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d022      	beq.n	8009668 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2205      	movs	r2, #5
 8009626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0201 	bic.w	r2, r2, #1
 8009638:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	3301      	adds	r3, #1
 800963e:	60bb      	str	r3, [r7, #8]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	429a      	cmp	r2, r3
 8009644:	d307      	bcc.n	8009656 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1f2      	bne.n	800963a <HAL_DMA_IRQHandler+0x2ca>
 8009654:	e000      	b.n	8009658 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009656:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966c:	2b00      	cmp	r3, #0
 800966e:	d005      	beq.n	800967c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	4798      	blx	r3
 8009678:	e000      	b.n	800967c <HAL_DMA_IRQHandler+0x30c>
        return;
 800967a:	bf00      	nop
    }
  }
}
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop

08009684 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009692:	b2db      	uxtb	r3, r3
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80096d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	2b40      	cmp	r3, #64	; 0x40
 80096e4:	d108      	bne.n	80096f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80096f6:	e007      	b.n	8009708 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	60da      	str	r2, [r3, #12]
}
 8009708:	bf00      	nop
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	3b10      	subs	r3, #16
 8009724:	4a14      	ldr	r2, [pc, #80]	; (8009778 <DMA_CalcBaseAndBitshift+0x64>)
 8009726:	fba2 2303 	umull	r2, r3, r2, r3
 800972a:	091b      	lsrs	r3, r3, #4
 800972c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800972e:	4a13      	ldr	r2, [pc, #76]	; (800977c <DMA_CalcBaseAndBitshift+0x68>)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b03      	cmp	r3, #3
 8009740:	d909      	bls.n	8009756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	1d1a      	adds	r2, r3, #4
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	659a      	str	r2, [r3, #88]	; 0x58
 8009754:	e007      	b.n	8009766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800975e:	f023 0303 	bic.w	r3, r3, #3
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	aaaaaaab 	.word	0xaaaaaaab
 800977c:	0801a944 	.word	0x0801a944

08009780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d11f      	bne.n	80097da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b03      	cmp	r3, #3
 800979e:	d855      	bhi.n	800984c <DMA_CheckFifoParam+0xcc>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <DMA_CheckFifoParam+0x28>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097b9 	.word	0x080097b9
 80097ac:	080097cb 	.word	0x080097cb
 80097b0:	080097b9 	.word	0x080097b9
 80097b4:	0800984d 	.word	0x0800984d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d045      	beq.n	8009850 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097c8:	e042      	b.n	8009850 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097d2:	d13f      	bne.n	8009854 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097d8:	e03c      	b.n	8009854 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e2:	d121      	bne.n	8009828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d836      	bhi.n	8009858 <DMA_CheckFifoParam+0xd8>
 80097ea:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <DMA_CheckFifoParam+0x70>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009801 	.word	0x08009801
 80097f4:	08009807 	.word	0x08009807
 80097f8:	08009801 	.word	0x08009801
 80097fc:	08009819 	.word	0x08009819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	73fb      	strb	r3, [r7, #15]
      break;
 8009804:	e02f      	b.n	8009866 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d024      	beq.n	800985c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009816:	e021      	b.n	800985c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009820:	d11e      	bne.n	8009860 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009826:	e01b      	b.n	8009860 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d902      	bls.n	8009834 <DMA_CheckFifoParam+0xb4>
 800982e:	2b03      	cmp	r3, #3
 8009830:	d003      	beq.n	800983a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009832:	e018      	b.n	8009866 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
      break;
 8009838:	e015      	b.n	8009866 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00e      	beq.n	8009864 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	73fb      	strb	r3, [r7, #15]
      break;
 800984a:	e00b      	b.n	8009864 <DMA_CheckFifoParam+0xe4>
      break;
 800984c:	bf00      	nop
 800984e:	e00a      	b.n	8009866 <DMA_CheckFifoParam+0xe6>
      break;
 8009850:	bf00      	nop
 8009852:	e008      	b.n	8009866 <DMA_CheckFifoParam+0xe6>
      break;
 8009854:	bf00      	nop
 8009856:	e006      	b.n	8009866 <DMA_CheckFifoParam+0xe6>
      break;
 8009858:	bf00      	nop
 800985a:	e004      	b.n	8009866 <DMA_CheckFifoParam+0xe6>
      break;
 800985c:	bf00      	nop
 800985e:	e002      	b.n	8009866 <DMA_CheckFifoParam+0xe6>
      break;   
 8009860:	bf00      	nop
 8009862:	e000      	b.n	8009866 <DMA_CheckFifoParam+0xe6>
      break;
 8009864:	bf00      	nop
    }
  } 
  
  return status; 
 8009866:	7bfb      	ldrb	r3, [r7, #15]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009874:	b480      	push	{r7}
 8009876:	b089      	sub	sp, #36	; 0x24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800987e:	2300      	movs	r3, #0
 8009880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009882:	2300      	movs	r3, #0
 8009884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009886:	2300      	movs	r3, #0
 8009888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800988a:	2300      	movs	r3, #0
 800988c:	61fb      	str	r3, [r7, #28]
 800988e:	e177      	b.n	8009b80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009890:	2201      	movs	r2, #1
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	fa02 f303 	lsl.w	r3, r2, r3
 8009898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4013      	ands	r3, r2
 80098a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	f040 8166 	bne.w	8009b7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d00b      	beq.n	80098ce <HAL_GPIO_Init+0x5a>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d007      	beq.n	80098ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80098c2:	2b11      	cmp	r3, #17
 80098c4:	d003      	beq.n	80098ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2b12      	cmp	r3, #18
 80098cc:	d130      	bne.n	8009930 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	2203      	movs	r2, #3
 80098da:	fa02 f303 	lsl.w	r3, r2, r3
 80098de:	43db      	mvns	r3, r3
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	4013      	ands	r3, r2
 80098e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	fa02 f303 	lsl.w	r3, r2, r3
 80098f2:	69ba      	ldr	r2, [r7, #24]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009904:	2201      	movs	r2, #1
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	fa02 f303 	lsl.w	r3, r2, r3
 800990c:	43db      	mvns	r3, r3
 800990e:	69ba      	ldr	r2, [r7, #24]
 8009910:	4013      	ands	r3, r2
 8009912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	091b      	lsrs	r3, r3, #4
 800991a:	f003 0201 	and.w	r2, r3, #1
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	fa02 f303 	lsl.w	r3, r2, r3
 8009924:	69ba      	ldr	r2, [r7, #24]
 8009926:	4313      	orrs	r3, r2
 8009928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	2203      	movs	r2, #3
 800993c:	fa02 f303 	lsl.w	r3, r2, r3
 8009940:	43db      	mvns	r3, r3
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	4013      	ands	r3, r2
 8009946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	fa02 f303 	lsl.w	r3, r2, r3
 8009954:	69ba      	ldr	r2, [r7, #24]
 8009956:	4313      	orrs	r3, r2
 8009958:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	2b02      	cmp	r3, #2
 8009966:	d003      	beq.n	8009970 <HAL_GPIO_Init+0xfc>
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	2b12      	cmp	r3, #18
 800996e:	d123      	bne.n	80099b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	08da      	lsrs	r2, r3, #3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3208      	adds	r2, #8
 8009978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	220f      	movs	r2, #15
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	43db      	mvns	r3, r3
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	4013      	ands	r3, r2
 8009992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	691a      	ldr	r2, [r3, #16]
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	f003 0307 	and.w	r3, r3, #7
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	fa02 f303 	lsl.w	r3, r2, r3
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	08da      	lsrs	r2, r3, #3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3208      	adds	r2, #8
 80099b2:	69b9      	ldr	r1, [r7, #24]
 80099b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	2203      	movs	r2, #3
 80099c4:	fa02 f303 	lsl.w	r3, r2, r3
 80099c8:	43db      	mvns	r3, r3
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	4013      	ands	r3, r2
 80099ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f003 0203 	and.w	r2, r3, #3
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	fa02 f303 	lsl.w	r3, r2, r3
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 80c0 	beq.w	8009b7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099fa:	2300      	movs	r3, #0
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	4b65      	ldr	r3, [pc, #404]	; (8009b94 <HAL_GPIO_Init+0x320>)
 8009a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a02:	4a64      	ldr	r2, [pc, #400]	; (8009b94 <HAL_GPIO_Init+0x320>)
 8009a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a08:	6453      	str	r3, [r2, #68]	; 0x44
 8009a0a:	4b62      	ldr	r3, [pc, #392]	; (8009b94 <HAL_GPIO_Init+0x320>)
 8009a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009a16:	4a60      	ldr	r2, [pc, #384]	; (8009b98 <HAL_GPIO_Init+0x324>)
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	089b      	lsrs	r3, r3, #2
 8009a1c:	3302      	adds	r3, #2
 8009a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	f003 0303 	and.w	r3, r3, #3
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	220f      	movs	r2, #15
 8009a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a32:	43db      	mvns	r3, r3
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	4013      	ands	r3, r2
 8009a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a57      	ldr	r2, [pc, #348]	; (8009b9c <HAL_GPIO_Init+0x328>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d037      	beq.n	8009ab2 <HAL_GPIO_Init+0x23e>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a56      	ldr	r2, [pc, #344]	; (8009ba0 <HAL_GPIO_Init+0x32c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d031      	beq.n	8009aae <HAL_GPIO_Init+0x23a>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a55      	ldr	r2, [pc, #340]	; (8009ba4 <HAL_GPIO_Init+0x330>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d02b      	beq.n	8009aaa <HAL_GPIO_Init+0x236>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a54      	ldr	r2, [pc, #336]	; (8009ba8 <HAL_GPIO_Init+0x334>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d025      	beq.n	8009aa6 <HAL_GPIO_Init+0x232>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a53      	ldr	r2, [pc, #332]	; (8009bac <HAL_GPIO_Init+0x338>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d01f      	beq.n	8009aa2 <HAL_GPIO_Init+0x22e>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a52      	ldr	r2, [pc, #328]	; (8009bb0 <HAL_GPIO_Init+0x33c>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d019      	beq.n	8009a9e <HAL_GPIO_Init+0x22a>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a51      	ldr	r2, [pc, #324]	; (8009bb4 <HAL_GPIO_Init+0x340>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d013      	beq.n	8009a9a <HAL_GPIO_Init+0x226>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a50      	ldr	r2, [pc, #320]	; (8009bb8 <HAL_GPIO_Init+0x344>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d00d      	beq.n	8009a96 <HAL_GPIO_Init+0x222>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a4f      	ldr	r2, [pc, #316]	; (8009bbc <HAL_GPIO_Init+0x348>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d007      	beq.n	8009a92 <HAL_GPIO_Init+0x21e>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a4e      	ldr	r2, [pc, #312]	; (8009bc0 <HAL_GPIO_Init+0x34c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d101      	bne.n	8009a8e <HAL_GPIO_Init+0x21a>
 8009a8a:	2309      	movs	r3, #9
 8009a8c:	e012      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009a8e:	230a      	movs	r3, #10
 8009a90:	e010      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009a92:	2308      	movs	r3, #8
 8009a94:	e00e      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009a96:	2307      	movs	r3, #7
 8009a98:	e00c      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009a9a:	2306      	movs	r3, #6
 8009a9c:	e00a      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009a9e:	2305      	movs	r3, #5
 8009aa0:	e008      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009aa2:	2304      	movs	r3, #4
 8009aa4:	e006      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	e004      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009aaa:	2302      	movs	r3, #2
 8009aac:	e002      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e000      	b.n	8009ab4 <HAL_GPIO_Init+0x240>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	69fa      	ldr	r2, [r7, #28]
 8009ab6:	f002 0203 	and.w	r2, r2, #3
 8009aba:	0092      	lsls	r2, r2, #2
 8009abc:	4093      	lsls	r3, r2
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ac4:	4934      	ldr	r1, [pc, #208]	; (8009b98 <HAL_GPIO_Init+0x324>)
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	089b      	lsrs	r3, r3, #2
 8009aca:	3302      	adds	r3, #2
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ad2:	4b3c      	ldr	r3, [pc, #240]	; (8009bc4 <HAL_GPIO_Init+0x350>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	43db      	mvns	r3, r3
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	4013      	ands	r3, r2
 8009ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009af6:	4a33      	ldr	r2, [pc, #204]	; (8009bc4 <HAL_GPIO_Init+0x350>)
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009afc:	4b31      	ldr	r3, [pc, #196]	; (8009bc4 <HAL_GPIO_Init+0x350>)
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	43db      	mvns	r3, r3
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	4013      	ands	r3, r2
 8009b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d003      	beq.n	8009b20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009b18:	69ba      	ldr	r2, [r7, #24]
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009b20:	4a28      	ldr	r2, [pc, #160]	; (8009bc4 <HAL_GPIO_Init+0x350>)
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009b26:	4b27      	ldr	r3, [pc, #156]	; (8009bc4 <HAL_GPIO_Init+0x350>)
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	43db      	mvns	r3, r3
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	4013      	ands	r3, r2
 8009b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d003      	beq.n	8009b4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009b42:	69ba      	ldr	r2, [r7, #24]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009b4a:	4a1e      	ldr	r2, [pc, #120]	; (8009bc4 <HAL_GPIO_Init+0x350>)
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009b50:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <HAL_GPIO_Init+0x350>)
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	43db      	mvns	r3, r3
 8009b5a:	69ba      	ldr	r2, [r7, #24]
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d003      	beq.n	8009b74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009b6c:	69ba      	ldr	r2, [r7, #24]
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009b74:	4a13      	ldr	r2, [pc, #76]	; (8009bc4 <HAL_GPIO_Init+0x350>)
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	61fb      	str	r3, [r7, #28]
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	2b0f      	cmp	r3, #15
 8009b84:	f67f ae84 	bls.w	8009890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009b88:	bf00      	nop
 8009b8a:	3724      	adds	r7, #36	; 0x24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	40023800 	.word	0x40023800
 8009b98:	40013800 	.word	0x40013800
 8009b9c:	40020000 	.word	0x40020000
 8009ba0:	40020400 	.word	0x40020400
 8009ba4:	40020800 	.word	0x40020800
 8009ba8:	40020c00 	.word	0x40020c00
 8009bac:	40021000 	.word	0x40021000
 8009bb0:	40021400 	.word	0x40021400
 8009bb4:	40021800 	.word	0x40021800
 8009bb8:	40021c00 	.word	0x40021c00
 8009bbc:	40022000 	.word	0x40022000
 8009bc0:	40022400 	.word	0x40022400
 8009bc4:	40013c00 	.word	0x40013c00

08009bc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	691a      	ldr	r2, [r3, #16]
 8009bd8:	887b      	ldrh	r3, [r7, #2]
 8009bda:	4013      	ands	r3, r2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009be0:	2301      	movs	r3, #1
 8009be2:	73fb      	strb	r3, [r7, #15]
 8009be4:	e001      	b.n	8009bea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	807b      	strh	r3, [r7, #2]
 8009c04:	4613      	mov	r3, r2
 8009c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009c08:	787b      	ldrb	r3, [r7, #1]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c0e:	887a      	ldrh	r2, [r7, #2]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009c14:	e003      	b.n	8009c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009c16:	887b      	ldrh	r3, [r7, #2]
 8009c18:	041a      	lsls	r2, r3, #16
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	619a      	str	r2, [r3, #24]
}
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
	...

08009c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e11f      	b.n	8009e7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7fd fe38 	bl	80078c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2224      	movs	r2, #36	; 0x24
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 0201 	bic.w	r2, r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009c90:	f003 fc70 	bl	800d574 <HAL_RCC_GetPCLK1Freq>
 8009c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	4a7b      	ldr	r2, [pc, #492]	; (8009e88 <HAL_I2C_Init+0x25c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d807      	bhi.n	8009cb0 <HAL_I2C_Init+0x84>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4a7a      	ldr	r2, [pc, #488]	; (8009e8c <HAL_I2C_Init+0x260>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	bf94      	ite	ls
 8009ca8:	2301      	movls	r3, #1
 8009caa:	2300      	movhi	r3, #0
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	e006      	b.n	8009cbe <HAL_I2C_Init+0x92>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4a77      	ldr	r2, [pc, #476]	; (8009e90 <HAL_I2C_Init+0x264>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	bf94      	ite	ls
 8009cb8:	2301      	movls	r3, #1
 8009cba:	2300      	movhi	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e0db      	b.n	8009e7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4a72      	ldr	r2, [pc, #456]	; (8009e94 <HAL_I2C_Init+0x268>)
 8009cca:	fba2 2303 	umull	r2, r3, r2, r3
 8009cce:	0c9b      	lsrs	r3, r3, #18
 8009cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	4a64      	ldr	r2, [pc, #400]	; (8009e88 <HAL_I2C_Init+0x25c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d802      	bhi.n	8009d00 <HAL_I2C_Init+0xd4>
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	e009      	b.n	8009d14 <HAL_I2C_Init+0xe8>
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009d06:	fb02 f303 	mul.w	r3, r2, r3
 8009d0a:	4a63      	ldr	r2, [pc, #396]	; (8009e98 <HAL_I2C_Init+0x26c>)
 8009d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d10:	099b      	lsrs	r3, r3, #6
 8009d12:	3301      	adds	r3, #1
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	6812      	ldr	r2, [r2, #0]
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009d26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	4956      	ldr	r1, [pc, #344]	; (8009e88 <HAL_I2C_Init+0x25c>)
 8009d30:	428b      	cmp	r3, r1
 8009d32:	d80d      	bhi.n	8009d50 <HAL_I2C_Init+0x124>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	1e59      	subs	r1, r3, #1
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d42:	3301      	adds	r3, #1
 8009d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	bf38      	it	cc
 8009d4c:	2304      	movcc	r3, #4
 8009d4e:	e04f      	b.n	8009df0 <HAL_I2C_Init+0x1c4>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d111      	bne.n	8009d7c <HAL_I2C_Init+0x150>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	1e58      	subs	r0, r3, #1
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6859      	ldr	r1, [r3, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	440b      	add	r3, r1
 8009d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bf0c      	ite	eq
 8009d74:	2301      	moveq	r3, #1
 8009d76:	2300      	movne	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	e012      	b.n	8009da2 <HAL_I2C_Init+0x176>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	1e58      	subs	r0, r3, #1
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6859      	ldr	r1, [r3, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	440b      	add	r3, r1
 8009d8a:	0099      	lsls	r1, r3, #2
 8009d8c:	440b      	add	r3, r1
 8009d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d92:	3301      	adds	r3, #1
 8009d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	bf0c      	ite	eq
 8009d9c:	2301      	moveq	r3, #1
 8009d9e:	2300      	movne	r3, #0
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <HAL_I2C_Init+0x17e>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e022      	b.n	8009df0 <HAL_I2C_Init+0x1c4>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10e      	bne.n	8009dd0 <HAL_I2C_Init+0x1a4>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	1e58      	subs	r0, r3, #1
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6859      	ldr	r1, [r3, #4]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	440b      	add	r3, r1
 8009dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dce:	e00f      	b.n	8009df0 <HAL_I2C_Init+0x1c4>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	1e58      	subs	r0, r3, #1
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6859      	ldr	r1, [r3, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	440b      	add	r3, r1
 8009dde:	0099      	lsls	r1, r3, #2
 8009de0:	440b      	add	r3, r1
 8009de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009de6:	3301      	adds	r3, #1
 8009de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	6809      	ldr	r1, [r1, #0]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	69da      	ldr	r2, [r3, #28]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6911      	ldr	r1, [r2, #16]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	68d2      	ldr	r2, [r2, #12]
 8009e2a:	4311      	orrs	r1, r2
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	430b      	orrs	r3, r1
 8009e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695a      	ldr	r2, [r3, #20]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	431a      	orrs	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	430a      	orrs	r2, r1
 8009e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f042 0201 	orr.w	r2, r2, #1
 8009e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	000186a0 	.word	0x000186a0
 8009e8c:	001e847f 	.word	0x001e847f
 8009e90:	003d08ff 	.word	0x003d08ff
 8009e94:	431bde83 	.word	0x431bde83
 8009e98:	10624dd3 	.word	0x10624dd3

08009e9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4603      	mov	r3, r0
 8009eac:	817b      	strh	r3, [r7, #10]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	813b      	strh	r3, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009eb6:	f7ff f823 	bl	8008f00 <HAL_GetTick>
 8009eba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	f040 80d9 	bne.w	800a07c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	2319      	movs	r3, #25
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	496d      	ldr	r1, [pc, #436]	; (800a088 <HAL_I2C_Mem_Write+0x1ec>)
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f002 fb82 	bl	800c5de <I2C_WaitOnFlagUntilTimeout>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e0cc      	b.n	800a07e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d101      	bne.n	8009ef2 <HAL_I2C_Mem_Write+0x56>
 8009eee:	2302      	movs	r3, #2
 8009ef0:	e0c5      	b.n	800a07e <HAL_I2C_Mem_Write+0x1e2>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d007      	beq.n	8009f18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 0201 	orr.w	r2, r2, #1
 8009f16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2221      	movs	r2, #33	; 0x21
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2240      	movs	r2, #64	; 0x40
 8009f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a3a      	ldr	r2, [r7, #32]
 8009f42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4a4d      	ldr	r2, [pc, #308]	; (800a08c <HAL_I2C_Mem_Write+0x1f0>)
 8009f58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f5a:	88f8      	ldrh	r0, [r7, #6]
 8009f5c:	893a      	ldrh	r2, [r7, #8]
 8009f5e:	8979      	ldrh	r1, [r7, #10]
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	4603      	mov	r3, r0
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f002 f82c 	bl	800bfc8 <I2C_RequestMemoryWrite>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d052      	beq.n	800a01c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e081      	b.n	800a07e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f002 fc03 	bl	800c78a <I2C_WaitOnTXEFlagUntilTimeout>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00d      	beq.n	8009fa6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d107      	bne.n	8009fa2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e06b      	b.n	800a07e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	781a      	ldrb	r2, [r3, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d11b      	bne.n	800a01c <HAL_I2C_Mem_Write+0x180>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d017      	beq.n	800a01c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	781a      	ldrb	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a006:	3b01      	subs	r3, #1
 800a008:	b29a      	uxth	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a012:	b29b      	uxth	r3, r3
 800a014:	3b01      	subs	r3, #1
 800a016:	b29a      	uxth	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1aa      	bne.n	8009f7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f002 fbef 	bl	800c80c <I2C_WaitOnBTFFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00d      	beq.n	800a050 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a038:	2b04      	cmp	r3, #4
 800a03a:	d107      	bne.n	800a04c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a04a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e016      	b.n	800a07e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a05e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2220      	movs	r2, #32
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	e000      	b.n	800a07e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a07c:	2302      	movs	r3, #2
  }
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	00100002 	.word	0x00100002
 800a08c:	ffff0000 	.word	0xffff0000

0800a090 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b08c      	sub	sp, #48	; 0x30
 800a094:	af02      	add	r7, sp, #8
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	4608      	mov	r0, r1
 800a09a:	4611      	mov	r1, r2
 800a09c:	461a      	mov	r2, r3
 800a09e:	4603      	mov	r3, r0
 800a0a0:	817b      	strh	r3, [r7, #10]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	813b      	strh	r3, [r7, #8]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a0aa:	f7fe ff29 	bl	8008f00 <HAL_GetTick>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	f040 8208 	bne.w	800a4ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	2319      	movs	r3, #25
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	497b      	ldr	r1, [pc, #492]	; (800a2b4 <HAL_I2C_Mem_Read+0x224>)
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f002 fa88 	bl	800c5de <I2C_WaitOnFlagUntilTimeout>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e1fb      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <HAL_I2C_Mem_Read+0x56>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	e1f4      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x440>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d007      	beq.n	800a10c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 0201 	orr.w	r2, r2, #1
 800a10a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a11a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2222      	movs	r2, #34	; 0x22
 800a120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2240      	movs	r2, #64	; 0x40
 800a128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a13c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a142:	b29a      	uxth	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	4a5b      	ldr	r2, [pc, #364]	; (800a2b8 <HAL_I2C_Mem_Read+0x228>)
 800a14c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a14e:	88f8      	ldrh	r0, [r7, #6]
 800a150:	893a      	ldrh	r2, [r7, #8]
 800a152:	8979      	ldrh	r1, [r7, #10]
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	9301      	str	r3, [sp, #4]
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	4603      	mov	r3, r0
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f001 ffc6 	bl	800c0f0 <I2C_RequestMemoryRead>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e1b0      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a172:	2b00      	cmp	r3, #0
 800a174:	d113      	bne.n	800a19e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a176:	2300      	movs	r3, #0
 800a178:	623b      	str	r3, [r7, #32]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	623b      	str	r3, [r7, #32]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	623b      	str	r3, [r7, #32]
 800a18a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	e184      	b.n	800a4a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d11b      	bne.n	800a1de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	61fb      	str	r3, [r7, #28]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	61fb      	str	r3, [r7, #28]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	61fb      	str	r3, [r7, #28]
 800a1ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	e164      	b.n	800a4a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d11b      	bne.n	800a21e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a206:	2300      	movs	r3, #0
 800a208:	61bb      	str	r3, [r7, #24]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	61bb      	str	r3, [r7, #24]
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	e144      	b.n	800a4a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a21e:	2300      	movs	r3, #0
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a234:	e138      	b.n	800a4a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	f200 80f1 	bhi.w	800a422 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a244:	2b01      	cmp	r3, #1
 800a246:	d123      	bne.n	800a290 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a24a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f002 fb1e 	bl	800c88e <I2C_WaitOnRXNEFlagUntilTimeout>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	e139      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691a      	ldr	r2, [r3, #16]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	b2d2      	uxtb	r2, r2
 800a268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a278:	3b01      	subs	r3, #1
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a284:	b29b      	uxth	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a28e:	e10b      	b.n	800a4a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a294:	2b02      	cmp	r3, #2
 800a296:	d14e      	bne.n	800a336 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	2200      	movs	r2, #0
 800a2a0:	4906      	ldr	r1, [pc, #24]	; (800a2bc <HAL_I2C_Mem_Read+0x22c>)
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f002 f99b 	bl	800c5de <I2C_WaitOnFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d008      	beq.n	800a2c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e10e      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x440>
 800a2b2:	bf00      	nop
 800a2b4:	00100002 	.word	0x00100002
 800a2b8:	ffff0000 	.word	0xffff0000
 800a2bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691a      	ldr	r2, [r3, #16]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30c:	b2d2      	uxtb	r2, r2
 800a30e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a31e:	3b01      	subs	r3, #1
 800a320:	b29a      	uxth	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a334:	e0b8      	b.n	800a4a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	2200      	movs	r2, #0
 800a33e:	4966      	ldr	r1, [pc, #408]	; (800a4d8 <HAL_I2C_Mem_Read+0x448>)
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f002 f94c 	bl	800c5de <I2C_WaitOnFlagUntilTimeout>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e0bf      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a35e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	691a      	ldr	r2, [r3, #16]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36a:	b2d2      	uxtb	r2, r2
 800a36c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	2200      	movs	r2, #0
 800a39a:	494f      	ldr	r1, [pc, #316]	; (800a4d8 <HAL_I2C_Mem_Read+0x448>)
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f002 f91e 	bl	800c5de <I2C_WaitOnFlagUntilTimeout>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e091      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	691a      	ldr	r2, [r3, #16]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	b2d2      	uxtb	r2, r2
 800a3c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	691a      	ldr	r2, [r3, #16]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a40a:	3b01      	subs	r3, #1
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a416:	b29b      	uxth	r3, r3
 800a418:	3b01      	subs	r3, #1
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a420:	e042      	b.n	800a4a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f002 fa31 	bl	800c88e <I2C_WaitOnRXNEFlagUntilTimeout>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e04c      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691a      	ldr	r2, [r3, #16]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	b2d2      	uxtb	r2, r2
 800a442:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a452:	3b01      	subs	r3, #1
 800a454:	b29a      	uxth	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a45e:	b29b      	uxth	r3, r3
 800a460:	3b01      	subs	r3, #1
 800a462:	b29a      	uxth	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	2b04      	cmp	r3, #4
 800a474:	d118      	bne.n	800a4a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a492:	3b01      	subs	r3, #1
 800a494:	b29a      	uxth	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f47f aec2 	bne.w	800a236 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e000      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a4ce:	2302      	movs	r3, #2
  }
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3728      	adds	r7, #40	; 0x28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	00010004 	.word	0x00010004

0800a4dc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	817b      	strh	r3, [r7, #10]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	813b      	strh	r3, [r7, #8]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b20      	cmp	r3, #32
 800a504:	f040 809a 	bne.w	800a63c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a508:	4b50      	ldr	r3, [pc, #320]	; (800a64c <HAL_I2C_Mem_Read_IT+0x170>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	08db      	lsrs	r3, r3, #3
 800a50e:	4a50      	ldr	r2, [pc, #320]	; (800a650 <HAL_I2C_Mem_Read_IT+0x174>)
 800a510:	fba2 2303 	umull	r2, r3, r2, r3
 800a514:	0a1a      	lsrs	r2, r3, #8
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	009a      	lsls	r2, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	3b01      	subs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d116      	bne.n	800a55c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2220      	movs	r2, #32
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	f043 0220 	orr.w	r2, r3, #32
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e070      	b.n	800a63e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	f003 0302 	and.w	r3, r3, #2
 800a566:	2b02      	cmp	r3, #2
 800a568:	d0db      	beq.n	800a522 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a570:	2b01      	cmp	r3, #1
 800a572:	d101      	bne.n	800a578 <HAL_I2C_Mem_Read_IT+0x9c>
 800a574:	2302      	movs	r3, #2
 800a576:	e062      	b.n	800a63e <HAL_I2C_Mem_Read_IT+0x162>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d007      	beq.n	800a59e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f042 0201 	orr.w	r2, r2, #1
 800a59c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2222      	movs	r2, #34	; 0x22
 800a5b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2240      	movs	r2, #64	; 0x40
 800a5ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6a3a      	ldr	r2, [r7, #32]
 800a5c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a5ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	4a1d      	ldr	r2, [pc, #116]	; (800a654 <HAL_I2C_Mem_Read_IT+0x178>)
 800a5de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800a5e0:	897a      	ldrh	r2, [r7, #10]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800a5e6:	893a      	ldrh	r2, [r7, #8]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800a5ec:	88fa      	ldrh	r2, [r7, #6]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a606:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a616:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a624:	2b00      	cmp	r3, #0
 800a626:	d007      	beq.n	800a638 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800a636:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	e000      	b.n	800a63e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800a63c:	2302      	movs	r3, #2
  }
}
 800a63e:	4618      	mov	r0, r3
 800a640:	371c      	adds	r7, #28
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	200000b0 	.word	0x200000b0
 800a650:	14f8b589 	.word	0x14f8b589
 800a654:	ffff0000 	.word	0xffff0000

0800a658 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08c      	sub	sp, #48	; 0x30
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	4608      	mov	r0, r1
 800a662:	4611      	mov	r1, r2
 800a664:	461a      	mov	r2, r3
 800a666:	4603      	mov	r3, r0
 800a668:	817b      	strh	r3, [r7, #10]
 800a66a:	460b      	mov	r3, r1
 800a66c:	813b      	strh	r3, [r7, #8]
 800a66e:	4613      	mov	r3, r2
 800a670:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a672:	f7fe fc45 	bl	8008f00 <HAL_GetTick>
 800a676:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800a678:	2300      	movs	r3, #0
 800a67a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b20      	cmp	r3, #32
 800a686:	f040 8123 	bne.w	800a8d0 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a68a:	4b94      	ldr	r3, [pc, #592]	; (800a8dc <HAL_I2C_Mem_Read_DMA+0x284>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	08db      	lsrs	r3, r3, #3
 800a690:	4a93      	ldr	r2, [pc, #588]	; (800a8e0 <HAL_I2C_Mem_Read_DMA+0x288>)
 800a692:	fba2 2303 	umull	r2, r3, r2, r3
 800a696:	0a1a      	lsrs	r2, r3, #8
 800a698:	4613      	mov	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	009a      	lsls	r2, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d116      	bne.n	800a6de <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	f043 0220 	orr.w	r2, r3, #32
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e0f9      	b.n	800a8d2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d0db      	beq.n	800a6a4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d101      	bne.n	800a6fa <HAL_I2C_Mem_Read_DMA+0xa2>
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	e0eb      	b.n	800a8d2 <HAL_I2C_Mem_Read_DMA+0x27a>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d007      	beq.n	800a720 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f042 0201 	orr.w	r2, r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a72e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2222      	movs	r2, #34	; 0x22
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2240      	movs	r2, #64	; 0x40
 800a73c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a74a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a750:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a756:	b29a      	uxth	r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4a61      	ldr	r2, [pc, #388]	; (800a8e4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800a760:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a766:	2b00      	cmp	r3, #0
 800a768:	f000 8085 	beq.w	800a876 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a770:	4a5d      	ldr	r2, [pc, #372]	; (800a8e8 <HAL_I2C_Mem_Read_DMA+0x290>)
 800a772:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a778:	4a5c      	ldr	r2, [pc, #368]	; (800a8ec <HAL_I2C_Mem_Read_DMA+0x294>)
 800a77a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a780:	2200      	movs	r2, #0
 800a782:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a788:	2200      	movs	r2, #0
 800a78a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	2200      	movs	r2, #0
 800a792:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a798:	2200      	movs	r2, #0
 800a79a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3310      	adds	r3, #16
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b2:	f7fe fd63 	bl	800927c <HAL_DMA_Start_IT>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 800a7bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d144      	bne.n	800a84e <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a7c4:	88f8      	ldrh	r0, [r7, #6]
 800a7c6:	893a      	ldrh	r2, [r7, #8]
 800a7c8:	8979      	ldrh	r1, [r7, #10]
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	2323      	movs	r3, #35	; 0x23
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f001 fc8b 	bl	800c0f0 <I2C_RequestMemoryRead>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e076      	b.n	800a8d2 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d108      	bne.n	800a7fe <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	e007      	b.n	800a80e <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a80c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a80e:	2300      	movs	r3, #0
 800a810:	61bb      	str	r3, [r7, #24]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	61bb      	str	r3, [r7, #24]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	61bb      	str	r3, [r7, #24]
 800a822:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a83a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a84a:	605a      	str	r2, [r3, #4]
 800a84c:	e03e      	b.n	800a8cc <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2220      	movs	r2, #32
 800a852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	f043 0210 	orr.w	r2, r3, #16
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e02d      	b.n	800a8d2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a876:	88f8      	ldrh	r0, [r7, #6]
 800a878:	893a      	ldrh	r2, [r7, #8]
 800a87a:	8979      	ldrh	r1, [r7, #10]
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	2323      	movs	r3, #35	; 0x23
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	4603      	mov	r3, r0
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f001 fc32 	bl	800c0f0 <I2C_RequestMemoryRead>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e01d      	b.n	800a8d2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a896:	2300      	movs	r3, #0
 800a898:	617b      	str	r3, [r7, #20]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	617b      	str	r3, [r7, #20]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	617b      	str	r3, [r7, #20]
 800a8aa:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ba:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	e000      	b.n	800a8d2 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 800a8d0:	2302      	movs	r3, #2
  }
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3728      	adds	r7, #40	; 0x28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	200000b0 	.word	0x200000b0
 800a8e0:	14f8b589 	.word	0x14f8b589
 800a8e4:	ffff0000 	.word	0xffff0000
 800a8e8:	0800c2bd 	.word	0x0800c2bd
 800a8ec:	0800c467 	.word	0x0800c467

0800a8f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b088      	sub	sp, #32
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a908:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a910:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a918:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	2b10      	cmp	r3, #16
 800a91e:	d003      	beq.n	800a928 <HAL_I2C_EV_IRQHandler+0x38>
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	2b40      	cmp	r3, #64	; 0x40
 800a924:	f040 80b6 	bne.w	800aa94 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10d      	bne.n	800a95e <HAL_I2C_EV_IRQHandler+0x6e>
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a948:	d003      	beq.n	800a952 <HAL_I2C_EV_IRQHandler+0x62>
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a950:	d101      	bne.n	800a956 <HAL_I2C_EV_IRQHandler+0x66>
 800a952:	2301      	movs	r3, #1
 800a954:	e000      	b.n	800a958 <HAL_I2C_EV_IRQHandler+0x68>
 800a956:	2300      	movs	r3, #0
 800a958:	2b01      	cmp	r3, #1
 800a95a:	f000 8127 	beq.w	800abac <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00c      	beq.n	800a982 <HAL_I2C_EV_IRQHandler+0x92>
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	0a5b      	lsrs	r3, r3, #9
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	d006      	beq.n	800a982 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f002 f80f 	bl	800c998 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fd12 	bl	800b3a4 <I2C_Master_SB>
 800a980:	e087      	b.n	800aa92 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	08db      	lsrs	r3, r3, #3
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d009      	beq.n	800a9a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	0a5b      	lsrs	r3, r3, #9
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fd88 	bl	800b4b0 <I2C_Master_ADD10>
 800a9a0:	e077      	b.n	800aa92 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	085b      	lsrs	r3, r3, #1
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d009      	beq.n	800a9c2 <HAL_I2C_EV_IRQHandler+0xd2>
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	0a5b      	lsrs	r3, r3, #9
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fda2 	bl	800b504 <I2C_Master_ADDR>
 800a9c0:	e067      	b.n	800aa92 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	089b      	lsrs	r3, r3, #2
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d030      	beq.n	800aa30 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9dc:	f000 80e8 	beq.w	800abb0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	09db      	lsrs	r3, r3, #7
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00f      	beq.n	800aa0c <HAL_I2C_EV_IRQHandler+0x11c>
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	0a9b      	lsrs	r3, r3, #10
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <HAL_I2C_EV_IRQHandler+0x11c>
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	089b      	lsrs	r3, r3, #2
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d103      	bne.n	800aa0c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f9de 	bl	800adc6 <I2C_MasterTransmit_TXE>
 800aa0a:	e042      	b.n	800aa92 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	089b      	lsrs	r3, r3, #2
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 80cb 	beq.w	800abb0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	0a5b      	lsrs	r3, r3, #9
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 80c4 	beq.w	800abb0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fa68 	bl	800aefe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aa2e:	e0bf      	b.n	800abb0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa3e:	f000 80b7 	beq.w	800abb0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	099b      	lsrs	r3, r3, #6
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00f      	beq.n	800aa6e <HAL_I2C_EV_IRQHandler+0x17e>
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	0a9b      	lsrs	r3, r3, #10
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d009      	beq.n	800aa6e <HAL_I2C_EV_IRQHandler+0x17e>
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	089b      	lsrs	r3, r3, #2
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fb30 	bl	800b0cc <I2C_MasterReceive_RXNE>
 800aa6c:	e011      	b.n	800aa92 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	089b      	lsrs	r3, r3, #2
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 809a 	beq.w	800abb0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	0a5b      	lsrs	r3, r3, #9
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 8093 	beq.w	800abb0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fba0 	bl	800b1d0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aa90:	e08e      	b.n	800abb0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800aa92:	e08d      	b.n	800abb0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d004      	beq.n	800aaa6 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	61fb      	str	r3, [r7, #28]
 800aaa4:	e007      	b.n	800aab6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	695b      	ldr	r3, [r3, #20]
 800aab4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	085b      	lsrs	r3, r3, #1
 800aaba:	f003 0301 	and.w	r3, r3, #1
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d012      	beq.n	800aae8 <HAL_I2C_EV_IRQHandler+0x1f8>
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	0a5b      	lsrs	r3, r3, #9
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00c      	beq.n	800aae8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800aade:	69b9      	ldr	r1, [r7, #24]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 ff5e 	bl	800b9a2 <I2C_Slave_ADDR>
 800aae6:	e066      	b.n	800abb6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	091b      	lsrs	r3, r3, #4
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d009      	beq.n	800ab08 <HAL_I2C_EV_IRQHandler+0x218>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	0a5b      	lsrs	r3, r3, #9
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 ff93 	bl	800ba2c <I2C_Slave_STOPF>
 800ab06:	e056      	b.n	800abb6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	2b21      	cmp	r3, #33	; 0x21
 800ab0c:	d002      	beq.n	800ab14 <HAL_I2C_EV_IRQHandler+0x224>
 800ab0e:	7bbb      	ldrb	r3, [r7, #14]
 800ab10:	2b29      	cmp	r3, #41	; 0x29
 800ab12:	d125      	bne.n	800ab60 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	09db      	lsrs	r3, r3, #7
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00f      	beq.n	800ab40 <HAL_I2C_EV_IRQHandler+0x250>
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	0a9b      	lsrs	r3, r3, #10
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d009      	beq.n	800ab40 <HAL_I2C_EV_IRQHandler+0x250>
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	089b      	lsrs	r3, r3, #2
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d103      	bne.n	800ab40 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fe74 	bl	800b826 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ab3e:	e039      	b.n	800abb4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	089b      	lsrs	r3, r3, #2
 800ab44:	f003 0301 	and.w	r3, r3, #1
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d033      	beq.n	800abb4 <HAL_I2C_EV_IRQHandler+0x2c4>
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	0a5b      	lsrs	r3, r3, #9
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d02d      	beq.n	800abb4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fea1 	bl	800b8a0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ab5e:	e029      	b.n	800abb4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	099b      	lsrs	r3, r3, #6
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00f      	beq.n	800ab8c <HAL_I2C_EV_IRQHandler+0x29c>
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	0a9b      	lsrs	r3, r3, #10
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d009      	beq.n	800ab8c <HAL_I2C_EV_IRQHandler+0x29c>
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	089b      	lsrs	r3, r3, #2
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d103      	bne.n	800ab8c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 feac 	bl	800b8e2 <I2C_SlaveReceive_RXNE>
 800ab8a:	e014      	b.n	800abb6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	089b      	lsrs	r3, r3, #2
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00e      	beq.n	800abb6 <HAL_I2C_EV_IRQHandler+0x2c6>
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	0a5b      	lsrs	r3, r3, #9
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d008      	beq.n	800abb6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 feda 	bl	800b95e <I2C_SlaveReceive_BTF>
 800abaa:	e004      	b.n	800abb6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800abac:	bf00      	nop
 800abae:	e002      	b.n	800abb6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800abb0:	bf00      	nop
 800abb2:	e000      	b.n	800abb6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800abb4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800abb6:	3720      	adds	r7, #32
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b08a      	sub	sp, #40	; 0x28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800abd4:	2300      	movs	r3, #0
 800abd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abde:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	0a1b      	lsrs	r3, r3, #8
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00e      	beq.n	800ac0a <HAL_I2C_ER_IRQHandler+0x4e>
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	0a1b      	lsrs	r3, r3, #8
 800abf0:	f003 0301 	and.w	r3, r3, #1
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d008      	beq.n	800ac0a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfa:	f043 0301 	orr.w	r3, r3, #1
 800abfe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac08:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	0a5b      	lsrs	r3, r3, #9
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00e      	beq.n	800ac34 <HAL_I2C_ER_IRQHandler+0x78>
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	0a1b      	lsrs	r3, r3, #8
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d008      	beq.n	800ac34 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac24:	f043 0302 	orr.w	r3, r3, #2
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800ac32:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	0a9b      	lsrs	r3, r3, #10
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d03f      	beq.n	800acc0 <HAL_I2C_ER_IRQHandler+0x104>
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	0a1b      	lsrs	r3, r3, #8
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d039      	beq.n	800acc0 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800ac4c:	7efb      	ldrb	r3, [r7, #27]
 800ac4e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac5e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac64:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800ac66:	7ebb      	ldrb	r3, [r7, #26]
 800ac68:	2b20      	cmp	r3, #32
 800ac6a:	d112      	bne.n	800ac92 <HAL_I2C_ER_IRQHandler+0xd6>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10f      	bne.n	800ac92 <HAL_I2C_ER_IRQHandler+0xd6>
 800ac72:	7cfb      	ldrb	r3, [r7, #19]
 800ac74:	2b21      	cmp	r3, #33	; 0x21
 800ac76:	d008      	beq.n	800ac8a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800ac78:	7cfb      	ldrb	r3, [r7, #19]
 800ac7a:	2b29      	cmp	r3, #41	; 0x29
 800ac7c:	d005      	beq.n	800ac8a <HAL_I2C_ER_IRQHandler+0xce>
 800ac7e:	7cfb      	ldrb	r3, [r7, #19]
 800ac80:	2b28      	cmp	r3, #40	; 0x28
 800ac82:	d106      	bne.n	800ac92 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b21      	cmp	r3, #33	; 0x21
 800ac88:	d103      	bne.n	800ac92 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fffe 	bl	800bc8c <I2C_Slave_AF>
 800ac90:	e016      	b.n	800acc0 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac9a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	f043 0304 	orr.w	r3, r3, #4
 800aca2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800aca4:	7efb      	ldrb	r3, [r7, #27]
 800aca6:	2b10      	cmp	r3, #16
 800aca8:	d002      	beq.n	800acb0 <HAL_I2C_ER_IRQHandler+0xf4>
 800acaa:	7efb      	ldrb	r3, [r7, #27]
 800acac:	2b40      	cmp	r3, #64	; 0x40
 800acae:	d107      	bne.n	800acc0 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acbe:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	0adb      	lsrs	r3, r3, #11
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00e      	beq.n	800acea <HAL_I2C_ER_IRQHandler+0x12e>
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	0a1b      	lsrs	r3, r3, #8
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d008      	beq.n	800acea <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	f043 0308 	orr.w	r3, r3, #8
 800acde:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800ace8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	2b00      	cmp	r3, #0
 800acee:	d008      	beq.n	800ad02 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	431a      	orrs	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f001 f835 	bl	800bd6c <I2C_ITError>
  }
}
 800ad02:	bf00      	nop
 800ad04:	3728      	adds	r7, #40	; 0x28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ad26:	bf00      	nop
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ad3a:	bf00      	nop
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ad4e:	bf00      	nop
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b083      	sub	sp, #12
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	460b      	mov	r3, r1
 800ad64:	70fb      	strb	r3, [r7, #3]
 800ad66:	4613      	mov	r3, r2
 800ad68:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ad6a:	bf00      	nop
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad76:	b480      	push	{r7}
 800ad78:	b083      	sub	sp, #12
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800ad7e:	bf00      	nop
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ad92:	bf00      	nop
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ada6:	bf00      	nop
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b083      	sub	sp, #12
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800adba:	bf00      	nop
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800add4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800addc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d150      	bne.n	800ae8e <I2C_MasterTransmit_TXE+0xc8>
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	2b21      	cmp	r3, #33	; 0x21
 800adf0:	d14d      	bne.n	800ae8e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b08      	cmp	r3, #8
 800adf6:	d01d      	beq.n	800ae34 <I2C_MasterTransmit_TXE+0x6e>
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	d01a      	beq.n	800ae34 <I2C_MasterTransmit_TXE+0x6e>
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ae04:	d016      	beq.n	800ae34 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ae14:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2211      	movs	r2, #17
 800ae1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2220      	movs	r2, #32
 800ae28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff ff6c 	bl	800ad0a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ae32:	e060      	b.n	800aef6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ae42:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae52:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2220      	movs	r2, #32
 800ae5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b40      	cmp	r3, #64	; 0x40
 800ae6c:	d107      	bne.n	800ae7e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff ff87 	bl	800ad8a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ae7c:	e03b      	b.n	800aef6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff ff3f 	bl	800ad0a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ae8c:	e033      	b.n	800aef6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	2b21      	cmp	r3, #33	; 0x21
 800ae92:	d005      	beq.n	800aea0 <I2C_MasterTransmit_TXE+0xda>
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	2b40      	cmp	r3, #64	; 0x40
 800ae98:	d12d      	bne.n	800aef6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	2b22      	cmp	r3, #34	; 0x22
 800ae9e:	d12a      	bne.n	800aef6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d108      	bne.n	800aebc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685a      	ldr	r2, [r3, #4]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeb8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800aeba:	e01c      	b.n	800aef6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b40      	cmp	r3, #64	; 0x40
 800aec6:	d103      	bne.n	800aed0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f898 	bl	800affe <I2C_MemoryTransmit_TXE_BTF>
}
 800aece:	e012      	b.n	800aef6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed4:	781a      	ldrb	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	1c5a      	adds	r2, r3, #1
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	3b01      	subs	r3, #1
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800aef4:	e7ff      	b.n	800aef6 <I2C_MasterTransmit_TXE+0x130>
 800aef6:	bf00      	nop
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b21      	cmp	r3, #33	; 0x21
 800af16:	d165      	bne.n	800afe4 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d012      	beq.n	800af48 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	3b01      	subs	r3, #1
 800af40:	b29a      	uxth	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800af46:	e056      	b.n	800aff6 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2b08      	cmp	r3, #8
 800af4c:	d01d      	beq.n	800af8a <I2C_MasterTransmit_BTF+0x8c>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b20      	cmp	r3, #32
 800af52:	d01a      	beq.n	800af8a <I2C_MasterTransmit_BTF+0x8c>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af5a:	d016      	beq.n	800af8a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800af6a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2211      	movs	r2, #17
 800af70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2220      	movs	r2, #32
 800af7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff fec1 	bl	800ad0a <HAL_I2C_MasterTxCpltCallback>
}
 800af88:	e035      	b.n	800aff6 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800af98:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afa8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2220      	movs	r2, #32
 800afb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b40      	cmp	r3, #64	; 0x40
 800afc2:	d107      	bne.n	800afd4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff fedc 	bl	800ad8a <HAL_I2C_MemTxCpltCallback>
}
 800afd2:	e010      	b.n	800aff6 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff fe94 	bl	800ad0a <HAL_I2C_MasterTxCpltCallback>
}
 800afe2:	e008      	b.n	800aff6 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b40      	cmp	r3, #64	; 0x40
 800afee:	d102      	bne.n	800aff6 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f804 	bl	800affe <I2C_MemoryTransmit_TXE_BTF>
}
 800aff6:	bf00      	nop
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800affe:	b480      	push	{r7}
 800b000:	b083      	sub	sp, #12
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d11d      	bne.n	800b04a <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b012:	2b01      	cmp	r3, #1
 800b014:	d10b      	bne.n	800b02e <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b026:	1c9a      	adds	r2, r3, #2
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800b02c:	e048      	b.n	800b0c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b032:	b29b      	uxth	r3, r3
 800b034:	121b      	asrs	r3, r3, #8
 800b036:	b2da      	uxtb	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b048:	e03a      	b.n	800b0c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d10b      	bne.n	800b06a <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b056:	b2da      	uxtb	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b068:	e02a      	b.n	800b0c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d126      	bne.n	800b0c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b22      	cmp	r3, #34	; 0x22
 800b07c:	d108      	bne.n	800b090 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b08c:	601a      	str	r2, [r3, #0]
}
 800b08e:	e017      	b.n	800b0c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b21      	cmp	r3, #33	; 0x21
 800b09a:	d111      	bne.n	800b0c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a0:	781a      	ldrb	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b22      	cmp	r3, #34	; 0x22
 800b0de:	d173      	bne.n	800b1c8 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b03      	cmp	r3, #3
 800b0ec:	d920      	bls.n	800b130 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	691a      	ldr	r2, [r3, #16]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	b2d2      	uxtb	r2, r2
 800b0fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	3b01      	subs	r3, #1
 800b10e:	b29a      	uxth	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b118:	b29b      	uxth	r3, r3
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d154      	bne.n	800b1c8 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b12c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800b12e:	e04b      	b.n	800b1c8 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b134:	2b02      	cmp	r3, #2
 800b136:	d047      	beq.n	800b1c8 <I2C_MasterReceive_RXNE+0xfc>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d002      	beq.n	800b144 <I2C_MasterReceive_RXNE+0x78>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d141      	bne.n	800b1c8 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b152:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b162:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691a      	ldr	r2, [r3, #16]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	b2d2      	uxtb	r2, r2
 800b170:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	1c5a      	adds	r2, r3, #1
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b180:	b29b      	uxth	r3, r3
 800b182:	3b01      	subs	r3, #1
 800b184:	b29a      	uxth	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b40      	cmp	r3, #64	; 0x40
 800b19c:	d10a      	bne.n	800b1b4 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7fb fc29 	bl	8006a04 <HAL_I2C_MemRxCpltCallback>
}
 800b1b2:	e009      	b.n	800b1c8 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2212      	movs	r2, #18
 800b1c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff fdab 	bl	800ad1e <HAL_I2C_MasterRxCpltCallback>
}
 800b1c8:	bf00      	nop
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	d11b      	bne.n	800b220 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1f6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691a      	ldr	r2, [r3, #16]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	b2d2      	uxtb	r2, r2
 800b204:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b214:	b29b      	uxth	r3, r3
 800b216:	3b01      	subs	r3, #1
 800b218:	b29a      	uxth	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800b21e:	e0bd      	b.n	800b39c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b224:	b29b      	uxth	r3, r3
 800b226:	2b03      	cmp	r3, #3
 800b228:	d129      	bne.n	800b27e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b238:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2b04      	cmp	r3, #4
 800b23e:	d00a      	beq.n	800b256 <I2C_MasterReceive_BTF+0x86>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b02      	cmp	r3, #2
 800b244:	d007      	beq.n	800b256 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b254:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	691a      	ldr	r2, [r3, #16]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b260:	b2d2      	uxtb	r2, r2
 800b262:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b268:	1c5a      	adds	r2, r3, #1
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b272:	b29b      	uxth	r3, r3
 800b274:	3b01      	subs	r3, #1
 800b276:	b29a      	uxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b27c:	e08e      	b.n	800b39c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b282:	b29b      	uxth	r3, r3
 800b284:	2b02      	cmp	r3, #2
 800b286:	d176      	bne.n	800b376 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d002      	beq.n	800b294 <I2C_MasterReceive_BTF+0xc4>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b10      	cmp	r3, #16
 800b292:	d108      	bne.n	800b2a6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	e019      	b.n	800b2da <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2b04      	cmp	r3, #4
 800b2aa:	d002      	beq.n	800b2b2 <I2C_MasterReceive_BTF+0xe2>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d108      	bne.n	800b2c4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	e00a      	b.n	800b2da <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b10      	cmp	r3, #16
 800b2c8:	d007      	beq.n	800b2da <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	1c5a      	adds	r2, r3, #1
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	691a      	ldr	r2, [r3, #16]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	3b01      	subs	r3, #1
 800b320:	b29a      	uxth	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b334:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2220      	movs	r2, #32
 800b33a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b40      	cmp	r3, #64	; 0x40
 800b348:	d10a      	bne.n	800b360 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7fb fb53 	bl	8006a04 <HAL_I2C_MemRxCpltCallback>
}
 800b35e:	e01d      	b.n	800b39c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2212      	movs	r2, #18
 800b36c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff fcd5 	bl	800ad1e <HAL_I2C_MasterRxCpltCallback>
}
 800b374:	e012      	b.n	800b39c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	691a      	ldr	r2, [r3, #16]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	b2d2      	uxtb	r2, r2
 800b382:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b392:	b29b      	uxth	r3, r3
 800b394:	3b01      	subs	r3, #1
 800b396:	b29a      	uxth	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b39c:	bf00      	nop
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b40      	cmp	r3, #64	; 0x40
 800b3b6:	d117      	bne.n	800b3e8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d109      	bne.n	800b3d4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b3d0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b3d2:	e067      	b.n	800b4a4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	f043 0301 	orr.w	r3, r3, #1
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	611a      	str	r2, [r3, #16]
}
 800b3e6:	e05d      	b.n	800b4a4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3f0:	d133      	bne.n	800b45a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b21      	cmp	r3, #33	; 0x21
 800b3fc:	d109      	bne.n	800b412 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b402:	b2db      	uxtb	r3, r3
 800b404:	461a      	mov	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b40e:	611a      	str	r2, [r3, #16]
 800b410:	e008      	b.n	800b424 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b416:	b2db      	uxtb	r3, r3
 800b418:	f043 0301 	orr.w	r3, r3, #1
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <I2C_Master_SB+0x92>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b432:	2b00      	cmp	r3, #0
 800b434:	d108      	bne.n	800b448 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d032      	beq.n	800b4a4 <I2C_Master_SB+0x100>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b444:	2b00      	cmp	r3, #0
 800b446:	d02d      	beq.n	800b4a4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b456:	605a      	str	r2, [r3, #4]
}
 800b458:	e024      	b.n	800b4a4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10e      	bne.n	800b480 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b466:	b29b      	uxth	r3, r3
 800b468:	11db      	asrs	r3, r3, #7
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	f003 0306 	and.w	r3, r3, #6
 800b470:	b2db      	uxtb	r3, r3
 800b472:	f063 030f 	orn	r3, r3, #15
 800b476:	b2da      	uxtb	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	611a      	str	r2, [r3, #16]
}
 800b47e:	e011      	b.n	800b4a4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b484:	2b01      	cmp	r3, #1
 800b486:	d10d      	bne.n	800b4a4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	11db      	asrs	r3, r3, #7
 800b490:	b2db      	uxtb	r3, r3
 800b492:	f003 0306 	and.w	r3, r3, #6
 800b496:	b2db      	uxtb	r3, r3
 800b498:	f063 030e 	orn	r3, r3, #14
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	611a      	str	r2, [r3, #16]
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d103      	bne.n	800b4d4 <I2C_Master_ADD10+0x24>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d011      	beq.n	800b4f8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d104      	bne.n	800b4e8 <I2C_Master_ADD10+0x38>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d007      	beq.n	800b4f8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	685a      	ldr	r2, [r3, #4]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4f6:	605a      	str	r2, [r3, #4]
    }
  }
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800b504:	b480      	push	{r7}
 800b506:	b091      	sub	sp, #68	; 0x44
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b520:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b22      	cmp	r3, #34	; 0x22
 800b52c:	f040 8169 	bne.w	800b802 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10f      	bne.n	800b558 <I2C_Master_ADDR+0x54>
 800b538:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b53c:	2b40      	cmp	r3, #64	; 0x40
 800b53e:	d10b      	bne.n	800b558 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b540:	2300      	movs	r3, #0
 800b542:	633b      	str	r3, [r7, #48]	; 0x30
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	633b      	str	r3, [r7, #48]	; 0x30
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	633b      	str	r3, [r7, #48]	; 0x30
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	e160      	b.n	800b81a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d11d      	bne.n	800b59c <I2C_Master_ADDR+0x98>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b568:	d118      	bne.n	800b59c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b56a:	2300      	movs	r3, #0
 800b56c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b58e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	651a      	str	r2, [r3, #80]	; 0x50
 800b59a:	e13e      	b.n	800b81a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d113      	bne.n	800b5ce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	695b      	ldr	r3, [r3, #20]
 800b5b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5ca:	601a      	str	r2, [r3, #0]
 800b5cc:	e115      	b.n	800b7fa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	f040 808a 	bne.w	800b6ee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b5e0:	d137      	bne.n	800b652 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5f0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b600:	d113      	bne.n	800b62a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b610:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b612:	2300      	movs	r3, #0
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	627b      	str	r3, [r7, #36]	; 0x24
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	627b      	str	r3, [r7, #36]	; 0x24
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	e0e7      	b.n	800b7fa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b62a:	2300      	movs	r3, #0
 800b62c:	623b      	str	r3, [r7, #32]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	623b      	str	r3, [r7, #32]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	623b      	str	r3, [r7, #32]
 800b63e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	e0d3      	b.n	800b7fa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	2b08      	cmp	r3, #8
 800b656:	d02e      	beq.n	800b6b6 <I2C_Master_ADDR+0x1b2>
 800b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65a:	2b20      	cmp	r3, #32
 800b65c:	d02b      	beq.n	800b6b6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b660:	2b12      	cmp	r3, #18
 800b662:	d102      	bne.n	800b66a <I2C_Master_ADDR+0x166>
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	2b01      	cmp	r3, #1
 800b668:	d125      	bne.n	800b6b6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	d00e      	beq.n	800b68e <I2C_Master_ADDR+0x18a>
 800b670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b672:	2b02      	cmp	r3, #2
 800b674:	d00b      	beq.n	800b68e <I2C_Master_ADDR+0x18a>
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	2b10      	cmp	r3, #16
 800b67a:	d008      	beq.n	800b68e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	e007      	b.n	800b69e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b69c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b69e:	2300      	movs	r3, #0
 800b6a0:	61fb      	str	r3, [r7, #28]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	61fb      	str	r3, [r7, #28]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	61fb      	str	r3, [r7, #28]
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	e0a1      	b.n	800b7fa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	61bb      	str	r3, [r7, #24]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	695b      	ldr	r3, [r3, #20]
 800b6d0:	61bb      	str	r3, [r7, #24]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	61bb      	str	r3, [r7, #24]
 800b6da:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	e085      	b.n	800b7fa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d14d      	bne.n	800b794 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d016      	beq.n	800b72c <I2C_Master_ADDR+0x228>
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b700:	2b02      	cmp	r3, #2
 800b702:	d013      	beq.n	800b72c <I2C_Master_ADDR+0x228>
 800b704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b706:	2b10      	cmp	r3, #16
 800b708:	d010      	beq.n	800b72c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b718:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	e007      	b.n	800b73c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b73a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b74a:	d117      	bne.n	800b77c <I2C_Master_ADDR+0x278>
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b752:	d00b      	beq.n	800b76c <I2C_Master_ADDR+0x268>
 800b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b756:	2b01      	cmp	r3, #1
 800b758:	d008      	beq.n	800b76c <I2C_Master_ADDR+0x268>
 800b75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75c:	2b08      	cmp	r3, #8
 800b75e:	d005      	beq.n	800b76c <I2C_Master_ADDR+0x268>
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	2b10      	cmp	r3, #16
 800b764:	d002      	beq.n	800b76c <I2C_Master_ADDR+0x268>
 800b766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b768:	2b20      	cmp	r3, #32
 800b76a:	d107      	bne.n	800b77c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b77a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b77c:	2300      	movs	r3, #0
 800b77e:	617b      	str	r3, [r7, #20]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	617b      	str	r3, [r7, #20]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	e032      	b.n	800b7fa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7a2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7b2:	d117      	bne.n	800b7e4 <I2C_Master_ADDR+0x2e0>
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b7ba:	d00b      	beq.n	800b7d4 <I2C_Master_ADDR+0x2d0>
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d008      	beq.n	800b7d4 <I2C_Master_ADDR+0x2d0>
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	2b08      	cmp	r3, #8
 800b7c6:	d005      	beq.n	800b7d4 <I2C_Master_ADDR+0x2d0>
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ca:	2b10      	cmp	r3, #16
 800b7cc:	d002      	beq.n	800b7d4 <I2C_Master_ADDR+0x2d0>
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d0:	2b20      	cmp	r3, #32
 800b7d2:	d107      	bne.n	800b7e4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b7e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	613b      	str	r3, [r7, #16]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	613b      	str	r3, [r7, #16]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	699b      	ldr	r3, [r3, #24]
 800b7f6:	613b      	str	r3, [r7, #16]
 800b7f8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b800:	e00b      	b.n	800b81a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b802:	2300      	movs	r3, #0
 800b804:	60fb      	str	r3, [r7, #12]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	695b      	ldr	r3, [r3, #20]
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	68fb      	ldr	r3, [r7, #12]
}
 800b818:	e7ff      	b.n	800b81a <I2C_Master_ADDR+0x316>
 800b81a:	bf00      	nop
 800b81c:	3744      	adds	r7, #68	; 0x44
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b834:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d02b      	beq.n	800b898 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	3b01      	subs	r3, #1
 800b85e:	b29a      	uxth	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b868:	b29b      	uxth	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d114      	bne.n	800b898 <I2C_SlaveTransmit_TXE+0x72>
 800b86e:	7bfb      	ldrb	r3, [r7, #15]
 800b870:	2b29      	cmp	r3, #41	; 0x29
 800b872:	d111      	bne.n	800b898 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685a      	ldr	r2, [r3, #4]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b882:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2221      	movs	r2, #33	; 0x21
 800b888:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2228      	movs	r2, #40	; 0x28
 800b88e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff fa4d 	bl	800ad32 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b898:	bf00      	nop
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d011      	beq.n	800b8d6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b6:	781a      	ldrb	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b8d6:	bf00      	nop
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d02c      	beq.n	800b956 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	691a      	ldr	r2, [r3, #16]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b906:	b2d2      	uxtb	r2, r2
 800b908:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90e:	1c5a      	adds	r2, r3, #1
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b918:	b29b      	uxth	r3, r3
 800b91a:	3b01      	subs	r3, #1
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b926:	b29b      	uxth	r3, r3
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d114      	bne.n	800b956 <I2C_SlaveReceive_RXNE+0x74>
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
 800b92e:	2b2a      	cmp	r3, #42	; 0x2a
 800b930:	d111      	bne.n	800b956 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b940:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2222      	movs	r2, #34	; 0x22
 800b946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2228      	movs	r2, #40	; 0x28
 800b94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff f9f8 	bl	800ad46 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b956:	bf00      	nop
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b95e:	b480      	push	{r7}
 800b960:	b083      	sub	sp, #12
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d012      	beq.n	800b996 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	691a      	ldr	r2, [r3, #16]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	b2d2      	uxtb	r2, r2
 800b97c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	3b01      	subs	r3, #1
 800b990:	b29a      	uxth	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b996:	bf00      	nop
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b9bc:	2b28      	cmp	r3, #40	; 0x28
 800b9be:	d127      	bne.n	800ba10 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	685a      	ldr	r2, [r3, #4]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	089b      	lsrs	r3, r3, #2
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d101      	bne.n	800b9e0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	09db      	lsrs	r3, r3, #7
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d103      	bne.n	800b9f4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	81bb      	strh	r3, [r7, #12]
 800b9f2:	e002      	b.n	800b9fa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800ba02:	89ba      	ldrh	r2, [r7, #12]
 800ba04:	7bfb      	ldrb	r3, [r7, #15]
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7ff f9a6 	bl	800ad5a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ba0e:	e008      	b.n	800ba22 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f06f 0202 	mvn.w	r2, #2
 800ba18:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800ba22:	bf00      	nop
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	685a      	ldr	r2, [r3, #4]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ba4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60bb      	str	r3, [r7, #8]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	60bb      	str	r3, [r7, #8]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f042 0201 	orr.w	r2, r2, #1
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba88:	d172      	bne.n	800bb70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	2b22      	cmp	r3, #34	; 0x22
 800ba8e:	d002      	beq.n	800ba96 <I2C_Slave_STOPF+0x6a>
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	2b2a      	cmp	r3, #42	; 0x2a
 800ba94:	d135      	bne.n	800bb02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d005      	beq.n	800baba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab2:	f043 0204 	orr.w	r2, r3, #4
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bac8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fd fdd8 	bl	8009684 <HAL_DMA_GetState>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d049      	beq.n	800bb6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bade:	4a69      	ldr	r2, [pc, #420]	; (800bc84 <I2C_Slave_STOPF+0x258>)
 800bae0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fd fc20 	bl	800932c <HAL_DMA_Abort_IT>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d03d      	beq.n	800bb6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bafc:	4610      	mov	r0, r2
 800bafe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bb00:	e035      	b.n	800bb6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d005      	beq.n	800bb26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1e:	f043 0204 	orr.w	r2, r3, #4
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fd fda2 	bl	8009684 <HAL_DMA_GetState>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d014      	beq.n	800bb70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4a:	4a4e      	ldr	r2, [pc, #312]	; (800bc84 <I2C_Slave_STOPF+0x258>)
 800bb4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fd fbea 	bl	800932c <HAL_DMA_Abort_IT>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d008      	beq.n	800bb70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bb68:	4610      	mov	r0, r2
 800bb6a:	4798      	blx	r3
 800bb6c:	e000      	b.n	800bb70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bb6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d03e      	beq.n	800bbf8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b04      	cmp	r3, #4
 800bb86:	d112      	bne.n	800bbae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	691a      	ldr	r2, [r3, #16]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb92:	b2d2      	uxtb	r2, r2
 800bb94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	3b01      	subs	r3, #1
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb8:	2b40      	cmp	r3, #64	; 0x40
 800bbba:	d112      	bne.n	800bbe2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	691a      	ldr	r2, [r3, #16]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	b2d2      	uxtb	r2, r2
 800bbc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbce:	1c5a      	adds	r2, r3, #1
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d005      	beq.n	800bbf8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf0:	f043 0204 	orr.w	r2, r3, #4
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f8b3 	bl	800bd6c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800bc06:	e039      	b.n	800bc7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc0c:	d109      	bne.n	800bc22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2228      	movs	r2, #40	; 0x28
 800bc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff f892 	bl	800ad46 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b28      	cmp	r3, #40	; 0x28
 800bc2c:	d111      	bne.n	800bc52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a15      	ldr	r2, [pc, #84]	; (800bc88 <I2C_Slave_STOPF+0x25c>)
 800bc32:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7ff f893 	bl	800ad76 <HAL_I2C_ListenCpltCallback>
}
 800bc50:	e014      	b.n	800bc7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc56:	2b22      	cmp	r3, #34	; 0x22
 800bc58:	d002      	beq.n	800bc60 <I2C_Slave_STOPF+0x234>
 800bc5a:	7bfb      	ldrb	r3, [r7, #15]
 800bc5c:	2b22      	cmp	r3, #34	; 0x22
 800bc5e:	d10d      	bne.n	800bc7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7ff f865 	bl	800ad46 <HAL_I2C_SlaveRxCpltCallback>
}
 800bc7c:	bf00      	nop
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	0800c4e1 	.word	0x0800c4e1
 800bc88:	ffff0000 	.word	0xffff0000

0800bc8c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc9a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b08      	cmp	r3, #8
 800bca6:	d002      	beq.n	800bcae <I2C_Slave_AF+0x22>
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2b20      	cmp	r3, #32
 800bcac:	d129      	bne.n	800bd02 <I2C_Slave_AF+0x76>
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	2b28      	cmp	r3, #40	; 0x28
 800bcb2:	d126      	bne.n	800bd02 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a2c      	ldr	r2, [pc, #176]	; (800bd68 <I2C_Slave_AF+0xdc>)
 800bcb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bcc8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bcd2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bce2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff f83b 	bl	800ad76 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800bd00:	e02e      	b.n	800bd60 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
 800bd04:	2b21      	cmp	r3, #33	; 0x21
 800bd06:	d126      	bne.n	800bd56 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a17      	ldr	r2, [pc, #92]	; (800bd68 <I2C_Slave_AF+0xdc>)
 800bd0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2221      	movs	r2, #33	; 0x21
 800bd12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2220      	movs	r2, #32
 800bd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bd32:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd3c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd4c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7fe ffef 	bl	800ad32 <HAL_I2C_SlaveTxCpltCallback>
}
 800bd54:	e004      	b.n	800bd60 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd5e:	615a      	str	r2, [r3, #20]
}
 800bd60:	bf00      	nop
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	ffff0000 	.word	0xffff0000

0800bd6c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd7a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	2b10      	cmp	r3, #16
 800bd86:	d10a      	bne.n	800bd9e <I2C_ITError+0x32>
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	2b22      	cmp	r3, #34	; 0x22
 800bd8c:	d107      	bne.n	800bd9e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bda4:	2b28      	cmp	r3, #40	; 0x28
 800bda6:	d107      	bne.n	800bdb8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2228      	movs	r2, #40	; 0x28
 800bdb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bdb6:	e015      	b.n	800bde4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdc6:	d006      	beq.n	800bdd6 <I2C_ITError+0x6a>
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
 800bdca:	2b60      	cmp	r3, #96	; 0x60
 800bdcc:	d003      	beq.n	800bdd6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdf2:	d162      	bne.n	800beba <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d020      	beq.n	800be54 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be16:	4a6a      	ldr	r2, [pc, #424]	; (800bfc0 <I2C_ITError+0x254>)
 800be18:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fd fa84 	bl	800932c <HAL_DMA_Abort_IT>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 8089 	beq.w	800bf3e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f022 0201 	bic.w	r2, r2, #1
 800be3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2220      	movs	r2, #32
 800be40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be4e:	4610      	mov	r0, r2
 800be50:	4798      	blx	r3
 800be52:	e074      	b.n	800bf3e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be58:	4a59      	ldr	r2, [pc, #356]	; (800bfc0 <I2C_ITError+0x254>)
 800be5a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be60:	4618      	mov	r0, r3
 800be62:	f7fd fa63 	bl	800932c <HAL_DMA_Abort_IT>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d068      	beq.n	800bf3e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be76:	2b40      	cmp	r3, #64	; 0x40
 800be78:	d10b      	bne.n	800be92 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	691a      	ldr	r2, [r3, #16]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be84:	b2d2      	uxtb	r2, r2
 800be86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8c:	1c5a      	adds	r2, r3, #1
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f022 0201 	bic.w	r2, r2, #1
 800bea0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2220      	movs	r2, #32
 800bea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800beb4:	4610      	mov	r0, r2
 800beb6:	4798      	blx	r3
 800beb8:	e041      	b.n	800bf3e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b60      	cmp	r3, #96	; 0x60
 800bec4:	d125      	bne.n	800bf12 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2220      	movs	r2, #32
 800beca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bede:	2b40      	cmp	r3, #64	; 0x40
 800bee0:	d10b      	bne.n	800befa <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	691a      	ldr	r2, [r3, #16]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	b2d2      	uxtb	r2, r2
 800beee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f022 0201 	bic.w	r2, r2, #1
 800bf08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7fe ff51 	bl	800adb2 <HAL_I2C_AbortCpltCallback>
 800bf10:	e015      	b.n	800bf3e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf1c:	2b40      	cmp	r3, #64	; 0x40
 800bf1e:	d10b      	bne.n	800bf38 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	691a      	ldr	r2, [r3, #16]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2a:	b2d2      	uxtb	r2, r2
 800bf2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7fe ff30 	bl	800ad9e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10e      	bne.n	800bf6c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d109      	bne.n	800bf6c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d104      	bne.n	800bf6c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d007      	beq.n	800bf7c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	685a      	ldr	r2, [r3, #4]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bf7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf88:	f003 0304 	and.w	r3, r3, #4
 800bf8c:	2b04      	cmp	r3, #4
 800bf8e:	d113      	bne.n	800bfb8 <I2C_ITError+0x24c>
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
 800bf92:	2b28      	cmp	r3, #40	; 0x28
 800bf94:	d110      	bne.n	800bfb8 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a0a      	ldr	r2, [pc, #40]	; (800bfc4 <I2C_ITError+0x258>)
 800bf9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7fe fedf 	bl	800ad76 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bfb8:	bf00      	nop
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	0800c4e1 	.word	0x0800c4e1
 800bfc4:	ffff0000 	.word	0xffff0000

0800bfc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b088      	sub	sp, #32
 800bfcc:	af02      	add	r7, sp, #8
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	4608      	mov	r0, r1
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	817b      	strh	r3, [r7, #10]
 800bfda:	460b      	mov	r3, r1
 800bfdc:	813b      	strh	r3, [r7, #8]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f000 faed 	bl	800c5de <I2C_WaitOnFlagUntilTimeout>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00c      	beq.n	800c024 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c014:	2b00      	cmp	r3, #0
 800c016:	d003      	beq.n	800c020 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c01e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c020:	2303      	movs	r3, #3
 800c022:	e05f      	b.n	800c0e4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c024:	897b      	ldrh	r3, [r7, #10]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	461a      	mov	r2, r3
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c032:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	6a3a      	ldr	r2, [r7, #32]
 800c038:	492c      	ldr	r1, [pc, #176]	; (800c0ec <I2C_RequestMemoryWrite+0x124>)
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	f000 fb26 	bl	800c68c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e04c      	b.n	800c0e4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c04a:	2300      	movs	r3, #0
 800c04c:	617b      	str	r3, [r7, #20]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	695b      	ldr	r3, [r3, #20]
 800c054:	617b      	str	r3, [r7, #20]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	699b      	ldr	r3, [r3, #24]
 800c05c:	617b      	str	r3, [r7, #20]
 800c05e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c062:	6a39      	ldr	r1, [r7, #32]
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f000 fb90 	bl	800c78a <I2C_WaitOnTXEFlagUntilTimeout>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00d      	beq.n	800c08c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c074:	2b04      	cmp	r3, #4
 800c076:	d107      	bne.n	800c088 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c086:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e02b      	b.n	800c0e4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c08c:	88fb      	ldrh	r3, [r7, #6]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d105      	bne.n	800c09e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c092:	893b      	ldrh	r3, [r7, #8]
 800c094:	b2da      	uxtb	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	611a      	str	r2, [r3, #16]
 800c09c:	e021      	b.n	800c0e2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c09e:	893b      	ldrh	r3, [r7, #8]
 800c0a0:	0a1b      	lsrs	r3, r3, #8
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	b2da      	uxtb	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ae:	6a39      	ldr	r1, [r7, #32]
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f000 fb6a 	bl	800c78a <I2C_WaitOnTXEFlagUntilTimeout>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00d      	beq.n	800c0d8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c0:	2b04      	cmp	r3, #4
 800c0c2:	d107      	bne.n	800c0d4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e005      	b.n	800c0e4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c0d8:	893b      	ldrh	r3, [r7, #8]
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	00010002 	.word	0x00010002

0800c0f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af02      	add	r7, sp, #8
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	4603      	mov	r3, r0
 800c100:	817b      	strh	r3, [r7, #10]
 800c102:	460b      	mov	r3, r1
 800c104:	813b      	strh	r3, [r7, #8]
 800c106:	4613      	mov	r3, r2
 800c108:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c118:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	6a3b      	ldr	r3, [r7, #32]
 800c130:	2200      	movs	r2, #0
 800c132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f000 fa51 	bl	800c5de <I2C_WaitOnFlagUntilTimeout>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00c      	beq.n	800c15c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c158:	2303      	movs	r3, #3
 800c15a:	e0a9      	b.n	800c2b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c15c:	897b      	ldrh	r3, [r7, #10]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	461a      	mov	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c16a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	6a3a      	ldr	r2, [r7, #32]
 800c170:	4951      	ldr	r1, [pc, #324]	; (800c2b8 <I2C_RequestMemoryRead+0x1c8>)
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 fa8a 	bl	800c68c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e096      	b.n	800c2b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c182:	2300      	movs	r3, #0
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	617b      	str	r3, [r7, #20]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	617b      	str	r3, [r7, #20]
 800c196:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c19a:	6a39      	ldr	r1, [r7, #32]
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f000 faf4 	bl	800c78a <I2C_WaitOnTXEFlagUntilTimeout>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00d      	beq.n	800c1c4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	d107      	bne.n	800c1c0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e075      	b.n	800c2b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c1c4:	88fb      	ldrh	r3, [r7, #6]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d105      	bne.n	800c1d6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c1ca:	893b      	ldrh	r3, [r7, #8]
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	611a      	str	r2, [r3, #16]
 800c1d4:	e021      	b.n	800c21a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c1d6:	893b      	ldrh	r3, [r7, #8]
 800c1d8:	0a1b      	lsrs	r3, r3, #8
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1e6:	6a39      	ldr	r1, [r7, #32]
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f000 face 	bl	800c78a <I2C_WaitOnTXEFlagUntilTimeout>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00d      	beq.n	800c210 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d107      	bne.n	800c20c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c20a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	e04f      	b.n	800c2b0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c210:	893b      	ldrh	r3, [r7, #8]
 800c212:	b2da      	uxtb	r2, r3
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c21a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c21c:	6a39      	ldr	r1, [r7, #32]
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f000 fab3 	bl	800c78a <I2C_WaitOnTXEFlagUntilTimeout>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00d      	beq.n	800c246 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d107      	bne.n	800c242 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c240:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	e034      	b.n	800c2b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	9300      	str	r3, [sp, #0]
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 f9bb 	bl	800c5de <I2C_WaitOnFlagUntilTimeout>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00c      	beq.n	800c288 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d003      	beq.n	800c284 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c284:	2303      	movs	r3, #3
 800c286:	e013      	b.n	800c2b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c288:	897b      	ldrh	r3, [r7, #10]
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	f043 0301 	orr.w	r3, r3, #1
 800c290:	b2da      	uxtb	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	6a3a      	ldr	r2, [r7, #32]
 800c29c:	4906      	ldr	r1, [pc, #24]	; (800c2b8 <I2C_RequestMemoryRead+0x1c8>)
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 f9f4 	bl	800c68c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e000      	b.n	800c2b0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	00010002 	.word	0x00010002

0800c2bc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2d0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2d8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2de:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	685a      	ldr	r2, [r3, #4]
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c2ee:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c304:	2b00      	cmp	r3, #0
 800c306:	d003      	beq.n	800c310 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30c:	2200      	movs	r2, #0
 800c30e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800c310:	7cfb      	ldrb	r3, [r7, #19]
 800c312:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800c316:	2b21      	cmp	r3, #33	; 0x21
 800c318:	d007      	beq.n	800c32a <I2C_DMAXferCplt+0x6e>
 800c31a:	7cfb      	ldrb	r3, [r7, #19]
 800c31c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800c320:	2b22      	cmp	r3, #34	; 0x22
 800c322:	d131      	bne.n	800c388 <I2C_DMAXferCplt+0xcc>
 800c324:	7cbb      	ldrb	r3, [r7, #18]
 800c326:	2b20      	cmp	r3, #32
 800c328:	d12e      	bne.n	800c388 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c338:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2200      	movs	r2, #0
 800c33e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c340:	7cfb      	ldrb	r3, [r7, #19]
 800c342:	2b29      	cmp	r3, #41	; 0x29
 800c344:	d10a      	bne.n	800c35c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2221      	movs	r2, #33	; 0x21
 800c34a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	2228      	movs	r2, #40	; 0x28
 800c350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c354:	6978      	ldr	r0, [r7, #20]
 800c356:	f7fe fcec 	bl	800ad32 <HAL_I2C_SlaveTxCpltCallback>
 800c35a:	e00c      	b.n	800c376 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c35c:	7cfb      	ldrb	r3, [r7, #19]
 800c35e:	2b2a      	cmp	r3, #42	; 0x2a
 800c360:	d109      	bne.n	800c376 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2222      	movs	r2, #34	; 0x22
 800c366:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	2228      	movs	r2, #40	; 0x28
 800c36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c370:	6978      	ldr	r0, [r7, #20]
 800c372:	f7fe fce8 	bl	800ad46 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	685a      	ldr	r2, [r3, #4]
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c384:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c386:	e06a      	b.n	800c45e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b00      	cmp	r3, #0
 800c392:	d064      	beq.n	800c45e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c398:	b29b      	uxth	r3, r3
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d107      	bne.n	800c3ae <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3ac:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	685a      	ldr	r2, [r3, #4]
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c3bc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c3c4:	d009      	beq.n	800c3da <I2C_DMAXferCplt+0x11e>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2b08      	cmp	r3, #8
 800c3ca:	d006      	beq.n	800c3da <I2C_DMAXferCplt+0x11e>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c3d2:	d002      	beq.n	800c3da <I2C_DMAXferCplt+0x11e>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b20      	cmp	r3, #32
 800c3d8:	d107      	bne.n	800c3ea <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3e8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c3f8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	685a      	ldr	r2, [r3, #4]
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c408:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2200      	movs	r2, #0
 800c40e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c414:	2b00      	cmp	r3, #0
 800c416:	d003      	beq.n	800c420 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800c418:	6978      	ldr	r0, [r7, #20]
 800c41a:	f7fe fcc0 	bl	800ad9e <HAL_I2C_ErrorCallback>
}
 800c41e:	e01e      	b.n	800c45e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	2220      	movs	r2, #32
 800c424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	2b40      	cmp	r3, #64	; 0x40
 800c432:	d10a      	bne.n	800c44a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2200      	movs	r2, #0
 800c440:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800c442:	6978      	ldr	r0, [r7, #20]
 800c444:	f7fa fade 	bl	8006a04 <HAL_I2C_MemRxCpltCallback>
}
 800c448:	e009      	b.n	800c45e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	2212      	movs	r2, #18
 800c456:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800c458:	6978      	ldr	r0, [r7, #20]
 800c45a:	f7fe fc60 	bl	800ad1e <HAL_I2C_MasterRxCpltCallback>
}
 800c45e:	bf00      	nop
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b084      	sub	sp, #16
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c472:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d003      	beq.n	800c484 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c480:	2200      	movs	r2, #0
 800c482:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d003      	beq.n	800c494 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c490:	2200      	movs	r2, #0
 800c492:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7fd f903 	bl	80096a0 <HAL_DMA_GetError>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d01b      	beq.n	800c4d8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4ae:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2220      	movs	r2, #32
 800c4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ca:	f043 0210 	orr.w	r2, r3, #16
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f7fe fc63 	bl	800ad9e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c4d8:	bf00      	nop
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ec:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4f4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d003      	beq.n	800c506 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c502:	2200      	movs	r2, #0
 800c504:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d003      	beq.n	800c516 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c512:	2200      	movs	r2, #0
 800c514:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c524:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2200      	movs	r2, #0
 800c52a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c530:	2b00      	cmp	r3, #0
 800c532:	d003      	beq.n	800c53c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c538:	2200      	movs	r2, #0
 800c53a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c540:	2b00      	cmp	r3, #0
 800c542:	d003      	beq.n	800c54c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c548:	2200      	movs	r2, #0
 800c54a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f022 0201 	bic.w	r2, r2, #1
 800c55a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c562:	b2db      	uxtb	r3, r3
 800c564:	2b60      	cmp	r3, #96	; 0x60
 800c566:	d10e      	bne.n	800c586 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2220      	movs	r2, #32
 800c56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f7fe fc17 	bl	800adb2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c584:	e027      	b.n	800c5d6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c586:	7afb      	ldrb	r3, [r7, #11]
 800c588:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c58c:	2b28      	cmp	r3, #40	; 0x28
 800c58e:	d117      	bne.n	800c5c0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f042 0201 	orr.w	r2, r2, #1
 800c59e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c5ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2228      	movs	r2, #40	; 0x28
 800c5ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c5be:	e007      	b.n	800c5d0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f7fe fbe4 	bl	800ad9e <HAL_I2C_ErrorCallback>
}
 800c5d6:	bf00      	nop
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b084      	sub	sp, #16
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	60f8      	str	r0, [r7, #12]
 800c5e6:	60b9      	str	r1, [r7, #8]
 800c5e8:	603b      	str	r3, [r7, #0]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c5ee:	e025      	b.n	800c63c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f6:	d021      	beq.n	800c63c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5f8:	f7fc fc82 	bl	8008f00 <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	429a      	cmp	r2, r3
 800c606:	d302      	bcc.n	800c60e <I2C_WaitOnFlagUntilTimeout+0x30>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d116      	bne.n	800c63c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2220      	movs	r2, #32
 800c618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c628:	f043 0220 	orr.w	r2, r3, #32
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c638:	2301      	movs	r3, #1
 800c63a:	e023      	b.n	800c684 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	0c1b      	lsrs	r3, r3, #16
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b01      	cmp	r3, #1
 800c644:	d10d      	bne.n	800c662 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	43da      	mvns	r2, r3
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	4013      	ands	r3, r2
 800c652:	b29b      	uxth	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	bf0c      	ite	eq
 800c658:	2301      	moveq	r3, #1
 800c65a:	2300      	movne	r3, #0
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	461a      	mov	r2, r3
 800c660:	e00c      	b.n	800c67c <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	43da      	mvns	r2, r3
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	4013      	ands	r3, r2
 800c66e:	b29b      	uxth	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	bf0c      	ite	eq
 800c674:	2301      	moveq	r3, #1
 800c676:	2300      	movne	r3, #0
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	461a      	mov	r2, r3
 800c67c:	79fb      	ldrb	r3, [r7, #7]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d0b6      	beq.n	800c5f0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
 800c698:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c69a:	e051      	b.n	800c740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6aa:	d123      	bne.n	800c6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c6c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2220      	movs	r2, #32
 800c6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e0:	f043 0204 	orr.w	r2, r3, #4
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e046      	b.n	800c782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fa:	d021      	beq.n	800c740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6fc:	f7fc fc00 	bl	8008f00 <HAL_GetTick>
 800c700:	4602      	mov	r2, r0
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d302      	bcc.n	800c712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d116      	bne.n	800c740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2200      	movs	r2, #0
 800c716:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2220      	movs	r2, #32
 800c71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72c:	f043 0220 	orr.w	r2, r3, #32
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	e020      	b.n	800c782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	0c1b      	lsrs	r3, r3, #16
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b01      	cmp	r3, #1
 800c748:	d10c      	bne.n	800c764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	695b      	ldr	r3, [r3, #20]
 800c750:	43da      	mvns	r2, r3
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	4013      	ands	r3, r2
 800c756:	b29b      	uxth	r3, r3
 800c758:	2b00      	cmp	r3, #0
 800c75a:	bf14      	ite	ne
 800c75c:	2301      	movne	r3, #1
 800c75e:	2300      	moveq	r3, #0
 800c760:	b2db      	uxtb	r3, r3
 800c762:	e00b      	b.n	800c77c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	43da      	mvns	r2, r3
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	4013      	ands	r3, r2
 800c770:	b29b      	uxth	r3, r3
 800c772:	2b00      	cmp	r3, #0
 800c774:	bf14      	ite	ne
 800c776:	2301      	movne	r3, #1
 800c778:	2300      	moveq	r3, #0
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d18d      	bne.n	800c69c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b084      	sub	sp, #16
 800c78e:	af00      	add	r7, sp, #0
 800c790:	60f8      	str	r0, [r7, #12]
 800c792:	60b9      	str	r1, [r7, #8]
 800c794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c796:	e02d      	b.n	800c7f4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f000 f8ce 	bl	800c93a <I2C_IsAcknowledgeFailed>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	e02d      	b.n	800c804 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ae:	d021      	beq.n	800c7f4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7b0:	f7fc fba6 	bl	8008f00 <HAL_GetTick>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d302      	bcc.n	800c7c6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d116      	bne.n	800c7f4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2220      	movs	r2, #32
 800c7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e0:	f043 0220 	orr.w	r2, r3, #32
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e007      	b.n	800c804 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	695b      	ldr	r3, [r3, #20]
 800c7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7fe:	2b80      	cmp	r3, #128	; 0x80
 800c800:	d1ca      	bne.n	800c798 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c818:	e02d      	b.n	800c876 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 f88d 	bl	800c93a <I2C_IsAcknowledgeFailed>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	e02d      	b.n	800c886 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c830:	d021      	beq.n	800c876 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c832:	f7fc fb65 	bl	8008f00 <HAL_GetTick>
 800c836:	4602      	mov	r2, r0
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d302      	bcc.n	800c848 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d116      	bne.n	800c876 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2220      	movs	r2, #32
 800c852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2200      	movs	r2, #0
 800c85a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c862:	f043 0220 	orr.w	r2, r3, #32
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e007      	b.n	800c886 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	695b      	ldr	r3, [r3, #20]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b04      	cmp	r3, #4
 800c882:	d1ca      	bne.n	800c81a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b084      	sub	sp, #16
 800c892:	af00      	add	r7, sp, #0
 800c894:	60f8      	str	r0, [r7, #12]
 800c896:	60b9      	str	r1, [r7, #8]
 800c898:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c89a:	e042      	b.n	800c922 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	f003 0310 	and.w	r3, r3, #16
 800c8a6:	2b10      	cmp	r3, #16
 800c8a8:	d119      	bne.n	800c8de <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f06f 0210 	mvn.w	r2, #16
 800c8b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2220      	movs	r2, #32
 800c8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e029      	b.n	800c932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8de:	f7fc fb0f 	bl	8008f00 <HAL_GetTick>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d302      	bcc.n	800c8f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d116      	bne.n	800c922 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90e:	f043 0220 	orr.w	r2, r3, #32
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e007      	b.n	800c932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	695b      	ldr	r3, [r3, #20]
 800c928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c92c:	2b40      	cmp	r3, #64	; 0x40
 800c92e:	d1b5      	bne.n	800c89c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c94c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c950:	d11b      	bne.n	800c98a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c95a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2220      	movs	r2, #32
 800c966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c976:	f043 0204 	orr.w	r2, r3, #4
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e000      	b.n	800c98c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800c9a8:	d103      	bne.n	800c9b2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c9b0:	e007      	b.n	800c9c2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c9ba:	d102      	bne.n	800c9c2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2208      	movs	r2, #8
 800c9c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c9c2:	bf00      	nop
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b083      	sub	sp, #12
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b20      	cmp	r3, #32
 800c9e2:	d129      	bne.n	800ca38 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2224      	movs	r2, #36	; 0x24
 800c9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f022 0201 	bic.w	r2, r2, #1
 800c9fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f022 0210 	bic.w	r2, r2, #16
 800ca0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	683a      	ldr	r2, [r7, #0]
 800ca18:	430a      	orrs	r2, r1
 800ca1a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f042 0201 	orr.w	r2, r2, #1
 800ca2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2220      	movs	r2, #32
 800ca30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ca34:	2300      	movs	r3, #0
 800ca36:	e000      	b.n	800ca3a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800ca38:	2302      	movs	r3, #2
  }
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	370c      	adds	r7, #12
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b085      	sub	sp, #20
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800ca50:	2300      	movs	r3, #0
 800ca52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b20      	cmp	r3, #32
 800ca5e:	d12a      	bne.n	800cab6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2224      	movs	r2, #36	; 0x24
 800ca64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f022 0201 	bic.w	r2, r2, #1
 800ca76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800ca80:	89fb      	ldrh	r3, [r7, #14]
 800ca82:	f023 030f 	bic.w	r3, r3, #15
 800ca86:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	89fb      	ldrh	r3, [r7, #14]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	89fa      	ldrh	r2, [r7, #14]
 800ca98:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f042 0201 	orr.w	r2, r2, #1
 800caa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2220      	movs	r2, #32
 800caae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	e000      	b.n	800cab8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800cab6:	2302      	movs	r3, #2
  }
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3714      	adds	r7, #20
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cac6:	b08f      	sub	sp, #60	; 0x3c
 800cac8:	af0a      	add	r7, sp, #40	; 0x28
 800caca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e10f      	b.n	800ccf6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d106      	bne.n	800caf6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7fc f94b 	bl	8008d8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2203      	movs	r2, #3
 800cafa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d102      	bne.n	800cb10 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f004 fc22 	bl	801135e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	603b      	str	r3, [r7, #0]
 800cb20:	687e      	ldr	r6, [r7, #4]
 800cb22:	466d      	mov	r5, sp
 800cb24:	f106 0410 	add.w	r4, r6, #16
 800cb28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb30:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cb34:	e885 0003 	stmia.w	r5, {r0, r1}
 800cb38:	1d33      	adds	r3, r6, #4
 800cb3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb3c:	6838      	ldr	r0, [r7, #0]
 800cb3e:	f004 fbad 	bl	801129c <USB_CoreInit>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d005      	beq.n	800cb54 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2202      	movs	r2, #2
 800cb4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e0d0      	b.n	800ccf6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2100      	movs	r1, #0
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f004 fc10 	bl	8011380 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb60:	2300      	movs	r3, #0
 800cb62:	73fb      	strb	r3, [r7, #15]
 800cb64:	e04a      	b.n	800cbfc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cb66:	7bfa      	ldrb	r2, [r7, #15]
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	440b      	add	r3, r1
 800cb74:	333d      	adds	r3, #61	; 0x3d
 800cb76:	2201      	movs	r2, #1
 800cb78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cb7a:	7bfa      	ldrb	r2, [r7, #15]
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	00db      	lsls	r3, r3, #3
 800cb82:	1a9b      	subs	r3, r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	440b      	add	r3, r1
 800cb88:	333c      	adds	r3, #60	; 0x3c
 800cb8a:	7bfa      	ldrb	r2, [r7, #15]
 800cb8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800cb8e:	7bfa      	ldrb	r2, [r7, #15]
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
 800cb92:	b298      	uxth	r0, r3
 800cb94:	6879      	ldr	r1, [r7, #4]
 800cb96:	4613      	mov	r3, r2
 800cb98:	00db      	lsls	r3, r3, #3
 800cb9a:	1a9b      	subs	r3, r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	440b      	add	r3, r1
 800cba0:	3342      	adds	r3, #66	; 0x42
 800cba2:	4602      	mov	r2, r0
 800cba4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cba6:	7bfa      	ldrb	r2, [r7, #15]
 800cba8:	6879      	ldr	r1, [r7, #4]
 800cbaa:	4613      	mov	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	1a9b      	subs	r3, r3, r2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	440b      	add	r3, r1
 800cbb4:	333f      	adds	r3, #63	; 0x3f
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cbba:	7bfa      	ldrb	r2, [r7, #15]
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	00db      	lsls	r3, r3, #3
 800cbc2:	1a9b      	subs	r3, r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	440b      	add	r3, r1
 800cbc8:	3344      	adds	r3, #68	; 0x44
 800cbca:	2200      	movs	r2, #0
 800cbcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cbce:	7bfa      	ldrb	r2, [r7, #15]
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	00db      	lsls	r3, r3, #3
 800cbd6:	1a9b      	subs	r3, r3, r2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	440b      	add	r3, r1
 800cbdc:	3348      	adds	r3, #72	; 0x48
 800cbde:	2200      	movs	r2, #0
 800cbe0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cbe2:	7bfa      	ldrb	r2, [r7, #15]
 800cbe4:	6879      	ldr	r1, [r7, #4]
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	1a9b      	subs	r3, r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	440b      	add	r3, r1
 800cbf0:	3350      	adds	r3, #80	; 0x50
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	73fb      	strb	r3, [r7, #15]
 800cbfc:	7bfa      	ldrb	r2, [r7, #15]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d3af      	bcc.n	800cb66 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc06:	2300      	movs	r3, #0
 800cc08:	73fb      	strb	r3, [r7, #15]
 800cc0a:	e044      	b.n	800cc96 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cc0c:	7bfa      	ldrb	r2, [r7, #15]
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	4613      	mov	r3, r2
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	1a9b      	subs	r3, r3, r2
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	440b      	add	r3, r1
 800cc1a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800cc1e:	2200      	movs	r2, #0
 800cc20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cc22:	7bfa      	ldrb	r2, [r7, #15]
 800cc24:	6879      	ldr	r1, [r7, #4]
 800cc26:	4613      	mov	r3, r2
 800cc28:	00db      	lsls	r3, r3, #3
 800cc2a:	1a9b      	subs	r3, r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	440b      	add	r3, r1
 800cc30:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800cc34:	7bfa      	ldrb	r2, [r7, #15]
 800cc36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cc38:	7bfa      	ldrb	r2, [r7, #15]
 800cc3a:	6879      	ldr	r1, [r7, #4]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	1a9b      	subs	r3, r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	440b      	add	r3, r1
 800cc46:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cc4e:	7bfa      	ldrb	r2, [r7, #15]
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	4613      	mov	r3, r2
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	1a9b      	subs	r3, r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	440b      	add	r3, r1
 800cc5c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cc60:	2200      	movs	r2, #0
 800cc62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cc64:	7bfa      	ldrb	r2, [r7, #15]
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	00db      	lsls	r3, r3, #3
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	440b      	add	r3, r1
 800cc72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cc76:	2200      	movs	r2, #0
 800cc78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cc7a:	7bfa      	ldrb	r2, [r7, #15]
 800cc7c:	6879      	ldr	r1, [r7, #4]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	1a9b      	subs	r3, r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	440b      	add	r3, r1
 800cc88:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	3301      	adds	r3, #1
 800cc94:	73fb      	strb	r3, [r7, #15]
 800cc96:	7bfa      	ldrb	r2, [r7, #15]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d3b5      	bcc.n	800cc0c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	603b      	str	r3, [r7, #0]
 800cca6:	687e      	ldr	r6, [r7, #4]
 800cca8:	466d      	mov	r5, sp
 800ccaa:	f106 0410 	add.w	r4, r6, #16
 800ccae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ccba:	e885 0003 	stmia.w	r5, {r0, r1}
 800ccbe:	1d33      	adds	r3, r6, #4
 800ccc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ccc2:	6838      	ldr	r0, [r7, #0]
 800ccc4:	f004 fb86 	bl	80113d4 <USB_DevInit>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e00d      	b.n	800ccf6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2201      	movs	r2, #1
 800cce6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f004 fd35 	bl	801175e <USB_DevDisconnect>

  return HAL_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cd00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e25b      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d075      	beq.n	800ce0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cd1e:	4ba3      	ldr	r3, [pc, #652]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f003 030c 	and.w	r3, r3, #12
 800cd26:	2b04      	cmp	r3, #4
 800cd28:	d00c      	beq.n	800cd44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd2a:	4ba0      	ldr	r3, [pc, #640]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cd32:	2b08      	cmp	r3, #8
 800cd34:	d112      	bne.n	800cd5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd36:	4b9d      	ldr	r3, [pc, #628]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd42:	d10b      	bne.n	800cd5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd44:	4b99      	ldr	r3, [pc, #612]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d05b      	beq.n	800ce08 <HAL_RCC_OscConfig+0x108>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d157      	bne.n	800ce08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e236      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd64:	d106      	bne.n	800cd74 <HAL_RCC_OscConfig+0x74>
 800cd66:	4b91      	ldr	r3, [pc, #580]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a90      	ldr	r2, [pc, #576]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	e01d      	b.n	800cdb0 <HAL_RCC_OscConfig+0xb0>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd7c:	d10c      	bne.n	800cd98 <HAL_RCC_OscConfig+0x98>
 800cd7e:	4b8b      	ldr	r3, [pc, #556]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a8a      	ldr	r2, [pc, #552]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd88:	6013      	str	r3, [r2, #0]
 800cd8a:	4b88      	ldr	r3, [pc, #544]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a87      	ldr	r2, [pc, #540]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd94:	6013      	str	r3, [r2, #0]
 800cd96:	e00b      	b.n	800cdb0 <HAL_RCC_OscConfig+0xb0>
 800cd98:	4b84      	ldr	r3, [pc, #528]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a83      	ldr	r2, [pc, #524]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cd9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cda2:	6013      	str	r3, [r2, #0]
 800cda4:	4b81      	ldr	r3, [pc, #516]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a80      	ldr	r2, [pc, #512]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cdaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cdae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d013      	beq.n	800cde0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdb8:	f7fc f8a2 	bl	8008f00 <HAL_GetTick>
 800cdbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cdbe:	e008      	b.n	800cdd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cdc0:	f7fc f89e 	bl	8008f00 <HAL_GetTick>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	2b64      	cmp	r3, #100	; 0x64
 800cdcc:	d901      	bls.n	800cdd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	e1fb      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cdd2:	4b76      	ldr	r3, [pc, #472]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0f0      	beq.n	800cdc0 <HAL_RCC_OscConfig+0xc0>
 800cdde:	e014      	b.n	800ce0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cde0:	f7fc f88e 	bl	8008f00 <HAL_GetTick>
 800cde4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cde6:	e008      	b.n	800cdfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cde8:	f7fc f88a 	bl	8008f00 <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	2b64      	cmp	r3, #100	; 0x64
 800cdf4:	d901      	bls.n	800cdfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e1e7      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cdfa:	4b6c      	ldr	r3, [pc, #432]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1f0      	bne.n	800cde8 <HAL_RCC_OscConfig+0xe8>
 800ce06:	e000      	b.n	800ce0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 0302 	and.w	r3, r3, #2
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d063      	beq.n	800cede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ce16:	4b65      	ldr	r3, [pc, #404]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	f003 030c 	and.w	r3, r3, #12
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00b      	beq.n	800ce3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce22:	4b62      	ldr	r3, [pc, #392]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ce2a:	2b08      	cmp	r3, #8
 800ce2c:	d11c      	bne.n	800ce68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce2e:	4b5f      	ldr	r3, [pc, #380]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d116      	bne.n	800ce68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce3a:	4b5c      	ldr	r3, [pc, #368]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f003 0302 	and.w	r3, r3, #2
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d005      	beq.n	800ce52 <HAL_RCC_OscConfig+0x152>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d001      	beq.n	800ce52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e1bb      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce52:	4b56      	ldr	r3, [pc, #344]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	4952      	ldr	r1, [pc, #328]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ce62:	4313      	orrs	r3, r2
 800ce64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce66:	e03a      	b.n	800cede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d020      	beq.n	800ceb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ce70:	4b4f      	ldr	r3, [pc, #316]	; (800cfb0 <HAL_RCC_OscConfig+0x2b0>)
 800ce72:	2201      	movs	r2, #1
 800ce74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce76:	f7fc f843 	bl	8008f00 <HAL_GetTick>
 800ce7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce7c:	e008      	b.n	800ce90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce7e:	f7fc f83f 	bl	8008f00 <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d901      	bls.n	800ce90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e19c      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce90:	4b46      	ldr	r3, [pc, #280]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 0302 	and.w	r3, r3, #2
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0f0      	beq.n	800ce7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce9c:	4b43      	ldr	r3, [pc, #268]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	4940      	ldr	r1, [pc, #256]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ceac:	4313      	orrs	r3, r2
 800ceae:	600b      	str	r3, [r1, #0]
 800ceb0:	e015      	b.n	800cede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ceb2:	4b3f      	ldr	r3, [pc, #252]	; (800cfb0 <HAL_RCC_OscConfig+0x2b0>)
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ceb8:	f7fc f822 	bl	8008f00 <HAL_GetTick>
 800cebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cebe:	e008      	b.n	800ced2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cec0:	f7fc f81e 	bl	8008f00 <HAL_GetTick>
 800cec4:	4602      	mov	r2, r0
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d901      	bls.n	800ced2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cece:	2303      	movs	r3, #3
 800ced0:	e17b      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ced2:	4b36      	ldr	r3, [pc, #216]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 0302 	and.w	r3, r3, #2
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1f0      	bne.n	800cec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 0308 	and.w	r3, r3, #8
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d030      	beq.n	800cf4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	695b      	ldr	r3, [r3, #20]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d016      	beq.n	800cf20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cef2:	4b30      	ldr	r3, [pc, #192]	; (800cfb4 <HAL_RCC_OscConfig+0x2b4>)
 800cef4:	2201      	movs	r2, #1
 800cef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cef8:	f7fc f802 	bl	8008f00 <HAL_GetTick>
 800cefc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cefe:	e008      	b.n	800cf12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf00:	f7fb fffe 	bl	8008f00 <HAL_GetTick>
 800cf04:	4602      	mov	r2, r0
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d901      	bls.n	800cf12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cf0e:	2303      	movs	r3, #3
 800cf10:	e15b      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cf12:	4b26      	ldr	r3, [pc, #152]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cf14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf16:	f003 0302 	and.w	r3, r3, #2
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d0f0      	beq.n	800cf00 <HAL_RCC_OscConfig+0x200>
 800cf1e:	e015      	b.n	800cf4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf20:	4b24      	ldr	r3, [pc, #144]	; (800cfb4 <HAL_RCC_OscConfig+0x2b4>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cf26:	f7fb ffeb 	bl	8008f00 <HAL_GetTick>
 800cf2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf2c:	e008      	b.n	800cf40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf2e:	f7fb ffe7 	bl	8008f00 <HAL_GetTick>
 800cf32:	4602      	mov	r2, r0
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	1ad3      	subs	r3, r2, r3
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d901      	bls.n	800cf40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cf3c:	2303      	movs	r3, #3
 800cf3e:	e144      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf40:	4b1a      	ldr	r3, [pc, #104]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cf42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf44:	f003 0302 	and.w	r3, r3, #2
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f0      	bne.n	800cf2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f003 0304 	and.w	r3, r3, #4
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f000 80a0 	beq.w	800d09a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf5e:	4b13      	ldr	r3, [pc, #76]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10f      	bne.n	800cf8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	60bb      	str	r3, [r7, #8]
 800cf6e:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf72:	4a0e      	ldr	r2, [pc, #56]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cf74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf78:	6413      	str	r3, [r2, #64]	; 0x40
 800cf7a:	4b0c      	ldr	r3, [pc, #48]	; (800cfac <HAL_RCC_OscConfig+0x2ac>)
 800cf7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf82:	60bb      	str	r3, [r7, #8]
 800cf84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cf86:	2301      	movs	r3, #1
 800cf88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf8a:	4b0b      	ldr	r3, [pc, #44]	; (800cfb8 <HAL_RCC_OscConfig+0x2b8>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d121      	bne.n	800cfda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf96:	4b08      	ldr	r3, [pc, #32]	; (800cfb8 <HAL_RCC_OscConfig+0x2b8>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a07      	ldr	r2, [pc, #28]	; (800cfb8 <HAL_RCC_OscConfig+0x2b8>)
 800cf9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cfa2:	f7fb ffad 	bl	8008f00 <HAL_GetTick>
 800cfa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfa8:	e011      	b.n	800cfce <HAL_RCC_OscConfig+0x2ce>
 800cfaa:	bf00      	nop
 800cfac:	40023800 	.word	0x40023800
 800cfb0:	42470000 	.word	0x42470000
 800cfb4:	42470e80 	.word	0x42470e80
 800cfb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfbc:	f7fb ffa0 	bl	8008f00 <HAL_GetTick>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	d901      	bls.n	800cfce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e0fd      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfce:	4b81      	ldr	r3, [pc, #516]	; (800d1d4 <HAL_RCC_OscConfig+0x4d4>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d0f0      	beq.n	800cfbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d106      	bne.n	800cff0 <HAL_RCC_OscConfig+0x2f0>
 800cfe2:	4b7d      	ldr	r3, [pc, #500]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800cfe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe6:	4a7c      	ldr	r2, [pc, #496]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800cfe8:	f043 0301 	orr.w	r3, r3, #1
 800cfec:	6713      	str	r3, [r2, #112]	; 0x70
 800cfee:	e01c      	b.n	800d02a <HAL_RCC_OscConfig+0x32a>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	2b05      	cmp	r3, #5
 800cff6:	d10c      	bne.n	800d012 <HAL_RCC_OscConfig+0x312>
 800cff8:	4b77      	ldr	r3, [pc, #476]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800cffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cffc:	4a76      	ldr	r2, [pc, #472]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800cffe:	f043 0304 	orr.w	r3, r3, #4
 800d002:	6713      	str	r3, [r2, #112]	; 0x70
 800d004:	4b74      	ldr	r3, [pc, #464]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d008:	4a73      	ldr	r2, [pc, #460]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d00a:	f043 0301 	orr.w	r3, r3, #1
 800d00e:	6713      	str	r3, [r2, #112]	; 0x70
 800d010:	e00b      	b.n	800d02a <HAL_RCC_OscConfig+0x32a>
 800d012:	4b71      	ldr	r3, [pc, #452]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d016:	4a70      	ldr	r2, [pc, #448]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d018:	f023 0301 	bic.w	r3, r3, #1
 800d01c:	6713      	str	r3, [r2, #112]	; 0x70
 800d01e:	4b6e      	ldr	r3, [pc, #440]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d022:	4a6d      	ldr	r2, [pc, #436]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d024:	f023 0304 	bic.w	r3, r3, #4
 800d028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d015      	beq.n	800d05e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d032:	f7fb ff65 	bl	8008f00 <HAL_GetTick>
 800d036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d038:	e00a      	b.n	800d050 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d03a:	f7fb ff61 	bl	8008f00 <HAL_GetTick>
 800d03e:	4602      	mov	r2, r0
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	f241 3288 	movw	r2, #5000	; 0x1388
 800d048:	4293      	cmp	r3, r2
 800d04a:	d901      	bls.n	800d050 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e0bc      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d050:	4b61      	ldr	r3, [pc, #388]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d054:	f003 0302 	and.w	r3, r3, #2
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d0ee      	beq.n	800d03a <HAL_RCC_OscConfig+0x33a>
 800d05c:	e014      	b.n	800d088 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d05e:	f7fb ff4f 	bl	8008f00 <HAL_GetTick>
 800d062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d064:	e00a      	b.n	800d07c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d066:	f7fb ff4b 	bl	8008f00 <HAL_GetTick>
 800d06a:	4602      	mov	r2, r0
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	f241 3288 	movw	r2, #5000	; 0x1388
 800d074:	4293      	cmp	r3, r2
 800d076:	d901      	bls.n	800d07c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d078:	2303      	movs	r3, #3
 800d07a:	e0a6      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d07c:	4b56      	ldr	r3, [pc, #344]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d080:	f003 0302 	and.w	r3, r3, #2
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1ee      	bne.n	800d066 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d088:	7dfb      	ldrb	r3, [r7, #23]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d105      	bne.n	800d09a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d08e:	4b52      	ldr	r3, [pc, #328]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d092:	4a51      	ldr	r2, [pc, #324]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d098:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f000 8092 	beq.w	800d1c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d0a4:	4b4c      	ldr	r3, [pc, #304]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	f003 030c 	and.w	r3, r3, #12
 800d0ac:	2b08      	cmp	r3, #8
 800d0ae:	d05c      	beq.n	800d16a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d141      	bne.n	800d13c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0b8:	4b48      	ldr	r3, [pc, #288]	; (800d1dc <HAL_RCC_OscConfig+0x4dc>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0be:	f7fb ff1f 	bl	8008f00 <HAL_GetTick>
 800d0c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0c4:	e008      	b.n	800d0d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0c6:	f7fb ff1b 	bl	8008f00 <HAL_GetTick>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d901      	bls.n	800d0d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e078      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0d8:	4b3f      	ldr	r3, [pc, #252]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1f0      	bne.n	800d0c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	69da      	ldr	r2, [r3, #28]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a1b      	ldr	r3, [r3, #32]
 800d0ec:	431a      	orrs	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f2:	019b      	lsls	r3, r3, #6
 800d0f4:	431a      	orrs	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0fa:	085b      	lsrs	r3, r3, #1
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	041b      	lsls	r3, r3, #16
 800d100:	431a      	orrs	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d106:	061b      	lsls	r3, r3, #24
 800d108:	4933      	ldr	r1, [pc, #204]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d10a:	4313      	orrs	r3, r2
 800d10c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d10e:	4b33      	ldr	r3, [pc, #204]	; (800d1dc <HAL_RCC_OscConfig+0x4dc>)
 800d110:	2201      	movs	r2, #1
 800d112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d114:	f7fb fef4 	bl	8008f00 <HAL_GetTick>
 800d118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d11a:	e008      	b.n	800d12e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d11c:	f7fb fef0 	bl	8008f00 <HAL_GetTick>
 800d120:	4602      	mov	r2, r0
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	2b02      	cmp	r3, #2
 800d128:	d901      	bls.n	800d12e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d12a:	2303      	movs	r3, #3
 800d12c:	e04d      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d12e:	4b2a      	ldr	r3, [pc, #168]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0f0      	beq.n	800d11c <HAL_RCC_OscConfig+0x41c>
 800d13a:	e045      	b.n	800d1c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d13c:	4b27      	ldr	r3, [pc, #156]	; (800d1dc <HAL_RCC_OscConfig+0x4dc>)
 800d13e:	2200      	movs	r2, #0
 800d140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d142:	f7fb fedd 	bl	8008f00 <HAL_GetTick>
 800d146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d148:	e008      	b.n	800d15c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d14a:	f7fb fed9 	bl	8008f00 <HAL_GetTick>
 800d14e:	4602      	mov	r2, r0
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	2b02      	cmp	r3, #2
 800d156:	d901      	bls.n	800d15c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d158:	2303      	movs	r3, #3
 800d15a:	e036      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d15c:	4b1e      	ldr	r3, [pc, #120]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1f0      	bne.n	800d14a <HAL_RCC_OscConfig+0x44a>
 800d168:	e02e      	b.n	800d1c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d101      	bne.n	800d176 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e029      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d176:	4b18      	ldr	r3, [pc, #96]	; (800d1d8 <HAL_RCC_OscConfig+0x4d8>)
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	69db      	ldr	r3, [r3, #28]
 800d186:	429a      	cmp	r2, r3
 800d188:	d11c      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d194:	429a      	cmp	r2, r3
 800d196:	d115      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d19e:	4013      	ands	r3, r2
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d10d      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d106      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d001      	beq.n	800d1c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e000      	b.n	800d1ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3718      	adds	r7, #24
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	40007000 	.word	0x40007000
 800d1d8:	40023800 	.word	0x40023800
 800d1dc:	42470060 	.word	0x42470060

0800d1e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d101      	bne.n	800d1f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e0cc      	b.n	800d38e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d1f4:	4b68      	ldr	r3, [pc, #416]	; (800d398 <HAL_RCC_ClockConfig+0x1b8>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 030f 	and.w	r3, r3, #15
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d90c      	bls.n	800d21c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d202:	4b65      	ldr	r3, [pc, #404]	; (800d398 <HAL_RCC_ClockConfig+0x1b8>)
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	b2d2      	uxtb	r2, r2
 800d208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d20a:	4b63      	ldr	r3, [pc, #396]	; (800d398 <HAL_RCC_ClockConfig+0x1b8>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 030f 	and.w	r3, r3, #15
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	429a      	cmp	r2, r3
 800d216:	d001      	beq.n	800d21c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	e0b8      	b.n	800d38e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 0302 	and.w	r3, r3, #2
 800d224:	2b00      	cmp	r3, #0
 800d226:	d020      	beq.n	800d26a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f003 0304 	and.w	r3, r3, #4
 800d230:	2b00      	cmp	r3, #0
 800d232:	d005      	beq.n	800d240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d234:	4b59      	ldr	r3, [pc, #356]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	4a58      	ldr	r2, [pc, #352]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d23a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d23e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 0308 	and.w	r3, r3, #8
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d005      	beq.n	800d258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d24c:	4b53      	ldr	r3, [pc, #332]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	4a52      	ldr	r2, [pc, #328]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d258:	4b50      	ldr	r3, [pc, #320]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	494d      	ldr	r1, [pc, #308]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d266:	4313      	orrs	r3, r2
 800d268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f003 0301 	and.w	r3, r3, #1
 800d272:	2b00      	cmp	r3, #0
 800d274:	d044      	beq.n	800d300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d107      	bne.n	800d28e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d27e:	4b47      	ldr	r3, [pc, #284]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d286:	2b00      	cmp	r3, #0
 800d288:	d119      	bne.n	800d2be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e07f      	b.n	800d38e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	2b02      	cmp	r3, #2
 800d294:	d003      	beq.n	800d29e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d29a:	2b03      	cmp	r3, #3
 800d29c:	d107      	bne.n	800d2ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d29e:	4b3f      	ldr	r3, [pc, #252]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d109      	bne.n	800d2be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e06f      	b.n	800d38e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d2ae:	4b3b      	ldr	r3, [pc, #236]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f003 0302 	and.w	r3, r3, #2
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e067      	b.n	800d38e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d2be:	4b37      	ldr	r3, [pc, #220]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	f023 0203 	bic.w	r2, r3, #3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	4934      	ldr	r1, [pc, #208]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d2d0:	f7fb fe16 	bl	8008f00 <HAL_GetTick>
 800d2d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2d6:	e00a      	b.n	800d2ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2d8:	f7fb fe12 	bl	8008f00 <HAL_GetTick>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d901      	bls.n	800d2ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	e04f      	b.n	800d38e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2ee:	4b2b      	ldr	r3, [pc, #172]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	f003 020c 	and.w	r2, r3, #12
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d1eb      	bne.n	800d2d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d300:	4b25      	ldr	r3, [pc, #148]	; (800d398 <HAL_RCC_ClockConfig+0x1b8>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 030f 	and.w	r3, r3, #15
 800d308:	683a      	ldr	r2, [r7, #0]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d20c      	bcs.n	800d328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d30e:	4b22      	ldr	r3, [pc, #136]	; (800d398 <HAL_RCC_ClockConfig+0x1b8>)
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	b2d2      	uxtb	r2, r2
 800d314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d316:	4b20      	ldr	r3, [pc, #128]	; (800d398 <HAL_RCC_ClockConfig+0x1b8>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f003 030f 	and.w	r3, r3, #15
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d001      	beq.n	800d328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	e032      	b.n	800d38e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f003 0304 	and.w	r3, r3, #4
 800d330:	2b00      	cmp	r3, #0
 800d332:	d008      	beq.n	800d346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d334:	4b19      	ldr	r3, [pc, #100]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	4916      	ldr	r1, [pc, #88]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d342:	4313      	orrs	r3, r2
 800d344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f003 0308 	and.w	r3, r3, #8
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d009      	beq.n	800d366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d352:	4b12      	ldr	r3, [pc, #72]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	691b      	ldr	r3, [r3, #16]
 800d35e:	00db      	lsls	r3, r3, #3
 800d360:	490e      	ldr	r1, [pc, #56]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d362:	4313      	orrs	r3, r2
 800d364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d366:	f000 f821 	bl	800d3ac <HAL_RCC_GetSysClockFreq>
 800d36a:	4601      	mov	r1, r0
 800d36c:	4b0b      	ldr	r3, [pc, #44]	; (800d39c <HAL_RCC_ClockConfig+0x1bc>)
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	091b      	lsrs	r3, r3, #4
 800d372:	f003 030f 	and.w	r3, r3, #15
 800d376:	4a0a      	ldr	r2, [pc, #40]	; (800d3a0 <HAL_RCC_ClockConfig+0x1c0>)
 800d378:	5cd3      	ldrb	r3, [r2, r3]
 800d37a:	fa21 f303 	lsr.w	r3, r1, r3
 800d37e:	4a09      	ldr	r2, [pc, #36]	; (800d3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800d380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d382:	4b09      	ldr	r3, [pc, #36]	; (800d3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4618      	mov	r0, r3
 800d388:	f7fa fdb8 	bl	8007efc <HAL_InitTick>

  return HAL_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	40023c00 	.word	0x40023c00
 800d39c:	40023800 	.word	0x40023800
 800d3a0:	0801a92c 	.word	0x0801a92c
 800d3a4:	200000b0 	.word	0x200000b0
 800d3a8:	200000b4 	.word	0x200000b4

0800d3ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	607b      	str	r3, [r7, #4]
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d3c2:	4b63      	ldr	r3, [pc, #396]	; (800d550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	f003 030c 	and.w	r3, r3, #12
 800d3ca:	2b04      	cmp	r3, #4
 800d3cc:	d007      	beq.n	800d3de <HAL_RCC_GetSysClockFreq+0x32>
 800d3ce:	2b08      	cmp	r3, #8
 800d3d0:	d008      	beq.n	800d3e4 <HAL_RCC_GetSysClockFreq+0x38>
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f040 80b4 	bne.w	800d540 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d3d8:	4b5e      	ldr	r3, [pc, #376]	; (800d554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d3da:	60bb      	str	r3, [r7, #8]
       break;
 800d3dc:	e0b3      	b.n	800d546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d3de:	4b5e      	ldr	r3, [pc, #376]	; (800d558 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d3e0:	60bb      	str	r3, [r7, #8]
      break;
 800d3e2:	e0b0      	b.n	800d546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d3e4:	4b5a      	ldr	r3, [pc, #360]	; (800d550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d3ee:	4b58      	ldr	r3, [pc, #352]	; (800d550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d04a      	beq.n	800d490 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d3fa:	4b55      	ldr	r3, [pc, #340]	; (800d550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	099b      	lsrs	r3, r3, #6
 800d400:	f04f 0400 	mov.w	r4, #0
 800d404:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d408:	f04f 0200 	mov.w	r2, #0
 800d40c:	ea03 0501 	and.w	r5, r3, r1
 800d410:	ea04 0602 	and.w	r6, r4, r2
 800d414:	4629      	mov	r1, r5
 800d416:	4632      	mov	r2, r6
 800d418:	f04f 0300 	mov.w	r3, #0
 800d41c:	f04f 0400 	mov.w	r4, #0
 800d420:	0154      	lsls	r4, r2, #5
 800d422:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d426:	014b      	lsls	r3, r1, #5
 800d428:	4619      	mov	r1, r3
 800d42a:	4622      	mov	r2, r4
 800d42c:	1b49      	subs	r1, r1, r5
 800d42e:	eb62 0206 	sbc.w	r2, r2, r6
 800d432:	f04f 0300 	mov.w	r3, #0
 800d436:	f04f 0400 	mov.w	r4, #0
 800d43a:	0194      	lsls	r4, r2, #6
 800d43c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d440:	018b      	lsls	r3, r1, #6
 800d442:	1a5b      	subs	r3, r3, r1
 800d444:	eb64 0402 	sbc.w	r4, r4, r2
 800d448:	f04f 0100 	mov.w	r1, #0
 800d44c:	f04f 0200 	mov.w	r2, #0
 800d450:	00e2      	lsls	r2, r4, #3
 800d452:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d456:	00d9      	lsls	r1, r3, #3
 800d458:	460b      	mov	r3, r1
 800d45a:	4614      	mov	r4, r2
 800d45c:	195b      	adds	r3, r3, r5
 800d45e:	eb44 0406 	adc.w	r4, r4, r6
 800d462:	f04f 0100 	mov.w	r1, #0
 800d466:	f04f 0200 	mov.w	r2, #0
 800d46a:	0262      	lsls	r2, r4, #9
 800d46c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800d470:	0259      	lsls	r1, r3, #9
 800d472:	460b      	mov	r3, r1
 800d474:	4614      	mov	r4, r2
 800d476:	4618      	mov	r0, r3
 800d478:	4621      	mov	r1, r4
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f04f 0400 	mov.w	r4, #0
 800d480:	461a      	mov	r2, r3
 800d482:	4623      	mov	r3, r4
 800d484:	f7f3 fd6e 	bl	8000f64 <__aeabi_uldivmod>
 800d488:	4603      	mov	r3, r0
 800d48a:	460c      	mov	r4, r1
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	e049      	b.n	800d524 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d490:	4b2f      	ldr	r3, [pc, #188]	; (800d550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	099b      	lsrs	r3, r3, #6
 800d496:	f04f 0400 	mov.w	r4, #0
 800d49a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d49e:	f04f 0200 	mov.w	r2, #0
 800d4a2:	ea03 0501 	and.w	r5, r3, r1
 800d4a6:	ea04 0602 	and.w	r6, r4, r2
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	4632      	mov	r2, r6
 800d4ae:	f04f 0300 	mov.w	r3, #0
 800d4b2:	f04f 0400 	mov.w	r4, #0
 800d4b6:	0154      	lsls	r4, r2, #5
 800d4b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d4bc:	014b      	lsls	r3, r1, #5
 800d4be:	4619      	mov	r1, r3
 800d4c0:	4622      	mov	r2, r4
 800d4c2:	1b49      	subs	r1, r1, r5
 800d4c4:	eb62 0206 	sbc.w	r2, r2, r6
 800d4c8:	f04f 0300 	mov.w	r3, #0
 800d4cc:	f04f 0400 	mov.w	r4, #0
 800d4d0:	0194      	lsls	r4, r2, #6
 800d4d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d4d6:	018b      	lsls	r3, r1, #6
 800d4d8:	1a5b      	subs	r3, r3, r1
 800d4da:	eb64 0402 	sbc.w	r4, r4, r2
 800d4de:	f04f 0100 	mov.w	r1, #0
 800d4e2:	f04f 0200 	mov.w	r2, #0
 800d4e6:	00e2      	lsls	r2, r4, #3
 800d4e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d4ec:	00d9      	lsls	r1, r3, #3
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4614      	mov	r4, r2
 800d4f2:	195b      	adds	r3, r3, r5
 800d4f4:	eb44 0406 	adc.w	r4, r4, r6
 800d4f8:	f04f 0100 	mov.w	r1, #0
 800d4fc:	f04f 0200 	mov.w	r2, #0
 800d500:	02a2      	lsls	r2, r4, #10
 800d502:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d506:	0299      	lsls	r1, r3, #10
 800d508:	460b      	mov	r3, r1
 800d50a:	4614      	mov	r4, r2
 800d50c:	4618      	mov	r0, r3
 800d50e:	4621      	mov	r1, r4
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f04f 0400 	mov.w	r4, #0
 800d516:	461a      	mov	r2, r3
 800d518:	4623      	mov	r3, r4
 800d51a:	f7f3 fd23 	bl	8000f64 <__aeabi_uldivmod>
 800d51e:	4603      	mov	r3, r0
 800d520:	460c      	mov	r4, r1
 800d522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d524:	4b0a      	ldr	r3, [pc, #40]	; (800d550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	0c1b      	lsrs	r3, r3, #16
 800d52a:	f003 0303 	and.w	r3, r3, #3
 800d52e:	3301      	adds	r3, #1
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	fbb2 f3f3 	udiv	r3, r2, r3
 800d53c:	60bb      	str	r3, [r7, #8]
      break;
 800d53e:	e002      	b.n	800d546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d540:	4b04      	ldr	r3, [pc, #16]	; (800d554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d542:	60bb      	str	r3, [r7, #8]
      break;
 800d544:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d546:	68bb      	ldr	r3, [r7, #8]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3714      	adds	r7, #20
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d550:	40023800 	.word	0x40023800
 800d554:	00f42400 	.word	0x00f42400
 800d558:	007a1200 	.word	0x007a1200

0800d55c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d55c:	b480      	push	{r7}
 800d55e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d560:	4b03      	ldr	r3, [pc, #12]	; (800d570 <HAL_RCC_GetHCLKFreq+0x14>)
 800d562:	681b      	ldr	r3, [r3, #0]
}
 800d564:	4618      	mov	r0, r3
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	200000b0 	.word	0x200000b0

0800d574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d578:	f7ff fff0 	bl	800d55c <HAL_RCC_GetHCLKFreq>
 800d57c:	4601      	mov	r1, r0
 800d57e:	4b05      	ldr	r3, [pc, #20]	; (800d594 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	0a9b      	lsrs	r3, r3, #10
 800d584:	f003 0307 	and.w	r3, r3, #7
 800d588:	4a03      	ldr	r2, [pc, #12]	; (800d598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d58a:	5cd3      	ldrb	r3, [r2, r3]
 800d58c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d590:	4618      	mov	r0, r3
 800d592:	bd80      	pop	{r7, pc}
 800d594:	40023800 	.word	0x40023800
 800d598:	0801a93c 	.word	0x0801a93c

0800d59c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d5a0:	f7ff ffdc 	bl	800d55c <HAL_RCC_GetHCLKFreq>
 800d5a4:	4601      	mov	r1, r0
 800d5a6:	4b05      	ldr	r3, [pc, #20]	; (800d5bc <HAL_RCC_GetPCLK2Freq+0x20>)
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	0b5b      	lsrs	r3, r3, #13
 800d5ac:	f003 0307 	and.w	r3, r3, #7
 800d5b0:	4a03      	ldr	r2, [pc, #12]	; (800d5c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d5b2:	5cd3      	ldrb	r3, [r2, r3]
 800d5b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	40023800 	.word	0x40023800
 800d5c0:	0801a93c 	.word	0x0801a93c

0800d5c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	220f      	movs	r2, #15
 800d5d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d5d4:	4b12      	ldr	r3, [pc, #72]	; (800d620 <HAL_RCC_GetClockConfig+0x5c>)
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	f003 0203 	and.w	r2, r3, #3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d5e0:	4b0f      	ldr	r3, [pc, #60]	; (800d620 <HAL_RCC_GetClockConfig+0x5c>)
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d5ec:	4b0c      	ldr	r3, [pc, #48]	; (800d620 <HAL_RCC_GetClockConfig+0x5c>)
 800d5ee:	689b      	ldr	r3, [r3, #8]
 800d5f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d5f8:	4b09      	ldr	r3, [pc, #36]	; (800d620 <HAL_RCC_GetClockConfig+0x5c>)
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	08db      	lsrs	r3, r3, #3
 800d5fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d606:	4b07      	ldr	r3, [pc, #28]	; (800d624 <HAL_RCC_GetClockConfig+0x60>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f003 020f 	and.w	r2, r3, #15
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	601a      	str	r2, [r3, #0]
}
 800d612:	bf00      	nop
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	40023800 	.word	0x40023800
 800d624:	40023c00 	.word	0x40023c00

0800d628 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d101      	bne.n	800d63a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d636:	2301      	movs	r3, #1
 800d638:	e022      	b.n	800d680 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d640:	b2db      	uxtb	r3, r3
 800d642:	2b00      	cmp	r3, #0
 800d644:	d105      	bne.n	800d652 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7fa fb31 	bl	8007cb4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2203      	movs	r2, #3
 800d656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f814 	bl	800d688 <HAL_SD_InitCard>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e00a      	b.n	800d680 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d688:	b5b0      	push	{r4, r5, r7, lr}
 800d68a:	b08e      	sub	sp, #56	; 0x38
 800d68c:	af04      	add	r7, sp, #16
 800d68e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d690:	2300      	movs	r3, #0
 800d692:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d694:	2300      	movs	r3, #0
 800d696:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d698:	2300      	movs	r3, #0
 800d69a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d69c:	2300      	movs	r3, #0
 800d69e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d6a4:	2376      	movs	r3, #118	; 0x76
 800d6a6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681d      	ldr	r5, [r3, #0]
 800d6ac:	466c      	mov	r4, sp
 800d6ae:	f107 0314 	add.w	r3, r7, #20
 800d6b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d6b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d6ba:	f107 0308 	add.w	r3, r7, #8
 800d6be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f003 f887 	bl	80107d4 <SDIO_Init>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d001      	beq.n	800d6d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e031      	b.n	800d73c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d6d8:	4b1a      	ldr	r3, [pc, #104]	; (800d744 <HAL_SD_InitCard+0xbc>)
 800d6da:	2200      	movs	r2, #0
 800d6dc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f003 f8bf 	bl	8010866 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d6e8:	4b16      	ldr	r3, [pc, #88]	; (800d744 <HAL_SD_InitCard+0xbc>)
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 ffdc 	bl	800e6ac <SD_PowerON>
 800d6f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6f6:	6a3b      	ldr	r3, [r7, #32]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00b      	beq.n	800d714 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d708:	6a3b      	ldr	r3, [r7, #32]
 800d70a:	431a      	orrs	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d710:	2301      	movs	r3, #1
 800d712:	e013      	b.n	800d73c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 fefb 	bl	800e510 <SD_InitCard>
 800d71a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d71c:	6a3b      	ldr	r3, [r7, #32]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00b      	beq.n	800d73a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	431a      	orrs	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d736:	2301      	movs	r3, #1
 800d738:	e000      	b.n	800d73c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3728      	adds	r7, #40	; 0x28
 800d740:	46bd      	mov	sp, r7
 800d742:	bdb0      	pop	{r4, r5, r7, pc}
 800d744:	422580a0 	.word	0x422580a0

0800d748 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b08c      	sub	sp, #48	; 0x30
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d107      	bne.n	800d770 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d764:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	e0c9      	b.n	800d904 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d776:	b2db      	uxtb	r3, r3
 800d778:	2b01      	cmp	r3, #1
 800d77a:	f040 80c2 	bne.w	800d902 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	441a      	add	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d78e:	429a      	cmp	r2, r3
 800d790:	d907      	bls.n	800d7a2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d796:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e0b0      	b.n	800d904 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2203      	movs	r2, #3
 800d7a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	6812      	ldr	r2, [r2, #0]
 800d7bc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800d7c0:	f043 0302 	orr.w	r3, r3, #2
 800d7c4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ca:	4a50      	ldr	r2, [pc, #320]	; (800d90c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d7cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d2:	4a4f      	ldr	r2, [pc, #316]	; (800d910 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d7d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7da:	2200      	movs	r2, #0
 800d7dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3380      	adds	r3, #128	; 0x80
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	025b      	lsls	r3, r3, #9
 800d7f0:	089b      	lsrs	r3, r3, #2
 800d7f2:	f7fb fd43 	bl	800927c <HAL_DMA_Start_IT>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d017      	beq.n	800d82c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d80a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a40      	ldr	r2, [pc, #256]	; (800d914 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d812:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d818:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2201      	movs	r2, #1
 800d824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d828:	2301      	movs	r3, #1
 800d82a:	e06b      	b.n	800d904 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d82c:	4b3a      	ldr	r3, [pc, #232]	; (800d918 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800d82e:	2201      	movs	r2, #1
 800d830:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d836:	2b01      	cmp	r3, #1
 800d838:	d002      	beq.n	800d840 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800d83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83c:	025b      	lsls	r3, r3, #9
 800d83e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d848:	4618      	mov	r0, r3
 800d84a:	f003 f89f 	bl	801098c <SDMMC_CmdBlockLength>
 800d84e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00f      	beq.n	800d876 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a2e      	ldr	r2, [pc, #184]	; (800d914 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d864:	431a      	orrs	r2, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d872:	2301      	movs	r3, #1
 800d874:	e046      	b.n	800d904 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d876:	f04f 33ff 	mov.w	r3, #4294967295
 800d87a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	025b      	lsls	r3, r3, #9
 800d880:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d882:	2390      	movs	r3, #144	; 0x90
 800d884:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d886:	2302      	movs	r3, #2
 800d888:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d88e:	2301      	movs	r3, #1
 800d890:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f107 0210 	add.w	r2, r7, #16
 800d89a:	4611      	mov	r1, r2
 800d89c:	4618      	mov	r0, r3
 800d89e:	f003 f849 	bl	8010934 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d90a      	bls.n	800d8be <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2282      	movs	r2, #130	; 0x82
 800d8ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f003 f8ad 	bl	8010a14 <SDMMC_CmdReadMultiBlock>
 800d8ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d8bc:	e009      	b.n	800d8d2 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2281      	movs	r2, #129	; 0x81
 800d8c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f003 f880 	bl	80109d0 <SDMMC_CmdReadSingleBlock>
 800d8d0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d012      	beq.n	800d8fe <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a0d      	ldr	r2, [pc, #52]	; (800d914 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d8de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	431a      	orrs	r2, r3
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e002      	b.n	800d904 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800d8fe:	2300      	movs	r3, #0
 800d900:	e000      	b.n	800d904 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800d902:	2302      	movs	r3, #2
  }
}
 800d904:	4618      	mov	r0, r3
 800d906:	3730      	adds	r7, #48	; 0x30
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	0800e31f 	.word	0x0800e31f
 800d910:	0800e391 	.word	0x0800e391
 800d914:	004005ff 	.word	0x004005ff
 800d918:	4225858c 	.word	0x4225858c

0800d91c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b08c      	sub	sp, #48	; 0x30
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d107      	bne.n	800d944 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d938:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e0ce      	b.n	800dae2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	f040 80c7 	bne.w	800dae0 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	441a      	add	r2, r3
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d962:	429a      	cmp	r2, r3
 800d964:	d907      	bls.n	800d976 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	e0b5      	b.n	800dae2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2203      	movs	r2, #3
 800d97a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2200      	movs	r2, #0
 800d984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	6812      	ldr	r2, [r2, #0]
 800d990:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800d994:	f043 0302 	orr.w	r3, r3, #2
 800d998:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99e:	4a53      	ldr	r2, [pc, #332]	; (800daec <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d9a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a6:	4a52      	ldr	r2, [pc, #328]	; (800daf0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d9a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d002      	beq.n	800d9c0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	025b      	lsls	r3, r3, #9
 800d9be:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f002 ffdf 	bl	801098c <SDMMC_CmdBlockLength>
 800d9ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00f      	beq.n	800d9f6 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a46      	ldr	r2, [pc, #280]	; (800daf4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800d9dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	431a      	orrs	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e075      	b.n	800dae2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d90a      	bls.n	800da12 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	22a0      	movs	r2, #160	; 0xa0
 800da00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da08:	4618      	mov	r0, r3
 800da0a:	f003 f847 	bl	8010a9c <SDMMC_CmdWriteMultiBlock>
 800da0e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800da10:	e009      	b.n	800da26 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2290      	movs	r2, #144	; 0x90
 800da16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da1e:	4618      	mov	r0, r3
 800da20:	f003 f81a 	bl	8010a58 <SDMMC_CmdWriteSingleBlock>
 800da24:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d012      	beq.n	800da52 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a30      	ldr	r2, [pc, #192]	; (800daf4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800da32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	431a      	orrs	r2, r3
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	e047      	b.n	800dae2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800da52:	4b29      	ldr	r3, [pc, #164]	; (800daf8 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800da54:	2201      	movs	r2, #1
 800da56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800da5c:	68b9      	ldr	r1, [r7, #8]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	3380      	adds	r3, #128	; 0x80
 800da64:	461a      	mov	r2, r3
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	025b      	lsls	r3, r3, #9
 800da6a:	089b      	lsrs	r3, r3, #2
 800da6c:	f7fb fc06 	bl	800927c <HAL_DMA_Start_IT>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d01c      	beq.n	800dab0 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	6812      	ldr	r2, [r2, #0]
 800da80:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800da84:	f023 0302 	bic.w	r3, r3, #2
 800da88:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a19      	ldr	r2, [pc, #100]	; (800daf4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800da90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2200      	movs	r2, #0
 800daaa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800daac:	2301      	movs	r3, #1
 800daae:	e018      	b.n	800dae2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dab0:	f04f 33ff 	mov.w	r3, #4294967295
 800dab4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	025b      	lsls	r3, r3, #9
 800daba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800dabc:	2390      	movs	r3, #144	; 0x90
 800dabe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800dac0:	2300      	movs	r3, #0
 800dac2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800dac8:	2301      	movs	r3, #1
 800daca:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f107 0210 	add.w	r2, r7, #16
 800dad4:	4611      	mov	r1, r2
 800dad6:	4618      	mov	r0, r3
 800dad8:	f002 ff2c 	bl	8010934 <SDIO_ConfigData>

      return HAL_OK;
 800dadc:	2300      	movs	r3, #0
 800dade:	e000      	b.n	800dae2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800dae0:	2302      	movs	r3, #2
  }
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3730      	adds	r7, #48	; 0x30
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	0800e2f5 	.word	0x0800e2f5
 800daf0:	0800e391 	.word	0x0800e391
 800daf4:	004005ff 	.word	0x004005ff
 800daf8:	4225858c 	.word	0x4225858c

0800dafc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db08:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d008      	beq.n	800db2a <HAL_SD_IRQHandler+0x2e>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f003 0308 	and.w	r3, r3, #8
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d003      	beq.n	800db2a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 ffd8 	bl	800ead8 <SD_Read_IT>
 800db28:	e165      	b.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db34:	2b00      	cmp	r3, #0
 800db36:	f000 808f 	beq.w	800dc58 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db42:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	6812      	ldr	r2, [r2, #0]
 800db4e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800db52:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800db56:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f022 0201 	bic.w	r2, r2, #1
 800db66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f003 0308 	and.w	r3, r3, #8
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d039      	beq.n	800dbe6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f003 0302 	and.w	r3, r3, #2
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d104      	bne.n	800db86 <HAL_SD_IRQHandler+0x8a>
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f003 0320 	and.w	r3, r3, #32
 800db82:	2b00      	cmp	r3, #0
 800db84:	d011      	beq.n	800dbaa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f002 ffa8 	bl	8010ae0 <SDMMC_CmdStopTransfer>
 800db90:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d008      	beq.n	800dbaa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	431a      	orrs	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 f92f 	bl	800de08 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f240 523a 	movw	r2, #1338	; 0x53a
 800dbb2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d104      	bne.n	800dbd6 <HAL_SD_IRQHandler+0xda>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f003 0302 	and.w	r3, r3, #2
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d003      	beq.n	800dbde <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f003 feac 	bl	8011934 <HAL_SD_RxCpltCallback>
 800dbdc:	e10b      	b.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f003 fe9e 	bl	8011920 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dbe4:	e107      	b.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	f000 8102 	beq.w	800ddf6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f003 0320 	and.w	r3, r3, #32
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d011      	beq.n	800dc20 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f002 ff6d 	bl	8010ae0 <SDMMC_CmdStopTransfer>
 800dc06:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d008      	beq.n	800dc20 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	431a      	orrs	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 f8f4 	bl	800de08 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f040 80e5 	bne.w	800ddf6 <HAL_SD_IRQHandler+0x2fa>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f003 0302 	and.w	r3, r3, #2
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f040 80df 	bne.w	800ddf6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f022 0208 	bic.w	r2, r2, #8
 800dc46:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f003 fe65 	bl	8011920 <HAL_SD_TxCpltCallback>
}
 800dc56:	e0ce      	b.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d008      	beq.n	800dc78 <HAL_SD_IRQHandler+0x17c>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f003 0308 	and.w	r3, r3, #8
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d003      	beq.n	800dc78 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 ff82 	bl	800eb7a <SD_Write_IT>
 800dc76:	e0be      	b.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc7e:	f240 233a 	movw	r3, #570	; 0x23a
 800dc82:	4013      	ands	r3, r2
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f000 80b6 	beq.w	800ddf6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc90:	f003 0302 	and.w	r3, r3, #2
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d005      	beq.n	800dca4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9c:	f043 0202 	orr.w	r2, r3, #2
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcaa:	f003 0308 	and.w	r3, r3, #8
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d005      	beq.n	800dcbe <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb6:	f043 0208 	orr.w	r2, r3, #8
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc4:	f003 0320 	and.w	r3, r3, #32
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d005      	beq.n	800dcd8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd0:	f043 0220 	orr.w	r2, r3, #32
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcde:	f003 0310 	and.w	r3, r3, #16
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d005      	beq.n	800dcf2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcea:	f043 0210 	orr.w	r2, r3, #16
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d005      	beq.n	800dd0c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd04:	f043 0208 	orr.w	r2, r3, #8
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f240 723a 	movw	r2, #1850	; 0x73a
 800dd14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	6812      	ldr	r2, [r2, #0]
 800dd20:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800dd24:	f023 0302 	bic.w	r3, r3, #2
 800dd28:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f002 fed6 	bl	8010ae0 <SDMMC_CmdStopTransfer>
 800dd34:	4602      	mov	r2, r0
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd3a:	431a      	orrs	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f003 0308 	and.w	r3, r3, #8
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00a      	beq.n	800dd60 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2200      	movs	r2, #0
 800dd56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 f855 	bl	800de08 <HAL_SD_ErrorCallback>
}
 800dd5e:	e04a      	b.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d045      	beq.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f003 0310 	and.w	r3, r3, #16
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d104      	bne.n	800dd7e <HAL_SD_IRQHandler+0x282>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f003 0320 	and.w	r3, r3, #32
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d011      	beq.n	800dda2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd82:	4a1f      	ldr	r2, [pc, #124]	; (800de00 <HAL_SD_IRQHandler+0x304>)
 800dd84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fb face 	bl	800932c <HAL_DMA_Abort_IT>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d02f      	beq.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 fb4a 	bl	800e434 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dda0:	e029      	b.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f003 0301 	and.w	r3, r3, #1
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d104      	bne.n	800ddb6 <HAL_SD_IRQHandler+0x2ba>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f003 0302 	and.w	r3, r3, #2
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d011      	beq.n	800ddda <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddba:	4a12      	ldr	r2, [pc, #72]	; (800de04 <HAL_SD_IRQHandler+0x308>)
 800ddbc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fb fab2 	bl	800932c <HAL_DMA_Abort_IT>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d013      	beq.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 fb65 	bl	800e4a2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ddd8:	e00d      	b.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2201      	movs	r2, #1
 800dde4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f003 fd8c 	bl	801190c <HAL_SD_AbortCallback>
}
 800ddf4:	e7ff      	b.n	800ddf6 <HAL_SD_IRQHandler+0x2fa>
 800ddf6:	bf00      	nop
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	0800e435 	.word	0x0800e435
 800de04:	0800e4a3 	.word	0x0800e4a3

0800de08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800de10:	bf00      	nop
 800de12:	370c      	adds	r7, #12
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de2a:	0f9b      	lsrs	r3, r3, #30
 800de2c:	b2da      	uxtb	r2, r3
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de36:	0e9b      	lsrs	r3, r3, #26
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	f003 030f 	and.w	r3, r3, #15
 800de3e:	b2da      	uxtb	r2, r3
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de48:	0e1b      	lsrs	r3, r3, #24
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	f003 0303 	and.w	r3, r3, #3
 800de50:	b2da      	uxtb	r2, r3
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de5a:	0c1b      	lsrs	r3, r3, #16
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de66:	0a1b      	lsrs	r3, r3, #8
 800de68:	b2da      	uxtb	r2, r3
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de72:	b2da      	uxtb	r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de7c:	0d1b      	lsrs	r3, r3, #20
 800de7e:	b29a      	uxth	r2, r3
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de88:	0c1b      	lsrs	r3, r3, #16
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	b2da      	uxtb	r2, r3
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de9a:	0bdb      	lsrs	r3, r3, #15
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	f003 0301 	and.w	r3, r3, #1
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deac:	0b9b      	lsrs	r3, r3, #14
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	f003 0301 	and.w	r3, r3, #1
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800debe:	0b5b      	lsrs	r3, r3, #13
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	f003 0301 	and.w	r3, r3, #1
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ded0:	0b1b      	lsrs	r3, r3, #12
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	f003 0301 	and.w	r3, r3, #1
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	2200      	movs	r2, #0
 800dee2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d163      	bne.n	800dfb4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800def0:	009a      	lsls	r2, r3, #2
 800def2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800def6:	4013      	ands	r3, r2
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800defc:	0f92      	lsrs	r2, r2, #30
 800defe:	431a      	orrs	r2, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df08:	0edb      	lsrs	r3, r3, #27
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	f003 0307 	and.w	r3, r3, #7
 800df10:	b2da      	uxtb	r2, r3
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df1a:	0e1b      	lsrs	r3, r3, #24
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	f003 0307 	and.w	r3, r3, #7
 800df22:	b2da      	uxtb	r2, r3
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df2c:	0d5b      	lsrs	r3, r3, #21
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f003 0307 	and.w	r3, r3, #7
 800df34:	b2da      	uxtb	r2, r3
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df3e:	0c9b      	lsrs	r3, r3, #18
 800df40:	b2db      	uxtb	r3, r3
 800df42:	f003 0307 	and.w	r3, r3, #7
 800df46:	b2da      	uxtb	r2, r3
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df50:	0bdb      	lsrs	r3, r3, #15
 800df52:	b2db      	uxtb	r3, r3
 800df54:	f003 0307 	and.w	r3, r3, #7
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	691b      	ldr	r3, [r3, #16]
 800df62:	1c5a      	adds	r2, r3, #1
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	7e1b      	ldrb	r3, [r3, #24]
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	f003 0307 	and.w	r3, r3, #7
 800df72:	3302      	adds	r3, #2
 800df74:	2201      	movs	r2, #1
 800df76:	fa02 f303 	lsl.w	r3, r2, r3
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800df7e:	fb02 f203 	mul.w	r2, r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	7a1b      	ldrb	r3, [r3, #8]
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	f003 030f 	and.w	r3, r3, #15
 800df90:	2201      	movs	r2, #1
 800df92:	409a      	lsls	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800dfa0:	0a52      	lsrs	r2, r2, #9
 800dfa2:	fb02 f203 	mul.w	r2, r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfb0:	661a      	str	r2, [r3, #96]	; 0x60
 800dfb2:	e031      	b.n	800e018 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d11d      	bne.n	800dff8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfc0:	041b      	lsls	r3, r3, #16
 800dfc2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfca:	0c1b      	lsrs	r3, r3, #16
 800dfcc:	431a      	orrs	r2, r3
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	029a      	lsls	r2, r3, #10
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	661a      	str	r2, [r3, #96]	; 0x60
 800dff6:	e00f      	b.n	800e018 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4a58      	ldr	r2, [pc, #352]	; (800e160 <HAL_SD_GetCardCSD+0x344>)
 800dffe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e004:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e014:	2301      	movs	r3, #1
 800e016:	e09d      	b.n	800e154 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e01c:	0b9b      	lsrs	r3, r3, #14
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	f003 0301 	and.w	r3, r3, #1
 800e024:	b2da      	uxtb	r2, r3
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e02e:	09db      	lsrs	r3, r3, #7
 800e030:	b2db      	uxtb	r3, r3
 800e032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e036:	b2da      	uxtb	r2, r3
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e040:	b2db      	uxtb	r3, r3
 800e042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e046:	b2da      	uxtb	r2, r3
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e050:	0fdb      	lsrs	r3, r3, #31
 800e052:	b2da      	uxtb	r2, r3
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e05c:	0f5b      	lsrs	r3, r3, #29
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	f003 0303 	and.w	r3, r3, #3
 800e064:	b2da      	uxtb	r2, r3
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e06e:	0e9b      	lsrs	r3, r3, #26
 800e070:	b2db      	uxtb	r3, r3
 800e072:	f003 0307 	and.w	r3, r3, #7
 800e076:	b2da      	uxtb	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e080:	0d9b      	lsrs	r3, r3, #22
 800e082:	b2db      	uxtb	r3, r3
 800e084:	f003 030f 	and.w	r3, r3, #15
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e092:	0d5b      	lsrs	r3, r3, #21
 800e094:	b2db      	uxtb	r3, r3
 800e096:	f003 0301 	and.w	r3, r3, #1
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ae:	0c1b      	lsrs	r3, r3, #16
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	f003 0301 	and.w	r3, r3, #1
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c2:	0bdb      	lsrs	r3, r3, #15
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	f003 0301 	and.w	r3, r3, #1
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0d6:	0b9b      	lsrs	r3, r3, #14
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	f003 0301 	and.w	r3, r3, #1
 800e0de:	b2da      	uxtb	r2, r3
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ea:	0b5b      	lsrs	r3, r3, #13
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0fe:	0b1b      	lsrs	r3, r3, #12
 800e100:	b2db      	uxtb	r3, r3
 800e102:	f003 0301 	and.w	r3, r3, #1
 800e106:	b2da      	uxtb	r2, r3
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e112:	0a9b      	lsrs	r3, r3, #10
 800e114:	b2db      	uxtb	r3, r3
 800e116:	f003 0303 	and.w	r3, r3, #3
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e126:	0a1b      	lsrs	r3, r3, #8
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	f003 0303 	and.w	r3, r3, #3
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e13a:	085b      	lsrs	r3, r3, #1
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e142:	b2da      	uxtb	r2, r3
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	2201      	movs	r2, #1
 800e14e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	4618      	mov	r0, r3
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	004005ff 	.word	0x004005ff

0800e164 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e1bc:	b5b0      	push	{r4, r5, r7, lr}
 800e1be:	b08e      	sub	sp, #56	; 0x38
 800e1c0:	af04      	add	r7, sp, #16
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2203      	movs	r2, #3
 800e1ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d02e      	beq.n	800e234 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1dc:	d106      	bne.n	800e1ec <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	639a      	str	r2, [r3, #56]	; 0x38
 800e1ea:	e029      	b.n	800e240 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1f2:	d10a      	bne.n	800e20a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 fb0f 	bl	800e818 <SD_WideBus_Enable>
 800e1fa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	431a      	orrs	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	639a      	str	r2, [r3, #56]	; 0x38
 800e208:	e01a      	b.n	800e240 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10a      	bne.n	800e226 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fb4c 	bl	800e8ae <SD_WideBus_Disable>
 800e216:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	431a      	orrs	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	639a      	str	r2, [r3, #56]	; 0x38
 800e224:	e00c      	b.n	800e240 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	639a      	str	r2, [r3, #56]	; 0x38
 800e232:	e005      	b.n	800e240 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e238:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e244:	2b00      	cmp	r3, #0
 800e246:	d009      	beq.n	800e25c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a18      	ldr	r2, [pc, #96]	; (800e2b0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800e24e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2201      	movs	r2, #1
 800e254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e258:	2301      	movs	r3, #1
 800e25a:	e024      	b.n	800e2a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	695b      	ldr	r3, [r3, #20]
 800e276:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681d      	ldr	r5, [r3, #0]
 800e282:	466c      	mov	r4, sp
 800e284:	f107 0318 	add.w	r3, r7, #24
 800e288:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e28c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e290:	f107 030c 	add.w	r3, r7, #12
 800e294:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e296:	4628      	mov	r0, r5
 800e298:	f002 fa9c 	bl	80107d4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3728      	adds	r7, #40	; 0x28
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bdb0      	pop	{r4, r5, r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	004005ff 	.word	0x004005ff

0800e2b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e2c0:	f107 030c 	add.w	r3, r7, #12
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 fa7e 	bl	800e7c8 <SD_SendStatus>
 800e2cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d005      	beq.n	800e2e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	431a      	orrs	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	0a5b      	lsrs	r3, r3, #9
 800e2e4:	f003 030f 	and.w	r3, r3, #15
 800e2e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e2ea:	693b      	ldr	r3, [r7, #16]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3718      	adds	r7, #24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e300:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e310:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e312:	bf00      	nop
 800e314:	3714      	adds	r7, #20
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr

0800e31e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b084      	sub	sp, #16
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e330:	2b82      	cmp	r3, #130	; 0x82
 800e332:	d111      	bne.n	800e358 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4618      	mov	r0, r3
 800e33a:	f002 fbd1 	bl	8010ae0 <SDMMC_CmdStopTransfer>
 800e33e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d008      	beq.n	800e358 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	431a      	orrs	r2, r3
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f7ff fd58 	bl	800de08 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f022 0208 	bic.w	r2, r2, #8
 800e366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f240 523a 	movw	r2, #1338	; 0x53a
 800e370:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2201      	movs	r2, #1
 800e376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2200      	movs	r2, #0
 800e37e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f003 fad7 	bl	8011934 <HAL_SD_RxCpltCallback>
#endif
}
 800e386:	bf00      	nop
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b086      	sub	sp, #24
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e39c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7fb f97e 	bl	80096a0 <HAL_DMA_GetError>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d03e      	beq.n	800e428 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3b0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3b8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d002      	beq.n	800e3c6 <SD_DMAError+0x36>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d12d      	bne.n	800e422 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4a19      	ldr	r2, [pc, #100]	; (800e430 <SD_DMAError+0xa0>)
 800e3cc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e3dc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e3ea:	6978      	ldr	r0, [r7, #20]
 800e3ec:	f7ff ff62 	bl	800e2b4 <HAL_SD_GetCardState>
 800e3f0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	2b06      	cmp	r3, #6
 800e3f6:	d002      	beq.n	800e3fe <SD_DMAError+0x6e>
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	2b05      	cmp	r3, #5
 800e3fc:	d10a      	bne.n	800e414 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4618      	mov	r0, r3
 800e404:	f002 fb6c 	bl	8010ae0 <SDMMC_CmdStopTransfer>
 800e408:	4602      	mov	r2, r0
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e40e:	431a      	orrs	r2, r3
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	2201      	movs	r2, #1
 800e418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	2200      	movs	r2, #0
 800e420:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e422:	6978      	ldr	r0, [r7, #20]
 800e424:	f7ff fcf0 	bl	800de08 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e428:	bf00      	nop
 800e42a:	3718      	adds	r7, #24
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	004005ff 	.word	0x004005ff

0800e434 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e440:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f240 523a 	movw	r2, #1338	; 0x53a
 800e44a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f7ff ff31 	bl	800e2b4 <HAL_SD_GetCardState>
 800e452:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2201      	movs	r2, #1
 800e458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	2b06      	cmp	r3, #6
 800e466:	d002      	beq.n	800e46e <SD_DMATxAbort+0x3a>
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	2b05      	cmp	r3, #5
 800e46c:	d10a      	bne.n	800e484 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4618      	mov	r0, r3
 800e474:	f002 fb34 	bl	8010ae0 <SDMMC_CmdStopTransfer>
 800e478:	4602      	mov	r2, r0
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e47e:	431a      	orrs	r2, r3
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d103      	bne.n	800e494 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f003 fa3d 	bl	801190c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e492:	e002      	b.n	800e49a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f7ff fcb7 	bl	800de08 <HAL_SD_ErrorCallback>
}
 800e49a:	bf00      	nop
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b084      	sub	sp, #16
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f240 523a 	movw	r2, #1338	; 0x53a
 800e4b8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7ff fefa 	bl	800e2b4 <HAL_SD_GetCardState>
 800e4c0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	2b06      	cmp	r3, #6
 800e4d4:	d002      	beq.n	800e4dc <SD_DMARxAbort+0x3a>
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	2b05      	cmp	r3, #5
 800e4da:	d10a      	bne.n	800e4f2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f002 fafd 	bl	8010ae0 <SDMMC_CmdStopTransfer>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ec:	431a      	orrs	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d103      	bne.n	800e502 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f003 fa06 	bl	801190c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e500:	e002      	b.n	800e508 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f7ff fc80 	bl	800de08 <HAL_SD_ErrorCallback>
}
 800e508:	bf00      	nop
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e510:	b5b0      	push	{r4, r5, r7, lr}
 800e512:	b094      	sub	sp, #80	; 0x50
 800e514:	af04      	add	r7, sp, #16
 800e516:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e518:	2301      	movs	r3, #1
 800e51a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4618      	mov	r0, r3
 800e522:	f002 f9af 	bl	8010884 <SDIO_GetPowerState>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d102      	bne.n	800e532 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e52c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e530:	e0b7      	b.n	800e6a2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e536:	2b03      	cmp	r3, #3
 800e538:	d02f      	beq.n	800e59a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4618      	mov	r0, r3
 800e540:	f002 fbd8 	bl	8010cf4 <SDMMC_CmdSendCID>
 800e544:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <SD_InitCard+0x40>
    {
      return errorstate;
 800e54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e54e:	e0a8      	b.n	800e6a2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2100      	movs	r1, #0
 800e556:	4618      	mov	r0, r3
 800e558:	f002 f9d9 	bl	801090e <SDIO_GetResponse>
 800e55c:	4602      	mov	r2, r0
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2104      	movs	r1, #4
 800e568:	4618      	mov	r0, r3
 800e56a:	f002 f9d0 	bl	801090e <SDIO_GetResponse>
 800e56e:	4602      	mov	r2, r0
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2108      	movs	r1, #8
 800e57a:	4618      	mov	r0, r3
 800e57c:	f002 f9c7 	bl	801090e <SDIO_GetResponse>
 800e580:	4602      	mov	r2, r0
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	210c      	movs	r1, #12
 800e58c:	4618      	mov	r0, r3
 800e58e:	f002 f9be 	bl	801090e <SDIO_GetResponse>
 800e592:	4602      	mov	r2, r0
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e59e:	2b03      	cmp	r3, #3
 800e5a0:	d00d      	beq.n	800e5be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f107 020e 	add.w	r2, r7, #14
 800e5aa:	4611      	mov	r1, r2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f002 fbde 	bl	8010d6e <SDMMC_CmdSetRelAdd>
 800e5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <SD_InitCard+0xae>
    {
      return errorstate;
 800e5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5bc:	e071      	b.n	800e6a2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c2:	2b03      	cmp	r3, #3
 800e5c4:	d036      	beq.n	800e634 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e5c6:	89fb      	ldrh	r3, [r7, #14]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5d6:	041b      	lsls	r3, r3, #16
 800e5d8:	4619      	mov	r1, r3
 800e5da:	4610      	mov	r0, r2
 800e5dc:	f002 fba8 	bl	8010d30 <SDMMC_CmdSendCSD>
 800e5e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <SD_InitCard+0xdc>
    {
      return errorstate;
 800e5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ea:	e05a      	b.n	800e6a2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f002 f98b 	bl	801090e <SDIO_GetResponse>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2104      	movs	r1, #4
 800e604:	4618      	mov	r0, r3
 800e606:	f002 f982 	bl	801090e <SDIO_GetResponse>
 800e60a:	4602      	mov	r2, r0
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2108      	movs	r1, #8
 800e616:	4618      	mov	r0, r3
 800e618:	f002 f979 	bl	801090e <SDIO_GetResponse>
 800e61c:	4602      	mov	r2, r0
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	210c      	movs	r1, #12
 800e628:	4618      	mov	r0, r3
 800e62a:	f002 f970 	bl	801090e <SDIO_GetResponse>
 800e62e:	4602      	mov	r2, r0
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2104      	movs	r1, #4
 800e63a:	4618      	mov	r0, r3
 800e63c:	f002 f967 	bl	801090e <SDIO_GetResponse>
 800e640:	4603      	mov	r3, r0
 800e642:	0d1a      	lsrs	r2, r3, #20
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e648:	f107 0310 	add.w	r3, r7, #16
 800e64c:	4619      	mov	r1, r3
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7ff fbe4 	bl	800de1c <HAL_SD_GetCardCSD>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d002      	beq.n	800e660 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e65a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e65e:	e020      	b.n	800e6a2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6819      	ldr	r1, [r3, #0]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e668:	041b      	lsls	r3, r3, #16
 800e66a:	f04f 0400 	mov.w	r4, #0
 800e66e:	461a      	mov	r2, r3
 800e670:	4623      	mov	r3, r4
 800e672:	4608      	mov	r0, r1
 800e674:	f002 fa56 	bl	8010b24 <SDMMC_CmdSelDesel>
 800e678:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d001      	beq.n	800e684 <SD_InitCard+0x174>
  {
    return errorstate;
 800e680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e682:	e00e      	b.n	800e6a2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681d      	ldr	r5, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	466c      	mov	r4, sp
 800e68c:	f103 0210 	add.w	r2, r3, #16
 800e690:	ca07      	ldmia	r2, {r0, r1, r2}
 800e692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e696:	3304      	adds	r3, #4
 800e698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e69a:	4628      	mov	r0, r5
 800e69c:	f002 f89a 	bl	80107d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3740      	adds	r7, #64	; 0x40
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e6ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b086      	sub	sp, #24
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	617b      	str	r3, [r7, #20]
 800e6bc:	2300      	movs	r3, #0
 800e6be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f002 fa50 	bl	8010b6a <SDMMC_CmdGoIdleState>
 800e6ca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d001      	beq.n	800e6d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	e072      	b.n	800e7bc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f002 fa63 	bl	8010ba6 <SDMMC_CmdOperCond>
 800e6e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00d      	beq.n	800e704 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f002 fa39 	bl	8010b6a <SDMMC_CmdGoIdleState>
 800e6f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d004      	beq.n	800e70a <SD_PowerON+0x5e>
    {
      return errorstate;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	e05b      	b.n	800e7bc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2201      	movs	r2, #1
 800e708:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d137      	bne.n	800e782 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2100      	movs	r1, #0
 800e718:	4618      	mov	r0, r3
 800e71a:	f002 fa63 	bl	8010be4 <SDMMC_CmdAppCommand>
 800e71e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d02d      	beq.n	800e782 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e726:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e72a:	e047      	b.n	800e7bc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2100      	movs	r1, #0
 800e732:	4618      	mov	r0, r3
 800e734:	f002 fa56 	bl	8010be4 <SDMMC_CmdAppCommand>
 800e738:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <SD_PowerON+0x98>
    {
      return errorstate;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	e03b      	b.n	800e7bc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	491e      	ldr	r1, [pc, #120]	; (800e7c4 <SD_PowerON+0x118>)
 800e74a:	4618      	mov	r0, r3
 800e74c:	f002 fa6c 	bl	8010c28 <SDMMC_CmdAppOperCommand>
 800e750:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d002      	beq.n	800e75e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e75c:	e02e      	b.n	800e7bc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2100      	movs	r1, #0
 800e764:	4618      	mov	r0, r3
 800e766:	f002 f8d2 	bl	801090e <SDIO_GetResponse>
 800e76a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	0fdb      	lsrs	r3, r3, #31
 800e770:	2b01      	cmp	r3, #1
 800e772:	d101      	bne.n	800e778 <SD_PowerON+0xcc>
 800e774:	2301      	movs	r3, #1
 800e776:	e000      	b.n	800e77a <SD_PowerON+0xce>
 800e778:	2300      	movs	r3, #0
 800e77a:	613b      	str	r3, [r7, #16]

    count++;
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	3301      	adds	r3, #1
 800e780:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e788:	4293      	cmp	r3, r2
 800e78a:	d802      	bhi.n	800e792 <SD_PowerON+0xe6>
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d0cc      	beq.n	800e72c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e798:	4293      	cmp	r3, r2
 800e79a:	d902      	bls.n	800e7a2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e79c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e7a0:	e00c      	b.n	800e7bc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d003      	beq.n	800e7b4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	645a      	str	r2, [r3, #68]	; 0x44
 800e7b2:	e002      	b.n	800e7ba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3718      	adds	r7, #24
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	c1100000 	.word	0xc1100000

0800e7c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d102      	bne.n	800e7de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e7d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e7dc:	e018      	b.n	800e810 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7e6:	041b      	lsls	r3, r3, #16
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4610      	mov	r0, r2
 800e7ec:	f002 fae0 	bl	8010db0 <SDMMC_CmdSendStatus>
 800e7f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d001      	beq.n	800e7fc <SD_SendStatus+0x34>
  {
    return errorstate;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	e009      	b.n	800e810 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2100      	movs	r1, #0
 800e802:	4618      	mov	r0, r3
 800e804:	f002 f883 	bl	801090e <SDIO_GetResponse>
 800e808:	4602      	mov	r2, r0
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	4618      	mov	r0, r3
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e820:	2300      	movs	r3, #0
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	2300      	movs	r3, #0
 800e826:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2100      	movs	r1, #0
 800e82e:	4618      	mov	r0, r3
 800e830:	f002 f86d 	bl	801090e <SDIO_GetResponse>
 800e834:	4603      	mov	r3, r0
 800e836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e83a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e83e:	d102      	bne.n	800e846 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e844:	e02f      	b.n	800e8a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e846:	f107 030c 	add.w	r3, r7, #12
 800e84a:	4619      	mov	r1, r3
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 f879 	bl	800e944 <SD_FindSCR>
 800e852:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	e023      	b.n	800e8a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e864:	2b00      	cmp	r3, #0
 800e866:	d01c      	beq.n	800e8a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e870:	041b      	lsls	r3, r3, #16
 800e872:	4619      	mov	r1, r3
 800e874:	4610      	mov	r0, r2
 800e876:	f002 f9b5 	bl	8010be4 <SDMMC_CmdAppCommand>
 800e87a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	e00f      	b.n	800e8a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2102      	movs	r1, #2
 800e88c:	4618      	mov	r0, r3
 800e88e:	f002 f9ee 	bl	8010c6e <SDMMC_CmdBusWidth>
 800e892:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d001      	beq.n	800e89e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	e003      	b.n	800e8a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	e001      	b.n	800e8a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e8a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3718      	adds	r7, #24
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b086      	sub	sp, #24
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	60fb      	str	r3, [r7, #12]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f002 f822 	bl	801090e <SDIO_GetResponse>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8d4:	d102      	bne.n	800e8dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e8d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8da:	e02f      	b.n	800e93c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e8dc:	f107 030c 	add.w	r3, r7, #12
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 f82e 	bl	800e944 <SD_FindSCR>
 800e8e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d001      	beq.n	800e8f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	e023      	b.n	800e93c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d01c      	beq.n	800e938 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e906:	041b      	lsls	r3, r3, #16
 800e908:	4619      	mov	r1, r3
 800e90a:	4610      	mov	r0, r2
 800e90c:	f002 f96a 	bl	8010be4 <SDMMC_CmdAppCommand>
 800e910:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	e00f      	b.n	800e93c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2100      	movs	r1, #0
 800e922:	4618      	mov	r0, r3
 800e924:	f002 f9a3 	bl	8010c6e <SDMMC_CmdBusWidth>
 800e928:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d001      	beq.n	800e934 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	e003      	b.n	800e93c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e934:	2300      	movs	r3, #0
 800e936:	e001      	b.n	800e93c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e938:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e944:	b590      	push	{r4, r7, lr}
 800e946:	b08f      	sub	sp, #60	; 0x3c
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e94e:	f7fa fad7 	bl	8008f00 <HAL_GetTick>
 800e952:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e954:	2300      	movs	r3, #0
 800e956:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e958:	2300      	movs	r3, #0
 800e95a:	60bb      	str	r3, [r7, #8]
 800e95c:	2300      	movs	r3, #0
 800e95e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2108      	movs	r1, #8
 800e96a:	4618      	mov	r0, r3
 800e96c:	f002 f80e 	bl	801098c <SDMMC_CmdBlockLength>
 800e970:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	e0a9      	b.n	800ead0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e984:	041b      	lsls	r3, r3, #16
 800e986:	4619      	mov	r1, r3
 800e988:	4610      	mov	r0, r2
 800e98a:	f002 f92b 	bl	8010be4 <SDMMC_CmdAppCommand>
 800e98e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	2b00      	cmp	r3, #0
 800e994:	d001      	beq.n	800e99a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e998:	e09a      	b.n	800ead0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e99a:	f04f 33ff 	mov.w	r3, #4294967295
 800e99e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e9a0:	2308      	movs	r3, #8
 800e9a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e9a4:	2330      	movs	r3, #48	; 0x30
 800e9a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f107 0210 	add.w	r2, r7, #16
 800e9bc:	4611      	mov	r1, r2
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f001 ffb8 	bl	8010934 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f002 f972 	bl	8010cb2 <SDMMC_CmdSendSCR>
 800e9ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d022      	beq.n	800ea1c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d8:	e07a      	b.n	800ead0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00e      	beq.n	800ea06 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6819      	ldr	r1, [r3, #0]
 800e9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	f107 0208 	add.w	r2, r7, #8
 800e9f4:	18d4      	adds	r4, r2, r3
 800e9f6:	4608      	mov	r0, r1
 800e9f8:	f001 ff17 	bl	801082a <SDIO_ReadFIFO>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	6023      	str	r3, [r4, #0]
      index++;
 800ea00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea02:	3301      	adds	r3, #1
 800ea04:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ea06:	f7fa fa7b 	bl	8008f00 <HAL_GetTick>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0e:	1ad3      	subs	r3, r2, r3
 800ea10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea14:	d102      	bne.n	800ea1c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ea16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea1a:	e059      	b.n	800ead0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea22:	f240 432a 	movw	r3, #1066	; 0x42a
 800ea26:	4013      	ands	r3, r2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d0d6      	beq.n	800e9da <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea32:	f003 0308 	and.w	r3, r3, #8
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d005      	beq.n	800ea46 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2208      	movs	r2, #8
 800ea40:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ea42:	2308      	movs	r3, #8
 800ea44:	e044      	b.n	800ead0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea4c:	f003 0302 	and.w	r3, r3, #2
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d005      	beq.n	800ea60 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2202      	movs	r2, #2
 800ea5a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	e037      	b.n	800ead0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea66:	f003 0320 	and.w	r3, r3, #32
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d005      	beq.n	800ea7a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2220      	movs	r2, #32
 800ea74:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ea76:	2320      	movs	r3, #32
 800ea78:	e02a      	b.n	800ead0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f240 523a 	movw	r2, #1338	; 0x53a
 800ea82:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	061a      	lsls	r2, r3, #24
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	021b      	lsls	r3, r3, #8
 800ea8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea90:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	0a1b      	lsrs	r3, r3, #8
 800ea96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ea9a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	0e1b      	lsrs	r3, r3, #24
 800eaa0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa4:	601a      	str	r2, [r3, #0]
    scr++;
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	061a      	lsls	r2, r3, #24
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	021b      	lsls	r3, r3, #8
 800eab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eab8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	0a1b      	lsrs	r3, r3, #8
 800eabe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800eac2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	0e1b      	lsrs	r3, r3, #24
 800eac8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800eaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eacc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	373c      	adds	r7, #60	; 0x3c
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd90      	pop	{r4, r7, pc}

0800ead8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaea:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d03f      	beq.n	800eb72 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	617b      	str	r3, [r7, #20]
 800eaf6:	e033      	b.n	800eb60 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4618      	mov	r0, r3
 800eafe:	f001 fe94 	bl	801082a <SDIO_ReadFIFO>
 800eb02:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	b2da      	uxtb	r2, r3
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	3b01      	subs	r3, #1
 800eb16:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	0a1b      	lsrs	r3, r3, #8
 800eb1c:	b2da      	uxtb	r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3301      	adds	r3, #1
 800eb26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	0c1b      	lsrs	r3, r3, #16
 800eb32:	b2da      	uxtb	r2, r3
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	3b01      	subs	r3, #1
 800eb42:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	0e1b      	lsrs	r3, r3, #24
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	3301      	adds	r3, #1
 800eb52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	3b01      	subs	r3, #1
 800eb58:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	617b      	str	r3, [r7, #20]
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	2b07      	cmp	r3, #7
 800eb64:	d9c8      	bls.n	800eaf8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	693a      	ldr	r2, [r7, #16]
 800eb70:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800eb72:	bf00      	nop
 800eb74:	3718      	adds	r7, #24
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b086      	sub	sp, #24
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6a1b      	ldr	r3, [r3, #32]
 800eb86:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d043      	beq.n	800ec1c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800eb94:	2300      	movs	r3, #0
 800eb96:	617b      	str	r3, [r7, #20]
 800eb98:	e037      	b.n	800ec0a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	3301      	adds	r3, #1
 800eba4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	021a      	lsls	r2, r3, #8
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	3b01      	subs	r3, #1
 800ebc2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	041a      	lsls	r2, r3, #16
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	061a      	lsls	r2, r3, #24
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	3301      	adds	r3, #1
 800ebec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	3b01      	subs	r3, #1
 800ebf2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f107 0208 	add.w	r2, r7, #8
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f001 fe20 	bl	8010844 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	3301      	adds	r3, #1
 800ec08:	617b      	str	r3, [r7, #20]
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b07      	cmp	r3, #7
 800ec0e:	d9c4      	bls.n	800eb9a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	693a      	ldr	r2, [r7, #16]
 800ec1a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ec1c:	bf00      	nop
 800ec1e:	3718      	adds	r7, #24
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec32:	2301      	movs	r3, #1
 800ec34:	e01d      	b.n	800ec72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d106      	bne.n	800ec50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f7f9 fd12 	bl	8008674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2202      	movs	r2, #2
 800ec54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	3304      	adds	r3, #4
 800ec60:	4619      	mov	r1, r3
 800ec62:	4610      	mov	r0, r2
 800ec64:	f000 fb10 	bl	800f288 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec70:	2300      	movs	r3, #0
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}

0800ec7a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec7a:	b480      	push	{r7}
 800ec7c:	b085      	sub	sp, #20
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	68da      	ldr	r2, [r3, #12]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f042 0201 	orr.w	r2, r2, #1
 800ec90:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	f003 0307 	and.w	r3, r3, #7
 800ec9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2b06      	cmp	r3, #6
 800eca2:	d007      	beq.n	800ecb4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f042 0201 	orr.w	r2, r2, #1
 800ecb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ecb4:	2300      	movs	r3, #0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3714      	adds	r7, #20
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr

0800ecc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b082      	sub	sp, #8
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d101      	bne.n	800ecd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e01d      	b.n	800ed10 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d106      	bne.n	800ecee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f815 	bl	800ed18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	3304      	adds	r3, #4
 800ecfe:	4619      	mov	r1, r3
 800ed00:	4610      	mov	r0, r2
 800ed02:	f000 fac1 	bl	800f288 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed0e:	2300      	movs	r3, #0
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	691b      	ldr	r3, [r3, #16]
 800ed3a:	f003 0302 	and.w	r3, r3, #2
 800ed3e:	2b02      	cmp	r3, #2
 800ed40:	d122      	bne.n	800ed88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	f003 0302 	and.w	r3, r3, #2
 800ed4c:	2b02      	cmp	r3, #2
 800ed4e:	d11b      	bne.n	800ed88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f06f 0202 	mvn.w	r2, #2
 800ed58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	699b      	ldr	r3, [r3, #24]
 800ed66:	f003 0303 	and.w	r3, r3, #3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d003      	beq.n	800ed76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 fa6b 	bl	800f24a <HAL_TIM_IC_CaptureCallback>
 800ed74:	e005      	b.n	800ed82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fa5d 	bl	800f236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f000 fa6e 	bl	800f25e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	691b      	ldr	r3, [r3, #16]
 800ed8e:	f003 0304 	and.w	r3, r3, #4
 800ed92:	2b04      	cmp	r3, #4
 800ed94:	d122      	bne.n	800eddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	f003 0304 	and.w	r3, r3, #4
 800eda0:	2b04      	cmp	r3, #4
 800eda2:	d11b      	bne.n	800eddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f06f 0204 	mvn.w	r2, #4
 800edac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2202      	movs	r2, #2
 800edb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	699b      	ldr	r3, [r3, #24]
 800edba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d003      	beq.n	800edca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 fa41 	bl	800f24a <HAL_TIM_IC_CaptureCallback>
 800edc8:	e005      	b.n	800edd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 fa33 	bl	800f236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 fa44 	bl	800f25e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	691b      	ldr	r3, [r3, #16]
 800ede2:	f003 0308 	and.w	r3, r3, #8
 800ede6:	2b08      	cmp	r3, #8
 800ede8:	d122      	bne.n	800ee30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	f003 0308 	and.w	r3, r3, #8
 800edf4:	2b08      	cmp	r3, #8
 800edf6:	d11b      	bne.n	800ee30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f06f 0208 	mvn.w	r2, #8
 800ee00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2204      	movs	r2, #4
 800ee06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	69db      	ldr	r3, [r3, #28]
 800ee0e:	f003 0303 	and.w	r3, r3, #3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d003      	beq.n	800ee1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 fa17 	bl	800f24a <HAL_TIM_IC_CaptureCallback>
 800ee1c:	e005      	b.n	800ee2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f000 fa09 	bl	800f236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 fa1a 	bl	800f25e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	f003 0310 	and.w	r3, r3, #16
 800ee3a:	2b10      	cmp	r3, #16
 800ee3c:	d122      	bne.n	800ee84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	f003 0310 	and.w	r3, r3, #16
 800ee48:	2b10      	cmp	r3, #16
 800ee4a:	d11b      	bne.n	800ee84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f06f 0210 	mvn.w	r2, #16
 800ee54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2208      	movs	r2, #8
 800ee5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	69db      	ldr	r3, [r3, #28]
 800ee62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d003      	beq.n	800ee72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f9ed 	bl	800f24a <HAL_TIM_IC_CaptureCallback>
 800ee70:	e005      	b.n	800ee7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 f9df 	bl	800f236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 f9f0 	bl	800f25e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	691b      	ldr	r3, [r3, #16]
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d10e      	bne.n	800eeb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	f003 0301 	and.w	r3, r3, #1
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d107      	bne.n	800eeb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f06f 0201 	mvn.w	r2, #1
 800eea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7f8 fec2 	bl	8007c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eeba:	2b80      	cmp	r3, #128	; 0x80
 800eebc:	d10e      	bne.n	800eedc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eec8:	2b80      	cmp	r3, #128	; 0x80
 800eeca:	d107      	bne.n	800eedc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 fd46 	bl	800f968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	691b      	ldr	r3, [r3, #16]
 800eee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eee6:	2b40      	cmp	r3, #64	; 0x40
 800eee8:	d10e      	bne.n	800ef08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef4:	2b40      	cmp	r3, #64	; 0x40
 800eef6:	d107      	bne.n	800ef08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 f9b5 	bl	800f272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	f003 0320 	and.w	r3, r3, #32
 800ef12:	2b20      	cmp	r3, #32
 800ef14:	d10e      	bne.n	800ef34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	f003 0320 	and.w	r3, r3, #32
 800ef20:	2b20      	cmp	r3, #32
 800ef22:	d107      	bne.n	800ef34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f06f 0220 	mvn.w	r2, #32
 800ef2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 fd10 	bl	800f954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d101      	bne.n	800ef56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ef52:	2302      	movs	r3, #2
 800ef54:	e0b4      	b.n	800f0c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2202      	movs	r2, #2
 800ef62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b0c      	cmp	r3, #12
 800ef6a:	f200 809f 	bhi.w	800f0ac <HAL_TIM_PWM_ConfigChannel+0x170>
 800ef6e:	a201      	add	r2, pc, #4	; (adr r2, 800ef74 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ef70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef74:	0800efa9 	.word	0x0800efa9
 800ef78:	0800f0ad 	.word	0x0800f0ad
 800ef7c:	0800f0ad 	.word	0x0800f0ad
 800ef80:	0800f0ad 	.word	0x0800f0ad
 800ef84:	0800efe9 	.word	0x0800efe9
 800ef88:	0800f0ad 	.word	0x0800f0ad
 800ef8c:	0800f0ad 	.word	0x0800f0ad
 800ef90:	0800f0ad 	.word	0x0800f0ad
 800ef94:	0800f02b 	.word	0x0800f02b
 800ef98:	0800f0ad 	.word	0x0800f0ad
 800ef9c:	0800f0ad 	.word	0x0800f0ad
 800efa0:	0800f0ad 	.word	0x0800f0ad
 800efa4:	0800f06b 	.word	0x0800f06b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68b9      	ldr	r1, [r7, #8]
 800efae:	4618      	mov	r0, r3
 800efb0:	f000 fa0a 	bl	800f3c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	699a      	ldr	r2, [r3, #24]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f042 0208 	orr.w	r2, r2, #8
 800efc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	699a      	ldr	r2, [r3, #24]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f022 0204 	bic.w	r2, r2, #4
 800efd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6999      	ldr	r1, [r3, #24]
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	691a      	ldr	r2, [r3, #16]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	430a      	orrs	r2, r1
 800efe4:	619a      	str	r2, [r3, #24]
      break;
 800efe6:	e062      	b.n	800f0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	68b9      	ldr	r1, [r7, #8]
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 fa5a 	bl	800f4a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	699a      	ldr	r2, [r3, #24]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	699a      	ldr	r2, [r3, #24]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	6999      	ldr	r1, [r3, #24]
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	021a      	lsls	r2, r3, #8
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	430a      	orrs	r2, r1
 800f026:	619a      	str	r2, [r3, #24]
      break;
 800f028:	e041      	b.n	800f0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	68b9      	ldr	r1, [r7, #8]
 800f030:	4618      	mov	r0, r3
 800f032:	f000 faaf 	bl	800f594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	69da      	ldr	r2, [r3, #28]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f042 0208 	orr.w	r2, r2, #8
 800f044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	69da      	ldr	r2, [r3, #28]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f022 0204 	bic.w	r2, r2, #4
 800f054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	69d9      	ldr	r1, [r3, #28]
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	691a      	ldr	r2, [r3, #16]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	430a      	orrs	r2, r1
 800f066:	61da      	str	r2, [r3, #28]
      break;
 800f068:	e021      	b.n	800f0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68b9      	ldr	r1, [r7, #8]
 800f070:	4618      	mov	r0, r3
 800f072:	f000 fb03 	bl	800f67c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	69da      	ldr	r2, [r3, #28]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	69da      	ldr	r2, [r3, #28]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	69d9      	ldr	r1, [r3, #28]
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	021a      	lsls	r2, r3, #8
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	430a      	orrs	r2, r1
 800f0a8:	61da      	str	r2, [r3, #28]
      break;
 800f0aa:	e000      	b.n	800f0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f0ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d101      	bne.n	800f0e0 <HAL_TIM_ConfigClockSource+0x18>
 800f0dc:	2302      	movs	r3, #2
 800f0de:	e0a6      	b.n	800f22e <HAL_TIM_ConfigClockSource+0x166>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2202      	movs	r2, #2
 800f0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f0fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f106:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2b40      	cmp	r3, #64	; 0x40
 800f116:	d067      	beq.n	800f1e8 <HAL_TIM_ConfigClockSource+0x120>
 800f118:	2b40      	cmp	r3, #64	; 0x40
 800f11a:	d80b      	bhi.n	800f134 <HAL_TIM_ConfigClockSource+0x6c>
 800f11c:	2b10      	cmp	r3, #16
 800f11e:	d073      	beq.n	800f208 <HAL_TIM_ConfigClockSource+0x140>
 800f120:	2b10      	cmp	r3, #16
 800f122:	d802      	bhi.n	800f12a <HAL_TIM_ConfigClockSource+0x62>
 800f124:	2b00      	cmp	r3, #0
 800f126:	d06f      	beq.n	800f208 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800f128:	e078      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f12a:	2b20      	cmp	r3, #32
 800f12c:	d06c      	beq.n	800f208 <HAL_TIM_ConfigClockSource+0x140>
 800f12e:	2b30      	cmp	r3, #48	; 0x30
 800f130:	d06a      	beq.n	800f208 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800f132:	e073      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f134:	2b70      	cmp	r3, #112	; 0x70
 800f136:	d00d      	beq.n	800f154 <HAL_TIM_ConfigClockSource+0x8c>
 800f138:	2b70      	cmp	r3, #112	; 0x70
 800f13a:	d804      	bhi.n	800f146 <HAL_TIM_ConfigClockSource+0x7e>
 800f13c:	2b50      	cmp	r3, #80	; 0x50
 800f13e:	d033      	beq.n	800f1a8 <HAL_TIM_ConfigClockSource+0xe0>
 800f140:	2b60      	cmp	r3, #96	; 0x60
 800f142:	d041      	beq.n	800f1c8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800f144:	e06a      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f14a:	d066      	beq.n	800f21a <HAL_TIM_ConfigClockSource+0x152>
 800f14c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f150:	d017      	beq.n	800f182 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800f152:	e063      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6818      	ldr	r0, [r3, #0]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	6899      	ldr	r1, [r3, #8]
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	685a      	ldr	r2, [r3, #4]
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	f000 fb5a 	bl	800f81c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	689b      	ldr	r3, [r3, #8]
 800f16e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f176:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	609a      	str	r2, [r3, #8]
      break;
 800f180:	e04c      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6818      	ldr	r0, [r3, #0]
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	6899      	ldr	r1, [r3, #8]
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	685a      	ldr	r2, [r3, #4]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	f000 fb43 	bl	800f81c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	689a      	ldr	r2, [r3, #8]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f1a4:	609a      	str	r2, [r3, #8]
      break;
 800f1a6:	e039      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6818      	ldr	r0, [r3, #0]
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	6859      	ldr	r1, [r3, #4]
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	f000 fab7 	bl	800f728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2150      	movs	r1, #80	; 0x50
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 fb10 	bl	800f7e6 <TIM_ITRx_SetConfig>
      break;
 800f1c6:	e029      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6818      	ldr	r0, [r3, #0]
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	6859      	ldr	r1, [r3, #4]
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	f000 fad6 	bl	800f786 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2160      	movs	r1, #96	; 0x60
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f000 fb00 	bl	800f7e6 <TIM_ITRx_SetConfig>
      break;
 800f1e6:	e019      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6818      	ldr	r0, [r3, #0]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	6859      	ldr	r1, [r3, #4]
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	f000 fa97 	bl	800f728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2140      	movs	r1, #64	; 0x40
 800f200:	4618      	mov	r0, r3
 800f202:	f000 faf0 	bl	800f7e6 <TIM_ITRx_SetConfig>
      break;
 800f206:	e009      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4619      	mov	r1, r3
 800f212:	4610      	mov	r0, r2
 800f214:	f000 fae7 	bl	800f7e6 <TIM_ITRx_SetConfig>
      break;
 800f218:	e000      	b.n	800f21c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800f21a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2201      	movs	r2, #1
 800f220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f236:	b480      	push	{r7}
 800f238:	b083      	sub	sp, #12
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f23e:	bf00      	nop
 800f240:	370c      	adds	r7, #12
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f24a:	b480      	push	{r7}
 800f24c:	b083      	sub	sp, #12
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f252:	bf00      	nop
 800f254:	370c      	adds	r7, #12
 800f256:	46bd      	mov	sp, r7
 800f258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25c:	4770      	bx	lr

0800f25e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f25e:	b480      	push	{r7}
 800f260:	b083      	sub	sp, #12
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f266:	bf00      	nop
 800f268:	370c      	adds	r7, #12
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr

0800f272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f272:	b480      	push	{r7}
 800f274:	b083      	sub	sp, #12
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f27a:	bf00      	nop
 800f27c:	370c      	adds	r7, #12
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
	...

0800f288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	4a40      	ldr	r2, [pc, #256]	; (800f39c <TIM_Base_SetConfig+0x114>)
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d013      	beq.n	800f2c8 <TIM_Base_SetConfig+0x40>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2a6:	d00f      	beq.n	800f2c8 <TIM_Base_SetConfig+0x40>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	4a3d      	ldr	r2, [pc, #244]	; (800f3a0 <TIM_Base_SetConfig+0x118>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d00b      	beq.n	800f2c8 <TIM_Base_SetConfig+0x40>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	4a3c      	ldr	r2, [pc, #240]	; (800f3a4 <TIM_Base_SetConfig+0x11c>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d007      	beq.n	800f2c8 <TIM_Base_SetConfig+0x40>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	4a3b      	ldr	r2, [pc, #236]	; (800f3a8 <TIM_Base_SetConfig+0x120>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d003      	beq.n	800f2c8 <TIM_Base_SetConfig+0x40>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4a3a      	ldr	r2, [pc, #232]	; (800f3ac <TIM_Base_SetConfig+0x124>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d108      	bne.n	800f2da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a2f      	ldr	r2, [pc, #188]	; (800f39c <TIM_Base_SetConfig+0x114>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d02b      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2e8:	d027      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4a2c      	ldr	r2, [pc, #176]	; (800f3a0 <TIM_Base_SetConfig+0x118>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d023      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4a2b      	ldr	r2, [pc, #172]	; (800f3a4 <TIM_Base_SetConfig+0x11c>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d01f      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4a2a      	ldr	r2, [pc, #168]	; (800f3a8 <TIM_Base_SetConfig+0x120>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d01b      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4a29      	ldr	r2, [pc, #164]	; (800f3ac <TIM_Base_SetConfig+0x124>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d017      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4a28      	ldr	r2, [pc, #160]	; (800f3b0 <TIM_Base_SetConfig+0x128>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d013      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	4a27      	ldr	r2, [pc, #156]	; (800f3b4 <TIM_Base_SetConfig+0x12c>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d00f      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4a26      	ldr	r2, [pc, #152]	; (800f3b8 <TIM_Base_SetConfig+0x130>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d00b      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4a25      	ldr	r2, [pc, #148]	; (800f3bc <TIM_Base_SetConfig+0x134>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d007      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4a24      	ldr	r2, [pc, #144]	; (800f3c0 <TIM_Base_SetConfig+0x138>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d003      	beq.n	800f33a <TIM_Base_SetConfig+0xb2>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4a23      	ldr	r2, [pc, #140]	; (800f3c4 <TIM_Base_SetConfig+0x13c>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d108      	bne.n	800f34c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	4313      	orrs	r3, r2
 800f34a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	695b      	ldr	r3, [r3, #20]
 800f356:	4313      	orrs	r3, r2
 800f358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	689a      	ldr	r2, [r3, #8]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4a0a      	ldr	r2, [pc, #40]	; (800f39c <TIM_Base_SetConfig+0x114>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d003      	beq.n	800f380 <TIM_Base_SetConfig+0xf8>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	4a0c      	ldr	r2, [pc, #48]	; (800f3ac <TIM_Base_SetConfig+0x124>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d103      	bne.n	800f388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	691a      	ldr	r2, [r3, #16]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	615a      	str	r2, [r3, #20]
}
 800f38e:	bf00      	nop
 800f390:	3714      	adds	r7, #20
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	40010000 	.word	0x40010000
 800f3a0:	40000400 	.word	0x40000400
 800f3a4:	40000800 	.word	0x40000800
 800f3a8:	40000c00 	.word	0x40000c00
 800f3ac:	40010400 	.word	0x40010400
 800f3b0:	40014000 	.word	0x40014000
 800f3b4:	40014400 	.word	0x40014400
 800f3b8:	40014800 	.word	0x40014800
 800f3bc:	40001800 	.word	0x40001800
 800f3c0:	40001c00 	.word	0x40001c00
 800f3c4:	40002000 	.word	0x40002000

0800f3c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b087      	sub	sp, #28
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6a1b      	ldr	r3, [r3, #32]
 800f3d6:	f023 0201 	bic.w	r2, r3, #1
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6a1b      	ldr	r3, [r3, #32]
 800f3e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	699b      	ldr	r3, [r3, #24]
 800f3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f023 0303 	bic.w	r3, r3, #3
 800f3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	4313      	orrs	r3, r2
 800f408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	f023 0302 	bic.w	r3, r3, #2
 800f410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	697a      	ldr	r2, [r7, #20]
 800f418:	4313      	orrs	r3, r2
 800f41a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4a20      	ldr	r2, [pc, #128]	; (800f4a0 <TIM_OC1_SetConfig+0xd8>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d003      	beq.n	800f42c <TIM_OC1_SetConfig+0x64>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4a1f      	ldr	r2, [pc, #124]	; (800f4a4 <TIM_OC1_SetConfig+0xdc>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d10c      	bne.n	800f446 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	f023 0308 	bic.w	r3, r3, #8
 800f432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	697a      	ldr	r2, [r7, #20]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	f023 0304 	bic.w	r3, r3, #4
 800f444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4a15      	ldr	r2, [pc, #84]	; (800f4a0 <TIM_OC1_SetConfig+0xd8>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d003      	beq.n	800f456 <TIM_OC1_SetConfig+0x8e>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4a14      	ldr	r2, [pc, #80]	; (800f4a4 <TIM_OC1_SetConfig+0xdc>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d111      	bne.n	800f47a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f45c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	695b      	ldr	r3, [r3, #20]
 800f46a:	693a      	ldr	r2, [r7, #16]
 800f46c:	4313      	orrs	r3, r2
 800f46e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	699b      	ldr	r3, [r3, #24]
 800f474:	693a      	ldr	r2, [r7, #16]
 800f476:	4313      	orrs	r3, r2
 800f478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	693a      	ldr	r2, [r7, #16]
 800f47e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	685a      	ldr	r2, [r3, #4]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	697a      	ldr	r2, [r7, #20]
 800f492:	621a      	str	r2, [r3, #32]
}
 800f494:	bf00      	nop
 800f496:	371c      	adds	r7, #28
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr
 800f4a0:	40010000 	.word	0x40010000
 800f4a4:	40010400 	.word	0x40010400

0800f4a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b087      	sub	sp, #28
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6a1b      	ldr	r3, [r3, #32]
 800f4b6:	f023 0210 	bic.w	r2, r3, #16
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a1b      	ldr	r3, [r3, #32]
 800f4c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	699b      	ldr	r3, [r3, #24]
 800f4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	021b      	lsls	r3, r3, #8
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	f023 0320 	bic.w	r3, r3, #32
 800f4f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	011b      	lsls	r3, r3, #4
 800f4fa:	697a      	ldr	r2, [r7, #20]
 800f4fc:	4313      	orrs	r3, r2
 800f4fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a22      	ldr	r2, [pc, #136]	; (800f58c <TIM_OC2_SetConfig+0xe4>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d003      	beq.n	800f510 <TIM_OC2_SetConfig+0x68>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4a21      	ldr	r2, [pc, #132]	; (800f590 <TIM_OC2_SetConfig+0xe8>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d10d      	bne.n	800f52c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	011b      	lsls	r3, r3, #4
 800f51e:	697a      	ldr	r2, [r7, #20]
 800f520:	4313      	orrs	r3, r2
 800f522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f52a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a17      	ldr	r2, [pc, #92]	; (800f58c <TIM_OC2_SetConfig+0xe4>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d003      	beq.n	800f53c <TIM_OC2_SetConfig+0x94>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4a16      	ldr	r2, [pc, #88]	; (800f590 <TIM_OC2_SetConfig+0xe8>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d113      	bne.n	800f564 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f54a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	695b      	ldr	r3, [r3, #20]
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	693a      	ldr	r2, [r7, #16]
 800f554:	4313      	orrs	r3, r2
 800f556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	699b      	ldr	r3, [r3, #24]
 800f55c:	009b      	lsls	r3, r3, #2
 800f55e:	693a      	ldr	r2, [r7, #16]
 800f560:	4313      	orrs	r3, r2
 800f562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	693a      	ldr	r2, [r7, #16]
 800f568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	685a      	ldr	r2, [r3, #4]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	697a      	ldr	r2, [r7, #20]
 800f57c:	621a      	str	r2, [r3, #32]
}
 800f57e:	bf00      	nop
 800f580:	371c      	adds	r7, #28
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	40010000 	.word	0x40010000
 800f590:	40010400 	.word	0x40010400

0800f594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f594:	b480      	push	{r7}
 800f596:	b087      	sub	sp, #28
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6a1b      	ldr	r3, [r3, #32]
 800f5a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a1b      	ldr	r3, [r3, #32]
 800f5ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	69db      	ldr	r3, [r3, #28]
 800f5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f023 0303 	bic.w	r3, r3, #3
 800f5ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f5dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	021b      	lsls	r3, r3, #8
 800f5e4:	697a      	ldr	r2, [r7, #20]
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a21      	ldr	r2, [pc, #132]	; (800f674 <TIM_OC3_SetConfig+0xe0>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d003      	beq.n	800f5fa <TIM_OC3_SetConfig+0x66>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4a20      	ldr	r2, [pc, #128]	; (800f678 <TIM_OC3_SetConfig+0xe4>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d10d      	bne.n	800f616 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	021b      	lsls	r3, r3, #8
 800f608:	697a      	ldr	r2, [r7, #20]
 800f60a:	4313      	orrs	r3, r2
 800f60c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4a16      	ldr	r2, [pc, #88]	; (800f674 <TIM_OC3_SetConfig+0xe0>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d003      	beq.n	800f626 <TIM_OC3_SetConfig+0x92>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4a15      	ldr	r2, [pc, #84]	; (800f678 <TIM_OC3_SetConfig+0xe4>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d113      	bne.n	800f64e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f62c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	695b      	ldr	r3, [r3, #20]
 800f63a:	011b      	lsls	r3, r3, #4
 800f63c:	693a      	ldr	r2, [r7, #16]
 800f63e:	4313      	orrs	r3, r2
 800f640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	699b      	ldr	r3, [r3, #24]
 800f646:	011b      	lsls	r3, r3, #4
 800f648:	693a      	ldr	r2, [r7, #16]
 800f64a:	4313      	orrs	r3, r2
 800f64c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	693a      	ldr	r2, [r7, #16]
 800f652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	68fa      	ldr	r2, [r7, #12]
 800f658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	697a      	ldr	r2, [r7, #20]
 800f666:	621a      	str	r2, [r3, #32]
}
 800f668:	bf00      	nop
 800f66a:	371c      	adds	r7, #28
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr
 800f674:	40010000 	.word	0x40010000
 800f678:	40010400 	.word	0x40010400

0800f67c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b087      	sub	sp, #28
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a1b      	ldr	r3, [r3, #32]
 800f68a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a1b      	ldr	r3, [r3, #32]
 800f696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	69db      	ldr	r3, [r3, #28]
 800f6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	021b      	lsls	r3, r3, #8
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	031b      	lsls	r3, r3, #12
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a12      	ldr	r2, [pc, #72]	; (800f720 <TIM_OC4_SetConfig+0xa4>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d003      	beq.n	800f6e4 <TIM_OC4_SetConfig+0x68>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a11      	ldr	r2, [pc, #68]	; (800f724 <TIM_OC4_SetConfig+0xa8>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d109      	bne.n	800f6f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f6ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	695b      	ldr	r3, [r3, #20]
 800f6f0:	019b      	lsls	r3, r3, #6
 800f6f2:	697a      	ldr	r2, [r7, #20]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	697a      	ldr	r2, [r7, #20]
 800f6fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	68fa      	ldr	r2, [r7, #12]
 800f702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	685a      	ldr	r2, [r3, #4]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	693a      	ldr	r2, [r7, #16]
 800f710:	621a      	str	r2, [r3, #32]
}
 800f712:	bf00      	nop
 800f714:	371c      	adds	r7, #28
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	40010000 	.word	0x40010000
 800f724:	40010400 	.word	0x40010400

0800f728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f728:	b480      	push	{r7}
 800f72a:	b087      	sub	sp, #28
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6a1b      	ldr	r3, [r3, #32]
 800f738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	6a1b      	ldr	r3, [r3, #32]
 800f73e:	f023 0201 	bic.w	r2, r3, #1
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	699b      	ldr	r3, [r3, #24]
 800f74a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	011b      	lsls	r3, r3, #4
 800f758:	693a      	ldr	r2, [r7, #16]
 800f75a:	4313      	orrs	r3, r2
 800f75c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	f023 030a 	bic.w	r3, r3, #10
 800f764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f766:	697a      	ldr	r2, [r7, #20]
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	4313      	orrs	r3, r2
 800f76c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	693a      	ldr	r2, [r7, #16]
 800f772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	621a      	str	r2, [r3, #32]
}
 800f77a:	bf00      	nop
 800f77c:	371c      	adds	r7, #28
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr

0800f786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f786:	b480      	push	{r7}
 800f788:	b087      	sub	sp, #28
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	60f8      	str	r0, [r7, #12]
 800f78e:	60b9      	str	r1, [r7, #8]
 800f790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	f023 0210 	bic.w	r2, r3, #16
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	699b      	ldr	r3, [r3, #24]
 800f7a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	6a1b      	ldr	r3, [r3, #32]
 800f7a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f7b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	031b      	lsls	r3, r3, #12
 800f7b6:	697a      	ldr	r2, [r7, #20]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f7c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	011b      	lsls	r3, r3, #4
 800f7c8:	693a      	ldr	r2, [r7, #16]
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	697a      	ldr	r2, [r7, #20]
 800f7d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	621a      	str	r2, [r3, #32]
}
 800f7da:	bf00      	nop
 800f7dc:	371c      	adds	r7, #28
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr

0800f7e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f7e6:	b480      	push	{r7}
 800f7e8:	b085      	sub	sp, #20
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f7fe:	683a      	ldr	r2, [r7, #0]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	4313      	orrs	r3, r2
 800f804:	f043 0307 	orr.w	r3, r3, #7
 800f808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	609a      	str	r2, [r3, #8]
}
 800f810:	bf00      	nop
 800f812:	3714      	adds	r7, #20
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b087      	sub	sp, #28
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	607a      	str	r2, [r7, #4]
 800f828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	021a      	lsls	r2, r3, #8
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	431a      	orrs	r2, r3
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	4313      	orrs	r3, r2
 800f844:	697a      	ldr	r2, [r7, #20]
 800f846:	4313      	orrs	r3, r2
 800f848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	697a      	ldr	r2, [r7, #20]
 800f84e:	609a      	str	r2, [r3, #8]
}
 800f850:	bf00      	nop
 800f852:	371c      	adds	r7, #28
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d101      	bne.n	800f874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f870:	2302      	movs	r3, #2
 800f872:	e05a      	b.n	800f92a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2202      	movs	r2, #2
 800f880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f89a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	4a21      	ldr	r2, [pc, #132]	; (800f938 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d022      	beq.n	800f8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8c0:	d01d      	beq.n	800f8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4a1d      	ldr	r2, [pc, #116]	; (800f93c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d018      	beq.n	800f8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a1b      	ldr	r2, [pc, #108]	; (800f940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d013      	beq.n	800f8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a1a      	ldr	r2, [pc, #104]	; (800f944 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d00e      	beq.n	800f8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a18      	ldr	r2, [pc, #96]	; (800f948 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d009      	beq.n	800f8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a17      	ldr	r2, [pc, #92]	; (800f94c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d004      	beq.n	800f8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a15      	ldr	r2, [pc, #84]	; (800f950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d10c      	bne.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	68ba      	ldr	r2, [r7, #8]
 800f90c:	4313      	orrs	r3, r2
 800f90e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	68ba      	ldr	r2, [r7, #8]
 800f916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2201      	movs	r2, #1
 800f91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2200      	movs	r2, #0
 800f924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3714      	adds	r7, #20
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop
 800f938:	40010000 	.word	0x40010000
 800f93c:	40000400 	.word	0x40000400
 800f940:	40000800 	.word	0x40000800
 800f944:	40000c00 	.word	0x40000c00
 800f948:	40010400 	.word	0x40010400
 800f94c:	40014000 	.word	0x40014000
 800f950:	40001800 	.word	0x40001800

0800f954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f95c:	bf00      	nop
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d101      	bne.n	800f98e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f98a:	2301      	movs	r3, #1
 800f98c:	e03f      	b.n	800fa0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f994:	b2db      	uxtb	r3, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	d106      	bne.n	800f9a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2200      	movs	r2, #0
 800f99e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7f9 f842 	bl	8008a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2224      	movs	r2, #36	; 0x24
 800f9ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	68da      	ldr	r2, [r3, #12]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 fb8b 	bl	80100dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	691a      	ldr	r2, [r3, #16]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f9d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	695a      	ldr	r2, [r3, #20]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f9e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68da      	ldr	r2, [r3, #12]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f9f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2220      	movs	r2, #32
 800fa00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2220      	movs	r2, #32
 800fa08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
	...

0800fa18 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b086      	sub	sp, #24
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	4613      	mov	r3, r2
 800fa24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	2b20      	cmp	r3, #32
 800fa30:	d166      	bne.n	800fb00 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d002      	beq.n	800fa3e <HAL_UART_Receive_DMA+0x26>
 800fa38:	88fb      	ldrh	r3, [r7, #6]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d101      	bne.n	800fa42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e05f      	b.n	800fb02 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d101      	bne.n	800fa50 <HAL_UART_Receive_DMA+0x38>
 800fa4c:	2302      	movs	r3, #2
 800fa4e:	e058      	b.n	800fb02 <HAL_UART_Receive_DMA+0xea>
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800fa58:	68ba      	ldr	r2, [r7, #8]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	88fa      	ldrh	r2, [r7, #6]
 800fa62:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2200      	movs	r2, #0
 800fa68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2222      	movs	r2, #34	; 0x22
 800fa6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa76:	4a25      	ldr	r2, [pc, #148]	; (800fb0c <HAL_UART_Receive_DMA+0xf4>)
 800fa78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa7e:	4a24      	ldr	r2, [pc, #144]	; (800fb10 <HAL_UART_Receive_DMA+0xf8>)
 800fa80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa86:	4a23      	ldr	r2, [pc, #140]	; (800fb14 <HAL_UART_Receive_DMA+0xfc>)
 800fa88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa8e:	2200      	movs	r2, #0
 800fa90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800fa92:	f107 0308 	add.w	r3, r7, #8
 800fa96:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	3304      	adds	r3, #4
 800faa2:	4619      	mov	r1, r3
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	88fb      	ldrh	r3, [r7, #6]
 800faaa:	f7f9 fbe7 	bl	800927c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800faae:	2300      	movs	r3, #0
 800fab0:	613b      	str	r3, [r7, #16]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	613b      	str	r3, [r7, #16]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	613b      	str	r3, [r7, #16]
 800fac2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	68da      	ldr	r2, [r3, #12]
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fada:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	695a      	ldr	r2, [r3, #20]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f042 0201 	orr.w	r2, r2, #1
 800faea:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	695a      	ldr	r2, [r3, #20]
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fafa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800fafc:	2300      	movs	r3, #0
 800fafe:	e000      	b.n	800fb02 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800fb00:	2302      	movs	r3, #2
  }
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3718      	adds	r7, #24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	0800fd55 	.word	0x0800fd55
 800fb10:	0800fdbd 	.word	0x0800fdbd
 800fb14:	0800fdd9 	.word	0x0800fdd9

0800fb18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b088      	sub	sp, #32
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	695b      	ldr	r3, [r3, #20]
 800fb36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	f003 030f 	and.w	r3, r3, #15
 800fb46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d10d      	bne.n	800fb6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	f003 0320 	and.w	r3, r3, #32
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d008      	beq.n	800fb6a <HAL_UART_IRQHandler+0x52>
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	f003 0320 	and.w	r3, r3, #32
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d003      	beq.n	800fb6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 fa38 	bl	800ffd8 <UART_Receive_IT>
      return;
 800fb68:	e0d1      	b.n	800fd0e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	f000 80b0 	beq.w	800fcd2 <HAL_UART_IRQHandler+0x1ba>
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	f003 0301 	and.w	r3, r3, #1
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d105      	bne.n	800fb88 <HAL_UART_IRQHandler+0x70>
 800fb7c:	69bb      	ldr	r3, [r7, #24]
 800fb7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	f000 80a5 	beq.w	800fcd2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	f003 0301 	and.w	r3, r3, #1
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d00a      	beq.n	800fba8 <HAL_UART_IRQHandler+0x90>
 800fb92:	69bb      	ldr	r3, [r7, #24]
 800fb94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d005      	beq.n	800fba8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fba0:	f043 0201 	orr.w	r2, r3, #1
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	f003 0304 	and.w	r3, r3, #4
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00a      	beq.n	800fbc8 <HAL_UART_IRQHandler+0xb0>
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	f003 0301 	and.w	r3, r3, #1
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d005      	beq.n	800fbc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbc0:	f043 0202 	orr.w	r2, r3, #2
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	f003 0302 	and.w	r3, r3, #2
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00a      	beq.n	800fbe8 <HAL_UART_IRQHandler+0xd0>
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	f003 0301 	and.w	r3, r3, #1
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d005      	beq.n	800fbe8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbe0:	f043 0204 	orr.w	r2, r3, #4
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	f003 0308 	and.w	r3, r3, #8
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d00f      	beq.n	800fc12 <HAL_UART_IRQHandler+0xfa>
 800fbf2:	69bb      	ldr	r3, [r7, #24]
 800fbf4:	f003 0320 	and.w	r3, r3, #32
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d104      	bne.n	800fc06 <HAL_UART_IRQHandler+0xee>
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	f003 0301 	and.w	r3, r3, #1
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d005      	beq.n	800fc12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc0a:	f043 0208 	orr.w	r2, r3, #8
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d078      	beq.n	800fd0c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	f003 0320 	and.w	r3, r3, #32
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d007      	beq.n	800fc34 <HAL_UART_IRQHandler+0x11c>
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	f003 0320 	and.w	r3, r3, #32
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d002      	beq.n	800fc34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f000 f9d2 	bl	800ffd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	695b      	ldr	r3, [r3, #20]
 800fc3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc3e:	2b40      	cmp	r3, #64	; 0x40
 800fc40:	bf0c      	ite	eq
 800fc42:	2301      	moveq	r3, #1
 800fc44:	2300      	movne	r3, #0
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc4e:	f003 0308 	and.w	r3, r3, #8
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d102      	bne.n	800fc5c <HAL_UART_IRQHandler+0x144>
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d031      	beq.n	800fcc0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 f91b 	bl	800fe98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	695b      	ldr	r3, [r3, #20]
 800fc68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc6c:	2b40      	cmp	r3, #64	; 0x40
 800fc6e:	d123      	bne.n	800fcb8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	695a      	ldr	r2, [r3, #20]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d013      	beq.n	800fcb0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc8c:	4a21      	ldr	r2, [pc, #132]	; (800fd14 <HAL_UART_IRQHandler+0x1fc>)
 800fc8e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7f9 fb49 	bl	800932c <HAL_DMA_Abort_IT>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d016      	beq.n	800fcce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800fcaa:	4610      	mov	r0, r2
 800fcac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcae:	e00e      	b.n	800fcce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 f845 	bl	800fd40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcb6:	e00a      	b.n	800fcce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f000 f841 	bl	800fd40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcbe:	e006      	b.n	800fcce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 f83d 	bl	800fd40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800fccc:	e01e      	b.n	800fd0c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcce:	bf00      	nop
    return;
 800fcd0:	e01c      	b.n	800fd0c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d008      	beq.n	800fcee <HAL_UART_IRQHandler+0x1d6>
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d003      	beq.n	800fcee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 f908 	bl	800fefc <UART_Transmit_IT>
    return;
 800fcec:	e00f      	b.n	800fd0e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00a      	beq.n	800fd0e <HAL_UART_IRQHandler+0x1f6>
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d005      	beq.n	800fd0e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f950 	bl	800ffa8 <UART_EndTransmit_IT>
    return;
 800fd08:	bf00      	nop
 800fd0a:	e000      	b.n	800fd0e <HAL_UART_IRQHandler+0x1f6>
    return;
 800fd0c:	bf00      	nop
  }
}
 800fd0e:	3720      	adds	r7, #32
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	0800fed5 	.word	0x0800fed5

0800fd18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fd34:	bf00      	nop
 800fd36:	370c      	adds	r7, #12
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fd48:	bf00      	nop
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr

0800fd54 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd60:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d11e      	bne.n	800fdae <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2200      	movs	r2, #0
 800fd74:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	68da      	ldr	r2, [r3, #12]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fd84:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	695a      	ldr	r2, [r3, #20]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f022 0201 	bic.w	r2, r2, #1
 800fd94:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	695a      	ldr	r2, [r3, #20]
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fda4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2220      	movs	r2, #32
 800fdaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f7f6 fe9c 	bl	8006aec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdb4:	bf00      	nop
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdc8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f7ff ffae 	bl	800fd2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdd0:	bf00      	nop
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b084      	sub	sp, #16
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fde0:	2300      	movs	r3, #0
 800fde2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fde8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	695b      	ldr	r3, [r3, #20]
 800fdf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdf4:	2b80      	cmp	r3, #128	; 0x80
 800fdf6:	bf0c      	ite	eq
 800fdf8:	2301      	moveq	r3, #1
 800fdfa:	2300      	movne	r3, #0
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	2b21      	cmp	r3, #33	; 0x21
 800fe0a:	d108      	bne.n	800fe1e <UART_DMAError+0x46>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d005      	beq.n	800fe1e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	2200      	movs	r2, #0
 800fe16:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800fe18:	68b8      	ldr	r0, [r7, #8]
 800fe1a:	f000 f827 	bl	800fe6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	695b      	ldr	r3, [r3, #20]
 800fe24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe28:	2b40      	cmp	r3, #64	; 0x40
 800fe2a:	bf0c      	ite	eq
 800fe2c:	2301      	moveq	r3, #1
 800fe2e:	2300      	movne	r3, #0
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	2b22      	cmp	r3, #34	; 0x22
 800fe3e:	d108      	bne.n	800fe52 <UART_DMAError+0x7a>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d005      	beq.n	800fe52 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800fe4c:	68b8      	ldr	r0, [r7, #8]
 800fe4e:	f000 f823 	bl	800fe98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe56:	f043 0210 	orr.w	r2, r3, #16
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe5e:	68b8      	ldr	r0, [r7, #8]
 800fe60:	f7ff ff6e 	bl	800fd40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe64:	bf00      	nop
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b083      	sub	sp, #12
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68da      	ldr	r2, [r3, #12]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fe82:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2220      	movs	r2, #32
 800fe88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800fe8c:	bf00      	nop
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	68da      	ldr	r2, [r3, #12]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800feae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	695a      	ldr	r2, [r3, #20]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f022 0201 	bic.w	r2, r2, #1
 800febe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2220      	movs	r2, #32
 800fec4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800fec8:	bf00      	nop
 800feca:	370c      	adds	r7, #12
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2200      	movs	r2, #0
 800fee6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2200      	movs	r2, #0
 800feec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f7ff ff26 	bl	800fd40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fef4:	bf00      	nop
 800fef6:	3710      	adds	r7, #16
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	2b21      	cmp	r3, #33	; 0x21
 800ff0e:	d144      	bne.n	800ff9a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	689b      	ldr	r3, [r3, #8]
 800ff14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff18:	d11a      	bne.n	800ff50 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6a1b      	ldr	r3, [r3, #32]
 800ff1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	881b      	ldrh	r3, [r3, #0]
 800ff24:	461a      	mov	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff2e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	691b      	ldr	r3, [r3, #16]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d105      	bne.n	800ff44 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a1b      	ldr	r3, [r3, #32]
 800ff3c:	1c9a      	adds	r2, r3, #2
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	621a      	str	r2, [r3, #32]
 800ff42:	e00e      	b.n	800ff62 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6a1b      	ldr	r3, [r3, #32]
 800ff48:	1c5a      	adds	r2, r3, #1
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	621a      	str	r2, [r3, #32]
 800ff4e:	e008      	b.n	800ff62 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6a1b      	ldr	r3, [r3, #32]
 800ff54:	1c59      	adds	r1, r3, #1
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	6211      	str	r1, [r2, #32]
 800ff5a:	781a      	ldrb	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	3b01      	subs	r3, #1
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	687a      	ldr	r2, [r7, #4]
 800ff6e:	4619      	mov	r1, r3
 800ff70:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d10f      	bne.n	800ff96 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	68da      	ldr	r2, [r3, #12]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ff84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	68da      	ldr	r2, [r3, #12]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ff94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ff96:	2300      	movs	r3, #0
 800ff98:	e000      	b.n	800ff9c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ff9a:	2302      	movs	r3, #2
  }
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3714      	adds	r7, #20
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr

0800ffa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	68da      	ldr	r2, [r3, #12]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ffbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2220      	movs	r2, #32
 800ffc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7ff fea5 	bl	800fd18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	2b22      	cmp	r3, #34	; 0x22
 800ffea:	d171      	bne.n	80100d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fff4:	d123      	bne.n	801003e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fffa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d10e      	bne.n	8010022 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	b29b      	uxth	r3, r3
 801000c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010010:	b29a      	uxth	r2, r3
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801001a:	1c9a      	adds	r2, r3, #2
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	629a      	str	r2, [r3, #40]	; 0x28
 8010020:	e029      	b.n	8010076 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	b29b      	uxth	r3, r3
 801002a:	b2db      	uxtb	r3, r3
 801002c:	b29a      	uxth	r2, r3
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010036:	1c5a      	adds	r2, r3, #1
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	629a      	str	r2, [r3, #40]	; 0x28
 801003c:	e01b      	b.n	8010076 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	691b      	ldr	r3, [r3, #16]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d10a      	bne.n	801005c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	6858      	ldr	r0, [r3, #4]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010050:	1c59      	adds	r1, r3, #1
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	6291      	str	r1, [r2, #40]	; 0x28
 8010056:	b2c2      	uxtb	r2, r0
 8010058:	701a      	strb	r2, [r3, #0]
 801005a:	e00c      	b.n	8010076 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	b2da      	uxtb	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010068:	1c58      	adds	r0, r3, #1
 801006a:	6879      	ldr	r1, [r7, #4]
 801006c:	6288      	str	r0, [r1, #40]	; 0x28
 801006e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010072:	b2d2      	uxtb	r2, r2
 8010074:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801007a:	b29b      	uxth	r3, r3
 801007c:	3b01      	subs	r3, #1
 801007e:	b29b      	uxth	r3, r3
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	4619      	mov	r1, r3
 8010084:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010086:	2b00      	cmp	r3, #0
 8010088:	d120      	bne.n	80100cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	68da      	ldr	r2, [r3, #12]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f022 0220 	bic.w	r2, r2, #32
 8010098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	68da      	ldr	r2, [r3, #12]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80100a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	695a      	ldr	r2, [r3, #20]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f022 0201 	bic.w	r2, r2, #1
 80100b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2220      	movs	r2, #32
 80100be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f7f6 fd12 	bl	8006aec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80100c8:	2300      	movs	r3, #0
 80100ca:	e002      	b.n	80100d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80100cc:	2300      	movs	r3, #0
 80100ce:	e000      	b.n	80100d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80100d0:	2302      	movs	r3, #2
  }
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
	...

080100dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80100dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e0:	b085      	sub	sp, #20
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	691b      	ldr	r3, [r3, #16]
 80100ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	68da      	ldr	r2, [r3, #12]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	430a      	orrs	r2, r1
 80100fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	689a      	ldr	r2, [r3, #8]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	691b      	ldr	r3, [r3, #16]
 8010104:	431a      	orrs	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	695b      	ldr	r3, [r3, #20]
 801010a:	431a      	orrs	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	69db      	ldr	r3, [r3, #28]
 8010110:	4313      	orrs	r3, r2
 8010112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801011e:	f023 030c 	bic.w	r3, r3, #12
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	6812      	ldr	r2, [r2, #0]
 8010126:	68f9      	ldr	r1, [r7, #12]
 8010128:	430b      	orrs	r3, r1
 801012a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	695b      	ldr	r3, [r3, #20]
 8010132:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	699a      	ldr	r2, [r3, #24]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	430a      	orrs	r2, r1
 8010140:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	69db      	ldr	r3, [r3, #28]
 8010146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801014a:	f040 818b 	bne.w	8010464 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	4ac1      	ldr	r2, [pc, #772]	; (8010458 <UART_SetConfig+0x37c>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d005      	beq.n	8010164 <UART_SetConfig+0x88>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	4abf      	ldr	r2, [pc, #764]	; (801045c <UART_SetConfig+0x380>)
 801015e:	4293      	cmp	r3, r2
 8010160:	f040 80bd 	bne.w	80102de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010164:	f7fd fa1a 	bl	800d59c <HAL_RCC_GetPCLK2Freq>
 8010168:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	461d      	mov	r5, r3
 801016e:	f04f 0600 	mov.w	r6, #0
 8010172:	46a8      	mov	r8, r5
 8010174:	46b1      	mov	r9, r6
 8010176:	eb18 0308 	adds.w	r3, r8, r8
 801017a:	eb49 0409 	adc.w	r4, r9, r9
 801017e:	4698      	mov	r8, r3
 8010180:	46a1      	mov	r9, r4
 8010182:	eb18 0805 	adds.w	r8, r8, r5
 8010186:	eb49 0906 	adc.w	r9, r9, r6
 801018a:	f04f 0100 	mov.w	r1, #0
 801018e:	f04f 0200 	mov.w	r2, #0
 8010192:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010196:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801019a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801019e:	4688      	mov	r8, r1
 80101a0:	4691      	mov	r9, r2
 80101a2:	eb18 0005 	adds.w	r0, r8, r5
 80101a6:	eb49 0106 	adc.w	r1, r9, r6
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	461d      	mov	r5, r3
 80101b0:	f04f 0600 	mov.w	r6, #0
 80101b4:	196b      	adds	r3, r5, r5
 80101b6:	eb46 0406 	adc.w	r4, r6, r6
 80101ba:	461a      	mov	r2, r3
 80101bc:	4623      	mov	r3, r4
 80101be:	f7f0 fed1 	bl	8000f64 <__aeabi_uldivmod>
 80101c2:	4603      	mov	r3, r0
 80101c4:	460c      	mov	r4, r1
 80101c6:	461a      	mov	r2, r3
 80101c8:	4ba5      	ldr	r3, [pc, #660]	; (8010460 <UART_SetConfig+0x384>)
 80101ca:	fba3 2302 	umull	r2, r3, r3, r2
 80101ce:	095b      	lsrs	r3, r3, #5
 80101d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	461d      	mov	r5, r3
 80101d8:	f04f 0600 	mov.w	r6, #0
 80101dc:	46a9      	mov	r9, r5
 80101de:	46b2      	mov	sl, r6
 80101e0:	eb19 0309 	adds.w	r3, r9, r9
 80101e4:	eb4a 040a 	adc.w	r4, sl, sl
 80101e8:	4699      	mov	r9, r3
 80101ea:	46a2      	mov	sl, r4
 80101ec:	eb19 0905 	adds.w	r9, r9, r5
 80101f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80101f4:	f04f 0100 	mov.w	r1, #0
 80101f8:	f04f 0200 	mov.w	r2, #0
 80101fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010208:	4689      	mov	r9, r1
 801020a:	4692      	mov	sl, r2
 801020c:	eb19 0005 	adds.w	r0, r9, r5
 8010210:	eb4a 0106 	adc.w	r1, sl, r6
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	461d      	mov	r5, r3
 801021a:	f04f 0600 	mov.w	r6, #0
 801021e:	196b      	adds	r3, r5, r5
 8010220:	eb46 0406 	adc.w	r4, r6, r6
 8010224:	461a      	mov	r2, r3
 8010226:	4623      	mov	r3, r4
 8010228:	f7f0 fe9c 	bl	8000f64 <__aeabi_uldivmod>
 801022c:	4603      	mov	r3, r0
 801022e:	460c      	mov	r4, r1
 8010230:	461a      	mov	r2, r3
 8010232:	4b8b      	ldr	r3, [pc, #556]	; (8010460 <UART_SetConfig+0x384>)
 8010234:	fba3 1302 	umull	r1, r3, r3, r2
 8010238:	095b      	lsrs	r3, r3, #5
 801023a:	2164      	movs	r1, #100	; 0x64
 801023c:	fb01 f303 	mul.w	r3, r1, r3
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	00db      	lsls	r3, r3, #3
 8010244:	3332      	adds	r3, #50	; 0x32
 8010246:	4a86      	ldr	r2, [pc, #536]	; (8010460 <UART_SetConfig+0x384>)
 8010248:	fba2 2303 	umull	r2, r3, r2, r3
 801024c:	095b      	lsrs	r3, r3, #5
 801024e:	005b      	lsls	r3, r3, #1
 8010250:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010254:	4498      	add	r8, r3
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	461d      	mov	r5, r3
 801025a:	f04f 0600 	mov.w	r6, #0
 801025e:	46a9      	mov	r9, r5
 8010260:	46b2      	mov	sl, r6
 8010262:	eb19 0309 	adds.w	r3, r9, r9
 8010266:	eb4a 040a 	adc.w	r4, sl, sl
 801026a:	4699      	mov	r9, r3
 801026c:	46a2      	mov	sl, r4
 801026e:	eb19 0905 	adds.w	r9, r9, r5
 8010272:	eb4a 0a06 	adc.w	sl, sl, r6
 8010276:	f04f 0100 	mov.w	r1, #0
 801027a:	f04f 0200 	mov.w	r2, #0
 801027e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801028a:	4689      	mov	r9, r1
 801028c:	4692      	mov	sl, r2
 801028e:	eb19 0005 	adds.w	r0, r9, r5
 8010292:	eb4a 0106 	adc.w	r1, sl, r6
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	461d      	mov	r5, r3
 801029c:	f04f 0600 	mov.w	r6, #0
 80102a0:	196b      	adds	r3, r5, r5
 80102a2:	eb46 0406 	adc.w	r4, r6, r6
 80102a6:	461a      	mov	r2, r3
 80102a8:	4623      	mov	r3, r4
 80102aa:	f7f0 fe5b 	bl	8000f64 <__aeabi_uldivmod>
 80102ae:	4603      	mov	r3, r0
 80102b0:	460c      	mov	r4, r1
 80102b2:	461a      	mov	r2, r3
 80102b4:	4b6a      	ldr	r3, [pc, #424]	; (8010460 <UART_SetConfig+0x384>)
 80102b6:	fba3 1302 	umull	r1, r3, r3, r2
 80102ba:	095b      	lsrs	r3, r3, #5
 80102bc:	2164      	movs	r1, #100	; 0x64
 80102be:	fb01 f303 	mul.w	r3, r1, r3
 80102c2:	1ad3      	subs	r3, r2, r3
 80102c4:	00db      	lsls	r3, r3, #3
 80102c6:	3332      	adds	r3, #50	; 0x32
 80102c8:	4a65      	ldr	r2, [pc, #404]	; (8010460 <UART_SetConfig+0x384>)
 80102ca:	fba2 2303 	umull	r2, r3, r2, r3
 80102ce:	095b      	lsrs	r3, r3, #5
 80102d0:	f003 0207 	and.w	r2, r3, #7
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4442      	add	r2, r8
 80102da:	609a      	str	r2, [r3, #8]
 80102dc:	e26f      	b.n	80107be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80102de:	f7fd f949 	bl	800d574 <HAL_RCC_GetPCLK1Freq>
 80102e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	461d      	mov	r5, r3
 80102e8:	f04f 0600 	mov.w	r6, #0
 80102ec:	46a8      	mov	r8, r5
 80102ee:	46b1      	mov	r9, r6
 80102f0:	eb18 0308 	adds.w	r3, r8, r8
 80102f4:	eb49 0409 	adc.w	r4, r9, r9
 80102f8:	4698      	mov	r8, r3
 80102fa:	46a1      	mov	r9, r4
 80102fc:	eb18 0805 	adds.w	r8, r8, r5
 8010300:	eb49 0906 	adc.w	r9, r9, r6
 8010304:	f04f 0100 	mov.w	r1, #0
 8010308:	f04f 0200 	mov.w	r2, #0
 801030c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010310:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010314:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010318:	4688      	mov	r8, r1
 801031a:	4691      	mov	r9, r2
 801031c:	eb18 0005 	adds.w	r0, r8, r5
 8010320:	eb49 0106 	adc.w	r1, r9, r6
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	461d      	mov	r5, r3
 801032a:	f04f 0600 	mov.w	r6, #0
 801032e:	196b      	adds	r3, r5, r5
 8010330:	eb46 0406 	adc.w	r4, r6, r6
 8010334:	461a      	mov	r2, r3
 8010336:	4623      	mov	r3, r4
 8010338:	f7f0 fe14 	bl	8000f64 <__aeabi_uldivmod>
 801033c:	4603      	mov	r3, r0
 801033e:	460c      	mov	r4, r1
 8010340:	461a      	mov	r2, r3
 8010342:	4b47      	ldr	r3, [pc, #284]	; (8010460 <UART_SetConfig+0x384>)
 8010344:	fba3 2302 	umull	r2, r3, r3, r2
 8010348:	095b      	lsrs	r3, r3, #5
 801034a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	461d      	mov	r5, r3
 8010352:	f04f 0600 	mov.w	r6, #0
 8010356:	46a9      	mov	r9, r5
 8010358:	46b2      	mov	sl, r6
 801035a:	eb19 0309 	adds.w	r3, r9, r9
 801035e:	eb4a 040a 	adc.w	r4, sl, sl
 8010362:	4699      	mov	r9, r3
 8010364:	46a2      	mov	sl, r4
 8010366:	eb19 0905 	adds.w	r9, r9, r5
 801036a:	eb4a 0a06 	adc.w	sl, sl, r6
 801036e:	f04f 0100 	mov.w	r1, #0
 8010372:	f04f 0200 	mov.w	r2, #0
 8010376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801037a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801037e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010382:	4689      	mov	r9, r1
 8010384:	4692      	mov	sl, r2
 8010386:	eb19 0005 	adds.w	r0, r9, r5
 801038a:	eb4a 0106 	adc.w	r1, sl, r6
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	461d      	mov	r5, r3
 8010394:	f04f 0600 	mov.w	r6, #0
 8010398:	196b      	adds	r3, r5, r5
 801039a:	eb46 0406 	adc.w	r4, r6, r6
 801039e:	461a      	mov	r2, r3
 80103a0:	4623      	mov	r3, r4
 80103a2:	f7f0 fddf 	bl	8000f64 <__aeabi_uldivmod>
 80103a6:	4603      	mov	r3, r0
 80103a8:	460c      	mov	r4, r1
 80103aa:	461a      	mov	r2, r3
 80103ac:	4b2c      	ldr	r3, [pc, #176]	; (8010460 <UART_SetConfig+0x384>)
 80103ae:	fba3 1302 	umull	r1, r3, r3, r2
 80103b2:	095b      	lsrs	r3, r3, #5
 80103b4:	2164      	movs	r1, #100	; 0x64
 80103b6:	fb01 f303 	mul.w	r3, r1, r3
 80103ba:	1ad3      	subs	r3, r2, r3
 80103bc:	00db      	lsls	r3, r3, #3
 80103be:	3332      	adds	r3, #50	; 0x32
 80103c0:	4a27      	ldr	r2, [pc, #156]	; (8010460 <UART_SetConfig+0x384>)
 80103c2:	fba2 2303 	umull	r2, r3, r2, r3
 80103c6:	095b      	lsrs	r3, r3, #5
 80103c8:	005b      	lsls	r3, r3, #1
 80103ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80103ce:	4498      	add	r8, r3
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	461d      	mov	r5, r3
 80103d4:	f04f 0600 	mov.w	r6, #0
 80103d8:	46a9      	mov	r9, r5
 80103da:	46b2      	mov	sl, r6
 80103dc:	eb19 0309 	adds.w	r3, r9, r9
 80103e0:	eb4a 040a 	adc.w	r4, sl, sl
 80103e4:	4699      	mov	r9, r3
 80103e6:	46a2      	mov	sl, r4
 80103e8:	eb19 0905 	adds.w	r9, r9, r5
 80103ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80103f0:	f04f 0100 	mov.w	r1, #0
 80103f4:	f04f 0200 	mov.w	r2, #0
 80103f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010400:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010404:	4689      	mov	r9, r1
 8010406:	4692      	mov	sl, r2
 8010408:	eb19 0005 	adds.w	r0, r9, r5
 801040c:	eb4a 0106 	adc.w	r1, sl, r6
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	461d      	mov	r5, r3
 8010416:	f04f 0600 	mov.w	r6, #0
 801041a:	196b      	adds	r3, r5, r5
 801041c:	eb46 0406 	adc.w	r4, r6, r6
 8010420:	461a      	mov	r2, r3
 8010422:	4623      	mov	r3, r4
 8010424:	f7f0 fd9e 	bl	8000f64 <__aeabi_uldivmod>
 8010428:	4603      	mov	r3, r0
 801042a:	460c      	mov	r4, r1
 801042c:	461a      	mov	r2, r3
 801042e:	4b0c      	ldr	r3, [pc, #48]	; (8010460 <UART_SetConfig+0x384>)
 8010430:	fba3 1302 	umull	r1, r3, r3, r2
 8010434:	095b      	lsrs	r3, r3, #5
 8010436:	2164      	movs	r1, #100	; 0x64
 8010438:	fb01 f303 	mul.w	r3, r1, r3
 801043c:	1ad3      	subs	r3, r2, r3
 801043e:	00db      	lsls	r3, r3, #3
 8010440:	3332      	adds	r3, #50	; 0x32
 8010442:	4a07      	ldr	r2, [pc, #28]	; (8010460 <UART_SetConfig+0x384>)
 8010444:	fba2 2303 	umull	r2, r3, r2, r3
 8010448:	095b      	lsrs	r3, r3, #5
 801044a:	f003 0207 	and.w	r2, r3, #7
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4442      	add	r2, r8
 8010454:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010456:	e1b2      	b.n	80107be <UART_SetConfig+0x6e2>
 8010458:	40011000 	.word	0x40011000
 801045c:	40011400 	.word	0x40011400
 8010460:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4ad7      	ldr	r2, [pc, #860]	; (80107c8 <UART_SetConfig+0x6ec>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d005      	beq.n	801047a <UART_SetConfig+0x39e>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	4ad6      	ldr	r2, [pc, #856]	; (80107cc <UART_SetConfig+0x6f0>)
 8010474:	4293      	cmp	r3, r2
 8010476:	f040 80d1 	bne.w	801061c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801047a:	f7fd f88f 	bl	800d59c <HAL_RCC_GetPCLK2Freq>
 801047e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	469a      	mov	sl, r3
 8010484:	f04f 0b00 	mov.w	fp, #0
 8010488:	46d0      	mov	r8, sl
 801048a:	46d9      	mov	r9, fp
 801048c:	eb18 0308 	adds.w	r3, r8, r8
 8010490:	eb49 0409 	adc.w	r4, r9, r9
 8010494:	4698      	mov	r8, r3
 8010496:	46a1      	mov	r9, r4
 8010498:	eb18 080a 	adds.w	r8, r8, sl
 801049c:	eb49 090b 	adc.w	r9, r9, fp
 80104a0:	f04f 0100 	mov.w	r1, #0
 80104a4:	f04f 0200 	mov.w	r2, #0
 80104a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80104ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80104b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80104b4:	4688      	mov	r8, r1
 80104b6:	4691      	mov	r9, r2
 80104b8:	eb1a 0508 	adds.w	r5, sl, r8
 80104bc:	eb4b 0609 	adc.w	r6, fp, r9
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	4619      	mov	r1, r3
 80104c6:	f04f 0200 	mov.w	r2, #0
 80104ca:	f04f 0300 	mov.w	r3, #0
 80104ce:	f04f 0400 	mov.w	r4, #0
 80104d2:	0094      	lsls	r4, r2, #2
 80104d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104d8:	008b      	lsls	r3, r1, #2
 80104da:	461a      	mov	r2, r3
 80104dc:	4623      	mov	r3, r4
 80104de:	4628      	mov	r0, r5
 80104e0:	4631      	mov	r1, r6
 80104e2:	f7f0 fd3f 	bl	8000f64 <__aeabi_uldivmod>
 80104e6:	4603      	mov	r3, r0
 80104e8:	460c      	mov	r4, r1
 80104ea:	461a      	mov	r2, r3
 80104ec:	4bb8      	ldr	r3, [pc, #736]	; (80107d0 <UART_SetConfig+0x6f4>)
 80104ee:	fba3 2302 	umull	r2, r3, r3, r2
 80104f2:	095b      	lsrs	r3, r3, #5
 80104f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	469b      	mov	fp, r3
 80104fc:	f04f 0c00 	mov.w	ip, #0
 8010500:	46d9      	mov	r9, fp
 8010502:	46e2      	mov	sl, ip
 8010504:	eb19 0309 	adds.w	r3, r9, r9
 8010508:	eb4a 040a 	adc.w	r4, sl, sl
 801050c:	4699      	mov	r9, r3
 801050e:	46a2      	mov	sl, r4
 8010510:	eb19 090b 	adds.w	r9, r9, fp
 8010514:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010518:	f04f 0100 	mov.w	r1, #0
 801051c:	f04f 0200 	mov.w	r2, #0
 8010520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010524:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010528:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801052c:	4689      	mov	r9, r1
 801052e:	4692      	mov	sl, r2
 8010530:	eb1b 0509 	adds.w	r5, fp, r9
 8010534:	eb4c 060a 	adc.w	r6, ip, sl
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	4619      	mov	r1, r3
 801053e:	f04f 0200 	mov.w	r2, #0
 8010542:	f04f 0300 	mov.w	r3, #0
 8010546:	f04f 0400 	mov.w	r4, #0
 801054a:	0094      	lsls	r4, r2, #2
 801054c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010550:	008b      	lsls	r3, r1, #2
 8010552:	461a      	mov	r2, r3
 8010554:	4623      	mov	r3, r4
 8010556:	4628      	mov	r0, r5
 8010558:	4631      	mov	r1, r6
 801055a:	f7f0 fd03 	bl	8000f64 <__aeabi_uldivmod>
 801055e:	4603      	mov	r3, r0
 8010560:	460c      	mov	r4, r1
 8010562:	461a      	mov	r2, r3
 8010564:	4b9a      	ldr	r3, [pc, #616]	; (80107d0 <UART_SetConfig+0x6f4>)
 8010566:	fba3 1302 	umull	r1, r3, r3, r2
 801056a:	095b      	lsrs	r3, r3, #5
 801056c:	2164      	movs	r1, #100	; 0x64
 801056e:	fb01 f303 	mul.w	r3, r1, r3
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	011b      	lsls	r3, r3, #4
 8010576:	3332      	adds	r3, #50	; 0x32
 8010578:	4a95      	ldr	r2, [pc, #596]	; (80107d0 <UART_SetConfig+0x6f4>)
 801057a:	fba2 2303 	umull	r2, r3, r2, r3
 801057e:	095b      	lsrs	r3, r3, #5
 8010580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010584:	4498      	add	r8, r3
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	469b      	mov	fp, r3
 801058a:	f04f 0c00 	mov.w	ip, #0
 801058e:	46d9      	mov	r9, fp
 8010590:	46e2      	mov	sl, ip
 8010592:	eb19 0309 	adds.w	r3, r9, r9
 8010596:	eb4a 040a 	adc.w	r4, sl, sl
 801059a:	4699      	mov	r9, r3
 801059c:	46a2      	mov	sl, r4
 801059e:	eb19 090b 	adds.w	r9, r9, fp
 80105a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80105a6:	f04f 0100 	mov.w	r1, #0
 80105aa:	f04f 0200 	mov.w	r2, #0
 80105ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80105b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80105b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80105ba:	4689      	mov	r9, r1
 80105bc:	4692      	mov	sl, r2
 80105be:	eb1b 0509 	adds.w	r5, fp, r9
 80105c2:	eb4c 060a 	adc.w	r6, ip, sl
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	4619      	mov	r1, r3
 80105cc:	f04f 0200 	mov.w	r2, #0
 80105d0:	f04f 0300 	mov.w	r3, #0
 80105d4:	f04f 0400 	mov.w	r4, #0
 80105d8:	0094      	lsls	r4, r2, #2
 80105da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80105de:	008b      	lsls	r3, r1, #2
 80105e0:	461a      	mov	r2, r3
 80105e2:	4623      	mov	r3, r4
 80105e4:	4628      	mov	r0, r5
 80105e6:	4631      	mov	r1, r6
 80105e8:	f7f0 fcbc 	bl	8000f64 <__aeabi_uldivmod>
 80105ec:	4603      	mov	r3, r0
 80105ee:	460c      	mov	r4, r1
 80105f0:	461a      	mov	r2, r3
 80105f2:	4b77      	ldr	r3, [pc, #476]	; (80107d0 <UART_SetConfig+0x6f4>)
 80105f4:	fba3 1302 	umull	r1, r3, r3, r2
 80105f8:	095b      	lsrs	r3, r3, #5
 80105fa:	2164      	movs	r1, #100	; 0x64
 80105fc:	fb01 f303 	mul.w	r3, r1, r3
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	011b      	lsls	r3, r3, #4
 8010604:	3332      	adds	r3, #50	; 0x32
 8010606:	4a72      	ldr	r2, [pc, #456]	; (80107d0 <UART_SetConfig+0x6f4>)
 8010608:	fba2 2303 	umull	r2, r3, r2, r3
 801060c:	095b      	lsrs	r3, r3, #5
 801060e:	f003 020f 	and.w	r2, r3, #15
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	4442      	add	r2, r8
 8010618:	609a      	str	r2, [r3, #8]
 801061a:	e0d0      	b.n	80107be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 801061c:	f7fc ffaa 	bl	800d574 <HAL_RCC_GetPCLK1Freq>
 8010620:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	469a      	mov	sl, r3
 8010626:	f04f 0b00 	mov.w	fp, #0
 801062a:	46d0      	mov	r8, sl
 801062c:	46d9      	mov	r9, fp
 801062e:	eb18 0308 	adds.w	r3, r8, r8
 8010632:	eb49 0409 	adc.w	r4, r9, r9
 8010636:	4698      	mov	r8, r3
 8010638:	46a1      	mov	r9, r4
 801063a:	eb18 080a 	adds.w	r8, r8, sl
 801063e:	eb49 090b 	adc.w	r9, r9, fp
 8010642:	f04f 0100 	mov.w	r1, #0
 8010646:	f04f 0200 	mov.w	r2, #0
 801064a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801064e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010652:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010656:	4688      	mov	r8, r1
 8010658:	4691      	mov	r9, r2
 801065a:	eb1a 0508 	adds.w	r5, sl, r8
 801065e:	eb4b 0609 	adc.w	r6, fp, r9
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	4619      	mov	r1, r3
 8010668:	f04f 0200 	mov.w	r2, #0
 801066c:	f04f 0300 	mov.w	r3, #0
 8010670:	f04f 0400 	mov.w	r4, #0
 8010674:	0094      	lsls	r4, r2, #2
 8010676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801067a:	008b      	lsls	r3, r1, #2
 801067c:	461a      	mov	r2, r3
 801067e:	4623      	mov	r3, r4
 8010680:	4628      	mov	r0, r5
 8010682:	4631      	mov	r1, r6
 8010684:	f7f0 fc6e 	bl	8000f64 <__aeabi_uldivmod>
 8010688:	4603      	mov	r3, r0
 801068a:	460c      	mov	r4, r1
 801068c:	461a      	mov	r2, r3
 801068e:	4b50      	ldr	r3, [pc, #320]	; (80107d0 <UART_SetConfig+0x6f4>)
 8010690:	fba3 2302 	umull	r2, r3, r3, r2
 8010694:	095b      	lsrs	r3, r3, #5
 8010696:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	469b      	mov	fp, r3
 801069e:	f04f 0c00 	mov.w	ip, #0
 80106a2:	46d9      	mov	r9, fp
 80106a4:	46e2      	mov	sl, ip
 80106a6:	eb19 0309 	adds.w	r3, r9, r9
 80106aa:	eb4a 040a 	adc.w	r4, sl, sl
 80106ae:	4699      	mov	r9, r3
 80106b0:	46a2      	mov	sl, r4
 80106b2:	eb19 090b 	adds.w	r9, r9, fp
 80106b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80106ba:	f04f 0100 	mov.w	r1, #0
 80106be:	f04f 0200 	mov.w	r2, #0
 80106c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80106c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80106ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80106ce:	4689      	mov	r9, r1
 80106d0:	4692      	mov	sl, r2
 80106d2:	eb1b 0509 	adds.w	r5, fp, r9
 80106d6:	eb4c 060a 	adc.w	r6, ip, sl
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	4619      	mov	r1, r3
 80106e0:	f04f 0200 	mov.w	r2, #0
 80106e4:	f04f 0300 	mov.w	r3, #0
 80106e8:	f04f 0400 	mov.w	r4, #0
 80106ec:	0094      	lsls	r4, r2, #2
 80106ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80106f2:	008b      	lsls	r3, r1, #2
 80106f4:	461a      	mov	r2, r3
 80106f6:	4623      	mov	r3, r4
 80106f8:	4628      	mov	r0, r5
 80106fa:	4631      	mov	r1, r6
 80106fc:	f7f0 fc32 	bl	8000f64 <__aeabi_uldivmod>
 8010700:	4603      	mov	r3, r0
 8010702:	460c      	mov	r4, r1
 8010704:	461a      	mov	r2, r3
 8010706:	4b32      	ldr	r3, [pc, #200]	; (80107d0 <UART_SetConfig+0x6f4>)
 8010708:	fba3 1302 	umull	r1, r3, r3, r2
 801070c:	095b      	lsrs	r3, r3, #5
 801070e:	2164      	movs	r1, #100	; 0x64
 8010710:	fb01 f303 	mul.w	r3, r1, r3
 8010714:	1ad3      	subs	r3, r2, r3
 8010716:	011b      	lsls	r3, r3, #4
 8010718:	3332      	adds	r3, #50	; 0x32
 801071a:	4a2d      	ldr	r2, [pc, #180]	; (80107d0 <UART_SetConfig+0x6f4>)
 801071c:	fba2 2303 	umull	r2, r3, r2, r3
 8010720:	095b      	lsrs	r3, r3, #5
 8010722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010726:	4498      	add	r8, r3
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	469b      	mov	fp, r3
 801072c:	f04f 0c00 	mov.w	ip, #0
 8010730:	46d9      	mov	r9, fp
 8010732:	46e2      	mov	sl, ip
 8010734:	eb19 0309 	adds.w	r3, r9, r9
 8010738:	eb4a 040a 	adc.w	r4, sl, sl
 801073c:	4699      	mov	r9, r3
 801073e:	46a2      	mov	sl, r4
 8010740:	eb19 090b 	adds.w	r9, r9, fp
 8010744:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010748:	f04f 0100 	mov.w	r1, #0
 801074c:	f04f 0200 	mov.w	r2, #0
 8010750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010754:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010758:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801075c:	4689      	mov	r9, r1
 801075e:	4692      	mov	sl, r2
 8010760:	eb1b 0509 	adds.w	r5, fp, r9
 8010764:	eb4c 060a 	adc.w	r6, ip, sl
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	4619      	mov	r1, r3
 801076e:	f04f 0200 	mov.w	r2, #0
 8010772:	f04f 0300 	mov.w	r3, #0
 8010776:	f04f 0400 	mov.w	r4, #0
 801077a:	0094      	lsls	r4, r2, #2
 801077c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010780:	008b      	lsls	r3, r1, #2
 8010782:	461a      	mov	r2, r3
 8010784:	4623      	mov	r3, r4
 8010786:	4628      	mov	r0, r5
 8010788:	4631      	mov	r1, r6
 801078a:	f7f0 fbeb 	bl	8000f64 <__aeabi_uldivmod>
 801078e:	4603      	mov	r3, r0
 8010790:	460c      	mov	r4, r1
 8010792:	461a      	mov	r2, r3
 8010794:	4b0e      	ldr	r3, [pc, #56]	; (80107d0 <UART_SetConfig+0x6f4>)
 8010796:	fba3 1302 	umull	r1, r3, r3, r2
 801079a:	095b      	lsrs	r3, r3, #5
 801079c:	2164      	movs	r1, #100	; 0x64
 801079e:	fb01 f303 	mul.w	r3, r1, r3
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	011b      	lsls	r3, r3, #4
 80107a6:	3332      	adds	r3, #50	; 0x32
 80107a8:	4a09      	ldr	r2, [pc, #36]	; (80107d0 <UART_SetConfig+0x6f4>)
 80107aa:	fba2 2303 	umull	r2, r3, r2, r3
 80107ae:	095b      	lsrs	r3, r3, #5
 80107b0:	f003 020f 	and.w	r2, r3, #15
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	4442      	add	r2, r8
 80107ba:	609a      	str	r2, [r3, #8]
}
 80107bc:	e7ff      	b.n	80107be <UART_SetConfig+0x6e2>
 80107be:	bf00      	nop
 80107c0:	3714      	adds	r7, #20
 80107c2:	46bd      	mov	sp, r7
 80107c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c8:	40011000 	.word	0x40011000
 80107cc:	40011400 	.word	0x40011400
 80107d0:	51eb851f 	.word	0x51eb851f

080107d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80107d4:	b084      	sub	sp, #16
 80107d6:	b480      	push	{r7}
 80107d8:	b085      	sub	sp, #20
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
 80107de:	f107 001c 	add.w	r0, r7, #28
 80107e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80107e6:	2300      	movs	r3, #0
 80107e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80107ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80107ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80107ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80107f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80107f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80107f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80107fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80107fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80107fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	4313      	orrs	r3, r2
 8010804:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801080e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010812:	68fa      	ldr	r2, [r7, #12]
 8010814:	431a      	orrs	r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801081a:	2300      	movs	r3, #0
}
 801081c:	4618      	mov	r0, r3
 801081e:	3714      	adds	r7, #20
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	b004      	add	sp, #16
 8010828:	4770      	bx	lr

0801082a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801082a:	b480      	push	{r7}
 801082c:	b083      	sub	sp, #12
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010838:	4618      	mov	r0, r3
 801083a:	370c      	adds	r7, #12
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	370c      	adds	r7, #12
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr

08010866 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010866:	b580      	push	{r7, lr}
 8010868:	b082      	sub	sp, #8
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2203      	movs	r2, #3
 8010872:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010874:	2002      	movs	r0, #2
 8010876:	f7f8 fb4f 	bl	8008f18 <HAL_Delay>
  
  return HAL_OK;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f003 0303 	and.w	r3, r3, #3
}
 8010894:	4618      	mov	r0, r3
 8010896:	370c      	adds	r7, #12
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr

080108a0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80108aa:	2300      	movs	r3, #0
 80108ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80108be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80108c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80108ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	4313      	orrs	r3, r2
 80108d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	68db      	ldr	r3, [r3, #12]
 80108d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80108da:	f023 030f 	bic.w	r3, r3, #15
 80108de:	68fa      	ldr	r2, [r7, #12]
 80108e0:	431a      	orrs	r2, r3
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80108e6:	2300      	movs	r3, #0
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3714      	adds	r7, #20
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	691b      	ldr	r3, [r3, #16]
 8010900:	b2db      	uxtb	r3, r3
}
 8010902:	4618      	mov	r0, r3
 8010904:	370c      	adds	r7, #12
 8010906:	46bd      	mov	sp, r7
 8010908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090c:	4770      	bx	lr

0801090e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801090e:	b480      	push	{r7}
 8010910:	b085      	sub	sp, #20
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
 8010916:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	3314      	adds	r3, #20
 801091c:	461a      	mov	r2, r3
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	4413      	add	r3, r2
 8010922:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
}  
 8010928:	4618      	mov	r0, r3
 801092a:	3714      	adds	r7, #20
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010934:	b480      	push	{r7}
 8010936:	b085      	sub	sp, #20
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801093e:	2300      	movs	r3, #0
 8010940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	685a      	ldr	r2, [r3, #4]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801095a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010960:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010966:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010968:	68fa      	ldr	r2, [r7, #12]
 801096a:	4313      	orrs	r3, r2
 801096c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010972:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	431a      	orrs	r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801097e:	2300      	movs	r3, #0

}
 8010980:	4618      	mov	r0, r3
 8010982:	3714      	adds	r7, #20
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b088      	sub	sp, #32
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801099a:	2310      	movs	r3, #16
 801099c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801099e:	2340      	movs	r3, #64	; 0x40
 80109a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109a2:	2300      	movs	r3, #0
 80109a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109ac:	f107 0308 	add.w	r3, r7, #8
 80109b0:	4619      	mov	r1, r3
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7ff ff74 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80109b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80109bc:	2110      	movs	r1, #16
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 fa40 	bl	8010e44 <SDMMC_GetCmdResp1>
 80109c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c6:	69fb      	ldr	r3, [r7, #28]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3720      	adds	r7, #32
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b088      	sub	sp, #32
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80109de:	2311      	movs	r3, #17
 80109e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109e2:	2340      	movs	r3, #64	; 0x40
 80109e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109e6:	2300      	movs	r3, #0
 80109e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109f0:	f107 0308 	add.w	r3, r7, #8
 80109f4:	4619      	mov	r1, r3
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7ff ff52 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80109fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a00:	2111      	movs	r1, #17
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 fa1e 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a0a:	69fb      	ldr	r3, [r7, #28]
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3720      	adds	r7, #32
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b088      	sub	sp, #32
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010a22:	2312      	movs	r3, #18
 8010a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a26:	2340      	movs	r3, #64	; 0x40
 8010a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a34:	f107 0308 	add.w	r3, r7, #8
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f7ff ff30 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a44:	2112      	movs	r1, #18
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 f9fc 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a4e:	69fb      	ldr	r3, [r7, #28]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3720      	adds	r7, #32
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b088      	sub	sp, #32
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010a66:	2318      	movs	r3, #24
 8010a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a6a:	2340      	movs	r3, #64	; 0x40
 8010a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a78:	f107 0308 	add.w	r3, r7, #8
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7ff ff0e 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a88:	2118      	movs	r1, #24
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 f9da 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a92:	69fb      	ldr	r3, [r7, #28]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3720      	adds	r7, #32
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b088      	sub	sp, #32
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010aaa:	2319      	movs	r3, #25
 8010aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010aae:	2340      	movs	r3, #64	; 0x40
 8010ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010abc:	f107 0308 	add.w	r3, r7, #8
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7ff feec 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010acc:	2119      	movs	r1, #25
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 f9b8 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ad6:	69fb      	ldr	r3, [r7, #28]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3720      	adds	r7, #32
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b088      	sub	sp, #32
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010aec:	230c      	movs	r3, #12
 8010aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010af0:	2340      	movs	r3, #64	; 0x40
 8010af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010af4:	2300      	movs	r3, #0
 8010af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010afc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010afe:	f107 0308 	add.w	r3, r7, #8
 8010b02:	4619      	mov	r1, r3
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f7ff fecb 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010b0a:	4a05      	ldr	r2, [pc, #20]	; (8010b20 <SDMMC_CmdStopTransfer+0x40>)
 8010b0c:	210c      	movs	r1, #12
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 f998 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b16:	69fb      	ldr	r3, [r7, #28]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3720      	adds	r7, #32
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	05f5e100 	.word	0x05f5e100

08010b24 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b08a      	sub	sp, #40	; 0x28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010b34:	2307      	movs	r3, #7
 8010b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b38:	2340      	movs	r3, #64	; 0x40
 8010b3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b44:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b46:	f107 0310 	add.w	r3, r7, #16
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f7ff fea7 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b56:	2107      	movs	r1, #7
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f000 f973 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010b5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3728      	adds	r7, #40	; 0x28
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b088      	sub	sp, #32
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010b72:	2300      	movs	r3, #0
 8010b74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010b76:	2300      	movs	r3, #0
 8010b78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b88:	f107 0308 	add.w	r3, r7, #8
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f7ff fe86 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 f92d 	bl	8010df4 <SDMMC_GetCmdError>
 8010b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b9c:	69fb      	ldr	r3, [r7, #28]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3720      	adds	r7, #32
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b088      	sub	sp, #32
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010bae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010bb4:	2308      	movs	r3, #8
 8010bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010bb8:	2340      	movs	r3, #64	; 0x40
 8010bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bc6:	f107 0308 	add.w	r3, r7, #8
 8010bca:	4619      	mov	r1, r3
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7ff fe67 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f000 fb16 	bl	8011204 <SDMMC_GetCmdResp7>
 8010bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bda:	69fb      	ldr	r3, [r7, #28]
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3720      	adds	r7, #32
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b088      	sub	sp, #32
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010bf2:	2337      	movs	r3, #55	; 0x37
 8010bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010bf6:	2340      	movs	r3, #64	; 0x40
 8010bf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c04:	f107 0308 	add.w	r3, r7, #8
 8010c08:	4619      	mov	r1, r3
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f7ff fe48 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c14:	2137      	movs	r1, #55	; 0x37
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f000 f914 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c1e:	69fb      	ldr	r3, [r7, #28]
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3720      	adds	r7, #32
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b088      	sub	sp, #32
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010c3e:	2329      	movs	r3, #41	; 0x29
 8010c40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c42:	2340      	movs	r3, #64	; 0x40
 8010c44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c46:	2300      	movs	r3, #0
 8010c48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c50:	f107 0308 	add.w	r3, r7, #8
 8010c54:	4619      	mov	r1, r3
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f7ff fe22 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f000 fa23 	bl	80110a8 <SDMMC_GetCmdResp3>
 8010c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c64:	69fb      	ldr	r3, [r7, #28]
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3720      	adds	r7, #32
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b088      	sub	sp, #32
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
 8010c76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010c7c:	2306      	movs	r3, #6
 8010c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c80:	2340      	movs	r3, #64	; 0x40
 8010c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c84:	2300      	movs	r3, #0
 8010c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c8e:	f107 0308 	add.w	r3, r7, #8
 8010c92:	4619      	mov	r1, r3
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f7ff fe03 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c9e:	2106      	movs	r1, #6
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f000 f8cf 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ca8:	69fb      	ldr	r3, [r7, #28]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3720      	adds	r7, #32
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b088      	sub	sp, #32
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010cbe:	2333      	movs	r3, #51	; 0x33
 8010cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010cc2:	2340      	movs	r3, #64	; 0x40
 8010cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010cd0:	f107 0308 	add.w	r3, r7, #8
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f7ff fde2 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ce0:	2133      	movs	r1, #51	; 0x33
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f000 f8ae 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cea:	69fb      	ldr	r3, [r7, #28]
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3720      	adds	r7, #32
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b088      	sub	sp, #32
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010d00:	2302      	movs	r3, #2
 8010d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010d04:	23c0      	movs	r3, #192	; 0xc0
 8010d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d12:	f107 0308 	add.w	r3, r7, #8
 8010d16:	4619      	mov	r1, r3
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f7ff fdc1 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f000 f97c 	bl	801101c <SDMMC_GetCmdResp2>
 8010d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d26:	69fb      	ldr	r3, [r7, #28]
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3720      	adds	r7, #32
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b088      	sub	sp, #32
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010d3e:	2309      	movs	r3, #9
 8010d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010d42:	23c0      	movs	r3, #192	; 0xc0
 8010d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d46:	2300      	movs	r3, #0
 8010d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d50:	f107 0308 	add.w	r3, r7, #8
 8010d54:	4619      	mov	r1, r3
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7ff fda2 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f000 f95d 	bl	801101c <SDMMC_GetCmdResp2>
 8010d62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d64:	69fb      	ldr	r3, [r7, #28]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3720      	adds	r7, #32
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010d6e:	b580      	push	{r7, lr}
 8010d70:	b088      	sub	sp, #32
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
 8010d76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010d7c:	2303      	movs	r3, #3
 8010d7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d80:	2340      	movs	r3, #64	; 0x40
 8010d82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d84:	2300      	movs	r3, #0
 8010d86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d8e:	f107 0308 	add.w	r3, r7, #8
 8010d92:	4619      	mov	r1, r3
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7ff fd83 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010d9a:	683a      	ldr	r2, [r7, #0]
 8010d9c:	2103      	movs	r1, #3
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f000 f9bc 	bl	801111c <SDMMC_GetCmdResp6>
 8010da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010da6:	69fb      	ldr	r3, [r7, #28]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3720      	adds	r7, #32
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b088      	sub	sp, #32
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010dbe:	230d      	movs	r3, #13
 8010dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010dc2:	2340      	movs	r3, #64	; 0x40
 8010dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010dd0:	f107 0308 	add.w	r3, r7, #8
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f7ff fd62 	bl	80108a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010de0:	210d      	movs	r1, #13
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f000 f82e 	bl	8010e44 <SDMMC_GetCmdResp1>
 8010de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dea:	69fb      	ldr	r3, [r7, #28]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3720      	adds	r7, #32
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010df4:	b490      	push	{r4, r7}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010dfc:	4b0f      	ldr	r3, [pc, #60]	; (8010e3c <SDMMC_GetCmdError+0x48>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4a0f      	ldr	r2, [pc, #60]	; (8010e40 <SDMMC_GetCmdError+0x4c>)
 8010e02:	fba2 2303 	umull	r2, r3, r2, r3
 8010e06:	0a5b      	lsrs	r3, r3, #9
 8010e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e10:	4623      	mov	r3, r4
 8010e12:	1e5c      	subs	r4, r3, #1
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d102      	bne.n	8010e1e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e1c:	e009      	b.n	8010e32 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d0f2      	beq.n	8010e10 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	22c5      	movs	r2, #197	; 0xc5
 8010e2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bc90      	pop	{r4, r7}
 8010e3a:	4770      	bx	lr
 8010e3c:	200000b0 	.word	0x200000b0
 8010e40:	10624dd3 	.word	0x10624dd3

08010e44 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010e44:	b590      	push	{r4, r7, lr}
 8010e46:	b087      	sub	sp, #28
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	460b      	mov	r3, r1
 8010e4e:	607a      	str	r2, [r7, #4]
 8010e50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010e52:	4b6f      	ldr	r3, [pc, #444]	; (8011010 <SDMMC_GetCmdResp1+0x1cc>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4a6f      	ldr	r2, [pc, #444]	; (8011014 <SDMMC_GetCmdResp1+0x1d0>)
 8010e58:	fba2 2303 	umull	r2, r3, r2, r3
 8010e5c:	0a5b      	lsrs	r3, r3, #9
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e64:	4623      	mov	r3, r4
 8010e66:	1e5c      	subs	r4, r3, #1
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d102      	bne.n	8010e72 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e70:	e0c9      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e76:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d0f0      	beq.n	8010e64 <SDMMC_GetCmdResp1+0x20>
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d1eb      	bne.n	8010e64 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e90:	f003 0304 	and.w	r3, r3, #4
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d004      	beq.n	8010ea2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	2204      	movs	r2, #4
 8010e9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e9e:	2304      	movs	r3, #4
 8010ea0:	e0b1      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ea6:	f003 0301 	and.w	r3, r3, #1
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d004      	beq.n	8010eb8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	e0a6      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	22c5      	movs	r2, #197	; 0xc5
 8010ebc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010ebe:	68f8      	ldr	r0, [r7, #12]
 8010ec0:	f7ff fd18 	bl	80108f4 <SDIO_GetCommandResponse>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	7afb      	ldrb	r3, [r7, #11]
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d001      	beq.n	8010ed2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e099      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010ed2:	2100      	movs	r1, #0
 8010ed4:	68f8      	ldr	r0, [r7, #12]
 8010ed6:	f7ff fd1a 	bl	801090e <SDIO_GetResponse>
 8010eda:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010edc:	693a      	ldr	r2, [r7, #16]
 8010ede:	4b4e      	ldr	r3, [pc, #312]	; (8011018 <SDMMC_GetCmdResp1+0x1d4>)
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e08d      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	da02      	bge.n	8010ef6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010ef4:	e087      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d001      	beq.n	8010f04 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010f00:	2340      	movs	r3, #64	; 0x40
 8010f02:	e080      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d001      	beq.n	8010f12 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010f0e:	2380      	movs	r3, #128	; 0x80
 8010f10:	e079      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d002      	beq.n	8010f22 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f20:	e071      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d002      	beq.n	8010f32 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f30:	e069      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d002      	beq.n	8010f42 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f40:	e061      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d002      	beq.n	8010f52 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f50:	e059      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d002      	beq.n	8010f62 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f60:	e051      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d002      	beq.n	8010f72 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f70:	e049      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d002      	beq.n	8010f82 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010f80:	e041      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d002      	beq.n	8010f92 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f90:	e039      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d002      	beq.n	8010fa2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010fa0:	e031      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d002      	beq.n	8010fb2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010fac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010fb0:	e029      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d002      	beq.n	8010fc2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010fbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010fc0:	e021      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d002      	beq.n	8010fd2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010fcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010fd0:	e019      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d002      	beq.n	8010fe2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010fdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010fe0:	e011      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d002      	beq.n	8010ff2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010fec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010ff0:	e009      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	f003 0308 	and.w	r3, r3, #8
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d002      	beq.n	8011002 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010ffc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011000:	e001      	b.n	8011006 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011006:	4618      	mov	r0, r3
 8011008:	371c      	adds	r7, #28
 801100a:	46bd      	mov	sp, r7
 801100c:	bd90      	pop	{r4, r7, pc}
 801100e:	bf00      	nop
 8011010:	200000b0 	.word	0x200000b0
 8011014:	10624dd3 	.word	0x10624dd3
 8011018:	fdffe008 	.word	0xfdffe008

0801101c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 801101c:	b490      	push	{r4, r7}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011024:	4b1e      	ldr	r3, [pc, #120]	; (80110a0 <SDMMC_GetCmdResp2+0x84>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	4a1e      	ldr	r2, [pc, #120]	; (80110a4 <SDMMC_GetCmdResp2+0x88>)
 801102a:	fba2 2303 	umull	r2, r3, r2, r3
 801102e:	0a5b      	lsrs	r3, r3, #9
 8011030:	f241 3288 	movw	r2, #5000	; 0x1388
 8011034:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011038:	4623      	mov	r3, r4
 801103a:	1e5c      	subs	r4, r3, #1
 801103c:	2b00      	cmp	r3, #0
 801103e:	d102      	bne.n	8011046 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011044:	e026      	b.n	8011094 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801104a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011052:	2b00      	cmp	r3, #0
 8011054:	d0f0      	beq.n	8011038 <SDMMC_GetCmdResp2+0x1c>
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801105c:	2b00      	cmp	r3, #0
 801105e:	d1eb      	bne.n	8011038 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011064:	f003 0304 	and.w	r3, r3, #4
 8011068:	2b00      	cmp	r3, #0
 801106a:	d004      	beq.n	8011076 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2204      	movs	r2, #4
 8011070:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011072:	2304      	movs	r3, #4
 8011074:	e00e      	b.n	8011094 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801107a:	f003 0301 	and.w	r3, r3, #1
 801107e:	2b00      	cmp	r3, #0
 8011080:	d004      	beq.n	801108c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2201      	movs	r2, #1
 8011086:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011088:	2301      	movs	r3, #1
 801108a:	e003      	b.n	8011094 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	22c5      	movs	r2, #197	; 0xc5
 8011090:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011092:	2300      	movs	r3, #0
}
 8011094:	4618      	mov	r0, r3
 8011096:	3710      	adds	r7, #16
 8011098:	46bd      	mov	sp, r7
 801109a:	bc90      	pop	{r4, r7}
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	200000b0 	.word	0x200000b0
 80110a4:	10624dd3 	.word	0x10624dd3

080110a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80110a8:	b490      	push	{r4, r7}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110b0:	4b18      	ldr	r3, [pc, #96]	; (8011114 <SDMMC_GetCmdResp3+0x6c>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a18      	ldr	r2, [pc, #96]	; (8011118 <SDMMC_GetCmdResp3+0x70>)
 80110b6:	fba2 2303 	umull	r2, r3, r2, r3
 80110ba:	0a5b      	lsrs	r3, r3, #9
 80110bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80110c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80110c4:	4623      	mov	r3, r4
 80110c6:	1e5c      	subs	r4, r3, #1
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d102      	bne.n	80110d2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110d0:	e01b      	b.n	801110a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d0f0      	beq.n	80110c4 <SDMMC_GetCmdResp3+0x1c>
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1eb      	bne.n	80110c4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110f0:	f003 0304 	and.w	r3, r3, #4
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d004      	beq.n	8011102 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2204      	movs	r2, #4
 80110fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110fe:	2304      	movs	r3, #4
 8011100:	e003      	b.n	801110a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	22c5      	movs	r2, #197	; 0xc5
 8011106:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011108:	2300      	movs	r3, #0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3710      	adds	r7, #16
 801110e:	46bd      	mov	sp, r7
 8011110:	bc90      	pop	{r4, r7}
 8011112:	4770      	bx	lr
 8011114:	200000b0 	.word	0x200000b0
 8011118:	10624dd3 	.word	0x10624dd3

0801111c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801111c:	b590      	push	{r4, r7, lr}
 801111e:	b087      	sub	sp, #28
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	460b      	mov	r3, r1
 8011126:	607a      	str	r2, [r7, #4]
 8011128:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801112a:	4b34      	ldr	r3, [pc, #208]	; (80111fc <SDMMC_GetCmdResp6+0xe0>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	4a34      	ldr	r2, [pc, #208]	; (8011200 <SDMMC_GetCmdResp6+0xe4>)
 8011130:	fba2 2303 	umull	r2, r3, r2, r3
 8011134:	0a5b      	lsrs	r3, r3, #9
 8011136:	f241 3288 	movw	r2, #5000	; 0x1388
 801113a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801113e:	4623      	mov	r3, r4
 8011140:	1e5c      	subs	r4, r3, #1
 8011142:	2b00      	cmp	r3, #0
 8011144:	d102      	bne.n	801114c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011146:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801114a:	e052      	b.n	80111f2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011150:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011158:	2b00      	cmp	r3, #0
 801115a:	d0f0      	beq.n	801113e <SDMMC_GetCmdResp6+0x22>
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1eb      	bne.n	801113e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801116a:	f003 0304 	and.w	r3, r3, #4
 801116e:	2b00      	cmp	r3, #0
 8011170:	d004      	beq.n	801117c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2204      	movs	r2, #4
 8011176:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011178:	2304      	movs	r3, #4
 801117a:	e03a      	b.n	80111f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011180:	f003 0301 	and.w	r3, r3, #1
 8011184:	2b00      	cmp	r3, #0
 8011186:	d004      	beq.n	8011192 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2201      	movs	r2, #1
 801118c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801118e:	2301      	movs	r3, #1
 8011190:	e02f      	b.n	80111f2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011192:	68f8      	ldr	r0, [r7, #12]
 8011194:	f7ff fbae 	bl	80108f4 <SDIO_GetCommandResponse>
 8011198:	4603      	mov	r3, r0
 801119a:	461a      	mov	r2, r3
 801119c:	7afb      	ldrb	r3, [r7, #11]
 801119e:	4293      	cmp	r3, r2
 80111a0:	d001      	beq.n	80111a6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80111a2:	2301      	movs	r3, #1
 80111a4:	e025      	b.n	80111f2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	22c5      	movs	r2, #197	; 0xc5
 80111aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80111ac:	2100      	movs	r1, #0
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	f7ff fbad 	bl	801090e <SDIO_GetResponse>
 80111b4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d106      	bne.n	80111ce <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	0c1b      	lsrs	r3, r3, #16
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80111ca:	2300      	movs	r3, #0
 80111cc:	e011      	b.n	80111f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d002      	beq.n	80111de <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80111d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80111dc:	e009      	b.n	80111f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d002      	beq.n	80111ee <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80111e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111ec:	e001      	b.n	80111f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80111ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	371c      	adds	r7, #28
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd90      	pop	{r4, r7, pc}
 80111fa:	bf00      	nop
 80111fc:	200000b0 	.word	0x200000b0
 8011200:	10624dd3 	.word	0x10624dd3

08011204 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011204:	b490      	push	{r4, r7}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801120c:	4b21      	ldr	r3, [pc, #132]	; (8011294 <SDMMC_GetCmdResp7+0x90>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4a21      	ldr	r2, [pc, #132]	; (8011298 <SDMMC_GetCmdResp7+0x94>)
 8011212:	fba2 2303 	umull	r2, r3, r2, r3
 8011216:	0a5b      	lsrs	r3, r3, #9
 8011218:	f241 3288 	movw	r2, #5000	; 0x1388
 801121c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011220:	4623      	mov	r3, r4
 8011222:	1e5c      	subs	r4, r3, #1
 8011224:	2b00      	cmp	r3, #0
 8011226:	d102      	bne.n	801122e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801122c:	e02c      	b.n	8011288 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011232:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801123a:	2b00      	cmp	r3, #0
 801123c:	d0f0      	beq.n	8011220 <SDMMC_GetCmdResp7+0x1c>
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011244:	2b00      	cmp	r3, #0
 8011246:	d1eb      	bne.n	8011220 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801124c:	f003 0304 	and.w	r3, r3, #4
 8011250:	2b00      	cmp	r3, #0
 8011252:	d004      	beq.n	801125e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2204      	movs	r2, #4
 8011258:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801125a:	2304      	movs	r3, #4
 801125c:	e014      	b.n	8011288 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011262:	f003 0301 	and.w	r3, r3, #1
 8011266:	2b00      	cmp	r3, #0
 8011268:	d004      	beq.n	8011274 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2201      	movs	r2, #1
 801126e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011270:	2301      	movs	r3, #1
 8011272:	e009      	b.n	8011288 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801127c:	2b00      	cmp	r3, #0
 801127e:	d002      	beq.n	8011286 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2240      	movs	r2, #64	; 0x40
 8011284:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011286:	2300      	movs	r3, #0
  
}
 8011288:	4618      	mov	r0, r3
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bc90      	pop	{r4, r7}
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop
 8011294:	200000b0 	.word	0x200000b0
 8011298:	10624dd3 	.word	0x10624dd3

0801129c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801129c:	b084      	sub	sp, #16
 801129e:	b580      	push	{r7, lr}
 80112a0:	b084      	sub	sp, #16
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
 80112a6:	f107 001c 	add.w	r0, r7, #28
 80112aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80112ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d122      	bne.n	80112fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80112c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112cc:	687a      	ldr	r2, [r7, #4]
 80112ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80112dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112de:	2b01      	cmp	r3, #1
 80112e0:	d105      	bne.n	80112ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f000 fa4e 	bl	8011790 <USB_CoreReset>
 80112f4:	4603      	mov	r3, r0
 80112f6:	73fb      	strb	r3, [r7, #15]
 80112f8:	e01a      	b.n	8011330 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 fa42 	bl	8011790 <USB_CoreReset>
 801130c:	4603      	mov	r3, r0
 801130e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011312:	2b00      	cmp	r3, #0
 8011314:	d106      	bne.n	8011324 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801131a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	639a      	str	r2, [r3, #56]	; 0x38
 8011322:	e005      	b.n	8011330 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011328:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011332:	2b01      	cmp	r3, #1
 8011334:	d10b      	bne.n	801134e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	689b      	ldr	r3, [r3, #8]
 801133a:	f043 0206 	orr.w	r2, r3, #6
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	f043 0220 	orr.w	r2, r3, #32
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011350:	4618      	mov	r0, r3
 8011352:	3710      	adds	r7, #16
 8011354:	46bd      	mov	sp, r7
 8011356:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801135a:	b004      	add	sp, #16
 801135c:	4770      	bx	lr

0801135e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801135e:	b480      	push	{r7}
 8011360:	b083      	sub	sp, #12
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	689b      	ldr	r3, [r3, #8]
 801136a:	f023 0201 	bic.w	r2, r3, #1
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr

08011380 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	460b      	mov	r3, r1
 801138a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011398:	78fb      	ldrb	r3, [r7, #3]
 801139a:	2b01      	cmp	r3, #1
 801139c:	d106      	bne.n	80113ac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	60da      	str	r2, [r3, #12]
 80113aa:	e00b      	b.n	80113c4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80113ac:	78fb      	ldrb	r3, [r7, #3]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d106      	bne.n	80113c0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	68db      	ldr	r3, [r3, #12]
 80113b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	60da      	str	r2, [r3, #12]
 80113be:	e001      	b.n	80113c4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80113c0:	2301      	movs	r3, #1
 80113c2:	e003      	b.n	80113cc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80113c4:	2032      	movs	r0, #50	; 0x32
 80113c6:	f7f7 fda7 	bl	8008f18 <HAL_Delay>

  return HAL_OK;
 80113ca:	2300      	movs	r3, #0
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80113d4:	b084      	sub	sp, #16
 80113d6:	b580      	push	{r7, lr}
 80113d8:	b086      	sub	sp, #24
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
 80113de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80113e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80113e6:	2300      	movs	r3, #0
 80113e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80113ee:	2300      	movs	r3, #0
 80113f0:	613b      	str	r3, [r7, #16]
 80113f2:	e009      	b.n	8011408 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	3340      	adds	r3, #64	; 0x40
 80113fa:	009b      	lsls	r3, r3, #2
 80113fc:	4413      	add	r3, r2
 80113fe:	2200      	movs	r2, #0
 8011400:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	3301      	adds	r3, #1
 8011406:	613b      	str	r3, [r7, #16]
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	2b0e      	cmp	r3, #14
 801140c:	d9f2      	bls.n	80113f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801140e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011410:	2b00      	cmp	r3, #0
 8011412:	d11c      	bne.n	801144e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801141a:	685b      	ldr	r3, [r3, #4]
 801141c:	68fa      	ldr	r2, [r7, #12]
 801141e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011422:	f043 0302 	orr.w	r3, r3, #2
 8011426:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801142c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011438:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011444:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	639a      	str	r2, [r3, #56]	; 0x38
 801144c:	e00b      	b.n	8011466 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011452:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801145e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801146c:	461a      	mov	r2, r3
 801146e:	2300      	movs	r3, #0
 8011470:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011478:	4619      	mov	r1, r3
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011480:	461a      	mov	r2, r3
 8011482:	680b      	ldr	r3, [r1, #0]
 8011484:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011488:	2b01      	cmp	r3, #1
 801148a:	d10c      	bne.n	80114a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148e:	2b00      	cmp	r3, #0
 8011490:	d104      	bne.n	801149c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011492:	2100      	movs	r1, #0
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f000 f949 	bl	801172c <USB_SetDevSpeed>
 801149a:	e008      	b.n	80114ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801149c:	2101      	movs	r1, #1
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f000 f944 	bl	801172c <USB_SetDevSpeed>
 80114a4:	e003      	b.n	80114ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80114a6:	2103      	movs	r1, #3
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f000 f93f 	bl	801172c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80114ae:	2110      	movs	r1, #16
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f000 f8f3 	bl	801169c <USB_FlushTxFifo>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d001      	beq.n	80114c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80114bc:	2301      	movs	r3, #1
 80114be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f000 f911 	bl	80116e8 <USB_FlushRxFifo>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d001      	beq.n	80114d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80114cc:	2301      	movs	r3, #1
 80114ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114d6:	461a      	mov	r2, r3
 80114d8:	2300      	movs	r3, #0
 80114da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114e2:	461a      	mov	r2, r3
 80114e4:	2300      	movs	r3, #0
 80114e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114ee:	461a      	mov	r2, r3
 80114f0:	2300      	movs	r3, #0
 80114f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80114f4:	2300      	movs	r3, #0
 80114f6:	613b      	str	r3, [r7, #16]
 80114f8:	e043      	b.n	8011582 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	015a      	lsls	r2, r3, #5
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	4413      	add	r3, r2
 8011502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801150c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011510:	d118      	bne.n	8011544 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d10a      	bne.n	801152e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	015a      	lsls	r2, r3, #5
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	4413      	add	r3, r2
 8011520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011524:	461a      	mov	r2, r3
 8011526:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801152a:	6013      	str	r3, [r2, #0]
 801152c:	e013      	b.n	8011556 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	015a      	lsls	r2, r3, #5
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	4413      	add	r3, r2
 8011536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801153a:	461a      	mov	r2, r3
 801153c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011540:	6013      	str	r3, [r2, #0]
 8011542:	e008      	b.n	8011556 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	015a      	lsls	r2, r3, #5
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	4413      	add	r3, r2
 801154c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011550:	461a      	mov	r2, r3
 8011552:	2300      	movs	r3, #0
 8011554:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	015a      	lsls	r2, r3, #5
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	4413      	add	r3, r2
 801155e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011562:	461a      	mov	r2, r3
 8011564:	2300      	movs	r3, #0
 8011566:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	015a      	lsls	r2, r3, #5
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	4413      	add	r3, r2
 8011570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011574:	461a      	mov	r2, r3
 8011576:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801157a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	3301      	adds	r3, #1
 8011580:	613b      	str	r3, [r7, #16]
 8011582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011584:	693a      	ldr	r2, [r7, #16]
 8011586:	429a      	cmp	r2, r3
 8011588:	d3b7      	bcc.n	80114fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801158a:	2300      	movs	r3, #0
 801158c:	613b      	str	r3, [r7, #16]
 801158e:	e043      	b.n	8011618 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	015a      	lsls	r2, r3, #5
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	4413      	add	r3, r2
 8011598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80115a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80115a6:	d118      	bne.n	80115da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d10a      	bne.n	80115c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	015a      	lsls	r2, r3, #5
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	4413      	add	r3, r2
 80115b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115ba:	461a      	mov	r2, r3
 80115bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80115c0:	6013      	str	r3, [r2, #0]
 80115c2:	e013      	b.n	80115ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	015a      	lsls	r2, r3, #5
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	4413      	add	r3, r2
 80115cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115d0:	461a      	mov	r2, r3
 80115d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80115d6:	6013      	str	r3, [r2, #0]
 80115d8:	e008      	b.n	80115ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	015a      	lsls	r2, r3, #5
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	4413      	add	r3, r2
 80115e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115e6:	461a      	mov	r2, r3
 80115e8:	2300      	movs	r3, #0
 80115ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	015a      	lsls	r2, r3, #5
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	4413      	add	r3, r2
 80115f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115f8:	461a      	mov	r2, r3
 80115fa:	2300      	movs	r3, #0
 80115fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	015a      	lsls	r2, r3, #5
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	4413      	add	r3, r2
 8011606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801160a:	461a      	mov	r2, r3
 801160c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011610:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	3301      	adds	r3, #1
 8011616:	613b      	str	r3, [r7, #16]
 8011618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161a:	693a      	ldr	r2, [r7, #16]
 801161c:	429a      	cmp	r2, r3
 801161e:	d3b7      	bcc.n	8011590 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011626:	691b      	ldr	r3, [r3, #16]
 8011628:	68fa      	ldr	r2, [r7, #12]
 801162a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801162e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011632:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2200      	movs	r2, #0
 8011638:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011640:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011644:	2b00      	cmp	r3, #0
 8011646:	d105      	bne.n	8011654 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	699b      	ldr	r3, [r3, #24]
 801164c:	f043 0210 	orr.w	r2, r3, #16
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	699a      	ldr	r2, [r3, #24]
 8011658:	4b0f      	ldr	r3, [pc, #60]	; (8011698 <USB_DevInit+0x2c4>)
 801165a:	4313      	orrs	r3, r2
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011662:	2b00      	cmp	r3, #0
 8011664:	d005      	beq.n	8011672 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	699b      	ldr	r3, [r3, #24]
 801166a:	f043 0208 	orr.w	r2, r3, #8
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011674:	2b01      	cmp	r3, #1
 8011676:	d107      	bne.n	8011688 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	699b      	ldr	r3, [r3, #24]
 801167c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011680:	f043 0304 	orr.w	r3, r3, #4
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011688:	7dfb      	ldrb	r3, [r7, #23]
}
 801168a:	4618      	mov	r0, r3
 801168c:	3718      	adds	r7, #24
 801168e:	46bd      	mov	sp, r7
 8011690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011694:	b004      	add	sp, #16
 8011696:	4770      	bx	lr
 8011698:	803c3800 	.word	0x803c3800

0801169c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801169c:	b480      	push	{r7}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80116a6:	2300      	movs	r3, #0
 80116a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	019b      	lsls	r3, r3, #6
 80116ae:	f043 0220 	orr.w	r2, r3, #32
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	3301      	adds	r3, #1
 80116ba:	60fb      	str	r3, [r7, #12]
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	4a09      	ldr	r2, [pc, #36]	; (80116e4 <USB_FlushTxFifo+0x48>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d901      	bls.n	80116c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80116c4:	2303      	movs	r3, #3
 80116c6:	e006      	b.n	80116d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	f003 0320 	and.w	r3, r3, #32
 80116d0:	2b20      	cmp	r3, #32
 80116d2:	d0f0      	beq.n	80116b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3714      	adds	r7, #20
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	00030d40 	.word	0x00030d40

080116e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b085      	sub	sp, #20
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2210      	movs	r2, #16
 80116f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	3301      	adds	r3, #1
 80116fe:	60fb      	str	r3, [r7, #12]
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	4a09      	ldr	r2, [pc, #36]	; (8011728 <USB_FlushRxFifo+0x40>)
 8011704:	4293      	cmp	r3, r2
 8011706:	d901      	bls.n	801170c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011708:	2303      	movs	r3, #3
 801170a:	e006      	b.n	801171a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	691b      	ldr	r3, [r3, #16]
 8011710:	f003 0310 	and.w	r3, r3, #16
 8011714:	2b10      	cmp	r3, #16
 8011716:	d0f0      	beq.n	80116fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011718:	2300      	movs	r3, #0
}
 801171a:	4618      	mov	r0, r3
 801171c:	3714      	adds	r7, #20
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr
 8011726:	bf00      	nop
 8011728:	00030d40 	.word	0x00030d40

0801172c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801172c:	b480      	push	{r7}
 801172e:	b085      	sub	sp, #20
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	78fb      	ldrb	r3, [r7, #3]
 8011746:	68f9      	ldr	r1, [r7, #12]
 8011748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801174c:	4313      	orrs	r3, r2
 801174e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011750:	2300      	movs	r3, #0
}
 8011752:	4618      	mov	r0, r3
 8011754:	3714      	adds	r7, #20
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr

0801175e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801175e:	b580      	push	{r7, lr}
 8011760:	b084      	sub	sp, #16
 8011762:	af00      	add	r7, sp, #0
 8011764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	68fa      	ldr	r2, [r7, #12]
 8011774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011778:	f043 0302 	orr.w	r3, r3, #2
 801177c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801177e:	2003      	movs	r0, #3
 8011780:	f7f7 fbca 	bl	8008f18 <HAL_Delay>

  return HAL_OK;
 8011784:	2300      	movs	r3, #0
}
 8011786:	4618      	mov	r0, r3
 8011788:	3710      	adds	r7, #16
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
	...

08011790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011798:	2300      	movs	r3, #0
 801179a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	3301      	adds	r3, #1
 80117a0:	60fb      	str	r3, [r7, #12]
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	4a13      	ldr	r2, [pc, #76]	; (80117f4 <USB_CoreReset+0x64>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d901      	bls.n	80117ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80117aa:	2303      	movs	r3, #3
 80117ac:	e01b      	b.n	80117e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	daf2      	bge.n	801179c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80117b6:	2300      	movs	r3, #0
 80117b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	691b      	ldr	r3, [r3, #16]
 80117be:	f043 0201 	orr.w	r2, r3, #1
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3301      	adds	r3, #1
 80117ca:	60fb      	str	r3, [r7, #12]
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	4a09      	ldr	r2, [pc, #36]	; (80117f4 <USB_CoreReset+0x64>)
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d901      	bls.n	80117d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80117d4:	2303      	movs	r3, #3
 80117d6:	e006      	b.n	80117e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	691b      	ldr	r3, [r3, #16]
 80117dc:	f003 0301 	and.w	r3, r3, #1
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d0f0      	beq.n	80117c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80117e4:	2300      	movs	r3, #0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	00030d40 	.word	0x00030d40

080117f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80117fc:	4904      	ldr	r1, [pc, #16]	; (8011810 <MX_FATFS_Init+0x18>)
 80117fe:	4805      	ldr	r0, [pc, #20]	; (8011814 <MX_FATFS_Init+0x1c>)
 8011800:	f000 fab8 	bl	8011d74 <FATFS_LinkDriver>
 8011804:	4603      	mov	r3, r0
 8011806:	461a      	mov	r2, r3
 8011808:	4b03      	ldr	r3, [pc, #12]	; (8011818 <MX_FATFS_Init+0x20>)
 801180a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 801180c:	bf00      	nop
 801180e:	bd80      	pop	{r7, pc}
 8011810:	2000206c 	.word	0x2000206c
 8011814:	0801a94c 	.word	0x0801a94c
 8011818:	20002068 	.word	0x20002068

0801181c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011822:	2300      	movs	r3, #0
 8011824:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011826:	f000 f896 	bl	8011956 <BSP_SD_IsDetected>
 801182a:	4603      	mov	r3, r0
 801182c:	2b01      	cmp	r3, #1
 801182e:	d001      	beq.n	8011834 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011830:	2301      	movs	r3, #1
 8011832:	e012      	b.n	801185a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011834:	480b      	ldr	r0, [pc, #44]	; (8011864 <BSP_SD_Init+0x48>)
 8011836:	f7fb fef7 	bl	800d628 <HAL_SD_Init>
 801183a:	4603      	mov	r3, r0
 801183c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801183e:	79fb      	ldrb	r3, [r7, #7]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d109      	bne.n	8011858 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8011844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011848:	4806      	ldr	r0, [pc, #24]	; (8011864 <BSP_SD_Init+0x48>)
 801184a:	f7fc fcb7 	bl	800e1bc <HAL_SD_ConfigWideBusOperation>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d001      	beq.n	8011858 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011854:	2301      	movs	r3, #1
 8011856:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011858:	79fb      	ldrb	r3, [r7, #7]
}
 801185a:	4618      	mov	r0, r3
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	20001898 	.word	0x20001898

08011868 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b086      	sub	sp, #24
 801186c:	af00      	add	r7, sp, #0
 801186e:	60f8      	str	r0, [r7, #12]
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011874:	2300      	movs	r3, #0
 8011876:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	68ba      	ldr	r2, [r7, #8]
 801187c:	68f9      	ldr	r1, [r7, #12]
 801187e:	4806      	ldr	r0, [pc, #24]	; (8011898 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011880:	f7fb ff62 	bl	800d748 <HAL_SD_ReadBlocks_DMA>
 8011884:	4603      	mov	r3, r0
 8011886:	2b00      	cmp	r3, #0
 8011888:	d001      	beq.n	801188e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801188a:	2301      	movs	r3, #1
 801188c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801188e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011890:	4618      	mov	r0, r3
 8011892:	3718      	adds	r7, #24
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}
 8011898:	20001898 	.word	0x20001898

0801189c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b086      	sub	sp, #24
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80118a8:	2300      	movs	r3, #0
 80118aa:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	68ba      	ldr	r2, [r7, #8]
 80118b0:	68f9      	ldr	r1, [r7, #12]
 80118b2:	4806      	ldr	r0, [pc, #24]	; (80118cc <BSP_SD_WriteBlocks_DMA+0x30>)
 80118b4:	f7fc f832 	bl	800d91c <HAL_SD_WriteBlocks_DMA>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d001      	beq.n	80118c2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80118be:	2301      	movs	r3, #1
 80118c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80118c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3718      	adds	r7, #24
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	20001898 	.word	0x20001898

080118d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80118d4:	4805      	ldr	r0, [pc, #20]	; (80118ec <BSP_SD_GetCardState+0x1c>)
 80118d6:	f7fc fced 	bl	800e2b4 <HAL_SD_GetCardState>
 80118da:	4603      	mov	r3, r0
 80118dc:	2b04      	cmp	r3, #4
 80118de:	bf14      	ite	ne
 80118e0:	2301      	movne	r3, #1
 80118e2:	2300      	moveq	r3, #0
 80118e4:	b2db      	uxtb	r3, r3
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	bd80      	pop	{r7, pc}
 80118ea:	bf00      	nop
 80118ec:	20001898 	.word	0x20001898

080118f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80118f8:	6879      	ldr	r1, [r7, #4]
 80118fa:	4803      	ldr	r0, [pc, #12]	; (8011908 <BSP_SD_GetCardInfo+0x18>)
 80118fc:	f7fc fc32 	bl	800e164 <HAL_SD_GetCardInfo>
}
 8011900:	bf00      	nop
 8011902:	3708      	adds	r7, #8
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	20001898 	.word	0x20001898

0801190c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011914:	f000 f818 	bl	8011948 <BSP_SD_AbortCallback>
}
 8011918:	bf00      	nop
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011928:	f000 f9b4 	bl	8011c94 <BSP_SD_WriteCpltCallback>
}
 801192c:	bf00      	nop
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801193c:	f000 f9bc 	bl	8011cb8 <BSP_SD_ReadCpltCallback>
}
 8011940:	bf00      	nop
 8011942:	3708      	adds	r7, #8
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}

08011948 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011948:	b480      	push	{r7}
 801194a:	af00      	add	r7, sp, #0

}
 801194c:	bf00      	nop
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr

08011956 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011956:	b580      	push	{r7, lr}
 8011958:	b082      	sub	sp, #8
 801195a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801195c:	2301      	movs	r3, #1
 801195e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8011960:	f000 f80c 	bl	801197c <BSP_PlatformIsDetected>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d101      	bne.n	801196e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801196a:	2300      	movs	r3, #0
 801196c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801196e:	79fb      	ldrb	r3, [r7, #7]
 8011970:	b2db      	uxtb	r3, r3
}
 8011972:	4618      	mov	r0, r3
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
	...

0801197c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011982:	2301      	movs	r3, #1
 8011984:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011986:	2180      	movs	r1, #128	; 0x80
 8011988:	4806      	ldr	r0, [pc, #24]	; (80119a4 <BSP_PlatformIsDetected+0x28>)
 801198a:	f7f8 f91d 	bl	8009bc8 <HAL_GPIO_ReadPin>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	d001      	beq.n	8011998 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8011994:	2300      	movs	r3, #0
 8011996:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8011998:	79fb      	ldrb	r3, [r7, #7]
}  
 801199a:	4618      	mov	r0, r3
 801199c:	3708      	adds	r7, #8
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	40021800 	.word	0x40021800

080119a8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80119b0:	f000 fa82 	bl	8011eb8 <osKernelGetTickCount>
 80119b4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80119b6:	e006      	b.n	80119c6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80119b8:	f7ff ff8a 	bl	80118d0 <BSP_SD_GetCardState>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d101      	bne.n	80119c6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80119c2:	2300      	movs	r3, #0
 80119c4:	e009      	b.n	80119da <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80119c6:	f000 fa77 	bl	8011eb8 <osKernelGetTickCount>
 80119ca:	4602      	mov	r2, r0
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d8f0      	bhi.n	80119b8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80119d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3710      	adds	r7, #16
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
	...

080119e4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	4603      	mov	r3, r0
 80119ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80119ee:	4b0b      	ldr	r3, [pc, #44]	; (8011a1c <SD_CheckStatus+0x38>)
 80119f0:	2201      	movs	r2, #1
 80119f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80119f4:	f7ff ff6c 	bl	80118d0 <BSP_SD_GetCardState>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d107      	bne.n	8011a0e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80119fe:	4b07      	ldr	r3, [pc, #28]	; (8011a1c <SD_CheckStatus+0x38>)
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	f023 0301 	bic.w	r3, r3, #1
 8011a08:	b2da      	uxtb	r2, r3
 8011a0a:	4b04      	ldr	r3, [pc, #16]	; (8011a1c <SD_CheckStatus+0x38>)
 8011a0c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011a0e:	4b03      	ldr	r3, [pc, #12]	; (8011a1c <SD_CheckStatus+0x38>)
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	b2db      	uxtb	r3, r3
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3708      	adds	r7, #8
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	200000b9 	.word	0x200000b9

08011a20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	4603      	mov	r3, r0
 8011a28:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8011a2a:	4b1c      	ldr	r3, [pc, #112]	; (8011a9c <SD_initialize+0x7c>)
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8011a30:	f000 f9ea 	bl	8011e08 <osKernelGetState>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b02      	cmp	r3, #2
 8011a38:	d129      	bne.n	8011a8e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8011a3a:	f7ff feef 	bl	801181c <BSP_SD_Init>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d107      	bne.n	8011a54 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8011a44:	79fb      	ldrb	r3, [r7, #7]
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7ff ffcc 	bl	80119e4 <SD_CheckStatus>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	461a      	mov	r2, r3
 8011a50:	4b12      	ldr	r3, [pc, #72]	; (8011a9c <SD_initialize+0x7c>)
 8011a52:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011a54:	4b11      	ldr	r3, [pc, #68]	; (8011a9c <SD_initialize+0x7c>)
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	b2db      	uxtb	r3, r3
 8011a5a:	2b01      	cmp	r3, #1
 8011a5c:	d017      	beq.n	8011a8e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8011a5e:	4b10      	ldr	r3, [pc, #64]	; (8011aa0 <SD_initialize+0x80>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d107      	bne.n	8011a76 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8011a66:	2200      	movs	r2, #0
 8011a68:	2102      	movs	r1, #2
 8011a6a:	200a      	movs	r0, #10
 8011a6c:	f000 fb20 	bl	80120b0 <osMessageQueueNew>
 8011a70:	4602      	mov	r2, r0
 8011a72:	4b0b      	ldr	r3, [pc, #44]	; (8011aa0 <SD_initialize+0x80>)
 8011a74:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 8011a76:	4b0a      	ldr	r3, [pc, #40]	; (8011aa0 <SD_initialize+0x80>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d107      	bne.n	8011a8e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8011a7e:	4b07      	ldr	r3, [pc, #28]	; (8011a9c <SD_initialize+0x7c>)
 8011a80:	781b      	ldrb	r3, [r3, #0]
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	f043 0301 	orr.w	r3, r3, #1
 8011a88:	b2da      	uxtb	r2, r3
 8011a8a:	4b04      	ldr	r3, [pc, #16]	; (8011a9c <SD_initialize+0x7c>)
 8011a8c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8011a8e:	4b03      	ldr	r3, [pc, #12]	; (8011a9c <SD_initialize+0x7c>)
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	b2db      	uxtb	r3, r3
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	200000b9 	.word	0x200000b9
 8011aa0:	200009c4 	.word	0x200009c4

08011aa4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	4603      	mov	r3, r0
 8011aac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011aae:	79fb      	ldrb	r3, [r7, #7]
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f7ff ff97 	bl	80119e4 <SD_CheckStatus>
 8011ab6:	4603      	mov	r3, r0
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3708      	adds	r7, #8
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b088      	sub	sp, #32
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60b9      	str	r1, [r7, #8]
 8011ac8:	607a      	str	r2, [r7, #4]
 8011aca:	603b      	str	r3, [r7, #0]
 8011acc:	4603      	mov	r3, r0
 8011ace:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011ad4:	f247 5030 	movw	r0, #30000	; 0x7530
 8011ad8:	f7ff ff66 	bl	80119a8 <SD_CheckStatusWithTimeout>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	da01      	bge.n	8011ae6 <SD_read+0x26>
  {
    return res;
 8011ae2:	7ffb      	ldrb	r3, [r7, #31]
 8011ae4:	e02f      	b.n	8011b46 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011ae6:	683a      	ldr	r2, [r7, #0]
 8011ae8:	6879      	ldr	r1, [r7, #4]
 8011aea:	68b8      	ldr	r0, [r7, #8]
 8011aec:	f7ff febc 	bl	8011868 <BSP_SD_ReadBlocks_DMA>
 8011af0:	4603      	mov	r3, r0
 8011af2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8011af4:	7fbb      	ldrb	r3, [r7, #30]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d124      	bne.n	8011b44 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8011afa:	4b15      	ldr	r3, [pc, #84]	; (8011b50 <SD_read+0x90>)
 8011afc:	6818      	ldr	r0, [r3, #0]
 8011afe:	f107 0112 	add.w	r1, r7, #18
 8011b02:	f247 5330 	movw	r3, #30000	; 0x7530
 8011b06:	2200      	movs	r2, #0
 8011b08:	f000 fbcc 	bl	80122a4 <osMessageQueueGet>
 8011b0c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d117      	bne.n	8011b44 <SD_read+0x84>
 8011b14:	8a7b      	ldrh	r3, [r7, #18]
 8011b16:	2b01      	cmp	r3, #1
 8011b18:	d114      	bne.n	8011b44 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8011b1a:	f000 f9cd 	bl	8011eb8 <osKernelGetTickCount>
 8011b1e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8011b20:	e007      	b.n	8011b32 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011b22:	f7ff fed5 	bl	80118d0 <BSP_SD_GetCardState>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d102      	bne.n	8011b32 <SD_read+0x72>
              {
                res = RES_OK;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8011b30:	e008      	b.n	8011b44 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8011b32:	f000 f9c1 	bl	8011eb8 <osKernelGetTickCount>
 8011b36:	4602      	mov	r2, r0
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d9ee      	bls.n	8011b22 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8011b44:	7ffb      	ldrb	r3, [r7, #31]
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3720      	adds	r7, #32
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	200009c4 	.word	0x200009c4

08011b54 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b088      	sub	sp, #32
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60b9      	str	r1, [r7, #8]
 8011b5c:	607a      	str	r2, [r7, #4]
 8011b5e:	603b      	str	r3, [r7, #0]
 8011b60:	4603      	mov	r3, r0
 8011b62:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011b64:	2301      	movs	r3, #1
 8011b66:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011b68:	f247 5030 	movw	r0, #30000	; 0x7530
 8011b6c:	f7ff ff1c 	bl	80119a8 <SD_CheckStatusWithTimeout>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	da01      	bge.n	8011b7a <SD_write+0x26>
  {
    return res;
 8011b76:	7ffb      	ldrb	r3, [r7, #31]
 8011b78:	e02d      	b.n	8011bd6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011b7a:	683a      	ldr	r2, [r7, #0]
 8011b7c:	6879      	ldr	r1, [r7, #4]
 8011b7e:	68b8      	ldr	r0, [r7, #8]
 8011b80:	f7ff fe8c 	bl	801189c <BSP_SD_WriteBlocks_DMA>
 8011b84:	4603      	mov	r3, r0
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d124      	bne.n	8011bd4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8011b8a:	4b15      	ldr	r3, [pc, #84]	; (8011be0 <SD_write+0x8c>)
 8011b8c:	6818      	ldr	r0, [r3, #0]
 8011b8e:	f107 0112 	add.w	r1, r7, #18
 8011b92:	f247 5330 	movw	r3, #30000	; 0x7530
 8011b96:	2200      	movs	r2, #0
 8011b98:	f000 fb84 	bl	80122a4 <osMessageQueueGet>
 8011b9c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8011b9e:	69bb      	ldr	r3, [r7, #24]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d117      	bne.n	8011bd4 <SD_write+0x80>
 8011ba4:	8a7b      	ldrh	r3, [r7, #18]
 8011ba6:	2b02      	cmp	r3, #2
 8011ba8:	d114      	bne.n	8011bd4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8011baa:	f000 f985 	bl	8011eb8 <osKernelGetTickCount>
 8011bae:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8011bb0:	e007      	b.n	8011bc2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011bb2:	f7ff fe8d 	bl	80118d0 <BSP_SD_GetCardState>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d102      	bne.n	8011bc2 <SD_write+0x6e>
          {
            res = RES_OK;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	77fb      	strb	r3, [r7, #31]
            break;
 8011bc0:	e008      	b.n	8011bd4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8011bc2:	f000 f979 	bl	8011eb8 <osKernelGetTickCount>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	1ad3      	subs	r3, r2, r3
 8011bcc:	f247 522f 	movw	r2, #29999	; 0x752f
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	d9ee      	bls.n	8011bb2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8011bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3720      	adds	r7, #32
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	200009c4 	.word	0x200009c4

08011be4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b08c      	sub	sp, #48	; 0x30
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	4603      	mov	r3, r0
 8011bec:	603a      	str	r2, [r7, #0]
 8011bee:	71fb      	strb	r3, [r7, #7]
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011bfa:	4b25      	ldr	r3, [pc, #148]	; (8011c90 <SD_ioctl+0xac>)
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	f003 0301 	and.w	r3, r3, #1
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d001      	beq.n	8011c0c <SD_ioctl+0x28>
 8011c08:	2303      	movs	r3, #3
 8011c0a:	e03c      	b.n	8011c86 <SD_ioctl+0xa2>

  switch (cmd)
 8011c0c:	79bb      	ldrb	r3, [r7, #6]
 8011c0e:	2b03      	cmp	r3, #3
 8011c10:	d834      	bhi.n	8011c7c <SD_ioctl+0x98>
 8011c12:	a201      	add	r2, pc, #4	; (adr r2, 8011c18 <SD_ioctl+0x34>)
 8011c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c18:	08011c29 	.word	0x08011c29
 8011c1c:	08011c31 	.word	0x08011c31
 8011c20:	08011c49 	.word	0x08011c49
 8011c24:	08011c63 	.word	0x08011c63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011c2e:	e028      	b.n	8011c82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011c30:	f107 030c 	add.w	r3, r7, #12
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7ff fe5b 	bl	80118f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011c40:	2300      	movs	r3, #0
 8011c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011c46:	e01c      	b.n	8011c82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011c48:	f107 030c 	add.w	r3, r7, #12
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7ff fe4f 	bl	80118f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c54:	b29a      	uxth	r2, r3
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011c60:	e00f      	b.n	8011c82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011c62:	f107 030c 	add.w	r3, r7, #12
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7ff fe42 	bl	80118f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6e:	0a5a      	lsrs	r2, r3, #9
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011c74:	2300      	movs	r3, #0
 8011c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011c7a:	e002      	b.n	8011c82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011c7c:	2304      	movs	r3, #4
 8011c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3730      	adds	r7, #48	; 0x30
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	200000b9 	.word	0x200000b9

08011c94 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b082      	sub	sp, #8
 8011c98:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8011c9a:	2302      	movs	r3, #2
 8011c9c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8011c9e:	4b05      	ldr	r3, [pc, #20]	; (8011cb4 <BSP_SD_WriteCpltCallback+0x20>)
 8011ca0:	6818      	ldr	r0, [r3, #0]
 8011ca2:	1db9      	adds	r1, r7, #6
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	f000 fa88 	bl	80121bc <osMessageQueuePut>
#endif
}
 8011cac:	bf00      	nop
 8011cae:	3708      	adds	r7, #8
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}
 8011cb4:	200009c4 	.word	0x200009c4

08011cb8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b082      	sub	sp, #8
 8011cbc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8011cc2:	4b05      	ldr	r3, [pc, #20]	; (8011cd8 <BSP_SD_ReadCpltCallback+0x20>)
 8011cc4:	6818      	ldr	r0, [r3, #0]
 8011cc6:	1db9      	adds	r1, r7, #6
 8011cc8:	2300      	movs	r3, #0
 8011cca:	2200      	movs	r2, #0
 8011ccc:	f000 fa76 	bl	80121bc <osMessageQueuePut>
#endif
}
 8011cd0:	bf00      	nop
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	200009c4 	.word	0x200009c4

08011cdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b087      	sub	sp, #28
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011cea:	2301      	movs	r3, #1
 8011cec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011cf2:	4b1f      	ldr	r3, [pc, #124]	; (8011d70 <FATFS_LinkDriverEx+0x94>)
 8011cf4:	7a5b      	ldrb	r3, [r3, #9]
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d131      	bne.n	8011d60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011cfc:	4b1c      	ldr	r3, [pc, #112]	; (8011d70 <FATFS_LinkDriverEx+0x94>)
 8011cfe:	7a5b      	ldrb	r3, [r3, #9]
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	461a      	mov	r2, r3
 8011d04:	4b1a      	ldr	r3, [pc, #104]	; (8011d70 <FATFS_LinkDriverEx+0x94>)
 8011d06:	2100      	movs	r1, #0
 8011d08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011d0a:	4b19      	ldr	r3, [pc, #100]	; (8011d70 <FATFS_LinkDriverEx+0x94>)
 8011d0c:	7a5b      	ldrb	r3, [r3, #9]
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	4a17      	ldr	r2, [pc, #92]	; (8011d70 <FATFS_LinkDriverEx+0x94>)
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	4413      	add	r3, r2
 8011d16:	68fa      	ldr	r2, [r7, #12]
 8011d18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011d1a:	4b15      	ldr	r3, [pc, #84]	; (8011d70 <FATFS_LinkDriverEx+0x94>)
 8011d1c:	7a5b      	ldrb	r3, [r3, #9]
 8011d1e:	b2db      	uxtb	r3, r3
 8011d20:	461a      	mov	r2, r3
 8011d22:	4b13      	ldr	r3, [pc, #76]	; (8011d70 <FATFS_LinkDriverEx+0x94>)
 8011d24:	4413      	add	r3, r2
 8011d26:	79fa      	ldrb	r2, [r7, #7]
 8011d28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011d2a:	4b11      	ldr	r3, [pc, #68]	; (8011d70 <FATFS_LinkDriverEx+0x94>)
 8011d2c:	7a5b      	ldrb	r3, [r3, #9]
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	1c5a      	adds	r2, r3, #1
 8011d32:	b2d1      	uxtb	r1, r2
 8011d34:	4a0e      	ldr	r2, [pc, #56]	; (8011d70 <FATFS_LinkDriverEx+0x94>)
 8011d36:	7251      	strb	r1, [r2, #9]
 8011d38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011d3a:	7dbb      	ldrb	r3, [r7, #22]
 8011d3c:	3330      	adds	r3, #48	; 0x30
 8011d3e:	b2da      	uxtb	r2, r3
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	3301      	adds	r3, #1
 8011d48:	223a      	movs	r2, #58	; 0x3a
 8011d4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	3302      	adds	r3, #2
 8011d50:	222f      	movs	r2, #47	; 0x2f
 8011d52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	3303      	adds	r3, #3
 8011d58:	2200      	movs	r2, #0
 8011d5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	371c      	adds	r7, #28
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	200009c8 	.word	0x200009c8

08011d74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011d7e:	2200      	movs	r2, #0
 8011d80:	6839      	ldr	r1, [r7, #0]
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f7ff ffaa 	bl	8011cdc <FATFS_LinkDriverEx>
 8011d88:	4603      	mov	r3, r0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3708      	adds	r7, #8
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011d92:	b480      	push	{r7}
 8011d94:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011d96:	bf00      	nop
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011da0:	b480      	push	{r7}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011da6:	f3ef 8305 	mrs	r3, IPSR
 8011daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8011dac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d10f      	bne.n	8011dd2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011db2:	f3ef 8310 	mrs	r3, PRIMASK
 8011db6:	607b      	str	r3, [r7, #4]
  return(result);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d105      	bne.n	8011dca <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8011dc2:	603b      	str	r3, [r7, #0]
  return(result);
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d007      	beq.n	8011dda <osKernelInitialize+0x3a>
 8011dca:	4b0e      	ldr	r3, [pc, #56]	; (8011e04 <osKernelInitialize+0x64>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b02      	cmp	r3, #2
 8011dd0:	d103      	bne.n	8011dda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011dd2:	f06f 0305 	mvn.w	r3, #5
 8011dd6:	60fb      	str	r3, [r7, #12]
 8011dd8:	e00c      	b.n	8011df4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011dda:	4b0a      	ldr	r3, [pc, #40]	; (8011e04 <osKernelInitialize+0x64>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d105      	bne.n	8011dee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011de2:	4b08      	ldr	r3, [pc, #32]	; (8011e04 <osKernelInitialize+0x64>)
 8011de4:	2201      	movs	r2, #1
 8011de6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011de8:	2300      	movs	r3, #0
 8011dea:	60fb      	str	r3, [r7, #12]
 8011dec:	e002      	b.n	8011df4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011dee:	f04f 33ff 	mov.w	r3, #4294967295
 8011df2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011df4:	68fb      	ldr	r3, [r7, #12]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3714      	adds	r7, #20
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop
 8011e04:	200009d4 	.word	0x200009d4

08011e08 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b082      	sub	sp, #8
 8011e0c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8011e0e:	f001 ff4f 	bl	8013cb0 <xTaskGetSchedulerState>
 8011e12:	4603      	mov	r3, r0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d004      	beq.n	8011e22 <osKernelGetState+0x1a>
 8011e18:	2b02      	cmp	r3, #2
 8011e1a:	d105      	bne.n	8011e28 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8011e1c:	2302      	movs	r3, #2
 8011e1e:	607b      	str	r3, [r7, #4]
      break;
 8011e20:	e00c      	b.n	8011e3c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8011e22:	2303      	movs	r3, #3
 8011e24:	607b      	str	r3, [r7, #4]
      break;
 8011e26:	e009      	b.n	8011e3c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8011e28:	4b07      	ldr	r3, [pc, #28]	; (8011e48 <osKernelGetState+0x40>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	d102      	bne.n	8011e36 <osKernelGetState+0x2e>
        state = osKernelReady;
 8011e30:	2301      	movs	r3, #1
 8011e32:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011e34:	e001      	b.n	8011e3a <osKernelGetState+0x32>
        state = osKernelInactive;
 8011e36:	2300      	movs	r3, #0
 8011e38:	607b      	str	r3, [r7, #4]
      break;
 8011e3a:	bf00      	nop
  }

  return (state);
 8011e3c:	687b      	ldr	r3, [r7, #4]
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3708      	adds	r7, #8
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	200009d4 	.word	0x200009d4

08011e4c <osKernelStart>:

osStatus_t osKernelStart (void) {
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e52:	f3ef 8305 	mrs	r3, IPSR
 8011e56:	60bb      	str	r3, [r7, #8]
  return(result);
 8011e58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d10f      	bne.n	8011e7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8011e62:	607b      	str	r3, [r7, #4]
  return(result);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d105      	bne.n	8011e76 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8011e6e:	603b      	str	r3, [r7, #0]
  return(result);
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d007      	beq.n	8011e86 <osKernelStart+0x3a>
 8011e76:	4b0f      	ldr	r3, [pc, #60]	; (8011eb4 <osKernelStart+0x68>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2b02      	cmp	r3, #2
 8011e7c:	d103      	bne.n	8011e86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8011e7e:	f06f 0305 	mvn.w	r3, #5
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	e010      	b.n	8011ea8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011e86:	4b0b      	ldr	r3, [pc, #44]	; (8011eb4 <osKernelStart+0x68>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	d109      	bne.n	8011ea2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011e8e:	f7ff ff80 	bl	8011d92 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011e92:	4b08      	ldr	r3, [pc, #32]	; (8011eb4 <osKernelStart+0x68>)
 8011e94:	2202      	movs	r2, #2
 8011e96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011e98:	f001 fac2 	bl	8013420 <vTaskStartScheduler>
      stat = osOK;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	60fb      	str	r3, [r7, #12]
 8011ea0:	e002      	b.n	8011ea8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3710      	adds	r7, #16
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	200009d4 	.word	0x200009d4

08011eb8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ebe:	f3ef 8305 	mrs	r3, IPSR
 8011ec2:	60bb      	str	r3, [r7, #8]
  return(result);
 8011ec4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d10f      	bne.n	8011eea <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011eca:	f3ef 8310 	mrs	r3, PRIMASK
 8011ece:	607b      	str	r3, [r7, #4]
  return(result);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d105      	bne.n	8011ee2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8011eda:	603b      	str	r3, [r7, #0]
  return(result);
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d007      	beq.n	8011ef2 <osKernelGetTickCount+0x3a>
 8011ee2:	4b08      	ldr	r3, [pc, #32]	; (8011f04 <osKernelGetTickCount+0x4c>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b02      	cmp	r3, #2
 8011ee8:	d103      	bne.n	8011ef2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8011eea:	f001 fbb7 	bl	801365c <xTaskGetTickCountFromISR>
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	e002      	b.n	8011ef8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8011ef2:	f001 fba3 	bl	801363c <xTaskGetTickCount>
 8011ef6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
 8011f02:	bf00      	nop
 8011f04:	200009d4 	.word	0x200009d4

08011f08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b090      	sub	sp, #64	; 0x40
 8011f0c:	af04      	add	r7, sp, #16
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011f14:	2300      	movs	r3, #0
 8011f16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f18:	f3ef 8305 	mrs	r3, IPSR
 8011f1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8011f1e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f040 808f 	bne.w	8012044 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f26:	f3ef 8310 	mrs	r3, PRIMASK
 8011f2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8011f2c:	69bb      	ldr	r3, [r7, #24]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d105      	bne.n	8011f3e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f32:	f3ef 8311 	mrs	r3, BASEPRI
 8011f36:	617b      	str	r3, [r7, #20]
  return(result);
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d003      	beq.n	8011f46 <osThreadNew+0x3e>
 8011f3e:	4b44      	ldr	r3, [pc, #272]	; (8012050 <osThreadNew+0x148>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	2b02      	cmp	r3, #2
 8011f44:	d07e      	beq.n	8012044 <osThreadNew+0x13c>
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d07b      	beq.n	8012044 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011f4c:	2380      	movs	r3, #128	; 0x80
 8011f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011f50:	2318      	movs	r3, #24
 8011f52:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011f54:	2300      	movs	r3, #0
 8011f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011f58:	f04f 33ff 	mov.w	r3, #4294967295
 8011f5c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d045      	beq.n	8011ff0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d002      	beq.n	8011f72 <osThreadNew+0x6a>
        name = attr->name;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	699b      	ldr	r3, [r3, #24]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d002      	beq.n	8011f80 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	699b      	ldr	r3, [r3, #24]
 8011f7e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d008      	beq.n	8011f98 <osThreadNew+0x90>
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	2b38      	cmp	r3, #56	; 0x38
 8011f8a:	d805      	bhi.n	8011f98 <osThreadNew+0x90>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	f003 0301 	and.w	r3, r3, #1
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d001      	beq.n	8011f9c <osThreadNew+0x94>
        return (NULL);
 8011f98:	2300      	movs	r3, #0
 8011f9a:	e054      	b.n	8012046 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	695b      	ldr	r3, [r3, #20]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d003      	beq.n	8011fac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	695b      	ldr	r3, [r3, #20]
 8011fa8:	089b      	lsrs	r3, r3, #2
 8011faa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	689b      	ldr	r3, [r3, #8]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d00e      	beq.n	8011fd2 <osThreadNew+0xca>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	2b5b      	cmp	r3, #91	; 0x5b
 8011fba:	d90a      	bls.n	8011fd2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d006      	beq.n	8011fd2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	695b      	ldr	r3, [r3, #20]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d002      	beq.n	8011fd2 <osThreadNew+0xca>
        mem = 1;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	623b      	str	r3, [r7, #32]
 8011fd0:	e010      	b.n	8011ff4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10c      	bne.n	8011ff4 <osThreadNew+0xec>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d108      	bne.n	8011ff4 <osThreadNew+0xec>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	691b      	ldr	r3, [r3, #16]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d104      	bne.n	8011ff4 <osThreadNew+0xec>
          mem = 0;
 8011fea:	2300      	movs	r3, #0
 8011fec:	623b      	str	r3, [r7, #32]
 8011fee:	e001      	b.n	8011ff4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011ff4:	6a3b      	ldr	r3, [r7, #32]
 8011ff6:	2b01      	cmp	r3, #1
 8011ff8:	d110      	bne.n	801201c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012002:	9202      	str	r2, [sp, #8]
 8012004:	9301      	str	r3, [sp, #4]
 8012006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012008:	9300      	str	r3, [sp, #0]
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801200e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	f001 f833 	bl	801307c <xTaskCreateStatic>
 8012016:	4603      	mov	r3, r0
 8012018:	613b      	str	r3, [r7, #16]
 801201a:	e013      	b.n	8012044 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 801201c:	6a3b      	ldr	r3, [r7, #32]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d110      	bne.n	8012044 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012024:	b29a      	uxth	r2, r3
 8012026:	f107 0310 	add.w	r3, r7, #16
 801202a:	9301      	str	r3, [sp, #4]
 801202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202e:	9300      	str	r3, [sp, #0]
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012034:	68f8      	ldr	r0, [r7, #12]
 8012036:	f001 f87b 	bl	8013130 <xTaskCreate>
 801203a:	4603      	mov	r3, r0
 801203c:	2b01      	cmp	r3, #1
 801203e:	d001      	beq.n	8012044 <osThreadNew+0x13c>
          hTask = NULL;
 8012040:	2300      	movs	r3, #0
 8012042:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012044:	693b      	ldr	r3, [r7, #16]
}
 8012046:	4618      	mov	r0, r3
 8012048:	3730      	adds	r7, #48	; 0x30
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
 801204e:	bf00      	nop
 8012050:	200009d4 	.word	0x200009d4

08012054 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8012054:	b580      	push	{r7, lr}
 8012056:	b086      	sub	sp, #24
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801205c:	f3ef 8305 	mrs	r3, IPSR
 8012060:	613b      	str	r3, [r7, #16]
  return(result);
 8012062:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012064:	2b00      	cmp	r3, #0
 8012066:	d10f      	bne.n	8012088 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012068:	f3ef 8310 	mrs	r3, PRIMASK
 801206c:	60fb      	str	r3, [r7, #12]
  return(result);
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d105      	bne.n	8012080 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012074:	f3ef 8311 	mrs	r3, BASEPRI
 8012078:	60bb      	str	r3, [r7, #8]
  return(result);
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d007      	beq.n	8012090 <osDelay+0x3c>
 8012080:	4b0a      	ldr	r3, [pc, #40]	; (80120ac <osDelay+0x58>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b02      	cmp	r3, #2
 8012086:	d103      	bne.n	8012090 <osDelay+0x3c>
    stat = osErrorISR;
 8012088:	f06f 0305 	mvn.w	r3, #5
 801208c:	617b      	str	r3, [r7, #20]
 801208e:	e007      	b.n	80120a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8012090:	2300      	movs	r3, #0
 8012092:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d002      	beq.n	80120a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f001 f98c 	bl	80133b8 <vTaskDelay>
    }
  }

  return (stat);
 80120a0:	697b      	ldr	r3, [r7, #20]
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3718      	adds	r7, #24
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	200009d4 	.word	0x200009d4

080120b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b08c      	sub	sp, #48	; 0x30
 80120b4:	af02      	add	r7, sp, #8
 80120b6:	60f8      	str	r0, [r7, #12]
 80120b8:	60b9      	str	r1, [r7, #8]
 80120ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80120bc:	2300      	movs	r3, #0
 80120be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120c0:	f3ef 8305 	mrs	r3, IPSR
 80120c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80120c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d170      	bne.n	80121ae <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120cc:	f3ef 8310 	mrs	r3, PRIMASK
 80120d0:	617b      	str	r3, [r7, #20]
  return(result);
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d105      	bne.n	80120e4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120d8:	f3ef 8311 	mrs	r3, BASEPRI
 80120dc:	613b      	str	r3, [r7, #16]
  return(result);
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d003      	beq.n	80120ec <osMessageQueueNew+0x3c>
 80120e4:	4b34      	ldr	r3, [pc, #208]	; (80121b8 <osMessageQueueNew+0x108>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b02      	cmp	r3, #2
 80120ea:	d060      	beq.n	80121ae <osMessageQueueNew+0xfe>
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d05d      	beq.n	80121ae <osMessageQueueNew+0xfe>
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d05a      	beq.n	80121ae <osMessageQueueNew+0xfe>
    mem = -1;
 80120f8:	f04f 33ff 	mov.w	r3, #4294967295
 80120fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d029      	beq.n	8012158 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d012      	beq.n	8012132 <osMessageQueueNew+0x82>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	2b4f      	cmp	r3, #79	; 0x4f
 8012112:	d90e      	bls.n	8012132 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012118:	2b00      	cmp	r3, #0
 801211a:	d00a      	beq.n	8012132 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	695a      	ldr	r2, [r3, #20]
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	68b9      	ldr	r1, [r7, #8]
 8012124:	fb01 f303 	mul.w	r3, r1, r3
 8012128:	429a      	cmp	r2, r3
 801212a:	d302      	bcc.n	8012132 <osMessageQueueNew+0x82>
        mem = 1;
 801212c:	2301      	movs	r3, #1
 801212e:	623b      	str	r3, [r7, #32]
 8012130:	e014      	b.n	801215c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	689b      	ldr	r3, [r3, #8]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d110      	bne.n	801215c <osMessageQueueNew+0xac>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	68db      	ldr	r3, [r3, #12]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d10c      	bne.n	801215c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012146:	2b00      	cmp	r3, #0
 8012148:	d108      	bne.n	801215c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	695b      	ldr	r3, [r3, #20]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d104      	bne.n	801215c <osMessageQueueNew+0xac>
          mem = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	623b      	str	r3, [r7, #32]
 8012156:	e001      	b.n	801215c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012158:	2300      	movs	r3, #0
 801215a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801215c:	6a3b      	ldr	r3, [r7, #32]
 801215e:	2b01      	cmp	r3, #1
 8012160:	d10c      	bne.n	801217c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	691a      	ldr	r2, [r3, #16]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6899      	ldr	r1, [r3, #8]
 801216a:	2300      	movs	r3, #0
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	460b      	mov	r3, r1
 8012170:	68b9      	ldr	r1, [r7, #8]
 8012172:	68f8      	ldr	r0, [r7, #12]
 8012174:	f000 fa58 	bl	8012628 <xQueueGenericCreateStatic>
 8012178:	6278      	str	r0, [r7, #36]	; 0x24
 801217a:	e008      	b.n	801218e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 801217c:	6a3b      	ldr	r3, [r7, #32]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d105      	bne.n	801218e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012182:	2200      	movs	r2, #0
 8012184:	68b9      	ldr	r1, [r7, #8]
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	f000 fac1 	bl	801270e <xQueueGenericCreate>
 801218c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012190:	2b00      	cmp	r3, #0
 8012192:	d00c      	beq.n	80121ae <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d003      	beq.n	80121a2 <osMessageQueueNew+0xf2>
        name = attr->name;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	61fb      	str	r3, [r7, #28]
 80121a0:	e001      	b.n	80121a6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80121a2:	2300      	movs	r3, #0
 80121a4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80121a6:	69f9      	ldr	r1, [r7, #28]
 80121a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121aa:	f000 ff0b 	bl	8012fc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3728      	adds	r7, #40	; 0x28
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	200009d4 	.word	0x200009d4

080121bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80121bc:	b580      	push	{r7, lr}
 80121be:	b08a      	sub	sp, #40	; 0x28
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	60f8      	str	r0, [r7, #12]
 80121c4:	60b9      	str	r1, [r7, #8]
 80121c6:	603b      	str	r3, [r7, #0]
 80121c8:	4613      	mov	r3, r2
 80121ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80121d0:	2300      	movs	r3, #0
 80121d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121d4:	f3ef 8305 	mrs	r3, IPSR
 80121d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80121da:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d10f      	bne.n	8012200 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121e0:	f3ef 8310 	mrs	r3, PRIMASK
 80121e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80121e6:	69bb      	ldr	r3, [r7, #24]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d105      	bne.n	80121f8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80121ec:	f3ef 8311 	mrs	r3, BASEPRI
 80121f0:	617b      	str	r3, [r7, #20]
  return(result);
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d02c      	beq.n	8012252 <osMessageQueuePut+0x96>
 80121f8:	4b28      	ldr	r3, [pc, #160]	; (801229c <osMessageQueuePut+0xe0>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	2b02      	cmp	r3, #2
 80121fe:	d128      	bne.n	8012252 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012200:	6a3b      	ldr	r3, [r7, #32]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d005      	beq.n	8012212 <osMessageQueuePut+0x56>
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d002      	beq.n	8012212 <osMessageQueuePut+0x56>
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d003      	beq.n	801221a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8012212:	f06f 0303 	mvn.w	r3, #3
 8012216:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012218:	e039      	b.n	801228e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801221a:	2300      	movs	r3, #0
 801221c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801221e:	f107 0210 	add.w	r2, r7, #16
 8012222:	2300      	movs	r3, #0
 8012224:	68b9      	ldr	r1, [r7, #8]
 8012226:	6a38      	ldr	r0, [r7, #32]
 8012228:	f000 fbce 	bl	80129c8 <xQueueGenericSendFromISR>
 801222c:	4603      	mov	r3, r0
 801222e:	2b01      	cmp	r3, #1
 8012230:	d003      	beq.n	801223a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8012232:	f06f 0302 	mvn.w	r3, #2
 8012236:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012238:	e029      	b.n	801228e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d026      	beq.n	801228e <osMessageQueuePut+0xd2>
 8012240:	4b17      	ldr	r3, [pc, #92]	; (80122a0 <osMessageQueuePut+0xe4>)
 8012242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012246:	601a      	str	r2, [r3, #0]
 8012248:	f3bf 8f4f 	dsb	sy
 801224c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012250:	e01d      	b.n	801228e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012252:	6a3b      	ldr	r3, [r7, #32]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d002      	beq.n	801225e <osMessageQueuePut+0xa2>
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d103      	bne.n	8012266 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801225e:	f06f 0303 	mvn.w	r3, #3
 8012262:	627b      	str	r3, [r7, #36]	; 0x24
 8012264:	e014      	b.n	8012290 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012266:	2300      	movs	r3, #0
 8012268:	683a      	ldr	r2, [r7, #0]
 801226a:	68b9      	ldr	r1, [r7, #8]
 801226c:	6a38      	ldr	r0, [r7, #32]
 801226e:	f000 fab1 	bl	80127d4 <xQueueGenericSend>
 8012272:	4603      	mov	r3, r0
 8012274:	2b01      	cmp	r3, #1
 8012276:	d00b      	beq.n	8012290 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d003      	beq.n	8012286 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801227e:	f06f 0301 	mvn.w	r3, #1
 8012282:	627b      	str	r3, [r7, #36]	; 0x24
 8012284:	e004      	b.n	8012290 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012286:	f06f 0302 	mvn.w	r3, #2
 801228a:	627b      	str	r3, [r7, #36]	; 0x24
 801228c:	e000      	b.n	8012290 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801228e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012292:	4618      	mov	r0, r3
 8012294:	3728      	adds	r7, #40	; 0x28
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	200009d4 	.word	0x200009d4
 80122a0:	e000ed04 	.word	0xe000ed04

080122a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b08a      	sub	sp, #40	; 0x28
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	60b9      	str	r1, [r7, #8]
 80122ae:	607a      	str	r2, [r7, #4]
 80122b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122ba:	f3ef 8305 	mrs	r3, IPSR
 80122be:	61fb      	str	r3, [r7, #28]
  return(result);
 80122c0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d10f      	bne.n	80122e6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122c6:	f3ef 8310 	mrs	r3, PRIMASK
 80122ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d105      	bne.n	80122de <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80122d2:	f3ef 8311 	mrs	r3, BASEPRI
 80122d6:	617b      	str	r3, [r7, #20]
  return(result);
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d02c      	beq.n	8012338 <osMessageQueueGet+0x94>
 80122de:	4b28      	ldr	r3, [pc, #160]	; (8012380 <osMessageQueueGet+0xdc>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b02      	cmp	r3, #2
 80122e4:	d128      	bne.n	8012338 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80122e6:	6a3b      	ldr	r3, [r7, #32]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d005      	beq.n	80122f8 <osMessageQueueGet+0x54>
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d002      	beq.n	80122f8 <osMessageQueueGet+0x54>
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d003      	beq.n	8012300 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80122f8:	f06f 0303 	mvn.w	r3, #3
 80122fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80122fe:	e038      	b.n	8012372 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012300:	2300      	movs	r3, #0
 8012302:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012304:	f107 0310 	add.w	r3, r7, #16
 8012308:	461a      	mov	r2, r3
 801230a:	68b9      	ldr	r1, [r7, #8]
 801230c:	6a38      	ldr	r0, [r7, #32]
 801230e:	f000 fccb 	bl	8012ca8 <xQueueReceiveFromISR>
 8012312:	4603      	mov	r3, r0
 8012314:	2b01      	cmp	r3, #1
 8012316:	d003      	beq.n	8012320 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012318:	f06f 0302 	mvn.w	r3, #2
 801231c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801231e:	e028      	b.n	8012372 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d025      	beq.n	8012372 <osMessageQueueGet+0xce>
 8012326:	4b17      	ldr	r3, [pc, #92]	; (8012384 <osMessageQueueGet+0xe0>)
 8012328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801232c:	601a      	str	r2, [r3, #0]
 801232e:	f3bf 8f4f 	dsb	sy
 8012332:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012336:	e01c      	b.n	8012372 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012338:	6a3b      	ldr	r3, [r7, #32]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d002      	beq.n	8012344 <osMessageQueueGet+0xa0>
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d103      	bne.n	801234c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012344:	f06f 0303 	mvn.w	r3, #3
 8012348:	627b      	str	r3, [r7, #36]	; 0x24
 801234a:	e013      	b.n	8012374 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801234c:	683a      	ldr	r2, [r7, #0]
 801234e:	68b9      	ldr	r1, [r7, #8]
 8012350:	6a38      	ldr	r0, [r7, #32]
 8012352:	f000 fbcd 	bl	8012af0 <xQueueReceive>
 8012356:	4603      	mov	r3, r0
 8012358:	2b01      	cmp	r3, #1
 801235a:	d00b      	beq.n	8012374 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d003      	beq.n	801236a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8012362:	f06f 0301 	mvn.w	r3, #1
 8012366:	627b      	str	r3, [r7, #36]	; 0x24
 8012368:	e004      	b.n	8012374 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801236a:	f06f 0302 	mvn.w	r3, #2
 801236e:	627b      	str	r3, [r7, #36]	; 0x24
 8012370:	e000      	b.n	8012374 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012372:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012376:	4618      	mov	r0, r3
 8012378:	3728      	adds	r7, #40	; 0x28
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}
 801237e:	bf00      	nop
 8012380:	200009d4 	.word	0x200009d4
 8012384:	e000ed04 	.word	0xe000ed04

08012388 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012388:	b480      	push	{r7}
 801238a:	b085      	sub	sp, #20
 801238c:	af00      	add	r7, sp, #0
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	60b9      	str	r1, [r7, #8]
 8012392:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	4a07      	ldr	r2, [pc, #28]	; (80123b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8012398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	4a06      	ldr	r2, [pc, #24]	; (80123b8 <vApplicationGetIdleTaskMemory+0x30>)
 801239e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2280      	movs	r2, #128	; 0x80
 80123a4:	601a      	str	r2, [r3, #0]
}
 80123a6:	bf00      	nop
 80123a8:	3714      	adds	r7, #20
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr
 80123b2:	bf00      	nop
 80123b4:	200009d8 	.word	0x200009d8
 80123b8:	20000a34 	.word	0x20000a34

080123bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80123bc:	b480      	push	{r7}
 80123be:	b085      	sub	sp, #20
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	4a07      	ldr	r2, [pc, #28]	; (80123e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80123cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	4a06      	ldr	r2, [pc, #24]	; (80123ec <vApplicationGetTimerTaskMemory+0x30>)
 80123d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80123da:	601a      	str	r2, [r3, #0]
}
 80123dc:	bf00      	nop
 80123de:	3714      	adds	r7, #20
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr
 80123e8:	20000c34 	.word	0x20000c34
 80123ec:	20000c90 	.word	0x20000c90

080123f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80123f0:	b480      	push	{r7}
 80123f2:	b083      	sub	sp, #12
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f103 0208 	add.w	r2, r3, #8
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f04f 32ff 	mov.w	r2, #4294967295
 8012408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f103 0208 	add.w	r2, r3, #8
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f103 0208 	add.w	r2, r3, #8
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2200      	movs	r2, #0
 8012422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012424:	bf00      	nop
 8012426:	370c      	adds	r7, #12
 8012428:	46bd      	mov	sp, r7
 801242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242e:	4770      	bx	lr

08012430 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2200      	movs	r2, #0
 801243c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801243e:	bf00      	nop
 8012440:	370c      	adds	r7, #12
 8012442:	46bd      	mov	sp, r7
 8012444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012448:	4770      	bx	lr

0801244a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801244a:	b480      	push	{r7}
 801244c:	b085      	sub	sp, #20
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
 8012452:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	68fa      	ldr	r2, [r7, #12]
 801245e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	689a      	ldr	r2, [r3, #8]
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	689b      	ldr	r3, [r3, #8]
 801246c:	683a      	ldr	r2, [r7, #0]
 801246e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	687a      	ldr	r2, [r7, #4]
 801247a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	1c5a      	adds	r2, r3, #1
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	601a      	str	r2, [r3, #0]
}
 8012486:	bf00      	nop
 8012488:	3714      	adds	r7, #20
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr

08012492 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012492:	b480      	push	{r7}
 8012494:	b085      	sub	sp, #20
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
 801249a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124a8:	d103      	bne.n	80124b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	691b      	ldr	r3, [r3, #16]
 80124ae:	60fb      	str	r3, [r7, #12]
 80124b0:	e00c      	b.n	80124cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	3308      	adds	r3, #8
 80124b6:	60fb      	str	r3, [r7, #12]
 80124b8:	e002      	b.n	80124c0 <vListInsert+0x2e>
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	60fb      	str	r3, [r7, #12]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d2f6      	bcs.n	80124ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	685a      	ldr	r2, [r3, #4]
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	683a      	ldr	r2, [r7, #0]
 80124da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	68fa      	ldr	r2, [r7, #12]
 80124e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	683a      	ldr	r2, [r7, #0]
 80124e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	687a      	ldr	r2, [r7, #4]
 80124ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	1c5a      	adds	r2, r3, #1
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	601a      	str	r2, [r3, #0]
}
 80124f8:	bf00      	nop
 80124fa:	3714      	adds	r7, #20
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr

08012504 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012504:	b480      	push	{r7}
 8012506:	b085      	sub	sp, #20
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	691b      	ldr	r3, [r3, #16]
 8012510:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	6892      	ldr	r2, [r2, #8]
 801251a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	689b      	ldr	r3, [r3, #8]
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	6852      	ldr	r2, [r2, #4]
 8012524:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	429a      	cmp	r2, r3
 801252e:	d103      	bne.n	8012538 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	689a      	ldr	r2, [r3, #8]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2200      	movs	r2, #0
 801253c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	1e5a      	subs	r2, r3, #1
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	681b      	ldr	r3, [r3, #0]
}
 801254c:	4618      	mov	r0, r3
 801254e:	3714      	adds	r7, #20
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr

08012558 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b084      	sub	sp, #16
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d109      	bne.n	8012580 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801256c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012570:	f383 8811 	msr	BASEPRI, r3
 8012574:	f3bf 8f6f 	isb	sy
 8012578:	f3bf 8f4f 	dsb	sy
 801257c:	60bb      	str	r3, [r7, #8]
 801257e:	e7fe      	b.n	801257e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012580:	f002 f93c 	bl	80147fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801258c:	68f9      	ldr	r1, [r7, #12]
 801258e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012590:	fb01 f303 	mul.w	r3, r1, r3
 8012594:	441a      	add	r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2200      	movs	r2, #0
 801259e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	681a      	ldr	r2, [r3, #0]
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681a      	ldr	r2, [r3, #0]
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125b0:	3b01      	subs	r3, #1
 80125b2:	68f9      	ldr	r1, [r7, #12]
 80125b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80125b6:	fb01 f303 	mul.w	r3, r1, r3
 80125ba:	441a      	add	r2, r3
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	22ff      	movs	r2, #255	; 0xff
 80125c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	22ff      	movs	r2, #255	; 0xff
 80125cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d114      	bne.n	8012600 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	691b      	ldr	r3, [r3, #16]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d01a      	beq.n	8012614 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	3310      	adds	r3, #16
 80125e2:	4618      	mov	r0, r3
 80125e4:	f001 f9ae 	bl	8013944 <xTaskRemoveFromEventList>
 80125e8:	4603      	mov	r3, r0
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d012      	beq.n	8012614 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80125ee:	4b0d      	ldr	r3, [pc, #52]	; (8012624 <xQueueGenericReset+0xcc>)
 80125f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125f4:	601a      	str	r2, [r3, #0]
 80125f6:	f3bf 8f4f 	dsb	sy
 80125fa:	f3bf 8f6f 	isb	sy
 80125fe:	e009      	b.n	8012614 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	3310      	adds	r3, #16
 8012604:	4618      	mov	r0, r3
 8012606:	f7ff fef3 	bl	80123f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	3324      	adds	r3, #36	; 0x24
 801260e:	4618      	mov	r0, r3
 8012610:	f7ff feee 	bl	80123f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012614:	f002 f920 	bl	8014858 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012618:	2301      	movs	r3, #1
}
 801261a:	4618      	mov	r0, r3
 801261c:	3710      	adds	r7, #16
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
 8012622:	bf00      	nop
 8012624:	e000ed04 	.word	0xe000ed04

08012628 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012628:	b580      	push	{r7, lr}
 801262a:	b08e      	sub	sp, #56	; 0x38
 801262c:	af02      	add	r7, sp, #8
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
 8012634:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d109      	bne.n	8012650 <xQueueGenericCreateStatic+0x28>
 801263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012640:	f383 8811 	msr	BASEPRI, r3
 8012644:	f3bf 8f6f 	isb	sy
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	62bb      	str	r3, [r7, #40]	; 0x28
 801264e:	e7fe      	b.n	801264e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d109      	bne.n	801266a <xQueueGenericCreateStatic+0x42>
 8012656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265a:	f383 8811 	msr	BASEPRI, r3
 801265e:	f3bf 8f6f 	isb	sy
 8012662:	f3bf 8f4f 	dsb	sy
 8012666:	627b      	str	r3, [r7, #36]	; 0x24
 8012668:	e7fe      	b.n	8012668 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d002      	beq.n	8012676 <xQueueGenericCreateStatic+0x4e>
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d001      	beq.n	801267a <xQueueGenericCreateStatic+0x52>
 8012676:	2301      	movs	r3, #1
 8012678:	e000      	b.n	801267c <xQueueGenericCreateStatic+0x54>
 801267a:	2300      	movs	r3, #0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d109      	bne.n	8012694 <xQueueGenericCreateStatic+0x6c>
 8012680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012684:	f383 8811 	msr	BASEPRI, r3
 8012688:	f3bf 8f6f 	isb	sy
 801268c:	f3bf 8f4f 	dsb	sy
 8012690:	623b      	str	r3, [r7, #32]
 8012692:	e7fe      	b.n	8012692 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d102      	bne.n	80126a0 <xQueueGenericCreateStatic+0x78>
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d101      	bne.n	80126a4 <xQueueGenericCreateStatic+0x7c>
 80126a0:	2301      	movs	r3, #1
 80126a2:	e000      	b.n	80126a6 <xQueueGenericCreateStatic+0x7e>
 80126a4:	2300      	movs	r3, #0
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d109      	bne.n	80126be <xQueueGenericCreateStatic+0x96>
 80126aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ae:	f383 8811 	msr	BASEPRI, r3
 80126b2:	f3bf 8f6f 	isb	sy
 80126b6:	f3bf 8f4f 	dsb	sy
 80126ba:	61fb      	str	r3, [r7, #28]
 80126bc:	e7fe      	b.n	80126bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80126be:	2350      	movs	r3, #80	; 0x50
 80126c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	2b50      	cmp	r3, #80	; 0x50
 80126c6:	d009      	beq.n	80126dc <xQueueGenericCreateStatic+0xb4>
 80126c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126cc:	f383 8811 	msr	BASEPRI, r3
 80126d0:	f3bf 8f6f 	isb	sy
 80126d4:	f3bf 8f4f 	dsb	sy
 80126d8:	61bb      	str	r3, [r7, #24]
 80126da:	e7fe      	b.n	80126da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80126dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80126e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d00d      	beq.n	8012704 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80126e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ea:	2201      	movs	r2, #1
 80126ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80126f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80126f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f6:	9300      	str	r3, [sp, #0]
 80126f8:	4613      	mov	r3, r2
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	68b9      	ldr	r1, [r7, #8]
 80126fe:	68f8      	ldr	r0, [r7, #12]
 8012700:	f000 f844 	bl	801278c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012706:	4618      	mov	r0, r3
 8012708:	3730      	adds	r7, #48	; 0x30
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801270e:	b580      	push	{r7, lr}
 8012710:	b08a      	sub	sp, #40	; 0x28
 8012712:	af02      	add	r7, sp, #8
 8012714:	60f8      	str	r0, [r7, #12]
 8012716:	60b9      	str	r1, [r7, #8]
 8012718:	4613      	mov	r3, r2
 801271a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d109      	bne.n	8012736 <xQueueGenericCreate+0x28>
 8012722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012726:	f383 8811 	msr	BASEPRI, r3
 801272a:	f3bf 8f6f 	isb	sy
 801272e:	f3bf 8f4f 	dsb	sy
 8012732:	613b      	str	r3, [r7, #16]
 8012734:	e7fe      	b.n	8012734 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d102      	bne.n	8012742 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801273c:	2300      	movs	r3, #0
 801273e:	61fb      	str	r3, [r7, #28]
 8012740:	e004      	b.n	801274c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	68ba      	ldr	r2, [r7, #8]
 8012746:	fb02 f303 	mul.w	r3, r2, r3
 801274a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	3350      	adds	r3, #80	; 0x50
 8012750:	4618      	mov	r0, r3
 8012752:	f002 f96d 	bl	8014a30 <pvPortMalloc>
 8012756:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012758:	69bb      	ldr	r3, [r7, #24]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d011      	beq.n	8012782 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	3350      	adds	r3, #80	; 0x50
 8012766:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012768:	69bb      	ldr	r3, [r7, #24]
 801276a:	2200      	movs	r2, #0
 801276c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012770:	79fa      	ldrb	r2, [r7, #7]
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	9300      	str	r3, [sp, #0]
 8012776:	4613      	mov	r3, r2
 8012778:	697a      	ldr	r2, [r7, #20]
 801277a:	68b9      	ldr	r1, [r7, #8]
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	f000 f805 	bl	801278c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012782:	69bb      	ldr	r3, [r7, #24]
	}
 8012784:	4618      	mov	r0, r3
 8012786:	3720      	adds	r7, #32
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b084      	sub	sp, #16
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	607a      	str	r2, [r7, #4]
 8012798:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d103      	bne.n	80127a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	69ba      	ldr	r2, [r7, #24]
 80127a4:	601a      	str	r2, [r3, #0]
 80127a6:	e002      	b.n	80127ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	687a      	ldr	r2, [r7, #4]
 80127ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	68fa      	ldr	r2, [r7, #12]
 80127b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	68ba      	ldr	r2, [r7, #8]
 80127b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80127ba:	2101      	movs	r1, #1
 80127bc:	69b8      	ldr	r0, [r7, #24]
 80127be:	f7ff fecb 	bl	8012558 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80127c2:	69bb      	ldr	r3, [r7, #24]
 80127c4:	78fa      	ldrb	r2, [r7, #3]
 80127c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80127ca:	bf00      	nop
 80127cc:	3710      	adds	r7, #16
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
	...

080127d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b08e      	sub	sp, #56	; 0x38
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	60b9      	str	r1, [r7, #8]
 80127de:	607a      	str	r2, [r7, #4]
 80127e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80127e2:	2300      	movs	r3, #0
 80127e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80127ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d109      	bne.n	8012804 <xQueueGenericSend+0x30>
 80127f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f4:	f383 8811 	msr	BASEPRI, r3
 80127f8:	f3bf 8f6f 	isb	sy
 80127fc:	f3bf 8f4f 	dsb	sy
 8012800:	62bb      	str	r3, [r7, #40]	; 0x28
 8012802:	e7fe      	b.n	8012802 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d103      	bne.n	8012812 <xQueueGenericSend+0x3e>
 801280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801280e:	2b00      	cmp	r3, #0
 8012810:	d101      	bne.n	8012816 <xQueueGenericSend+0x42>
 8012812:	2301      	movs	r3, #1
 8012814:	e000      	b.n	8012818 <xQueueGenericSend+0x44>
 8012816:	2300      	movs	r3, #0
 8012818:	2b00      	cmp	r3, #0
 801281a:	d109      	bne.n	8012830 <xQueueGenericSend+0x5c>
 801281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012820:	f383 8811 	msr	BASEPRI, r3
 8012824:	f3bf 8f6f 	isb	sy
 8012828:	f3bf 8f4f 	dsb	sy
 801282c:	627b      	str	r3, [r7, #36]	; 0x24
 801282e:	e7fe      	b.n	801282e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	2b02      	cmp	r3, #2
 8012834:	d103      	bne.n	801283e <xQueueGenericSend+0x6a>
 8012836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801283a:	2b01      	cmp	r3, #1
 801283c:	d101      	bne.n	8012842 <xQueueGenericSend+0x6e>
 801283e:	2301      	movs	r3, #1
 8012840:	e000      	b.n	8012844 <xQueueGenericSend+0x70>
 8012842:	2300      	movs	r3, #0
 8012844:	2b00      	cmp	r3, #0
 8012846:	d109      	bne.n	801285c <xQueueGenericSend+0x88>
 8012848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801284c:	f383 8811 	msr	BASEPRI, r3
 8012850:	f3bf 8f6f 	isb	sy
 8012854:	f3bf 8f4f 	dsb	sy
 8012858:	623b      	str	r3, [r7, #32]
 801285a:	e7fe      	b.n	801285a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801285c:	f001 fa28 	bl	8013cb0 <xTaskGetSchedulerState>
 8012860:	4603      	mov	r3, r0
 8012862:	2b00      	cmp	r3, #0
 8012864:	d102      	bne.n	801286c <xQueueGenericSend+0x98>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d101      	bne.n	8012870 <xQueueGenericSend+0x9c>
 801286c:	2301      	movs	r3, #1
 801286e:	e000      	b.n	8012872 <xQueueGenericSend+0x9e>
 8012870:	2300      	movs	r3, #0
 8012872:	2b00      	cmp	r3, #0
 8012874:	d109      	bne.n	801288a <xQueueGenericSend+0xb6>
 8012876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801287a:	f383 8811 	msr	BASEPRI, r3
 801287e:	f3bf 8f6f 	isb	sy
 8012882:	f3bf 8f4f 	dsb	sy
 8012886:	61fb      	str	r3, [r7, #28]
 8012888:	e7fe      	b.n	8012888 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801288a:	f001 ffb7 	bl	80147fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012896:	429a      	cmp	r2, r3
 8012898:	d302      	bcc.n	80128a0 <xQueueGenericSend+0xcc>
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	2b02      	cmp	r3, #2
 801289e:	d129      	bne.n	80128f4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80128a0:	683a      	ldr	r2, [r7, #0]
 80128a2:	68b9      	ldr	r1, [r7, #8]
 80128a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128a6:	f000 fa7c 	bl	8012da2 <prvCopyDataToQueue>
 80128aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d010      	beq.n	80128d6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b6:	3324      	adds	r3, #36	; 0x24
 80128b8:	4618      	mov	r0, r3
 80128ba:	f001 f843 	bl	8013944 <xTaskRemoveFromEventList>
 80128be:	4603      	mov	r3, r0
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d013      	beq.n	80128ec <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80128c4:	4b3f      	ldr	r3, [pc, #252]	; (80129c4 <xQueueGenericSend+0x1f0>)
 80128c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128ca:	601a      	str	r2, [r3, #0]
 80128cc:	f3bf 8f4f 	dsb	sy
 80128d0:	f3bf 8f6f 	isb	sy
 80128d4:	e00a      	b.n	80128ec <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80128d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d007      	beq.n	80128ec <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80128dc:	4b39      	ldr	r3, [pc, #228]	; (80129c4 <xQueueGenericSend+0x1f0>)
 80128de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128e2:	601a      	str	r2, [r3, #0]
 80128e4:	f3bf 8f4f 	dsb	sy
 80128e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80128ec:	f001 ffb4 	bl	8014858 <vPortExitCritical>
				return pdPASS;
 80128f0:	2301      	movs	r3, #1
 80128f2:	e063      	b.n	80129bc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d103      	bne.n	8012902 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80128fa:	f001 ffad 	bl	8014858 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80128fe:	2300      	movs	r3, #0
 8012900:	e05c      	b.n	80129bc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012904:	2b00      	cmp	r3, #0
 8012906:	d106      	bne.n	8012916 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012908:	f107 0314 	add.w	r3, r7, #20
 801290c:	4618      	mov	r0, r3
 801290e:	f001 f87b 	bl	8013a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012912:	2301      	movs	r3, #1
 8012914:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012916:	f001 ff9f 	bl	8014858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801291a:	f000 fde5 	bl	80134e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801291e:	f001 ff6d 	bl	80147fc <vPortEnterCritical>
 8012922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012928:	b25b      	sxtb	r3, r3
 801292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801292e:	d103      	bne.n	8012938 <xQueueGenericSend+0x164>
 8012930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012932:	2200      	movs	r2, #0
 8012934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801293e:	b25b      	sxtb	r3, r3
 8012940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012944:	d103      	bne.n	801294e <xQueueGenericSend+0x17a>
 8012946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012948:	2200      	movs	r2, #0
 801294a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801294e:	f001 ff83 	bl	8014858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012952:	1d3a      	adds	r2, r7, #4
 8012954:	f107 0314 	add.w	r3, r7, #20
 8012958:	4611      	mov	r1, r2
 801295a:	4618      	mov	r0, r3
 801295c:	f001 f86a 	bl	8013a34 <xTaskCheckForTimeOut>
 8012960:	4603      	mov	r3, r0
 8012962:	2b00      	cmp	r3, #0
 8012964:	d124      	bne.n	80129b0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012968:	f000 fb13 	bl	8012f92 <prvIsQueueFull>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d018      	beq.n	80129a4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012974:	3310      	adds	r3, #16
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	4611      	mov	r1, r2
 801297a:	4618      	mov	r0, r3
 801297c:	f000 ff94 	bl	80138a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012982:	f000 fa9e 	bl	8012ec2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012986:	f000 fdbd 	bl	8013504 <xTaskResumeAll>
 801298a:	4603      	mov	r3, r0
 801298c:	2b00      	cmp	r3, #0
 801298e:	f47f af7c 	bne.w	801288a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012992:	4b0c      	ldr	r3, [pc, #48]	; (80129c4 <xQueueGenericSend+0x1f0>)
 8012994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012998:	601a      	str	r2, [r3, #0]
 801299a:	f3bf 8f4f 	dsb	sy
 801299e:	f3bf 8f6f 	isb	sy
 80129a2:	e772      	b.n	801288a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80129a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129a6:	f000 fa8c 	bl	8012ec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80129aa:	f000 fdab 	bl	8013504 <xTaskResumeAll>
 80129ae:	e76c      	b.n	801288a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80129b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129b2:	f000 fa86 	bl	8012ec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80129b6:	f000 fda5 	bl	8013504 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80129ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3738      	adds	r7, #56	; 0x38
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	e000ed04 	.word	0xe000ed04

080129c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b08e      	sub	sp, #56	; 0x38
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	60f8      	str	r0, [r7, #12]
 80129d0:	60b9      	str	r1, [r7, #8]
 80129d2:	607a      	str	r2, [r7, #4]
 80129d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80129da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d109      	bne.n	80129f4 <xQueueGenericSendFromISR+0x2c>
 80129e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e4:	f383 8811 	msr	BASEPRI, r3
 80129e8:	f3bf 8f6f 	isb	sy
 80129ec:	f3bf 8f4f 	dsb	sy
 80129f0:	627b      	str	r3, [r7, #36]	; 0x24
 80129f2:	e7fe      	b.n	80129f2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d103      	bne.n	8012a02 <xQueueGenericSendFromISR+0x3a>
 80129fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d101      	bne.n	8012a06 <xQueueGenericSendFromISR+0x3e>
 8012a02:	2301      	movs	r3, #1
 8012a04:	e000      	b.n	8012a08 <xQueueGenericSendFromISR+0x40>
 8012a06:	2300      	movs	r3, #0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d109      	bne.n	8012a20 <xQueueGenericSendFromISR+0x58>
 8012a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a10:	f383 8811 	msr	BASEPRI, r3
 8012a14:	f3bf 8f6f 	isb	sy
 8012a18:	f3bf 8f4f 	dsb	sy
 8012a1c:	623b      	str	r3, [r7, #32]
 8012a1e:	e7fe      	b.n	8012a1e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	2b02      	cmp	r3, #2
 8012a24:	d103      	bne.n	8012a2e <xQueueGenericSendFromISR+0x66>
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a2a:	2b01      	cmp	r3, #1
 8012a2c:	d101      	bne.n	8012a32 <xQueueGenericSendFromISR+0x6a>
 8012a2e:	2301      	movs	r3, #1
 8012a30:	e000      	b.n	8012a34 <xQueueGenericSendFromISR+0x6c>
 8012a32:	2300      	movs	r3, #0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d109      	bne.n	8012a4c <xQueueGenericSendFromISR+0x84>
 8012a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3c:	f383 8811 	msr	BASEPRI, r3
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	f3bf 8f4f 	dsb	sy
 8012a48:	61fb      	str	r3, [r7, #28]
 8012a4a:	e7fe      	b.n	8012a4a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a4c:	f001 ffb2 	bl	80149b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012a50:	f3ef 8211 	mrs	r2, BASEPRI
 8012a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a58:	f383 8811 	msr	BASEPRI, r3
 8012a5c:	f3bf 8f6f 	isb	sy
 8012a60:	f3bf 8f4f 	dsb	sy
 8012a64:	61ba      	str	r2, [r7, #24]
 8012a66:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012a68:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d302      	bcc.n	8012a7e <xQueueGenericSendFromISR+0xb6>
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	2b02      	cmp	r3, #2
 8012a7c:	d12c      	bne.n	8012ad8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a88:	683a      	ldr	r2, [r7, #0]
 8012a8a:	68b9      	ldr	r1, [r7, #8]
 8012a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a8e:	f000 f988 	bl	8012da2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a92:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9a:	d112      	bne.n	8012ac2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d016      	beq.n	8012ad2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa6:	3324      	adds	r3, #36	; 0x24
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f000 ff4b 	bl	8013944 <xTaskRemoveFromEventList>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00e      	beq.n	8012ad2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d00b      	beq.n	8012ad2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2201      	movs	r2, #1
 8012abe:	601a      	str	r2, [r3, #0]
 8012ac0:	e007      	b.n	8012ad2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	b25a      	sxtb	r2, r3
 8012acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012ad6:	e001      	b.n	8012adc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	637b      	str	r3, [r7, #52]	; 0x34
 8012adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ade:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3738      	adds	r7, #56	; 0x38
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b08c      	sub	sp, #48	; 0x30
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	60f8      	str	r0, [r7, #12]
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012afc:	2300      	movs	r3, #0
 8012afe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d109      	bne.n	8012b1e <xQueueReceive+0x2e>
	__asm volatile
 8012b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b0e:	f383 8811 	msr	BASEPRI, r3
 8012b12:	f3bf 8f6f 	isb	sy
 8012b16:	f3bf 8f4f 	dsb	sy
 8012b1a:	623b      	str	r3, [r7, #32]
 8012b1c:	e7fe      	b.n	8012b1c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d103      	bne.n	8012b2c <xQueueReceive+0x3c>
 8012b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d101      	bne.n	8012b30 <xQueueReceive+0x40>
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	e000      	b.n	8012b32 <xQueueReceive+0x42>
 8012b30:	2300      	movs	r3, #0
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d109      	bne.n	8012b4a <xQueueReceive+0x5a>
 8012b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b3a:	f383 8811 	msr	BASEPRI, r3
 8012b3e:	f3bf 8f6f 	isb	sy
 8012b42:	f3bf 8f4f 	dsb	sy
 8012b46:	61fb      	str	r3, [r7, #28]
 8012b48:	e7fe      	b.n	8012b48 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b4a:	f001 f8b1 	bl	8013cb0 <xTaskGetSchedulerState>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d102      	bne.n	8012b5a <xQueueReceive+0x6a>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d101      	bne.n	8012b5e <xQueueReceive+0x6e>
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	e000      	b.n	8012b60 <xQueueReceive+0x70>
 8012b5e:	2300      	movs	r3, #0
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d109      	bne.n	8012b78 <xQueueReceive+0x88>
 8012b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b68:	f383 8811 	msr	BASEPRI, r3
 8012b6c:	f3bf 8f6f 	isb	sy
 8012b70:	f3bf 8f4f 	dsb	sy
 8012b74:	61bb      	str	r3, [r7, #24]
 8012b76:	e7fe      	b.n	8012b76 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b78:	f001 fe40 	bl	80147fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b80:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d01f      	beq.n	8012bc8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012b88:	68b9      	ldr	r1, [r7, #8]
 8012b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b8c:	f000 f973 	bl	8012e76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b92:	1e5a      	subs	r2, r3, #1
 8012b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b96:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9a:	691b      	ldr	r3, [r3, #16]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00f      	beq.n	8012bc0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba2:	3310      	adds	r3, #16
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f000 fecd 	bl	8013944 <xTaskRemoveFromEventList>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d007      	beq.n	8012bc0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012bb0:	4b3c      	ldr	r3, [pc, #240]	; (8012ca4 <xQueueReceive+0x1b4>)
 8012bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bb6:	601a      	str	r2, [r3, #0]
 8012bb8:	f3bf 8f4f 	dsb	sy
 8012bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012bc0:	f001 fe4a 	bl	8014858 <vPortExitCritical>
				return pdPASS;
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	e069      	b.n	8012c9c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d103      	bne.n	8012bd6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012bce:	f001 fe43 	bl	8014858 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	e062      	b.n	8012c9c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d106      	bne.n	8012bea <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012bdc:	f107 0310 	add.w	r3, r7, #16
 8012be0:	4618      	mov	r0, r3
 8012be2:	f000 ff11 	bl	8013a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012be6:	2301      	movs	r3, #1
 8012be8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012bea:	f001 fe35 	bl	8014858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012bee:	f000 fc7b 	bl	80134e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012bf2:	f001 fe03 	bl	80147fc <vPortEnterCritical>
 8012bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bfc:	b25b      	sxtb	r3, r3
 8012bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c02:	d103      	bne.n	8012c0c <xQueueReceive+0x11c>
 8012c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c12:	b25b      	sxtb	r3, r3
 8012c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c18:	d103      	bne.n	8012c22 <xQueueReceive+0x132>
 8012c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c22:	f001 fe19 	bl	8014858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c26:	1d3a      	adds	r2, r7, #4
 8012c28:	f107 0310 	add.w	r3, r7, #16
 8012c2c:	4611      	mov	r1, r2
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f000 ff00 	bl	8013a34 <xTaskCheckForTimeOut>
 8012c34:	4603      	mov	r3, r0
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d123      	bne.n	8012c82 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c3c:	f000 f993 	bl	8012f66 <prvIsQueueEmpty>
 8012c40:	4603      	mov	r3, r0
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d017      	beq.n	8012c76 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c48:	3324      	adds	r3, #36	; 0x24
 8012c4a:	687a      	ldr	r2, [r7, #4]
 8012c4c:	4611      	mov	r1, r2
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f000 fe2a 	bl	80138a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c56:	f000 f934 	bl	8012ec2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012c5a:	f000 fc53 	bl	8013504 <xTaskResumeAll>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d189      	bne.n	8012b78 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012c64:	4b0f      	ldr	r3, [pc, #60]	; (8012ca4 <xQueueReceive+0x1b4>)
 8012c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c6a:	601a      	str	r2, [r3, #0]
 8012c6c:	f3bf 8f4f 	dsb	sy
 8012c70:	f3bf 8f6f 	isb	sy
 8012c74:	e780      	b.n	8012b78 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c78:	f000 f923 	bl	8012ec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c7c:	f000 fc42 	bl	8013504 <xTaskResumeAll>
 8012c80:	e77a      	b.n	8012b78 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c84:	f000 f91d 	bl	8012ec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c88:	f000 fc3c 	bl	8013504 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c8e:	f000 f96a 	bl	8012f66 <prvIsQueueEmpty>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	f43f af6f 	beq.w	8012b78 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012c9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3730      	adds	r7, #48	; 0x30
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	e000ed04 	.word	0xe000ed04

08012ca8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b08e      	sub	sp, #56	; 0x38
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d109      	bne.n	8012cd2 <xQueueReceiveFromISR+0x2a>
 8012cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc2:	f383 8811 	msr	BASEPRI, r3
 8012cc6:	f3bf 8f6f 	isb	sy
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	623b      	str	r3, [r7, #32]
 8012cd0:	e7fe      	b.n	8012cd0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d103      	bne.n	8012ce0 <xQueueReceiveFromISR+0x38>
 8012cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d101      	bne.n	8012ce4 <xQueueReceiveFromISR+0x3c>
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e000      	b.n	8012ce6 <xQueueReceiveFromISR+0x3e>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d109      	bne.n	8012cfe <xQueueReceiveFromISR+0x56>
 8012cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cee:	f383 8811 	msr	BASEPRI, r3
 8012cf2:	f3bf 8f6f 	isb	sy
 8012cf6:	f3bf 8f4f 	dsb	sy
 8012cfa:	61fb      	str	r3, [r7, #28]
 8012cfc:	e7fe      	b.n	8012cfc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012cfe:	f001 fe59 	bl	80149b4 <vPortValidateInterruptPriority>
	__asm volatile
 8012d02:	f3ef 8211 	mrs	r2, BASEPRI
 8012d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d0a:	f383 8811 	msr	BASEPRI, r3
 8012d0e:	f3bf 8f6f 	isb	sy
 8012d12:	f3bf 8f4f 	dsb	sy
 8012d16:	61ba      	str	r2, [r7, #24]
 8012d18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012d1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d02f      	beq.n	8012d8a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012d34:	68b9      	ldr	r1, [r7, #8]
 8012d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d38:	f000 f89d 	bl	8012e76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3e:	1e5a      	subs	r2, r3, #1
 8012d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012d44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d4c:	d112      	bne.n	8012d74 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d50:	691b      	ldr	r3, [r3, #16]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d016      	beq.n	8012d84 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d58:	3310      	adds	r3, #16
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f000 fdf2 	bl	8013944 <xTaskRemoveFromEventList>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d00e      	beq.n	8012d84 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d00b      	beq.n	8012d84 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2201      	movs	r2, #1
 8012d70:	601a      	str	r2, [r3, #0]
 8012d72:	e007      	b.n	8012d84 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d78:	3301      	adds	r3, #1
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	b25a      	sxtb	r2, r3
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012d84:	2301      	movs	r3, #1
 8012d86:	637b      	str	r3, [r7, #52]	; 0x34
 8012d88:	e001      	b.n	8012d8e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8012d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3738      	adds	r7, #56	; 0x38
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}

08012da2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b086      	sub	sp, #24
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	60f8      	str	r0, [r7, #12]
 8012daa:	60b9      	str	r1, [r7, #8]
 8012dac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012dae:	2300      	movs	r3, #0
 8012db0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012db6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d10d      	bne.n	8012ddc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d14d      	bne.n	8012e64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	689b      	ldr	r3, [r3, #8]
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f000 ff8d 	bl	8013cec <xTaskPriorityDisinherit>
 8012dd2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	609a      	str	r2, [r3, #8]
 8012dda:	e043      	b.n	8012e64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d119      	bne.n	8012e16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	6858      	ldr	r0, [r3, #4]
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dea:	461a      	mov	r2, r3
 8012dec:	68b9      	ldr	r1, [r7, #8]
 8012dee:	f002 ff5b 	bl	8015ca8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	685a      	ldr	r2, [r3, #4]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dfa:	441a      	add	r2, r3
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	685a      	ldr	r2, [r3, #4]
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	689b      	ldr	r3, [r3, #8]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d32b      	bcc.n	8012e64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	605a      	str	r2, [r3, #4]
 8012e14:	e026      	b.n	8012e64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	68d8      	ldr	r0, [r3, #12]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e1e:	461a      	mov	r2, r3
 8012e20:	68b9      	ldr	r1, [r7, #8]
 8012e22:	f002 ff41 	bl	8015ca8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	68da      	ldr	r2, [r3, #12]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e2e:	425b      	negs	r3, r3
 8012e30:	441a      	add	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	68da      	ldr	r2, [r3, #12]
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d207      	bcs.n	8012e52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	689a      	ldr	r2, [r3, #8]
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e4a:	425b      	negs	r3, r3
 8012e4c:	441a      	add	r2, r3
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2b02      	cmp	r3, #2
 8012e56:	d105      	bne.n	8012e64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d002      	beq.n	8012e64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	3b01      	subs	r3, #1
 8012e62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	1c5a      	adds	r2, r3, #1
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012e6c:	697b      	ldr	r3, [r7, #20]
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3718      	adds	r7, #24
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}

08012e76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b082      	sub	sp, #8
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
 8012e7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d018      	beq.n	8012eba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	68da      	ldr	r2, [r3, #12]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e90:	441a      	add	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	68da      	ldr	r2, [r3, #12]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	689b      	ldr	r3, [r3, #8]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d303      	bcc.n	8012eaa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681a      	ldr	r2, [r3, #0]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	68d9      	ldr	r1, [r3, #12]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	6838      	ldr	r0, [r7, #0]
 8012eb6:	f002 fef7 	bl	8015ca8 <memcpy>
	}
}
 8012eba:	bf00      	nop
 8012ebc:	3708      	adds	r7, #8
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b084      	sub	sp, #16
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012eca:	f001 fc97 	bl	80147fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ed4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ed6:	e011      	b.n	8012efc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d012      	beq.n	8012f06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	3324      	adds	r3, #36	; 0x24
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f000 fd2d 	bl	8013944 <xTaskRemoveFromEventList>
 8012eea:	4603      	mov	r3, r0
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d001      	beq.n	8012ef4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012ef0:	f000 fe00 	bl	8013af4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012ef4:	7bfb      	ldrb	r3, [r7, #15]
 8012ef6:	3b01      	subs	r3, #1
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	dce9      	bgt.n	8012ed8 <prvUnlockQueue+0x16>
 8012f04:	e000      	b.n	8012f08 <prvUnlockQueue+0x46>
					break;
 8012f06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	22ff      	movs	r2, #255	; 0xff
 8012f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012f10:	f001 fca2 	bl	8014858 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012f14:	f001 fc72 	bl	80147fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f20:	e011      	b.n	8012f46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	691b      	ldr	r3, [r3, #16]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d012      	beq.n	8012f50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	3310      	adds	r3, #16
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f000 fd08 	bl	8013944 <xTaskRemoveFromEventList>
 8012f34:	4603      	mov	r3, r0
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d001      	beq.n	8012f3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012f3a:	f000 fddb 	bl	8013af4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012f3e:	7bbb      	ldrb	r3, [r7, #14]
 8012f40:	3b01      	subs	r3, #1
 8012f42:	b2db      	uxtb	r3, r3
 8012f44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	dce9      	bgt.n	8012f22 <prvUnlockQueue+0x60>
 8012f4e:	e000      	b.n	8012f52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012f50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	22ff      	movs	r2, #255	; 0xff
 8012f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012f5a:	f001 fc7d 	bl	8014858 <vPortExitCritical>
}
 8012f5e:	bf00      	nop
 8012f60:	3710      	adds	r7, #16
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012f66:	b580      	push	{r7, lr}
 8012f68:	b084      	sub	sp, #16
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f6e:	f001 fc45 	bl	80147fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d102      	bne.n	8012f80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	60fb      	str	r3, [r7, #12]
 8012f7e:	e001      	b.n	8012f84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012f80:	2300      	movs	r3, #0
 8012f82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f84:	f001 fc68 	bl	8014858 <vPortExitCritical>

	return xReturn;
 8012f88:	68fb      	ldr	r3, [r7, #12]
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3710      	adds	r7, #16
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}

08012f92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b084      	sub	sp, #16
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f9a:	f001 fc2f 	bl	80147fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d102      	bne.n	8012fb0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012faa:	2301      	movs	r3, #1
 8012fac:	60fb      	str	r3, [r7, #12]
 8012fae:	e001      	b.n	8012fb4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012fb4:	f001 fc50 	bl	8014858 <vPortExitCritical>

	return xReturn;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
	...

08012fc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fce:	2300      	movs	r3, #0
 8012fd0:	60fb      	str	r3, [r7, #12]
 8012fd2:	e014      	b.n	8012ffe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012fd4:	4a0e      	ldr	r2, [pc, #56]	; (8013010 <vQueueAddToRegistry+0x4c>)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d10b      	bne.n	8012ff8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012fe0:	490b      	ldr	r1, [pc, #44]	; (8013010 <vQueueAddToRegistry+0x4c>)
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	683a      	ldr	r2, [r7, #0]
 8012fe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012fea:	4a09      	ldr	r2, [pc, #36]	; (8013010 <vQueueAddToRegistry+0x4c>)
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	00db      	lsls	r3, r3, #3
 8012ff0:	4413      	add	r3, r2
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012ff6:	e005      	b.n	8013004 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	60fb      	str	r3, [r7, #12]
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	2b07      	cmp	r3, #7
 8013002:	d9e7      	bls.n	8012fd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013004:	bf00      	nop
 8013006:	3714      	adds	r7, #20
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr
 8013010:	200024d4 	.word	0x200024d4

08013014 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013014:	b580      	push	{r7, lr}
 8013016:	b086      	sub	sp, #24
 8013018:	af00      	add	r7, sp, #0
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013024:	f001 fbea 	bl	80147fc <vPortEnterCritical>
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801302e:	b25b      	sxtb	r3, r3
 8013030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013034:	d103      	bne.n	801303e <vQueueWaitForMessageRestricted+0x2a>
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	2200      	movs	r2, #0
 801303a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013044:	b25b      	sxtb	r3, r3
 8013046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801304a:	d103      	bne.n	8013054 <vQueueWaitForMessageRestricted+0x40>
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	2200      	movs	r2, #0
 8013050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013054:	f001 fc00 	bl	8014858 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801305c:	2b00      	cmp	r3, #0
 801305e:	d106      	bne.n	801306e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	3324      	adds	r3, #36	; 0x24
 8013064:	687a      	ldr	r2, [r7, #4]
 8013066:	68b9      	ldr	r1, [r7, #8]
 8013068:	4618      	mov	r0, r3
 801306a:	f000 fc41 	bl	80138f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801306e:	6978      	ldr	r0, [r7, #20]
 8013070:	f7ff ff27 	bl	8012ec2 <prvUnlockQueue>
	}
 8013074:	bf00      	nop
 8013076:	3718      	adds	r7, #24
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801307c:	b580      	push	{r7, lr}
 801307e:	b08e      	sub	sp, #56	; 0x38
 8013080:	af04      	add	r7, sp, #16
 8013082:	60f8      	str	r0, [r7, #12]
 8013084:	60b9      	str	r1, [r7, #8]
 8013086:	607a      	str	r2, [r7, #4]
 8013088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801308c:	2b00      	cmp	r3, #0
 801308e:	d109      	bne.n	80130a4 <xTaskCreateStatic+0x28>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	623b      	str	r3, [r7, #32]
 80130a2:	e7fe      	b.n	80130a2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80130a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d109      	bne.n	80130be <xTaskCreateStatic+0x42>
 80130aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ae:	f383 8811 	msr	BASEPRI, r3
 80130b2:	f3bf 8f6f 	isb	sy
 80130b6:	f3bf 8f4f 	dsb	sy
 80130ba:	61fb      	str	r3, [r7, #28]
 80130bc:	e7fe      	b.n	80130bc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80130be:	235c      	movs	r3, #92	; 0x5c
 80130c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	2b5c      	cmp	r3, #92	; 0x5c
 80130c6:	d009      	beq.n	80130dc <xTaskCreateStatic+0x60>
 80130c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130cc:	f383 8811 	msr	BASEPRI, r3
 80130d0:	f3bf 8f6f 	isb	sy
 80130d4:	f3bf 8f4f 	dsb	sy
 80130d8:	61bb      	str	r3, [r7, #24]
 80130da:	e7fe      	b.n	80130da <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80130dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80130de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d01e      	beq.n	8013122 <xTaskCreateStatic+0xa6>
 80130e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d01b      	beq.n	8013122 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80130ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80130ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80130f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f6:	2202      	movs	r2, #2
 80130f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80130fc:	2300      	movs	r3, #0
 80130fe:	9303      	str	r3, [sp, #12]
 8013100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013102:	9302      	str	r3, [sp, #8]
 8013104:	f107 0314 	add.w	r3, r7, #20
 8013108:	9301      	str	r3, [sp, #4]
 801310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	687a      	ldr	r2, [r7, #4]
 8013112:	68b9      	ldr	r1, [r7, #8]
 8013114:	68f8      	ldr	r0, [r7, #12]
 8013116:	f000 f850 	bl	80131ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801311a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801311c:	f000 f8dc 	bl	80132d8 <prvAddNewTaskToReadyList>
 8013120:	e001      	b.n	8013126 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8013122:	2300      	movs	r3, #0
 8013124:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013126:	697b      	ldr	r3, [r7, #20]
	}
 8013128:	4618      	mov	r0, r3
 801312a:	3728      	adds	r7, #40	; 0x28
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013130:	b580      	push	{r7, lr}
 8013132:	b08c      	sub	sp, #48	; 0x30
 8013134:	af04      	add	r7, sp, #16
 8013136:	60f8      	str	r0, [r7, #12]
 8013138:	60b9      	str	r1, [r7, #8]
 801313a:	603b      	str	r3, [r7, #0]
 801313c:	4613      	mov	r3, r2
 801313e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013140:	88fb      	ldrh	r3, [r7, #6]
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4618      	mov	r0, r3
 8013146:	f001 fc73 	bl	8014a30 <pvPortMalloc>
 801314a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d00e      	beq.n	8013170 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013152:	205c      	movs	r0, #92	; 0x5c
 8013154:	f001 fc6c 	bl	8014a30 <pvPortMalloc>
 8013158:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801315a:	69fb      	ldr	r3, [r7, #28]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d003      	beq.n	8013168 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	697a      	ldr	r2, [r7, #20]
 8013164:	631a      	str	r2, [r3, #48]	; 0x30
 8013166:	e005      	b.n	8013174 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013168:	6978      	ldr	r0, [r7, #20]
 801316a:	f001 fc73 	bl	8014a54 <vPortFree>
 801316e:	e001      	b.n	8013174 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013170:	2300      	movs	r3, #0
 8013172:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013174:	69fb      	ldr	r3, [r7, #28]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d017      	beq.n	80131aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	2200      	movs	r2, #0
 801317e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013182:	88fa      	ldrh	r2, [r7, #6]
 8013184:	2300      	movs	r3, #0
 8013186:	9303      	str	r3, [sp, #12]
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	9302      	str	r3, [sp, #8]
 801318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318e:	9301      	str	r3, [sp, #4]
 8013190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013192:	9300      	str	r3, [sp, #0]
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	68b9      	ldr	r1, [r7, #8]
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	f000 f80e 	bl	80131ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801319e:	69f8      	ldr	r0, [r7, #28]
 80131a0:	f000 f89a 	bl	80132d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80131a4:	2301      	movs	r3, #1
 80131a6:	61bb      	str	r3, [r7, #24]
 80131a8:	e002      	b.n	80131b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80131aa:	f04f 33ff 	mov.w	r3, #4294967295
 80131ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80131b0:	69bb      	ldr	r3, [r7, #24]
	}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3720      	adds	r7, #32
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}

080131ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b088      	sub	sp, #32
 80131be:	af00      	add	r7, sp, #0
 80131c0:	60f8      	str	r0, [r7, #12]
 80131c2:	60b9      	str	r1, [r7, #8]
 80131c4:	607a      	str	r2, [r7, #4]
 80131c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80131c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	009b      	lsls	r3, r3, #2
 80131d0:	461a      	mov	r2, r3
 80131d2:	21a5      	movs	r1, #165	; 0xa5
 80131d4:	f002 fd73 	bl	8015cbe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80131d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80131e2:	3b01      	subs	r3, #1
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	4413      	add	r3, r2
 80131e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80131ea:	69bb      	ldr	r3, [r7, #24]
 80131ec:	f023 0307 	bic.w	r3, r3, #7
 80131f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80131f2:	69bb      	ldr	r3, [r7, #24]
 80131f4:	f003 0307 	and.w	r3, r3, #7
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d009      	beq.n	8013210 <prvInitialiseNewTask+0x56>
 80131fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013200:	f383 8811 	msr	BASEPRI, r3
 8013204:	f3bf 8f6f 	isb	sy
 8013208:	f3bf 8f4f 	dsb	sy
 801320c:	617b      	str	r3, [r7, #20]
 801320e:	e7fe      	b.n	801320e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d01f      	beq.n	8013256 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013216:	2300      	movs	r3, #0
 8013218:	61fb      	str	r3, [r7, #28]
 801321a:	e012      	b.n	8013242 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801321c:	68ba      	ldr	r2, [r7, #8]
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	4413      	add	r3, r2
 8013222:	7819      	ldrb	r1, [r3, #0]
 8013224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013226:	69fb      	ldr	r3, [r7, #28]
 8013228:	4413      	add	r3, r2
 801322a:	3334      	adds	r3, #52	; 0x34
 801322c:	460a      	mov	r2, r1
 801322e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013230:	68ba      	ldr	r2, [r7, #8]
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	4413      	add	r3, r2
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d006      	beq.n	801324a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	3301      	adds	r3, #1
 8013240:	61fb      	str	r3, [r7, #28]
 8013242:	69fb      	ldr	r3, [r7, #28]
 8013244:	2b0f      	cmp	r3, #15
 8013246:	d9e9      	bls.n	801321c <prvInitialiseNewTask+0x62>
 8013248:	e000      	b.n	801324c <prvInitialiseNewTask+0x92>
			{
				break;
 801324a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801324e:	2200      	movs	r2, #0
 8013250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013254:	e003      	b.n	801325e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013258:	2200      	movs	r2, #0
 801325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013260:	2b37      	cmp	r3, #55	; 0x37
 8013262:	d901      	bls.n	8013268 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013264:	2337      	movs	r3, #55	; 0x37
 8013266:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801326a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801326c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013272:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013276:	2200      	movs	r2, #0
 8013278:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801327c:	3304      	adds	r3, #4
 801327e:	4618      	mov	r0, r3
 8013280:	f7ff f8d6 	bl	8012430 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013286:	3318      	adds	r3, #24
 8013288:	4618      	mov	r0, r3
 801328a:	f7ff f8d1 	bl	8012430 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013292:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013296:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801329c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80132a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a6:	2200      	movs	r2, #0
 80132a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80132aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ac:	2200      	movs	r2, #0
 80132ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80132b2:	683a      	ldr	r2, [r7, #0]
 80132b4:	68f9      	ldr	r1, [r7, #12]
 80132b6:	69b8      	ldr	r0, [r7, #24]
 80132b8:	f001 f97a 	bl	80145b0 <pxPortInitialiseStack>
 80132bc:	4602      	mov	r2, r0
 80132be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80132c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d002      	beq.n	80132ce <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80132c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80132ce:	bf00      	nop
 80132d0:	3720      	adds	r7, #32
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
	...

080132d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b082      	sub	sp, #8
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80132e0:	f001 fa8c 	bl	80147fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80132e4:	4b2d      	ldr	r3, [pc, #180]	; (801339c <prvAddNewTaskToReadyList+0xc4>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	3301      	adds	r3, #1
 80132ea:	4a2c      	ldr	r2, [pc, #176]	; (801339c <prvAddNewTaskToReadyList+0xc4>)
 80132ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80132ee:	4b2c      	ldr	r3, [pc, #176]	; (80133a0 <prvAddNewTaskToReadyList+0xc8>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d109      	bne.n	801330a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80132f6:	4a2a      	ldr	r2, [pc, #168]	; (80133a0 <prvAddNewTaskToReadyList+0xc8>)
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80132fc:	4b27      	ldr	r3, [pc, #156]	; (801339c <prvAddNewTaskToReadyList+0xc4>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b01      	cmp	r3, #1
 8013302:	d110      	bne.n	8013326 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013304:	f000 fc1a 	bl	8013b3c <prvInitialiseTaskLists>
 8013308:	e00d      	b.n	8013326 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801330a:	4b26      	ldr	r3, [pc, #152]	; (80133a4 <prvAddNewTaskToReadyList+0xcc>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d109      	bne.n	8013326 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013312:	4b23      	ldr	r3, [pc, #140]	; (80133a0 <prvAddNewTaskToReadyList+0xc8>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801331c:	429a      	cmp	r2, r3
 801331e:	d802      	bhi.n	8013326 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013320:	4a1f      	ldr	r2, [pc, #124]	; (80133a0 <prvAddNewTaskToReadyList+0xc8>)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013326:	4b20      	ldr	r3, [pc, #128]	; (80133a8 <prvAddNewTaskToReadyList+0xd0>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	3301      	adds	r3, #1
 801332c:	4a1e      	ldr	r2, [pc, #120]	; (80133a8 <prvAddNewTaskToReadyList+0xd0>)
 801332e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013330:	4b1d      	ldr	r3, [pc, #116]	; (80133a8 <prvAddNewTaskToReadyList+0xd0>)
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801333c:	4b1b      	ldr	r3, [pc, #108]	; (80133ac <prvAddNewTaskToReadyList+0xd4>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	429a      	cmp	r2, r3
 8013342:	d903      	bls.n	801334c <prvAddNewTaskToReadyList+0x74>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013348:	4a18      	ldr	r2, [pc, #96]	; (80133ac <prvAddNewTaskToReadyList+0xd4>)
 801334a:	6013      	str	r3, [r2, #0]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013350:	4613      	mov	r3, r2
 8013352:	009b      	lsls	r3, r3, #2
 8013354:	4413      	add	r3, r2
 8013356:	009b      	lsls	r3, r3, #2
 8013358:	4a15      	ldr	r2, [pc, #84]	; (80133b0 <prvAddNewTaskToReadyList+0xd8>)
 801335a:	441a      	add	r2, r3
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	3304      	adds	r3, #4
 8013360:	4619      	mov	r1, r3
 8013362:	4610      	mov	r0, r2
 8013364:	f7ff f871 	bl	801244a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013368:	f001 fa76 	bl	8014858 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801336c:	4b0d      	ldr	r3, [pc, #52]	; (80133a4 <prvAddNewTaskToReadyList+0xcc>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00e      	beq.n	8013392 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013374:	4b0a      	ldr	r3, [pc, #40]	; (80133a0 <prvAddNewTaskToReadyList+0xc8>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801337e:	429a      	cmp	r2, r3
 8013380:	d207      	bcs.n	8013392 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013382:	4b0c      	ldr	r3, [pc, #48]	; (80133b4 <prvAddNewTaskToReadyList+0xdc>)
 8013384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013388:	601a      	str	r2, [r3, #0]
 801338a:	f3bf 8f4f 	dsb	sy
 801338e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013392:	bf00      	nop
 8013394:	3708      	adds	r7, #8
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	20001564 	.word	0x20001564
 80133a0:	20001090 	.word	0x20001090
 80133a4:	20001570 	.word	0x20001570
 80133a8:	20001580 	.word	0x20001580
 80133ac:	2000156c 	.word	0x2000156c
 80133b0:	20001094 	.word	0x20001094
 80133b4:	e000ed04 	.word	0xe000ed04

080133b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80133c0:	2300      	movs	r3, #0
 80133c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d016      	beq.n	80133f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80133ca:	4b13      	ldr	r3, [pc, #76]	; (8013418 <vTaskDelay+0x60>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d009      	beq.n	80133e6 <vTaskDelay+0x2e>
 80133d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d6:	f383 8811 	msr	BASEPRI, r3
 80133da:	f3bf 8f6f 	isb	sy
 80133de:	f3bf 8f4f 	dsb	sy
 80133e2:	60bb      	str	r3, [r7, #8]
 80133e4:	e7fe      	b.n	80133e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80133e6:	f000 f87f 	bl	80134e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80133ea:	2100      	movs	r1, #0
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f000 fce9 	bl	8013dc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80133f2:	f000 f887 	bl	8013504 <xTaskResumeAll>
 80133f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d107      	bne.n	801340e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80133fe:	4b07      	ldr	r3, [pc, #28]	; (801341c <vTaskDelay+0x64>)
 8013400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013404:	601a      	str	r2, [r3, #0]
 8013406:	f3bf 8f4f 	dsb	sy
 801340a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801340e:	bf00      	nop
 8013410:	3710      	adds	r7, #16
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
 8013416:	bf00      	nop
 8013418:	2000158c 	.word	0x2000158c
 801341c:	e000ed04 	.word	0xe000ed04

08013420 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b08a      	sub	sp, #40	; 0x28
 8013424:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013426:	2300      	movs	r3, #0
 8013428:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801342a:	2300      	movs	r3, #0
 801342c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801342e:	463a      	mov	r2, r7
 8013430:	1d39      	adds	r1, r7, #4
 8013432:	f107 0308 	add.w	r3, r7, #8
 8013436:	4618      	mov	r0, r3
 8013438:	f7fe ffa6 	bl	8012388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801343c:	6839      	ldr	r1, [r7, #0]
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	68ba      	ldr	r2, [r7, #8]
 8013442:	9202      	str	r2, [sp, #8]
 8013444:	9301      	str	r3, [sp, #4]
 8013446:	2300      	movs	r3, #0
 8013448:	9300      	str	r3, [sp, #0]
 801344a:	2300      	movs	r3, #0
 801344c:	460a      	mov	r2, r1
 801344e:	4920      	ldr	r1, [pc, #128]	; (80134d0 <vTaskStartScheduler+0xb0>)
 8013450:	4820      	ldr	r0, [pc, #128]	; (80134d4 <vTaskStartScheduler+0xb4>)
 8013452:	f7ff fe13 	bl	801307c <xTaskCreateStatic>
 8013456:	4602      	mov	r2, r0
 8013458:	4b1f      	ldr	r3, [pc, #124]	; (80134d8 <vTaskStartScheduler+0xb8>)
 801345a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801345c:	4b1e      	ldr	r3, [pc, #120]	; (80134d8 <vTaskStartScheduler+0xb8>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d002      	beq.n	801346a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013464:	2301      	movs	r3, #1
 8013466:	617b      	str	r3, [r7, #20]
 8013468:	e001      	b.n	801346e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801346a:	2300      	movs	r3, #0
 801346c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	2b01      	cmp	r3, #1
 8013472:	d102      	bne.n	801347a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013474:	f000 fcfa 	bl	8013e6c <xTimerCreateTimerTask>
 8013478:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	2b01      	cmp	r3, #1
 801347e:	d115      	bne.n	80134ac <vTaskStartScheduler+0x8c>
 8013480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013484:	f383 8811 	msr	BASEPRI, r3
 8013488:	f3bf 8f6f 	isb	sy
 801348c:	f3bf 8f4f 	dsb	sy
 8013490:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013492:	4b12      	ldr	r3, [pc, #72]	; (80134dc <vTaskStartScheduler+0xbc>)
 8013494:	f04f 32ff 	mov.w	r2, #4294967295
 8013498:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801349a:	4b11      	ldr	r3, [pc, #68]	; (80134e0 <vTaskStartScheduler+0xc0>)
 801349c:	2201      	movs	r2, #1
 801349e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80134a0:	4b10      	ldr	r3, [pc, #64]	; (80134e4 <vTaskStartScheduler+0xc4>)
 80134a2:	2200      	movs	r2, #0
 80134a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80134a6:	f001 f90b 	bl	80146c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80134aa:	e00d      	b.n	80134c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134b2:	d109      	bne.n	80134c8 <vTaskStartScheduler+0xa8>
 80134b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b8:	f383 8811 	msr	BASEPRI, r3
 80134bc:	f3bf 8f6f 	isb	sy
 80134c0:	f3bf 8f4f 	dsb	sy
 80134c4:	60fb      	str	r3, [r7, #12]
 80134c6:	e7fe      	b.n	80134c6 <vTaskStartScheduler+0xa6>
}
 80134c8:	bf00      	nop
 80134ca:	3718      	adds	r7, #24
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	0801a418 	.word	0x0801a418
 80134d4:	08013b0d 	.word	0x08013b0d
 80134d8:	20001588 	.word	0x20001588
 80134dc:	20001584 	.word	0x20001584
 80134e0:	20001570 	.word	0x20001570
 80134e4:	20001568 	.word	0x20001568

080134e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80134e8:	b480      	push	{r7}
 80134ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80134ec:	4b04      	ldr	r3, [pc, #16]	; (8013500 <vTaskSuspendAll+0x18>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	3301      	adds	r3, #1
 80134f2:	4a03      	ldr	r2, [pc, #12]	; (8013500 <vTaskSuspendAll+0x18>)
 80134f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80134f6:	bf00      	nop
 80134f8:	46bd      	mov	sp, r7
 80134fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fe:	4770      	bx	lr
 8013500:	2000158c 	.word	0x2000158c

08013504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b084      	sub	sp, #16
 8013508:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801350a:	2300      	movs	r3, #0
 801350c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801350e:	2300      	movs	r3, #0
 8013510:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013512:	4b41      	ldr	r3, [pc, #260]	; (8013618 <xTaskResumeAll+0x114>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d109      	bne.n	801352e <xTaskResumeAll+0x2a>
 801351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801351e:	f383 8811 	msr	BASEPRI, r3
 8013522:	f3bf 8f6f 	isb	sy
 8013526:	f3bf 8f4f 	dsb	sy
 801352a:	603b      	str	r3, [r7, #0]
 801352c:	e7fe      	b.n	801352c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801352e:	f001 f965 	bl	80147fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013532:	4b39      	ldr	r3, [pc, #228]	; (8013618 <xTaskResumeAll+0x114>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	3b01      	subs	r3, #1
 8013538:	4a37      	ldr	r2, [pc, #220]	; (8013618 <xTaskResumeAll+0x114>)
 801353a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801353c:	4b36      	ldr	r3, [pc, #216]	; (8013618 <xTaskResumeAll+0x114>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d162      	bne.n	801360a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013544:	4b35      	ldr	r3, [pc, #212]	; (801361c <xTaskResumeAll+0x118>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d05e      	beq.n	801360a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801354c:	e02f      	b.n	80135ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801354e:	4b34      	ldr	r3, [pc, #208]	; (8013620 <xTaskResumeAll+0x11c>)
 8013550:	68db      	ldr	r3, [r3, #12]
 8013552:	68db      	ldr	r3, [r3, #12]
 8013554:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	3318      	adds	r3, #24
 801355a:	4618      	mov	r0, r3
 801355c:	f7fe ffd2 	bl	8012504 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	3304      	adds	r3, #4
 8013564:	4618      	mov	r0, r3
 8013566:	f7fe ffcd 	bl	8012504 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801356e:	4b2d      	ldr	r3, [pc, #180]	; (8013624 <xTaskResumeAll+0x120>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	429a      	cmp	r2, r3
 8013574:	d903      	bls.n	801357e <xTaskResumeAll+0x7a>
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801357a:	4a2a      	ldr	r2, [pc, #168]	; (8013624 <xTaskResumeAll+0x120>)
 801357c:	6013      	str	r3, [r2, #0]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013582:	4613      	mov	r3, r2
 8013584:	009b      	lsls	r3, r3, #2
 8013586:	4413      	add	r3, r2
 8013588:	009b      	lsls	r3, r3, #2
 801358a:	4a27      	ldr	r2, [pc, #156]	; (8013628 <xTaskResumeAll+0x124>)
 801358c:	441a      	add	r2, r3
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	3304      	adds	r3, #4
 8013592:	4619      	mov	r1, r3
 8013594:	4610      	mov	r0, r2
 8013596:	f7fe ff58 	bl	801244a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801359e:	4b23      	ldr	r3, [pc, #140]	; (801362c <xTaskResumeAll+0x128>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d302      	bcc.n	80135ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80135a8:	4b21      	ldr	r3, [pc, #132]	; (8013630 <xTaskResumeAll+0x12c>)
 80135aa:	2201      	movs	r2, #1
 80135ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80135ae:	4b1c      	ldr	r3, [pc, #112]	; (8013620 <xTaskResumeAll+0x11c>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d1cb      	bne.n	801354e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d001      	beq.n	80135c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80135bc:	f000 fb58 	bl	8013c70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80135c0:	4b1c      	ldr	r3, [pc, #112]	; (8013634 <xTaskResumeAll+0x130>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d010      	beq.n	80135ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80135cc:	f000 f858 	bl	8013680 <xTaskIncrementTick>
 80135d0:	4603      	mov	r3, r0
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d002      	beq.n	80135dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80135d6:	4b16      	ldr	r3, [pc, #88]	; (8013630 <xTaskResumeAll+0x12c>)
 80135d8:	2201      	movs	r2, #1
 80135da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	3b01      	subs	r3, #1
 80135e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d1f1      	bne.n	80135cc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80135e8:	4b12      	ldr	r3, [pc, #72]	; (8013634 <xTaskResumeAll+0x130>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80135ee:	4b10      	ldr	r3, [pc, #64]	; (8013630 <xTaskResumeAll+0x12c>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d009      	beq.n	801360a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80135f6:	2301      	movs	r3, #1
 80135f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80135fa:	4b0f      	ldr	r3, [pc, #60]	; (8013638 <xTaskResumeAll+0x134>)
 80135fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013600:	601a      	str	r2, [r3, #0]
 8013602:	f3bf 8f4f 	dsb	sy
 8013606:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801360a:	f001 f925 	bl	8014858 <vPortExitCritical>

	return xAlreadyYielded;
 801360e:	68bb      	ldr	r3, [r7, #8]
}
 8013610:	4618      	mov	r0, r3
 8013612:	3710      	adds	r7, #16
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}
 8013618:	2000158c 	.word	0x2000158c
 801361c:	20001564 	.word	0x20001564
 8013620:	20001524 	.word	0x20001524
 8013624:	2000156c 	.word	0x2000156c
 8013628:	20001094 	.word	0x20001094
 801362c:	20001090 	.word	0x20001090
 8013630:	20001578 	.word	0x20001578
 8013634:	20001574 	.word	0x20001574
 8013638:	e000ed04 	.word	0xe000ed04

0801363c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801363c:	b480      	push	{r7}
 801363e:	b083      	sub	sp, #12
 8013640:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013642:	4b05      	ldr	r3, [pc, #20]	; (8013658 <xTaskGetTickCount+0x1c>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013648:	687b      	ldr	r3, [r7, #4]
}
 801364a:	4618      	mov	r0, r3
 801364c:	370c      	adds	r7, #12
 801364e:	46bd      	mov	sp, r7
 8013650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013654:	4770      	bx	lr
 8013656:	bf00      	nop
 8013658:	20001568 	.word	0x20001568

0801365c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013662:	f001 f9a7 	bl	80149b4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013666:	2300      	movs	r3, #0
 8013668:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801366a:	4b04      	ldr	r3, [pc, #16]	; (801367c <xTaskGetTickCountFromISR+0x20>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013670:	683b      	ldr	r3, [r7, #0]
}
 8013672:	4618      	mov	r0, r3
 8013674:	3708      	adds	r7, #8
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	20001568 	.word	0x20001568

08013680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b086      	sub	sp, #24
 8013684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013686:	2300      	movs	r3, #0
 8013688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801368a:	4b4e      	ldr	r3, [pc, #312]	; (80137c4 <xTaskIncrementTick+0x144>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	f040 8088 	bne.w	80137a4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013694:	4b4c      	ldr	r3, [pc, #304]	; (80137c8 <xTaskIncrementTick+0x148>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	3301      	adds	r3, #1
 801369a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801369c:	4a4a      	ldr	r2, [pc, #296]	; (80137c8 <xTaskIncrementTick+0x148>)
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d11f      	bne.n	80136e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80136a8:	4b48      	ldr	r3, [pc, #288]	; (80137cc <xTaskIncrementTick+0x14c>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d009      	beq.n	80136c6 <xTaskIncrementTick+0x46>
 80136b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b6:	f383 8811 	msr	BASEPRI, r3
 80136ba:	f3bf 8f6f 	isb	sy
 80136be:	f3bf 8f4f 	dsb	sy
 80136c2:	603b      	str	r3, [r7, #0]
 80136c4:	e7fe      	b.n	80136c4 <xTaskIncrementTick+0x44>
 80136c6:	4b41      	ldr	r3, [pc, #260]	; (80137cc <xTaskIncrementTick+0x14c>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	60fb      	str	r3, [r7, #12]
 80136cc:	4b40      	ldr	r3, [pc, #256]	; (80137d0 <xTaskIncrementTick+0x150>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4a3e      	ldr	r2, [pc, #248]	; (80137cc <xTaskIncrementTick+0x14c>)
 80136d2:	6013      	str	r3, [r2, #0]
 80136d4:	4a3e      	ldr	r2, [pc, #248]	; (80137d0 <xTaskIncrementTick+0x150>)
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	6013      	str	r3, [r2, #0]
 80136da:	4b3e      	ldr	r3, [pc, #248]	; (80137d4 <xTaskIncrementTick+0x154>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	3301      	adds	r3, #1
 80136e0:	4a3c      	ldr	r2, [pc, #240]	; (80137d4 <xTaskIncrementTick+0x154>)
 80136e2:	6013      	str	r3, [r2, #0]
 80136e4:	f000 fac4 	bl	8013c70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80136e8:	4b3b      	ldr	r3, [pc, #236]	; (80137d8 <xTaskIncrementTick+0x158>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	693a      	ldr	r2, [r7, #16]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d349      	bcc.n	8013786 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80136f2:	4b36      	ldr	r3, [pc, #216]	; (80137cc <xTaskIncrementTick+0x14c>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d104      	bne.n	8013706 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136fc:	4b36      	ldr	r3, [pc, #216]	; (80137d8 <xTaskIncrementTick+0x158>)
 80136fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013702:	601a      	str	r2, [r3, #0]
					break;
 8013704:	e03f      	b.n	8013786 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013706:	4b31      	ldr	r3, [pc, #196]	; (80137cc <xTaskIncrementTick+0x14c>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	68db      	ldr	r3, [r3, #12]
 801370c:	68db      	ldr	r3, [r3, #12]
 801370e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013716:	693a      	ldr	r2, [r7, #16]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	429a      	cmp	r2, r3
 801371c:	d203      	bcs.n	8013726 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801371e:	4a2e      	ldr	r2, [pc, #184]	; (80137d8 <xTaskIncrementTick+0x158>)
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013724:	e02f      	b.n	8013786 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	3304      	adds	r3, #4
 801372a:	4618      	mov	r0, r3
 801372c:	f7fe feea 	bl	8012504 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013734:	2b00      	cmp	r3, #0
 8013736:	d004      	beq.n	8013742 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	3318      	adds	r3, #24
 801373c:	4618      	mov	r0, r3
 801373e:	f7fe fee1 	bl	8012504 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013746:	4b25      	ldr	r3, [pc, #148]	; (80137dc <xTaskIncrementTick+0x15c>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	429a      	cmp	r2, r3
 801374c:	d903      	bls.n	8013756 <xTaskIncrementTick+0xd6>
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013752:	4a22      	ldr	r2, [pc, #136]	; (80137dc <xTaskIncrementTick+0x15c>)
 8013754:	6013      	str	r3, [r2, #0]
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801375a:	4613      	mov	r3, r2
 801375c:	009b      	lsls	r3, r3, #2
 801375e:	4413      	add	r3, r2
 8013760:	009b      	lsls	r3, r3, #2
 8013762:	4a1f      	ldr	r2, [pc, #124]	; (80137e0 <xTaskIncrementTick+0x160>)
 8013764:	441a      	add	r2, r3
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	3304      	adds	r3, #4
 801376a:	4619      	mov	r1, r3
 801376c:	4610      	mov	r0, r2
 801376e:	f7fe fe6c 	bl	801244a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013776:	4b1b      	ldr	r3, [pc, #108]	; (80137e4 <xTaskIncrementTick+0x164>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801377c:	429a      	cmp	r2, r3
 801377e:	d3b8      	bcc.n	80136f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013780:	2301      	movs	r3, #1
 8013782:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013784:	e7b5      	b.n	80136f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013786:	4b17      	ldr	r3, [pc, #92]	; (80137e4 <xTaskIncrementTick+0x164>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801378c:	4914      	ldr	r1, [pc, #80]	; (80137e0 <xTaskIncrementTick+0x160>)
 801378e:	4613      	mov	r3, r2
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	4413      	add	r3, r2
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	440b      	add	r3, r1
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	2b01      	cmp	r3, #1
 801379c:	d907      	bls.n	80137ae <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801379e:	2301      	movs	r3, #1
 80137a0:	617b      	str	r3, [r7, #20]
 80137a2:	e004      	b.n	80137ae <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80137a4:	4b10      	ldr	r3, [pc, #64]	; (80137e8 <xTaskIncrementTick+0x168>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	3301      	adds	r3, #1
 80137aa:	4a0f      	ldr	r2, [pc, #60]	; (80137e8 <xTaskIncrementTick+0x168>)
 80137ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80137ae:	4b0f      	ldr	r3, [pc, #60]	; (80137ec <xTaskIncrementTick+0x16c>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d001      	beq.n	80137ba <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80137b6:	2301      	movs	r3, #1
 80137b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80137ba:	697b      	ldr	r3, [r7, #20]
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3718      	adds	r7, #24
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	2000158c 	.word	0x2000158c
 80137c8:	20001568 	.word	0x20001568
 80137cc:	2000151c 	.word	0x2000151c
 80137d0:	20001520 	.word	0x20001520
 80137d4:	2000157c 	.word	0x2000157c
 80137d8:	20001584 	.word	0x20001584
 80137dc:	2000156c 	.word	0x2000156c
 80137e0:	20001094 	.word	0x20001094
 80137e4:	20001090 	.word	0x20001090
 80137e8:	20001574 	.word	0x20001574
 80137ec:	20001578 	.word	0x20001578

080137f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80137f0:	b480      	push	{r7}
 80137f2:	b085      	sub	sp, #20
 80137f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80137f6:	4b27      	ldr	r3, [pc, #156]	; (8013894 <vTaskSwitchContext+0xa4>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d003      	beq.n	8013806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80137fe:	4b26      	ldr	r3, [pc, #152]	; (8013898 <vTaskSwitchContext+0xa8>)
 8013800:	2201      	movs	r2, #1
 8013802:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013804:	e040      	b.n	8013888 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8013806:	4b24      	ldr	r3, [pc, #144]	; (8013898 <vTaskSwitchContext+0xa8>)
 8013808:	2200      	movs	r2, #0
 801380a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801380c:	4b23      	ldr	r3, [pc, #140]	; (801389c <vTaskSwitchContext+0xac>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	60fb      	str	r3, [r7, #12]
 8013812:	e00f      	b.n	8013834 <vTaskSwitchContext+0x44>
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d109      	bne.n	801382e <vTaskSwitchContext+0x3e>
 801381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381e:	f383 8811 	msr	BASEPRI, r3
 8013822:	f3bf 8f6f 	isb	sy
 8013826:	f3bf 8f4f 	dsb	sy
 801382a:	607b      	str	r3, [r7, #4]
 801382c:	e7fe      	b.n	801382c <vTaskSwitchContext+0x3c>
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	3b01      	subs	r3, #1
 8013832:	60fb      	str	r3, [r7, #12]
 8013834:	491a      	ldr	r1, [pc, #104]	; (80138a0 <vTaskSwitchContext+0xb0>)
 8013836:	68fa      	ldr	r2, [r7, #12]
 8013838:	4613      	mov	r3, r2
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	4413      	add	r3, r2
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	440b      	add	r3, r1
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d0e5      	beq.n	8013814 <vTaskSwitchContext+0x24>
 8013848:	68fa      	ldr	r2, [r7, #12]
 801384a:	4613      	mov	r3, r2
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	4413      	add	r3, r2
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	4a13      	ldr	r2, [pc, #76]	; (80138a0 <vTaskSwitchContext+0xb0>)
 8013854:	4413      	add	r3, r2
 8013856:	60bb      	str	r3, [r7, #8]
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	685a      	ldr	r2, [r3, #4]
 801385e:	68bb      	ldr	r3, [r7, #8]
 8013860:	605a      	str	r2, [r3, #4]
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	685a      	ldr	r2, [r3, #4]
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	3308      	adds	r3, #8
 801386a:	429a      	cmp	r2, r3
 801386c:	d104      	bne.n	8013878 <vTaskSwitchContext+0x88>
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	685a      	ldr	r2, [r3, #4]
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	605a      	str	r2, [r3, #4]
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	68db      	ldr	r3, [r3, #12]
 801387e:	4a09      	ldr	r2, [pc, #36]	; (80138a4 <vTaskSwitchContext+0xb4>)
 8013880:	6013      	str	r3, [r2, #0]
 8013882:	4a06      	ldr	r2, [pc, #24]	; (801389c <vTaskSwitchContext+0xac>)
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	6013      	str	r3, [r2, #0]
}
 8013888:	bf00      	nop
 801388a:	3714      	adds	r7, #20
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr
 8013894:	2000158c 	.word	0x2000158c
 8013898:	20001578 	.word	0x20001578
 801389c:	2000156c 	.word	0x2000156c
 80138a0:	20001094 	.word	0x20001094
 80138a4:	20001090 	.word	0x20001090

080138a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b084      	sub	sp, #16
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d109      	bne.n	80138cc <vTaskPlaceOnEventList+0x24>
 80138b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138bc:	f383 8811 	msr	BASEPRI, r3
 80138c0:	f3bf 8f6f 	isb	sy
 80138c4:	f3bf 8f4f 	dsb	sy
 80138c8:	60fb      	str	r3, [r7, #12]
 80138ca:	e7fe      	b.n	80138ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80138cc:	4b07      	ldr	r3, [pc, #28]	; (80138ec <vTaskPlaceOnEventList+0x44>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	3318      	adds	r3, #24
 80138d2:	4619      	mov	r1, r3
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7fe fddc 	bl	8012492 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80138da:	2101      	movs	r1, #1
 80138dc:	6838      	ldr	r0, [r7, #0]
 80138de:	f000 fa71 	bl	8013dc4 <prvAddCurrentTaskToDelayedList>
}
 80138e2:	bf00      	nop
 80138e4:	3710      	adds	r7, #16
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	20001090 	.word	0x20001090

080138f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d109      	bne.n	8013916 <vTaskPlaceOnEventListRestricted+0x26>
 8013902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013906:	f383 8811 	msr	BASEPRI, r3
 801390a:	f3bf 8f6f 	isb	sy
 801390e:	f3bf 8f4f 	dsb	sy
 8013912:	617b      	str	r3, [r7, #20]
 8013914:	e7fe      	b.n	8013914 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013916:	4b0a      	ldr	r3, [pc, #40]	; (8013940 <vTaskPlaceOnEventListRestricted+0x50>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	3318      	adds	r3, #24
 801391c:	4619      	mov	r1, r3
 801391e:	68f8      	ldr	r0, [r7, #12]
 8013920:	f7fe fd93 	bl	801244a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d002      	beq.n	8013930 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801392a:	f04f 33ff 	mov.w	r3, #4294967295
 801392e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013930:	6879      	ldr	r1, [r7, #4]
 8013932:	68b8      	ldr	r0, [r7, #8]
 8013934:	f000 fa46 	bl	8013dc4 <prvAddCurrentTaskToDelayedList>
	}
 8013938:	bf00      	nop
 801393a:	3718      	adds	r7, #24
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}
 8013940:	20001090 	.word	0x20001090

08013944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b086      	sub	sp, #24
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	68db      	ldr	r3, [r3, #12]
 8013950:	68db      	ldr	r3, [r3, #12]
 8013952:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d109      	bne.n	801396e <xTaskRemoveFromEventList+0x2a>
 801395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395e:	f383 8811 	msr	BASEPRI, r3
 8013962:	f3bf 8f6f 	isb	sy
 8013966:	f3bf 8f4f 	dsb	sy
 801396a:	60fb      	str	r3, [r7, #12]
 801396c:	e7fe      	b.n	801396c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	3318      	adds	r3, #24
 8013972:	4618      	mov	r0, r3
 8013974:	f7fe fdc6 	bl	8012504 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013978:	4b1d      	ldr	r3, [pc, #116]	; (80139f0 <xTaskRemoveFromEventList+0xac>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d11d      	bne.n	80139bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	3304      	adds	r3, #4
 8013984:	4618      	mov	r0, r3
 8013986:	f7fe fdbd 	bl	8012504 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801398e:	4b19      	ldr	r3, [pc, #100]	; (80139f4 <xTaskRemoveFromEventList+0xb0>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	429a      	cmp	r2, r3
 8013994:	d903      	bls.n	801399e <xTaskRemoveFromEventList+0x5a>
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801399a:	4a16      	ldr	r2, [pc, #88]	; (80139f4 <xTaskRemoveFromEventList+0xb0>)
 801399c:	6013      	str	r3, [r2, #0]
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139a2:	4613      	mov	r3, r2
 80139a4:	009b      	lsls	r3, r3, #2
 80139a6:	4413      	add	r3, r2
 80139a8:	009b      	lsls	r3, r3, #2
 80139aa:	4a13      	ldr	r2, [pc, #76]	; (80139f8 <xTaskRemoveFromEventList+0xb4>)
 80139ac:	441a      	add	r2, r3
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	3304      	adds	r3, #4
 80139b2:	4619      	mov	r1, r3
 80139b4:	4610      	mov	r0, r2
 80139b6:	f7fe fd48 	bl	801244a <vListInsertEnd>
 80139ba:	e005      	b.n	80139c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	3318      	adds	r3, #24
 80139c0:	4619      	mov	r1, r3
 80139c2:	480e      	ldr	r0, [pc, #56]	; (80139fc <xTaskRemoveFromEventList+0xb8>)
 80139c4:	f7fe fd41 	bl	801244a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139cc:	4b0c      	ldr	r3, [pc, #48]	; (8013a00 <xTaskRemoveFromEventList+0xbc>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d905      	bls.n	80139e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80139d6:	2301      	movs	r3, #1
 80139d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80139da:	4b0a      	ldr	r3, [pc, #40]	; (8013a04 <xTaskRemoveFromEventList+0xc0>)
 80139dc:	2201      	movs	r2, #1
 80139de:	601a      	str	r2, [r3, #0]
 80139e0:	e001      	b.n	80139e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80139e2:	2300      	movs	r3, #0
 80139e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80139e6:	697b      	ldr	r3, [r7, #20]
}
 80139e8:	4618      	mov	r0, r3
 80139ea:	3718      	adds	r7, #24
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}
 80139f0:	2000158c 	.word	0x2000158c
 80139f4:	2000156c 	.word	0x2000156c
 80139f8:	20001094 	.word	0x20001094
 80139fc:	20001524 	.word	0x20001524
 8013a00:	20001090 	.word	0x20001090
 8013a04:	20001578 	.word	0x20001578

08013a08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013a10:	4b06      	ldr	r3, [pc, #24]	; (8013a2c <vTaskInternalSetTimeOutState+0x24>)
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013a18:	4b05      	ldr	r3, [pc, #20]	; (8013a30 <vTaskInternalSetTimeOutState+0x28>)
 8013a1a:	681a      	ldr	r2, [r3, #0]
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	605a      	str	r2, [r3, #4]
}
 8013a20:	bf00      	nop
 8013a22:	370c      	adds	r7, #12
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr
 8013a2c:	2000157c 	.word	0x2000157c
 8013a30:	20001568 	.word	0x20001568

08013a34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b088      	sub	sp, #32
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d109      	bne.n	8013a58 <xTaskCheckForTimeOut+0x24>
 8013a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a48:	f383 8811 	msr	BASEPRI, r3
 8013a4c:	f3bf 8f6f 	isb	sy
 8013a50:	f3bf 8f4f 	dsb	sy
 8013a54:	613b      	str	r3, [r7, #16]
 8013a56:	e7fe      	b.n	8013a56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d109      	bne.n	8013a72 <xTaskCheckForTimeOut+0x3e>
 8013a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a62:	f383 8811 	msr	BASEPRI, r3
 8013a66:	f3bf 8f6f 	isb	sy
 8013a6a:	f3bf 8f4f 	dsb	sy
 8013a6e:	60fb      	str	r3, [r7, #12]
 8013a70:	e7fe      	b.n	8013a70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013a72:	f000 fec3 	bl	80147fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013a76:	4b1d      	ldr	r3, [pc, #116]	; (8013aec <xTaskCheckForTimeOut+0xb8>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	69ba      	ldr	r2, [r7, #24]
 8013a82:	1ad3      	subs	r3, r2, r3
 8013a84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a8e:	d102      	bne.n	8013a96 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013a90:	2300      	movs	r3, #0
 8013a92:	61fb      	str	r3, [r7, #28]
 8013a94:	e023      	b.n	8013ade <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681a      	ldr	r2, [r3, #0]
 8013a9a:	4b15      	ldr	r3, [pc, #84]	; (8013af0 <xTaskCheckForTimeOut+0xbc>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d007      	beq.n	8013ab2 <xTaskCheckForTimeOut+0x7e>
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	69ba      	ldr	r2, [r7, #24]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d302      	bcc.n	8013ab2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013aac:	2301      	movs	r3, #1
 8013aae:	61fb      	str	r3, [r7, #28]
 8013ab0:	e015      	b.n	8013ade <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	697a      	ldr	r2, [r7, #20]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d20b      	bcs.n	8013ad4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	681a      	ldr	r2, [r3, #0]
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	1ad2      	subs	r2, r2, r3
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f7ff ff9d 	bl	8013a08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	61fb      	str	r3, [r7, #28]
 8013ad2:	e004      	b.n	8013ade <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013ada:	2301      	movs	r3, #1
 8013adc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013ade:	f000 febb 	bl	8014858 <vPortExitCritical>

	return xReturn;
 8013ae2:	69fb      	ldr	r3, [r7, #28]
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3720      	adds	r7, #32
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	20001568 	.word	0x20001568
 8013af0:	2000157c 	.word	0x2000157c

08013af4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013af4:	b480      	push	{r7}
 8013af6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013af8:	4b03      	ldr	r3, [pc, #12]	; (8013b08 <vTaskMissedYield+0x14>)
 8013afa:	2201      	movs	r2, #1
 8013afc:	601a      	str	r2, [r3, #0]
}
 8013afe:	bf00      	nop
 8013b00:	46bd      	mov	sp, r7
 8013b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b06:	4770      	bx	lr
 8013b08:	20001578 	.word	0x20001578

08013b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013b14:	f000 f852 	bl	8013bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013b18:	4b06      	ldr	r3, [pc, #24]	; (8013b34 <prvIdleTask+0x28>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d9f9      	bls.n	8013b14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013b20:	4b05      	ldr	r3, [pc, #20]	; (8013b38 <prvIdleTask+0x2c>)
 8013b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b26:	601a      	str	r2, [r3, #0]
 8013b28:	f3bf 8f4f 	dsb	sy
 8013b2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013b30:	e7f0      	b.n	8013b14 <prvIdleTask+0x8>
 8013b32:	bf00      	nop
 8013b34:	20001094 	.word	0x20001094
 8013b38:	e000ed04 	.word	0xe000ed04

08013b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b082      	sub	sp, #8
 8013b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b42:	2300      	movs	r3, #0
 8013b44:	607b      	str	r3, [r7, #4]
 8013b46:	e00c      	b.n	8013b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013b48:	687a      	ldr	r2, [r7, #4]
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	4413      	add	r3, r2
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	4a12      	ldr	r2, [pc, #72]	; (8013b9c <prvInitialiseTaskLists+0x60>)
 8013b54:	4413      	add	r3, r2
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7fe fc4a 	bl	80123f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	3301      	adds	r3, #1
 8013b60:	607b      	str	r3, [r7, #4]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b37      	cmp	r3, #55	; 0x37
 8013b66:	d9ef      	bls.n	8013b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013b68:	480d      	ldr	r0, [pc, #52]	; (8013ba0 <prvInitialiseTaskLists+0x64>)
 8013b6a:	f7fe fc41 	bl	80123f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013b6e:	480d      	ldr	r0, [pc, #52]	; (8013ba4 <prvInitialiseTaskLists+0x68>)
 8013b70:	f7fe fc3e 	bl	80123f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013b74:	480c      	ldr	r0, [pc, #48]	; (8013ba8 <prvInitialiseTaskLists+0x6c>)
 8013b76:	f7fe fc3b 	bl	80123f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013b7a:	480c      	ldr	r0, [pc, #48]	; (8013bac <prvInitialiseTaskLists+0x70>)
 8013b7c:	f7fe fc38 	bl	80123f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013b80:	480b      	ldr	r0, [pc, #44]	; (8013bb0 <prvInitialiseTaskLists+0x74>)
 8013b82:	f7fe fc35 	bl	80123f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013b86:	4b0b      	ldr	r3, [pc, #44]	; (8013bb4 <prvInitialiseTaskLists+0x78>)
 8013b88:	4a05      	ldr	r2, [pc, #20]	; (8013ba0 <prvInitialiseTaskLists+0x64>)
 8013b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013b8c:	4b0a      	ldr	r3, [pc, #40]	; (8013bb8 <prvInitialiseTaskLists+0x7c>)
 8013b8e:	4a05      	ldr	r2, [pc, #20]	; (8013ba4 <prvInitialiseTaskLists+0x68>)
 8013b90:	601a      	str	r2, [r3, #0]
}
 8013b92:	bf00      	nop
 8013b94:	3708      	adds	r7, #8
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	20001094 	.word	0x20001094
 8013ba0:	200014f4 	.word	0x200014f4
 8013ba4:	20001508 	.word	0x20001508
 8013ba8:	20001524 	.word	0x20001524
 8013bac:	20001538 	.word	0x20001538
 8013bb0:	20001550 	.word	0x20001550
 8013bb4:	2000151c 	.word	0x2000151c
 8013bb8:	20001520 	.word	0x20001520

08013bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013bc2:	e019      	b.n	8013bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013bc4:	f000 fe1a 	bl	80147fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bc8:	4b0f      	ldr	r3, [pc, #60]	; (8013c08 <prvCheckTasksWaitingTermination+0x4c>)
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	68db      	ldr	r3, [r3, #12]
 8013bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	3304      	adds	r3, #4
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7fe fc95 	bl	8012504 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013bda:	4b0c      	ldr	r3, [pc, #48]	; (8013c0c <prvCheckTasksWaitingTermination+0x50>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	3b01      	subs	r3, #1
 8013be0:	4a0a      	ldr	r2, [pc, #40]	; (8013c0c <prvCheckTasksWaitingTermination+0x50>)
 8013be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013be4:	4b0a      	ldr	r3, [pc, #40]	; (8013c10 <prvCheckTasksWaitingTermination+0x54>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	3b01      	subs	r3, #1
 8013bea:	4a09      	ldr	r2, [pc, #36]	; (8013c10 <prvCheckTasksWaitingTermination+0x54>)
 8013bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013bee:	f000 fe33 	bl	8014858 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 f80e 	bl	8013c14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013bf8:	4b05      	ldr	r3, [pc, #20]	; (8013c10 <prvCheckTasksWaitingTermination+0x54>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d1e1      	bne.n	8013bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013c00:	bf00      	nop
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	20001538 	.word	0x20001538
 8013c0c:	20001564 	.word	0x20001564
 8013c10:	2000154c 	.word	0x2000154c

08013c14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b084      	sub	sp, #16
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d108      	bne.n	8013c38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f000 ff12 	bl	8014a54 <vPortFree>
				vPortFree( pxTCB );
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f000 ff0f 	bl	8014a54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013c36:	e017      	b.n	8013c68 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d103      	bne.n	8013c4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f000 ff06 	bl	8014a54 <vPortFree>
	}
 8013c48:	e00e      	b.n	8013c68 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013c50:	2b02      	cmp	r3, #2
 8013c52:	d009      	beq.n	8013c68 <prvDeleteTCB+0x54>
 8013c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c58:	f383 8811 	msr	BASEPRI, r3
 8013c5c:	f3bf 8f6f 	isb	sy
 8013c60:	f3bf 8f4f 	dsb	sy
 8013c64:	60fb      	str	r3, [r7, #12]
 8013c66:	e7fe      	b.n	8013c66 <prvDeleteTCB+0x52>
	}
 8013c68:	bf00      	nop
 8013c6a:	3710      	adds	r7, #16
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c76:	4b0c      	ldr	r3, [pc, #48]	; (8013ca8 <prvResetNextTaskUnblockTime+0x38>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d104      	bne.n	8013c8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013c80:	4b0a      	ldr	r3, [pc, #40]	; (8013cac <prvResetNextTaskUnblockTime+0x3c>)
 8013c82:	f04f 32ff 	mov.w	r2, #4294967295
 8013c86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013c88:	e008      	b.n	8013c9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c8a:	4b07      	ldr	r3, [pc, #28]	; (8013ca8 <prvResetNextTaskUnblockTime+0x38>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	685b      	ldr	r3, [r3, #4]
 8013c98:	4a04      	ldr	r2, [pc, #16]	; (8013cac <prvResetNextTaskUnblockTime+0x3c>)
 8013c9a:	6013      	str	r3, [r2, #0]
}
 8013c9c:	bf00      	nop
 8013c9e:	370c      	adds	r7, #12
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr
 8013ca8:	2000151c 	.word	0x2000151c
 8013cac:	20001584 	.word	0x20001584

08013cb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013cb0:	b480      	push	{r7}
 8013cb2:	b083      	sub	sp, #12
 8013cb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013cb6:	4b0b      	ldr	r3, [pc, #44]	; (8013ce4 <xTaskGetSchedulerState+0x34>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d102      	bne.n	8013cc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	607b      	str	r3, [r7, #4]
 8013cc2:	e008      	b.n	8013cd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cc4:	4b08      	ldr	r3, [pc, #32]	; (8013ce8 <xTaskGetSchedulerState+0x38>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d102      	bne.n	8013cd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013ccc:	2302      	movs	r3, #2
 8013cce:	607b      	str	r3, [r7, #4]
 8013cd0:	e001      	b.n	8013cd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013cd6:	687b      	ldr	r3, [r7, #4]
	}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	370c      	adds	r7, #12
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce2:	4770      	bx	lr
 8013ce4:	20001570 	.word	0x20001570
 8013ce8:	2000158c 	.word	0x2000158c

08013cec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b086      	sub	sp, #24
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d054      	beq.n	8013dac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013d02:	4b2d      	ldr	r3, [pc, #180]	; (8013db8 <xTaskPriorityDisinherit+0xcc>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	693a      	ldr	r2, [r7, #16]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d009      	beq.n	8013d20 <xTaskPriorityDisinherit+0x34>
 8013d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d10:	f383 8811 	msr	BASEPRI, r3
 8013d14:	f3bf 8f6f 	isb	sy
 8013d18:	f3bf 8f4f 	dsb	sy
 8013d1c:	60fb      	str	r3, [r7, #12]
 8013d1e:	e7fe      	b.n	8013d1e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d109      	bne.n	8013d3c <xTaskPriorityDisinherit+0x50>
 8013d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d2c:	f383 8811 	msr	BASEPRI, r3
 8013d30:	f3bf 8f6f 	isb	sy
 8013d34:	f3bf 8f4f 	dsb	sy
 8013d38:	60bb      	str	r3, [r7, #8]
 8013d3a:	e7fe      	b.n	8013d3a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d40:	1e5a      	subs	r2, r3, #1
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d4a:	693b      	ldr	r3, [r7, #16]
 8013d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d02c      	beq.n	8013dac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d128      	bne.n	8013dac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	3304      	adds	r3, #4
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7fe fbd0 	bl	8012504 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d7c:	4b0f      	ldr	r3, [pc, #60]	; (8013dbc <xTaskPriorityDisinherit+0xd0>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d903      	bls.n	8013d8c <xTaskPriorityDisinherit+0xa0>
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d88:	4a0c      	ldr	r2, [pc, #48]	; (8013dbc <xTaskPriorityDisinherit+0xd0>)
 8013d8a:	6013      	str	r3, [r2, #0]
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d90:	4613      	mov	r3, r2
 8013d92:	009b      	lsls	r3, r3, #2
 8013d94:	4413      	add	r3, r2
 8013d96:	009b      	lsls	r3, r3, #2
 8013d98:	4a09      	ldr	r2, [pc, #36]	; (8013dc0 <xTaskPriorityDisinherit+0xd4>)
 8013d9a:	441a      	add	r2, r3
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	3304      	adds	r3, #4
 8013da0:	4619      	mov	r1, r3
 8013da2:	4610      	mov	r0, r2
 8013da4:	f7fe fb51 	bl	801244a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013da8:	2301      	movs	r3, #1
 8013daa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013dac:	697b      	ldr	r3, [r7, #20]
	}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3718      	adds	r7, #24
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}
 8013db6:	bf00      	nop
 8013db8:	20001090 	.word	0x20001090
 8013dbc:	2000156c 	.word	0x2000156c
 8013dc0:	20001094 	.word	0x20001094

08013dc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b084      	sub	sp, #16
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013dce:	4b21      	ldr	r3, [pc, #132]	; (8013e54 <prvAddCurrentTaskToDelayedList+0x90>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013dd4:	4b20      	ldr	r3, [pc, #128]	; (8013e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	3304      	adds	r3, #4
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7fe fb92 	bl	8012504 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013de6:	d10a      	bne.n	8013dfe <prvAddCurrentTaskToDelayedList+0x3a>
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d007      	beq.n	8013dfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013dee:	4b1a      	ldr	r3, [pc, #104]	; (8013e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	3304      	adds	r3, #4
 8013df4:	4619      	mov	r1, r3
 8013df6:	4819      	ldr	r0, [pc, #100]	; (8013e5c <prvAddCurrentTaskToDelayedList+0x98>)
 8013df8:	f7fe fb27 	bl	801244a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013dfc:	e026      	b.n	8013e4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013dfe:	68fa      	ldr	r2, [r7, #12]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	4413      	add	r3, r2
 8013e04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013e06:	4b14      	ldr	r3, [pc, #80]	; (8013e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	68ba      	ldr	r2, [r7, #8]
 8013e0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013e0e:	68ba      	ldr	r2, [r7, #8]
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d209      	bcs.n	8013e2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013e16:	4b12      	ldr	r3, [pc, #72]	; (8013e60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013e18:	681a      	ldr	r2, [r3, #0]
 8013e1a:	4b0f      	ldr	r3, [pc, #60]	; (8013e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	3304      	adds	r3, #4
 8013e20:	4619      	mov	r1, r3
 8013e22:	4610      	mov	r0, r2
 8013e24:	f7fe fb35 	bl	8012492 <vListInsert>
}
 8013e28:	e010      	b.n	8013e4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013e2a:	4b0e      	ldr	r3, [pc, #56]	; (8013e64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013e2c:	681a      	ldr	r2, [r3, #0]
 8013e2e:	4b0a      	ldr	r3, [pc, #40]	; (8013e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	3304      	adds	r3, #4
 8013e34:	4619      	mov	r1, r3
 8013e36:	4610      	mov	r0, r2
 8013e38:	f7fe fb2b 	bl	8012492 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013e3c:	4b0a      	ldr	r3, [pc, #40]	; (8013e68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	68ba      	ldr	r2, [r7, #8]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d202      	bcs.n	8013e4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013e46:	4a08      	ldr	r2, [pc, #32]	; (8013e68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	6013      	str	r3, [r2, #0]
}
 8013e4c:	bf00      	nop
 8013e4e:	3710      	adds	r7, #16
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	20001568 	.word	0x20001568
 8013e58:	20001090 	.word	0x20001090
 8013e5c:	20001550 	.word	0x20001550
 8013e60:	20001520 	.word	0x20001520
 8013e64:	2000151c 	.word	0x2000151c
 8013e68:	20001584 	.word	0x20001584

08013e6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b08a      	sub	sp, #40	; 0x28
 8013e70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013e72:	2300      	movs	r3, #0
 8013e74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013e76:	f000 fb5b 	bl	8014530 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013e7a:	4b1c      	ldr	r3, [pc, #112]	; (8013eec <xTimerCreateTimerTask+0x80>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d021      	beq.n	8013ec6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013e82:	2300      	movs	r3, #0
 8013e84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013e86:	2300      	movs	r3, #0
 8013e88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013e8a:	1d3a      	adds	r2, r7, #4
 8013e8c:	f107 0108 	add.w	r1, r7, #8
 8013e90:	f107 030c 	add.w	r3, r7, #12
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7fe fa91 	bl	80123bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013e9a:	6879      	ldr	r1, [r7, #4]
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	68fa      	ldr	r2, [r7, #12]
 8013ea0:	9202      	str	r2, [sp, #8]
 8013ea2:	9301      	str	r3, [sp, #4]
 8013ea4:	2302      	movs	r3, #2
 8013ea6:	9300      	str	r3, [sp, #0]
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	460a      	mov	r2, r1
 8013eac:	4910      	ldr	r1, [pc, #64]	; (8013ef0 <xTimerCreateTimerTask+0x84>)
 8013eae:	4811      	ldr	r0, [pc, #68]	; (8013ef4 <xTimerCreateTimerTask+0x88>)
 8013eb0:	f7ff f8e4 	bl	801307c <xTaskCreateStatic>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	4b10      	ldr	r3, [pc, #64]	; (8013ef8 <xTimerCreateTimerTask+0x8c>)
 8013eb8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013eba:	4b0f      	ldr	r3, [pc, #60]	; (8013ef8 <xTimerCreateTimerTask+0x8c>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d001      	beq.n	8013ec6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d109      	bne.n	8013ee0 <xTimerCreateTimerTask+0x74>
 8013ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed0:	f383 8811 	msr	BASEPRI, r3
 8013ed4:	f3bf 8f6f 	isb	sy
 8013ed8:	f3bf 8f4f 	dsb	sy
 8013edc:	613b      	str	r3, [r7, #16]
 8013ede:	e7fe      	b.n	8013ede <xTimerCreateTimerTask+0x72>
	return xReturn;
 8013ee0:	697b      	ldr	r3, [r7, #20]
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3718      	adds	r7, #24
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	bf00      	nop
 8013eec:	200015c0 	.word	0x200015c0
 8013ef0:	0801a420 	.word	0x0801a420
 8013ef4:	080140e5 	.word	0x080140e5
 8013ef8:	200015c4 	.word	0x200015c4

08013efc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b088      	sub	sp, #32
 8013f00:	af02      	add	r7, sp, #8
 8013f02:	60f8      	str	r0, [r7, #12]
 8013f04:	60b9      	str	r1, [r7, #8]
 8013f06:	607a      	str	r2, [r7, #4]
 8013f08:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8013f0a:	202c      	movs	r0, #44	; 0x2c
 8013f0c:	f000 fd90 	bl	8014a30 <pvPortMalloc>
 8013f10:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d00d      	beq.n	8013f34 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	9301      	str	r3, [sp, #4]
 8013f24:	6a3b      	ldr	r3, [r7, #32]
 8013f26:	9300      	str	r3, [sp, #0]
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	68b9      	ldr	r1, [r7, #8]
 8013f2e:	68f8      	ldr	r0, [r7, #12]
 8013f30:	f000 f805 	bl	8013f3e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8013f34:	697b      	ldr	r3, [r7, #20]
	}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3718      	adds	r7, #24
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}

08013f3e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8013f3e:	b580      	push	{r7, lr}
 8013f40:	b086      	sub	sp, #24
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	60f8      	str	r0, [r7, #12]
 8013f46:	60b9      	str	r1, [r7, #8]
 8013f48:	607a      	str	r2, [r7, #4]
 8013f4a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d109      	bne.n	8013f66 <prvInitialiseNewTimer+0x28>
 8013f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f56:	f383 8811 	msr	BASEPRI, r3
 8013f5a:	f3bf 8f6f 	isb	sy
 8013f5e:	f3bf 8f4f 	dsb	sy
 8013f62:	617b      	str	r3, [r7, #20]
 8013f64:	e7fe      	b.n	8013f64 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8013f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d01e      	beq.n	8013faa <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8013f6c:	f000 fae0 	bl	8014530 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8013f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f72:	68fa      	ldr	r2, [r7, #12]
 8013f74:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8013f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f78:	68ba      	ldr	r2, [r7, #8]
 8013f7a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8013f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7e:	683a      	ldr	r2, [r7, #0]
 8013f80:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8013f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f84:	6a3a      	ldr	r2, [r7, #32]
 8013f86:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8013f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8a:	3304      	adds	r3, #4
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f7fe fa4f 	bl	8012430 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d008      	beq.n	8013faa <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f9e:	f043 0304 	orr.w	r3, r3, #4
 8013fa2:	b2da      	uxtb	r2, r3
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8013faa:	bf00      	nop
 8013fac:	3718      	adds	r7, #24
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
	...

08013fb4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b08a      	sub	sp, #40	; 0x28
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
 8013fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d109      	bne.n	8013fe0 <xTimerGenericCommand+0x2c>
 8013fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd0:	f383 8811 	msr	BASEPRI, r3
 8013fd4:	f3bf 8f6f 	isb	sy
 8013fd8:	f3bf 8f4f 	dsb	sy
 8013fdc:	623b      	str	r3, [r7, #32]
 8013fde:	e7fe      	b.n	8013fde <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013fe0:	4b19      	ldr	r3, [pc, #100]	; (8014048 <xTimerGenericCommand+0x94>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d02a      	beq.n	801403e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	2b05      	cmp	r3, #5
 8013ff8:	dc18      	bgt.n	801402c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013ffa:	f7ff fe59 	bl	8013cb0 <xTaskGetSchedulerState>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2b02      	cmp	r3, #2
 8014002:	d109      	bne.n	8014018 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014004:	4b10      	ldr	r3, [pc, #64]	; (8014048 <xTimerGenericCommand+0x94>)
 8014006:	6818      	ldr	r0, [r3, #0]
 8014008:	f107 0110 	add.w	r1, r7, #16
 801400c:	2300      	movs	r3, #0
 801400e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014010:	f7fe fbe0 	bl	80127d4 <xQueueGenericSend>
 8014014:	6278      	str	r0, [r7, #36]	; 0x24
 8014016:	e012      	b.n	801403e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014018:	4b0b      	ldr	r3, [pc, #44]	; (8014048 <xTimerGenericCommand+0x94>)
 801401a:	6818      	ldr	r0, [r3, #0]
 801401c:	f107 0110 	add.w	r1, r7, #16
 8014020:	2300      	movs	r3, #0
 8014022:	2200      	movs	r2, #0
 8014024:	f7fe fbd6 	bl	80127d4 <xQueueGenericSend>
 8014028:	6278      	str	r0, [r7, #36]	; 0x24
 801402a:	e008      	b.n	801403e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801402c:	4b06      	ldr	r3, [pc, #24]	; (8014048 <xTimerGenericCommand+0x94>)
 801402e:	6818      	ldr	r0, [r3, #0]
 8014030:	f107 0110 	add.w	r1, r7, #16
 8014034:	2300      	movs	r3, #0
 8014036:	683a      	ldr	r2, [r7, #0]
 8014038:	f7fe fcc6 	bl	80129c8 <xQueueGenericSendFromISR>
 801403c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014040:	4618      	mov	r0, r3
 8014042:	3728      	adds	r7, #40	; 0x28
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	200015c0 	.word	0x200015c0

0801404c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b088      	sub	sp, #32
 8014050:	af02      	add	r7, sp, #8
 8014052:	6078      	str	r0, [r7, #4]
 8014054:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014056:	4b22      	ldr	r3, [pc, #136]	; (80140e0 <prvProcessExpiredTimer+0x94>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	68db      	ldr	r3, [r3, #12]
 801405e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	3304      	adds	r3, #4
 8014064:	4618      	mov	r0, r3
 8014066:	f7fe fa4d 	bl	8012504 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014070:	f003 0304 	and.w	r3, r3, #4
 8014074:	2b00      	cmp	r3, #0
 8014076:	d021      	beq.n	80140bc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	699a      	ldr	r2, [r3, #24]
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	18d1      	adds	r1, r2, r3
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	683a      	ldr	r2, [r7, #0]
 8014084:	6978      	ldr	r0, [r7, #20]
 8014086:	f000 f8d1 	bl	801422c <prvInsertTimerInActiveList>
 801408a:	4603      	mov	r3, r0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d01e      	beq.n	80140ce <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014090:	2300      	movs	r3, #0
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	2300      	movs	r3, #0
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	2100      	movs	r1, #0
 801409a:	6978      	ldr	r0, [r7, #20]
 801409c:	f7ff ff8a 	bl	8013fb4 <xTimerGenericCommand>
 80140a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d112      	bne.n	80140ce <prvProcessExpiredTimer+0x82>
 80140a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ac:	f383 8811 	msr	BASEPRI, r3
 80140b0:	f3bf 8f6f 	isb	sy
 80140b4:	f3bf 8f4f 	dsb	sy
 80140b8:	60fb      	str	r3, [r7, #12]
 80140ba:	e7fe      	b.n	80140ba <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140c2:	f023 0301 	bic.w	r3, r3, #1
 80140c6:	b2da      	uxtb	r2, r3
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	6a1b      	ldr	r3, [r3, #32]
 80140d2:	6978      	ldr	r0, [r7, #20]
 80140d4:	4798      	blx	r3
}
 80140d6:	bf00      	nop
 80140d8:	3718      	adds	r7, #24
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	200015b8 	.word	0x200015b8

080140e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b084      	sub	sp, #16
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80140ec:	f107 0308 	add.w	r3, r7, #8
 80140f0:	4618      	mov	r0, r3
 80140f2:	f000 f857 	bl	80141a4 <prvGetNextExpireTime>
 80140f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	4619      	mov	r1, r3
 80140fc:	68f8      	ldr	r0, [r7, #12]
 80140fe:	f000 f803 	bl	8014108 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014102:	f000 f8d5 	bl	80142b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014106:	e7f1      	b.n	80140ec <prvTimerTask+0x8>

08014108 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014112:	f7ff f9e9 	bl	80134e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014116:	f107 0308 	add.w	r3, r7, #8
 801411a:	4618      	mov	r0, r3
 801411c:	f000 f866 	bl	80141ec <prvSampleTimeNow>
 8014120:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d130      	bne.n	801418a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d10a      	bne.n	8014144 <prvProcessTimerOrBlockTask+0x3c>
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	429a      	cmp	r2, r3
 8014134:	d806      	bhi.n	8014144 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014136:	f7ff f9e5 	bl	8013504 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801413a:	68f9      	ldr	r1, [r7, #12]
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f7ff ff85 	bl	801404c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014142:	e024      	b.n	801418e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d008      	beq.n	801415c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801414a:	4b13      	ldr	r3, [pc, #76]	; (8014198 <prvProcessTimerOrBlockTask+0x90>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <prvProcessTimerOrBlockTask+0x50>
 8014154:	2301      	movs	r3, #1
 8014156:	e000      	b.n	801415a <prvProcessTimerOrBlockTask+0x52>
 8014158:	2300      	movs	r3, #0
 801415a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801415c:	4b0f      	ldr	r3, [pc, #60]	; (801419c <prvProcessTimerOrBlockTask+0x94>)
 801415e:	6818      	ldr	r0, [r3, #0]
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	1ad3      	subs	r3, r2, r3
 8014166:	683a      	ldr	r2, [r7, #0]
 8014168:	4619      	mov	r1, r3
 801416a:	f7fe ff53 	bl	8013014 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801416e:	f7ff f9c9 	bl	8013504 <xTaskResumeAll>
 8014172:	4603      	mov	r3, r0
 8014174:	2b00      	cmp	r3, #0
 8014176:	d10a      	bne.n	801418e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014178:	4b09      	ldr	r3, [pc, #36]	; (80141a0 <prvProcessTimerOrBlockTask+0x98>)
 801417a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801417e:	601a      	str	r2, [r3, #0]
 8014180:	f3bf 8f4f 	dsb	sy
 8014184:	f3bf 8f6f 	isb	sy
}
 8014188:	e001      	b.n	801418e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801418a:	f7ff f9bb 	bl	8013504 <xTaskResumeAll>
}
 801418e:	bf00      	nop
 8014190:	3710      	adds	r7, #16
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	200015bc 	.word	0x200015bc
 801419c:	200015c0 	.word	0x200015c0
 80141a0:	e000ed04 	.word	0xe000ed04

080141a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80141a4:	b480      	push	{r7}
 80141a6:	b085      	sub	sp, #20
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80141ac:	4b0e      	ldr	r3, [pc, #56]	; (80141e8 <prvGetNextExpireTime+0x44>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d101      	bne.n	80141ba <prvGetNextExpireTime+0x16>
 80141b6:	2201      	movs	r2, #1
 80141b8:	e000      	b.n	80141bc <prvGetNextExpireTime+0x18>
 80141ba:	2200      	movs	r2, #0
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d105      	bne.n	80141d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80141c8:	4b07      	ldr	r3, [pc, #28]	; (80141e8 <prvGetNextExpireTime+0x44>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	68db      	ldr	r3, [r3, #12]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	60fb      	str	r3, [r7, #12]
 80141d2:	e001      	b.n	80141d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80141d4:	2300      	movs	r3, #0
 80141d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80141d8:	68fb      	ldr	r3, [r7, #12]
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3714      	adds	r7, #20
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop
 80141e8:	200015b8 	.word	0x200015b8

080141ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b084      	sub	sp, #16
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80141f4:	f7ff fa22 	bl	801363c <xTaskGetTickCount>
 80141f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80141fa:	4b0b      	ldr	r3, [pc, #44]	; (8014228 <prvSampleTimeNow+0x3c>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	68fa      	ldr	r2, [r7, #12]
 8014200:	429a      	cmp	r2, r3
 8014202:	d205      	bcs.n	8014210 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014204:	f000 f930 	bl	8014468 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	601a      	str	r2, [r3, #0]
 801420e:	e002      	b.n	8014216 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2200      	movs	r2, #0
 8014214:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014216:	4a04      	ldr	r2, [pc, #16]	; (8014228 <prvSampleTimeNow+0x3c>)
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801421c:	68fb      	ldr	r3, [r7, #12]
}
 801421e:	4618      	mov	r0, r3
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}
 8014226:	bf00      	nop
 8014228:	200015c8 	.word	0x200015c8

0801422c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b086      	sub	sp, #24
 8014230:	af00      	add	r7, sp, #0
 8014232:	60f8      	str	r0, [r7, #12]
 8014234:	60b9      	str	r1, [r7, #8]
 8014236:	607a      	str	r2, [r7, #4]
 8014238:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801423a:	2300      	movs	r3, #0
 801423c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	68ba      	ldr	r2, [r7, #8]
 8014242:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	68fa      	ldr	r2, [r7, #12]
 8014248:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801424a:	68ba      	ldr	r2, [r7, #8]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	429a      	cmp	r2, r3
 8014250:	d812      	bhi.n	8014278 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	1ad2      	subs	r2, r2, r3
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	699b      	ldr	r3, [r3, #24]
 801425c:	429a      	cmp	r2, r3
 801425e:	d302      	bcc.n	8014266 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014260:	2301      	movs	r3, #1
 8014262:	617b      	str	r3, [r7, #20]
 8014264:	e01b      	b.n	801429e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014266:	4b10      	ldr	r3, [pc, #64]	; (80142a8 <prvInsertTimerInActiveList+0x7c>)
 8014268:	681a      	ldr	r2, [r3, #0]
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	3304      	adds	r3, #4
 801426e:	4619      	mov	r1, r3
 8014270:	4610      	mov	r0, r2
 8014272:	f7fe f90e 	bl	8012492 <vListInsert>
 8014276:	e012      	b.n	801429e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	429a      	cmp	r2, r3
 801427e:	d206      	bcs.n	801428e <prvInsertTimerInActiveList+0x62>
 8014280:	68ba      	ldr	r2, [r7, #8]
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	429a      	cmp	r2, r3
 8014286:	d302      	bcc.n	801428e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014288:	2301      	movs	r3, #1
 801428a:	617b      	str	r3, [r7, #20]
 801428c:	e007      	b.n	801429e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801428e:	4b07      	ldr	r3, [pc, #28]	; (80142ac <prvInsertTimerInActiveList+0x80>)
 8014290:	681a      	ldr	r2, [r3, #0]
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	3304      	adds	r3, #4
 8014296:	4619      	mov	r1, r3
 8014298:	4610      	mov	r0, r2
 801429a:	f7fe f8fa 	bl	8012492 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801429e:	697b      	ldr	r3, [r7, #20]
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3718      	adds	r7, #24
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	200015bc 	.word	0x200015bc
 80142ac:	200015b8 	.word	0x200015b8

080142b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b08e      	sub	sp, #56	; 0x38
 80142b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80142b6:	e0c6      	b.n	8014446 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	da17      	bge.n	80142ee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80142be:	1d3b      	adds	r3, r7, #4
 80142c0:	3304      	adds	r3, #4
 80142c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80142c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d109      	bne.n	80142de <prvProcessReceivedCommands+0x2e>
 80142ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142ce:	f383 8811 	msr	BASEPRI, r3
 80142d2:	f3bf 8f6f 	isb	sy
 80142d6:	f3bf 8f4f 	dsb	sy
 80142da:	61fb      	str	r3, [r7, #28]
 80142dc:	e7fe      	b.n	80142dc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80142de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142e4:	6850      	ldr	r0, [r2, #4]
 80142e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142e8:	6892      	ldr	r2, [r2, #8]
 80142ea:	4611      	mov	r1, r2
 80142ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	f2c0 80a7 	blt.w	8014444 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80142fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fc:	695b      	ldr	r3, [r3, #20]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d004      	beq.n	801430c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014304:	3304      	adds	r3, #4
 8014306:	4618      	mov	r0, r3
 8014308:	f7fe f8fc 	bl	8012504 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801430c:	463b      	mov	r3, r7
 801430e:	4618      	mov	r0, r3
 8014310:	f7ff ff6c 	bl	80141ec <prvSampleTimeNow>
 8014314:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2b09      	cmp	r3, #9
 801431a:	f200 8094 	bhi.w	8014446 <prvProcessReceivedCommands+0x196>
 801431e:	a201      	add	r2, pc, #4	; (adr r2, 8014324 <prvProcessReceivedCommands+0x74>)
 8014320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014324:	0801434d 	.word	0x0801434d
 8014328:	0801434d 	.word	0x0801434d
 801432c:	0801434d 	.word	0x0801434d
 8014330:	080143bf 	.word	0x080143bf
 8014334:	080143d3 	.word	0x080143d3
 8014338:	0801441b 	.word	0x0801441b
 801433c:	0801434d 	.word	0x0801434d
 8014340:	0801434d 	.word	0x0801434d
 8014344:	080143bf 	.word	0x080143bf
 8014348:	080143d3 	.word	0x080143d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801434e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014352:	f043 0301 	orr.w	r3, r3, #1
 8014356:	b2da      	uxtb	r2, r3
 8014358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801435a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801435e:	68ba      	ldr	r2, [r7, #8]
 8014360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014362:	699b      	ldr	r3, [r3, #24]
 8014364:	18d1      	adds	r1, r2, r3
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801436a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801436c:	f7ff ff5e 	bl	801422c <prvInsertTimerInActiveList>
 8014370:	4603      	mov	r3, r0
 8014372:	2b00      	cmp	r3, #0
 8014374:	d067      	beq.n	8014446 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014378:	6a1b      	ldr	r3, [r3, #32]
 801437a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801437c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014384:	f003 0304 	and.w	r3, r3, #4
 8014388:	2b00      	cmp	r3, #0
 801438a:	d05c      	beq.n	8014446 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801438c:	68ba      	ldr	r2, [r7, #8]
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	699b      	ldr	r3, [r3, #24]
 8014392:	441a      	add	r2, r3
 8014394:	2300      	movs	r3, #0
 8014396:	9300      	str	r3, [sp, #0]
 8014398:	2300      	movs	r3, #0
 801439a:	2100      	movs	r1, #0
 801439c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801439e:	f7ff fe09 	bl	8013fb4 <xTimerGenericCommand>
 80143a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80143a4:	6a3b      	ldr	r3, [r7, #32]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d14d      	bne.n	8014446 <prvProcessReceivedCommands+0x196>
 80143aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ae:	f383 8811 	msr	BASEPRI, r3
 80143b2:	f3bf 8f6f 	isb	sy
 80143b6:	f3bf 8f4f 	dsb	sy
 80143ba:	61bb      	str	r3, [r7, #24]
 80143bc:	e7fe      	b.n	80143bc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80143be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143c4:	f023 0301 	bic.w	r3, r3, #1
 80143c8:	b2da      	uxtb	r2, r3
 80143ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80143d0:	e039      	b.n	8014446 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80143d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143d8:	f043 0301 	orr.w	r3, r3, #1
 80143dc:	b2da      	uxtb	r2, r3
 80143de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80143e4:	68ba      	ldr	r2, [r7, #8]
 80143e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80143ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ec:	699b      	ldr	r3, [r3, #24]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d109      	bne.n	8014406 <prvProcessReceivedCommands+0x156>
 80143f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f6:	f383 8811 	msr	BASEPRI, r3
 80143fa:	f3bf 8f6f 	isb	sy
 80143fe:	f3bf 8f4f 	dsb	sy
 8014402:	617b      	str	r3, [r7, #20]
 8014404:	e7fe      	b.n	8014404 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014408:	699a      	ldr	r2, [r3, #24]
 801440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801440c:	18d1      	adds	r1, r2, r3
 801440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014414:	f7ff ff0a 	bl	801422c <prvInsertTimerInActiveList>
					break;
 8014418:	e015      	b.n	8014446 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801441c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014420:	f003 0302 	and.w	r3, r3, #2
 8014424:	2b00      	cmp	r3, #0
 8014426:	d103      	bne.n	8014430 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8014428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801442a:	f000 fb13 	bl	8014a54 <vPortFree>
 801442e:	e00a      	b.n	8014446 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014436:	f023 0301 	bic.w	r3, r3, #1
 801443a:	b2da      	uxtb	r2, r3
 801443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801443e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014442:	e000      	b.n	8014446 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014444:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014446:	4b07      	ldr	r3, [pc, #28]	; (8014464 <prvProcessReceivedCommands+0x1b4>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	1d39      	adds	r1, r7, #4
 801444c:	2200      	movs	r2, #0
 801444e:	4618      	mov	r0, r3
 8014450:	f7fe fb4e 	bl	8012af0 <xQueueReceive>
 8014454:	4603      	mov	r3, r0
 8014456:	2b00      	cmp	r3, #0
 8014458:	f47f af2e 	bne.w	80142b8 <prvProcessReceivedCommands+0x8>
	}
}
 801445c:	bf00      	nop
 801445e:	3730      	adds	r7, #48	; 0x30
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	200015c0 	.word	0x200015c0

08014468 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b088      	sub	sp, #32
 801446c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801446e:	e047      	b.n	8014500 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014470:	4b2d      	ldr	r3, [pc, #180]	; (8014528 <prvSwitchTimerLists+0xc0>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	68db      	ldr	r3, [r3, #12]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801447a:	4b2b      	ldr	r3, [pc, #172]	; (8014528 <prvSwitchTimerLists+0xc0>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	68db      	ldr	r3, [r3, #12]
 8014480:	68db      	ldr	r3, [r3, #12]
 8014482:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	3304      	adds	r3, #4
 8014488:	4618      	mov	r0, r3
 801448a:	f7fe f83b 	bl	8012504 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	6a1b      	ldr	r3, [r3, #32]
 8014492:	68f8      	ldr	r0, [r7, #12]
 8014494:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801449c:	f003 0304 	and.w	r3, r3, #4
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d02d      	beq.n	8014500 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	699b      	ldr	r3, [r3, #24]
 80144a8:	693a      	ldr	r2, [r7, #16]
 80144aa:	4413      	add	r3, r2
 80144ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80144ae:	68ba      	ldr	r2, [r7, #8]
 80144b0:	693b      	ldr	r3, [r7, #16]
 80144b2:	429a      	cmp	r2, r3
 80144b4:	d90e      	bls.n	80144d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	68ba      	ldr	r2, [r7, #8]
 80144ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	68fa      	ldr	r2, [r7, #12]
 80144c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80144c2:	4b19      	ldr	r3, [pc, #100]	; (8014528 <prvSwitchTimerLists+0xc0>)
 80144c4:	681a      	ldr	r2, [r3, #0]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	3304      	adds	r3, #4
 80144ca:	4619      	mov	r1, r3
 80144cc:	4610      	mov	r0, r2
 80144ce:	f7fd ffe0 	bl	8012492 <vListInsert>
 80144d2:	e015      	b.n	8014500 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80144d4:	2300      	movs	r3, #0
 80144d6:	9300      	str	r3, [sp, #0]
 80144d8:	2300      	movs	r3, #0
 80144da:	693a      	ldr	r2, [r7, #16]
 80144dc:	2100      	movs	r1, #0
 80144de:	68f8      	ldr	r0, [r7, #12]
 80144e0:	f7ff fd68 	bl	8013fb4 <xTimerGenericCommand>
 80144e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d109      	bne.n	8014500 <prvSwitchTimerLists+0x98>
 80144ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f0:	f383 8811 	msr	BASEPRI, r3
 80144f4:	f3bf 8f6f 	isb	sy
 80144f8:	f3bf 8f4f 	dsb	sy
 80144fc:	603b      	str	r3, [r7, #0]
 80144fe:	e7fe      	b.n	80144fe <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014500:	4b09      	ldr	r3, [pc, #36]	; (8014528 <prvSwitchTimerLists+0xc0>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d1b2      	bne.n	8014470 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801450a:	4b07      	ldr	r3, [pc, #28]	; (8014528 <prvSwitchTimerLists+0xc0>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014510:	4b06      	ldr	r3, [pc, #24]	; (801452c <prvSwitchTimerLists+0xc4>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	4a04      	ldr	r2, [pc, #16]	; (8014528 <prvSwitchTimerLists+0xc0>)
 8014516:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014518:	4a04      	ldr	r2, [pc, #16]	; (801452c <prvSwitchTimerLists+0xc4>)
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	6013      	str	r3, [r2, #0]
}
 801451e:	bf00      	nop
 8014520:	3718      	adds	r7, #24
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	200015b8 	.word	0x200015b8
 801452c:	200015bc 	.word	0x200015bc

08014530 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014536:	f000 f961 	bl	80147fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801453a:	4b15      	ldr	r3, [pc, #84]	; (8014590 <prvCheckForValidListAndQueue+0x60>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d120      	bne.n	8014584 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014542:	4814      	ldr	r0, [pc, #80]	; (8014594 <prvCheckForValidListAndQueue+0x64>)
 8014544:	f7fd ff54 	bl	80123f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014548:	4813      	ldr	r0, [pc, #76]	; (8014598 <prvCheckForValidListAndQueue+0x68>)
 801454a:	f7fd ff51 	bl	80123f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801454e:	4b13      	ldr	r3, [pc, #76]	; (801459c <prvCheckForValidListAndQueue+0x6c>)
 8014550:	4a10      	ldr	r2, [pc, #64]	; (8014594 <prvCheckForValidListAndQueue+0x64>)
 8014552:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014554:	4b12      	ldr	r3, [pc, #72]	; (80145a0 <prvCheckForValidListAndQueue+0x70>)
 8014556:	4a10      	ldr	r2, [pc, #64]	; (8014598 <prvCheckForValidListAndQueue+0x68>)
 8014558:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801455a:	2300      	movs	r3, #0
 801455c:	9300      	str	r3, [sp, #0]
 801455e:	4b11      	ldr	r3, [pc, #68]	; (80145a4 <prvCheckForValidListAndQueue+0x74>)
 8014560:	4a11      	ldr	r2, [pc, #68]	; (80145a8 <prvCheckForValidListAndQueue+0x78>)
 8014562:	2110      	movs	r1, #16
 8014564:	200a      	movs	r0, #10
 8014566:	f7fe f85f 	bl	8012628 <xQueueGenericCreateStatic>
 801456a:	4602      	mov	r2, r0
 801456c:	4b08      	ldr	r3, [pc, #32]	; (8014590 <prvCheckForValidListAndQueue+0x60>)
 801456e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014570:	4b07      	ldr	r3, [pc, #28]	; (8014590 <prvCheckForValidListAndQueue+0x60>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d005      	beq.n	8014584 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014578:	4b05      	ldr	r3, [pc, #20]	; (8014590 <prvCheckForValidListAndQueue+0x60>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	490b      	ldr	r1, [pc, #44]	; (80145ac <prvCheckForValidListAndQueue+0x7c>)
 801457e:	4618      	mov	r0, r3
 8014580:	f7fe fd20 	bl	8012fc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014584:	f000 f968 	bl	8014858 <vPortExitCritical>
}
 8014588:	bf00      	nop
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}
 801458e:	bf00      	nop
 8014590:	200015c0 	.word	0x200015c0
 8014594:	20001590 	.word	0x20001590
 8014598:	200015a4 	.word	0x200015a4
 801459c:	200015b8 	.word	0x200015b8
 80145a0:	200015bc 	.word	0x200015bc
 80145a4:	2000166c 	.word	0x2000166c
 80145a8:	200015cc 	.word	0x200015cc
 80145ac:	0801a428 	.word	0x0801a428

080145b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80145b0:	b480      	push	{r7}
 80145b2:	b085      	sub	sp, #20
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	3b04      	subs	r3, #4
 80145c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80145c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	3b04      	subs	r3, #4
 80145ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	f023 0201 	bic.w	r2, r3, #1
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	3b04      	subs	r3, #4
 80145de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80145e0:	4a0c      	ldr	r2, [pc, #48]	; (8014614 <pxPortInitialiseStack+0x64>)
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	3b14      	subs	r3, #20
 80145ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80145ec:	687a      	ldr	r2, [r7, #4]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	3b04      	subs	r3, #4
 80145f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	f06f 0202 	mvn.w	r2, #2
 80145fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	3b20      	subs	r3, #32
 8014604:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014606:	68fb      	ldr	r3, [r7, #12]
}
 8014608:	4618      	mov	r0, r3
 801460a:	3714      	adds	r7, #20
 801460c:	46bd      	mov	sp, r7
 801460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014612:	4770      	bx	lr
 8014614:	08014619 	.word	0x08014619

08014618 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014618:	b480      	push	{r7}
 801461a:	b085      	sub	sp, #20
 801461c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801461e:	2300      	movs	r3, #0
 8014620:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014622:	4b11      	ldr	r3, [pc, #68]	; (8014668 <prvTaskExitError+0x50>)
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801462a:	d009      	beq.n	8014640 <prvTaskExitError+0x28>
 801462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014630:	f383 8811 	msr	BASEPRI, r3
 8014634:	f3bf 8f6f 	isb	sy
 8014638:	f3bf 8f4f 	dsb	sy
 801463c:	60fb      	str	r3, [r7, #12]
 801463e:	e7fe      	b.n	801463e <prvTaskExitError+0x26>
 8014640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014644:	f383 8811 	msr	BASEPRI, r3
 8014648:	f3bf 8f6f 	isb	sy
 801464c:	f3bf 8f4f 	dsb	sy
 8014650:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014652:	bf00      	nop
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d0fc      	beq.n	8014654 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801465a:	bf00      	nop
 801465c:	3714      	adds	r7, #20
 801465e:	46bd      	mov	sp, r7
 8014660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014664:	4770      	bx	lr
 8014666:	bf00      	nop
 8014668:	200000bc 	.word	0x200000bc
 801466c:	00000000 	.word	0x00000000

08014670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014670:	4b07      	ldr	r3, [pc, #28]	; (8014690 <pxCurrentTCBConst2>)
 8014672:	6819      	ldr	r1, [r3, #0]
 8014674:	6808      	ldr	r0, [r1, #0]
 8014676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801467a:	f380 8809 	msr	PSP, r0
 801467e:	f3bf 8f6f 	isb	sy
 8014682:	f04f 0000 	mov.w	r0, #0
 8014686:	f380 8811 	msr	BASEPRI, r0
 801468a:	4770      	bx	lr
 801468c:	f3af 8000 	nop.w

08014690 <pxCurrentTCBConst2>:
 8014690:	20001090 	.word	0x20001090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014694:	bf00      	nop
 8014696:	bf00      	nop

08014698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014698:	4808      	ldr	r0, [pc, #32]	; (80146bc <prvPortStartFirstTask+0x24>)
 801469a:	6800      	ldr	r0, [r0, #0]
 801469c:	6800      	ldr	r0, [r0, #0]
 801469e:	f380 8808 	msr	MSP, r0
 80146a2:	f04f 0000 	mov.w	r0, #0
 80146a6:	f380 8814 	msr	CONTROL, r0
 80146aa:	b662      	cpsie	i
 80146ac:	b661      	cpsie	f
 80146ae:	f3bf 8f4f 	dsb	sy
 80146b2:	f3bf 8f6f 	isb	sy
 80146b6:	df00      	svc	0
 80146b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80146ba:	bf00      	nop
 80146bc:	e000ed08 	.word	0xe000ed08

080146c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b086      	sub	sp, #24
 80146c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80146c6:	4b44      	ldr	r3, [pc, #272]	; (80147d8 <xPortStartScheduler+0x118>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	4a44      	ldr	r2, [pc, #272]	; (80147dc <xPortStartScheduler+0x11c>)
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d109      	bne.n	80146e4 <xPortStartScheduler+0x24>
 80146d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d4:	f383 8811 	msr	BASEPRI, r3
 80146d8:	f3bf 8f6f 	isb	sy
 80146dc:	f3bf 8f4f 	dsb	sy
 80146e0:	613b      	str	r3, [r7, #16]
 80146e2:	e7fe      	b.n	80146e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80146e4:	4b3c      	ldr	r3, [pc, #240]	; (80147d8 <xPortStartScheduler+0x118>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	4a3d      	ldr	r2, [pc, #244]	; (80147e0 <xPortStartScheduler+0x120>)
 80146ea:	4293      	cmp	r3, r2
 80146ec:	d109      	bne.n	8014702 <xPortStartScheduler+0x42>
 80146ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f2:	f383 8811 	msr	BASEPRI, r3
 80146f6:	f3bf 8f6f 	isb	sy
 80146fa:	f3bf 8f4f 	dsb	sy
 80146fe:	60fb      	str	r3, [r7, #12]
 8014700:	e7fe      	b.n	8014700 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014702:	4b38      	ldr	r3, [pc, #224]	; (80147e4 <xPortStartScheduler+0x124>)
 8014704:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	781b      	ldrb	r3, [r3, #0]
 801470a:	b2db      	uxtb	r3, r3
 801470c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	22ff      	movs	r2, #255	; 0xff
 8014712:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	b2db      	uxtb	r3, r3
 801471a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801471c:	78fb      	ldrb	r3, [r7, #3]
 801471e:	b2db      	uxtb	r3, r3
 8014720:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014724:	b2da      	uxtb	r2, r3
 8014726:	4b30      	ldr	r3, [pc, #192]	; (80147e8 <xPortStartScheduler+0x128>)
 8014728:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801472a:	4b30      	ldr	r3, [pc, #192]	; (80147ec <xPortStartScheduler+0x12c>)
 801472c:	2207      	movs	r2, #7
 801472e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014730:	e009      	b.n	8014746 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014732:	4b2e      	ldr	r3, [pc, #184]	; (80147ec <xPortStartScheduler+0x12c>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	3b01      	subs	r3, #1
 8014738:	4a2c      	ldr	r2, [pc, #176]	; (80147ec <xPortStartScheduler+0x12c>)
 801473a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801473c:	78fb      	ldrb	r3, [r7, #3]
 801473e:	b2db      	uxtb	r3, r3
 8014740:	005b      	lsls	r3, r3, #1
 8014742:	b2db      	uxtb	r3, r3
 8014744:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014746:	78fb      	ldrb	r3, [r7, #3]
 8014748:	b2db      	uxtb	r3, r3
 801474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801474e:	2b80      	cmp	r3, #128	; 0x80
 8014750:	d0ef      	beq.n	8014732 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014752:	4b26      	ldr	r3, [pc, #152]	; (80147ec <xPortStartScheduler+0x12c>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	f1c3 0307 	rsb	r3, r3, #7
 801475a:	2b04      	cmp	r3, #4
 801475c:	d009      	beq.n	8014772 <xPortStartScheduler+0xb2>
 801475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014762:	f383 8811 	msr	BASEPRI, r3
 8014766:	f3bf 8f6f 	isb	sy
 801476a:	f3bf 8f4f 	dsb	sy
 801476e:	60bb      	str	r3, [r7, #8]
 8014770:	e7fe      	b.n	8014770 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014772:	4b1e      	ldr	r3, [pc, #120]	; (80147ec <xPortStartScheduler+0x12c>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	021b      	lsls	r3, r3, #8
 8014778:	4a1c      	ldr	r2, [pc, #112]	; (80147ec <xPortStartScheduler+0x12c>)
 801477a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801477c:	4b1b      	ldr	r3, [pc, #108]	; (80147ec <xPortStartScheduler+0x12c>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014784:	4a19      	ldr	r2, [pc, #100]	; (80147ec <xPortStartScheduler+0x12c>)
 8014786:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	b2da      	uxtb	r2, r3
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014790:	4b17      	ldr	r3, [pc, #92]	; (80147f0 <xPortStartScheduler+0x130>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	4a16      	ldr	r2, [pc, #88]	; (80147f0 <xPortStartScheduler+0x130>)
 8014796:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801479a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801479c:	4b14      	ldr	r3, [pc, #80]	; (80147f0 <xPortStartScheduler+0x130>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	4a13      	ldr	r2, [pc, #76]	; (80147f0 <xPortStartScheduler+0x130>)
 80147a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80147a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80147a8:	f000 f8d6 	bl	8014958 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80147ac:	4b11      	ldr	r3, [pc, #68]	; (80147f4 <xPortStartScheduler+0x134>)
 80147ae:	2200      	movs	r2, #0
 80147b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80147b2:	f000 f8f5 	bl	80149a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80147b6:	4b10      	ldr	r3, [pc, #64]	; (80147f8 <xPortStartScheduler+0x138>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	4a0f      	ldr	r2, [pc, #60]	; (80147f8 <xPortStartScheduler+0x138>)
 80147bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80147c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80147c2:	f7ff ff69 	bl	8014698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80147c6:	f7ff f813 	bl	80137f0 <vTaskSwitchContext>
	prvTaskExitError();
 80147ca:	f7ff ff25 	bl	8014618 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80147ce:	2300      	movs	r3, #0
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3718      	adds	r7, #24
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	e000ed00 	.word	0xe000ed00
 80147dc:	410fc271 	.word	0x410fc271
 80147e0:	410fc270 	.word	0x410fc270
 80147e4:	e000e400 	.word	0xe000e400
 80147e8:	200016bc 	.word	0x200016bc
 80147ec:	200016c0 	.word	0x200016c0
 80147f0:	e000ed20 	.word	0xe000ed20
 80147f4:	200000bc 	.word	0x200000bc
 80147f8:	e000ef34 	.word	0xe000ef34

080147fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80147fc:	b480      	push	{r7}
 80147fe:	b083      	sub	sp, #12
 8014800:	af00      	add	r7, sp, #0
 8014802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014806:	f383 8811 	msr	BASEPRI, r3
 801480a:	f3bf 8f6f 	isb	sy
 801480e:	f3bf 8f4f 	dsb	sy
 8014812:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014814:	4b0e      	ldr	r3, [pc, #56]	; (8014850 <vPortEnterCritical+0x54>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	3301      	adds	r3, #1
 801481a:	4a0d      	ldr	r2, [pc, #52]	; (8014850 <vPortEnterCritical+0x54>)
 801481c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801481e:	4b0c      	ldr	r3, [pc, #48]	; (8014850 <vPortEnterCritical+0x54>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	2b01      	cmp	r3, #1
 8014824:	d10e      	bne.n	8014844 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014826:	4b0b      	ldr	r3, [pc, #44]	; (8014854 <vPortEnterCritical+0x58>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	b2db      	uxtb	r3, r3
 801482c:	2b00      	cmp	r3, #0
 801482e:	d009      	beq.n	8014844 <vPortEnterCritical+0x48>
 8014830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014834:	f383 8811 	msr	BASEPRI, r3
 8014838:	f3bf 8f6f 	isb	sy
 801483c:	f3bf 8f4f 	dsb	sy
 8014840:	603b      	str	r3, [r7, #0]
 8014842:	e7fe      	b.n	8014842 <vPortEnterCritical+0x46>
	}
}
 8014844:	bf00      	nop
 8014846:	370c      	adds	r7, #12
 8014848:	46bd      	mov	sp, r7
 801484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484e:	4770      	bx	lr
 8014850:	200000bc 	.word	0x200000bc
 8014854:	e000ed04 	.word	0xe000ed04

08014858 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014858:	b480      	push	{r7}
 801485a:	b083      	sub	sp, #12
 801485c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801485e:	4b11      	ldr	r3, [pc, #68]	; (80148a4 <vPortExitCritical+0x4c>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d109      	bne.n	801487a <vPortExitCritical+0x22>
 8014866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801486a:	f383 8811 	msr	BASEPRI, r3
 801486e:	f3bf 8f6f 	isb	sy
 8014872:	f3bf 8f4f 	dsb	sy
 8014876:	607b      	str	r3, [r7, #4]
 8014878:	e7fe      	b.n	8014878 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801487a:	4b0a      	ldr	r3, [pc, #40]	; (80148a4 <vPortExitCritical+0x4c>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	3b01      	subs	r3, #1
 8014880:	4a08      	ldr	r2, [pc, #32]	; (80148a4 <vPortExitCritical+0x4c>)
 8014882:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014884:	4b07      	ldr	r3, [pc, #28]	; (80148a4 <vPortExitCritical+0x4c>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d104      	bne.n	8014896 <vPortExitCritical+0x3e>
 801488c:	2300      	movs	r3, #0
 801488e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014896:	bf00      	nop
 8014898:	370c      	adds	r7, #12
 801489a:	46bd      	mov	sp, r7
 801489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a0:	4770      	bx	lr
 80148a2:	bf00      	nop
 80148a4:	200000bc 	.word	0x200000bc
	...

080148b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80148b0:	f3ef 8009 	mrs	r0, PSP
 80148b4:	f3bf 8f6f 	isb	sy
 80148b8:	4b15      	ldr	r3, [pc, #84]	; (8014910 <pxCurrentTCBConst>)
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	f01e 0f10 	tst.w	lr, #16
 80148c0:	bf08      	it	eq
 80148c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80148c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ca:	6010      	str	r0, [r2, #0]
 80148cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80148d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80148d4:	f380 8811 	msr	BASEPRI, r0
 80148d8:	f3bf 8f4f 	dsb	sy
 80148dc:	f3bf 8f6f 	isb	sy
 80148e0:	f7fe ff86 	bl	80137f0 <vTaskSwitchContext>
 80148e4:	f04f 0000 	mov.w	r0, #0
 80148e8:	f380 8811 	msr	BASEPRI, r0
 80148ec:	bc09      	pop	{r0, r3}
 80148ee:	6819      	ldr	r1, [r3, #0]
 80148f0:	6808      	ldr	r0, [r1, #0]
 80148f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148f6:	f01e 0f10 	tst.w	lr, #16
 80148fa:	bf08      	it	eq
 80148fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014900:	f380 8809 	msr	PSP, r0
 8014904:	f3bf 8f6f 	isb	sy
 8014908:	4770      	bx	lr
 801490a:	bf00      	nop
 801490c:	f3af 8000 	nop.w

08014910 <pxCurrentTCBConst>:
 8014910:	20001090 	.word	0x20001090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014914:	bf00      	nop
 8014916:	bf00      	nop

08014918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
	__asm volatile
 801491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014922:	f383 8811 	msr	BASEPRI, r3
 8014926:	f3bf 8f6f 	isb	sy
 801492a:	f3bf 8f4f 	dsb	sy
 801492e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014930:	f7fe fea6 	bl	8013680 <xTaskIncrementTick>
 8014934:	4603      	mov	r3, r0
 8014936:	2b00      	cmp	r3, #0
 8014938:	d003      	beq.n	8014942 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801493a:	4b06      	ldr	r3, [pc, #24]	; (8014954 <SysTick_Handler+0x3c>)
 801493c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014940:	601a      	str	r2, [r3, #0]
 8014942:	2300      	movs	r3, #0
 8014944:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801494c:	bf00      	nop
 801494e:	3708      	adds	r7, #8
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}
 8014954:	e000ed04 	.word	0xe000ed04

08014958 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014958:	b480      	push	{r7}
 801495a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801495c:	4b0b      	ldr	r3, [pc, #44]	; (801498c <vPortSetupTimerInterrupt+0x34>)
 801495e:	2200      	movs	r2, #0
 8014960:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014962:	4b0b      	ldr	r3, [pc, #44]	; (8014990 <vPortSetupTimerInterrupt+0x38>)
 8014964:	2200      	movs	r2, #0
 8014966:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014968:	4b0a      	ldr	r3, [pc, #40]	; (8014994 <vPortSetupTimerInterrupt+0x3c>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	4a0a      	ldr	r2, [pc, #40]	; (8014998 <vPortSetupTimerInterrupt+0x40>)
 801496e:	fba2 2303 	umull	r2, r3, r2, r3
 8014972:	099b      	lsrs	r3, r3, #6
 8014974:	4a09      	ldr	r2, [pc, #36]	; (801499c <vPortSetupTimerInterrupt+0x44>)
 8014976:	3b01      	subs	r3, #1
 8014978:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801497a:	4b04      	ldr	r3, [pc, #16]	; (801498c <vPortSetupTimerInterrupt+0x34>)
 801497c:	2207      	movs	r2, #7
 801497e:	601a      	str	r2, [r3, #0]
}
 8014980:	bf00      	nop
 8014982:	46bd      	mov	sp, r7
 8014984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014988:	4770      	bx	lr
 801498a:	bf00      	nop
 801498c:	e000e010 	.word	0xe000e010
 8014990:	e000e018 	.word	0xe000e018
 8014994:	200000b0 	.word	0x200000b0
 8014998:	10624dd3 	.word	0x10624dd3
 801499c:	e000e014 	.word	0xe000e014

080149a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80149a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80149b0 <vPortEnableVFP+0x10>
 80149a4:	6801      	ldr	r1, [r0, #0]
 80149a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80149aa:	6001      	str	r1, [r0, #0]
 80149ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80149ae:	bf00      	nop
 80149b0:	e000ed88 	.word	0xe000ed88

080149b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80149b4:	b480      	push	{r7}
 80149b6:	b085      	sub	sp, #20
 80149b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80149ba:	f3ef 8305 	mrs	r3, IPSR
 80149be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	2b0f      	cmp	r3, #15
 80149c4:	d913      	bls.n	80149ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80149c6:	4a16      	ldr	r2, [pc, #88]	; (8014a20 <vPortValidateInterruptPriority+0x6c>)
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	4413      	add	r3, r2
 80149cc:	781b      	ldrb	r3, [r3, #0]
 80149ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80149d0:	4b14      	ldr	r3, [pc, #80]	; (8014a24 <vPortValidateInterruptPriority+0x70>)
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	7afa      	ldrb	r2, [r7, #11]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d209      	bcs.n	80149ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80149da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149de:	f383 8811 	msr	BASEPRI, r3
 80149e2:	f3bf 8f6f 	isb	sy
 80149e6:	f3bf 8f4f 	dsb	sy
 80149ea:	607b      	str	r3, [r7, #4]
 80149ec:	e7fe      	b.n	80149ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80149ee:	4b0e      	ldr	r3, [pc, #56]	; (8014a28 <vPortValidateInterruptPriority+0x74>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80149f6:	4b0d      	ldr	r3, [pc, #52]	; (8014a2c <vPortValidateInterruptPriority+0x78>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	429a      	cmp	r2, r3
 80149fc:	d909      	bls.n	8014a12 <vPortValidateInterruptPriority+0x5e>
 80149fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a02:	f383 8811 	msr	BASEPRI, r3
 8014a06:	f3bf 8f6f 	isb	sy
 8014a0a:	f3bf 8f4f 	dsb	sy
 8014a0e:	603b      	str	r3, [r7, #0]
 8014a10:	e7fe      	b.n	8014a10 <vPortValidateInterruptPriority+0x5c>
	}
 8014a12:	bf00      	nop
 8014a14:	3714      	adds	r7, #20
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop
 8014a20:	e000e3f0 	.word	0xe000e3f0
 8014a24:	200016bc 	.word	0x200016bc
 8014a28:	e000ed0c 	.word	0xe000ed0c
 8014a2c:	200016c0 	.word	0x200016c0

08014a30 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b084      	sub	sp, #16
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8014a38:	f7fe fd56 	bl	80134e8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f001 f923 	bl	8015c88 <malloc>
 8014a42:	4603      	mov	r3, r0
 8014a44:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014a46:	f7fe fd5d 	bl	8013504 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3710      	adds	r7, #16
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
	if( pv )
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d006      	beq.n	8014a70 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8014a62:	f7fe fd41 	bl	80134e8 <vTaskSuspendAll>
		{
			free( pv );
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f001 f916 	bl	8015c98 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8014a6c:	f7fe fd4a 	bl	8013504 <xTaskResumeAll>
	}
}
 8014a70:	bf00      	nop
 8014a72:	3708      	adds	r7, #8
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}

08014a78 <cosf>:
 8014a78:	ee10 3a10 	vmov	r3, s0
 8014a7c:	b507      	push	{r0, r1, r2, lr}
 8014a7e:	4a1c      	ldr	r2, [pc, #112]	; (8014af0 <cosf+0x78>)
 8014a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a84:	4293      	cmp	r3, r2
 8014a86:	dc04      	bgt.n	8014a92 <cosf+0x1a>
 8014a88:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8014af4 <cosf+0x7c>
 8014a8c:	f000 fbe6 	bl	801525c <__kernel_cosf>
 8014a90:	e004      	b.n	8014a9c <cosf+0x24>
 8014a92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014a96:	db04      	blt.n	8014aa2 <cosf+0x2a>
 8014a98:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014a9c:	b003      	add	sp, #12
 8014a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014aa2:	4668      	mov	r0, sp
 8014aa4:	f000 faaa 	bl	8014ffc <__ieee754_rem_pio2f>
 8014aa8:	f000 0003 	and.w	r0, r0, #3
 8014aac:	2801      	cmp	r0, #1
 8014aae:	d007      	beq.n	8014ac0 <cosf+0x48>
 8014ab0:	2802      	cmp	r0, #2
 8014ab2:	d00e      	beq.n	8014ad2 <cosf+0x5a>
 8014ab4:	b9a0      	cbnz	r0, 8014ae0 <cosf+0x68>
 8014ab6:	eddd 0a01 	vldr	s1, [sp, #4]
 8014aba:	ed9d 0a00 	vldr	s0, [sp]
 8014abe:	e7e5      	b.n	8014a8c <cosf+0x14>
 8014ac0:	eddd 0a01 	vldr	s1, [sp, #4]
 8014ac4:	ed9d 0a00 	vldr	s0, [sp]
 8014ac8:	f000 fea8 	bl	801581c <__kernel_sinf>
 8014acc:	eeb1 0a40 	vneg.f32	s0, s0
 8014ad0:	e7e4      	b.n	8014a9c <cosf+0x24>
 8014ad2:	eddd 0a01 	vldr	s1, [sp, #4]
 8014ad6:	ed9d 0a00 	vldr	s0, [sp]
 8014ada:	f000 fbbf 	bl	801525c <__kernel_cosf>
 8014ade:	e7f5      	b.n	8014acc <cosf+0x54>
 8014ae0:	2001      	movs	r0, #1
 8014ae2:	eddd 0a01 	vldr	s1, [sp, #4]
 8014ae6:	ed9d 0a00 	vldr	s0, [sp]
 8014aea:	f000 fe97 	bl	801581c <__kernel_sinf>
 8014aee:	e7d5      	b.n	8014a9c <cosf+0x24>
 8014af0:	3f490fd8 	.word	0x3f490fd8
 8014af4:	00000000 	.word	0x00000000

08014af8 <sinf>:
 8014af8:	ee10 3a10 	vmov	r3, s0
 8014afc:	b507      	push	{r0, r1, r2, lr}
 8014afe:	4a1d      	ldr	r2, [pc, #116]	; (8014b74 <sinf+0x7c>)
 8014b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b04:	4293      	cmp	r3, r2
 8014b06:	dc05      	bgt.n	8014b14 <sinf+0x1c>
 8014b08:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8014b78 <sinf+0x80>
 8014b0c:	2000      	movs	r0, #0
 8014b0e:	f000 fe85 	bl	801581c <__kernel_sinf>
 8014b12:	e004      	b.n	8014b1e <sinf+0x26>
 8014b14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b18:	db04      	blt.n	8014b24 <sinf+0x2c>
 8014b1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014b1e:	b003      	add	sp, #12
 8014b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b24:	4668      	mov	r0, sp
 8014b26:	f000 fa69 	bl	8014ffc <__ieee754_rem_pio2f>
 8014b2a:	f000 0003 	and.w	r0, r0, #3
 8014b2e:	2801      	cmp	r0, #1
 8014b30:	d008      	beq.n	8014b44 <sinf+0x4c>
 8014b32:	2802      	cmp	r0, #2
 8014b34:	d00d      	beq.n	8014b52 <sinf+0x5a>
 8014b36:	b9b0      	cbnz	r0, 8014b66 <sinf+0x6e>
 8014b38:	2001      	movs	r0, #1
 8014b3a:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b3e:	ed9d 0a00 	vldr	s0, [sp]
 8014b42:	e7e4      	b.n	8014b0e <sinf+0x16>
 8014b44:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b48:	ed9d 0a00 	vldr	s0, [sp]
 8014b4c:	f000 fb86 	bl	801525c <__kernel_cosf>
 8014b50:	e7e5      	b.n	8014b1e <sinf+0x26>
 8014b52:	2001      	movs	r0, #1
 8014b54:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b58:	ed9d 0a00 	vldr	s0, [sp]
 8014b5c:	f000 fe5e 	bl	801581c <__kernel_sinf>
 8014b60:	eeb1 0a40 	vneg.f32	s0, s0
 8014b64:	e7db      	b.n	8014b1e <sinf+0x26>
 8014b66:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b6a:	ed9d 0a00 	vldr	s0, [sp]
 8014b6e:	f000 fb75 	bl	801525c <__kernel_cosf>
 8014b72:	e7f5      	b.n	8014b60 <sinf+0x68>
 8014b74:	3f490fd8 	.word	0x3f490fd8
 8014b78:	00000000 	.word	0x00000000

08014b7c <asinf>:
 8014b7c:	b510      	push	{r4, lr}
 8014b7e:	ed2d 8b02 	vpush	{d8}
 8014b82:	4c27      	ldr	r4, [pc, #156]	; (8014c20 <asinf+0xa4>)
 8014b84:	b08a      	sub	sp, #40	; 0x28
 8014b86:	eeb0 8a40 	vmov.f32	s16, s0
 8014b8a:	f000 f8a1 	bl	8014cd0 <__ieee754_asinf>
 8014b8e:	f994 3000 	ldrsb.w	r3, [r4]
 8014b92:	3301      	adds	r3, #1
 8014b94:	eef0 8a40 	vmov.f32	s17, s0
 8014b98:	d03c      	beq.n	8014c14 <asinf+0x98>
 8014b9a:	eeb4 8a48 	vcmp.f32	s16, s16
 8014b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba2:	d637      	bvs.n	8014c14 <asinf+0x98>
 8014ba4:	eeb0 0a48 	vmov.f32	s0, s16
 8014ba8:	f000 ff5e 	bl	8015a68 <fabsf>
 8014bac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014bb0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb8:	dd2c      	ble.n	8014c14 <asinf+0x98>
 8014bba:	2301      	movs	r3, #1
 8014bbc:	9300      	str	r3, [sp, #0]
 8014bbe:	4b19      	ldr	r3, [pc, #100]	; (8014c24 <asinf+0xa8>)
 8014bc0:	9301      	str	r3, [sp, #4]
 8014bc2:	ee18 0a10 	vmov	r0, s16
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	9308      	str	r3, [sp, #32]
 8014bca:	f7eb fccd 	bl	8000568 <__aeabi_f2d>
 8014bce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014bd6:	4814      	ldr	r0, [pc, #80]	; (8014c28 <asinf+0xac>)
 8014bd8:	f000 fe6a 	bl	80158b0 <nan>
 8014bdc:	f994 3000 	ldrsb.w	r3, [r4]
 8014be0:	2b02      	cmp	r3, #2
 8014be2:	ed8d 0b06 	vstr	d0, [sp, #24]
 8014be6:	d104      	bne.n	8014bf2 <asinf+0x76>
 8014be8:	f001 f812 	bl	8015c10 <__errno>
 8014bec:	2321      	movs	r3, #33	; 0x21
 8014bee:	6003      	str	r3, [r0, #0]
 8014bf0:	e004      	b.n	8014bfc <asinf+0x80>
 8014bf2:	4668      	mov	r0, sp
 8014bf4:	f000 fe5a 	bl	80158ac <matherr>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d0f5      	beq.n	8014be8 <asinf+0x6c>
 8014bfc:	9b08      	ldr	r3, [sp, #32]
 8014bfe:	b11b      	cbz	r3, 8014c08 <asinf+0x8c>
 8014c00:	f001 f806 	bl	8015c10 <__errno>
 8014c04:	9b08      	ldr	r3, [sp, #32]
 8014c06:	6003      	str	r3, [r0, #0]
 8014c08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014c0c:	f7eb fffc 	bl	8000c08 <__aeabi_d2f>
 8014c10:	ee08 0a90 	vmov	s17, r0
 8014c14:	eeb0 0a68 	vmov.f32	s0, s17
 8014c18:	b00a      	add	sp, #40	; 0x28
 8014c1a:	ecbd 8b02 	vpop	{d8}
 8014c1e:	bd10      	pop	{r4, pc}
 8014c20:	200000c0 	.word	0x200000c0
 8014c24:	0801a960 	.word	0x0801a960
 8014c28:	0801ad97 	.word	0x0801ad97

08014c2c <atan2f>:
 8014c2c:	f000 b938 	b.w	8014ea0 <__ieee754_atan2f>

08014c30 <sqrtf>:
 8014c30:	b510      	push	{r4, lr}
 8014c32:	ed2d 8b02 	vpush	{d8}
 8014c36:	b08a      	sub	sp, #40	; 0x28
 8014c38:	eeb0 8a40 	vmov.f32	s16, s0
 8014c3c:	f000 fb0a 	bl	8015254 <__ieee754_sqrtf>
 8014c40:	4b21      	ldr	r3, [pc, #132]	; (8014cc8 <sqrtf+0x98>)
 8014c42:	f993 4000 	ldrsb.w	r4, [r3]
 8014c46:	1c63      	adds	r3, r4, #1
 8014c48:	d02c      	beq.n	8014ca4 <sqrtf+0x74>
 8014c4a:	eeb4 8a48 	vcmp.f32	s16, s16
 8014c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c52:	d627      	bvs.n	8014ca4 <sqrtf+0x74>
 8014c54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c5c:	d522      	bpl.n	8014ca4 <sqrtf+0x74>
 8014c5e:	2301      	movs	r3, #1
 8014c60:	9300      	str	r3, [sp, #0]
 8014c62:	4b1a      	ldr	r3, [pc, #104]	; (8014ccc <sqrtf+0x9c>)
 8014c64:	9301      	str	r3, [sp, #4]
 8014c66:	ee18 0a10 	vmov	r0, s16
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	9308      	str	r3, [sp, #32]
 8014c6e:	f7eb fc7b 	bl	8000568 <__aeabi_f2d>
 8014c72:	2200      	movs	r2, #0
 8014c74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	b9ac      	cbnz	r4, 8014cac <sqrtf+0x7c>
 8014c80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014c84:	4668      	mov	r0, sp
 8014c86:	f000 fe11 	bl	80158ac <matherr>
 8014c8a:	b1b8      	cbz	r0, 8014cbc <sqrtf+0x8c>
 8014c8c:	9b08      	ldr	r3, [sp, #32]
 8014c8e:	b11b      	cbz	r3, 8014c98 <sqrtf+0x68>
 8014c90:	f000 ffbe 	bl	8015c10 <__errno>
 8014c94:	9b08      	ldr	r3, [sp, #32]
 8014c96:	6003      	str	r3, [r0, #0]
 8014c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014c9c:	f7eb ffb4 	bl	8000c08 <__aeabi_d2f>
 8014ca0:	ee00 0a10 	vmov	s0, r0
 8014ca4:	b00a      	add	sp, #40	; 0x28
 8014ca6:	ecbd 8b02 	vpop	{d8}
 8014caa:	bd10      	pop	{r4, pc}
 8014cac:	4610      	mov	r0, r2
 8014cae:	4619      	mov	r1, r3
 8014cb0:	f7eb fddc 	bl	800086c <__aeabi_ddiv>
 8014cb4:	2c02      	cmp	r4, #2
 8014cb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014cba:	d1e3      	bne.n	8014c84 <sqrtf+0x54>
 8014cbc:	f000 ffa8 	bl	8015c10 <__errno>
 8014cc0:	2321      	movs	r3, #33	; 0x21
 8014cc2:	6003      	str	r3, [r0, #0]
 8014cc4:	e7e2      	b.n	8014c8c <sqrtf+0x5c>
 8014cc6:	bf00      	nop
 8014cc8:	200000c0 	.word	0x200000c0
 8014ccc:	0801a966 	.word	0x0801a966

08014cd0 <__ieee754_asinf>:
 8014cd0:	b538      	push	{r3, r4, r5, lr}
 8014cd2:	ee10 5a10 	vmov	r5, s0
 8014cd6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014cda:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014cde:	ed2d 8b04 	vpush	{d8-d9}
 8014ce2:	d10c      	bne.n	8014cfe <__ieee754_asinf+0x2e>
 8014ce4:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8014e60 <__ieee754_asinf+0x190>
 8014ce8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8014e64 <__ieee754_asinf+0x194>
 8014cec:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014cf0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8014cf8:	ecbd 8b04 	vpop	{d8-d9}
 8014cfc:	bd38      	pop	{r3, r4, r5, pc}
 8014cfe:	dd04      	ble.n	8014d0a <__ieee754_asinf+0x3a>
 8014d00:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014d04:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014d08:	e7f6      	b.n	8014cf8 <__ieee754_asinf+0x28>
 8014d0a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8014d0e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014d12:	da0b      	bge.n	8014d2c <__ieee754_asinf+0x5c>
 8014d14:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8014d18:	da52      	bge.n	8014dc0 <__ieee754_asinf+0xf0>
 8014d1a:	eddf 7a53 	vldr	s15, [pc, #332]	; 8014e68 <__ieee754_asinf+0x198>
 8014d1e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014d22:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2a:	dce5      	bgt.n	8014cf8 <__ieee754_asinf+0x28>
 8014d2c:	f000 fe9c 	bl	8015a68 <fabsf>
 8014d30:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014d34:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014d38:	ee20 8a08 	vmul.f32	s16, s0, s16
 8014d3c:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8014e6c <__ieee754_asinf+0x19c>
 8014d40:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014e70 <__ieee754_asinf+0x1a0>
 8014d44:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8014e74 <__ieee754_asinf+0x1a4>
 8014d48:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014d4c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014e78 <__ieee754_asinf+0x1a8>
 8014d50:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014d54:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014e7c <__ieee754_asinf+0x1ac>
 8014d58:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014d5c:	eddf 7a48 	vldr	s15, [pc, #288]	; 8014e80 <__ieee754_asinf+0x1b0>
 8014d60:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014d64:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8014e84 <__ieee754_asinf+0x1b4>
 8014d68:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014d6c:	eddf 7a46 	vldr	s15, [pc, #280]	; 8014e88 <__ieee754_asinf+0x1b8>
 8014d70:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014d74:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8014e8c <__ieee754_asinf+0x1bc>
 8014d78:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014d7c:	eddf 7a44 	vldr	s15, [pc, #272]	; 8014e90 <__ieee754_asinf+0x1c0>
 8014d80:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014d84:	eeb0 0a48 	vmov.f32	s0, s16
 8014d88:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014d8c:	f000 fa62 	bl	8015254 <__ieee754_sqrtf>
 8014d90:	4b40      	ldr	r3, [pc, #256]	; (8014e94 <__ieee754_asinf+0x1c4>)
 8014d92:	ee29 9a08 	vmul.f32	s18, s18, s16
 8014d96:	429c      	cmp	r4, r3
 8014d98:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014d9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014da0:	dd3d      	ble.n	8014e1e <__ieee754_asinf+0x14e>
 8014da2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8014da6:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8014e98 <__ieee754_asinf+0x1c8>
 8014daa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014dae:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8014e64 <__ieee754_asinf+0x194>
 8014db2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014db6:	2d00      	cmp	r5, #0
 8014db8:	bfd8      	it	le
 8014dba:	eeb1 0a40 	vnegle.f32	s0, s0
 8014dbe:	e79b      	b.n	8014cf8 <__ieee754_asinf+0x28>
 8014dc0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014dc4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8014e6c <__ieee754_asinf+0x19c>
 8014dc8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8014e70 <__ieee754_asinf+0x1a0>
 8014dcc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8014e84 <__ieee754_asinf+0x1b4>
 8014dd0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014dd4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014e78 <__ieee754_asinf+0x1a8>
 8014dd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014ddc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8014e7c <__ieee754_asinf+0x1ac>
 8014de0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014de4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8014e80 <__ieee754_asinf+0x1b0>
 8014de8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014dec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014e74 <__ieee754_asinf+0x1a4>
 8014df0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014df4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014e88 <__ieee754_asinf+0x1b8>
 8014df8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8014dfc:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8014e8c <__ieee754_asinf+0x1bc>
 8014e00:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8014e04:	eddf 6a22 	vldr	s13, [pc, #136]	; 8014e90 <__ieee754_asinf+0x1c0>
 8014e08:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014e10:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014e14:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014e18:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014e1c:	e76c      	b.n	8014cf8 <__ieee754_asinf+0x28>
 8014e1e:	ee10 3a10 	vmov	r3, s0
 8014e22:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014e26:	f023 030f 	bic.w	r3, r3, #15
 8014e2a:	ee07 3a90 	vmov	s15, r3
 8014e2e:	eef1 6a67 	vneg.f32	s13, s15
 8014e32:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8014e36:	ee70 5a00 	vadd.f32	s11, s0, s0
 8014e3a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014e3e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014e60 <__ieee754_asinf+0x190>
 8014e42:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8014e46:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8014e9c <__ieee754_asinf+0x1cc>
 8014e4a:	eee5 7a47 	vfms.f32	s15, s10, s14
 8014e4e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8014e52:	eeb0 6a40 	vmov.f32	s12, s0
 8014e56:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014e5a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014e5e:	e7a8      	b.n	8014db2 <__ieee754_asinf+0xe2>
 8014e60:	b33bbd2e 	.word	0xb33bbd2e
 8014e64:	3fc90fdb 	.word	0x3fc90fdb
 8014e68:	7149f2ca 	.word	0x7149f2ca
 8014e6c:	3811ef08 	.word	0x3811ef08
 8014e70:	3a4f7f04 	.word	0x3a4f7f04
 8014e74:	3e2aaaab 	.word	0x3e2aaaab
 8014e78:	bd241146 	.word	0xbd241146
 8014e7c:	3e4e0aa8 	.word	0x3e4e0aa8
 8014e80:	bea6b090 	.word	0xbea6b090
 8014e84:	3d9dc62e 	.word	0x3d9dc62e
 8014e88:	bf303361 	.word	0xbf303361
 8014e8c:	4001572d 	.word	0x4001572d
 8014e90:	c019d139 	.word	0xc019d139
 8014e94:	3f799999 	.word	0x3f799999
 8014e98:	333bbd2e 	.word	0x333bbd2e
 8014e9c:	3f490fdb 	.word	0x3f490fdb

08014ea0 <__ieee754_atan2f>:
 8014ea0:	ee10 2a90 	vmov	r2, s1
 8014ea4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014ea8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014eac:	b510      	push	{r4, lr}
 8014eae:	eef0 7a40 	vmov.f32	s15, s0
 8014eb2:	dc06      	bgt.n	8014ec2 <__ieee754_atan2f+0x22>
 8014eb4:	ee10 0a10 	vmov	r0, s0
 8014eb8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014ebc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014ec0:	dd04      	ble.n	8014ecc <__ieee754_atan2f+0x2c>
 8014ec2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8014eca:	bd10      	pop	{r4, pc}
 8014ecc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014ed0:	d103      	bne.n	8014eda <__ieee754_atan2f+0x3a>
 8014ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ed6:	f000 bcf3 	b.w	80158c0 <atanf>
 8014eda:	1794      	asrs	r4, r2, #30
 8014edc:	f004 0402 	and.w	r4, r4, #2
 8014ee0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014ee4:	b943      	cbnz	r3, 8014ef8 <__ieee754_atan2f+0x58>
 8014ee6:	2c02      	cmp	r4, #2
 8014ee8:	d06e      	beq.n	8014fc8 <__ieee754_atan2f+0x128>
 8014eea:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8014fd0 <__ieee754_atan2f+0x130>
 8014eee:	2c03      	cmp	r4, #3
 8014ef0:	bf08      	it	eq
 8014ef2:	eef0 7a47 	vmoveq.f32	s15, s14
 8014ef6:	e7e6      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014ef8:	b941      	cbnz	r1, 8014f0c <__ieee754_atan2f+0x6c>
 8014efa:	eddf 7a36 	vldr	s15, [pc, #216]	; 8014fd4 <__ieee754_atan2f+0x134>
 8014efe:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014fd8 <__ieee754_atan2f+0x138>
 8014f02:	2800      	cmp	r0, #0
 8014f04:	bfb8      	it	lt
 8014f06:	eef0 7a47 	vmovlt.f32	s15, s14
 8014f0a:	e7dc      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014f0c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014f10:	d122      	bne.n	8014f58 <__ieee754_atan2f+0xb8>
 8014f12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014f16:	d112      	bne.n	8014f3e <__ieee754_atan2f+0x9e>
 8014f18:	2c02      	cmp	r4, #2
 8014f1a:	d00a      	beq.n	8014f32 <__ieee754_atan2f+0x92>
 8014f1c:	2c03      	cmp	r4, #3
 8014f1e:	d00b      	beq.n	8014f38 <__ieee754_atan2f+0x98>
 8014f20:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8014fdc <__ieee754_atan2f+0x13c>
 8014f24:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8014fe0 <__ieee754_atan2f+0x140>
 8014f28:	2c01      	cmp	r4, #1
 8014f2a:	bf18      	it	ne
 8014f2c:	eef0 7a47 	vmovne.f32	s15, s14
 8014f30:	e7c9      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014f32:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8014fe4 <__ieee754_atan2f+0x144>
 8014f36:	e7c6      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014f38:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014fe8 <__ieee754_atan2f+0x148>
 8014f3c:	e7c3      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014f3e:	2c02      	cmp	r4, #2
 8014f40:	d042      	beq.n	8014fc8 <__ieee754_atan2f+0x128>
 8014f42:	2c03      	cmp	r4, #3
 8014f44:	d005      	beq.n	8014f52 <__ieee754_atan2f+0xb2>
 8014f46:	2c01      	cmp	r4, #1
 8014f48:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014fec <__ieee754_atan2f+0x14c>
 8014f4c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014ff0 <__ieee754_atan2f+0x150>
 8014f50:	e7eb      	b.n	8014f2a <__ieee754_atan2f+0x8a>
 8014f52:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014fd0 <__ieee754_atan2f+0x130>
 8014f56:	e7b6      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014f58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014f5c:	d0cd      	beq.n	8014efa <__ieee754_atan2f+0x5a>
 8014f5e:	1a5b      	subs	r3, r3, r1
 8014f60:	15db      	asrs	r3, r3, #23
 8014f62:	2b3c      	cmp	r3, #60	; 0x3c
 8014f64:	dc1a      	bgt.n	8014f9c <__ieee754_atan2f+0xfc>
 8014f66:	2a00      	cmp	r2, #0
 8014f68:	da01      	bge.n	8014f6e <__ieee754_atan2f+0xce>
 8014f6a:	333c      	adds	r3, #60	; 0x3c
 8014f6c:	db19      	blt.n	8014fa2 <__ieee754_atan2f+0x102>
 8014f6e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014f72:	f000 fd79 	bl	8015a68 <fabsf>
 8014f76:	f000 fca3 	bl	80158c0 <atanf>
 8014f7a:	eef0 7a40 	vmov.f32	s15, s0
 8014f7e:	2c01      	cmp	r4, #1
 8014f80:	d012      	beq.n	8014fa8 <__ieee754_atan2f+0x108>
 8014f82:	2c02      	cmp	r4, #2
 8014f84:	d017      	beq.n	8014fb6 <__ieee754_atan2f+0x116>
 8014f86:	2c00      	cmp	r4, #0
 8014f88:	d09d      	beq.n	8014ec6 <__ieee754_atan2f+0x26>
 8014f8a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8014ff4 <__ieee754_atan2f+0x154>
 8014f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f92:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8014ff8 <__ieee754_atan2f+0x158>
 8014f96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f9a:	e794      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014f9c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014fd4 <__ieee754_atan2f+0x134>
 8014fa0:	e7ed      	b.n	8014f7e <__ieee754_atan2f+0xde>
 8014fa2:	eddf 7a13 	vldr	s15, [pc, #76]	; 8014ff0 <__ieee754_atan2f+0x150>
 8014fa6:	e7ea      	b.n	8014f7e <__ieee754_atan2f+0xde>
 8014fa8:	ee17 3a90 	vmov	r3, s15
 8014fac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014fb0:	ee07 3a90 	vmov	s15, r3
 8014fb4:	e787      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014fb6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8014ff4 <__ieee754_atan2f+0x154>
 8014fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014fbe:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8014ff8 <__ieee754_atan2f+0x158>
 8014fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fc6:	e77e      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014fc8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014ff8 <__ieee754_atan2f+0x158>
 8014fcc:	e77b      	b.n	8014ec6 <__ieee754_atan2f+0x26>
 8014fce:	bf00      	nop
 8014fd0:	c0490fdb 	.word	0xc0490fdb
 8014fd4:	3fc90fdb 	.word	0x3fc90fdb
 8014fd8:	bfc90fdb 	.word	0xbfc90fdb
 8014fdc:	bf490fdb 	.word	0xbf490fdb
 8014fe0:	3f490fdb 	.word	0x3f490fdb
 8014fe4:	4016cbe4 	.word	0x4016cbe4
 8014fe8:	c016cbe4 	.word	0xc016cbe4
 8014fec:	80000000 	.word	0x80000000
 8014ff0:	00000000 	.word	0x00000000
 8014ff4:	33bbbd2e 	.word	0x33bbbd2e
 8014ff8:	40490fdb 	.word	0x40490fdb

08014ffc <__ieee754_rem_pio2f>:
 8014ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ffe:	ee10 6a10 	vmov	r6, s0
 8015002:	4b86      	ldr	r3, [pc, #536]	; (801521c <__ieee754_rem_pio2f+0x220>)
 8015004:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8015008:	429c      	cmp	r4, r3
 801500a:	b087      	sub	sp, #28
 801500c:	4605      	mov	r5, r0
 801500e:	dc05      	bgt.n	801501c <__ieee754_rem_pio2f+0x20>
 8015010:	2300      	movs	r3, #0
 8015012:	ed85 0a00 	vstr	s0, [r5]
 8015016:	6043      	str	r3, [r0, #4]
 8015018:	2000      	movs	r0, #0
 801501a:	e020      	b.n	801505e <__ieee754_rem_pio2f+0x62>
 801501c:	4b80      	ldr	r3, [pc, #512]	; (8015220 <__ieee754_rem_pio2f+0x224>)
 801501e:	429c      	cmp	r4, r3
 8015020:	dc38      	bgt.n	8015094 <__ieee754_rem_pio2f+0x98>
 8015022:	2e00      	cmp	r6, #0
 8015024:	f024 040f 	bic.w	r4, r4, #15
 8015028:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8015224 <__ieee754_rem_pio2f+0x228>
 801502c:	4b7e      	ldr	r3, [pc, #504]	; (8015228 <__ieee754_rem_pio2f+0x22c>)
 801502e:	dd18      	ble.n	8015062 <__ieee754_rem_pio2f+0x66>
 8015030:	429c      	cmp	r4, r3
 8015032:	ee70 7a47 	vsub.f32	s15, s0, s14
 8015036:	bf09      	itett	eq
 8015038:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801522c <__ieee754_rem_pio2f+0x230>
 801503c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8015230 <__ieee754_rem_pio2f+0x234>
 8015040:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8015044:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8015234 <__ieee754_rem_pio2f+0x238>
 8015048:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801504c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015050:	edc0 6a00 	vstr	s13, [r0]
 8015054:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015058:	edc0 7a01 	vstr	s15, [r0, #4]
 801505c:	2001      	movs	r0, #1
 801505e:	b007      	add	sp, #28
 8015060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015062:	429c      	cmp	r4, r3
 8015064:	ee70 7a07 	vadd.f32	s15, s0, s14
 8015068:	bf09      	itett	eq
 801506a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801522c <__ieee754_rem_pio2f+0x230>
 801506e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8015230 <__ieee754_rem_pio2f+0x234>
 8015072:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8015076:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8015234 <__ieee754_rem_pio2f+0x238>
 801507a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801507e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015082:	edc0 6a00 	vstr	s13, [r0]
 8015086:	ee77 7a87 	vadd.f32	s15, s15, s14
 801508a:	edc0 7a01 	vstr	s15, [r0, #4]
 801508e:	f04f 30ff 	mov.w	r0, #4294967295
 8015092:	e7e4      	b.n	801505e <__ieee754_rem_pio2f+0x62>
 8015094:	4b68      	ldr	r3, [pc, #416]	; (8015238 <__ieee754_rem_pio2f+0x23c>)
 8015096:	429c      	cmp	r4, r3
 8015098:	dc71      	bgt.n	801517e <__ieee754_rem_pio2f+0x182>
 801509a:	f000 fce5 	bl	8015a68 <fabsf>
 801509e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801523c <__ieee754_rem_pio2f+0x240>
 80150a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80150a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80150aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150ae:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80150b2:	ee17 0a90 	vmov	r0, s15
 80150b6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8015224 <__ieee754_rem_pio2f+0x228>
 80150ba:	eeb1 7a46 	vneg.f32	s14, s12
 80150be:	eea7 0a27 	vfma.f32	s0, s14, s15
 80150c2:	281f      	cmp	r0, #31
 80150c4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8015230 <__ieee754_rem_pio2f+0x234>
 80150c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80150cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80150d0:	ee16 3a90 	vmov	r3, s13
 80150d4:	dc1c      	bgt.n	8015110 <__ieee754_rem_pio2f+0x114>
 80150d6:	1e47      	subs	r7, r0, #1
 80150d8:	4959      	ldr	r1, [pc, #356]	; (8015240 <__ieee754_rem_pio2f+0x244>)
 80150da:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80150de:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80150e2:	428a      	cmp	r2, r1
 80150e4:	d014      	beq.n	8015110 <__ieee754_rem_pio2f+0x114>
 80150e6:	602b      	str	r3, [r5, #0]
 80150e8:	ed95 7a00 	vldr	s14, [r5]
 80150ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 80150f0:	2e00      	cmp	r6, #0
 80150f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80150f6:	ed85 0a01 	vstr	s0, [r5, #4]
 80150fa:	dab0      	bge.n	801505e <__ieee754_rem_pio2f+0x62>
 80150fc:	eeb1 7a47 	vneg.f32	s14, s14
 8015100:	eeb1 0a40 	vneg.f32	s0, s0
 8015104:	ed85 7a00 	vstr	s14, [r5]
 8015108:	ed85 0a01 	vstr	s0, [r5, #4]
 801510c:	4240      	negs	r0, r0
 801510e:	e7a6      	b.n	801505e <__ieee754_rem_pio2f+0x62>
 8015110:	15e4      	asrs	r4, r4, #23
 8015112:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015116:	1aa2      	subs	r2, r4, r2
 8015118:	2a08      	cmp	r2, #8
 801511a:	dde4      	ble.n	80150e6 <__ieee754_rem_pio2f+0xea>
 801511c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801522c <__ieee754_rem_pio2f+0x230>
 8015120:	eef0 6a40 	vmov.f32	s13, s0
 8015124:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015128:	ee30 0a66 	vsub.f32	s0, s0, s13
 801512c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8015130:	eddf 7a40 	vldr	s15, [pc, #256]	; 8015234 <__ieee754_rem_pio2f+0x238>
 8015134:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8015138:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801513c:	eef0 7a40 	vmov.f32	s15, s0
 8015140:	ee15 3a90 	vmov	r3, s11
 8015144:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015148:	1aa4      	subs	r4, r4, r2
 801514a:	2c19      	cmp	r4, #25
 801514c:	dc04      	bgt.n	8015158 <__ieee754_rem_pio2f+0x15c>
 801514e:	edc5 5a00 	vstr	s11, [r5]
 8015152:	eeb0 0a66 	vmov.f32	s0, s13
 8015156:	e7c7      	b.n	80150e8 <__ieee754_rem_pio2f+0xec>
 8015158:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8015244 <__ieee754_rem_pio2f+0x248>
 801515c:	eeb0 0a66 	vmov.f32	s0, s13
 8015160:	eea7 0a25 	vfma.f32	s0, s14, s11
 8015164:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8015168:	eee7 7a25 	vfma.f32	s15, s14, s11
 801516c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015248 <__ieee754_rem_pio2f+0x24c>
 8015170:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8015174:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015178:	ed85 7a00 	vstr	s14, [r5]
 801517c:	e7b4      	b.n	80150e8 <__ieee754_rem_pio2f+0xec>
 801517e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015182:	db06      	blt.n	8015192 <__ieee754_rem_pio2f+0x196>
 8015184:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015188:	edc0 7a01 	vstr	s15, [r0, #4]
 801518c:	edc0 7a00 	vstr	s15, [r0]
 8015190:	e742      	b.n	8015018 <__ieee754_rem_pio2f+0x1c>
 8015192:	15e2      	asrs	r2, r4, #23
 8015194:	3a86      	subs	r2, #134	; 0x86
 8015196:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801519a:	ee07 3a90 	vmov	s15, r3
 801519e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80151a2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801524c <__ieee754_rem_pio2f+0x250>
 80151a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80151ae:	ed8d 7a03 	vstr	s14, [sp, #12]
 80151b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80151b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80151ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80151c2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80151c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80151ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80151ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d2:	edcd 7a05 	vstr	s15, [sp, #20]
 80151d6:	d11e      	bne.n	8015216 <__ieee754_rem_pio2f+0x21a>
 80151d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80151dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e0:	bf0c      	ite	eq
 80151e2:	2301      	moveq	r3, #1
 80151e4:	2302      	movne	r3, #2
 80151e6:	491a      	ldr	r1, [pc, #104]	; (8015250 <__ieee754_rem_pio2f+0x254>)
 80151e8:	9101      	str	r1, [sp, #4]
 80151ea:	2102      	movs	r1, #2
 80151ec:	9100      	str	r1, [sp, #0]
 80151ee:	a803      	add	r0, sp, #12
 80151f0:	4629      	mov	r1, r5
 80151f2:	f000 f891 	bl	8015318 <__kernel_rem_pio2f>
 80151f6:	2e00      	cmp	r6, #0
 80151f8:	f6bf af31 	bge.w	801505e <__ieee754_rem_pio2f+0x62>
 80151fc:	edd5 7a00 	vldr	s15, [r5]
 8015200:	eef1 7a67 	vneg.f32	s15, s15
 8015204:	edc5 7a00 	vstr	s15, [r5]
 8015208:	edd5 7a01 	vldr	s15, [r5, #4]
 801520c:	eef1 7a67 	vneg.f32	s15, s15
 8015210:	edc5 7a01 	vstr	s15, [r5, #4]
 8015214:	e77a      	b.n	801510c <__ieee754_rem_pio2f+0x110>
 8015216:	2303      	movs	r3, #3
 8015218:	e7e5      	b.n	80151e6 <__ieee754_rem_pio2f+0x1ea>
 801521a:	bf00      	nop
 801521c:	3f490fd8 	.word	0x3f490fd8
 8015220:	4016cbe3 	.word	0x4016cbe3
 8015224:	3fc90f80 	.word	0x3fc90f80
 8015228:	3fc90fd0 	.word	0x3fc90fd0
 801522c:	37354400 	.word	0x37354400
 8015230:	37354443 	.word	0x37354443
 8015234:	2e85a308 	.word	0x2e85a308
 8015238:	43490f80 	.word	0x43490f80
 801523c:	3f22f984 	.word	0x3f22f984
 8015240:	0801a96c 	.word	0x0801a96c
 8015244:	2e85a300 	.word	0x2e85a300
 8015248:	248d3132 	.word	0x248d3132
 801524c:	43800000 	.word	0x43800000
 8015250:	0801a9ec 	.word	0x0801a9ec

08015254 <__ieee754_sqrtf>:
 8015254:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015258:	4770      	bx	lr
	...

0801525c <__kernel_cosf>:
 801525c:	ee10 3a10 	vmov	r3, s0
 8015260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015264:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801526c:	da05      	bge.n	801527a <__kernel_cosf+0x1e>
 801526e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015272:	ee17 2a90 	vmov	r2, s15
 8015276:	2a00      	cmp	r2, #0
 8015278:	d03b      	beq.n	80152f2 <__kernel_cosf+0x96>
 801527a:	ee20 6a00 	vmul.f32	s12, s0, s0
 801527e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015282:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80152f8 <__kernel_cosf+0x9c>
 8015286:	4a1d      	ldr	r2, [pc, #116]	; (80152fc <__kernel_cosf+0xa0>)
 8015288:	ee66 7a07 	vmul.f32	s15, s12, s14
 801528c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8015300 <__kernel_cosf+0xa4>
 8015290:	eea6 7a25 	vfma.f32	s14, s12, s11
 8015294:	4293      	cmp	r3, r2
 8015296:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8015304 <__kernel_cosf+0xa8>
 801529a:	eee7 5a06 	vfma.f32	s11, s14, s12
 801529e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8015308 <__kernel_cosf+0xac>
 80152a2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80152a6:	eddf 5a19 	vldr	s11, [pc, #100]	; 801530c <__kernel_cosf+0xb0>
 80152aa:	eee7 5a06 	vfma.f32	s11, s14, s12
 80152ae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8015310 <__kernel_cosf+0xb4>
 80152b2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80152b6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80152ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80152be:	eee6 0a07 	vfma.f32	s1, s12, s14
 80152c2:	dc04      	bgt.n	80152ce <__kernel_cosf+0x72>
 80152c4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80152c8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80152cc:	4770      	bx	lr
 80152ce:	4a11      	ldr	r2, [pc, #68]	; (8015314 <__kernel_cosf+0xb8>)
 80152d0:	4293      	cmp	r3, r2
 80152d2:	bfda      	itte	le
 80152d4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80152d8:	ee07 3a10 	vmovle	s14, r3
 80152dc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80152e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80152e4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80152e8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80152ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 80152f0:	4770      	bx	lr
 80152f2:	eeb0 0a66 	vmov.f32	s0, s13
 80152f6:	4770      	bx	lr
 80152f8:	ad47d74e 	.word	0xad47d74e
 80152fc:	3e999999 	.word	0x3e999999
 8015300:	310f74f6 	.word	0x310f74f6
 8015304:	b493f27c 	.word	0xb493f27c
 8015308:	37d00d01 	.word	0x37d00d01
 801530c:	bab60b61 	.word	0xbab60b61
 8015310:	3d2aaaab 	.word	0x3d2aaaab
 8015314:	3f480000 	.word	0x3f480000

08015318 <__kernel_rem_pio2f>:
 8015318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801531c:	ed2d 8b04 	vpush	{d8-d9}
 8015320:	b0d7      	sub	sp, #348	; 0x15c
 8015322:	469b      	mov	fp, r3
 8015324:	460e      	mov	r6, r1
 8015326:	4bbe      	ldr	r3, [pc, #760]	; (8015620 <__kernel_rem_pio2f+0x308>)
 8015328:	9964      	ldr	r1, [sp, #400]	; 0x190
 801532a:	9002      	str	r0, [sp, #8]
 801532c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8015330:	9865      	ldr	r0, [sp, #404]	; 0x194
 8015332:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8015630 <__kernel_rem_pio2f+0x318>
 8015336:	1ed1      	subs	r1, r2, #3
 8015338:	2308      	movs	r3, #8
 801533a:	fb91 f1f3 	sdiv	r1, r1, r3
 801533e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8015342:	f10b 3aff 	add.w	sl, fp, #4294967295
 8015346:	1c4c      	adds	r4, r1, #1
 8015348:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 801534c:	eba1 050a 	sub.w	r5, r1, sl
 8015350:	aa1a      	add	r2, sp, #104	; 0x68
 8015352:	eb09 070a 	add.w	r7, r9, sl
 8015356:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801535a:	4696      	mov	lr, r2
 801535c:	2300      	movs	r3, #0
 801535e:	42bb      	cmp	r3, r7
 8015360:	dd0f      	ble.n	8015382 <__kernel_rem_pio2f+0x6a>
 8015362:	af42      	add	r7, sp, #264	; 0x108
 8015364:	2200      	movs	r2, #0
 8015366:	454a      	cmp	r2, r9
 8015368:	dc27      	bgt.n	80153ba <__kernel_rem_pio2f+0xa2>
 801536a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801536e:	eb0b 0302 	add.w	r3, fp, r2
 8015372:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8015376:	9d02      	ldr	r5, [sp, #8]
 8015378:	eddf 7aad 	vldr	s15, [pc, #692]	; 8015630 <__kernel_rem_pio2f+0x318>
 801537c:	f04f 0c00 	mov.w	ip, #0
 8015380:	e015      	b.n	80153ae <__kernel_rem_pio2f+0x96>
 8015382:	42dd      	cmn	r5, r3
 8015384:	bf5d      	ittte	pl
 8015386:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 801538a:	ee07 2a90 	vmovpl	s15, r2
 801538e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8015392:	eef0 7a47 	vmovmi.f32	s15, s14
 8015396:	ecee 7a01 	vstmia	lr!, {s15}
 801539a:	3301      	adds	r3, #1
 801539c:	e7df      	b.n	801535e <__kernel_rem_pio2f+0x46>
 801539e:	ecf5 6a01 	vldmia	r5!, {s13}
 80153a2:	ed33 7a01 	vldmdb	r3!, {s14}
 80153a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80153aa:	f10c 0c01 	add.w	ip, ip, #1
 80153ae:	45d4      	cmp	ip, sl
 80153b0:	ddf5      	ble.n	801539e <__kernel_rem_pio2f+0x86>
 80153b2:	ece7 7a01 	vstmia	r7!, {s15}
 80153b6:	3201      	adds	r2, #1
 80153b8:	e7d5      	b.n	8015366 <__kernel_rem_pio2f+0x4e>
 80153ba:	ab06      	add	r3, sp, #24
 80153bc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80153c0:	9304      	str	r3, [sp, #16]
 80153c2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 801562c <__kernel_rem_pio2f+0x314>
 80153c6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8015628 <__kernel_rem_pio2f+0x310>
 80153ca:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80153ce:	9303      	str	r3, [sp, #12]
 80153d0:	464d      	mov	r5, r9
 80153d2:	ab56      	add	r3, sp, #344	; 0x158
 80153d4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80153d8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80153dc:	3f01      	subs	r7, #1
 80153de:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80153e2:	00bf      	lsls	r7, r7, #2
 80153e4:	ab56      	add	r3, sp, #344	; 0x158
 80153e6:	19da      	adds	r2, r3, r7
 80153e8:	3a4c      	subs	r2, #76	; 0x4c
 80153ea:	2300      	movs	r3, #0
 80153ec:	1ae9      	subs	r1, r5, r3
 80153ee:	2900      	cmp	r1, #0
 80153f0:	dc4c      	bgt.n	801548c <__kernel_rem_pio2f+0x174>
 80153f2:	4620      	mov	r0, r4
 80153f4:	f000 fb82 	bl	8015afc <scalbnf>
 80153f8:	eeb0 8a40 	vmov.f32	s16, s0
 80153fc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8015400:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015404:	f000 fb38 	bl	8015a78 <floorf>
 8015408:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801540c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8015410:	2c00      	cmp	r4, #0
 8015412:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015416:	edcd 7a01 	vstr	s15, [sp, #4]
 801541a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801541e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015422:	dd48      	ble.n	80154b6 <__kernel_rem_pio2f+0x19e>
 8015424:	1e69      	subs	r1, r5, #1
 8015426:	ab06      	add	r3, sp, #24
 8015428:	f1c4 0008 	rsb	r0, r4, #8
 801542c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8015430:	9a01      	ldr	r2, [sp, #4]
 8015432:	fa4c f300 	asr.w	r3, ip, r0
 8015436:	441a      	add	r2, r3
 8015438:	4083      	lsls	r3, r0
 801543a:	9201      	str	r2, [sp, #4]
 801543c:	ebac 0203 	sub.w	r2, ip, r3
 8015440:	ab06      	add	r3, sp, #24
 8015442:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8015446:	f1c4 0307 	rsb	r3, r4, #7
 801544a:	fa42 f803 	asr.w	r8, r2, r3
 801544e:	f1b8 0f00 	cmp.w	r8, #0
 8015452:	dd41      	ble.n	80154d8 <__kernel_rem_pio2f+0x1c0>
 8015454:	9b01      	ldr	r3, [sp, #4]
 8015456:	2000      	movs	r0, #0
 8015458:	3301      	adds	r3, #1
 801545a:	9301      	str	r3, [sp, #4]
 801545c:	4601      	mov	r1, r0
 801545e:	4285      	cmp	r5, r0
 8015460:	dc6d      	bgt.n	801553e <__kernel_rem_pio2f+0x226>
 8015462:	2c00      	cmp	r4, #0
 8015464:	dd04      	ble.n	8015470 <__kernel_rem_pio2f+0x158>
 8015466:	2c01      	cmp	r4, #1
 8015468:	d07e      	beq.n	8015568 <__kernel_rem_pio2f+0x250>
 801546a:	2c02      	cmp	r4, #2
 801546c:	f000 8086 	beq.w	801557c <__kernel_rem_pio2f+0x264>
 8015470:	f1b8 0f02 	cmp.w	r8, #2
 8015474:	d130      	bne.n	80154d8 <__kernel_rem_pio2f+0x1c0>
 8015476:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801547a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801547e:	b359      	cbz	r1, 80154d8 <__kernel_rem_pio2f+0x1c0>
 8015480:	4620      	mov	r0, r4
 8015482:	f000 fb3b 	bl	8015afc <scalbnf>
 8015486:	ee38 8a40 	vsub.f32	s16, s16, s0
 801548a:	e025      	b.n	80154d8 <__kernel_rem_pio2f+0x1c0>
 801548c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8015490:	a806      	add	r0, sp, #24
 8015492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801549a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801549e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80154a2:	ee10 1a10 	vmov	r1, s0
 80154a6:	ed32 0a01 	vldmdb	r2!, {s0}
 80154aa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80154ae:	ee37 0a80 	vadd.f32	s0, s15, s0
 80154b2:	3301      	adds	r3, #1
 80154b4:	e79a      	b.n	80153ec <__kernel_rem_pio2f+0xd4>
 80154b6:	d106      	bne.n	80154c6 <__kernel_rem_pio2f+0x1ae>
 80154b8:	1e6b      	subs	r3, r5, #1
 80154ba:	aa06      	add	r2, sp, #24
 80154bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80154c0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80154c4:	e7c3      	b.n	801544e <__kernel_rem_pio2f+0x136>
 80154c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80154ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80154ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154d2:	da31      	bge.n	8015538 <__kernel_rem_pio2f+0x220>
 80154d4:	f04f 0800 	mov.w	r8, #0
 80154d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80154dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e0:	f040 80a8 	bne.w	8015634 <__kernel_rem_pio2f+0x31c>
 80154e4:	1e6b      	subs	r3, r5, #1
 80154e6:	4618      	mov	r0, r3
 80154e8:	2200      	movs	r2, #0
 80154ea:	4548      	cmp	r0, r9
 80154ec:	da4d      	bge.n	801558a <__kernel_rem_pio2f+0x272>
 80154ee:	2a00      	cmp	r2, #0
 80154f0:	f000 8087 	beq.w	8015602 <__kernel_rem_pio2f+0x2ea>
 80154f4:	aa06      	add	r2, sp, #24
 80154f6:	3c08      	subs	r4, #8
 80154f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80154fc:	2900      	cmp	r1, #0
 80154fe:	f000 808d 	beq.w	801561c <__kernel_rem_pio2f+0x304>
 8015502:	4620      	mov	r0, r4
 8015504:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015508:	9302      	str	r3, [sp, #8]
 801550a:	f000 faf7 	bl	8015afc <scalbnf>
 801550e:	9b02      	ldr	r3, [sp, #8]
 8015510:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801562c <__kernel_rem_pio2f+0x314>
 8015514:	0099      	lsls	r1, r3, #2
 8015516:	aa42      	add	r2, sp, #264	; 0x108
 8015518:	1850      	adds	r0, r2, r1
 801551a:	1d05      	adds	r5, r0, #4
 801551c:	461c      	mov	r4, r3
 801551e:	2c00      	cmp	r4, #0
 8015520:	f280 80b8 	bge.w	8015694 <__kernel_rem_pio2f+0x37c>
 8015524:	2500      	movs	r5, #0
 8015526:	1b5c      	subs	r4, r3, r5
 8015528:	2c00      	cmp	r4, #0
 801552a:	f2c0 80d8 	blt.w	80156de <__kernel_rem_pio2f+0x3c6>
 801552e:	4f3d      	ldr	r7, [pc, #244]	; (8015624 <__kernel_rem_pio2f+0x30c>)
 8015530:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8015630 <__kernel_rem_pio2f+0x318>
 8015534:	2400      	movs	r4, #0
 8015536:	e0c6      	b.n	80156c6 <__kernel_rem_pio2f+0x3ae>
 8015538:	f04f 0802 	mov.w	r8, #2
 801553c:	e78a      	b.n	8015454 <__kernel_rem_pio2f+0x13c>
 801553e:	ab06      	add	r3, sp, #24
 8015540:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015544:	b949      	cbnz	r1, 801555a <__kernel_rem_pio2f+0x242>
 8015546:	b12b      	cbz	r3, 8015554 <__kernel_rem_pio2f+0x23c>
 8015548:	aa06      	add	r2, sp, #24
 801554a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801554e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8015552:	2301      	movs	r3, #1
 8015554:	3001      	adds	r0, #1
 8015556:	4619      	mov	r1, r3
 8015558:	e781      	b.n	801545e <__kernel_rem_pio2f+0x146>
 801555a:	aa06      	add	r2, sp, #24
 801555c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8015560:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8015564:	460b      	mov	r3, r1
 8015566:	e7f5      	b.n	8015554 <__kernel_rem_pio2f+0x23c>
 8015568:	1e68      	subs	r0, r5, #1
 801556a:	ab06      	add	r3, sp, #24
 801556c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015574:	aa06      	add	r2, sp, #24
 8015576:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801557a:	e779      	b.n	8015470 <__kernel_rem_pio2f+0x158>
 801557c:	1e68      	subs	r0, r5, #1
 801557e:	ab06      	add	r3, sp, #24
 8015580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015588:	e7f4      	b.n	8015574 <__kernel_rem_pio2f+0x25c>
 801558a:	a906      	add	r1, sp, #24
 801558c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8015590:	3801      	subs	r0, #1
 8015592:	430a      	orrs	r2, r1
 8015594:	e7a9      	b.n	80154ea <__kernel_rem_pio2f+0x1d2>
 8015596:	f10c 0c01 	add.w	ip, ip, #1
 801559a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801559e:	2a00      	cmp	r2, #0
 80155a0:	d0f9      	beq.n	8015596 <__kernel_rem_pio2f+0x27e>
 80155a2:	eb0b 0305 	add.w	r3, fp, r5
 80155a6:	aa1a      	add	r2, sp, #104	; 0x68
 80155a8:	009b      	lsls	r3, r3, #2
 80155aa:	1898      	adds	r0, r3, r2
 80155ac:	3004      	adds	r0, #4
 80155ae:	1c69      	adds	r1, r5, #1
 80155b0:	3704      	adds	r7, #4
 80155b2:	2200      	movs	r2, #0
 80155b4:	4465      	add	r5, ip
 80155b6:	9005      	str	r0, [sp, #20]
 80155b8:	428d      	cmp	r5, r1
 80155ba:	f6ff af0a 	blt.w	80153d2 <__kernel_rem_pio2f+0xba>
 80155be:	a81a      	add	r0, sp, #104	; 0x68
 80155c0:	eb02 0c03 	add.w	ip, r2, r3
 80155c4:	4484      	add	ip, r0
 80155c6:	9803      	ldr	r0, [sp, #12]
 80155c8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80155cc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80155d0:	9001      	str	r0, [sp, #4]
 80155d2:	ee07 0a90 	vmov	s15, r0
 80155d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155da:	9805      	ldr	r0, [sp, #20]
 80155dc:	edcc 7a00 	vstr	s15, [ip]
 80155e0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8015630 <__kernel_rem_pio2f+0x318>
 80155e4:	eb00 0802 	add.w	r8, r0, r2
 80155e8:	f04f 0c00 	mov.w	ip, #0
 80155ec:	45d4      	cmp	ip, sl
 80155ee:	dd0c      	ble.n	801560a <__kernel_rem_pio2f+0x2f2>
 80155f0:	eb02 0c07 	add.w	ip, r2, r7
 80155f4:	a842      	add	r0, sp, #264	; 0x108
 80155f6:	4484      	add	ip, r0
 80155f8:	edcc 7a01 	vstr	s15, [ip, #4]
 80155fc:	3101      	adds	r1, #1
 80155fe:	3204      	adds	r2, #4
 8015600:	e7da      	b.n	80155b8 <__kernel_rem_pio2f+0x2a0>
 8015602:	9b04      	ldr	r3, [sp, #16]
 8015604:	f04f 0c01 	mov.w	ip, #1
 8015608:	e7c7      	b.n	801559a <__kernel_rem_pio2f+0x282>
 801560a:	ecfe 6a01 	vldmia	lr!, {s13}
 801560e:	ed38 7a01 	vldmdb	r8!, {s14}
 8015612:	f10c 0c01 	add.w	ip, ip, #1
 8015616:	eee6 7a87 	vfma.f32	s15, s13, s14
 801561a:	e7e7      	b.n	80155ec <__kernel_rem_pio2f+0x2d4>
 801561c:	3b01      	subs	r3, #1
 801561e:	e769      	b.n	80154f4 <__kernel_rem_pio2f+0x1dc>
 8015620:	0801ad30 	.word	0x0801ad30
 8015624:	0801ad04 	.word	0x0801ad04
 8015628:	43800000 	.word	0x43800000
 801562c:	3b800000 	.word	0x3b800000
 8015630:	00000000 	.word	0x00000000
 8015634:	4260      	negs	r0, r4
 8015636:	eeb0 0a48 	vmov.f32	s0, s16
 801563a:	f000 fa5f 	bl	8015afc <scalbnf>
 801563e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8015628 <__kernel_rem_pio2f+0x310>
 8015642:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8015646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801564a:	db1a      	blt.n	8015682 <__kernel_rem_pio2f+0x36a>
 801564c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801562c <__kernel_rem_pio2f+0x314>
 8015650:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015654:	aa06      	add	r2, sp, #24
 8015656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801565a:	a906      	add	r1, sp, #24
 801565c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015660:	3408      	adds	r4, #8
 8015662:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801566a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801566e:	ee10 3a10 	vmov	r3, s0
 8015672:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015676:	1c6b      	adds	r3, r5, #1
 8015678:	ee17 2a90 	vmov	r2, s15
 801567c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015680:	e73f      	b.n	8015502 <__kernel_rem_pio2f+0x1ea>
 8015682:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015686:	aa06      	add	r2, sp, #24
 8015688:	ee10 3a10 	vmov	r3, s0
 801568c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015690:	462b      	mov	r3, r5
 8015692:	e736      	b.n	8015502 <__kernel_rem_pio2f+0x1ea>
 8015694:	aa06      	add	r2, sp, #24
 8015696:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801569a:	9202      	str	r2, [sp, #8]
 801569c:	ee07 2a90 	vmov	s15, r2
 80156a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156a4:	3c01      	subs	r4, #1
 80156a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80156aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80156ae:	ed65 7a01 	vstmdb	r5!, {s15}
 80156b2:	e734      	b.n	801551e <__kernel_rem_pio2f+0x206>
 80156b4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80156b8:	ecf7 6a01 	vldmia	r7!, {s13}
 80156bc:	ed9c 7a00 	vldr	s14, [ip]
 80156c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80156c4:	3401      	adds	r4, #1
 80156c6:	454c      	cmp	r4, r9
 80156c8:	dc01      	bgt.n	80156ce <__kernel_rem_pio2f+0x3b6>
 80156ca:	42a5      	cmp	r5, r4
 80156cc:	daf2      	bge.n	80156b4 <__kernel_rem_pio2f+0x39c>
 80156ce:	aa56      	add	r2, sp, #344	; 0x158
 80156d0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80156d4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80156d8:	3501      	adds	r5, #1
 80156da:	3804      	subs	r0, #4
 80156dc:	e723      	b.n	8015526 <__kernel_rem_pio2f+0x20e>
 80156de:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80156e0:	2a03      	cmp	r2, #3
 80156e2:	d84d      	bhi.n	8015780 <__kernel_rem_pio2f+0x468>
 80156e4:	e8df f002 	tbb	[pc, r2]
 80156e8:	021f1f3e 	.word	0x021f1f3e
 80156ec:	aa56      	add	r2, sp, #344	; 0x158
 80156ee:	4411      	add	r1, r2
 80156f0:	399c      	subs	r1, #156	; 0x9c
 80156f2:	4608      	mov	r0, r1
 80156f4:	461c      	mov	r4, r3
 80156f6:	2c00      	cmp	r4, #0
 80156f8:	dc5f      	bgt.n	80157ba <__kernel_rem_pio2f+0x4a2>
 80156fa:	4608      	mov	r0, r1
 80156fc:	461c      	mov	r4, r3
 80156fe:	2c01      	cmp	r4, #1
 8015700:	dc6b      	bgt.n	80157da <__kernel_rem_pio2f+0x4c2>
 8015702:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8015630 <__kernel_rem_pio2f+0x318>
 8015706:	2b01      	cmp	r3, #1
 8015708:	dc77      	bgt.n	80157fa <__kernel_rem_pio2f+0x4e2>
 801570a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801570e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8015712:	f1b8 0f00 	cmp.w	r8, #0
 8015716:	d176      	bne.n	8015806 <__kernel_rem_pio2f+0x4ee>
 8015718:	edc6 6a00 	vstr	s13, [r6]
 801571c:	ed86 7a01 	vstr	s14, [r6, #4]
 8015720:	edc6 7a02 	vstr	s15, [r6, #8]
 8015724:	e02c      	b.n	8015780 <__kernel_rem_pio2f+0x468>
 8015726:	aa56      	add	r2, sp, #344	; 0x158
 8015728:	4411      	add	r1, r2
 801572a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8015630 <__kernel_rem_pio2f+0x318>
 801572e:	399c      	subs	r1, #156	; 0x9c
 8015730:	4618      	mov	r0, r3
 8015732:	2800      	cmp	r0, #0
 8015734:	da32      	bge.n	801579c <__kernel_rem_pio2f+0x484>
 8015736:	f1b8 0f00 	cmp.w	r8, #0
 801573a:	d035      	beq.n	80157a8 <__kernel_rem_pio2f+0x490>
 801573c:	eef1 7a47 	vneg.f32	s15, s14
 8015740:	edc6 7a00 	vstr	s15, [r6]
 8015744:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8015748:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801574c:	a82f      	add	r0, sp, #188	; 0xbc
 801574e:	2101      	movs	r1, #1
 8015750:	428b      	cmp	r3, r1
 8015752:	da2c      	bge.n	80157ae <__kernel_rem_pio2f+0x496>
 8015754:	f1b8 0f00 	cmp.w	r8, #0
 8015758:	d001      	beq.n	801575e <__kernel_rem_pio2f+0x446>
 801575a:	eef1 7a67 	vneg.f32	s15, s15
 801575e:	edc6 7a01 	vstr	s15, [r6, #4]
 8015762:	e00d      	b.n	8015780 <__kernel_rem_pio2f+0x468>
 8015764:	aa56      	add	r2, sp, #344	; 0x158
 8015766:	4411      	add	r1, r2
 8015768:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8015630 <__kernel_rem_pio2f+0x318>
 801576c:	399c      	subs	r1, #156	; 0x9c
 801576e:	2b00      	cmp	r3, #0
 8015770:	da0e      	bge.n	8015790 <__kernel_rem_pio2f+0x478>
 8015772:	f1b8 0f00 	cmp.w	r8, #0
 8015776:	d001      	beq.n	801577c <__kernel_rem_pio2f+0x464>
 8015778:	eef1 7a67 	vneg.f32	s15, s15
 801577c:	edc6 7a00 	vstr	s15, [r6]
 8015780:	9b01      	ldr	r3, [sp, #4]
 8015782:	f003 0007 	and.w	r0, r3, #7
 8015786:	b057      	add	sp, #348	; 0x15c
 8015788:	ecbd 8b04 	vpop	{d8-d9}
 801578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015790:	ed31 7a01 	vldmdb	r1!, {s14}
 8015794:	3b01      	subs	r3, #1
 8015796:	ee77 7a87 	vadd.f32	s15, s15, s14
 801579a:	e7e8      	b.n	801576e <__kernel_rem_pio2f+0x456>
 801579c:	ed71 7a01 	vldmdb	r1!, {s15}
 80157a0:	3801      	subs	r0, #1
 80157a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80157a6:	e7c4      	b.n	8015732 <__kernel_rem_pio2f+0x41a>
 80157a8:	eef0 7a47 	vmov.f32	s15, s14
 80157ac:	e7c8      	b.n	8015740 <__kernel_rem_pio2f+0x428>
 80157ae:	ecb0 7a01 	vldmia	r0!, {s14}
 80157b2:	3101      	adds	r1, #1
 80157b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80157b8:	e7ca      	b.n	8015750 <__kernel_rem_pio2f+0x438>
 80157ba:	ed50 7a02 	vldr	s15, [r0, #-8]
 80157be:	ed70 6a01 	vldmdb	r0!, {s13}
 80157c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80157c6:	3c01      	subs	r4, #1
 80157c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157cc:	ed00 7a01 	vstr	s14, [r0, #-4]
 80157d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80157d4:	edc0 7a00 	vstr	s15, [r0]
 80157d8:	e78d      	b.n	80156f6 <__kernel_rem_pio2f+0x3de>
 80157da:	ed50 7a02 	vldr	s15, [r0, #-8]
 80157de:	ed70 6a01 	vldmdb	r0!, {s13}
 80157e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80157e6:	3c01      	subs	r4, #1
 80157e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157ec:	ed00 7a01 	vstr	s14, [r0, #-4]
 80157f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80157f4:	edc0 7a00 	vstr	s15, [r0]
 80157f8:	e781      	b.n	80156fe <__kernel_rem_pio2f+0x3e6>
 80157fa:	ed31 7a01 	vldmdb	r1!, {s14}
 80157fe:	3b01      	subs	r3, #1
 8015800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015804:	e77f      	b.n	8015706 <__kernel_rem_pio2f+0x3ee>
 8015806:	eef1 6a66 	vneg.f32	s13, s13
 801580a:	eeb1 7a47 	vneg.f32	s14, s14
 801580e:	edc6 6a00 	vstr	s13, [r6]
 8015812:	ed86 7a01 	vstr	s14, [r6, #4]
 8015816:	eef1 7a67 	vneg.f32	s15, s15
 801581a:	e781      	b.n	8015720 <__kernel_rem_pio2f+0x408>

0801581c <__kernel_sinf>:
 801581c:	ee10 3a10 	vmov	r3, s0
 8015820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015824:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015828:	da04      	bge.n	8015834 <__kernel_sinf+0x18>
 801582a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801582e:	ee17 3a90 	vmov	r3, s15
 8015832:	b35b      	cbz	r3, 801588c <__kernel_sinf+0x70>
 8015834:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015838:	eddf 7a15 	vldr	s15, [pc, #84]	; 8015890 <__kernel_sinf+0x74>
 801583c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8015894 <__kernel_sinf+0x78>
 8015840:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015844:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015898 <__kernel_sinf+0x7c>
 8015848:	eee6 7a07 	vfma.f32	s15, s12, s14
 801584c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801589c <__kernel_sinf+0x80>
 8015850:	eea7 6a87 	vfma.f32	s12, s15, s14
 8015854:	eddf 7a12 	vldr	s15, [pc, #72]	; 80158a0 <__kernel_sinf+0x84>
 8015858:	ee60 6a07 	vmul.f32	s13, s0, s14
 801585c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015860:	b930      	cbnz	r0, 8015870 <__kernel_sinf+0x54>
 8015862:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80158a4 <__kernel_sinf+0x88>
 8015866:	eea7 6a27 	vfma.f32	s12, s14, s15
 801586a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801586e:	4770      	bx	lr
 8015870:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8015874:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015878:	eee0 7a86 	vfma.f32	s15, s1, s12
 801587c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8015880:	eddf 7a09 	vldr	s15, [pc, #36]	; 80158a8 <__kernel_sinf+0x8c>
 8015884:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8015888:	ee30 0a60 	vsub.f32	s0, s0, s1
 801588c:	4770      	bx	lr
 801588e:	bf00      	nop
 8015890:	2f2ec9d3 	.word	0x2f2ec9d3
 8015894:	b2d72f34 	.word	0xb2d72f34
 8015898:	3638ef1b 	.word	0x3638ef1b
 801589c:	b9500d01 	.word	0xb9500d01
 80158a0:	3c088889 	.word	0x3c088889
 80158a4:	be2aaaab 	.word	0xbe2aaaab
 80158a8:	3e2aaaab 	.word	0x3e2aaaab

080158ac <matherr>:
 80158ac:	2000      	movs	r0, #0
 80158ae:	4770      	bx	lr

080158b0 <nan>:
 80158b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80158b8 <nan+0x8>
 80158b4:	4770      	bx	lr
 80158b6:	bf00      	nop
 80158b8:	00000000 	.word	0x00000000
 80158bc:	7ff80000 	.word	0x7ff80000

080158c0 <atanf>:
 80158c0:	b538      	push	{r3, r4, r5, lr}
 80158c2:	ee10 5a10 	vmov	r5, s0
 80158c6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80158ca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80158ce:	eef0 7a40 	vmov.f32	s15, s0
 80158d2:	db10      	blt.n	80158f6 <atanf+0x36>
 80158d4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80158d8:	dd04      	ble.n	80158e4 <atanf+0x24>
 80158da:	ee70 7a00 	vadd.f32	s15, s0, s0
 80158de:	eeb0 0a67 	vmov.f32	s0, s15
 80158e2:	bd38      	pop	{r3, r4, r5, pc}
 80158e4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8015a1c <atanf+0x15c>
 80158e8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015a20 <atanf+0x160>
 80158ec:	2d00      	cmp	r5, #0
 80158ee:	bfd8      	it	le
 80158f0:	eef0 7a47 	vmovle.f32	s15, s14
 80158f4:	e7f3      	b.n	80158de <atanf+0x1e>
 80158f6:	4b4b      	ldr	r3, [pc, #300]	; (8015a24 <atanf+0x164>)
 80158f8:	429c      	cmp	r4, r3
 80158fa:	dc10      	bgt.n	801591e <atanf+0x5e>
 80158fc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8015900:	da0a      	bge.n	8015918 <atanf+0x58>
 8015902:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015a28 <atanf+0x168>
 8015906:	ee30 7a07 	vadd.f32	s14, s0, s14
 801590a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801590e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015916:	dce2      	bgt.n	80158de <atanf+0x1e>
 8015918:	f04f 33ff 	mov.w	r3, #4294967295
 801591c:	e013      	b.n	8015946 <atanf+0x86>
 801591e:	f000 f8a3 	bl	8015a68 <fabsf>
 8015922:	4b42      	ldr	r3, [pc, #264]	; (8015a2c <atanf+0x16c>)
 8015924:	429c      	cmp	r4, r3
 8015926:	dc4f      	bgt.n	80159c8 <atanf+0x108>
 8015928:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801592c:	429c      	cmp	r4, r3
 801592e:	dc41      	bgt.n	80159b4 <atanf+0xf4>
 8015930:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015934:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015938:	eea0 7a27 	vfma.f32	s14, s0, s15
 801593c:	2300      	movs	r3, #0
 801593e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015942:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015946:	1c5a      	adds	r2, r3, #1
 8015948:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801594c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015a30 <atanf+0x170>
 8015950:	eddf 5a38 	vldr	s11, [pc, #224]	; 8015a34 <atanf+0x174>
 8015954:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8015a38 <atanf+0x178>
 8015958:	ee66 6a06 	vmul.f32	s13, s12, s12
 801595c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015960:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015a3c <atanf+0x17c>
 8015964:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015968:	eddf 5a35 	vldr	s11, [pc, #212]	; 8015a40 <atanf+0x180>
 801596c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015970:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015a44 <atanf+0x184>
 8015974:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015978:	eddf 5a33 	vldr	s11, [pc, #204]	; 8015a48 <atanf+0x188>
 801597c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015980:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8015a4c <atanf+0x18c>
 8015984:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015988:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015a50 <atanf+0x190>
 801598c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015990:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8015a54 <atanf+0x194>
 8015994:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015998:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8015a58 <atanf+0x198>
 801599c:	eea5 7a26 	vfma.f32	s14, s10, s13
 80159a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80159a4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80159a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80159ac:	d121      	bne.n	80159f2 <atanf+0x132>
 80159ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80159b2:	e794      	b.n	80158de <atanf+0x1e>
 80159b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80159b8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80159bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80159c0:	2301      	movs	r3, #1
 80159c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80159c6:	e7be      	b.n	8015946 <atanf+0x86>
 80159c8:	4b24      	ldr	r3, [pc, #144]	; (8015a5c <atanf+0x19c>)
 80159ca:	429c      	cmp	r4, r3
 80159cc:	dc0b      	bgt.n	80159e6 <atanf+0x126>
 80159ce:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80159d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80159d6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80159da:	2302      	movs	r3, #2
 80159dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80159e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80159e4:	e7af      	b.n	8015946 <atanf+0x86>
 80159e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80159ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80159ee:	2303      	movs	r3, #3
 80159f0:	e7a9      	b.n	8015946 <atanf+0x86>
 80159f2:	4a1b      	ldr	r2, [pc, #108]	; (8015a60 <atanf+0x1a0>)
 80159f4:	491b      	ldr	r1, [pc, #108]	; (8015a64 <atanf+0x1a4>)
 80159f6:	009b      	lsls	r3, r3, #2
 80159f8:	441a      	add	r2, r3
 80159fa:	440b      	add	r3, r1
 80159fc:	edd3 6a00 	vldr	s13, [r3]
 8015a00:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015a04:	2d00      	cmp	r5, #0
 8015a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a0a:	ed92 7a00 	vldr	s14, [r2]
 8015a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a12:	bfb8      	it	lt
 8015a14:	eef1 7a67 	vneglt.f32	s15, s15
 8015a18:	e761      	b.n	80158de <atanf+0x1e>
 8015a1a:	bf00      	nop
 8015a1c:	bfc90fdb 	.word	0xbfc90fdb
 8015a20:	3fc90fdb 	.word	0x3fc90fdb
 8015a24:	3edfffff 	.word	0x3edfffff
 8015a28:	7149f2ca 	.word	0x7149f2ca
 8015a2c:	3f97ffff 	.word	0x3f97ffff
 8015a30:	3c8569d7 	.word	0x3c8569d7
 8015a34:	3d4bda59 	.word	0x3d4bda59
 8015a38:	bd6ef16b 	.word	0xbd6ef16b
 8015a3c:	3d886b35 	.word	0x3d886b35
 8015a40:	3dba2e6e 	.word	0x3dba2e6e
 8015a44:	3e124925 	.word	0x3e124925
 8015a48:	3eaaaaab 	.word	0x3eaaaaab
 8015a4c:	bd15a221 	.word	0xbd15a221
 8015a50:	bd9d8795 	.word	0xbd9d8795
 8015a54:	bde38e38 	.word	0xbde38e38
 8015a58:	be4ccccd 	.word	0xbe4ccccd
 8015a5c:	401bffff 	.word	0x401bffff
 8015a60:	0801ad3c 	.word	0x0801ad3c
 8015a64:	0801ad4c 	.word	0x0801ad4c

08015a68 <fabsf>:
 8015a68:	ee10 3a10 	vmov	r3, s0
 8015a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015a70:	ee00 3a10 	vmov	s0, r3
 8015a74:	4770      	bx	lr
	...

08015a78 <floorf>:
 8015a78:	ee10 3a10 	vmov	r3, s0
 8015a7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015a80:	0dca      	lsrs	r2, r1, #23
 8015a82:	3a7f      	subs	r2, #127	; 0x7f
 8015a84:	2a16      	cmp	r2, #22
 8015a86:	dc2a      	bgt.n	8015ade <floorf+0x66>
 8015a88:	2a00      	cmp	r2, #0
 8015a8a:	da11      	bge.n	8015ab0 <floorf+0x38>
 8015a8c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015af0 <floorf+0x78>
 8015a90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015a94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a9c:	dd05      	ble.n	8015aaa <floorf+0x32>
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	da23      	bge.n	8015aea <floorf+0x72>
 8015aa2:	4a14      	ldr	r2, [pc, #80]	; (8015af4 <floorf+0x7c>)
 8015aa4:	2900      	cmp	r1, #0
 8015aa6:	bf18      	it	ne
 8015aa8:	4613      	movne	r3, r2
 8015aaa:	ee00 3a10 	vmov	s0, r3
 8015aae:	4770      	bx	lr
 8015ab0:	4911      	ldr	r1, [pc, #68]	; (8015af8 <floorf+0x80>)
 8015ab2:	4111      	asrs	r1, r2
 8015ab4:	420b      	tst	r3, r1
 8015ab6:	d0fa      	beq.n	8015aae <floorf+0x36>
 8015ab8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015af0 <floorf+0x78>
 8015abc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015ac0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ac8:	ddef      	ble.n	8015aaa <floorf+0x32>
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	bfbe      	ittt	lt
 8015ace:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8015ad2:	fa40 f202 	asrlt.w	r2, r0, r2
 8015ad6:	189b      	addlt	r3, r3, r2
 8015ad8:	ea23 0301 	bic.w	r3, r3, r1
 8015adc:	e7e5      	b.n	8015aaa <floorf+0x32>
 8015ade:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015ae2:	d3e4      	bcc.n	8015aae <floorf+0x36>
 8015ae4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015ae8:	4770      	bx	lr
 8015aea:	2300      	movs	r3, #0
 8015aec:	e7dd      	b.n	8015aaa <floorf+0x32>
 8015aee:	bf00      	nop
 8015af0:	7149f2ca 	.word	0x7149f2ca
 8015af4:	bf800000 	.word	0xbf800000
 8015af8:	007fffff 	.word	0x007fffff

08015afc <scalbnf>:
 8015afc:	b508      	push	{r3, lr}
 8015afe:	ee10 2a10 	vmov	r2, s0
 8015b02:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8015b06:	ed2d 8b02 	vpush	{d8}
 8015b0a:	eef0 0a40 	vmov.f32	s1, s0
 8015b0e:	d004      	beq.n	8015b1a <scalbnf+0x1e>
 8015b10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015b14:	d306      	bcc.n	8015b24 <scalbnf+0x28>
 8015b16:	ee70 0a00 	vadd.f32	s1, s0, s0
 8015b1a:	ecbd 8b02 	vpop	{d8}
 8015b1e:	eeb0 0a60 	vmov.f32	s0, s1
 8015b22:	bd08      	pop	{r3, pc}
 8015b24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015b28:	d21c      	bcs.n	8015b64 <scalbnf+0x68>
 8015b2a:	4b1f      	ldr	r3, [pc, #124]	; (8015ba8 <scalbnf+0xac>)
 8015b2c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015bac <scalbnf+0xb0>
 8015b30:	4298      	cmp	r0, r3
 8015b32:	ee60 0a27 	vmul.f32	s1, s0, s15
 8015b36:	db10      	blt.n	8015b5a <scalbnf+0x5e>
 8015b38:	ee10 2a90 	vmov	r2, s1
 8015b3c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8015b40:	3b19      	subs	r3, #25
 8015b42:	4403      	add	r3, r0
 8015b44:	2bfe      	cmp	r3, #254	; 0xfe
 8015b46:	dd0f      	ble.n	8015b68 <scalbnf+0x6c>
 8015b48:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8015bb0 <scalbnf+0xb4>
 8015b4c:	eeb0 0a48 	vmov.f32	s0, s16
 8015b50:	f000 f834 	bl	8015bbc <copysignf>
 8015b54:	ee60 0a08 	vmul.f32	s1, s0, s16
 8015b58:	e7df      	b.n	8015b1a <scalbnf+0x1e>
 8015b5a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015bb4 <scalbnf+0xb8>
 8015b5e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015b62:	e7da      	b.n	8015b1a <scalbnf+0x1e>
 8015b64:	0ddb      	lsrs	r3, r3, #23
 8015b66:	e7ec      	b.n	8015b42 <scalbnf+0x46>
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	dd06      	ble.n	8015b7a <scalbnf+0x7e>
 8015b6c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8015b70:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015b74:	ee00 3a90 	vmov	s1, r3
 8015b78:	e7cf      	b.n	8015b1a <scalbnf+0x1e>
 8015b7a:	f113 0f16 	cmn.w	r3, #22
 8015b7e:	da06      	bge.n	8015b8e <scalbnf+0x92>
 8015b80:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015b84:	4298      	cmp	r0, r3
 8015b86:	dcdf      	bgt.n	8015b48 <scalbnf+0x4c>
 8015b88:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8015bb4 <scalbnf+0xb8>
 8015b8c:	e7de      	b.n	8015b4c <scalbnf+0x50>
 8015b8e:	3319      	adds	r3, #25
 8015b90:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8015b94:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015b98:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015bb8 <scalbnf+0xbc>
 8015b9c:	ee07 3a10 	vmov	s14, r3
 8015ba0:	ee67 0a27 	vmul.f32	s1, s14, s15
 8015ba4:	e7b9      	b.n	8015b1a <scalbnf+0x1e>
 8015ba6:	bf00      	nop
 8015ba8:	ffff3cb0 	.word	0xffff3cb0
 8015bac:	4c000000 	.word	0x4c000000
 8015bb0:	7149f2ca 	.word	0x7149f2ca
 8015bb4:	0da24260 	.word	0x0da24260
 8015bb8:	33000000 	.word	0x33000000

08015bbc <copysignf>:
 8015bbc:	ee10 3a10 	vmov	r3, s0
 8015bc0:	ee10 2a90 	vmov	r2, s1
 8015bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015bc8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8015bcc:	4313      	orrs	r3, r2
 8015bce:	ee00 3a10 	vmov	s0, r3
 8015bd2:	4770      	bx	lr

08015bd4 <__assert_func>:
 8015bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015bd6:	461c      	mov	r4, r3
 8015bd8:	4b09      	ldr	r3, [pc, #36]	; (8015c00 <__assert_func+0x2c>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	4605      	mov	r5, r0
 8015bde:	68d8      	ldr	r0, [r3, #12]
 8015be0:	b152      	cbz	r2, 8015bf8 <__assert_func+0x24>
 8015be2:	4b08      	ldr	r3, [pc, #32]	; (8015c04 <__assert_func+0x30>)
 8015be4:	9100      	str	r1, [sp, #0]
 8015be6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015bea:	4907      	ldr	r1, [pc, #28]	; (8015c08 <__assert_func+0x34>)
 8015bec:	462b      	mov	r3, r5
 8015bee:	4622      	mov	r2, r4
 8015bf0:	f000 f814 	bl	8015c1c <fiprintf>
 8015bf4:	f002 f952 	bl	8017e9c <abort>
 8015bf8:	4b04      	ldr	r3, [pc, #16]	; (8015c0c <__assert_func+0x38>)
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	e7f2      	b.n	8015be4 <__assert_func+0x10>
 8015bfe:	bf00      	nop
 8015c00:	200000c4 	.word	0x200000c4
 8015c04:	0801ad5c 	.word	0x0801ad5c
 8015c08:	0801ad69 	.word	0x0801ad69
 8015c0c:	0801ad97 	.word	0x0801ad97

08015c10 <__errno>:
 8015c10:	4b01      	ldr	r3, [pc, #4]	; (8015c18 <__errno+0x8>)
 8015c12:	6818      	ldr	r0, [r3, #0]
 8015c14:	4770      	bx	lr
 8015c16:	bf00      	nop
 8015c18:	200000c4 	.word	0x200000c4

08015c1c <fiprintf>:
 8015c1c:	b40e      	push	{r1, r2, r3}
 8015c1e:	b503      	push	{r0, r1, lr}
 8015c20:	4601      	mov	r1, r0
 8015c22:	ab03      	add	r3, sp, #12
 8015c24:	4805      	ldr	r0, [pc, #20]	; (8015c3c <fiprintf+0x20>)
 8015c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c2a:	6800      	ldr	r0, [r0, #0]
 8015c2c:	9301      	str	r3, [sp, #4]
 8015c2e:	f000 f921 	bl	8015e74 <_vfiprintf_r>
 8015c32:	b002      	add	sp, #8
 8015c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c38:	b003      	add	sp, #12
 8015c3a:	4770      	bx	lr
 8015c3c:	200000c4 	.word	0x200000c4

08015c40 <__libc_init_array>:
 8015c40:	b570      	push	{r4, r5, r6, lr}
 8015c42:	4e0d      	ldr	r6, [pc, #52]	; (8015c78 <__libc_init_array+0x38>)
 8015c44:	4c0d      	ldr	r4, [pc, #52]	; (8015c7c <__libc_init_array+0x3c>)
 8015c46:	1ba4      	subs	r4, r4, r6
 8015c48:	10a4      	asrs	r4, r4, #2
 8015c4a:	2500      	movs	r5, #0
 8015c4c:	42a5      	cmp	r5, r4
 8015c4e:	d109      	bne.n	8015c64 <__libc_init_array+0x24>
 8015c50:	4e0b      	ldr	r6, [pc, #44]	; (8015c80 <__libc_init_array+0x40>)
 8015c52:	4c0c      	ldr	r4, [pc, #48]	; (8015c84 <__libc_init_array+0x44>)
 8015c54:	f004 fb50 	bl	801a2f8 <_init>
 8015c58:	1ba4      	subs	r4, r4, r6
 8015c5a:	10a4      	asrs	r4, r4, #2
 8015c5c:	2500      	movs	r5, #0
 8015c5e:	42a5      	cmp	r5, r4
 8015c60:	d105      	bne.n	8015c6e <__libc_init_array+0x2e>
 8015c62:	bd70      	pop	{r4, r5, r6, pc}
 8015c64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c68:	4798      	blx	r3
 8015c6a:	3501      	adds	r5, #1
 8015c6c:	e7ee      	b.n	8015c4c <__libc_init_array+0xc>
 8015c6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c72:	4798      	blx	r3
 8015c74:	3501      	adds	r5, #1
 8015c76:	e7f2      	b.n	8015c5e <__libc_init_array+0x1e>
 8015c78:	0801b0c0 	.word	0x0801b0c0
 8015c7c:	0801b0c0 	.word	0x0801b0c0
 8015c80:	0801b0c0 	.word	0x0801b0c0
 8015c84:	0801b0c4 	.word	0x0801b0c4

08015c88 <malloc>:
 8015c88:	4b02      	ldr	r3, [pc, #8]	; (8015c94 <malloc+0xc>)
 8015c8a:	4601      	mov	r1, r0
 8015c8c:	6818      	ldr	r0, [r3, #0]
 8015c8e:	f000 b86d 	b.w	8015d6c <_malloc_r>
 8015c92:	bf00      	nop
 8015c94:	200000c4 	.word	0x200000c4

08015c98 <free>:
 8015c98:	4b02      	ldr	r3, [pc, #8]	; (8015ca4 <free+0xc>)
 8015c9a:	4601      	mov	r1, r0
 8015c9c:	6818      	ldr	r0, [r3, #0]
 8015c9e:	f000 b817 	b.w	8015cd0 <_free_r>
 8015ca2:	bf00      	nop
 8015ca4:	200000c4 	.word	0x200000c4

08015ca8 <memcpy>:
 8015ca8:	b510      	push	{r4, lr}
 8015caa:	1e43      	subs	r3, r0, #1
 8015cac:	440a      	add	r2, r1
 8015cae:	4291      	cmp	r1, r2
 8015cb0:	d100      	bne.n	8015cb4 <memcpy+0xc>
 8015cb2:	bd10      	pop	{r4, pc}
 8015cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015cbc:	e7f7      	b.n	8015cae <memcpy+0x6>

08015cbe <memset>:
 8015cbe:	4402      	add	r2, r0
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	4293      	cmp	r3, r2
 8015cc4:	d100      	bne.n	8015cc8 <memset+0xa>
 8015cc6:	4770      	bx	lr
 8015cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8015ccc:	e7f9      	b.n	8015cc2 <memset+0x4>
	...

08015cd0 <_free_r>:
 8015cd0:	b538      	push	{r3, r4, r5, lr}
 8015cd2:	4605      	mov	r5, r0
 8015cd4:	2900      	cmp	r1, #0
 8015cd6:	d045      	beq.n	8015d64 <_free_r+0x94>
 8015cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cdc:	1f0c      	subs	r4, r1, #4
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	bfb8      	it	lt
 8015ce2:	18e4      	addlt	r4, r4, r3
 8015ce4:	f003 fc6b 	bl	80195be <__malloc_lock>
 8015ce8:	4a1f      	ldr	r2, [pc, #124]	; (8015d68 <_free_r+0x98>)
 8015cea:	6813      	ldr	r3, [r2, #0]
 8015cec:	4610      	mov	r0, r2
 8015cee:	b933      	cbnz	r3, 8015cfe <_free_r+0x2e>
 8015cf0:	6063      	str	r3, [r4, #4]
 8015cf2:	6014      	str	r4, [r2, #0]
 8015cf4:	4628      	mov	r0, r5
 8015cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cfa:	f003 bc61 	b.w	80195c0 <__malloc_unlock>
 8015cfe:	42a3      	cmp	r3, r4
 8015d00:	d90c      	bls.n	8015d1c <_free_r+0x4c>
 8015d02:	6821      	ldr	r1, [r4, #0]
 8015d04:	1862      	adds	r2, r4, r1
 8015d06:	4293      	cmp	r3, r2
 8015d08:	bf04      	itt	eq
 8015d0a:	681a      	ldreq	r2, [r3, #0]
 8015d0c:	685b      	ldreq	r3, [r3, #4]
 8015d0e:	6063      	str	r3, [r4, #4]
 8015d10:	bf04      	itt	eq
 8015d12:	1852      	addeq	r2, r2, r1
 8015d14:	6022      	streq	r2, [r4, #0]
 8015d16:	6004      	str	r4, [r0, #0]
 8015d18:	e7ec      	b.n	8015cf4 <_free_r+0x24>
 8015d1a:	4613      	mov	r3, r2
 8015d1c:	685a      	ldr	r2, [r3, #4]
 8015d1e:	b10a      	cbz	r2, 8015d24 <_free_r+0x54>
 8015d20:	42a2      	cmp	r2, r4
 8015d22:	d9fa      	bls.n	8015d1a <_free_r+0x4a>
 8015d24:	6819      	ldr	r1, [r3, #0]
 8015d26:	1858      	adds	r0, r3, r1
 8015d28:	42a0      	cmp	r0, r4
 8015d2a:	d10b      	bne.n	8015d44 <_free_r+0x74>
 8015d2c:	6820      	ldr	r0, [r4, #0]
 8015d2e:	4401      	add	r1, r0
 8015d30:	1858      	adds	r0, r3, r1
 8015d32:	4282      	cmp	r2, r0
 8015d34:	6019      	str	r1, [r3, #0]
 8015d36:	d1dd      	bne.n	8015cf4 <_free_r+0x24>
 8015d38:	6810      	ldr	r0, [r2, #0]
 8015d3a:	6852      	ldr	r2, [r2, #4]
 8015d3c:	605a      	str	r2, [r3, #4]
 8015d3e:	4401      	add	r1, r0
 8015d40:	6019      	str	r1, [r3, #0]
 8015d42:	e7d7      	b.n	8015cf4 <_free_r+0x24>
 8015d44:	d902      	bls.n	8015d4c <_free_r+0x7c>
 8015d46:	230c      	movs	r3, #12
 8015d48:	602b      	str	r3, [r5, #0]
 8015d4a:	e7d3      	b.n	8015cf4 <_free_r+0x24>
 8015d4c:	6820      	ldr	r0, [r4, #0]
 8015d4e:	1821      	adds	r1, r4, r0
 8015d50:	428a      	cmp	r2, r1
 8015d52:	bf04      	itt	eq
 8015d54:	6811      	ldreq	r1, [r2, #0]
 8015d56:	6852      	ldreq	r2, [r2, #4]
 8015d58:	6062      	str	r2, [r4, #4]
 8015d5a:	bf04      	itt	eq
 8015d5c:	1809      	addeq	r1, r1, r0
 8015d5e:	6021      	streq	r1, [r4, #0]
 8015d60:	605c      	str	r4, [r3, #4]
 8015d62:	e7c7      	b.n	8015cf4 <_free_r+0x24>
 8015d64:	bd38      	pop	{r3, r4, r5, pc}
 8015d66:	bf00      	nop
 8015d68:	200016c4 	.word	0x200016c4

08015d6c <_malloc_r>:
 8015d6c:	b570      	push	{r4, r5, r6, lr}
 8015d6e:	1ccd      	adds	r5, r1, #3
 8015d70:	f025 0503 	bic.w	r5, r5, #3
 8015d74:	3508      	adds	r5, #8
 8015d76:	2d0c      	cmp	r5, #12
 8015d78:	bf38      	it	cc
 8015d7a:	250c      	movcc	r5, #12
 8015d7c:	2d00      	cmp	r5, #0
 8015d7e:	4606      	mov	r6, r0
 8015d80:	db01      	blt.n	8015d86 <_malloc_r+0x1a>
 8015d82:	42a9      	cmp	r1, r5
 8015d84:	d903      	bls.n	8015d8e <_malloc_r+0x22>
 8015d86:	230c      	movs	r3, #12
 8015d88:	6033      	str	r3, [r6, #0]
 8015d8a:	2000      	movs	r0, #0
 8015d8c:	bd70      	pop	{r4, r5, r6, pc}
 8015d8e:	f003 fc16 	bl	80195be <__malloc_lock>
 8015d92:	4a21      	ldr	r2, [pc, #132]	; (8015e18 <_malloc_r+0xac>)
 8015d94:	6814      	ldr	r4, [r2, #0]
 8015d96:	4621      	mov	r1, r4
 8015d98:	b991      	cbnz	r1, 8015dc0 <_malloc_r+0x54>
 8015d9a:	4c20      	ldr	r4, [pc, #128]	; (8015e1c <_malloc_r+0xb0>)
 8015d9c:	6823      	ldr	r3, [r4, #0]
 8015d9e:	b91b      	cbnz	r3, 8015da8 <_malloc_r+0x3c>
 8015da0:	4630      	mov	r0, r6
 8015da2:	f001 f81f 	bl	8016de4 <_sbrk_r>
 8015da6:	6020      	str	r0, [r4, #0]
 8015da8:	4629      	mov	r1, r5
 8015daa:	4630      	mov	r0, r6
 8015dac:	f001 f81a 	bl	8016de4 <_sbrk_r>
 8015db0:	1c43      	adds	r3, r0, #1
 8015db2:	d124      	bne.n	8015dfe <_malloc_r+0x92>
 8015db4:	230c      	movs	r3, #12
 8015db6:	6033      	str	r3, [r6, #0]
 8015db8:	4630      	mov	r0, r6
 8015dba:	f003 fc01 	bl	80195c0 <__malloc_unlock>
 8015dbe:	e7e4      	b.n	8015d8a <_malloc_r+0x1e>
 8015dc0:	680b      	ldr	r3, [r1, #0]
 8015dc2:	1b5b      	subs	r3, r3, r5
 8015dc4:	d418      	bmi.n	8015df8 <_malloc_r+0x8c>
 8015dc6:	2b0b      	cmp	r3, #11
 8015dc8:	d90f      	bls.n	8015dea <_malloc_r+0x7e>
 8015dca:	600b      	str	r3, [r1, #0]
 8015dcc:	50cd      	str	r5, [r1, r3]
 8015dce:	18cc      	adds	r4, r1, r3
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f003 fbf5 	bl	80195c0 <__malloc_unlock>
 8015dd6:	f104 000b 	add.w	r0, r4, #11
 8015dda:	1d23      	adds	r3, r4, #4
 8015ddc:	f020 0007 	bic.w	r0, r0, #7
 8015de0:	1ac3      	subs	r3, r0, r3
 8015de2:	d0d3      	beq.n	8015d8c <_malloc_r+0x20>
 8015de4:	425a      	negs	r2, r3
 8015de6:	50e2      	str	r2, [r4, r3]
 8015de8:	e7d0      	b.n	8015d8c <_malloc_r+0x20>
 8015dea:	428c      	cmp	r4, r1
 8015dec:	684b      	ldr	r3, [r1, #4]
 8015dee:	bf16      	itet	ne
 8015df0:	6063      	strne	r3, [r4, #4]
 8015df2:	6013      	streq	r3, [r2, #0]
 8015df4:	460c      	movne	r4, r1
 8015df6:	e7eb      	b.n	8015dd0 <_malloc_r+0x64>
 8015df8:	460c      	mov	r4, r1
 8015dfa:	6849      	ldr	r1, [r1, #4]
 8015dfc:	e7cc      	b.n	8015d98 <_malloc_r+0x2c>
 8015dfe:	1cc4      	adds	r4, r0, #3
 8015e00:	f024 0403 	bic.w	r4, r4, #3
 8015e04:	42a0      	cmp	r0, r4
 8015e06:	d005      	beq.n	8015e14 <_malloc_r+0xa8>
 8015e08:	1a21      	subs	r1, r4, r0
 8015e0a:	4630      	mov	r0, r6
 8015e0c:	f000 ffea 	bl	8016de4 <_sbrk_r>
 8015e10:	3001      	adds	r0, #1
 8015e12:	d0cf      	beq.n	8015db4 <_malloc_r+0x48>
 8015e14:	6025      	str	r5, [r4, #0]
 8015e16:	e7db      	b.n	8015dd0 <_malloc_r+0x64>
 8015e18:	200016c4 	.word	0x200016c4
 8015e1c:	200016c8 	.word	0x200016c8

08015e20 <__sfputc_r>:
 8015e20:	6893      	ldr	r3, [r2, #8]
 8015e22:	3b01      	subs	r3, #1
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	b410      	push	{r4}
 8015e28:	6093      	str	r3, [r2, #8]
 8015e2a:	da08      	bge.n	8015e3e <__sfputc_r+0x1e>
 8015e2c:	6994      	ldr	r4, [r2, #24]
 8015e2e:	42a3      	cmp	r3, r4
 8015e30:	db01      	blt.n	8015e36 <__sfputc_r+0x16>
 8015e32:	290a      	cmp	r1, #10
 8015e34:	d103      	bne.n	8015e3e <__sfputc_r+0x1e>
 8015e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e3a:	f001 bf6f 	b.w	8017d1c <__swbuf_r>
 8015e3e:	6813      	ldr	r3, [r2, #0]
 8015e40:	1c58      	adds	r0, r3, #1
 8015e42:	6010      	str	r0, [r2, #0]
 8015e44:	7019      	strb	r1, [r3, #0]
 8015e46:	4608      	mov	r0, r1
 8015e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e4c:	4770      	bx	lr

08015e4e <__sfputs_r>:
 8015e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e50:	4606      	mov	r6, r0
 8015e52:	460f      	mov	r7, r1
 8015e54:	4614      	mov	r4, r2
 8015e56:	18d5      	adds	r5, r2, r3
 8015e58:	42ac      	cmp	r4, r5
 8015e5a:	d101      	bne.n	8015e60 <__sfputs_r+0x12>
 8015e5c:	2000      	movs	r0, #0
 8015e5e:	e007      	b.n	8015e70 <__sfputs_r+0x22>
 8015e60:	463a      	mov	r2, r7
 8015e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e66:	4630      	mov	r0, r6
 8015e68:	f7ff ffda 	bl	8015e20 <__sfputc_r>
 8015e6c:	1c43      	adds	r3, r0, #1
 8015e6e:	d1f3      	bne.n	8015e58 <__sfputs_r+0xa>
 8015e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015e74 <_vfiprintf_r>:
 8015e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e78:	460c      	mov	r4, r1
 8015e7a:	b09d      	sub	sp, #116	; 0x74
 8015e7c:	4617      	mov	r7, r2
 8015e7e:	461d      	mov	r5, r3
 8015e80:	4606      	mov	r6, r0
 8015e82:	b118      	cbz	r0, 8015e8c <_vfiprintf_r+0x18>
 8015e84:	6983      	ldr	r3, [r0, #24]
 8015e86:	b90b      	cbnz	r3, 8015e8c <_vfiprintf_r+0x18>
 8015e88:	f002 ff46 	bl	8018d18 <__sinit>
 8015e8c:	4b7c      	ldr	r3, [pc, #496]	; (8016080 <_vfiprintf_r+0x20c>)
 8015e8e:	429c      	cmp	r4, r3
 8015e90:	d158      	bne.n	8015f44 <_vfiprintf_r+0xd0>
 8015e92:	6874      	ldr	r4, [r6, #4]
 8015e94:	89a3      	ldrh	r3, [r4, #12]
 8015e96:	0718      	lsls	r0, r3, #28
 8015e98:	d55e      	bpl.n	8015f58 <_vfiprintf_r+0xe4>
 8015e9a:	6923      	ldr	r3, [r4, #16]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d05b      	beq.n	8015f58 <_vfiprintf_r+0xe4>
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ea4:	2320      	movs	r3, #32
 8015ea6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015eaa:	2330      	movs	r3, #48	; 0x30
 8015eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015eb0:	9503      	str	r5, [sp, #12]
 8015eb2:	f04f 0b01 	mov.w	fp, #1
 8015eb6:	46b8      	mov	r8, r7
 8015eb8:	4645      	mov	r5, r8
 8015eba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015ebe:	b10b      	cbz	r3, 8015ec4 <_vfiprintf_r+0x50>
 8015ec0:	2b25      	cmp	r3, #37	; 0x25
 8015ec2:	d154      	bne.n	8015f6e <_vfiprintf_r+0xfa>
 8015ec4:	ebb8 0a07 	subs.w	sl, r8, r7
 8015ec8:	d00b      	beq.n	8015ee2 <_vfiprintf_r+0x6e>
 8015eca:	4653      	mov	r3, sl
 8015ecc:	463a      	mov	r2, r7
 8015ece:	4621      	mov	r1, r4
 8015ed0:	4630      	mov	r0, r6
 8015ed2:	f7ff ffbc 	bl	8015e4e <__sfputs_r>
 8015ed6:	3001      	adds	r0, #1
 8015ed8:	f000 80c2 	beq.w	8016060 <_vfiprintf_r+0x1ec>
 8015edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ede:	4453      	add	r3, sl
 8015ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8015ee2:	f898 3000 	ldrb.w	r3, [r8]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	f000 80ba 	beq.w	8016060 <_vfiprintf_r+0x1ec>
 8015eec:	2300      	movs	r3, #0
 8015eee:	f04f 32ff 	mov.w	r2, #4294967295
 8015ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ef6:	9304      	str	r3, [sp, #16]
 8015ef8:	9307      	str	r3, [sp, #28]
 8015efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015efe:	931a      	str	r3, [sp, #104]	; 0x68
 8015f00:	46a8      	mov	r8, r5
 8015f02:	2205      	movs	r2, #5
 8015f04:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015f08:	485e      	ldr	r0, [pc, #376]	; (8016084 <_vfiprintf_r+0x210>)
 8015f0a:	f7ea f979 	bl	8000200 <memchr>
 8015f0e:	9b04      	ldr	r3, [sp, #16]
 8015f10:	bb78      	cbnz	r0, 8015f72 <_vfiprintf_r+0xfe>
 8015f12:	06d9      	lsls	r1, r3, #27
 8015f14:	bf44      	itt	mi
 8015f16:	2220      	movmi	r2, #32
 8015f18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015f1c:	071a      	lsls	r2, r3, #28
 8015f1e:	bf44      	itt	mi
 8015f20:	222b      	movmi	r2, #43	; 0x2b
 8015f22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015f26:	782a      	ldrb	r2, [r5, #0]
 8015f28:	2a2a      	cmp	r2, #42	; 0x2a
 8015f2a:	d02a      	beq.n	8015f82 <_vfiprintf_r+0x10e>
 8015f2c:	9a07      	ldr	r2, [sp, #28]
 8015f2e:	46a8      	mov	r8, r5
 8015f30:	2000      	movs	r0, #0
 8015f32:	250a      	movs	r5, #10
 8015f34:	4641      	mov	r1, r8
 8015f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f3a:	3b30      	subs	r3, #48	; 0x30
 8015f3c:	2b09      	cmp	r3, #9
 8015f3e:	d969      	bls.n	8016014 <_vfiprintf_r+0x1a0>
 8015f40:	b360      	cbz	r0, 8015f9c <_vfiprintf_r+0x128>
 8015f42:	e024      	b.n	8015f8e <_vfiprintf_r+0x11a>
 8015f44:	4b50      	ldr	r3, [pc, #320]	; (8016088 <_vfiprintf_r+0x214>)
 8015f46:	429c      	cmp	r4, r3
 8015f48:	d101      	bne.n	8015f4e <_vfiprintf_r+0xda>
 8015f4a:	68b4      	ldr	r4, [r6, #8]
 8015f4c:	e7a2      	b.n	8015e94 <_vfiprintf_r+0x20>
 8015f4e:	4b4f      	ldr	r3, [pc, #316]	; (801608c <_vfiprintf_r+0x218>)
 8015f50:	429c      	cmp	r4, r3
 8015f52:	bf08      	it	eq
 8015f54:	68f4      	ldreq	r4, [r6, #12]
 8015f56:	e79d      	b.n	8015e94 <_vfiprintf_r+0x20>
 8015f58:	4621      	mov	r1, r4
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	f001 ff30 	bl	8017dc0 <__swsetup_r>
 8015f60:	2800      	cmp	r0, #0
 8015f62:	d09d      	beq.n	8015ea0 <_vfiprintf_r+0x2c>
 8015f64:	f04f 30ff 	mov.w	r0, #4294967295
 8015f68:	b01d      	add	sp, #116	; 0x74
 8015f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f6e:	46a8      	mov	r8, r5
 8015f70:	e7a2      	b.n	8015eb8 <_vfiprintf_r+0x44>
 8015f72:	4a44      	ldr	r2, [pc, #272]	; (8016084 <_vfiprintf_r+0x210>)
 8015f74:	1a80      	subs	r0, r0, r2
 8015f76:	fa0b f000 	lsl.w	r0, fp, r0
 8015f7a:	4318      	orrs	r0, r3
 8015f7c:	9004      	str	r0, [sp, #16]
 8015f7e:	4645      	mov	r5, r8
 8015f80:	e7be      	b.n	8015f00 <_vfiprintf_r+0x8c>
 8015f82:	9a03      	ldr	r2, [sp, #12]
 8015f84:	1d11      	adds	r1, r2, #4
 8015f86:	6812      	ldr	r2, [r2, #0]
 8015f88:	9103      	str	r1, [sp, #12]
 8015f8a:	2a00      	cmp	r2, #0
 8015f8c:	db01      	blt.n	8015f92 <_vfiprintf_r+0x11e>
 8015f8e:	9207      	str	r2, [sp, #28]
 8015f90:	e004      	b.n	8015f9c <_vfiprintf_r+0x128>
 8015f92:	4252      	negs	r2, r2
 8015f94:	f043 0302 	orr.w	r3, r3, #2
 8015f98:	9207      	str	r2, [sp, #28]
 8015f9a:	9304      	str	r3, [sp, #16]
 8015f9c:	f898 3000 	ldrb.w	r3, [r8]
 8015fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8015fa2:	d10e      	bne.n	8015fc2 <_vfiprintf_r+0x14e>
 8015fa4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8015faa:	d138      	bne.n	801601e <_vfiprintf_r+0x1aa>
 8015fac:	9b03      	ldr	r3, [sp, #12]
 8015fae:	1d1a      	adds	r2, r3, #4
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	9203      	str	r2, [sp, #12]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	bfb8      	it	lt
 8015fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8015fbc:	f108 0802 	add.w	r8, r8, #2
 8015fc0:	9305      	str	r3, [sp, #20]
 8015fc2:	4d33      	ldr	r5, [pc, #204]	; (8016090 <_vfiprintf_r+0x21c>)
 8015fc4:	f898 1000 	ldrb.w	r1, [r8]
 8015fc8:	2203      	movs	r2, #3
 8015fca:	4628      	mov	r0, r5
 8015fcc:	f7ea f918 	bl	8000200 <memchr>
 8015fd0:	b140      	cbz	r0, 8015fe4 <_vfiprintf_r+0x170>
 8015fd2:	2340      	movs	r3, #64	; 0x40
 8015fd4:	1b40      	subs	r0, r0, r5
 8015fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8015fda:	9b04      	ldr	r3, [sp, #16]
 8015fdc:	4303      	orrs	r3, r0
 8015fde:	f108 0801 	add.w	r8, r8, #1
 8015fe2:	9304      	str	r3, [sp, #16]
 8015fe4:	f898 1000 	ldrb.w	r1, [r8]
 8015fe8:	482a      	ldr	r0, [pc, #168]	; (8016094 <_vfiprintf_r+0x220>)
 8015fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fee:	2206      	movs	r2, #6
 8015ff0:	f108 0701 	add.w	r7, r8, #1
 8015ff4:	f7ea f904 	bl	8000200 <memchr>
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	d037      	beq.n	801606c <_vfiprintf_r+0x1f8>
 8015ffc:	4b26      	ldr	r3, [pc, #152]	; (8016098 <_vfiprintf_r+0x224>)
 8015ffe:	bb1b      	cbnz	r3, 8016048 <_vfiprintf_r+0x1d4>
 8016000:	9b03      	ldr	r3, [sp, #12]
 8016002:	3307      	adds	r3, #7
 8016004:	f023 0307 	bic.w	r3, r3, #7
 8016008:	3308      	adds	r3, #8
 801600a:	9303      	str	r3, [sp, #12]
 801600c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801600e:	444b      	add	r3, r9
 8016010:	9309      	str	r3, [sp, #36]	; 0x24
 8016012:	e750      	b.n	8015eb6 <_vfiprintf_r+0x42>
 8016014:	fb05 3202 	mla	r2, r5, r2, r3
 8016018:	2001      	movs	r0, #1
 801601a:	4688      	mov	r8, r1
 801601c:	e78a      	b.n	8015f34 <_vfiprintf_r+0xc0>
 801601e:	2300      	movs	r3, #0
 8016020:	f108 0801 	add.w	r8, r8, #1
 8016024:	9305      	str	r3, [sp, #20]
 8016026:	4619      	mov	r1, r3
 8016028:	250a      	movs	r5, #10
 801602a:	4640      	mov	r0, r8
 801602c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016030:	3a30      	subs	r2, #48	; 0x30
 8016032:	2a09      	cmp	r2, #9
 8016034:	d903      	bls.n	801603e <_vfiprintf_r+0x1ca>
 8016036:	2b00      	cmp	r3, #0
 8016038:	d0c3      	beq.n	8015fc2 <_vfiprintf_r+0x14e>
 801603a:	9105      	str	r1, [sp, #20]
 801603c:	e7c1      	b.n	8015fc2 <_vfiprintf_r+0x14e>
 801603e:	fb05 2101 	mla	r1, r5, r1, r2
 8016042:	2301      	movs	r3, #1
 8016044:	4680      	mov	r8, r0
 8016046:	e7f0      	b.n	801602a <_vfiprintf_r+0x1b6>
 8016048:	ab03      	add	r3, sp, #12
 801604a:	9300      	str	r3, [sp, #0]
 801604c:	4622      	mov	r2, r4
 801604e:	4b13      	ldr	r3, [pc, #76]	; (801609c <_vfiprintf_r+0x228>)
 8016050:	a904      	add	r1, sp, #16
 8016052:	4630      	mov	r0, r6
 8016054:	f000 f8b8 	bl	80161c8 <_printf_float>
 8016058:	f1b0 3fff 	cmp.w	r0, #4294967295
 801605c:	4681      	mov	r9, r0
 801605e:	d1d5      	bne.n	801600c <_vfiprintf_r+0x198>
 8016060:	89a3      	ldrh	r3, [r4, #12]
 8016062:	065b      	lsls	r3, r3, #25
 8016064:	f53f af7e 	bmi.w	8015f64 <_vfiprintf_r+0xf0>
 8016068:	9809      	ldr	r0, [sp, #36]	; 0x24
 801606a:	e77d      	b.n	8015f68 <_vfiprintf_r+0xf4>
 801606c:	ab03      	add	r3, sp, #12
 801606e:	9300      	str	r3, [sp, #0]
 8016070:	4622      	mov	r2, r4
 8016072:	4b0a      	ldr	r3, [pc, #40]	; (801609c <_vfiprintf_r+0x228>)
 8016074:	a904      	add	r1, sp, #16
 8016076:	4630      	mov	r0, r6
 8016078:	f000 fb5c 	bl	8016734 <_printf_i>
 801607c:	e7ec      	b.n	8016058 <_vfiprintf_r+0x1e4>
 801607e:	bf00      	nop
 8016080:	0801ae68 	.word	0x0801ae68
 8016084:	0801ad9c 	.word	0x0801ad9c
 8016088:	0801ae88 	.word	0x0801ae88
 801608c:	0801ae48 	.word	0x0801ae48
 8016090:	0801ada2 	.word	0x0801ada2
 8016094:	0801ada6 	.word	0x0801ada6
 8016098:	080161c9 	.word	0x080161c9
 801609c:	08015e4f 	.word	0x08015e4f

080160a0 <__cvt>:
 80160a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160a4:	ec55 4b10 	vmov	r4, r5, d0
 80160a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80160aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80160ae:	2d00      	cmp	r5, #0
 80160b0:	460e      	mov	r6, r1
 80160b2:	4691      	mov	r9, r2
 80160b4:	4619      	mov	r1, r3
 80160b6:	bfb8      	it	lt
 80160b8:	4622      	movlt	r2, r4
 80160ba:	462b      	mov	r3, r5
 80160bc:	f027 0720 	bic.w	r7, r7, #32
 80160c0:	bfbb      	ittet	lt
 80160c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80160c6:	461d      	movlt	r5, r3
 80160c8:	2300      	movge	r3, #0
 80160ca:	232d      	movlt	r3, #45	; 0x2d
 80160cc:	bfb8      	it	lt
 80160ce:	4614      	movlt	r4, r2
 80160d0:	2f46      	cmp	r7, #70	; 0x46
 80160d2:	700b      	strb	r3, [r1, #0]
 80160d4:	d004      	beq.n	80160e0 <__cvt+0x40>
 80160d6:	2f45      	cmp	r7, #69	; 0x45
 80160d8:	d100      	bne.n	80160dc <__cvt+0x3c>
 80160da:	3601      	adds	r6, #1
 80160dc:	2102      	movs	r1, #2
 80160de:	e000      	b.n	80160e2 <__cvt+0x42>
 80160e0:	2103      	movs	r1, #3
 80160e2:	ab03      	add	r3, sp, #12
 80160e4:	9301      	str	r3, [sp, #4]
 80160e6:	ab02      	add	r3, sp, #8
 80160e8:	9300      	str	r3, [sp, #0]
 80160ea:	4632      	mov	r2, r6
 80160ec:	4653      	mov	r3, sl
 80160ee:	ec45 4b10 	vmov	d0, r4, r5
 80160f2:	f001 ff69 	bl	8017fc8 <_dtoa_r>
 80160f6:	2f47      	cmp	r7, #71	; 0x47
 80160f8:	4680      	mov	r8, r0
 80160fa:	d102      	bne.n	8016102 <__cvt+0x62>
 80160fc:	f019 0f01 	tst.w	r9, #1
 8016100:	d026      	beq.n	8016150 <__cvt+0xb0>
 8016102:	2f46      	cmp	r7, #70	; 0x46
 8016104:	eb08 0906 	add.w	r9, r8, r6
 8016108:	d111      	bne.n	801612e <__cvt+0x8e>
 801610a:	f898 3000 	ldrb.w	r3, [r8]
 801610e:	2b30      	cmp	r3, #48	; 0x30
 8016110:	d10a      	bne.n	8016128 <__cvt+0x88>
 8016112:	2200      	movs	r2, #0
 8016114:	2300      	movs	r3, #0
 8016116:	4620      	mov	r0, r4
 8016118:	4629      	mov	r1, r5
 801611a:	f7ea fce5 	bl	8000ae8 <__aeabi_dcmpeq>
 801611e:	b918      	cbnz	r0, 8016128 <__cvt+0x88>
 8016120:	f1c6 0601 	rsb	r6, r6, #1
 8016124:	f8ca 6000 	str.w	r6, [sl]
 8016128:	f8da 3000 	ldr.w	r3, [sl]
 801612c:	4499      	add	r9, r3
 801612e:	2200      	movs	r2, #0
 8016130:	2300      	movs	r3, #0
 8016132:	4620      	mov	r0, r4
 8016134:	4629      	mov	r1, r5
 8016136:	f7ea fcd7 	bl	8000ae8 <__aeabi_dcmpeq>
 801613a:	b938      	cbnz	r0, 801614c <__cvt+0xac>
 801613c:	2230      	movs	r2, #48	; 0x30
 801613e:	9b03      	ldr	r3, [sp, #12]
 8016140:	454b      	cmp	r3, r9
 8016142:	d205      	bcs.n	8016150 <__cvt+0xb0>
 8016144:	1c59      	adds	r1, r3, #1
 8016146:	9103      	str	r1, [sp, #12]
 8016148:	701a      	strb	r2, [r3, #0]
 801614a:	e7f8      	b.n	801613e <__cvt+0x9e>
 801614c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016150:	9b03      	ldr	r3, [sp, #12]
 8016152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016154:	eba3 0308 	sub.w	r3, r3, r8
 8016158:	4640      	mov	r0, r8
 801615a:	6013      	str	r3, [r2, #0]
 801615c:	b004      	add	sp, #16
 801615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016162 <__exponent>:
 8016162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016164:	2900      	cmp	r1, #0
 8016166:	4604      	mov	r4, r0
 8016168:	bfba      	itte	lt
 801616a:	4249      	neglt	r1, r1
 801616c:	232d      	movlt	r3, #45	; 0x2d
 801616e:	232b      	movge	r3, #43	; 0x2b
 8016170:	2909      	cmp	r1, #9
 8016172:	f804 2b02 	strb.w	r2, [r4], #2
 8016176:	7043      	strb	r3, [r0, #1]
 8016178:	dd20      	ble.n	80161bc <__exponent+0x5a>
 801617a:	f10d 0307 	add.w	r3, sp, #7
 801617e:	461f      	mov	r7, r3
 8016180:	260a      	movs	r6, #10
 8016182:	fb91 f5f6 	sdiv	r5, r1, r6
 8016186:	fb06 1115 	mls	r1, r6, r5, r1
 801618a:	3130      	adds	r1, #48	; 0x30
 801618c:	2d09      	cmp	r5, #9
 801618e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016192:	f103 32ff 	add.w	r2, r3, #4294967295
 8016196:	4629      	mov	r1, r5
 8016198:	dc09      	bgt.n	80161ae <__exponent+0x4c>
 801619a:	3130      	adds	r1, #48	; 0x30
 801619c:	3b02      	subs	r3, #2
 801619e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80161a2:	42bb      	cmp	r3, r7
 80161a4:	4622      	mov	r2, r4
 80161a6:	d304      	bcc.n	80161b2 <__exponent+0x50>
 80161a8:	1a10      	subs	r0, r2, r0
 80161aa:	b003      	add	sp, #12
 80161ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161ae:	4613      	mov	r3, r2
 80161b0:	e7e7      	b.n	8016182 <__exponent+0x20>
 80161b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161b6:	f804 2b01 	strb.w	r2, [r4], #1
 80161ba:	e7f2      	b.n	80161a2 <__exponent+0x40>
 80161bc:	2330      	movs	r3, #48	; 0x30
 80161be:	4419      	add	r1, r3
 80161c0:	7083      	strb	r3, [r0, #2]
 80161c2:	1d02      	adds	r2, r0, #4
 80161c4:	70c1      	strb	r1, [r0, #3]
 80161c6:	e7ef      	b.n	80161a8 <__exponent+0x46>

080161c8 <_printf_float>:
 80161c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161cc:	b08d      	sub	sp, #52	; 0x34
 80161ce:	460c      	mov	r4, r1
 80161d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80161d4:	4616      	mov	r6, r2
 80161d6:	461f      	mov	r7, r3
 80161d8:	4605      	mov	r5, r0
 80161da:	f003 f953 	bl	8019484 <_localeconv_r>
 80161de:	6803      	ldr	r3, [r0, #0]
 80161e0:	9304      	str	r3, [sp, #16]
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7ea f804 	bl	80001f0 <strlen>
 80161e8:	2300      	movs	r3, #0
 80161ea:	930a      	str	r3, [sp, #40]	; 0x28
 80161ec:	f8d8 3000 	ldr.w	r3, [r8]
 80161f0:	9005      	str	r0, [sp, #20]
 80161f2:	3307      	adds	r3, #7
 80161f4:	f023 0307 	bic.w	r3, r3, #7
 80161f8:	f103 0208 	add.w	r2, r3, #8
 80161fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016200:	f8d4 b000 	ldr.w	fp, [r4]
 8016204:	f8c8 2000 	str.w	r2, [r8]
 8016208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801620c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016210:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016214:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016218:	9307      	str	r3, [sp, #28]
 801621a:	f8cd 8018 	str.w	r8, [sp, #24]
 801621e:	f04f 32ff 	mov.w	r2, #4294967295
 8016222:	4ba7      	ldr	r3, [pc, #668]	; (80164c0 <_printf_float+0x2f8>)
 8016224:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016228:	f7ea fc90 	bl	8000b4c <__aeabi_dcmpun>
 801622c:	bb70      	cbnz	r0, 801628c <_printf_float+0xc4>
 801622e:	f04f 32ff 	mov.w	r2, #4294967295
 8016232:	4ba3      	ldr	r3, [pc, #652]	; (80164c0 <_printf_float+0x2f8>)
 8016234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016238:	f7ea fc6a 	bl	8000b10 <__aeabi_dcmple>
 801623c:	bb30      	cbnz	r0, 801628c <_printf_float+0xc4>
 801623e:	2200      	movs	r2, #0
 8016240:	2300      	movs	r3, #0
 8016242:	4640      	mov	r0, r8
 8016244:	4649      	mov	r1, r9
 8016246:	f7ea fc59 	bl	8000afc <__aeabi_dcmplt>
 801624a:	b110      	cbz	r0, 8016252 <_printf_float+0x8a>
 801624c:	232d      	movs	r3, #45	; 0x2d
 801624e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016252:	4a9c      	ldr	r2, [pc, #624]	; (80164c4 <_printf_float+0x2fc>)
 8016254:	4b9c      	ldr	r3, [pc, #624]	; (80164c8 <_printf_float+0x300>)
 8016256:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801625a:	bf8c      	ite	hi
 801625c:	4690      	movhi	r8, r2
 801625e:	4698      	movls	r8, r3
 8016260:	2303      	movs	r3, #3
 8016262:	f02b 0204 	bic.w	r2, fp, #4
 8016266:	6123      	str	r3, [r4, #16]
 8016268:	6022      	str	r2, [r4, #0]
 801626a:	f04f 0900 	mov.w	r9, #0
 801626e:	9700      	str	r7, [sp, #0]
 8016270:	4633      	mov	r3, r6
 8016272:	aa0b      	add	r2, sp, #44	; 0x2c
 8016274:	4621      	mov	r1, r4
 8016276:	4628      	mov	r0, r5
 8016278:	f000 f9e6 	bl	8016648 <_printf_common>
 801627c:	3001      	adds	r0, #1
 801627e:	f040 808d 	bne.w	801639c <_printf_float+0x1d4>
 8016282:	f04f 30ff 	mov.w	r0, #4294967295
 8016286:	b00d      	add	sp, #52	; 0x34
 8016288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801628c:	4642      	mov	r2, r8
 801628e:	464b      	mov	r3, r9
 8016290:	4640      	mov	r0, r8
 8016292:	4649      	mov	r1, r9
 8016294:	f7ea fc5a 	bl	8000b4c <__aeabi_dcmpun>
 8016298:	b110      	cbz	r0, 80162a0 <_printf_float+0xd8>
 801629a:	4a8c      	ldr	r2, [pc, #560]	; (80164cc <_printf_float+0x304>)
 801629c:	4b8c      	ldr	r3, [pc, #560]	; (80164d0 <_printf_float+0x308>)
 801629e:	e7da      	b.n	8016256 <_printf_float+0x8e>
 80162a0:	6861      	ldr	r1, [r4, #4]
 80162a2:	1c4b      	adds	r3, r1, #1
 80162a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80162a8:	a80a      	add	r0, sp, #40	; 0x28
 80162aa:	d13e      	bne.n	801632a <_printf_float+0x162>
 80162ac:	2306      	movs	r3, #6
 80162ae:	6063      	str	r3, [r4, #4]
 80162b0:	2300      	movs	r3, #0
 80162b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80162b6:	ab09      	add	r3, sp, #36	; 0x24
 80162b8:	9300      	str	r3, [sp, #0]
 80162ba:	ec49 8b10 	vmov	d0, r8, r9
 80162be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80162c2:	6022      	str	r2, [r4, #0]
 80162c4:	f8cd a004 	str.w	sl, [sp, #4]
 80162c8:	6861      	ldr	r1, [r4, #4]
 80162ca:	4628      	mov	r0, r5
 80162cc:	f7ff fee8 	bl	80160a0 <__cvt>
 80162d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80162d4:	2b47      	cmp	r3, #71	; 0x47
 80162d6:	4680      	mov	r8, r0
 80162d8:	d109      	bne.n	80162ee <_printf_float+0x126>
 80162da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162dc:	1cd8      	adds	r0, r3, #3
 80162de:	db02      	blt.n	80162e6 <_printf_float+0x11e>
 80162e0:	6862      	ldr	r2, [r4, #4]
 80162e2:	4293      	cmp	r3, r2
 80162e4:	dd47      	ble.n	8016376 <_printf_float+0x1ae>
 80162e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80162ea:	fa5f fa8a 	uxtb.w	sl, sl
 80162ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80162f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162f4:	d824      	bhi.n	8016340 <_printf_float+0x178>
 80162f6:	3901      	subs	r1, #1
 80162f8:	4652      	mov	r2, sl
 80162fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80162fe:	9109      	str	r1, [sp, #36]	; 0x24
 8016300:	f7ff ff2f 	bl	8016162 <__exponent>
 8016304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016306:	1813      	adds	r3, r2, r0
 8016308:	2a01      	cmp	r2, #1
 801630a:	4681      	mov	r9, r0
 801630c:	6123      	str	r3, [r4, #16]
 801630e:	dc02      	bgt.n	8016316 <_printf_float+0x14e>
 8016310:	6822      	ldr	r2, [r4, #0]
 8016312:	07d1      	lsls	r1, r2, #31
 8016314:	d501      	bpl.n	801631a <_printf_float+0x152>
 8016316:	3301      	adds	r3, #1
 8016318:	6123      	str	r3, [r4, #16]
 801631a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801631e:	2b00      	cmp	r3, #0
 8016320:	d0a5      	beq.n	801626e <_printf_float+0xa6>
 8016322:	232d      	movs	r3, #45	; 0x2d
 8016324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016328:	e7a1      	b.n	801626e <_printf_float+0xa6>
 801632a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801632e:	f000 8177 	beq.w	8016620 <_printf_float+0x458>
 8016332:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016336:	d1bb      	bne.n	80162b0 <_printf_float+0xe8>
 8016338:	2900      	cmp	r1, #0
 801633a:	d1b9      	bne.n	80162b0 <_printf_float+0xe8>
 801633c:	2301      	movs	r3, #1
 801633e:	e7b6      	b.n	80162ae <_printf_float+0xe6>
 8016340:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016344:	d119      	bne.n	801637a <_printf_float+0x1b2>
 8016346:	2900      	cmp	r1, #0
 8016348:	6863      	ldr	r3, [r4, #4]
 801634a:	dd0c      	ble.n	8016366 <_printf_float+0x19e>
 801634c:	6121      	str	r1, [r4, #16]
 801634e:	b913      	cbnz	r3, 8016356 <_printf_float+0x18e>
 8016350:	6822      	ldr	r2, [r4, #0]
 8016352:	07d2      	lsls	r2, r2, #31
 8016354:	d502      	bpl.n	801635c <_printf_float+0x194>
 8016356:	3301      	adds	r3, #1
 8016358:	440b      	add	r3, r1
 801635a:	6123      	str	r3, [r4, #16]
 801635c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801635e:	65a3      	str	r3, [r4, #88]	; 0x58
 8016360:	f04f 0900 	mov.w	r9, #0
 8016364:	e7d9      	b.n	801631a <_printf_float+0x152>
 8016366:	b913      	cbnz	r3, 801636e <_printf_float+0x1a6>
 8016368:	6822      	ldr	r2, [r4, #0]
 801636a:	07d0      	lsls	r0, r2, #31
 801636c:	d501      	bpl.n	8016372 <_printf_float+0x1aa>
 801636e:	3302      	adds	r3, #2
 8016370:	e7f3      	b.n	801635a <_printf_float+0x192>
 8016372:	2301      	movs	r3, #1
 8016374:	e7f1      	b.n	801635a <_printf_float+0x192>
 8016376:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801637a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801637e:	4293      	cmp	r3, r2
 8016380:	db05      	blt.n	801638e <_printf_float+0x1c6>
 8016382:	6822      	ldr	r2, [r4, #0]
 8016384:	6123      	str	r3, [r4, #16]
 8016386:	07d1      	lsls	r1, r2, #31
 8016388:	d5e8      	bpl.n	801635c <_printf_float+0x194>
 801638a:	3301      	adds	r3, #1
 801638c:	e7e5      	b.n	801635a <_printf_float+0x192>
 801638e:	2b00      	cmp	r3, #0
 8016390:	bfd4      	ite	le
 8016392:	f1c3 0302 	rsble	r3, r3, #2
 8016396:	2301      	movgt	r3, #1
 8016398:	4413      	add	r3, r2
 801639a:	e7de      	b.n	801635a <_printf_float+0x192>
 801639c:	6823      	ldr	r3, [r4, #0]
 801639e:	055a      	lsls	r2, r3, #21
 80163a0:	d407      	bmi.n	80163b2 <_printf_float+0x1ea>
 80163a2:	6923      	ldr	r3, [r4, #16]
 80163a4:	4642      	mov	r2, r8
 80163a6:	4631      	mov	r1, r6
 80163a8:	4628      	mov	r0, r5
 80163aa:	47b8      	blx	r7
 80163ac:	3001      	adds	r0, #1
 80163ae:	d12b      	bne.n	8016408 <_printf_float+0x240>
 80163b0:	e767      	b.n	8016282 <_printf_float+0xba>
 80163b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80163b6:	f240 80dc 	bls.w	8016572 <_printf_float+0x3aa>
 80163ba:	2200      	movs	r2, #0
 80163bc:	2300      	movs	r3, #0
 80163be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80163c2:	f7ea fb91 	bl	8000ae8 <__aeabi_dcmpeq>
 80163c6:	2800      	cmp	r0, #0
 80163c8:	d033      	beq.n	8016432 <_printf_float+0x26a>
 80163ca:	2301      	movs	r3, #1
 80163cc:	4a41      	ldr	r2, [pc, #260]	; (80164d4 <_printf_float+0x30c>)
 80163ce:	4631      	mov	r1, r6
 80163d0:	4628      	mov	r0, r5
 80163d2:	47b8      	blx	r7
 80163d4:	3001      	adds	r0, #1
 80163d6:	f43f af54 	beq.w	8016282 <_printf_float+0xba>
 80163da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163de:	429a      	cmp	r2, r3
 80163e0:	db02      	blt.n	80163e8 <_printf_float+0x220>
 80163e2:	6823      	ldr	r3, [r4, #0]
 80163e4:	07d8      	lsls	r0, r3, #31
 80163e6:	d50f      	bpl.n	8016408 <_printf_float+0x240>
 80163e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163ec:	4631      	mov	r1, r6
 80163ee:	4628      	mov	r0, r5
 80163f0:	47b8      	blx	r7
 80163f2:	3001      	adds	r0, #1
 80163f4:	f43f af45 	beq.w	8016282 <_printf_float+0xba>
 80163f8:	f04f 0800 	mov.w	r8, #0
 80163fc:	f104 091a 	add.w	r9, r4, #26
 8016400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016402:	3b01      	subs	r3, #1
 8016404:	4543      	cmp	r3, r8
 8016406:	dc09      	bgt.n	801641c <_printf_float+0x254>
 8016408:	6823      	ldr	r3, [r4, #0]
 801640a:	079b      	lsls	r3, r3, #30
 801640c:	f100 8103 	bmi.w	8016616 <_printf_float+0x44e>
 8016410:	68e0      	ldr	r0, [r4, #12]
 8016412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016414:	4298      	cmp	r0, r3
 8016416:	bfb8      	it	lt
 8016418:	4618      	movlt	r0, r3
 801641a:	e734      	b.n	8016286 <_printf_float+0xbe>
 801641c:	2301      	movs	r3, #1
 801641e:	464a      	mov	r2, r9
 8016420:	4631      	mov	r1, r6
 8016422:	4628      	mov	r0, r5
 8016424:	47b8      	blx	r7
 8016426:	3001      	adds	r0, #1
 8016428:	f43f af2b 	beq.w	8016282 <_printf_float+0xba>
 801642c:	f108 0801 	add.w	r8, r8, #1
 8016430:	e7e6      	b.n	8016400 <_printf_float+0x238>
 8016432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016434:	2b00      	cmp	r3, #0
 8016436:	dc2b      	bgt.n	8016490 <_printf_float+0x2c8>
 8016438:	2301      	movs	r3, #1
 801643a:	4a26      	ldr	r2, [pc, #152]	; (80164d4 <_printf_float+0x30c>)
 801643c:	4631      	mov	r1, r6
 801643e:	4628      	mov	r0, r5
 8016440:	47b8      	blx	r7
 8016442:	3001      	adds	r0, #1
 8016444:	f43f af1d 	beq.w	8016282 <_printf_float+0xba>
 8016448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801644a:	b923      	cbnz	r3, 8016456 <_printf_float+0x28e>
 801644c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801644e:	b913      	cbnz	r3, 8016456 <_printf_float+0x28e>
 8016450:	6823      	ldr	r3, [r4, #0]
 8016452:	07d9      	lsls	r1, r3, #31
 8016454:	d5d8      	bpl.n	8016408 <_printf_float+0x240>
 8016456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801645a:	4631      	mov	r1, r6
 801645c:	4628      	mov	r0, r5
 801645e:	47b8      	blx	r7
 8016460:	3001      	adds	r0, #1
 8016462:	f43f af0e 	beq.w	8016282 <_printf_float+0xba>
 8016466:	f04f 0900 	mov.w	r9, #0
 801646a:	f104 0a1a 	add.w	sl, r4, #26
 801646e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016470:	425b      	negs	r3, r3
 8016472:	454b      	cmp	r3, r9
 8016474:	dc01      	bgt.n	801647a <_printf_float+0x2b2>
 8016476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016478:	e794      	b.n	80163a4 <_printf_float+0x1dc>
 801647a:	2301      	movs	r3, #1
 801647c:	4652      	mov	r2, sl
 801647e:	4631      	mov	r1, r6
 8016480:	4628      	mov	r0, r5
 8016482:	47b8      	blx	r7
 8016484:	3001      	adds	r0, #1
 8016486:	f43f aefc 	beq.w	8016282 <_printf_float+0xba>
 801648a:	f109 0901 	add.w	r9, r9, #1
 801648e:	e7ee      	b.n	801646e <_printf_float+0x2a6>
 8016490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016494:	429a      	cmp	r2, r3
 8016496:	bfa8      	it	ge
 8016498:	461a      	movge	r2, r3
 801649a:	2a00      	cmp	r2, #0
 801649c:	4691      	mov	r9, r2
 801649e:	dd07      	ble.n	80164b0 <_printf_float+0x2e8>
 80164a0:	4613      	mov	r3, r2
 80164a2:	4631      	mov	r1, r6
 80164a4:	4642      	mov	r2, r8
 80164a6:	4628      	mov	r0, r5
 80164a8:	47b8      	blx	r7
 80164aa:	3001      	adds	r0, #1
 80164ac:	f43f aee9 	beq.w	8016282 <_printf_float+0xba>
 80164b0:	f104 031a 	add.w	r3, r4, #26
 80164b4:	f04f 0b00 	mov.w	fp, #0
 80164b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80164bc:	9306      	str	r3, [sp, #24]
 80164be:	e015      	b.n	80164ec <_printf_float+0x324>
 80164c0:	7fefffff 	.word	0x7fefffff
 80164c4:	0801a962 	.word	0x0801a962
 80164c8:	0801adad 	.word	0x0801adad
 80164cc:	0801adb5 	.word	0x0801adb5
 80164d0:	0801adb1 	.word	0x0801adb1
 80164d4:	0801adb9 	.word	0x0801adb9
 80164d8:	2301      	movs	r3, #1
 80164da:	9a06      	ldr	r2, [sp, #24]
 80164dc:	4631      	mov	r1, r6
 80164de:	4628      	mov	r0, r5
 80164e0:	47b8      	blx	r7
 80164e2:	3001      	adds	r0, #1
 80164e4:	f43f aecd 	beq.w	8016282 <_printf_float+0xba>
 80164e8:	f10b 0b01 	add.w	fp, fp, #1
 80164ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80164f0:	ebaa 0309 	sub.w	r3, sl, r9
 80164f4:	455b      	cmp	r3, fp
 80164f6:	dcef      	bgt.n	80164d8 <_printf_float+0x310>
 80164f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164fc:	429a      	cmp	r2, r3
 80164fe:	44d0      	add	r8, sl
 8016500:	db15      	blt.n	801652e <_printf_float+0x366>
 8016502:	6823      	ldr	r3, [r4, #0]
 8016504:	07da      	lsls	r2, r3, #31
 8016506:	d412      	bmi.n	801652e <_printf_float+0x366>
 8016508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801650a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801650c:	eba3 020a 	sub.w	r2, r3, sl
 8016510:	eba3 0a01 	sub.w	sl, r3, r1
 8016514:	4592      	cmp	sl, r2
 8016516:	bfa8      	it	ge
 8016518:	4692      	movge	sl, r2
 801651a:	f1ba 0f00 	cmp.w	sl, #0
 801651e:	dc0e      	bgt.n	801653e <_printf_float+0x376>
 8016520:	f04f 0800 	mov.w	r8, #0
 8016524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016528:	f104 091a 	add.w	r9, r4, #26
 801652c:	e019      	b.n	8016562 <_printf_float+0x39a>
 801652e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016532:	4631      	mov	r1, r6
 8016534:	4628      	mov	r0, r5
 8016536:	47b8      	blx	r7
 8016538:	3001      	adds	r0, #1
 801653a:	d1e5      	bne.n	8016508 <_printf_float+0x340>
 801653c:	e6a1      	b.n	8016282 <_printf_float+0xba>
 801653e:	4653      	mov	r3, sl
 8016540:	4642      	mov	r2, r8
 8016542:	4631      	mov	r1, r6
 8016544:	4628      	mov	r0, r5
 8016546:	47b8      	blx	r7
 8016548:	3001      	adds	r0, #1
 801654a:	d1e9      	bne.n	8016520 <_printf_float+0x358>
 801654c:	e699      	b.n	8016282 <_printf_float+0xba>
 801654e:	2301      	movs	r3, #1
 8016550:	464a      	mov	r2, r9
 8016552:	4631      	mov	r1, r6
 8016554:	4628      	mov	r0, r5
 8016556:	47b8      	blx	r7
 8016558:	3001      	adds	r0, #1
 801655a:	f43f ae92 	beq.w	8016282 <_printf_float+0xba>
 801655e:	f108 0801 	add.w	r8, r8, #1
 8016562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016566:	1a9b      	subs	r3, r3, r2
 8016568:	eba3 030a 	sub.w	r3, r3, sl
 801656c:	4543      	cmp	r3, r8
 801656e:	dcee      	bgt.n	801654e <_printf_float+0x386>
 8016570:	e74a      	b.n	8016408 <_printf_float+0x240>
 8016572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016574:	2a01      	cmp	r2, #1
 8016576:	dc01      	bgt.n	801657c <_printf_float+0x3b4>
 8016578:	07db      	lsls	r3, r3, #31
 801657a:	d53a      	bpl.n	80165f2 <_printf_float+0x42a>
 801657c:	2301      	movs	r3, #1
 801657e:	4642      	mov	r2, r8
 8016580:	4631      	mov	r1, r6
 8016582:	4628      	mov	r0, r5
 8016584:	47b8      	blx	r7
 8016586:	3001      	adds	r0, #1
 8016588:	f43f ae7b 	beq.w	8016282 <_printf_float+0xba>
 801658c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016590:	4631      	mov	r1, r6
 8016592:	4628      	mov	r0, r5
 8016594:	47b8      	blx	r7
 8016596:	3001      	adds	r0, #1
 8016598:	f108 0801 	add.w	r8, r8, #1
 801659c:	f43f ae71 	beq.w	8016282 <_printf_float+0xba>
 80165a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165a2:	2200      	movs	r2, #0
 80165a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80165a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80165ac:	2300      	movs	r3, #0
 80165ae:	f7ea fa9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80165b2:	b9c8      	cbnz	r0, 80165e8 <_printf_float+0x420>
 80165b4:	4653      	mov	r3, sl
 80165b6:	4642      	mov	r2, r8
 80165b8:	4631      	mov	r1, r6
 80165ba:	4628      	mov	r0, r5
 80165bc:	47b8      	blx	r7
 80165be:	3001      	adds	r0, #1
 80165c0:	d10e      	bne.n	80165e0 <_printf_float+0x418>
 80165c2:	e65e      	b.n	8016282 <_printf_float+0xba>
 80165c4:	2301      	movs	r3, #1
 80165c6:	4652      	mov	r2, sl
 80165c8:	4631      	mov	r1, r6
 80165ca:	4628      	mov	r0, r5
 80165cc:	47b8      	blx	r7
 80165ce:	3001      	adds	r0, #1
 80165d0:	f43f ae57 	beq.w	8016282 <_printf_float+0xba>
 80165d4:	f108 0801 	add.w	r8, r8, #1
 80165d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165da:	3b01      	subs	r3, #1
 80165dc:	4543      	cmp	r3, r8
 80165de:	dcf1      	bgt.n	80165c4 <_printf_float+0x3fc>
 80165e0:	464b      	mov	r3, r9
 80165e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80165e6:	e6de      	b.n	80163a6 <_printf_float+0x1de>
 80165e8:	f04f 0800 	mov.w	r8, #0
 80165ec:	f104 0a1a 	add.w	sl, r4, #26
 80165f0:	e7f2      	b.n	80165d8 <_printf_float+0x410>
 80165f2:	2301      	movs	r3, #1
 80165f4:	e7df      	b.n	80165b6 <_printf_float+0x3ee>
 80165f6:	2301      	movs	r3, #1
 80165f8:	464a      	mov	r2, r9
 80165fa:	4631      	mov	r1, r6
 80165fc:	4628      	mov	r0, r5
 80165fe:	47b8      	blx	r7
 8016600:	3001      	adds	r0, #1
 8016602:	f43f ae3e 	beq.w	8016282 <_printf_float+0xba>
 8016606:	f108 0801 	add.w	r8, r8, #1
 801660a:	68e3      	ldr	r3, [r4, #12]
 801660c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801660e:	1a9b      	subs	r3, r3, r2
 8016610:	4543      	cmp	r3, r8
 8016612:	dcf0      	bgt.n	80165f6 <_printf_float+0x42e>
 8016614:	e6fc      	b.n	8016410 <_printf_float+0x248>
 8016616:	f04f 0800 	mov.w	r8, #0
 801661a:	f104 0919 	add.w	r9, r4, #25
 801661e:	e7f4      	b.n	801660a <_printf_float+0x442>
 8016620:	2900      	cmp	r1, #0
 8016622:	f43f ae8b 	beq.w	801633c <_printf_float+0x174>
 8016626:	2300      	movs	r3, #0
 8016628:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801662c:	ab09      	add	r3, sp, #36	; 0x24
 801662e:	9300      	str	r3, [sp, #0]
 8016630:	ec49 8b10 	vmov	d0, r8, r9
 8016634:	6022      	str	r2, [r4, #0]
 8016636:	f8cd a004 	str.w	sl, [sp, #4]
 801663a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801663e:	4628      	mov	r0, r5
 8016640:	f7ff fd2e 	bl	80160a0 <__cvt>
 8016644:	4680      	mov	r8, r0
 8016646:	e648      	b.n	80162da <_printf_float+0x112>

08016648 <_printf_common>:
 8016648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801664c:	4691      	mov	r9, r2
 801664e:	461f      	mov	r7, r3
 8016650:	688a      	ldr	r2, [r1, #8]
 8016652:	690b      	ldr	r3, [r1, #16]
 8016654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016658:	4293      	cmp	r3, r2
 801665a:	bfb8      	it	lt
 801665c:	4613      	movlt	r3, r2
 801665e:	f8c9 3000 	str.w	r3, [r9]
 8016662:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016666:	4606      	mov	r6, r0
 8016668:	460c      	mov	r4, r1
 801666a:	b112      	cbz	r2, 8016672 <_printf_common+0x2a>
 801666c:	3301      	adds	r3, #1
 801666e:	f8c9 3000 	str.w	r3, [r9]
 8016672:	6823      	ldr	r3, [r4, #0]
 8016674:	0699      	lsls	r1, r3, #26
 8016676:	bf42      	ittt	mi
 8016678:	f8d9 3000 	ldrmi.w	r3, [r9]
 801667c:	3302      	addmi	r3, #2
 801667e:	f8c9 3000 	strmi.w	r3, [r9]
 8016682:	6825      	ldr	r5, [r4, #0]
 8016684:	f015 0506 	ands.w	r5, r5, #6
 8016688:	d107      	bne.n	801669a <_printf_common+0x52>
 801668a:	f104 0a19 	add.w	sl, r4, #25
 801668e:	68e3      	ldr	r3, [r4, #12]
 8016690:	f8d9 2000 	ldr.w	r2, [r9]
 8016694:	1a9b      	subs	r3, r3, r2
 8016696:	42ab      	cmp	r3, r5
 8016698:	dc28      	bgt.n	80166ec <_printf_common+0xa4>
 801669a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801669e:	6822      	ldr	r2, [r4, #0]
 80166a0:	3300      	adds	r3, #0
 80166a2:	bf18      	it	ne
 80166a4:	2301      	movne	r3, #1
 80166a6:	0692      	lsls	r2, r2, #26
 80166a8:	d42d      	bmi.n	8016706 <_printf_common+0xbe>
 80166aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80166ae:	4639      	mov	r1, r7
 80166b0:	4630      	mov	r0, r6
 80166b2:	47c0      	blx	r8
 80166b4:	3001      	adds	r0, #1
 80166b6:	d020      	beq.n	80166fa <_printf_common+0xb2>
 80166b8:	6823      	ldr	r3, [r4, #0]
 80166ba:	68e5      	ldr	r5, [r4, #12]
 80166bc:	f8d9 2000 	ldr.w	r2, [r9]
 80166c0:	f003 0306 	and.w	r3, r3, #6
 80166c4:	2b04      	cmp	r3, #4
 80166c6:	bf08      	it	eq
 80166c8:	1aad      	subeq	r5, r5, r2
 80166ca:	68a3      	ldr	r3, [r4, #8]
 80166cc:	6922      	ldr	r2, [r4, #16]
 80166ce:	bf0c      	ite	eq
 80166d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80166d4:	2500      	movne	r5, #0
 80166d6:	4293      	cmp	r3, r2
 80166d8:	bfc4      	itt	gt
 80166da:	1a9b      	subgt	r3, r3, r2
 80166dc:	18ed      	addgt	r5, r5, r3
 80166de:	f04f 0900 	mov.w	r9, #0
 80166e2:	341a      	adds	r4, #26
 80166e4:	454d      	cmp	r5, r9
 80166e6:	d11a      	bne.n	801671e <_printf_common+0xd6>
 80166e8:	2000      	movs	r0, #0
 80166ea:	e008      	b.n	80166fe <_printf_common+0xb6>
 80166ec:	2301      	movs	r3, #1
 80166ee:	4652      	mov	r2, sl
 80166f0:	4639      	mov	r1, r7
 80166f2:	4630      	mov	r0, r6
 80166f4:	47c0      	blx	r8
 80166f6:	3001      	adds	r0, #1
 80166f8:	d103      	bne.n	8016702 <_printf_common+0xba>
 80166fa:	f04f 30ff 	mov.w	r0, #4294967295
 80166fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016702:	3501      	adds	r5, #1
 8016704:	e7c3      	b.n	801668e <_printf_common+0x46>
 8016706:	18e1      	adds	r1, r4, r3
 8016708:	1c5a      	adds	r2, r3, #1
 801670a:	2030      	movs	r0, #48	; 0x30
 801670c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016710:	4422      	add	r2, r4
 8016712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801671a:	3302      	adds	r3, #2
 801671c:	e7c5      	b.n	80166aa <_printf_common+0x62>
 801671e:	2301      	movs	r3, #1
 8016720:	4622      	mov	r2, r4
 8016722:	4639      	mov	r1, r7
 8016724:	4630      	mov	r0, r6
 8016726:	47c0      	blx	r8
 8016728:	3001      	adds	r0, #1
 801672a:	d0e6      	beq.n	80166fa <_printf_common+0xb2>
 801672c:	f109 0901 	add.w	r9, r9, #1
 8016730:	e7d8      	b.n	80166e4 <_printf_common+0x9c>
	...

08016734 <_printf_i>:
 8016734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016738:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801673c:	460c      	mov	r4, r1
 801673e:	7e09      	ldrb	r1, [r1, #24]
 8016740:	b085      	sub	sp, #20
 8016742:	296e      	cmp	r1, #110	; 0x6e
 8016744:	4617      	mov	r7, r2
 8016746:	4606      	mov	r6, r0
 8016748:	4698      	mov	r8, r3
 801674a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801674c:	f000 80b3 	beq.w	80168b6 <_printf_i+0x182>
 8016750:	d822      	bhi.n	8016798 <_printf_i+0x64>
 8016752:	2963      	cmp	r1, #99	; 0x63
 8016754:	d036      	beq.n	80167c4 <_printf_i+0x90>
 8016756:	d80a      	bhi.n	801676e <_printf_i+0x3a>
 8016758:	2900      	cmp	r1, #0
 801675a:	f000 80b9 	beq.w	80168d0 <_printf_i+0x19c>
 801675e:	2958      	cmp	r1, #88	; 0x58
 8016760:	f000 8083 	beq.w	801686a <_printf_i+0x136>
 8016764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016768:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801676c:	e032      	b.n	80167d4 <_printf_i+0xa0>
 801676e:	2964      	cmp	r1, #100	; 0x64
 8016770:	d001      	beq.n	8016776 <_printf_i+0x42>
 8016772:	2969      	cmp	r1, #105	; 0x69
 8016774:	d1f6      	bne.n	8016764 <_printf_i+0x30>
 8016776:	6820      	ldr	r0, [r4, #0]
 8016778:	6813      	ldr	r3, [r2, #0]
 801677a:	0605      	lsls	r5, r0, #24
 801677c:	f103 0104 	add.w	r1, r3, #4
 8016780:	d52a      	bpl.n	80167d8 <_printf_i+0xa4>
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	6011      	str	r1, [r2, #0]
 8016786:	2b00      	cmp	r3, #0
 8016788:	da03      	bge.n	8016792 <_printf_i+0x5e>
 801678a:	222d      	movs	r2, #45	; 0x2d
 801678c:	425b      	negs	r3, r3
 801678e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016792:	486f      	ldr	r0, [pc, #444]	; (8016950 <_printf_i+0x21c>)
 8016794:	220a      	movs	r2, #10
 8016796:	e039      	b.n	801680c <_printf_i+0xd8>
 8016798:	2973      	cmp	r1, #115	; 0x73
 801679a:	f000 809d 	beq.w	80168d8 <_printf_i+0x1a4>
 801679e:	d808      	bhi.n	80167b2 <_printf_i+0x7e>
 80167a0:	296f      	cmp	r1, #111	; 0x6f
 80167a2:	d020      	beq.n	80167e6 <_printf_i+0xb2>
 80167a4:	2970      	cmp	r1, #112	; 0x70
 80167a6:	d1dd      	bne.n	8016764 <_printf_i+0x30>
 80167a8:	6823      	ldr	r3, [r4, #0]
 80167aa:	f043 0320 	orr.w	r3, r3, #32
 80167ae:	6023      	str	r3, [r4, #0]
 80167b0:	e003      	b.n	80167ba <_printf_i+0x86>
 80167b2:	2975      	cmp	r1, #117	; 0x75
 80167b4:	d017      	beq.n	80167e6 <_printf_i+0xb2>
 80167b6:	2978      	cmp	r1, #120	; 0x78
 80167b8:	d1d4      	bne.n	8016764 <_printf_i+0x30>
 80167ba:	2378      	movs	r3, #120	; 0x78
 80167bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80167c0:	4864      	ldr	r0, [pc, #400]	; (8016954 <_printf_i+0x220>)
 80167c2:	e055      	b.n	8016870 <_printf_i+0x13c>
 80167c4:	6813      	ldr	r3, [r2, #0]
 80167c6:	1d19      	adds	r1, r3, #4
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	6011      	str	r1, [r2, #0]
 80167cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80167d4:	2301      	movs	r3, #1
 80167d6:	e08c      	b.n	80168f2 <_printf_i+0x1be>
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	6011      	str	r1, [r2, #0]
 80167dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80167e0:	bf18      	it	ne
 80167e2:	b21b      	sxthne	r3, r3
 80167e4:	e7cf      	b.n	8016786 <_printf_i+0x52>
 80167e6:	6813      	ldr	r3, [r2, #0]
 80167e8:	6825      	ldr	r5, [r4, #0]
 80167ea:	1d18      	adds	r0, r3, #4
 80167ec:	6010      	str	r0, [r2, #0]
 80167ee:	0628      	lsls	r0, r5, #24
 80167f0:	d501      	bpl.n	80167f6 <_printf_i+0xc2>
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	e002      	b.n	80167fc <_printf_i+0xc8>
 80167f6:	0668      	lsls	r0, r5, #25
 80167f8:	d5fb      	bpl.n	80167f2 <_printf_i+0xbe>
 80167fa:	881b      	ldrh	r3, [r3, #0]
 80167fc:	4854      	ldr	r0, [pc, #336]	; (8016950 <_printf_i+0x21c>)
 80167fe:	296f      	cmp	r1, #111	; 0x6f
 8016800:	bf14      	ite	ne
 8016802:	220a      	movne	r2, #10
 8016804:	2208      	moveq	r2, #8
 8016806:	2100      	movs	r1, #0
 8016808:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801680c:	6865      	ldr	r5, [r4, #4]
 801680e:	60a5      	str	r5, [r4, #8]
 8016810:	2d00      	cmp	r5, #0
 8016812:	f2c0 8095 	blt.w	8016940 <_printf_i+0x20c>
 8016816:	6821      	ldr	r1, [r4, #0]
 8016818:	f021 0104 	bic.w	r1, r1, #4
 801681c:	6021      	str	r1, [r4, #0]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d13d      	bne.n	801689e <_printf_i+0x16a>
 8016822:	2d00      	cmp	r5, #0
 8016824:	f040 808e 	bne.w	8016944 <_printf_i+0x210>
 8016828:	4665      	mov	r5, ip
 801682a:	2a08      	cmp	r2, #8
 801682c:	d10b      	bne.n	8016846 <_printf_i+0x112>
 801682e:	6823      	ldr	r3, [r4, #0]
 8016830:	07db      	lsls	r3, r3, #31
 8016832:	d508      	bpl.n	8016846 <_printf_i+0x112>
 8016834:	6923      	ldr	r3, [r4, #16]
 8016836:	6862      	ldr	r2, [r4, #4]
 8016838:	429a      	cmp	r2, r3
 801683a:	bfde      	ittt	le
 801683c:	2330      	movle	r3, #48	; 0x30
 801683e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016842:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016846:	ebac 0305 	sub.w	r3, ip, r5
 801684a:	6123      	str	r3, [r4, #16]
 801684c:	f8cd 8000 	str.w	r8, [sp]
 8016850:	463b      	mov	r3, r7
 8016852:	aa03      	add	r2, sp, #12
 8016854:	4621      	mov	r1, r4
 8016856:	4630      	mov	r0, r6
 8016858:	f7ff fef6 	bl	8016648 <_printf_common>
 801685c:	3001      	adds	r0, #1
 801685e:	d14d      	bne.n	80168fc <_printf_i+0x1c8>
 8016860:	f04f 30ff 	mov.w	r0, #4294967295
 8016864:	b005      	add	sp, #20
 8016866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801686a:	4839      	ldr	r0, [pc, #228]	; (8016950 <_printf_i+0x21c>)
 801686c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016870:	6813      	ldr	r3, [r2, #0]
 8016872:	6821      	ldr	r1, [r4, #0]
 8016874:	1d1d      	adds	r5, r3, #4
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	6015      	str	r5, [r2, #0]
 801687a:	060a      	lsls	r2, r1, #24
 801687c:	d50b      	bpl.n	8016896 <_printf_i+0x162>
 801687e:	07ca      	lsls	r2, r1, #31
 8016880:	bf44      	itt	mi
 8016882:	f041 0120 	orrmi.w	r1, r1, #32
 8016886:	6021      	strmi	r1, [r4, #0]
 8016888:	b91b      	cbnz	r3, 8016892 <_printf_i+0x15e>
 801688a:	6822      	ldr	r2, [r4, #0]
 801688c:	f022 0220 	bic.w	r2, r2, #32
 8016890:	6022      	str	r2, [r4, #0]
 8016892:	2210      	movs	r2, #16
 8016894:	e7b7      	b.n	8016806 <_printf_i+0xd2>
 8016896:	064d      	lsls	r5, r1, #25
 8016898:	bf48      	it	mi
 801689a:	b29b      	uxthmi	r3, r3
 801689c:	e7ef      	b.n	801687e <_printf_i+0x14a>
 801689e:	4665      	mov	r5, ip
 80168a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80168a4:	fb02 3311 	mls	r3, r2, r1, r3
 80168a8:	5cc3      	ldrb	r3, [r0, r3]
 80168aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80168ae:	460b      	mov	r3, r1
 80168b0:	2900      	cmp	r1, #0
 80168b2:	d1f5      	bne.n	80168a0 <_printf_i+0x16c>
 80168b4:	e7b9      	b.n	801682a <_printf_i+0xf6>
 80168b6:	6813      	ldr	r3, [r2, #0]
 80168b8:	6825      	ldr	r5, [r4, #0]
 80168ba:	6961      	ldr	r1, [r4, #20]
 80168bc:	1d18      	adds	r0, r3, #4
 80168be:	6010      	str	r0, [r2, #0]
 80168c0:	0628      	lsls	r0, r5, #24
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	d501      	bpl.n	80168ca <_printf_i+0x196>
 80168c6:	6019      	str	r1, [r3, #0]
 80168c8:	e002      	b.n	80168d0 <_printf_i+0x19c>
 80168ca:	066a      	lsls	r2, r5, #25
 80168cc:	d5fb      	bpl.n	80168c6 <_printf_i+0x192>
 80168ce:	8019      	strh	r1, [r3, #0]
 80168d0:	2300      	movs	r3, #0
 80168d2:	6123      	str	r3, [r4, #16]
 80168d4:	4665      	mov	r5, ip
 80168d6:	e7b9      	b.n	801684c <_printf_i+0x118>
 80168d8:	6813      	ldr	r3, [r2, #0]
 80168da:	1d19      	adds	r1, r3, #4
 80168dc:	6011      	str	r1, [r2, #0]
 80168de:	681d      	ldr	r5, [r3, #0]
 80168e0:	6862      	ldr	r2, [r4, #4]
 80168e2:	2100      	movs	r1, #0
 80168e4:	4628      	mov	r0, r5
 80168e6:	f7e9 fc8b 	bl	8000200 <memchr>
 80168ea:	b108      	cbz	r0, 80168f0 <_printf_i+0x1bc>
 80168ec:	1b40      	subs	r0, r0, r5
 80168ee:	6060      	str	r0, [r4, #4]
 80168f0:	6863      	ldr	r3, [r4, #4]
 80168f2:	6123      	str	r3, [r4, #16]
 80168f4:	2300      	movs	r3, #0
 80168f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168fa:	e7a7      	b.n	801684c <_printf_i+0x118>
 80168fc:	6923      	ldr	r3, [r4, #16]
 80168fe:	462a      	mov	r2, r5
 8016900:	4639      	mov	r1, r7
 8016902:	4630      	mov	r0, r6
 8016904:	47c0      	blx	r8
 8016906:	3001      	adds	r0, #1
 8016908:	d0aa      	beq.n	8016860 <_printf_i+0x12c>
 801690a:	6823      	ldr	r3, [r4, #0]
 801690c:	079b      	lsls	r3, r3, #30
 801690e:	d413      	bmi.n	8016938 <_printf_i+0x204>
 8016910:	68e0      	ldr	r0, [r4, #12]
 8016912:	9b03      	ldr	r3, [sp, #12]
 8016914:	4298      	cmp	r0, r3
 8016916:	bfb8      	it	lt
 8016918:	4618      	movlt	r0, r3
 801691a:	e7a3      	b.n	8016864 <_printf_i+0x130>
 801691c:	2301      	movs	r3, #1
 801691e:	464a      	mov	r2, r9
 8016920:	4639      	mov	r1, r7
 8016922:	4630      	mov	r0, r6
 8016924:	47c0      	blx	r8
 8016926:	3001      	adds	r0, #1
 8016928:	d09a      	beq.n	8016860 <_printf_i+0x12c>
 801692a:	3501      	adds	r5, #1
 801692c:	68e3      	ldr	r3, [r4, #12]
 801692e:	9a03      	ldr	r2, [sp, #12]
 8016930:	1a9b      	subs	r3, r3, r2
 8016932:	42ab      	cmp	r3, r5
 8016934:	dcf2      	bgt.n	801691c <_printf_i+0x1e8>
 8016936:	e7eb      	b.n	8016910 <_printf_i+0x1dc>
 8016938:	2500      	movs	r5, #0
 801693a:	f104 0919 	add.w	r9, r4, #25
 801693e:	e7f5      	b.n	801692c <_printf_i+0x1f8>
 8016940:	2b00      	cmp	r3, #0
 8016942:	d1ac      	bne.n	801689e <_printf_i+0x16a>
 8016944:	7803      	ldrb	r3, [r0, #0]
 8016946:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801694a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801694e:	e76c      	b.n	801682a <_printf_i+0xf6>
 8016950:	0801adbb 	.word	0x0801adbb
 8016954:	0801adcc 	.word	0x0801adcc

08016958 <_scanf_float>:
 8016958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801695c:	469a      	mov	sl, r3
 801695e:	688b      	ldr	r3, [r1, #8]
 8016960:	4616      	mov	r6, r2
 8016962:	1e5a      	subs	r2, r3, #1
 8016964:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016968:	b087      	sub	sp, #28
 801696a:	bf83      	ittte	hi
 801696c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016970:	189b      	addhi	r3, r3, r2
 8016972:	9301      	strhi	r3, [sp, #4]
 8016974:	2300      	movls	r3, #0
 8016976:	bf86      	itte	hi
 8016978:	f240 135d 	movwhi	r3, #349	; 0x15d
 801697c:	608b      	strhi	r3, [r1, #8]
 801697e:	9301      	strls	r3, [sp, #4]
 8016980:	680b      	ldr	r3, [r1, #0]
 8016982:	4688      	mov	r8, r1
 8016984:	f04f 0b00 	mov.w	fp, #0
 8016988:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801698c:	f848 3b1c 	str.w	r3, [r8], #28
 8016990:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016994:	4607      	mov	r7, r0
 8016996:	460c      	mov	r4, r1
 8016998:	4645      	mov	r5, r8
 801699a:	465a      	mov	r2, fp
 801699c:	46d9      	mov	r9, fp
 801699e:	f8cd b008 	str.w	fp, [sp, #8]
 80169a2:	68a1      	ldr	r1, [r4, #8]
 80169a4:	b181      	cbz	r1, 80169c8 <_scanf_float+0x70>
 80169a6:	6833      	ldr	r3, [r6, #0]
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	2b49      	cmp	r3, #73	; 0x49
 80169ac:	d071      	beq.n	8016a92 <_scanf_float+0x13a>
 80169ae:	d84d      	bhi.n	8016a4c <_scanf_float+0xf4>
 80169b0:	2b39      	cmp	r3, #57	; 0x39
 80169b2:	d840      	bhi.n	8016a36 <_scanf_float+0xde>
 80169b4:	2b31      	cmp	r3, #49	; 0x31
 80169b6:	f080 8088 	bcs.w	8016aca <_scanf_float+0x172>
 80169ba:	2b2d      	cmp	r3, #45	; 0x2d
 80169bc:	f000 8090 	beq.w	8016ae0 <_scanf_float+0x188>
 80169c0:	d815      	bhi.n	80169ee <_scanf_float+0x96>
 80169c2:	2b2b      	cmp	r3, #43	; 0x2b
 80169c4:	f000 808c 	beq.w	8016ae0 <_scanf_float+0x188>
 80169c8:	f1b9 0f00 	cmp.w	r9, #0
 80169cc:	d003      	beq.n	80169d6 <_scanf_float+0x7e>
 80169ce:	6823      	ldr	r3, [r4, #0]
 80169d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80169d4:	6023      	str	r3, [r4, #0]
 80169d6:	3a01      	subs	r2, #1
 80169d8:	2a01      	cmp	r2, #1
 80169da:	f200 80ea 	bhi.w	8016bb2 <_scanf_float+0x25a>
 80169de:	4545      	cmp	r5, r8
 80169e0:	f200 80dc 	bhi.w	8016b9c <_scanf_float+0x244>
 80169e4:	2601      	movs	r6, #1
 80169e6:	4630      	mov	r0, r6
 80169e8:	b007      	add	sp, #28
 80169ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ee:	2b2e      	cmp	r3, #46	; 0x2e
 80169f0:	f000 809f 	beq.w	8016b32 <_scanf_float+0x1da>
 80169f4:	2b30      	cmp	r3, #48	; 0x30
 80169f6:	d1e7      	bne.n	80169c8 <_scanf_float+0x70>
 80169f8:	6820      	ldr	r0, [r4, #0]
 80169fa:	f410 7f80 	tst.w	r0, #256	; 0x100
 80169fe:	d064      	beq.n	8016aca <_scanf_float+0x172>
 8016a00:	9b01      	ldr	r3, [sp, #4]
 8016a02:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016a06:	6020      	str	r0, [r4, #0]
 8016a08:	f109 0901 	add.w	r9, r9, #1
 8016a0c:	b11b      	cbz	r3, 8016a16 <_scanf_float+0xbe>
 8016a0e:	3b01      	subs	r3, #1
 8016a10:	3101      	adds	r1, #1
 8016a12:	9301      	str	r3, [sp, #4]
 8016a14:	60a1      	str	r1, [r4, #8]
 8016a16:	68a3      	ldr	r3, [r4, #8]
 8016a18:	3b01      	subs	r3, #1
 8016a1a:	60a3      	str	r3, [r4, #8]
 8016a1c:	6923      	ldr	r3, [r4, #16]
 8016a1e:	3301      	adds	r3, #1
 8016a20:	6123      	str	r3, [r4, #16]
 8016a22:	6873      	ldr	r3, [r6, #4]
 8016a24:	3b01      	subs	r3, #1
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	6073      	str	r3, [r6, #4]
 8016a2a:	f340 80ac 	ble.w	8016b86 <_scanf_float+0x22e>
 8016a2e:	6833      	ldr	r3, [r6, #0]
 8016a30:	3301      	adds	r3, #1
 8016a32:	6033      	str	r3, [r6, #0]
 8016a34:	e7b5      	b.n	80169a2 <_scanf_float+0x4a>
 8016a36:	2b45      	cmp	r3, #69	; 0x45
 8016a38:	f000 8085 	beq.w	8016b46 <_scanf_float+0x1ee>
 8016a3c:	2b46      	cmp	r3, #70	; 0x46
 8016a3e:	d06a      	beq.n	8016b16 <_scanf_float+0x1be>
 8016a40:	2b41      	cmp	r3, #65	; 0x41
 8016a42:	d1c1      	bne.n	80169c8 <_scanf_float+0x70>
 8016a44:	2a01      	cmp	r2, #1
 8016a46:	d1bf      	bne.n	80169c8 <_scanf_float+0x70>
 8016a48:	2202      	movs	r2, #2
 8016a4a:	e046      	b.n	8016ada <_scanf_float+0x182>
 8016a4c:	2b65      	cmp	r3, #101	; 0x65
 8016a4e:	d07a      	beq.n	8016b46 <_scanf_float+0x1ee>
 8016a50:	d818      	bhi.n	8016a84 <_scanf_float+0x12c>
 8016a52:	2b54      	cmp	r3, #84	; 0x54
 8016a54:	d066      	beq.n	8016b24 <_scanf_float+0x1cc>
 8016a56:	d811      	bhi.n	8016a7c <_scanf_float+0x124>
 8016a58:	2b4e      	cmp	r3, #78	; 0x4e
 8016a5a:	d1b5      	bne.n	80169c8 <_scanf_float+0x70>
 8016a5c:	2a00      	cmp	r2, #0
 8016a5e:	d146      	bne.n	8016aee <_scanf_float+0x196>
 8016a60:	f1b9 0f00 	cmp.w	r9, #0
 8016a64:	d145      	bne.n	8016af2 <_scanf_float+0x19a>
 8016a66:	6821      	ldr	r1, [r4, #0]
 8016a68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016a6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016a70:	d13f      	bne.n	8016af2 <_scanf_float+0x19a>
 8016a72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016a76:	6021      	str	r1, [r4, #0]
 8016a78:	2201      	movs	r2, #1
 8016a7a:	e02e      	b.n	8016ada <_scanf_float+0x182>
 8016a7c:	2b59      	cmp	r3, #89	; 0x59
 8016a7e:	d01e      	beq.n	8016abe <_scanf_float+0x166>
 8016a80:	2b61      	cmp	r3, #97	; 0x61
 8016a82:	e7de      	b.n	8016a42 <_scanf_float+0xea>
 8016a84:	2b6e      	cmp	r3, #110	; 0x6e
 8016a86:	d0e9      	beq.n	8016a5c <_scanf_float+0x104>
 8016a88:	d815      	bhi.n	8016ab6 <_scanf_float+0x15e>
 8016a8a:	2b66      	cmp	r3, #102	; 0x66
 8016a8c:	d043      	beq.n	8016b16 <_scanf_float+0x1be>
 8016a8e:	2b69      	cmp	r3, #105	; 0x69
 8016a90:	d19a      	bne.n	80169c8 <_scanf_float+0x70>
 8016a92:	f1bb 0f00 	cmp.w	fp, #0
 8016a96:	d138      	bne.n	8016b0a <_scanf_float+0x1b2>
 8016a98:	f1b9 0f00 	cmp.w	r9, #0
 8016a9c:	d197      	bne.n	80169ce <_scanf_float+0x76>
 8016a9e:	6821      	ldr	r1, [r4, #0]
 8016aa0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016aa4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016aa8:	d195      	bne.n	80169d6 <_scanf_float+0x7e>
 8016aaa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016aae:	6021      	str	r1, [r4, #0]
 8016ab0:	f04f 0b01 	mov.w	fp, #1
 8016ab4:	e011      	b.n	8016ada <_scanf_float+0x182>
 8016ab6:	2b74      	cmp	r3, #116	; 0x74
 8016ab8:	d034      	beq.n	8016b24 <_scanf_float+0x1cc>
 8016aba:	2b79      	cmp	r3, #121	; 0x79
 8016abc:	d184      	bne.n	80169c8 <_scanf_float+0x70>
 8016abe:	f1bb 0f07 	cmp.w	fp, #7
 8016ac2:	d181      	bne.n	80169c8 <_scanf_float+0x70>
 8016ac4:	f04f 0b08 	mov.w	fp, #8
 8016ac8:	e007      	b.n	8016ada <_scanf_float+0x182>
 8016aca:	eb12 0f0b 	cmn.w	r2, fp
 8016ace:	f47f af7b 	bne.w	80169c8 <_scanf_float+0x70>
 8016ad2:	6821      	ldr	r1, [r4, #0]
 8016ad4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016ad8:	6021      	str	r1, [r4, #0]
 8016ada:	702b      	strb	r3, [r5, #0]
 8016adc:	3501      	adds	r5, #1
 8016ade:	e79a      	b.n	8016a16 <_scanf_float+0xbe>
 8016ae0:	6821      	ldr	r1, [r4, #0]
 8016ae2:	0608      	lsls	r0, r1, #24
 8016ae4:	f57f af70 	bpl.w	80169c8 <_scanf_float+0x70>
 8016ae8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016aec:	e7f4      	b.n	8016ad8 <_scanf_float+0x180>
 8016aee:	2a02      	cmp	r2, #2
 8016af0:	d047      	beq.n	8016b82 <_scanf_float+0x22a>
 8016af2:	f1bb 0f01 	cmp.w	fp, #1
 8016af6:	d003      	beq.n	8016b00 <_scanf_float+0x1a8>
 8016af8:	f1bb 0f04 	cmp.w	fp, #4
 8016afc:	f47f af64 	bne.w	80169c8 <_scanf_float+0x70>
 8016b00:	f10b 0b01 	add.w	fp, fp, #1
 8016b04:	fa5f fb8b 	uxtb.w	fp, fp
 8016b08:	e7e7      	b.n	8016ada <_scanf_float+0x182>
 8016b0a:	f1bb 0f03 	cmp.w	fp, #3
 8016b0e:	d0f7      	beq.n	8016b00 <_scanf_float+0x1a8>
 8016b10:	f1bb 0f05 	cmp.w	fp, #5
 8016b14:	e7f2      	b.n	8016afc <_scanf_float+0x1a4>
 8016b16:	f1bb 0f02 	cmp.w	fp, #2
 8016b1a:	f47f af55 	bne.w	80169c8 <_scanf_float+0x70>
 8016b1e:	f04f 0b03 	mov.w	fp, #3
 8016b22:	e7da      	b.n	8016ada <_scanf_float+0x182>
 8016b24:	f1bb 0f06 	cmp.w	fp, #6
 8016b28:	f47f af4e 	bne.w	80169c8 <_scanf_float+0x70>
 8016b2c:	f04f 0b07 	mov.w	fp, #7
 8016b30:	e7d3      	b.n	8016ada <_scanf_float+0x182>
 8016b32:	6821      	ldr	r1, [r4, #0]
 8016b34:	0588      	lsls	r0, r1, #22
 8016b36:	f57f af47 	bpl.w	80169c8 <_scanf_float+0x70>
 8016b3a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016b3e:	6021      	str	r1, [r4, #0]
 8016b40:	f8cd 9008 	str.w	r9, [sp, #8]
 8016b44:	e7c9      	b.n	8016ada <_scanf_float+0x182>
 8016b46:	6821      	ldr	r1, [r4, #0]
 8016b48:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016b4c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016b50:	d006      	beq.n	8016b60 <_scanf_float+0x208>
 8016b52:	0548      	lsls	r0, r1, #21
 8016b54:	f57f af38 	bpl.w	80169c8 <_scanf_float+0x70>
 8016b58:	f1b9 0f00 	cmp.w	r9, #0
 8016b5c:	f43f af3b 	beq.w	80169d6 <_scanf_float+0x7e>
 8016b60:	0588      	lsls	r0, r1, #22
 8016b62:	bf58      	it	pl
 8016b64:	9802      	ldrpl	r0, [sp, #8]
 8016b66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016b6a:	bf58      	it	pl
 8016b6c:	eba9 0000 	subpl.w	r0, r9, r0
 8016b70:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016b74:	bf58      	it	pl
 8016b76:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016b7a:	6021      	str	r1, [r4, #0]
 8016b7c:	f04f 0900 	mov.w	r9, #0
 8016b80:	e7ab      	b.n	8016ada <_scanf_float+0x182>
 8016b82:	2203      	movs	r2, #3
 8016b84:	e7a9      	b.n	8016ada <_scanf_float+0x182>
 8016b86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016b8a:	9205      	str	r2, [sp, #20]
 8016b8c:	4631      	mov	r1, r6
 8016b8e:	4638      	mov	r0, r7
 8016b90:	4798      	blx	r3
 8016b92:	9a05      	ldr	r2, [sp, #20]
 8016b94:	2800      	cmp	r0, #0
 8016b96:	f43f af04 	beq.w	80169a2 <_scanf_float+0x4a>
 8016b9a:	e715      	b.n	80169c8 <_scanf_float+0x70>
 8016b9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ba0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016ba4:	4632      	mov	r2, r6
 8016ba6:	4638      	mov	r0, r7
 8016ba8:	4798      	blx	r3
 8016baa:	6923      	ldr	r3, [r4, #16]
 8016bac:	3b01      	subs	r3, #1
 8016bae:	6123      	str	r3, [r4, #16]
 8016bb0:	e715      	b.n	80169de <_scanf_float+0x86>
 8016bb2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016bb6:	2b06      	cmp	r3, #6
 8016bb8:	d80a      	bhi.n	8016bd0 <_scanf_float+0x278>
 8016bba:	f1bb 0f02 	cmp.w	fp, #2
 8016bbe:	d968      	bls.n	8016c92 <_scanf_float+0x33a>
 8016bc0:	f1ab 0b03 	sub.w	fp, fp, #3
 8016bc4:	fa5f fb8b 	uxtb.w	fp, fp
 8016bc8:	eba5 0b0b 	sub.w	fp, r5, fp
 8016bcc:	455d      	cmp	r5, fp
 8016bce:	d14b      	bne.n	8016c68 <_scanf_float+0x310>
 8016bd0:	6823      	ldr	r3, [r4, #0]
 8016bd2:	05da      	lsls	r2, r3, #23
 8016bd4:	d51f      	bpl.n	8016c16 <_scanf_float+0x2be>
 8016bd6:	055b      	lsls	r3, r3, #21
 8016bd8:	d468      	bmi.n	8016cac <_scanf_float+0x354>
 8016bda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016bde:	6923      	ldr	r3, [r4, #16]
 8016be0:	2965      	cmp	r1, #101	; 0x65
 8016be2:	f103 33ff 	add.w	r3, r3, #4294967295
 8016be6:	f105 3bff 	add.w	fp, r5, #4294967295
 8016bea:	6123      	str	r3, [r4, #16]
 8016bec:	d00d      	beq.n	8016c0a <_scanf_float+0x2b2>
 8016bee:	2945      	cmp	r1, #69	; 0x45
 8016bf0:	d00b      	beq.n	8016c0a <_scanf_float+0x2b2>
 8016bf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bf6:	4632      	mov	r2, r6
 8016bf8:	4638      	mov	r0, r7
 8016bfa:	4798      	blx	r3
 8016bfc:	6923      	ldr	r3, [r4, #16]
 8016bfe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016c02:	3b01      	subs	r3, #1
 8016c04:	f1a5 0b02 	sub.w	fp, r5, #2
 8016c08:	6123      	str	r3, [r4, #16]
 8016c0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c0e:	4632      	mov	r2, r6
 8016c10:	4638      	mov	r0, r7
 8016c12:	4798      	blx	r3
 8016c14:	465d      	mov	r5, fp
 8016c16:	6826      	ldr	r6, [r4, #0]
 8016c18:	f016 0610 	ands.w	r6, r6, #16
 8016c1c:	d17a      	bne.n	8016d14 <_scanf_float+0x3bc>
 8016c1e:	702e      	strb	r6, [r5, #0]
 8016c20:	6823      	ldr	r3, [r4, #0]
 8016c22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c2a:	d142      	bne.n	8016cb2 <_scanf_float+0x35a>
 8016c2c:	9b02      	ldr	r3, [sp, #8]
 8016c2e:	eba9 0303 	sub.w	r3, r9, r3
 8016c32:	425a      	negs	r2, r3
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d149      	bne.n	8016ccc <_scanf_float+0x374>
 8016c38:	2200      	movs	r2, #0
 8016c3a:	4641      	mov	r1, r8
 8016c3c:	4638      	mov	r0, r7
 8016c3e:	f000 ffcf 	bl	8017be0 <_strtod_r>
 8016c42:	6825      	ldr	r5, [r4, #0]
 8016c44:	f8da 3000 	ldr.w	r3, [sl]
 8016c48:	f015 0f02 	tst.w	r5, #2
 8016c4c:	f103 0204 	add.w	r2, r3, #4
 8016c50:	ec59 8b10 	vmov	r8, r9, d0
 8016c54:	f8ca 2000 	str.w	r2, [sl]
 8016c58:	d043      	beq.n	8016ce2 <_scanf_float+0x38a>
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	e9c3 8900 	strd	r8, r9, [r3]
 8016c60:	68e3      	ldr	r3, [r4, #12]
 8016c62:	3301      	adds	r3, #1
 8016c64:	60e3      	str	r3, [r4, #12]
 8016c66:	e6be      	b.n	80169e6 <_scanf_float+0x8e>
 8016c68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c70:	4632      	mov	r2, r6
 8016c72:	4638      	mov	r0, r7
 8016c74:	4798      	blx	r3
 8016c76:	6923      	ldr	r3, [r4, #16]
 8016c78:	3b01      	subs	r3, #1
 8016c7a:	6123      	str	r3, [r4, #16]
 8016c7c:	e7a6      	b.n	8016bcc <_scanf_float+0x274>
 8016c7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c82:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c86:	4632      	mov	r2, r6
 8016c88:	4638      	mov	r0, r7
 8016c8a:	4798      	blx	r3
 8016c8c:	6923      	ldr	r3, [r4, #16]
 8016c8e:	3b01      	subs	r3, #1
 8016c90:	6123      	str	r3, [r4, #16]
 8016c92:	4545      	cmp	r5, r8
 8016c94:	d8f3      	bhi.n	8016c7e <_scanf_float+0x326>
 8016c96:	e6a5      	b.n	80169e4 <_scanf_float+0x8c>
 8016c98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016ca0:	4632      	mov	r2, r6
 8016ca2:	4638      	mov	r0, r7
 8016ca4:	4798      	blx	r3
 8016ca6:	6923      	ldr	r3, [r4, #16]
 8016ca8:	3b01      	subs	r3, #1
 8016caa:	6123      	str	r3, [r4, #16]
 8016cac:	4545      	cmp	r5, r8
 8016cae:	d8f3      	bhi.n	8016c98 <_scanf_float+0x340>
 8016cb0:	e698      	b.n	80169e4 <_scanf_float+0x8c>
 8016cb2:	9b03      	ldr	r3, [sp, #12]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d0bf      	beq.n	8016c38 <_scanf_float+0x2e0>
 8016cb8:	9904      	ldr	r1, [sp, #16]
 8016cba:	230a      	movs	r3, #10
 8016cbc:	4632      	mov	r2, r6
 8016cbe:	3101      	adds	r1, #1
 8016cc0:	4638      	mov	r0, r7
 8016cc2:	f001 f819 	bl	8017cf8 <_strtol_r>
 8016cc6:	9b03      	ldr	r3, [sp, #12]
 8016cc8:	9d04      	ldr	r5, [sp, #16]
 8016cca:	1ac2      	subs	r2, r0, r3
 8016ccc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016cd0:	429d      	cmp	r5, r3
 8016cd2:	bf28      	it	cs
 8016cd4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016cd8:	490f      	ldr	r1, [pc, #60]	; (8016d18 <_scanf_float+0x3c0>)
 8016cda:	4628      	mov	r0, r5
 8016cdc:	f000 f946 	bl	8016f6c <siprintf>
 8016ce0:	e7aa      	b.n	8016c38 <_scanf_float+0x2e0>
 8016ce2:	f015 0504 	ands.w	r5, r5, #4
 8016ce6:	d1b8      	bne.n	8016c5a <_scanf_float+0x302>
 8016ce8:	681f      	ldr	r7, [r3, #0]
 8016cea:	ee10 2a10 	vmov	r2, s0
 8016cee:	464b      	mov	r3, r9
 8016cf0:	ee10 0a10 	vmov	r0, s0
 8016cf4:	4649      	mov	r1, r9
 8016cf6:	f7e9 ff29 	bl	8000b4c <__aeabi_dcmpun>
 8016cfa:	b128      	cbz	r0, 8016d08 <_scanf_float+0x3b0>
 8016cfc:	4628      	mov	r0, r5
 8016cfe:	f000 f92f 	bl	8016f60 <nanf>
 8016d02:	ed87 0a00 	vstr	s0, [r7]
 8016d06:	e7ab      	b.n	8016c60 <_scanf_float+0x308>
 8016d08:	4640      	mov	r0, r8
 8016d0a:	4649      	mov	r1, r9
 8016d0c:	f7e9 ff7c 	bl	8000c08 <__aeabi_d2f>
 8016d10:	6038      	str	r0, [r7, #0]
 8016d12:	e7a5      	b.n	8016c60 <_scanf_float+0x308>
 8016d14:	2600      	movs	r6, #0
 8016d16:	e666      	b.n	80169e6 <_scanf_float+0x8e>
 8016d18:	0801addd 	.word	0x0801addd

08016d1c <_puts_r>:
 8016d1c:	b570      	push	{r4, r5, r6, lr}
 8016d1e:	460e      	mov	r6, r1
 8016d20:	4605      	mov	r5, r0
 8016d22:	b118      	cbz	r0, 8016d2c <_puts_r+0x10>
 8016d24:	6983      	ldr	r3, [r0, #24]
 8016d26:	b90b      	cbnz	r3, 8016d2c <_puts_r+0x10>
 8016d28:	f001 fff6 	bl	8018d18 <__sinit>
 8016d2c:	69ab      	ldr	r3, [r5, #24]
 8016d2e:	68ac      	ldr	r4, [r5, #8]
 8016d30:	b913      	cbnz	r3, 8016d38 <_puts_r+0x1c>
 8016d32:	4628      	mov	r0, r5
 8016d34:	f001 fff0 	bl	8018d18 <__sinit>
 8016d38:	4b23      	ldr	r3, [pc, #140]	; (8016dc8 <_puts_r+0xac>)
 8016d3a:	429c      	cmp	r4, r3
 8016d3c:	d117      	bne.n	8016d6e <_puts_r+0x52>
 8016d3e:	686c      	ldr	r4, [r5, #4]
 8016d40:	89a3      	ldrh	r3, [r4, #12]
 8016d42:	071b      	lsls	r3, r3, #28
 8016d44:	d51d      	bpl.n	8016d82 <_puts_r+0x66>
 8016d46:	6923      	ldr	r3, [r4, #16]
 8016d48:	b1db      	cbz	r3, 8016d82 <_puts_r+0x66>
 8016d4a:	3e01      	subs	r6, #1
 8016d4c:	68a3      	ldr	r3, [r4, #8]
 8016d4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d52:	3b01      	subs	r3, #1
 8016d54:	60a3      	str	r3, [r4, #8]
 8016d56:	b9e9      	cbnz	r1, 8016d94 <_puts_r+0x78>
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	da2e      	bge.n	8016dba <_puts_r+0x9e>
 8016d5c:	4622      	mov	r2, r4
 8016d5e:	210a      	movs	r1, #10
 8016d60:	4628      	mov	r0, r5
 8016d62:	f000 ffdb 	bl	8017d1c <__swbuf_r>
 8016d66:	3001      	adds	r0, #1
 8016d68:	d011      	beq.n	8016d8e <_puts_r+0x72>
 8016d6a:	200a      	movs	r0, #10
 8016d6c:	e011      	b.n	8016d92 <_puts_r+0x76>
 8016d6e:	4b17      	ldr	r3, [pc, #92]	; (8016dcc <_puts_r+0xb0>)
 8016d70:	429c      	cmp	r4, r3
 8016d72:	d101      	bne.n	8016d78 <_puts_r+0x5c>
 8016d74:	68ac      	ldr	r4, [r5, #8]
 8016d76:	e7e3      	b.n	8016d40 <_puts_r+0x24>
 8016d78:	4b15      	ldr	r3, [pc, #84]	; (8016dd0 <_puts_r+0xb4>)
 8016d7a:	429c      	cmp	r4, r3
 8016d7c:	bf08      	it	eq
 8016d7e:	68ec      	ldreq	r4, [r5, #12]
 8016d80:	e7de      	b.n	8016d40 <_puts_r+0x24>
 8016d82:	4621      	mov	r1, r4
 8016d84:	4628      	mov	r0, r5
 8016d86:	f001 f81b 	bl	8017dc0 <__swsetup_r>
 8016d8a:	2800      	cmp	r0, #0
 8016d8c:	d0dd      	beq.n	8016d4a <_puts_r+0x2e>
 8016d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8016d92:	bd70      	pop	{r4, r5, r6, pc}
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	da04      	bge.n	8016da2 <_puts_r+0x86>
 8016d98:	69a2      	ldr	r2, [r4, #24]
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	dc06      	bgt.n	8016dac <_puts_r+0x90>
 8016d9e:	290a      	cmp	r1, #10
 8016da0:	d004      	beq.n	8016dac <_puts_r+0x90>
 8016da2:	6823      	ldr	r3, [r4, #0]
 8016da4:	1c5a      	adds	r2, r3, #1
 8016da6:	6022      	str	r2, [r4, #0]
 8016da8:	7019      	strb	r1, [r3, #0]
 8016daa:	e7cf      	b.n	8016d4c <_puts_r+0x30>
 8016dac:	4622      	mov	r2, r4
 8016dae:	4628      	mov	r0, r5
 8016db0:	f000 ffb4 	bl	8017d1c <__swbuf_r>
 8016db4:	3001      	adds	r0, #1
 8016db6:	d1c9      	bne.n	8016d4c <_puts_r+0x30>
 8016db8:	e7e9      	b.n	8016d8e <_puts_r+0x72>
 8016dba:	6823      	ldr	r3, [r4, #0]
 8016dbc:	200a      	movs	r0, #10
 8016dbe:	1c5a      	adds	r2, r3, #1
 8016dc0:	6022      	str	r2, [r4, #0]
 8016dc2:	7018      	strb	r0, [r3, #0]
 8016dc4:	e7e5      	b.n	8016d92 <_puts_r+0x76>
 8016dc6:	bf00      	nop
 8016dc8:	0801ae68 	.word	0x0801ae68
 8016dcc:	0801ae88 	.word	0x0801ae88
 8016dd0:	0801ae48 	.word	0x0801ae48

08016dd4 <puts>:
 8016dd4:	4b02      	ldr	r3, [pc, #8]	; (8016de0 <puts+0xc>)
 8016dd6:	4601      	mov	r1, r0
 8016dd8:	6818      	ldr	r0, [r3, #0]
 8016dda:	f7ff bf9f 	b.w	8016d1c <_puts_r>
 8016dde:	bf00      	nop
 8016de0:	200000c4 	.word	0x200000c4

08016de4 <_sbrk_r>:
 8016de4:	b538      	push	{r3, r4, r5, lr}
 8016de6:	4c06      	ldr	r4, [pc, #24]	; (8016e00 <_sbrk_r+0x1c>)
 8016de8:	2300      	movs	r3, #0
 8016dea:	4605      	mov	r5, r0
 8016dec:	4608      	mov	r0, r1
 8016dee:	6023      	str	r3, [r4, #0]
 8016df0:	f7f1 fa28 	bl	8008244 <_sbrk>
 8016df4:	1c43      	adds	r3, r0, #1
 8016df6:	d102      	bne.n	8016dfe <_sbrk_r+0x1a>
 8016df8:	6823      	ldr	r3, [r4, #0]
 8016dfa:	b103      	cbz	r3, 8016dfe <_sbrk_r+0x1a>
 8016dfc:	602b      	str	r3, [r5, #0]
 8016dfe:	bd38      	pop	{r3, r4, r5, pc}
 8016e00:	20002514 	.word	0x20002514

08016e04 <setvbuf>:
 8016e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e08:	461d      	mov	r5, r3
 8016e0a:	4b51      	ldr	r3, [pc, #324]	; (8016f50 <setvbuf+0x14c>)
 8016e0c:	681e      	ldr	r6, [r3, #0]
 8016e0e:	4604      	mov	r4, r0
 8016e10:	460f      	mov	r7, r1
 8016e12:	4690      	mov	r8, r2
 8016e14:	b126      	cbz	r6, 8016e20 <setvbuf+0x1c>
 8016e16:	69b3      	ldr	r3, [r6, #24]
 8016e18:	b913      	cbnz	r3, 8016e20 <setvbuf+0x1c>
 8016e1a:	4630      	mov	r0, r6
 8016e1c:	f001 ff7c 	bl	8018d18 <__sinit>
 8016e20:	4b4c      	ldr	r3, [pc, #304]	; (8016f54 <setvbuf+0x150>)
 8016e22:	429c      	cmp	r4, r3
 8016e24:	d152      	bne.n	8016ecc <setvbuf+0xc8>
 8016e26:	6874      	ldr	r4, [r6, #4]
 8016e28:	f1b8 0f02 	cmp.w	r8, #2
 8016e2c:	d006      	beq.n	8016e3c <setvbuf+0x38>
 8016e2e:	f1b8 0f01 	cmp.w	r8, #1
 8016e32:	f200 8089 	bhi.w	8016f48 <setvbuf+0x144>
 8016e36:	2d00      	cmp	r5, #0
 8016e38:	f2c0 8086 	blt.w	8016f48 <setvbuf+0x144>
 8016e3c:	4621      	mov	r1, r4
 8016e3e:	4630      	mov	r0, r6
 8016e40:	f001 ff00 	bl	8018c44 <_fflush_r>
 8016e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e46:	b141      	cbz	r1, 8016e5a <setvbuf+0x56>
 8016e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e4c:	4299      	cmp	r1, r3
 8016e4e:	d002      	beq.n	8016e56 <setvbuf+0x52>
 8016e50:	4630      	mov	r0, r6
 8016e52:	f7fe ff3d 	bl	8015cd0 <_free_r>
 8016e56:	2300      	movs	r3, #0
 8016e58:	6363      	str	r3, [r4, #52]	; 0x34
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	61a3      	str	r3, [r4, #24]
 8016e5e:	6063      	str	r3, [r4, #4]
 8016e60:	89a3      	ldrh	r3, [r4, #12]
 8016e62:	061b      	lsls	r3, r3, #24
 8016e64:	d503      	bpl.n	8016e6e <setvbuf+0x6a>
 8016e66:	6921      	ldr	r1, [r4, #16]
 8016e68:	4630      	mov	r0, r6
 8016e6a:	f7fe ff31 	bl	8015cd0 <_free_r>
 8016e6e:	89a3      	ldrh	r3, [r4, #12]
 8016e70:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8016e74:	f023 0303 	bic.w	r3, r3, #3
 8016e78:	f1b8 0f02 	cmp.w	r8, #2
 8016e7c:	81a3      	strh	r3, [r4, #12]
 8016e7e:	d05d      	beq.n	8016f3c <setvbuf+0x138>
 8016e80:	ab01      	add	r3, sp, #4
 8016e82:	466a      	mov	r2, sp
 8016e84:	4621      	mov	r1, r4
 8016e86:	4630      	mov	r0, r6
 8016e88:	f002 fb0a 	bl	80194a0 <__swhatbuf_r>
 8016e8c:	89a3      	ldrh	r3, [r4, #12]
 8016e8e:	4318      	orrs	r0, r3
 8016e90:	81a0      	strh	r0, [r4, #12]
 8016e92:	bb2d      	cbnz	r5, 8016ee0 <setvbuf+0xdc>
 8016e94:	9d00      	ldr	r5, [sp, #0]
 8016e96:	4628      	mov	r0, r5
 8016e98:	f7fe fef6 	bl	8015c88 <malloc>
 8016e9c:	4607      	mov	r7, r0
 8016e9e:	2800      	cmp	r0, #0
 8016ea0:	d14e      	bne.n	8016f40 <setvbuf+0x13c>
 8016ea2:	f8dd 9000 	ldr.w	r9, [sp]
 8016ea6:	45a9      	cmp	r9, r5
 8016ea8:	d13c      	bne.n	8016f24 <setvbuf+0x120>
 8016eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8016eae:	89a3      	ldrh	r3, [r4, #12]
 8016eb0:	f043 0302 	orr.w	r3, r3, #2
 8016eb4:	81a3      	strh	r3, [r4, #12]
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	60a3      	str	r3, [r4, #8]
 8016eba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016ebe:	6023      	str	r3, [r4, #0]
 8016ec0:	6123      	str	r3, [r4, #16]
 8016ec2:	2301      	movs	r3, #1
 8016ec4:	6163      	str	r3, [r4, #20]
 8016ec6:	b003      	add	sp, #12
 8016ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ecc:	4b22      	ldr	r3, [pc, #136]	; (8016f58 <setvbuf+0x154>)
 8016ece:	429c      	cmp	r4, r3
 8016ed0:	d101      	bne.n	8016ed6 <setvbuf+0xd2>
 8016ed2:	68b4      	ldr	r4, [r6, #8]
 8016ed4:	e7a8      	b.n	8016e28 <setvbuf+0x24>
 8016ed6:	4b21      	ldr	r3, [pc, #132]	; (8016f5c <setvbuf+0x158>)
 8016ed8:	429c      	cmp	r4, r3
 8016eda:	bf08      	it	eq
 8016edc:	68f4      	ldreq	r4, [r6, #12]
 8016ede:	e7a3      	b.n	8016e28 <setvbuf+0x24>
 8016ee0:	2f00      	cmp	r7, #0
 8016ee2:	d0d8      	beq.n	8016e96 <setvbuf+0x92>
 8016ee4:	69b3      	ldr	r3, [r6, #24]
 8016ee6:	b913      	cbnz	r3, 8016eee <setvbuf+0xea>
 8016ee8:	4630      	mov	r0, r6
 8016eea:	f001 ff15 	bl	8018d18 <__sinit>
 8016eee:	f1b8 0f01 	cmp.w	r8, #1
 8016ef2:	bf08      	it	eq
 8016ef4:	89a3      	ldrheq	r3, [r4, #12]
 8016ef6:	6027      	str	r7, [r4, #0]
 8016ef8:	bf04      	itt	eq
 8016efa:	f043 0301 	orreq.w	r3, r3, #1
 8016efe:	81a3      	strheq	r3, [r4, #12]
 8016f00:	89a3      	ldrh	r3, [r4, #12]
 8016f02:	f013 0008 	ands.w	r0, r3, #8
 8016f06:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8016f0a:	d01b      	beq.n	8016f44 <setvbuf+0x140>
 8016f0c:	f013 0001 	ands.w	r0, r3, #1
 8016f10:	bf18      	it	ne
 8016f12:	426d      	negne	r5, r5
 8016f14:	f04f 0300 	mov.w	r3, #0
 8016f18:	bf1d      	ittte	ne
 8016f1a:	60a3      	strne	r3, [r4, #8]
 8016f1c:	61a5      	strne	r5, [r4, #24]
 8016f1e:	4618      	movne	r0, r3
 8016f20:	60a5      	streq	r5, [r4, #8]
 8016f22:	e7d0      	b.n	8016ec6 <setvbuf+0xc2>
 8016f24:	4648      	mov	r0, r9
 8016f26:	f7fe feaf 	bl	8015c88 <malloc>
 8016f2a:	4607      	mov	r7, r0
 8016f2c:	2800      	cmp	r0, #0
 8016f2e:	d0bc      	beq.n	8016eaa <setvbuf+0xa6>
 8016f30:	89a3      	ldrh	r3, [r4, #12]
 8016f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f36:	81a3      	strh	r3, [r4, #12]
 8016f38:	464d      	mov	r5, r9
 8016f3a:	e7d3      	b.n	8016ee4 <setvbuf+0xe0>
 8016f3c:	2000      	movs	r0, #0
 8016f3e:	e7b6      	b.n	8016eae <setvbuf+0xaa>
 8016f40:	46a9      	mov	r9, r5
 8016f42:	e7f5      	b.n	8016f30 <setvbuf+0x12c>
 8016f44:	60a0      	str	r0, [r4, #8]
 8016f46:	e7be      	b.n	8016ec6 <setvbuf+0xc2>
 8016f48:	f04f 30ff 	mov.w	r0, #4294967295
 8016f4c:	e7bb      	b.n	8016ec6 <setvbuf+0xc2>
 8016f4e:	bf00      	nop
 8016f50:	200000c4 	.word	0x200000c4
 8016f54:	0801ae68 	.word	0x0801ae68
 8016f58:	0801ae88 	.word	0x0801ae88
 8016f5c:	0801ae48 	.word	0x0801ae48

08016f60 <nanf>:
 8016f60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016f68 <nanf+0x8>
 8016f64:	4770      	bx	lr
 8016f66:	bf00      	nop
 8016f68:	7fc00000 	.word	0x7fc00000

08016f6c <siprintf>:
 8016f6c:	b40e      	push	{r1, r2, r3}
 8016f6e:	b500      	push	{lr}
 8016f70:	b09c      	sub	sp, #112	; 0x70
 8016f72:	ab1d      	add	r3, sp, #116	; 0x74
 8016f74:	9002      	str	r0, [sp, #8]
 8016f76:	9006      	str	r0, [sp, #24]
 8016f78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016f7c:	4809      	ldr	r0, [pc, #36]	; (8016fa4 <siprintf+0x38>)
 8016f7e:	9107      	str	r1, [sp, #28]
 8016f80:	9104      	str	r1, [sp, #16]
 8016f82:	4909      	ldr	r1, [pc, #36]	; (8016fa8 <siprintf+0x3c>)
 8016f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f88:	9105      	str	r1, [sp, #20]
 8016f8a:	6800      	ldr	r0, [r0, #0]
 8016f8c:	9301      	str	r3, [sp, #4]
 8016f8e:	a902      	add	r1, sp, #8
 8016f90:	f002 ffa4 	bl	8019edc <_svfiprintf_r>
 8016f94:	9b02      	ldr	r3, [sp, #8]
 8016f96:	2200      	movs	r2, #0
 8016f98:	701a      	strb	r2, [r3, #0]
 8016f9a:	b01c      	add	sp, #112	; 0x70
 8016f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016fa0:	b003      	add	sp, #12
 8016fa2:	4770      	bx	lr
 8016fa4:	200000c4 	.word	0x200000c4
 8016fa8:	ffff0208 	.word	0xffff0208

08016fac <strcpy>:
 8016fac:	4603      	mov	r3, r0
 8016fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016fb2:	f803 2b01 	strb.w	r2, [r3], #1
 8016fb6:	2a00      	cmp	r2, #0
 8016fb8:	d1f9      	bne.n	8016fae <strcpy+0x2>
 8016fba:	4770      	bx	lr

08016fbc <sulp>:
 8016fbc:	b570      	push	{r4, r5, r6, lr}
 8016fbe:	4604      	mov	r4, r0
 8016fc0:	460d      	mov	r5, r1
 8016fc2:	ec45 4b10 	vmov	d0, r4, r5
 8016fc6:	4616      	mov	r6, r2
 8016fc8:	f002 fdc6 	bl	8019b58 <__ulp>
 8016fcc:	ec51 0b10 	vmov	r0, r1, d0
 8016fd0:	b17e      	cbz	r6, 8016ff2 <sulp+0x36>
 8016fd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016fd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	dd09      	ble.n	8016ff2 <sulp+0x36>
 8016fde:	051b      	lsls	r3, r3, #20
 8016fe0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016fe4:	2400      	movs	r4, #0
 8016fe6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016fea:	4622      	mov	r2, r4
 8016fec:	462b      	mov	r3, r5
 8016fee:	f7e9 fb13 	bl	8000618 <__aeabi_dmul>
 8016ff2:	bd70      	pop	{r4, r5, r6, pc}
 8016ff4:	0000      	movs	r0, r0
	...

08016ff8 <_strtod_l>:
 8016ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ffc:	461f      	mov	r7, r3
 8016ffe:	b0a1      	sub	sp, #132	; 0x84
 8017000:	2300      	movs	r3, #0
 8017002:	4681      	mov	r9, r0
 8017004:	4638      	mov	r0, r7
 8017006:	460e      	mov	r6, r1
 8017008:	9217      	str	r2, [sp, #92]	; 0x5c
 801700a:	931c      	str	r3, [sp, #112]	; 0x70
 801700c:	f002 fa37 	bl	801947e <__localeconv_l>
 8017010:	4680      	mov	r8, r0
 8017012:	6800      	ldr	r0, [r0, #0]
 8017014:	f7e9 f8ec 	bl	80001f0 <strlen>
 8017018:	f04f 0a00 	mov.w	sl, #0
 801701c:	4604      	mov	r4, r0
 801701e:	f04f 0b00 	mov.w	fp, #0
 8017022:	961b      	str	r6, [sp, #108]	; 0x6c
 8017024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017026:	781a      	ldrb	r2, [r3, #0]
 8017028:	2a0d      	cmp	r2, #13
 801702a:	d832      	bhi.n	8017092 <_strtod_l+0x9a>
 801702c:	2a09      	cmp	r2, #9
 801702e:	d236      	bcs.n	801709e <_strtod_l+0xa6>
 8017030:	2a00      	cmp	r2, #0
 8017032:	d03e      	beq.n	80170b2 <_strtod_l+0xba>
 8017034:	2300      	movs	r3, #0
 8017036:	930d      	str	r3, [sp, #52]	; 0x34
 8017038:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801703a:	782b      	ldrb	r3, [r5, #0]
 801703c:	2b30      	cmp	r3, #48	; 0x30
 801703e:	f040 80ac 	bne.w	801719a <_strtod_l+0x1a2>
 8017042:	786b      	ldrb	r3, [r5, #1]
 8017044:	2b58      	cmp	r3, #88	; 0x58
 8017046:	d001      	beq.n	801704c <_strtod_l+0x54>
 8017048:	2b78      	cmp	r3, #120	; 0x78
 801704a:	d167      	bne.n	801711c <_strtod_l+0x124>
 801704c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801704e:	9301      	str	r3, [sp, #4]
 8017050:	ab1c      	add	r3, sp, #112	; 0x70
 8017052:	9300      	str	r3, [sp, #0]
 8017054:	9702      	str	r7, [sp, #8]
 8017056:	ab1d      	add	r3, sp, #116	; 0x74
 8017058:	4a88      	ldr	r2, [pc, #544]	; (801727c <_strtod_l+0x284>)
 801705a:	a91b      	add	r1, sp, #108	; 0x6c
 801705c:	4648      	mov	r0, r9
 801705e:	f001 ff34 	bl	8018eca <__gethex>
 8017062:	f010 0407 	ands.w	r4, r0, #7
 8017066:	4606      	mov	r6, r0
 8017068:	d005      	beq.n	8017076 <_strtod_l+0x7e>
 801706a:	2c06      	cmp	r4, #6
 801706c:	d12b      	bne.n	80170c6 <_strtod_l+0xce>
 801706e:	3501      	adds	r5, #1
 8017070:	2300      	movs	r3, #0
 8017072:	951b      	str	r5, [sp, #108]	; 0x6c
 8017074:	930d      	str	r3, [sp, #52]	; 0x34
 8017076:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017078:	2b00      	cmp	r3, #0
 801707a:	f040 859a 	bne.w	8017bb2 <_strtod_l+0xbba>
 801707e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017080:	b1e3      	cbz	r3, 80170bc <_strtod_l+0xc4>
 8017082:	4652      	mov	r2, sl
 8017084:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017088:	ec43 2b10 	vmov	d0, r2, r3
 801708c:	b021      	add	sp, #132	; 0x84
 801708e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017092:	2a2b      	cmp	r2, #43	; 0x2b
 8017094:	d015      	beq.n	80170c2 <_strtod_l+0xca>
 8017096:	2a2d      	cmp	r2, #45	; 0x2d
 8017098:	d004      	beq.n	80170a4 <_strtod_l+0xac>
 801709a:	2a20      	cmp	r2, #32
 801709c:	d1ca      	bne.n	8017034 <_strtod_l+0x3c>
 801709e:	3301      	adds	r3, #1
 80170a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80170a2:	e7bf      	b.n	8017024 <_strtod_l+0x2c>
 80170a4:	2201      	movs	r2, #1
 80170a6:	920d      	str	r2, [sp, #52]	; 0x34
 80170a8:	1c5a      	adds	r2, r3, #1
 80170aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80170ac:	785b      	ldrb	r3, [r3, #1]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d1c2      	bne.n	8017038 <_strtod_l+0x40>
 80170b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	f040 8579 	bne.w	8017bae <_strtod_l+0xbb6>
 80170bc:	4652      	mov	r2, sl
 80170be:	465b      	mov	r3, fp
 80170c0:	e7e2      	b.n	8017088 <_strtod_l+0x90>
 80170c2:	2200      	movs	r2, #0
 80170c4:	e7ef      	b.n	80170a6 <_strtod_l+0xae>
 80170c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80170c8:	b13a      	cbz	r2, 80170da <_strtod_l+0xe2>
 80170ca:	2135      	movs	r1, #53	; 0x35
 80170cc:	a81e      	add	r0, sp, #120	; 0x78
 80170ce:	f002 fe3b 	bl	8019d48 <__copybits>
 80170d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170d4:	4648      	mov	r0, r9
 80170d6:	f002 faa8 	bl	801962a <_Bfree>
 80170da:	3c01      	subs	r4, #1
 80170dc:	2c04      	cmp	r4, #4
 80170de:	d806      	bhi.n	80170ee <_strtod_l+0xf6>
 80170e0:	e8df f004 	tbb	[pc, r4]
 80170e4:	1714030a 	.word	0x1714030a
 80170e8:	0a          	.byte	0x0a
 80170e9:	00          	.byte	0x00
 80170ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80170ee:	0730      	lsls	r0, r6, #28
 80170f0:	d5c1      	bpl.n	8017076 <_strtod_l+0x7e>
 80170f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80170f6:	e7be      	b.n	8017076 <_strtod_l+0x7e>
 80170f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80170fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80170fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017102:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017106:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801710a:	e7f0      	b.n	80170ee <_strtod_l+0xf6>
 801710c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017280 <_strtod_l+0x288>
 8017110:	e7ed      	b.n	80170ee <_strtod_l+0xf6>
 8017112:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017116:	f04f 3aff 	mov.w	sl, #4294967295
 801711a:	e7e8      	b.n	80170ee <_strtod_l+0xf6>
 801711c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801711e:	1c5a      	adds	r2, r3, #1
 8017120:	921b      	str	r2, [sp, #108]	; 0x6c
 8017122:	785b      	ldrb	r3, [r3, #1]
 8017124:	2b30      	cmp	r3, #48	; 0x30
 8017126:	d0f9      	beq.n	801711c <_strtod_l+0x124>
 8017128:	2b00      	cmp	r3, #0
 801712a:	d0a4      	beq.n	8017076 <_strtod_l+0x7e>
 801712c:	2301      	movs	r3, #1
 801712e:	2500      	movs	r5, #0
 8017130:	9306      	str	r3, [sp, #24]
 8017132:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017134:	9308      	str	r3, [sp, #32]
 8017136:	9507      	str	r5, [sp, #28]
 8017138:	9505      	str	r5, [sp, #20]
 801713a:	220a      	movs	r2, #10
 801713c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801713e:	7807      	ldrb	r7, [r0, #0]
 8017140:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8017144:	b2d9      	uxtb	r1, r3
 8017146:	2909      	cmp	r1, #9
 8017148:	d929      	bls.n	801719e <_strtod_l+0x1a6>
 801714a:	4622      	mov	r2, r4
 801714c:	f8d8 1000 	ldr.w	r1, [r8]
 8017150:	f003 f843 	bl	801a1da <strncmp>
 8017154:	2800      	cmp	r0, #0
 8017156:	d031      	beq.n	80171bc <_strtod_l+0x1c4>
 8017158:	2000      	movs	r0, #0
 801715a:	9c05      	ldr	r4, [sp, #20]
 801715c:	9004      	str	r0, [sp, #16]
 801715e:	463b      	mov	r3, r7
 8017160:	4602      	mov	r2, r0
 8017162:	2b65      	cmp	r3, #101	; 0x65
 8017164:	d001      	beq.n	801716a <_strtod_l+0x172>
 8017166:	2b45      	cmp	r3, #69	; 0x45
 8017168:	d114      	bne.n	8017194 <_strtod_l+0x19c>
 801716a:	b924      	cbnz	r4, 8017176 <_strtod_l+0x17e>
 801716c:	b910      	cbnz	r0, 8017174 <_strtod_l+0x17c>
 801716e:	9b06      	ldr	r3, [sp, #24]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d09e      	beq.n	80170b2 <_strtod_l+0xba>
 8017174:	2400      	movs	r4, #0
 8017176:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017178:	1c73      	adds	r3, r6, #1
 801717a:	931b      	str	r3, [sp, #108]	; 0x6c
 801717c:	7873      	ldrb	r3, [r6, #1]
 801717e:	2b2b      	cmp	r3, #43	; 0x2b
 8017180:	d078      	beq.n	8017274 <_strtod_l+0x27c>
 8017182:	2b2d      	cmp	r3, #45	; 0x2d
 8017184:	d070      	beq.n	8017268 <_strtod_l+0x270>
 8017186:	f04f 0c00 	mov.w	ip, #0
 801718a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801718e:	2f09      	cmp	r7, #9
 8017190:	d97c      	bls.n	801728c <_strtod_l+0x294>
 8017192:	961b      	str	r6, [sp, #108]	; 0x6c
 8017194:	f04f 0e00 	mov.w	lr, #0
 8017198:	e09a      	b.n	80172d0 <_strtod_l+0x2d8>
 801719a:	2300      	movs	r3, #0
 801719c:	e7c7      	b.n	801712e <_strtod_l+0x136>
 801719e:	9905      	ldr	r1, [sp, #20]
 80171a0:	2908      	cmp	r1, #8
 80171a2:	bfdd      	ittte	le
 80171a4:	9907      	ldrle	r1, [sp, #28]
 80171a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80171aa:	9307      	strle	r3, [sp, #28]
 80171ac:	fb02 3505 	mlagt	r5, r2, r5, r3
 80171b0:	9b05      	ldr	r3, [sp, #20]
 80171b2:	3001      	adds	r0, #1
 80171b4:	3301      	adds	r3, #1
 80171b6:	9305      	str	r3, [sp, #20]
 80171b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80171ba:	e7bf      	b.n	801713c <_strtod_l+0x144>
 80171bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171be:	191a      	adds	r2, r3, r4
 80171c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80171c2:	9a05      	ldr	r2, [sp, #20]
 80171c4:	5d1b      	ldrb	r3, [r3, r4]
 80171c6:	2a00      	cmp	r2, #0
 80171c8:	d037      	beq.n	801723a <_strtod_l+0x242>
 80171ca:	9c05      	ldr	r4, [sp, #20]
 80171cc:	4602      	mov	r2, r0
 80171ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80171d2:	2909      	cmp	r1, #9
 80171d4:	d913      	bls.n	80171fe <_strtod_l+0x206>
 80171d6:	2101      	movs	r1, #1
 80171d8:	9104      	str	r1, [sp, #16]
 80171da:	e7c2      	b.n	8017162 <_strtod_l+0x16a>
 80171dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171de:	1c5a      	adds	r2, r3, #1
 80171e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80171e2:	785b      	ldrb	r3, [r3, #1]
 80171e4:	3001      	adds	r0, #1
 80171e6:	2b30      	cmp	r3, #48	; 0x30
 80171e8:	d0f8      	beq.n	80171dc <_strtod_l+0x1e4>
 80171ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80171ee:	2a08      	cmp	r2, #8
 80171f0:	f200 84e4 	bhi.w	8017bbc <_strtod_l+0xbc4>
 80171f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80171f6:	9208      	str	r2, [sp, #32]
 80171f8:	4602      	mov	r2, r0
 80171fa:	2000      	movs	r0, #0
 80171fc:	4604      	mov	r4, r0
 80171fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8017202:	f100 0101 	add.w	r1, r0, #1
 8017206:	d012      	beq.n	801722e <_strtod_l+0x236>
 8017208:	440a      	add	r2, r1
 801720a:	eb00 0c04 	add.w	ip, r0, r4
 801720e:	4621      	mov	r1, r4
 8017210:	270a      	movs	r7, #10
 8017212:	458c      	cmp	ip, r1
 8017214:	d113      	bne.n	801723e <_strtod_l+0x246>
 8017216:	1821      	adds	r1, r4, r0
 8017218:	2908      	cmp	r1, #8
 801721a:	f104 0401 	add.w	r4, r4, #1
 801721e:	4404      	add	r4, r0
 8017220:	dc19      	bgt.n	8017256 <_strtod_l+0x25e>
 8017222:	9b07      	ldr	r3, [sp, #28]
 8017224:	210a      	movs	r1, #10
 8017226:	fb01 e303 	mla	r3, r1, r3, lr
 801722a:	9307      	str	r3, [sp, #28]
 801722c:	2100      	movs	r1, #0
 801722e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017230:	1c58      	adds	r0, r3, #1
 8017232:	901b      	str	r0, [sp, #108]	; 0x6c
 8017234:	785b      	ldrb	r3, [r3, #1]
 8017236:	4608      	mov	r0, r1
 8017238:	e7c9      	b.n	80171ce <_strtod_l+0x1d6>
 801723a:	9805      	ldr	r0, [sp, #20]
 801723c:	e7d3      	b.n	80171e6 <_strtod_l+0x1ee>
 801723e:	2908      	cmp	r1, #8
 8017240:	f101 0101 	add.w	r1, r1, #1
 8017244:	dc03      	bgt.n	801724e <_strtod_l+0x256>
 8017246:	9b07      	ldr	r3, [sp, #28]
 8017248:	437b      	muls	r3, r7
 801724a:	9307      	str	r3, [sp, #28]
 801724c:	e7e1      	b.n	8017212 <_strtod_l+0x21a>
 801724e:	2910      	cmp	r1, #16
 8017250:	bfd8      	it	le
 8017252:	437d      	mulle	r5, r7
 8017254:	e7dd      	b.n	8017212 <_strtod_l+0x21a>
 8017256:	2c10      	cmp	r4, #16
 8017258:	bfdc      	itt	le
 801725a:	210a      	movle	r1, #10
 801725c:	fb01 e505 	mlale	r5, r1, r5, lr
 8017260:	e7e4      	b.n	801722c <_strtod_l+0x234>
 8017262:	2301      	movs	r3, #1
 8017264:	9304      	str	r3, [sp, #16]
 8017266:	e781      	b.n	801716c <_strtod_l+0x174>
 8017268:	f04f 0c01 	mov.w	ip, #1
 801726c:	1cb3      	adds	r3, r6, #2
 801726e:	931b      	str	r3, [sp, #108]	; 0x6c
 8017270:	78b3      	ldrb	r3, [r6, #2]
 8017272:	e78a      	b.n	801718a <_strtod_l+0x192>
 8017274:	f04f 0c00 	mov.w	ip, #0
 8017278:	e7f8      	b.n	801726c <_strtod_l+0x274>
 801727a:	bf00      	nop
 801727c:	0801ade4 	.word	0x0801ade4
 8017280:	7ff00000 	.word	0x7ff00000
 8017284:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017286:	1c5f      	adds	r7, r3, #1
 8017288:	971b      	str	r7, [sp, #108]	; 0x6c
 801728a:	785b      	ldrb	r3, [r3, #1]
 801728c:	2b30      	cmp	r3, #48	; 0x30
 801728e:	d0f9      	beq.n	8017284 <_strtod_l+0x28c>
 8017290:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8017294:	2f08      	cmp	r7, #8
 8017296:	f63f af7d 	bhi.w	8017194 <_strtod_l+0x19c>
 801729a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801729e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80172a0:	930a      	str	r3, [sp, #40]	; 0x28
 80172a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80172a4:	1c5f      	adds	r7, r3, #1
 80172a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80172a8:	785b      	ldrb	r3, [r3, #1]
 80172aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80172ae:	f1b8 0f09 	cmp.w	r8, #9
 80172b2:	d937      	bls.n	8017324 <_strtod_l+0x32c>
 80172b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80172b6:	1a7f      	subs	r7, r7, r1
 80172b8:	2f08      	cmp	r7, #8
 80172ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80172be:	dc37      	bgt.n	8017330 <_strtod_l+0x338>
 80172c0:	45be      	cmp	lr, r7
 80172c2:	bfa8      	it	ge
 80172c4:	46be      	movge	lr, r7
 80172c6:	f1bc 0f00 	cmp.w	ip, #0
 80172ca:	d001      	beq.n	80172d0 <_strtod_l+0x2d8>
 80172cc:	f1ce 0e00 	rsb	lr, lr, #0
 80172d0:	2c00      	cmp	r4, #0
 80172d2:	d151      	bne.n	8017378 <_strtod_l+0x380>
 80172d4:	2800      	cmp	r0, #0
 80172d6:	f47f aece 	bne.w	8017076 <_strtod_l+0x7e>
 80172da:	9a06      	ldr	r2, [sp, #24]
 80172dc:	2a00      	cmp	r2, #0
 80172de:	f47f aeca 	bne.w	8017076 <_strtod_l+0x7e>
 80172e2:	9a04      	ldr	r2, [sp, #16]
 80172e4:	2a00      	cmp	r2, #0
 80172e6:	f47f aee4 	bne.w	80170b2 <_strtod_l+0xba>
 80172ea:	2b4e      	cmp	r3, #78	; 0x4e
 80172ec:	d027      	beq.n	801733e <_strtod_l+0x346>
 80172ee:	dc21      	bgt.n	8017334 <_strtod_l+0x33c>
 80172f0:	2b49      	cmp	r3, #73	; 0x49
 80172f2:	f47f aede 	bne.w	80170b2 <_strtod_l+0xba>
 80172f6:	49a0      	ldr	r1, [pc, #640]	; (8017578 <_strtod_l+0x580>)
 80172f8:	a81b      	add	r0, sp, #108	; 0x6c
 80172fa:	f002 f819 	bl	8019330 <__match>
 80172fe:	2800      	cmp	r0, #0
 8017300:	f43f aed7 	beq.w	80170b2 <_strtod_l+0xba>
 8017304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017306:	499d      	ldr	r1, [pc, #628]	; (801757c <_strtod_l+0x584>)
 8017308:	3b01      	subs	r3, #1
 801730a:	a81b      	add	r0, sp, #108	; 0x6c
 801730c:	931b      	str	r3, [sp, #108]	; 0x6c
 801730e:	f002 f80f 	bl	8019330 <__match>
 8017312:	b910      	cbnz	r0, 801731a <_strtod_l+0x322>
 8017314:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017316:	3301      	adds	r3, #1
 8017318:	931b      	str	r3, [sp, #108]	; 0x6c
 801731a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017590 <_strtod_l+0x598>
 801731e:	f04f 0a00 	mov.w	sl, #0
 8017322:	e6a8      	b.n	8017076 <_strtod_l+0x7e>
 8017324:	210a      	movs	r1, #10
 8017326:	fb01 3e0e 	mla	lr, r1, lr, r3
 801732a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801732e:	e7b8      	b.n	80172a2 <_strtod_l+0x2aa>
 8017330:	46be      	mov	lr, r7
 8017332:	e7c8      	b.n	80172c6 <_strtod_l+0x2ce>
 8017334:	2b69      	cmp	r3, #105	; 0x69
 8017336:	d0de      	beq.n	80172f6 <_strtod_l+0x2fe>
 8017338:	2b6e      	cmp	r3, #110	; 0x6e
 801733a:	f47f aeba 	bne.w	80170b2 <_strtod_l+0xba>
 801733e:	4990      	ldr	r1, [pc, #576]	; (8017580 <_strtod_l+0x588>)
 8017340:	a81b      	add	r0, sp, #108	; 0x6c
 8017342:	f001 fff5 	bl	8019330 <__match>
 8017346:	2800      	cmp	r0, #0
 8017348:	f43f aeb3 	beq.w	80170b2 <_strtod_l+0xba>
 801734c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	2b28      	cmp	r3, #40	; 0x28
 8017352:	d10e      	bne.n	8017372 <_strtod_l+0x37a>
 8017354:	aa1e      	add	r2, sp, #120	; 0x78
 8017356:	498b      	ldr	r1, [pc, #556]	; (8017584 <_strtod_l+0x58c>)
 8017358:	a81b      	add	r0, sp, #108	; 0x6c
 801735a:	f001 fffd 	bl	8019358 <__hexnan>
 801735e:	2805      	cmp	r0, #5
 8017360:	d107      	bne.n	8017372 <_strtod_l+0x37a>
 8017362:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017364:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017368:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801736c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017370:	e681      	b.n	8017076 <_strtod_l+0x7e>
 8017372:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017598 <_strtod_l+0x5a0>
 8017376:	e7d2      	b.n	801731e <_strtod_l+0x326>
 8017378:	ebae 0302 	sub.w	r3, lr, r2
 801737c:	9306      	str	r3, [sp, #24]
 801737e:	9b05      	ldr	r3, [sp, #20]
 8017380:	9807      	ldr	r0, [sp, #28]
 8017382:	2b00      	cmp	r3, #0
 8017384:	bf08      	it	eq
 8017386:	4623      	moveq	r3, r4
 8017388:	2c10      	cmp	r4, #16
 801738a:	9305      	str	r3, [sp, #20]
 801738c:	46a0      	mov	r8, r4
 801738e:	bfa8      	it	ge
 8017390:	f04f 0810 	movge.w	r8, #16
 8017394:	f7e9 f8c6 	bl	8000524 <__aeabi_ui2d>
 8017398:	2c09      	cmp	r4, #9
 801739a:	4682      	mov	sl, r0
 801739c:	468b      	mov	fp, r1
 801739e:	dc13      	bgt.n	80173c8 <_strtod_l+0x3d0>
 80173a0:	9b06      	ldr	r3, [sp, #24]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	f43f ae67 	beq.w	8017076 <_strtod_l+0x7e>
 80173a8:	9b06      	ldr	r3, [sp, #24]
 80173aa:	dd7a      	ble.n	80174a2 <_strtod_l+0x4aa>
 80173ac:	2b16      	cmp	r3, #22
 80173ae:	dc61      	bgt.n	8017474 <_strtod_l+0x47c>
 80173b0:	4a75      	ldr	r2, [pc, #468]	; (8017588 <_strtod_l+0x590>)
 80173b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80173b6:	e9de 0100 	ldrd	r0, r1, [lr]
 80173ba:	4652      	mov	r2, sl
 80173bc:	465b      	mov	r3, fp
 80173be:	f7e9 f92b 	bl	8000618 <__aeabi_dmul>
 80173c2:	4682      	mov	sl, r0
 80173c4:	468b      	mov	fp, r1
 80173c6:	e656      	b.n	8017076 <_strtod_l+0x7e>
 80173c8:	4b6f      	ldr	r3, [pc, #444]	; (8017588 <_strtod_l+0x590>)
 80173ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80173ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80173d2:	f7e9 f921 	bl	8000618 <__aeabi_dmul>
 80173d6:	4606      	mov	r6, r0
 80173d8:	4628      	mov	r0, r5
 80173da:	460f      	mov	r7, r1
 80173dc:	f7e9 f8a2 	bl	8000524 <__aeabi_ui2d>
 80173e0:	4602      	mov	r2, r0
 80173e2:	460b      	mov	r3, r1
 80173e4:	4630      	mov	r0, r6
 80173e6:	4639      	mov	r1, r7
 80173e8:	f7e8 ff60 	bl	80002ac <__adddf3>
 80173ec:	2c0f      	cmp	r4, #15
 80173ee:	4682      	mov	sl, r0
 80173f0:	468b      	mov	fp, r1
 80173f2:	ddd5      	ble.n	80173a0 <_strtod_l+0x3a8>
 80173f4:	9b06      	ldr	r3, [sp, #24]
 80173f6:	eba4 0808 	sub.w	r8, r4, r8
 80173fa:	4498      	add	r8, r3
 80173fc:	f1b8 0f00 	cmp.w	r8, #0
 8017400:	f340 8096 	ble.w	8017530 <_strtod_l+0x538>
 8017404:	f018 030f 	ands.w	r3, r8, #15
 8017408:	d00a      	beq.n	8017420 <_strtod_l+0x428>
 801740a:	495f      	ldr	r1, [pc, #380]	; (8017588 <_strtod_l+0x590>)
 801740c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017410:	4652      	mov	r2, sl
 8017412:	465b      	mov	r3, fp
 8017414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017418:	f7e9 f8fe 	bl	8000618 <__aeabi_dmul>
 801741c:	4682      	mov	sl, r0
 801741e:	468b      	mov	fp, r1
 8017420:	f038 080f 	bics.w	r8, r8, #15
 8017424:	d073      	beq.n	801750e <_strtod_l+0x516>
 8017426:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801742a:	dd47      	ble.n	80174bc <_strtod_l+0x4c4>
 801742c:	2400      	movs	r4, #0
 801742e:	46a0      	mov	r8, r4
 8017430:	9407      	str	r4, [sp, #28]
 8017432:	9405      	str	r4, [sp, #20]
 8017434:	2322      	movs	r3, #34	; 0x22
 8017436:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017590 <_strtod_l+0x598>
 801743a:	f8c9 3000 	str.w	r3, [r9]
 801743e:	f04f 0a00 	mov.w	sl, #0
 8017442:	9b07      	ldr	r3, [sp, #28]
 8017444:	2b00      	cmp	r3, #0
 8017446:	f43f ae16 	beq.w	8017076 <_strtod_l+0x7e>
 801744a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801744c:	4648      	mov	r0, r9
 801744e:	f002 f8ec 	bl	801962a <_Bfree>
 8017452:	9905      	ldr	r1, [sp, #20]
 8017454:	4648      	mov	r0, r9
 8017456:	f002 f8e8 	bl	801962a <_Bfree>
 801745a:	4641      	mov	r1, r8
 801745c:	4648      	mov	r0, r9
 801745e:	f002 f8e4 	bl	801962a <_Bfree>
 8017462:	9907      	ldr	r1, [sp, #28]
 8017464:	4648      	mov	r0, r9
 8017466:	f002 f8e0 	bl	801962a <_Bfree>
 801746a:	4621      	mov	r1, r4
 801746c:	4648      	mov	r0, r9
 801746e:	f002 f8dc 	bl	801962a <_Bfree>
 8017472:	e600      	b.n	8017076 <_strtod_l+0x7e>
 8017474:	9a06      	ldr	r2, [sp, #24]
 8017476:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801747a:	4293      	cmp	r3, r2
 801747c:	dbba      	blt.n	80173f4 <_strtod_l+0x3fc>
 801747e:	4d42      	ldr	r5, [pc, #264]	; (8017588 <_strtod_l+0x590>)
 8017480:	f1c4 040f 	rsb	r4, r4, #15
 8017484:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017488:	4652      	mov	r2, sl
 801748a:	465b      	mov	r3, fp
 801748c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017490:	f7e9 f8c2 	bl	8000618 <__aeabi_dmul>
 8017494:	9b06      	ldr	r3, [sp, #24]
 8017496:	1b1c      	subs	r4, r3, r4
 8017498:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801749c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80174a0:	e78d      	b.n	80173be <_strtod_l+0x3c6>
 80174a2:	f113 0f16 	cmn.w	r3, #22
 80174a6:	dba5      	blt.n	80173f4 <_strtod_l+0x3fc>
 80174a8:	4a37      	ldr	r2, [pc, #220]	; (8017588 <_strtod_l+0x590>)
 80174aa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80174ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 80174b2:	4650      	mov	r0, sl
 80174b4:	4659      	mov	r1, fp
 80174b6:	f7e9 f9d9 	bl	800086c <__aeabi_ddiv>
 80174ba:	e782      	b.n	80173c2 <_strtod_l+0x3ca>
 80174bc:	2300      	movs	r3, #0
 80174be:	4e33      	ldr	r6, [pc, #204]	; (801758c <_strtod_l+0x594>)
 80174c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80174c4:	4650      	mov	r0, sl
 80174c6:	4659      	mov	r1, fp
 80174c8:	461d      	mov	r5, r3
 80174ca:	f1b8 0f01 	cmp.w	r8, #1
 80174ce:	dc21      	bgt.n	8017514 <_strtod_l+0x51c>
 80174d0:	b10b      	cbz	r3, 80174d6 <_strtod_l+0x4de>
 80174d2:	4682      	mov	sl, r0
 80174d4:	468b      	mov	fp, r1
 80174d6:	4b2d      	ldr	r3, [pc, #180]	; (801758c <_strtod_l+0x594>)
 80174d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80174dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80174e0:	4652      	mov	r2, sl
 80174e2:	465b      	mov	r3, fp
 80174e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80174e8:	f7e9 f896 	bl	8000618 <__aeabi_dmul>
 80174ec:	4b28      	ldr	r3, [pc, #160]	; (8017590 <_strtod_l+0x598>)
 80174ee:	460a      	mov	r2, r1
 80174f0:	400b      	ands	r3, r1
 80174f2:	4928      	ldr	r1, [pc, #160]	; (8017594 <_strtod_l+0x59c>)
 80174f4:	428b      	cmp	r3, r1
 80174f6:	4682      	mov	sl, r0
 80174f8:	d898      	bhi.n	801742c <_strtod_l+0x434>
 80174fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80174fe:	428b      	cmp	r3, r1
 8017500:	bf86      	itte	hi
 8017502:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801759c <_strtod_l+0x5a4>
 8017506:	f04f 3aff 	movhi.w	sl, #4294967295
 801750a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801750e:	2300      	movs	r3, #0
 8017510:	9304      	str	r3, [sp, #16]
 8017512:	e077      	b.n	8017604 <_strtod_l+0x60c>
 8017514:	f018 0f01 	tst.w	r8, #1
 8017518:	d006      	beq.n	8017528 <_strtod_l+0x530>
 801751a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017522:	f7e9 f879 	bl	8000618 <__aeabi_dmul>
 8017526:	2301      	movs	r3, #1
 8017528:	3501      	adds	r5, #1
 801752a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801752e:	e7cc      	b.n	80174ca <_strtod_l+0x4d2>
 8017530:	d0ed      	beq.n	801750e <_strtod_l+0x516>
 8017532:	f1c8 0800 	rsb	r8, r8, #0
 8017536:	f018 020f 	ands.w	r2, r8, #15
 801753a:	d00a      	beq.n	8017552 <_strtod_l+0x55a>
 801753c:	4b12      	ldr	r3, [pc, #72]	; (8017588 <_strtod_l+0x590>)
 801753e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017542:	4650      	mov	r0, sl
 8017544:	4659      	mov	r1, fp
 8017546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801754a:	f7e9 f98f 	bl	800086c <__aeabi_ddiv>
 801754e:	4682      	mov	sl, r0
 8017550:	468b      	mov	fp, r1
 8017552:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017556:	d0da      	beq.n	801750e <_strtod_l+0x516>
 8017558:	f1b8 0f1f 	cmp.w	r8, #31
 801755c:	dd20      	ble.n	80175a0 <_strtod_l+0x5a8>
 801755e:	2400      	movs	r4, #0
 8017560:	46a0      	mov	r8, r4
 8017562:	9407      	str	r4, [sp, #28]
 8017564:	9405      	str	r4, [sp, #20]
 8017566:	2322      	movs	r3, #34	; 0x22
 8017568:	f04f 0a00 	mov.w	sl, #0
 801756c:	f04f 0b00 	mov.w	fp, #0
 8017570:	f8c9 3000 	str.w	r3, [r9]
 8017574:	e765      	b.n	8017442 <_strtod_l+0x44a>
 8017576:	bf00      	nop
 8017578:	0801a963 	.word	0x0801a963
 801757c:	0801ae3b 	.word	0x0801ae3b
 8017580:	0801adb6 	.word	0x0801adb6
 8017584:	0801adf8 	.word	0x0801adf8
 8017588:	0801aee0 	.word	0x0801aee0
 801758c:	0801aeb8 	.word	0x0801aeb8
 8017590:	7ff00000 	.word	0x7ff00000
 8017594:	7ca00000 	.word	0x7ca00000
 8017598:	fff80000 	.word	0xfff80000
 801759c:	7fefffff 	.word	0x7fefffff
 80175a0:	f018 0310 	ands.w	r3, r8, #16
 80175a4:	bf18      	it	ne
 80175a6:	236a      	movne	r3, #106	; 0x6a
 80175a8:	4da0      	ldr	r5, [pc, #640]	; (801782c <_strtod_l+0x834>)
 80175aa:	9304      	str	r3, [sp, #16]
 80175ac:	4650      	mov	r0, sl
 80175ae:	4659      	mov	r1, fp
 80175b0:	2300      	movs	r3, #0
 80175b2:	f1b8 0f00 	cmp.w	r8, #0
 80175b6:	f300 810a 	bgt.w	80177ce <_strtod_l+0x7d6>
 80175ba:	b10b      	cbz	r3, 80175c0 <_strtod_l+0x5c8>
 80175bc:	4682      	mov	sl, r0
 80175be:	468b      	mov	fp, r1
 80175c0:	9b04      	ldr	r3, [sp, #16]
 80175c2:	b1bb      	cbz	r3, 80175f4 <_strtod_l+0x5fc>
 80175c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80175c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	4659      	mov	r1, fp
 80175d0:	dd10      	ble.n	80175f4 <_strtod_l+0x5fc>
 80175d2:	2b1f      	cmp	r3, #31
 80175d4:	f340 8107 	ble.w	80177e6 <_strtod_l+0x7ee>
 80175d8:	2b34      	cmp	r3, #52	; 0x34
 80175da:	bfde      	ittt	le
 80175dc:	3b20      	suble	r3, #32
 80175de:	f04f 32ff 	movle.w	r2, #4294967295
 80175e2:	fa02 f303 	lslle.w	r3, r2, r3
 80175e6:	f04f 0a00 	mov.w	sl, #0
 80175ea:	bfcc      	ite	gt
 80175ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80175f0:	ea03 0b01 	andle.w	fp, r3, r1
 80175f4:	2200      	movs	r2, #0
 80175f6:	2300      	movs	r3, #0
 80175f8:	4650      	mov	r0, sl
 80175fa:	4659      	mov	r1, fp
 80175fc:	f7e9 fa74 	bl	8000ae8 <__aeabi_dcmpeq>
 8017600:	2800      	cmp	r0, #0
 8017602:	d1ac      	bne.n	801755e <_strtod_l+0x566>
 8017604:	9b07      	ldr	r3, [sp, #28]
 8017606:	9300      	str	r3, [sp, #0]
 8017608:	9a05      	ldr	r2, [sp, #20]
 801760a:	9908      	ldr	r1, [sp, #32]
 801760c:	4623      	mov	r3, r4
 801760e:	4648      	mov	r0, r9
 8017610:	f002 f85d 	bl	80196ce <__s2b>
 8017614:	9007      	str	r0, [sp, #28]
 8017616:	2800      	cmp	r0, #0
 8017618:	f43f af08 	beq.w	801742c <_strtod_l+0x434>
 801761c:	9a06      	ldr	r2, [sp, #24]
 801761e:	9b06      	ldr	r3, [sp, #24]
 8017620:	2a00      	cmp	r2, #0
 8017622:	f1c3 0300 	rsb	r3, r3, #0
 8017626:	bfa8      	it	ge
 8017628:	2300      	movge	r3, #0
 801762a:	930e      	str	r3, [sp, #56]	; 0x38
 801762c:	2400      	movs	r4, #0
 801762e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017632:	9316      	str	r3, [sp, #88]	; 0x58
 8017634:	46a0      	mov	r8, r4
 8017636:	9b07      	ldr	r3, [sp, #28]
 8017638:	4648      	mov	r0, r9
 801763a:	6859      	ldr	r1, [r3, #4]
 801763c:	f001 ffc1 	bl	80195c2 <_Balloc>
 8017640:	9005      	str	r0, [sp, #20]
 8017642:	2800      	cmp	r0, #0
 8017644:	f43f aef6 	beq.w	8017434 <_strtod_l+0x43c>
 8017648:	9b07      	ldr	r3, [sp, #28]
 801764a:	691a      	ldr	r2, [r3, #16]
 801764c:	3202      	adds	r2, #2
 801764e:	f103 010c 	add.w	r1, r3, #12
 8017652:	0092      	lsls	r2, r2, #2
 8017654:	300c      	adds	r0, #12
 8017656:	f7fe fb27 	bl	8015ca8 <memcpy>
 801765a:	aa1e      	add	r2, sp, #120	; 0x78
 801765c:	a91d      	add	r1, sp, #116	; 0x74
 801765e:	ec4b ab10 	vmov	d0, sl, fp
 8017662:	4648      	mov	r0, r9
 8017664:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017668:	f002 faec 	bl	8019c44 <__d2b>
 801766c:	901c      	str	r0, [sp, #112]	; 0x70
 801766e:	2800      	cmp	r0, #0
 8017670:	f43f aee0 	beq.w	8017434 <_strtod_l+0x43c>
 8017674:	2101      	movs	r1, #1
 8017676:	4648      	mov	r0, r9
 8017678:	f002 f8b5 	bl	80197e6 <__i2b>
 801767c:	4680      	mov	r8, r0
 801767e:	2800      	cmp	r0, #0
 8017680:	f43f aed8 	beq.w	8017434 <_strtod_l+0x43c>
 8017684:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017686:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017688:	2e00      	cmp	r6, #0
 801768a:	bfab      	itete	ge
 801768c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801768e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017690:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8017692:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8017694:	bfac      	ite	ge
 8017696:	18f7      	addge	r7, r6, r3
 8017698:	1b9d      	sublt	r5, r3, r6
 801769a:	9b04      	ldr	r3, [sp, #16]
 801769c:	1af6      	subs	r6, r6, r3
 801769e:	4416      	add	r6, r2
 80176a0:	4b63      	ldr	r3, [pc, #396]	; (8017830 <_strtod_l+0x838>)
 80176a2:	3e01      	subs	r6, #1
 80176a4:	429e      	cmp	r6, r3
 80176a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80176aa:	f280 80af 	bge.w	801780c <_strtod_l+0x814>
 80176ae:	1b9b      	subs	r3, r3, r6
 80176b0:	2b1f      	cmp	r3, #31
 80176b2:	eba2 0203 	sub.w	r2, r2, r3
 80176b6:	f04f 0101 	mov.w	r1, #1
 80176ba:	f300 809b 	bgt.w	80177f4 <_strtod_l+0x7fc>
 80176be:	fa01 f303 	lsl.w	r3, r1, r3
 80176c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80176c4:	2300      	movs	r3, #0
 80176c6:	930a      	str	r3, [sp, #40]	; 0x28
 80176c8:	18be      	adds	r6, r7, r2
 80176ca:	9b04      	ldr	r3, [sp, #16]
 80176cc:	42b7      	cmp	r7, r6
 80176ce:	4415      	add	r5, r2
 80176d0:	441d      	add	r5, r3
 80176d2:	463b      	mov	r3, r7
 80176d4:	bfa8      	it	ge
 80176d6:	4633      	movge	r3, r6
 80176d8:	42ab      	cmp	r3, r5
 80176da:	bfa8      	it	ge
 80176dc:	462b      	movge	r3, r5
 80176de:	2b00      	cmp	r3, #0
 80176e0:	bfc2      	ittt	gt
 80176e2:	1af6      	subgt	r6, r6, r3
 80176e4:	1aed      	subgt	r5, r5, r3
 80176e6:	1aff      	subgt	r7, r7, r3
 80176e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176ea:	b1bb      	cbz	r3, 801771c <_strtod_l+0x724>
 80176ec:	4641      	mov	r1, r8
 80176ee:	461a      	mov	r2, r3
 80176f0:	4648      	mov	r0, r9
 80176f2:	f002 f917 	bl	8019924 <__pow5mult>
 80176f6:	4680      	mov	r8, r0
 80176f8:	2800      	cmp	r0, #0
 80176fa:	f43f ae9b 	beq.w	8017434 <_strtod_l+0x43c>
 80176fe:	4601      	mov	r1, r0
 8017700:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017702:	4648      	mov	r0, r9
 8017704:	f002 f878 	bl	80197f8 <__multiply>
 8017708:	900c      	str	r0, [sp, #48]	; 0x30
 801770a:	2800      	cmp	r0, #0
 801770c:	f43f ae92 	beq.w	8017434 <_strtod_l+0x43c>
 8017710:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017712:	4648      	mov	r0, r9
 8017714:	f001 ff89 	bl	801962a <_Bfree>
 8017718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801771a:	931c      	str	r3, [sp, #112]	; 0x70
 801771c:	2e00      	cmp	r6, #0
 801771e:	dc7a      	bgt.n	8017816 <_strtod_l+0x81e>
 8017720:	9b06      	ldr	r3, [sp, #24]
 8017722:	2b00      	cmp	r3, #0
 8017724:	dd08      	ble.n	8017738 <_strtod_l+0x740>
 8017726:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017728:	9905      	ldr	r1, [sp, #20]
 801772a:	4648      	mov	r0, r9
 801772c:	f002 f8fa 	bl	8019924 <__pow5mult>
 8017730:	9005      	str	r0, [sp, #20]
 8017732:	2800      	cmp	r0, #0
 8017734:	f43f ae7e 	beq.w	8017434 <_strtod_l+0x43c>
 8017738:	2d00      	cmp	r5, #0
 801773a:	dd08      	ble.n	801774e <_strtod_l+0x756>
 801773c:	462a      	mov	r2, r5
 801773e:	9905      	ldr	r1, [sp, #20]
 8017740:	4648      	mov	r0, r9
 8017742:	f002 f93d 	bl	80199c0 <__lshift>
 8017746:	9005      	str	r0, [sp, #20]
 8017748:	2800      	cmp	r0, #0
 801774a:	f43f ae73 	beq.w	8017434 <_strtod_l+0x43c>
 801774e:	2f00      	cmp	r7, #0
 8017750:	dd08      	ble.n	8017764 <_strtod_l+0x76c>
 8017752:	4641      	mov	r1, r8
 8017754:	463a      	mov	r2, r7
 8017756:	4648      	mov	r0, r9
 8017758:	f002 f932 	bl	80199c0 <__lshift>
 801775c:	4680      	mov	r8, r0
 801775e:	2800      	cmp	r0, #0
 8017760:	f43f ae68 	beq.w	8017434 <_strtod_l+0x43c>
 8017764:	9a05      	ldr	r2, [sp, #20]
 8017766:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017768:	4648      	mov	r0, r9
 801776a:	f002 f997 	bl	8019a9c <__mdiff>
 801776e:	4604      	mov	r4, r0
 8017770:	2800      	cmp	r0, #0
 8017772:	f43f ae5f 	beq.w	8017434 <_strtod_l+0x43c>
 8017776:	68c3      	ldr	r3, [r0, #12]
 8017778:	930c      	str	r3, [sp, #48]	; 0x30
 801777a:	2300      	movs	r3, #0
 801777c:	60c3      	str	r3, [r0, #12]
 801777e:	4641      	mov	r1, r8
 8017780:	f002 f972 	bl	8019a68 <__mcmp>
 8017784:	2800      	cmp	r0, #0
 8017786:	da55      	bge.n	8017834 <_strtod_l+0x83c>
 8017788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801778a:	b9e3      	cbnz	r3, 80177c6 <_strtod_l+0x7ce>
 801778c:	f1ba 0f00 	cmp.w	sl, #0
 8017790:	d119      	bne.n	80177c6 <_strtod_l+0x7ce>
 8017792:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017796:	b9b3      	cbnz	r3, 80177c6 <_strtod_l+0x7ce>
 8017798:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801779c:	0d1b      	lsrs	r3, r3, #20
 801779e:	051b      	lsls	r3, r3, #20
 80177a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80177a4:	d90f      	bls.n	80177c6 <_strtod_l+0x7ce>
 80177a6:	6963      	ldr	r3, [r4, #20]
 80177a8:	b913      	cbnz	r3, 80177b0 <_strtod_l+0x7b8>
 80177aa:	6923      	ldr	r3, [r4, #16]
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	dd0a      	ble.n	80177c6 <_strtod_l+0x7ce>
 80177b0:	4621      	mov	r1, r4
 80177b2:	2201      	movs	r2, #1
 80177b4:	4648      	mov	r0, r9
 80177b6:	f002 f903 	bl	80199c0 <__lshift>
 80177ba:	4641      	mov	r1, r8
 80177bc:	4604      	mov	r4, r0
 80177be:	f002 f953 	bl	8019a68 <__mcmp>
 80177c2:	2800      	cmp	r0, #0
 80177c4:	dc67      	bgt.n	8017896 <_strtod_l+0x89e>
 80177c6:	9b04      	ldr	r3, [sp, #16]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d171      	bne.n	80178b0 <_strtod_l+0x8b8>
 80177cc:	e63d      	b.n	801744a <_strtod_l+0x452>
 80177ce:	f018 0f01 	tst.w	r8, #1
 80177d2:	d004      	beq.n	80177de <_strtod_l+0x7e6>
 80177d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80177d8:	f7e8 ff1e 	bl	8000618 <__aeabi_dmul>
 80177dc:	2301      	movs	r3, #1
 80177de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80177e2:	3508      	adds	r5, #8
 80177e4:	e6e5      	b.n	80175b2 <_strtod_l+0x5ba>
 80177e6:	f04f 32ff 	mov.w	r2, #4294967295
 80177ea:	fa02 f303 	lsl.w	r3, r2, r3
 80177ee:	ea03 0a0a 	and.w	sl, r3, sl
 80177f2:	e6ff      	b.n	80175f4 <_strtod_l+0x5fc>
 80177f4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80177f8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80177fc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017800:	36e2      	adds	r6, #226	; 0xe2
 8017802:	fa01 f306 	lsl.w	r3, r1, r6
 8017806:	930a      	str	r3, [sp, #40]	; 0x28
 8017808:	910f      	str	r1, [sp, #60]	; 0x3c
 801780a:	e75d      	b.n	80176c8 <_strtod_l+0x6d0>
 801780c:	2300      	movs	r3, #0
 801780e:	930a      	str	r3, [sp, #40]	; 0x28
 8017810:	2301      	movs	r3, #1
 8017812:	930f      	str	r3, [sp, #60]	; 0x3c
 8017814:	e758      	b.n	80176c8 <_strtod_l+0x6d0>
 8017816:	4632      	mov	r2, r6
 8017818:	991c      	ldr	r1, [sp, #112]	; 0x70
 801781a:	4648      	mov	r0, r9
 801781c:	f002 f8d0 	bl	80199c0 <__lshift>
 8017820:	901c      	str	r0, [sp, #112]	; 0x70
 8017822:	2800      	cmp	r0, #0
 8017824:	f47f af7c 	bne.w	8017720 <_strtod_l+0x728>
 8017828:	e604      	b.n	8017434 <_strtod_l+0x43c>
 801782a:	bf00      	nop
 801782c:	0801ae10 	.word	0x0801ae10
 8017830:	fffffc02 	.word	0xfffffc02
 8017834:	465d      	mov	r5, fp
 8017836:	f040 8086 	bne.w	8017946 <_strtod_l+0x94e>
 801783a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801783c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017840:	b32a      	cbz	r2, 801788e <_strtod_l+0x896>
 8017842:	4aaf      	ldr	r2, [pc, #700]	; (8017b00 <_strtod_l+0xb08>)
 8017844:	4293      	cmp	r3, r2
 8017846:	d153      	bne.n	80178f0 <_strtod_l+0x8f8>
 8017848:	9b04      	ldr	r3, [sp, #16]
 801784a:	4650      	mov	r0, sl
 801784c:	b1d3      	cbz	r3, 8017884 <_strtod_l+0x88c>
 801784e:	4aad      	ldr	r2, [pc, #692]	; (8017b04 <_strtod_l+0xb0c>)
 8017850:	402a      	ands	r2, r5
 8017852:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017856:	f04f 31ff 	mov.w	r1, #4294967295
 801785a:	d816      	bhi.n	801788a <_strtod_l+0x892>
 801785c:	0d12      	lsrs	r2, r2, #20
 801785e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017862:	fa01 f303 	lsl.w	r3, r1, r3
 8017866:	4298      	cmp	r0, r3
 8017868:	d142      	bne.n	80178f0 <_strtod_l+0x8f8>
 801786a:	4ba7      	ldr	r3, [pc, #668]	; (8017b08 <_strtod_l+0xb10>)
 801786c:	429d      	cmp	r5, r3
 801786e:	d102      	bne.n	8017876 <_strtod_l+0x87e>
 8017870:	3001      	adds	r0, #1
 8017872:	f43f addf 	beq.w	8017434 <_strtod_l+0x43c>
 8017876:	4ba3      	ldr	r3, [pc, #652]	; (8017b04 <_strtod_l+0xb0c>)
 8017878:	402b      	ands	r3, r5
 801787a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801787e:	f04f 0a00 	mov.w	sl, #0
 8017882:	e7a0      	b.n	80177c6 <_strtod_l+0x7ce>
 8017884:	f04f 33ff 	mov.w	r3, #4294967295
 8017888:	e7ed      	b.n	8017866 <_strtod_l+0x86e>
 801788a:	460b      	mov	r3, r1
 801788c:	e7eb      	b.n	8017866 <_strtod_l+0x86e>
 801788e:	bb7b      	cbnz	r3, 80178f0 <_strtod_l+0x8f8>
 8017890:	f1ba 0f00 	cmp.w	sl, #0
 8017894:	d12c      	bne.n	80178f0 <_strtod_l+0x8f8>
 8017896:	9904      	ldr	r1, [sp, #16]
 8017898:	4a9a      	ldr	r2, [pc, #616]	; (8017b04 <_strtod_l+0xb0c>)
 801789a:	465b      	mov	r3, fp
 801789c:	b1f1      	cbz	r1, 80178dc <_strtod_l+0x8e4>
 801789e:	ea02 010b 	and.w	r1, r2, fp
 80178a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80178a6:	dc19      	bgt.n	80178dc <_strtod_l+0x8e4>
 80178a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80178ac:	f77f ae5b 	ble.w	8017566 <_strtod_l+0x56e>
 80178b0:	4a96      	ldr	r2, [pc, #600]	; (8017b0c <_strtod_l+0xb14>)
 80178b2:	2300      	movs	r3, #0
 80178b4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80178b8:	4650      	mov	r0, sl
 80178ba:	4659      	mov	r1, fp
 80178bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80178c0:	f7e8 feaa 	bl	8000618 <__aeabi_dmul>
 80178c4:	4682      	mov	sl, r0
 80178c6:	468b      	mov	fp, r1
 80178c8:	2900      	cmp	r1, #0
 80178ca:	f47f adbe 	bne.w	801744a <_strtod_l+0x452>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	f47f adbb 	bne.w	801744a <_strtod_l+0x452>
 80178d4:	2322      	movs	r3, #34	; 0x22
 80178d6:	f8c9 3000 	str.w	r3, [r9]
 80178da:	e5b6      	b.n	801744a <_strtod_l+0x452>
 80178dc:	4013      	ands	r3, r2
 80178de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80178e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80178e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80178ea:	f04f 3aff 	mov.w	sl, #4294967295
 80178ee:	e76a      	b.n	80177c6 <_strtod_l+0x7ce>
 80178f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178f2:	b193      	cbz	r3, 801791a <_strtod_l+0x922>
 80178f4:	422b      	tst	r3, r5
 80178f6:	f43f af66 	beq.w	80177c6 <_strtod_l+0x7ce>
 80178fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178fc:	9a04      	ldr	r2, [sp, #16]
 80178fe:	4650      	mov	r0, sl
 8017900:	4659      	mov	r1, fp
 8017902:	b173      	cbz	r3, 8017922 <_strtod_l+0x92a>
 8017904:	f7ff fb5a 	bl	8016fbc <sulp>
 8017908:	4602      	mov	r2, r0
 801790a:	460b      	mov	r3, r1
 801790c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017910:	f7e8 fccc 	bl	80002ac <__adddf3>
 8017914:	4682      	mov	sl, r0
 8017916:	468b      	mov	fp, r1
 8017918:	e755      	b.n	80177c6 <_strtod_l+0x7ce>
 801791a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801791c:	ea13 0f0a 	tst.w	r3, sl
 8017920:	e7e9      	b.n	80178f6 <_strtod_l+0x8fe>
 8017922:	f7ff fb4b 	bl	8016fbc <sulp>
 8017926:	4602      	mov	r2, r0
 8017928:	460b      	mov	r3, r1
 801792a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801792e:	f7e8 fcbb 	bl	80002a8 <__aeabi_dsub>
 8017932:	2200      	movs	r2, #0
 8017934:	2300      	movs	r3, #0
 8017936:	4682      	mov	sl, r0
 8017938:	468b      	mov	fp, r1
 801793a:	f7e9 f8d5 	bl	8000ae8 <__aeabi_dcmpeq>
 801793e:	2800      	cmp	r0, #0
 8017940:	f47f ae11 	bne.w	8017566 <_strtod_l+0x56e>
 8017944:	e73f      	b.n	80177c6 <_strtod_l+0x7ce>
 8017946:	4641      	mov	r1, r8
 8017948:	4620      	mov	r0, r4
 801794a:	f002 f9ca 	bl	8019ce2 <__ratio>
 801794e:	ec57 6b10 	vmov	r6, r7, d0
 8017952:	2200      	movs	r2, #0
 8017954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017958:	ee10 0a10 	vmov	r0, s0
 801795c:	4639      	mov	r1, r7
 801795e:	f7e9 f8d7 	bl	8000b10 <__aeabi_dcmple>
 8017962:	2800      	cmp	r0, #0
 8017964:	d077      	beq.n	8017a56 <_strtod_l+0xa5e>
 8017966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017968:	2b00      	cmp	r3, #0
 801796a:	d04a      	beq.n	8017a02 <_strtod_l+0xa0a>
 801796c:	4b68      	ldr	r3, [pc, #416]	; (8017b10 <_strtod_l+0xb18>)
 801796e:	2200      	movs	r2, #0
 8017970:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017974:	4f66      	ldr	r7, [pc, #408]	; (8017b10 <_strtod_l+0xb18>)
 8017976:	2600      	movs	r6, #0
 8017978:	4b62      	ldr	r3, [pc, #392]	; (8017b04 <_strtod_l+0xb0c>)
 801797a:	402b      	ands	r3, r5
 801797c:	930f      	str	r3, [sp, #60]	; 0x3c
 801797e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017980:	4b64      	ldr	r3, [pc, #400]	; (8017b14 <_strtod_l+0xb1c>)
 8017982:	429a      	cmp	r2, r3
 8017984:	f040 80ce 	bne.w	8017b24 <_strtod_l+0xb2c>
 8017988:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801798c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017990:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017994:	ec4b ab10 	vmov	d0, sl, fp
 8017998:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801799c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80179a0:	f002 f8da 	bl	8019b58 <__ulp>
 80179a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80179a8:	ec53 2b10 	vmov	r2, r3, d0
 80179ac:	f7e8 fe34 	bl	8000618 <__aeabi_dmul>
 80179b0:	4652      	mov	r2, sl
 80179b2:	465b      	mov	r3, fp
 80179b4:	f7e8 fc7a 	bl	80002ac <__adddf3>
 80179b8:	460b      	mov	r3, r1
 80179ba:	4952      	ldr	r1, [pc, #328]	; (8017b04 <_strtod_l+0xb0c>)
 80179bc:	4a56      	ldr	r2, [pc, #344]	; (8017b18 <_strtod_l+0xb20>)
 80179be:	4019      	ands	r1, r3
 80179c0:	4291      	cmp	r1, r2
 80179c2:	4682      	mov	sl, r0
 80179c4:	d95b      	bls.n	8017a7e <_strtod_l+0xa86>
 80179c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179c8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80179cc:	4293      	cmp	r3, r2
 80179ce:	d103      	bne.n	80179d8 <_strtod_l+0x9e0>
 80179d0:	9b08      	ldr	r3, [sp, #32]
 80179d2:	3301      	adds	r3, #1
 80179d4:	f43f ad2e 	beq.w	8017434 <_strtod_l+0x43c>
 80179d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017b08 <_strtod_l+0xb10>
 80179dc:	f04f 3aff 	mov.w	sl, #4294967295
 80179e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80179e2:	4648      	mov	r0, r9
 80179e4:	f001 fe21 	bl	801962a <_Bfree>
 80179e8:	9905      	ldr	r1, [sp, #20]
 80179ea:	4648      	mov	r0, r9
 80179ec:	f001 fe1d 	bl	801962a <_Bfree>
 80179f0:	4641      	mov	r1, r8
 80179f2:	4648      	mov	r0, r9
 80179f4:	f001 fe19 	bl	801962a <_Bfree>
 80179f8:	4621      	mov	r1, r4
 80179fa:	4648      	mov	r0, r9
 80179fc:	f001 fe15 	bl	801962a <_Bfree>
 8017a00:	e619      	b.n	8017636 <_strtod_l+0x63e>
 8017a02:	f1ba 0f00 	cmp.w	sl, #0
 8017a06:	d11a      	bne.n	8017a3e <_strtod_l+0xa46>
 8017a08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017a0c:	b9eb      	cbnz	r3, 8017a4a <_strtod_l+0xa52>
 8017a0e:	2200      	movs	r2, #0
 8017a10:	4b3f      	ldr	r3, [pc, #252]	; (8017b10 <_strtod_l+0xb18>)
 8017a12:	4630      	mov	r0, r6
 8017a14:	4639      	mov	r1, r7
 8017a16:	f7e9 f871 	bl	8000afc <__aeabi_dcmplt>
 8017a1a:	b9c8      	cbnz	r0, 8017a50 <_strtod_l+0xa58>
 8017a1c:	4630      	mov	r0, r6
 8017a1e:	4639      	mov	r1, r7
 8017a20:	2200      	movs	r2, #0
 8017a22:	4b3e      	ldr	r3, [pc, #248]	; (8017b1c <_strtod_l+0xb24>)
 8017a24:	f7e8 fdf8 	bl	8000618 <__aeabi_dmul>
 8017a28:	4606      	mov	r6, r0
 8017a2a:	460f      	mov	r7, r1
 8017a2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017a30:	9618      	str	r6, [sp, #96]	; 0x60
 8017a32:	9319      	str	r3, [sp, #100]	; 0x64
 8017a34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017a38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017a3c:	e79c      	b.n	8017978 <_strtod_l+0x980>
 8017a3e:	f1ba 0f01 	cmp.w	sl, #1
 8017a42:	d102      	bne.n	8017a4a <_strtod_l+0xa52>
 8017a44:	2d00      	cmp	r5, #0
 8017a46:	f43f ad8e 	beq.w	8017566 <_strtod_l+0x56e>
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	4b34      	ldr	r3, [pc, #208]	; (8017b20 <_strtod_l+0xb28>)
 8017a4e:	e78f      	b.n	8017970 <_strtod_l+0x978>
 8017a50:	2600      	movs	r6, #0
 8017a52:	4f32      	ldr	r7, [pc, #200]	; (8017b1c <_strtod_l+0xb24>)
 8017a54:	e7ea      	b.n	8017a2c <_strtod_l+0xa34>
 8017a56:	4b31      	ldr	r3, [pc, #196]	; (8017b1c <_strtod_l+0xb24>)
 8017a58:	4630      	mov	r0, r6
 8017a5a:	4639      	mov	r1, r7
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	f7e8 fddb 	bl	8000618 <__aeabi_dmul>
 8017a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a64:	4606      	mov	r6, r0
 8017a66:	460f      	mov	r7, r1
 8017a68:	b933      	cbnz	r3, 8017a78 <_strtod_l+0xa80>
 8017a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017a6e:	9010      	str	r0, [sp, #64]	; 0x40
 8017a70:	9311      	str	r3, [sp, #68]	; 0x44
 8017a72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017a76:	e7df      	b.n	8017a38 <_strtod_l+0xa40>
 8017a78:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017a7c:	e7f9      	b.n	8017a72 <_strtod_l+0xa7a>
 8017a7e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017a82:	9b04      	ldr	r3, [sp, #16]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d1ab      	bne.n	80179e0 <_strtod_l+0x9e8>
 8017a88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017a8c:	0d1b      	lsrs	r3, r3, #20
 8017a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a90:	051b      	lsls	r3, r3, #20
 8017a92:	429a      	cmp	r2, r3
 8017a94:	465d      	mov	r5, fp
 8017a96:	d1a3      	bne.n	80179e0 <_strtod_l+0x9e8>
 8017a98:	4639      	mov	r1, r7
 8017a9a:	4630      	mov	r0, r6
 8017a9c:	f7e9 f86c 	bl	8000b78 <__aeabi_d2iz>
 8017aa0:	f7e8 fd50 	bl	8000544 <__aeabi_i2d>
 8017aa4:	460b      	mov	r3, r1
 8017aa6:	4602      	mov	r2, r0
 8017aa8:	4639      	mov	r1, r7
 8017aaa:	4630      	mov	r0, r6
 8017aac:	f7e8 fbfc 	bl	80002a8 <__aeabi_dsub>
 8017ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	460f      	mov	r7, r1
 8017ab6:	b933      	cbnz	r3, 8017ac6 <_strtod_l+0xace>
 8017ab8:	f1ba 0f00 	cmp.w	sl, #0
 8017abc:	d103      	bne.n	8017ac6 <_strtod_l+0xace>
 8017abe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017ac2:	2d00      	cmp	r5, #0
 8017ac4:	d06d      	beq.n	8017ba2 <_strtod_l+0xbaa>
 8017ac6:	a30a      	add	r3, pc, #40	; (adr r3, 8017af0 <_strtod_l+0xaf8>)
 8017ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017acc:	4630      	mov	r0, r6
 8017ace:	4639      	mov	r1, r7
 8017ad0:	f7e9 f814 	bl	8000afc <__aeabi_dcmplt>
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	f47f acb8 	bne.w	801744a <_strtod_l+0x452>
 8017ada:	a307      	add	r3, pc, #28	; (adr r3, 8017af8 <_strtod_l+0xb00>)
 8017adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ae0:	4630      	mov	r0, r6
 8017ae2:	4639      	mov	r1, r7
 8017ae4:	f7e9 f828 	bl	8000b38 <__aeabi_dcmpgt>
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	f43f af79 	beq.w	80179e0 <_strtod_l+0x9e8>
 8017aee:	e4ac      	b.n	801744a <_strtod_l+0x452>
 8017af0:	94a03595 	.word	0x94a03595
 8017af4:	3fdfffff 	.word	0x3fdfffff
 8017af8:	35afe535 	.word	0x35afe535
 8017afc:	3fe00000 	.word	0x3fe00000
 8017b00:	000fffff 	.word	0x000fffff
 8017b04:	7ff00000 	.word	0x7ff00000
 8017b08:	7fefffff 	.word	0x7fefffff
 8017b0c:	39500000 	.word	0x39500000
 8017b10:	3ff00000 	.word	0x3ff00000
 8017b14:	7fe00000 	.word	0x7fe00000
 8017b18:	7c9fffff 	.word	0x7c9fffff
 8017b1c:	3fe00000 	.word	0x3fe00000
 8017b20:	bff00000 	.word	0xbff00000
 8017b24:	9b04      	ldr	r3, [sp, #16]
 8017b26:	b333      	cbz	r3, 8017b76 <_strtod_l+0xb7e>
 8017b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b2a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017b2e:	d822      	bhi.n	8017b76 <_strtod_l+0xb7e>
 8017b30:	a327      	add	r3, pc, #156	; (adr r3, 8017bd0 <_strtod_l+0xbd8>)
 8017b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b36:	4630      	mov	r0, r6
 8017b38:	4639      	mov	r1, r7
 8017b3a:	f7e8 ffe9 	bl	8000b10 <__aeabi_dcmple>
 8017b3e:	b1a0      	cbz	r0, 8017b6a <_strtod_l+0xb72>
 8017b40:	4639      	mov	r1, r7
 8017b42:	4630      	mov	r0, r6
 8017b44:	f7e9 f840 	bl	8000bc8 <__aeabi_d2uiz>
 8017b48:	2800      	cmp	r0, #0
 8017b4a:	bf08      	it	eq
 8017b4c:	2001      	moveq	r0, #1
 8017b4e:	f7e8 fce9 	bl	8000524 <__aeabi_ui2d>
 8017b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b54:	4606      	mov	r6, r0
 8017b56:	460f      	mov	r7, r1
 8017b58:	bb03      	cbnz	r3, 8017b9c <_strtod_l+0xba4>
 8017b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017b5e:	9012      	str	r0, [sp, #72]	; 0x48
 8017b60:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017b66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017b6e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017b72:	1a9b      	subs	r3, r3, r2
 8017b74:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b76:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017b7a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017b7e:	f001 ffeb 	bl	8019b58 <__ulp>
 8017b82:	4650      	mov	r0, sl
 8017b84:	ec53 2b10 	vmov	r2, r3, d0
 8017b88:	4659      	mov	r1, fp
 8017b8a:	f7e8 fd45 	bl	8000618 <__aeabi_dmul>
 8017b8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017b92:	f7e8 fb8b 	bl	80002ac <__adddf3>
 8017b96:	4682      	mov	sl, r0
 8017b98:	468b      	mov	fp, r1
 8017b9a:	e772      	b.n	8017a82 <_strtod_l+0xa8a>
 8017b9c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017ba0:	e7df      	b.n	8017b62 <_strtod_l+0xb6a>
 8017ba2:	a30d      	add	r3, pc, #52	; (adr r3, 8017bd8 <_strtod_l+0xbe0>)
 8017ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ba8:	f7e8 ffa8 	bl	8000afc <__aeabi_dcmplt>
 8017bac:	e79c      	b.n	8017ae8 <_strtod_l+0xaf0>
 8017bae:	2300      	movs	r3, #0
 8017bb0:	930d      	str	r3, [sp, #52]	; 0x34
 8017bb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017bb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017bb6:	6013      	str	r3, [r2, #0]
 8017bb8:	f7ff ba61 	b.w	801707e <_strtod_l+0x86>
 8017bbc:	2b65      	cmp	r3, #101	; 0x65
 8017bbe:	f04f 0200 	mov.w	r2, #0
 8017bc2:	f43f ab4e 	beq.w	8017262 <_strtod_l+0x26a>
 8017bc6:	2101      	movs	r1, #1
 8017bc8:	4614      	mov	r4, r2
 8017bca:	9104      	str	r1, [sp, #16]
 8017bcc:	f7ff bacb 	b.w	8017166 <_strtod_l+0x16e>
 8017bd0:	ffc00000 	.word	0xffc00000
 8017bd4:	41dfffff 	.word	0x41dfffff
 8017bd8:	94a03595 	.word	0x94a03595
 8017bdc:	3fcfffff 	.word	0x3fcfffff

08017be0 <_strtod_r>:
 8017be0:	4b05      	ldr	r3, [pc, #20]	; (8017bf8 <_strtod_r+0x18>)
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	b410      	push	{r4}
 8017be6:	6a1b      	ldr	r3, [r3, #32]
 8017be8:	4c04      	ldr	r4, [pc, #16]	; (8017bfc <_strtod_r+0x1c>)
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	bf08      	it	eq
 8017bee:	4623      	moveq	r3, r4
 8017bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bf4:	f7ff ba00 	b.w	8016ff8 <_strtod_l>
 8017bf8:	200000c4 	.word	0x200000c4
 8017bfc:	20000128 	.word	0x20000128

08017c00 <_strtol_l.isra.0>:
 8017c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c04:	4680      	mov	r8, r0
 8017c06:	4689      	mov	r9, r1
 8017c08:	4692      	mov	sl, r2
 8017c0a:	461e      	mov	r6, r3
 8017c0c:	460f      	mov	r7, r1
 8017c0e:	463d      	mov	r5, r7
 8017c10:	9808      	ldr	r0, [sp, #32]
 8017c12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c16:	f001 fc2f 	bl	8019478 <__locale_ctype_ptr_l>
 8017c1a:	4420      	add	r0, r4
 8017c1c:	7843      	ldrb	r3, [r0, #1]
 8017c1e:	f013 0308 	ands.w	r3, r3, #8
 8017c22:	d132      	bne.n	8017c8a <_strtol_l.isra.0+0x8a>
 8017c24:	2c2d      	cmp	r4, #45	; 0x2d
 8017c26:	d132      	bne.n	8017c8e <_strtol_l.isra.0+0x8e>
 8017c28:	787c      	ldrb	r4, [r7, #1]
 8017c2a:	1cbd      	adds	r5, r7, #2
 8017c2c:	2201      	movs	r2, #1
 8017c2e:	2e00      	cmp	r6, #0
 8017c30:	d05d      	beq.n	8017cee <_strtol_l.isra.0+0xee>
 8017c32:	2e10      	cmp	r6, #16
 8017c34:	d109      	bne.n	8017c4a <_strtol_l.isra.0+0x4a>
 8017c36:	2c30      	cmp	r4, #48	; 0x30
 8017c38:	d107      	bne.n	8017c4a <_strtol_l.isra.0+0x4a>
 8017c3a:	782b      	ldrb	r3, [r5, #0]
 8017c3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017c40:	2b58      	cmp	r3, #88	; 0x58
 8017c42:	d14f      	bne.n	8017ce4 <_strtol_l.isra.0+0xe4>
 8017c44:	786c      	ldrb	r4, [r5, #1]
 8017c46:	2610      	movs	r6, #16
 8017c48:	3502      	adds	r5, #2
 8017c4a:	2a00      	cmp	r2, #0
 8017c4c:	bf14      	ite	ne
 8017c4e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017c52:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017c56:	2700      	movs	r7, #0
 8017c58:	fbb1 fcf6 	udiv	ip, r1, r6
 8017c5c:	4638      	mov	r0, r7
 8017c5e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017c62:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017c66:	2b09      	cmp	r3, #9
 8017c68:	d817      	bhi.n	8017c9a <_strtol_l.isra.0+0x9a>
 8017c6a:	461c      	mov	r4, r3
 8017c6c:	42a6      	cmp	r6, r4
 8017c6e:	dd23      	ble.n	8017cb8 <_strtol_l.isra.0+0xb8>
 8017c70:	1c7b      	adds	r3, r7, #1
 8017c72:	d007      	beq.n	8017c84 <_strtol_l.isra.0+0x84>
 8017c74:	4584      	cmp	ip, r0
 8017c76:	d31c      	bcc.n	8017cb2 <_strtol_l.isra.0+0xb2>
 8017c78:	d101      	bne.n	8017c7e <_strtol_l.isra.0+0x7e>
 8017c7a:	45a6      	cmp	lr, r4
 8017c7c:	db19      	blt.n	8017cb2 <_strtol_l.isra.0+0xb2>
 8017c7e:	fb00 4006 	mla	r0, r0, r6, r4
 8017c82:	2701      	movs	r7, #1
 8017c84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c88:	e7eb      	b.n	8017c62 <_strtol_l.isra.0+0x62>
 8017c8a:	462f      	mov	r7, r5
 8017c8c:	e7bf      	b.n	8017c0e <_strtol_l.isra.0+0xe>
 8017c8e:	2c2b      	cmp	r4, #43	; 0x2b
 8017c90:	bf04      	itt	eq
 8017c92:	1cbd      	addeq	r5, r7, #2
 8017c94:	787c      	ldrbeq	r4, [r7, #1]
 8017c96:	461a      	mov	r2, r3
 8017c98:	e7c9      	b.n	8017c2e <_strtol_l.isra.0+0x2e>
 8017c9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017c9e:	2b19      	cmp	r3, #25
 8017ca0:	d801      	bhi.n	8017ca6 <_strtol_l.isra.0+0xa6>
 8017ca2:	3c37      	subs	r4, #55	; 0x37
 8017ca4:	e7e2      	b.n	8017c6c <_strtol_l.isra.0+0x6c>
 8017ca6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017caa:	2b19      	cmp	r3, #25
 8017cac:	d804      	bhi.n	8017cb8 <_strtol_l.isra.0+0xb8>
 8017cae:	3c57      	subs	r4, #87	; 0x57
 8017cb0:	e7dc      	b.n	8017c6c <_strtol_l.isra.0+0x6c>
 8017cb2:	f04f 37ff 	mov.w	r7, #4294967295
 8017cb6:	e7e5      	b.n	8017c84 <_strtol_l.isra.0+0x84>
 8017cb8:	1c7b      	adds	r3, r7, #1
 8017cba:	d108      	bne.n	8017cce <_strtol_l.isra.0+0xce>
 8017cbc:	2322      	movs	r3, #34	; 0x22
 8017cbe:	f8c8 3000 	str.w	r3, [r8]
 8017cc2:	4608      	mov	r0, r1
 8017cc4:	f1ba 0f00 	cmp.w	sl, #0
 8017cc8:	d107      	bne.n	8017cda <_strtol_l.isra.0+0xda>
 8017cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cce:	b102      	cbz	r2, 8017cd2 <_strtol_l.isra.0+0xd2>
 8017cd0:	4240      	negs	r0, r0
 8017cd2:	f1ba 0f00 	cmp.w	sl, #0
 8017cd6:	d0f8      	beq.n	8017cca <_strtol_l.isra.0+0xca>
 8017cd8:	b10f      	cbz	r7, 8017cde <_strtol_l.isra.0+0xde>
 8017cda:	f105 39ff 	add.w	r9, r5, #4294967295
 8017cde:	f8ca 9000 	str.w	r9, [sl]
 8017ce2:	e7f2      	b.n	8017cca <_strtol_l.isra.0+0xca>
 8017ce4:	2430      	movs	r4, #48	; 0x30
 8017ce6:	2e00      	cmp	r6, #0
 8017ce8:	d1af      	bne.n	8017c4a <_strtol_l.isra.0+0x4a>
 8017cea:	2608      	movs	r6, #8
 8017cec:	e7ad      	b.n	8017c4a <_strtol_l.isra.0+0x4a>
 8017cee:	2c30      	cmp	r4, #48	; 0x30
 8017cf0:	d0a3      	beq.n	8017c3a <_strtol_l.isra.0+0x3a>
 8017cf2:	260a      	movs	r6, #10
 8017cf4:	e7a9      	b.n	8017c4a <_strtol_l.isra.0+0x4a>
	...

08017cf8 <_strtol_r>:
 8017cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017cfa:	4c06      	ldr	r4, [pc, #24]	; (8017d14 <_strtol_r+0x1c>)
 8017cfc:	4d06      	ldr	r5, [pc, #24]	; (8017d18 <_strtol_r+0x20>)
 8017cfe:	6824      	ldr	r4, [r4, #0]
 8017d00:	6a24      	ldr	r4, [r4, #32]
 8017d02:	2c00      	cmp	r4, #0
 8017d04:	bf08      	it	eq
 8017d06:	462c      	moveq	r4, r5
 8017d08:	9400      	str	r4, [sp, #0]
 8017d0a:	f7ff ff79 	bl	8017c00 <_strtol_l.isra.0>
 8017d0e:	b003      	add	sp, #12
 8017d10:	bd30      	pop	{r4, r5, pc}
 8017d12:	bf00      	nop
 8017d14:	200000c4 	.word	0x200000c4
 8017d18:	20000128 	.word	0x20000128

08017d1c <__swbuf_r>:
 8017d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d1e:	460e      	mov	r6, r1
 8017d20:	4614      	mov	r4, r2
 8017d22:	4605      	mov	r5, r0
 8017d24:	b118      	cbz	r0, 8017d2e <__swbuf_r+0x12>
 8017d26:	6983      	ldr	r3, [r0, #24]
 8017d28:	b90b      	cbnz	r3, 8017d2e <__swbuf_r+0x12>
 8017d2a:	f000 fff5 	bl	8018d18 <__sinit>
 8017d2e:	4b21      	ldr	r3, [pc, #132]	; (8017db4 <__swbuf_r+0x98>)
 8017d30:	429c      	cmp	r4, r3
 8017d32:	d12a      	bne.n	8017d8a <__swbuf_r+0x6e>
 8017d34:	686c      	ldr	r4, [r5, #4]
 8017d36:	69a3      	ldr	r3, [r4, #24]
 8017d38:	60a3      	str	r3, [r4, #8]
 8017d3a:	89a3      	ldrh	r3, [r4, #12]
 8017d3c:	071a      	lsls	r2, r3, #28
 8017d3e:	d52e      	bpl.n	8017d9e <__swbuf_r+0x82>
 8017d40:	6923      	ldr	r3, [r4, #16]
 8017d42:	b363      	cbz	r3, 8017d9e <__swbuf_r+0x82>
 8017d44:	6923      	ldr	r3, [r4, #16]
 8017d46:	6820      	ldr	r0, [r4, #0]
 8017d48:	1ac0      	subs	r0, r0, r3
 8017d4a:	6963      	ldr	r3, [r4, #20]
 8017d4c:	b2f6      	uxtb	r6, r6
 8017d4e:	4283      	cmp	r3, r0
 8017d50:	4637      	mov	r7, r6
 8017d52:	dc04      	bgt.n	8017d5e <__swbuf_r+0x42>
 8017d54:	4621      	mov	r1, r4
 8017d56:	4628      	mov	r0, r5
 8017d58:	f000 ff74 	bl	8018c44 <_fflush_r>
 8017d5c:	bb28      	cbnz	r0, 8017daa <__swbuf_r+0x8e>
 8017d5e:	68a3      	ldr	r3, [r4, #8]
 8017d60:	3b01      	subs	r3, #1
 8017d62:	60a3      	str	r3, [r4, #8]
 8017d64:	6823      	ldr	r3, [r4, #0]
 8017d66:	1c5a      	adds	r2, r3, #1
 8017d68:	6022      	str	r2, [r4, #0]
 8017d6a:	701e      	strb	r6, [r3, #0]
 8017d6c:	6963      	ldr	r3, [r4, #20]
 8017d6e:	3001      	adds	r0, #1
 8017d70:	4283      	cmp	r3, r0
 8017d72:	d004      	beq.n	8017d7e <__swbuf_r+0x62>
 8017d74:	89a3      	ldrh	r3, [r4, #12]
 8017d76:	07db      	lsls	r3, r3, #31
 8017d78:	d519      	bpl.n	8017dae <__swbuf_r+0x92>
 8017d7a:	2e0a      	cmp	r6, #10
 8017d7c:	d117      	bne.n	8017dae <__swbuf_r+0x92>
 8017d7e:	4621      	mov	r1, r4
 8017d80:	4628      	mov	r0, r5
 8017d82:	f000 ff5f 	bl	8018c44 <_fflush_r>
 8017d86:	b190      	cbz	r0, 8017dae <__swbuf_r+0x92>
 8017d88:	e00f      	b.n	8017daa <__swbuf_r+0x8e>
 8017d8a:	4b0b      	ldr	r3, [pc, #44]	; (8017db8 <__swbuf_r+0x9c>)
 8017d8c:	429c      	cmp	r4, r3
 8017d8e:	d101      	bne.n	8017d94 <__swbuf_r+0x78>
 8017d90:	68ac      	ldr	r4, [r5, #8]
 8017d92:	e7d0      	b.n	8017d36 <__swbuf_r+0x1a>
 8017d94:	4b09      	ldr	r3, [pc, #36]	; (8017dbc <__swbuf_r+0xa0>)
 8017d96:	429c      	cmp	r4, r3
 8017d98:	bf08      	it	eq
 8017d9a:	68ec      	ldreq	r4, [r5, #12]
 8017d9c:	e7cb      	b.n	8017d36 <__swbuf_r+0x1a>
 8017d9e:	4621      	mov	r1, r4
 8017da0:	4628      	mov	r0, r5
 8017da2:	f000 f80d 	bl	8017dc0 <__swsetup_r>
 8017da6:	2800      	cmp	r0, #0
 8017da8:	d0cc      	beq.n	8017d44 <__swbuf_r+0x28>
 8017daa:	f04f 37ff 	mov.w	r7, #4294967295
 8017dae:	4638      	mov	r0, r7
 8017db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017db2:	bf00      	nop
 8017db4:	0801ae68 	.word	0x0801ae68
 8017db8:	0801ae88 	.word	0x0801ae88
 8017dbc:	0801ae48 	.word	0x0801ae48

08017dc0 <__swsetup_r>:
 8017dc0:	4b32      	ldr	r3, [pc, #200]	; (8017e8c <__swsetup_r+0xcc>)
 8017dc2:	b570      	push	{r4, r5, r6, lr}
 8017dc4:	681d      	ldr	r5, [r3, #0]
 8017dc6:	4606      	mov	r6, r0
 8017dc8:	460c      	mov	r4, r1
 8017dca:	b125      	cbz	r5, 8017dd6 <__swsetup_r+0x16>
 8017dcc:	69ab      	ldr	r3, [r5, #24]
 8017dce:	b913      	cbnz	r3, 8017dd6 <__swsetup_r+0x16>
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	f000 ffa1 	bl	8018d18 <__sinit>
 8017dd6:	4b2e      	ldr	r3, [pc, #184]	; (8017e90 <__swsetup_r+0xd0>)
 8017dd8:	429c      	cmp	r4, r3
 8017dda:	d10f      	bne.n	8017dfc <__swsetup_r+0x3c>
 8017ddc:	686c      	ldr	r4, [r5, #4]
 8017dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017de2:	b29a      	uxth	r2, r3
 8017de4:	0715      	lsls	r5, r2, #28
 8017de6:	d42c      	bmi.n	8017e42 <__swsetup_r+0x82>
 8017de8:	06d0      	lsls	r0, r2, #27
 8017dea:	d411      	bmi.n	8017e10 <__swsetup_r+0x50>
 8017dec:	2209      	movs	r2, #9
 8017dee:	6032      	str	r2, [r6, #0]
 8017df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017df4:	81a3      	strh	r3, [r4, #12]
 8017df6:	f04f 30ff 	mov.w	r0, #4294967295
 8017dfa:	e03e      	b.n	8017e7a <__swsetup_r+0xba>
 8017dfc:	4b25      	ldr	r3, [pc, #148]	; (8017e94 <__swsetup_r+0xd4>)
 8017dfe:	429c      	cmp	r4, r3
 8017e00:	d101      	bne.n	8017e06 <__swsetup_r+0x46>
 8017e02:	68ac      	ldr	r4, [r5, #8]
 8017e04:	e7eb      	b.n	8017dde <__swsetup_r+0x1e>
 8017e06:	4b24      	ldr	r3, [pc, #144]	; (8017e98 <__swsetup_r+0xd8>)
 8017e08:	429c      	cmp	r4, r3
 8017e0a:	bf08      	it	eq
 8017e0c:	68ec      	ldreq	r4, [r5, #12]
 8017e0e:	e7e6      	b.n	8017dde <__swsetup_r+0x1e>
 8017e10:	0751      	lsls	r1, r2, #29
 8017e12:	d512      	bpl.n	8017e3a <__swsetup_r+0x7a>
 8017e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e16:	b141      	cbz	r1, 8017e2a <__swsetup_r+0x6a>
 8017e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e1c:	4299      	cmp	r1, r3
 8017e1e:	d002      	beq.n	8017e26 <__swsetup_r+0x66>
 8017e20:	4630      	mov	r0, r6
 8017e22:	f7fd ff55 	bl	8015cd0 <_free_r>
 8017e26:	2300      	movs	r3, #0
 8017e28:	6363      	str	r3, [r4, #52]	; 0x34
 8017e2a:	89a3      	ldrh	r3, [r4, #12]
 8017e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e30:	81a3      	strh	r3, [r4, #12]
 8017e32:	2300      	movs	r3, #0
 8017e34:	6063      	str	r3, [r4, #4]
 8017e36:	6923      	ldr	r3, [r4, #16]
 8017e38:	6023      	str	r3, [r4, #0]
 8017e3a:	89a3      	ldrh	r3, [r4, #12]
 8017e3c:	f043 0308 	orr.w	r3, r3, #8
 8017e40:	81a3      	strh	r3, [r4, #12]
 8017e42:	6923      	ldr	r3, [r4, #16]
 8017e44:	b94b      	cbnz	r3, 8017e5a <__swsetup_r+0x9a>
 8017e46:	89a3      	ldrh	r3, [r4, #12]
 8017e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e50:	d003      	beq.n	8017e5a <__swsetup_r+0x9a>
 8017e52:	4621      	mov	r1, r4
 8017e54:	4630      	mov	r0, r6
 8017e56:	f001 fb47 	bl	80194e8 <__smakebuf_r>
 8017e5a:	89a2      	ldrh	r2, [r4, #12]
 8017e5c:	f012 0301 	ands.w	r3, r2, #1
 8017e60:	d00c      	beq.n	8017e7c <__swsetup_r+0xbc>
 8017e62:	2300      	movs	r3, #0
 8017e64:	60a3      	str	r3, [r4, #8]
 8017e66:	6963      	ldr	r3, [r4, #20]
 8017e68:	425b      	negs	r3, r3
 8017e6a:	61a3      	str	r3, [r4, #24]
 8017e6c:	6923      	ldr	r3, [r4, #16]
 8017e6e:	b953      	cbnz	r3, 8017e86 <__swsetup_r+0xc6>
 8017e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017e78:	d1ba      	bne.n	8017df0 <__swsetup_r+0x30>
 8017e7a:	bd70      	pop	{r4, r5, r6, pc}
 8017e7c:	0792      	lsls	r2, r2, #30
 8017e7e:	bf58      	it	pl
 8017e80:	6963      	ldrpl	r3, [r4, #20]
 8017e82:	60a3      	str	r3, [r4, #8]
 8017e84:	e7f2      	b.n	8017e6c <__swsetup_r+0xac>
 8017e86:	2000      	movs	r0, #0
 8017e88:	e7f7      	b.n	8017e7a <__swsetup_r+0xba>
 8017e8a:	bf00      	nop
 8017e8c:	200000c4 	.word	0x200000c4
 8017e90:	0801ae68 	.word	0x0801ae68
 8017e94:	0801ae88 	.word	0x0801ae88
 8017e98:	0801ae48 	.word	0x0801ae48

08017e9c <abort>:
 8017e9c:	b508      	push	{r3, lr}
 8017e9e:	2006      	movs	r0, #6
 8017ea0:	f002 f93c 	bl	801a11c <raise>
 8017ea4:	2001      	movs	r0, #1
 8017ea6:	f7f0 f955 	bl	8008154 <_exit>

08017eaa <quorem>:
 8017eaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eae:	6903      	ldr	r3, [r0, #16]
 8017eb0:	690c      	ldr	r4, [r1, #16]
 8017eb2:	42a3      	cmp	r3, r4
 8017eb4:	4680      	mov	r8, r0
 8017eb6:	f2c0 8082 	blt.w	8017fbe <quorem+0x114>
 8017eba:	3c01      	subs	r4, #1
 8017ebc:	f101 0714 	add.w	r7, r1, #20
 8017ec0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017ec4:	f100 0614 	add.w	r6, r0, #20
 8017ec8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017ecc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017ed0:	eb06 030c 	add.w	r3, r6, ip
 8017ed4:	3501      	adds	r5, #1
 8017ed6:	eb07 090c 	add.w	r9, r7, ip
 8017eda:	9301      	str	r3, [sp, #4]
 8017edc:	fbb0 f5f5 	udiv	r5, r0, r5
 8017ee0:	b395      	cbz	r5, 8017f48 <quorem+0x9e>
 8017ee2:	f04f 0a00 	mov.w	sl, #0
 8017ee6:	4638      	mov	r0, r7
 8017ee8:	46b6      	mov	lr, r6
 8017eea:	46d3      	mov	fp, sl
 8017eec:	f850 2b04 	ldr.w	r2, [r0], #4
 8017ef0:	b293      	uxth	r3, r2
 8017ef2:	fb05 a303 	mla	r3, r5, r3, sl
 8017ef6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017efa:	b29b      	uxth	r3, r3
 8017efc:	ebab 0303 	sub.w	r3, fp, r3
 8017f00:	0c12      	lsrs	r2, r2, #16
 8017f02:	f8de b000 	ldr.w	fp, [lr]
 8017f06:	fb05 a202 	mla	r2, r5, r2, sl
 8017f0a:	fa13 f38b 	uxtah	r3, r3, fp
 8017f0e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017f12:	fa1f fb82 	uxth.w	fp, r2
 8017f16:	f8de 2000 	ldr.w	r2, [lr]
 8017f1a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017f1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f22:	b29b      	uxth	r3, r3
 8017f24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f28:	4581      	cmp	r9, r0
 8017f2a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017f2e:	f84e 3b04 	str.w	r3, [lr], #4
 8017f32:	d2db      	bcs.n	8017eec <quorem+0x42>
 8017f34:	f856 300c 	ldr.w	r3, [r6, ip]
 8017f38:	b933      	cbnz	r3, 8017f48 <quorem+0x9e>
 8017f3a:	9b01      	ldr	r3, [sp, #4]
 8017f3c:	3b04      	subs	r3, #4
 8017f3e:	429e      	cmp	r6, r3
 8017f40:	461a      	mov	r2, r3
 8017f42:	d330      	bcc.n	8017fa6 <quorem+0xfc>
 8017f44:	f8c8 4010 	str.w	r4, [r8, #16]
 8017f48:	4640      	mov	r0, r8
 8017f4a:	f001 fd8d 	bl	8019a68 <__mcmp>
 8017f4e:	2800      	cmp	r0, #0
 8017f50:	db25      	blt.n	8017f9e <quorem+0xf4>
 8017f52:	3501      	adds	r5, #1
 8017f54:	4630      	mov	r0, r6
 8017f56:	f04f 0c00 	mov.w	ip, #0
 8017f5a:	f857 2b04 	ldr.w	r2, [r7], #4
 8017f5e:	f8d0 e000 	ldr.w	lr, [r0]
 8017f62:	b293      	uxth	r3, r2
 8017f64:	ebac 0303 	sub.w	r3, ip, r3
 8017f68:	0c12      	lsrs	r2, r2, #16
 8017f6a:	fa13 f38e 	uxtah	r3, r3, lr
 8017f6e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f76:	b29b      	uxth	r3, r3
 8017f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f7c:	45b9      	cmp	r9, r7
 8017f7e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017f82:	f840 3b04 	str.w	r3, [r0], #4
 8017f86:	d2e8      	bcs.n	8017f5a <quorem+0xb0>
 8017f88:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017f8c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017f90:	b92a      	cbnz	r2, 8017f9e <quorem+0xf4>
 8017f92:	3b04      	subs	r3, #4
 8017f94:	429e      	cmp	r6, r3
 8017f96:	461a      	mov	r2, r3
 8017f98:	d30b      	bcc.n	8017fb2 <quorem+0x108>
 8017f9a:	f8c8 4010 	str.w	r4, [r8, #16]
 8017f9e:	4628      	mov	r0, r5
 8017fa0:	b003      	add	sp, #12
 8017fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa6:	6812      	ldr	r2, [r2, #0]
 8017fa8:	3b04      	subs	r3, #4
 8017faa:	2a00      	cmp	r2, #0
 8017fac:	d1ca      	bne.n	8017f44 <quorem+0x9a>
 8017fae:	3c01      	subs	r4, #1
 8017fb0:	e7c5      	b.n	8017f3e <quorem+0x94>
 8017fb2:	6812      	ldr	r2, [r2, #0]
 8017fb4:	3b04      	subs	r3, #4
 8017fb6:	2a00      	cmp	r2, #0
 8017fb8:	d1ef      	bne.n	8017f9a <quorem+0xf0>
 8017fba:	3c01      	subs	r4, #1
 8017fbc:	e7ea      	b.n	8017f94 <quorem+0xea>
 8017fbe:	2000      	movs	r0, #0
 8017fc0:	e7ee      	b.n	8017fa0 <quorem+0xf6>
 8017fc2:	0000      	movs	r0, r0
 8017fc4:	0000      	movs	r0, r0
	...

08017fc8 <_dtoa_r>:
 8017fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	ec57 6b10 	vmov	r6, r7, d0
 8017fd0:	b097      	sub	sp, #92	; 0x5c
 8017fd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017fd4:	9106      	str	r1, [sp, #24]
 8017fd6:	4604      	mov	r4, r0
 8017fd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8017fda:	9312      	str	r3, [sp, #72]	; 0x48
 8017fdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017fe0:	e9cd 6700 	strd	r6, r7, [sp]
 8017fe4:	b93d      	cbnz	r5, 8017ff6 <_dtoa_r+0x2e>
 8017fe6:	2010      	movs	r0, #16
 8017fe8:	f7fd fe4e 	bl	8015c88 <malloc>
 8017fec:	6260      	str	r0, [r4, #36]	; 0x24
 8017fee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017ff2:	6005      	str	r5, [r0, #0]
 8017ff4:	60c5      	str	r5, [r0, #12]
 8017ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ff8:	6819      	ldr	r1, [r3, #0]
 8017ffa:	b151      	cbz	r1, 8018012 <_dtoa_r+0x4a>
 8017ffc:	685a      	ldr	r2, [r3, #4]
 8017ffe:	604a      	str	r2, [r1, #4]
 8018000:	2301      	movs	r3, #1
 8018002:	4093      	lsls	r3, r2
 8018004:	608b      	str	r3, [r1, #8]
 8018006:	4620      	mov	r0, r4
 8018008:	f001 fb0f 	bl	801962a <_Bfree>
 801800c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801800e:	2200      	movs	r2, #0
 8018010:	601a      	str	r2, [r3, #0]
 8018012:	1e3b      	subs	r3, r7, #0
 8018014:	bfbb      	ittet	lt
 8018016:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801801a:	9301      	strlt	r3, [sp, #4]
 801801c:	2300      	movge	r3, #0
 801801e:	2201      	movlt	r2, #1
 8018020:	bfac      	ite	ge
 8018022:	f8c8 3000 	strge.w	r3, [r8]
 8018026:	f8c8 2000 	strlt.w	r2, [r8]
 801802a:	4baf      	ldr	r3, [pc, #700]	; (80182e8 <_dtoa_r+0x320>)
 801802c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018030:	ea33 0308 	bics.w	r3, r3, r8
 8018034:	d114      	bne.n	8018060 <_dtoa_r+0x98>
 8018036:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018038:	f242 730f 	movw	r3, #9999	; 0x270f
 801803c:	6013      	str	r3, [r2, #0]
 801803e:	9b00      	ldr	r3, [sp, #0]
 8018040:	b923      	cbnz	r3, 801804c <_dtoa_r+0x84>
 8018042:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8018046:	2800      	cmp	r0, #0
 8018048:	f000 8542 	beq.w	8018ad0 <_dtoa_r+0xb08>
 801804c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801804e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80182fc <_dtoa_r+0x334>
 8018052:	2b00      	cmp	r3, #0
 8018054:	f000 8544 	beq.w	8018ae0 <_dtoa_r+0xb18>
 8018058:	f10b 0303 	add.w	r3, fp, #3
 801805c:	f000 bd3e 	b.w	8018adc <_dtoa_r+0xb14>
 8018060:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018064:	2200      	movs	r2, #0
 8018066:	2300      	movs	r3, #0
 8018068:	4630      	mov	r0, r6
 801806a:	4639      	mov	r1, r7
 801806c:	f7e8 fd3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8018070:	4681      	mov	r9, r0
 8018072:	b168      	cbz	r0, 8018090 <_dtoa_r+0xc8>
 8018074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018076:	2301      	movs	r3, #1
 8018078:	6013      	str	r3, [r2, #0]
 801807a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801807c:	2b00      	cmp	r3, #0
 801807e:	f000 8524 	beq.w	8018aca <_dtoa_r+0xb02>
 8018082:	4b9a      	ldr	r3, [pc, #616]	; (80182ec <_dtoa_r+0x324>)
 8018084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018086:	f103 3bff 	add.w	fp, r3, #4294967295
 801808a:	6013      	str	r3, [r2, #0]
 801808c:	f000 bd28 	b.w	8018ae0 <_dtoa_r+0xb18>
 8018090:	aa14      	add	r2, sp, #80	; 0x50
 8018092:	a915      	add	r1, sp, #84	; 0x54
 8018094:	ec47 6b10 	vmov	d0, r6, r7
 8018098:	4620      	mov	r0, r4
 801809a:	f001 fdd3 	bl	8019c44 <__d2b>
 801809e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80180a2:	9004      	str	r0, [sp, #16]
 80180a4:	2d00      	cmp	r5, #0
 80180a6:	d07c      	beq.n	80181a2 <_dtoa_r+0x1da>
 80180a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80180ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80180b0:	46b2      	mov	sl, r6
 80180b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80180b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80180ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80180be:	2200      	movs	r2, #0
 80180c0:	4b8b      	ldr	r3, [pc, #556]	; (80182f0 <_dtoa_r+0x328>)
 80180c2:	4650      	mov	r0, sl
 80180c4:	4659      	mov	r1, fp
 80180c6:	f7e8 f8ef 	bl	80002a8 <__aeabi_dsub>
 80180ca:	a381      	add	r3, pc, #516	; (adr r3, 80182d0 <_dtoa_r+0x308>)
 80180cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d0:	f7e8 faa2 	bl	8000618 <__aeabi_dmul>
 80180d4:	a380      	add	r3, pc, #512	; (adr r3, 80182d8 <_dtoa_r+0x310>)
 80180d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180da:	f7e8 f8e7 	bl	80002ac <__adddf3>
 80180de:	4606      	mov	r6, r0
 80180e0:	4628      	mov	r0, r5
 80180e2:	460f      	mov	r7, r1
 80180e4:	f7e8 fa2e 	bl	8000544 <__aeabi_i2d>
 80180e8:	a37d      	add	r3, pc, #500	; (adr r3, 80182e0 <_dtoa_r+0x318>)
 80180ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ee:	f7e8 fa93 	bl	8000618 <__aeabi_dmul>
 80180f2:	4602      	mov	r2, r0
 80180f4:	460b      	mov	r3, r1
 80180f6:	4630      	mov	r0, r6
 80180f8:	4639      	mov	r1, r7
 80180fa:	f7e8 f8d7 	bl	80002ac <__adddf3>
 80180fe:	4606      	mov	r6, r0
 8018100:	460f      	mov	r7, r1
 8018102:	f7e8 fd39 	bl	8000b78 <__aeabi_d2iz>
 8018106:	2200      	movs	r2, #0
 8018108:	4682      	mov	sl, r0
 801810a:	2300      	movs	r3, #0
 801810c:	4630      	mov	r0, r6
 801810e:	4639      	mov	r1, r7
 8018110:	f7e8 fcf4 	bl	8000afc <__aeabi_dcmplt>
 8018114:	b148      	cbz	r0, 801812a <_dtoa_r+0x162>
 8018116:	4650      	mov	r0, sl
 8018118:	f7e8 fa14 	bl	8000544 <__aeabi_i2d>
 801811c:	4632      	mov	r2, r6
 801811e:	463b      	mov	r3, r7
 8018120:	f7e8 fce2 	bl	8000ae8 <__aeabi_dcmpeq>
 8018124:	b908      	cbnz	r0, 801812a <_dtoa_r+0x162>
 8018126:	f10a 3aff 	add.w	sl, sl, #4294967295
 801812a:	f1ba 0f16 	cmp.w	sl, #22
 801812e:	d859      	bhi.n	80181e4 <_dtoa_r+0x21c>
 8018130:	4970      	ldr	r1, [pc, #448]	; (80182f4 <_dtoa_r+0x32c>)
 8018132:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018136:	e9dd 2300 	ldrd	r2, r3, [sp]
 801813a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801813e:	f7e8 fcfb 	bl	8000b38 <__aeabi_dcmpgt>
 8018142:	2800      	cmp	r0, #0
 8018144:	d050      	beq.n	80181e8 <_dtoa_r+0x220>
 8018146:	f10a 3aff 	add.w	sl, sl, #4294967295
 801814a:	2300      	movs	r3, #0
 801814c:	930f      	str	r3, [sp, #60]	; 0x3c
 801814e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018150:	1b5d      	subs	r5, r3, r5
 8018152:	f1b5 0801 	subs.w	r8, r5, #1
 8018156:	bf49      	itett	mi
 8018158:	f1c5 0301 	rsbmi	r3, r5, #1
 801815c:	2300      	movpl	r3, #0
 801815e:	9305      	strmi	r3, [sp, #20]
 8018160:	f04f 0800 	movmi.w	r8, #0
 8018164:	bf58      	it	pl
 8018166:	9305      	strpl	r3, [sp, #20]
 8018168:	f1ba 0f00 	cmp.w	sl, #0
 801816c:	db3e      	blt.n	80181ec <_dtoa_r+0x224>
 801816e:	2300      	movs	r3, #0
 8018170:	44d0      	add	r8, sl
 8018172:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018176:	9307      	str	r3, [sp, #28]
 8018178:	9b06      	ldr	r3, [sp, #24]
 801817a:	2b09      	cmp	r3, #9
 801817c:	f200 8090 	bhi.w	80182a0 <_dtoa_r+0x2d8>
 8018180:	2b05      	cmp	r3, #5
 8018182:	bfc4      	itt	gt
 8018184:	3b04      	subgt	r3, #4
 8018186:	9306      	strgt	r3, [sp, #24]
 8018188:	9b06      	ldr	r3, [sp, #24]
 801818a:	f1a3 0302 	sub.w	r3, r3, #2
 801818e:	bfcc      	ite	gt
 8018190:	2500      	movgt	r5, #0
 8018192:	2501      	movle	r5, #1
 8018194:	2b03      	cmp	r3, #3
 8018196:	f200 808f 	bhi.w	80182b8 <_dtoa_r+0x2f0>
 801819a:	e8df f003 	tbb	[pc, r3]
 801819e:	7f7d      	.short	0x7f7d
 80181a0:	7131      	.short	0x7131
 80181a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80181a6:	441d      	add	r5, r3
 80181a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80181ac:	2820      	cmp	r0, #32
 80181ae:	dd13      	ble.n	80181d8 <_dtoa_r+0x210>
 80181b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80181b4:	9b00      	ldr	r3, [sp, #0]
 80181b6:	fa08 f800 	lsl.w	r8, r8, r0
 80181ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80181be:	fa23 f000 	lsr.w	r0, r3, r0
 80181c2:	ea48 0000 	orr.w	r0, r8, r0
 80181c6:	f7e8 f9ad 	bl	8000524 <__aeabi_ui2d>
 80181ca:	2301      	movs	r3, #1
 80181cc:	4682      	mov	sl, r0
 80181ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80181d2:	3d01      	subs	r5, #1
 80181d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80181d6:	e772      	b.n	80180be <_dtoa_r+0xf6>
 80181d8:	9b00      	ldr	r3, [sp, #0]
 80181da:	f1c0 0020 	rsb	r0, r0, #32
 80181de:	fa03 f000 	lsl.w	r0, r3, r0
 80181e2:	e7f0      	b.n	80181c6 <_dtoa_r+0x1fe>
 80181e4:	2301      	movs	r3, #1
 80181e6:	e7b1      	b.n	801814c <_dtoa_r+0x184>
 80181e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80181ea:	e7b0      	b.n	801814e <_dtoa_r+0x186>
 80181ec:	9b05      	ldr	r3, [sp, #20]
 80181ee:	eba3 030a 	sub.w	r3, r3, sl
 80181f2:	9305      	str	r3, [sp, #20]
 80181f4:	f1ca 0300 	rsb	r3, sl, #0
 80181f8:	9307      	str	r3, [sp, #28]
 80181fa:	2300      	movs	r3, #0
 80181fc:	930e      	str	r3, [sp, #56]	; 0x38
 80181fe:	e7bb      	b.n	8018178 <_dtoa_r+0x1b0>
 8018200:	2301      	movs	r3, #1
 8018202:	930a      	str	r3, [sp, #40]	; 0x28
 8018204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018206:	2b00      	cmp	r3, #0
 8018208:	dd59      	ble.n	80182be <_dtoa_r+0x2f6>
 801820a:	9302      	str	r3, [sp, #8]
 801820c:	4699      	mov	r9, r3
 801820e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018210:	2200      	movs	r2, #0
 8018212:	6072      	str	r2, [r6, #4]
 8018214:	2204      	movs	r2, #4
 8018216:	f102 0014 	add.w	r0, r2, #20
 801821a:	4298      	cmp	r0, r3
 801821c:	6871      	ldr	r1, [r6, #4]
 801821e:	d953      	bls.n	80182c8 <_dtoa_r+0x300>
 8018220:	4620      	mov	r0, r4
 8018222:	f001 f9ce 	bl	80195c2 <_Balloc>
 8018226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018228:	6030      	str	r0, [r6, #0]
 801822a:	f1b9 0f0e 	cmp.w	r9, #14
 801822e:	f8d3 b000 	ldr.w	fp, [r3]
 8018232:	f200 80e6 	bhi.w	8018402 <_dtoa_r+0x43a>
 8018236:	2d00      	cmp	r5, #0
 8018238:	f000 80e3 	beq.w	8018402 <_dtoa_r+0x43a>
 801823c:	ed9d 7b00 	vldr	d7, [sp]
 8018240:	f1ba 0f00 	cmp.w	sl, #0
 8018244:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8018248:	dd74      	ble.n	8018334 <_dtoa_r+0x36c>
 801824a:	4a2a      	ldr	r2, [pc, #168]	; (80182f4 <_dtoa_r+0x32c>)
 801824c:	f00a 030f 	and.w	r3, sl, #15
 8018250:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018254:	ed93 7b00 	vldr	d7, [r3]
 8018258:	ea4f 162a 	mov.w	r6, sl, asr #4
 801825c:	06f0      	lsls	r0, r6, #27
 801825e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018262:	d565      	bpl.n	8018330 <_dtoa_r+0x368>
 8018264:	4b24      	ldr	r3, [pc, #144]	; (80182f8 <_dtoa_r+0x330>)
 8018266:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801826a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801826e:	f7e8 fafd 	bl	800086c <__aeabi_ddiv>
 8018272:	e9cd 0100 	strd	r0, r1, [sp]
 8018276:	f006 060f 	and.w	r6, r6, #15
 801827a:	2503      	movs	r5, #3
 801827c:	4f1e      	ldr	r7, [pc, #120]	; (80182f8 <_dtoa_r+0x330>)
 801827e:	e04c      	b.n	801831a <_dtoa_r+0x352>
 8018280:	2301      	movs	r3, #1
 8018282:	930a      	str	r3, [sp, #40]	; 0x28
 8018284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018286:	4453      	add	r3, sl
 8018288:	f103 0901 	add.w	r9, r3, #1
 801828c:	9302      	str	r3, [sp, #8]
 801828e:	464b      	mov	r3, r9
 8018290:	2b01      	cmp	r3, #1
 8018292:	bfb8      	it	lt
 8018294:	2301      	movlt	r3, #1
 8018296:	e7ba      	b.n	801820e <_dtoa_r+0x246>
 8018298:	2300      	movs	r3, #0
 801829a:	e7b2      	b.n	8018202 <_dtoa_r+0x23a>
 801829c:	2300      	movs	r3, #0
 801829e:	e7f0      	b.n	8018282 <_dtoa_r+0x2ba>
 80182a0:	2501      	movs	r5, #1
 80182a2:	2300      	movs	r3, #0
 80182a4:	9306      	str	r3, [sp, #24]
 80182a6:	950a      	str	r5, [sp, #40]	; 0x28
 80182a8:	f04f 33ff 	mov.w	r3, #4294967295
 80182ac:	9302      	str	r3, [sp, #8]
 80182ae:	4699      	mov	r9, r3
 80182b0:	2200      	movs	r2, #0
 80182b2:	2312      	movs	r3, #18
 80182b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80182b6:	e7aa      	b.n	801820e <_dtoa_r+0x246>
 80182b8:	2301      	movs	r3, #1
 80182ba:	930a      	str	r3, [sp, #40]	; 0x28
 80182bc:	e7f4      	b.n	80182a8 <_dtoa_r+0x2e0>
 80182be:	2301      	movs	r3, #1
 80182c0:	9302      	str	r3, [sp, #8]
 80182c2:	4699      	mov	r9, r3
 80182c4:	461a      	mov	r2, r3
 80182c6:	e7f5      	b.n	80182b4 <_dtoa_r+0x2ec>
 80182c8:	3101      	adds	r1, #1
 80182ca:	6071      	str	r1, [r6, #4]
 80182cc:	0052      	lsls	r2, r2, #1
 80182ce:	e7a2      	b.n	8018216 <_dtoa_r+0x24e>
 80182d0:	636f4361 	.word	0x636f4361
 80182d4:	3fd287a7 	.word	0x3fd287a7
 80182d8:	8b60c8b3 	.word	0x8b60c8b3
 80182dc:	3fc68a28 	.word	0x3fc68a28
 80182e0:	509f79fb 	.word	0x509f79fb
 80182e4:	3fd34413 	.word	0x3fd34413
 80182e8:	7ff00000 	.word	0x7ff00000
 80182ec:	0801adba 	.word	0x0801adba
 80182f0:	3ff80000 	.word	0x3ff80000
 80182f4:	0801aee0 	.word	0x0801aee0
 80182f8:	0801aeb8 	.word	0x0801aeb8
 80182fc:	0801ae41 	.word	0x0801ae41
 8018300:	07f1      	lsls	r1, r6, #31
 8018302:	d508      	bpl.n	8018316 <_dtoa_r+0x34e>
 8018304:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018308:	e9d7 2300 	ldrd	r2, r3, [r7]
 801830c:	f7e8 f984 	bl	8000618 <__aeabi_dmul>
 8018310:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018314:	3501      	adds	r5, #1
 8018316:	1076      	asrs	r6, r6, #1
 8018318:	3708      	adds	r7, #8
 801831a:	2e00      	cmp	r6, #0
 801831c:	d1f0      	bne.n	8018300 <_dtoa_r+0x338>
 801831e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018322:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018326:	f7e8 faa1 	bl	800086c <__aeabi_ddiv>
 801832a:	e9cd 0100 	strd	r0, r1, [sp]
 801832e:	e01a      	b.n	8018366 <_dtoa_r+0x39e>
 8018330:	2502      	movs	r5, #2
 8018332:	e7a3      	b.n	801827c <_dtoa_r+0x2b4>
 8018334:	f000 80a0 	beq.w	8018478 <_dtoa_r+0x4b0>
 8018338:	f1ca 0600 	rsb	r6, sl, #0
 801833c:	4b9f      	ldr	r3, [pc, #636]	; (80185bc <_dtoa_r+0x5f4>)
 801833e:	4fa0      	ldr	r7, [pc, #640]	; (80185c0 <_dtoa_r+0x5f8>)
 8018340:	f006 020f 	and.w	r2, r6, #15
 8018344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801834c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018350:	f7e8 f962 	bl	8000618 <__aeabi_dmul>
 8018354:	e9cd 0100 	strd	r0, r1, [sp]
 8018358:	1136      	asrs	r6, r6, #4
 801835a:	2300      	movs	r3, #0
 801835c:	2502      	movs	r5, #2
 801835e:	2e00      	cmp	r6, #0
 8018360:	d17f      	bne.n	8018462 <_dtoa_r+0x49a>
 8018362:	2b00      	cmp	r3, #0
 8018364:	d1e1      	bne.n	801832a <_dtoa_r+0x362>
 8018366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018368:	2b00      	cmp	r3, #0
 801836a:	f000 8087 	beq.w	801847c <_dtoa_r+0x4b4>
 801836e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018372:	2200      	movs	r2, #0
 8018374:	4b93      	ldr	r3, [pc, #588]	; (80185c4 <_dtoa_r+0x5fc>)
 8018376:	4630      	mov	r0, r6
 8018378:	4639      	mov	r1, r7
 801837a:	f7e8 fbbf 	bl	8000afc <__aeabi_dcmplt>
 801837e:	2800      	cmp	r0, #0
 8018380:	d07c      	beq.n	801847c <_dtoa_r+0x4b4>
 8018382:	f1b9 0f00 	cmp.w	r9, #0
 8018386:	d079      	beq.n	801847c <_dtoa_r+0x4b4>
 8018388:	9b02      	ldr	r3, [sp, #8]
 801838a:	2b00      	cmp	r3, #0
 801838c:	dd35      	ble.n	80183fa <_dtoa_r+0x432>
 801838e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018392:	9308      	str	r3, [sp, #32]
 8018394:	4639      	mov	r1, r7
 8018396:	2200      	movs	r2, #0
 8018398:	4b8b      	ldr	r3, [pc, #556]	; (80185c8 <_dtoa_r+0x600>)
 801839a:	4630      	mov	r0, r6
 801839c:	f7e8 f93c 	bl	8000618 <__aeabi_dmul>
 80183a0:	e9cd 0100 	strd	r0, r1, [sp]
 80183a4:	9f02      	ldr	r7, [sp, #8]
 80183a6:	3501      	adds	r5, #1
 80183a8:	4628      	mov	r0, r5
 80183aa:	f7e8 f8cb 	bl	8000544 <__aeabi_i2d>
 80183ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80183b2:	f7e8 f931 	bl	8000618 <__aeabi_dmul>
 80183b6:	2200      	movs	r2, #0
 80183b8:	4b84      	ldr	r3, [pc, #528]	; (80185cc <_dtoa_r+0x604>)
 80183ba:	f7e7 ff77 	bl	80002ac <__adddf3>
 80183be:	4605      	mov	r5, r0
 80183c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80183c4:	2f00      	cmp	r7, #0
 80183c6:	d15d      	bne.n	8018484 <_dtoa_r+0x4bc>
 80183c8:	2200      	movs	r2, #0
 80183ca:	4b81      	ldr	r3, [pc, #516]	; (80185d0 <_dtoa_r+0x608>)
 80183cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183d0:	f7e7 ff6a 	bl	80002a8 <__aeabi_dsub>
 80183d4:	462a      	mov	r2, r5
 80183d6:	4633      	mov	r3, r6
 80183d8:	e9cd 0100 	strd	r0, r1, [sp]
 80183dc:	f7e8 fbac 	bl	8000b38 <__aeabi_dcmpgt>
 80183e0:	2800      	cmp	r0, #0
 80183e2:	f040 8288 	bne.w	80188f6 <_dtoa_r+0x92e>
 80183e6:	462a      	mov	r2, r5
 80183e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80183ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183f0:	f7e8 fb84 	bl	8000afc <__aeabi_dcmplt>
 80183f4:	2800      	cmp	r0, #0
 80183f6:	f040 827c 	bne.w	80188f2 <_dtoa_r+0x92a>
 80183fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80183fe:	e9cd 2300 	strd	r2, r3, [sp]
 8018402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018404:	2b00      	cmp	r3, #0
 8018406:	f2c0 8150 	blt.w	80186aa <_dtoa_r+0x6e2>
 801840a:	f1ba 0f0e 	cmp.w	sl, #14
 801840e:	f300 814c 	bgt.w	80186aa <_dtoa_r+0x6e2>
 8018412:	4b6a      	ldr	r3, [pc, #424]	; (80185bc <_dtoa_r+0x5f4>)
 8018414:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018418:	ed93 7b00 	vldr	d7, [r3]
 801841c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801841e:	2b00      	cmp	r3, #0
 8018420:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018424:	f280 80d8 	bge.w	80185d8 <_dtoa_r+0x610>
 8018428:	f1b9 0f00 	cmp.w	r9, #0
 801842c:	f300 80d4 	bgt.w	80185d8 <_dtoa_r+0x610>
 8018430:	f040 825e 	bne.w	80188f0 <_dtoa_r+0x928>
 8018434:	2200      	movs	r2, #0
 8018436:	4b66      	ldr	r3, [pc, #408]	; (80185d0 <_dtoa_r+0x608>)
 8018438:	ec51 0b17 	vmov	r0, r1, d7
 801843c:	f7e8 f8ec 	bl	8000618 <__aeabi_dmul>
 8018440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018444:	f7e8 fb6e 	bl	8000b24 <__aeabi_dcmpge>
 8018448:	464f      	mov	r7, r9
 801844a:	464e      	mov	r6, r9
 801844c:	2800      	cmp	r0, #0
 801844e:	f040 8234 	bne.w	80188ba <_dtoa_r+0x8f2>
 8018452:	2331      	movs	r3, #49	; 0x31
 8018454:	f10b 0501 	add.w	r5, fp, #1
 8018458:	f88b 3000 	strb.w	r3, [fp]
 801845c:	f10a 0a01 	add.w	sl, sl, #1
 8018460:	e22f      	b.n	80188c2 <_dtoa_r+0x8fa>
 8018462:	07f2      	lsls	r2, r6, #31
 8018464:	d505      	bpl.n	8018472 <_dtoa_r+0x4aa>
 8018466:	e9d7 2300 	ldrd	r2, r3, [r7]
 801846a:	f7e8 f8d5 	bl	8000618 <__aeabi_dmul>
 801846e:	3501      	adds	r5, #1
 8018470:	2301      	movs	r3, #1
 8018472:	1076      	asrs	r6, r6, #1
 8018474:	3708      	adds	r7, #8
 8018476:	e772      	b.n	801835e <_dtoa_r+0x396>
 8018478:	2502      	movs	r5, #2
 801847a:	e774      	b.n	8018366 <_dtoa_r+0x39e>
 801847c:	f8cd a020 	str.w	sl, [sp, #32]
 8018480:	464f      	mov	r7, r9
 8018482:	e791      	b.n	80183a8 <_dtoa_r+0x3e0>
 8018484:	4b4d      	ldr	r3, [pc, #308]	; (80185bc <_dtoa_r+0x5f4>)
 8018486:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801848a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801848e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018490:	2b00      	cmp	r3, #0
 8018492:	d047      	beq.n	8018524 <_dtoa_r+0x55c>
 8018494:	4602      	mov	r2, r0
 8018496:	460b      	mov	r3, r1
 8018498:	2000      	movs	r0, #0
 801849a:	494e      	ldr	r1, [pc, #312]	; (80185d4 <_dtoa_r+0x60c>)
 801849c:	f7e8 f9e6 	bl	800086c <__aeabi_ddiv>
 80184a0:	462a      	mov	r2, r5
 80184a2:	4633      	mov	r3, r6
 80184a4:	f7e7 ff00 	bl	80002a8 <__aeabi_dsub>
 80184a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80184ac:	465d      	mov	r5, fp
 80184ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184b2:	f7e8 fb61 	bl	8000b78 <__aeabi_d2iz>
 80184b6:	4606      	mov	r6, r0
 80184b8:	f7e8 f844 	bl	8000544 <__aeabi_i2d>
 80184bc:	4602      	mov	r2, r0
 80184be:	460b      	mov	r3, r1
 80184c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184c4:	f7e7 fef0 	bl	80002a8 <__aeabi_dsub>
 80184c8:	3630      	adds	r6, #48	; 0x30
 80184ca:	f805 6b01 	strb.w	r6, [r5], #1
 80184ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80184d2:	e9cd 0100 	strd	r0, r1, [sp]
 80184d6:	f7e8 fb11 	bl	8000afc <__aeabi_dcmplt>
 80184da:	2800      	cmp	r0, #0
 80184dc:	d163      	bne.n	80185a6 <_dtoa_r+0x5de>
 80184de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80184e2:	2000      	movs	r0, #0
 80184e4:	4937      	ldr	r1, [pc, #220]	; (80185c4 <_dtoa_r+0x5fc>)
 80184e6:	f7e7 fedf 	bl	80002a8 <__aeabi_dsub>
 80184ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80184ee:	f7e8 fb05 	bl	8000afc <__aeabi_dcmplt>
 80184f2:	2800      	cmp	r0, #0
 80184f4:	f040 80b7 	bne.w	8018666 <_dtoa_r+0x69e>
 80184f8:	eba5 030b 	sub.w	r3, r5, fp
 80184fc:	429f      	cmp	r7, r3
 80184fe:	f77f af7c 	ble.w	80183fa <_dtoa_r+0x432>
 8018502:	2200      	movs	r2, #0
 8018504:	4b30      	ldr	r3, [pc, #192]	; (80185c8 <_dtoa_r+0x600>)
 8018506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801850a:	f7e8 f885 	bl	8000618 <__aeabi_dmul>
 801850e:	2200      	movs	r2, #0
 8018510:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018514:	4b2c      	ldr	r3, [pc, #176]	; (80185c8 <_dtoa_r+0x600>)
 8018516:	e9dd 0100 	ldrd	r0, r1, [sp]
 801851a:	f7e8 f87d 	bl	8000618 <__aeabi_dmul>
 801851e:	e9cd 0100 	strd	r0, r1, [sp]
 8018522:	e7c4      	b.n	80184ae <_dtoa_r+0x4e6>
 8018524:	462a      	mov	r2, r5
 8018526:	4633      	mov	r3, r6
 8018528:	f7e8 f876 	bl	8000618 <__aeabi_dmul>
 801852c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018530:	eb0b 0507 	add.w	r5, fp, r7
 8018534:	465e      	mov	r6, fp
 8018536:	e9dd 0100 	ldrd	r0, r1, [sp]
 801853a:	f7e8 fb1d 	bl	8000b78 <__aeabi_d2iz>
 801853e:	4607      	mov	r7, r0
 8018540:	f7e8 f800 	bl	8000544 <__aeabi_i2d>
 8018544:	3730      	adds	r7, #48	; 0x30
 8018546:	4602      	mov	r2, r0
 8018548:	460b      	mov	r3, r1
 801854a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801854e:	f7e7 feab 	bl	80002a8 <__aeabi_dsub>
 8018552:	f806 7b01 	strb.w	r7, [r6], #1
 8018556:	42ae      	cmp	r6, r5
 8018558:	e9cd 0100 	strd	r0, r1, [sp]
 801855c:	f04f 0200 	mov.w	r2, #0
 8018560:	d126      	bne.n	80185b0 <_dtoa_r+0x5e8>
 8018562:	4b1c      	ldr	r3, [pc, #112]	; (80185d4 <_dtoa_r+0x60c>)
 8018564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018568:	f7e7 fea0 	bl	80002ac <__adddf3>
 801856c:	4602      	mov	r2, r0
 801856e:	460b      	mov	r3, r1
 8018570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018574:	f7e8 fae0 	bl	8000b38 <__aeabi_dcmpgt>
 8018578:	2800      	cmp	r0, #0
 801857a:	d174      	bne.n	8018666 <_dtoa_r+0x69e>
 801857c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018580:	2000      	movs	r0, #0
 8018582:	4914      	ldr	r1, [pc, #80]	; (80185d4 <_dtoa_r+0x60c>)
 8018584:	f7e7 fe90 	bl	80002a8 <__aeabi_dsub>
 8018588:	4602      	mov	r2, r0
 801858a:	460b      	mov	r3, r1
 801858c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018590:	f7e8 fab4 	bl	8000afc <__aeabi_dcmplt>
 8018594:	2800      	cmp	r0, #0
 8018596:	f43f af30 	beq.w	80183fa <_dtoa_r+0x432>
 801859a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801859e:	2b30      	cmp	r3, #48	; 0x30
 80185a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80185a4:	d002      	beq.n	80185ac <_dtoa_r+0x5e4>
 80185a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80185aa:	e04a      	b.n	8018642 <_dtoa_r+0x67a>
 80185ac:	4615      	mov	r5, r2
 80185ae:	e7f4      	b.n	801859a <_dtoa_r+0x5d2>
 80185b0:	4b05      	ldr	r3, [pc, #20]	; (80185c8 <_dtoa_r+0x600>)
 80185b2:	f7e8 f831 	bl	8000618 <__aeabi_dmul>
 80185b6:	e9cd 0100 	strd	r0, r1, [sp]
 80185ba:	e7bc      	b.n	8018536 <_dtoa_r+0x56e>
 80185bc:	0801aee0 	.word	0x0801aee0
 80185c0:	0801aeb8 	.word	0x0801aeb8
 80185c4:	3ff00000 	.word	0x3ff00000
 80185c8:	40240000 	.word	0x40240000
 80185cc:	401c0000 	.word	0x401c0000
 80185d0:	40140000 	.word	0x40140000
 80185d4:	3fe00000 	.word	0x3fe00000
 80185d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80185dc:	465d      	mov	r5, fp
 80185de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185e2:	4630      	mov	r0, r6
 80185e4:	4639      	mov	r1, r7
 80185e6:	f7e8 f941 	bl	800086c <__aeabi_ddiv>
 80185ea:	f7e8 fac5 	bl	8000b78 <__aeabi_d2iz>
 80185ee:	4680      	mov	r8, r0
 80185f0:	f7e7 ffa8 	bl	8000544 <__aeabi_i2d>
 80185f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185f8:	f7e8 f80e 	bl	8000618 <__aeabi_dmul>
 80185fc:	4602      	mov	r2, r0
 80185fe:	460b      	mov	r3, r1
 8018600:	4630      	mov	r0, r6
 8018602:	4639      	mov	r1, r7
 8018604:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018608:	f7e7 fe4e 	bl	80002a8 <__aeabi_dsub>
 801860c:	f805 6b01 	strb.w	r6, [r5], #1
 8018610:	eba5 060b 	sub.w	r6, r5, fp
 8018614:	45b1      	cmp	r9, r6
 8018616:	4602      	mov	r2, r0
 8018618:	460b      	mov	r3, r1
 801861a:	d139      	bne.n	8018690 <_dtoa_r+0x6c8>
 801861c:	f7e7 fe46 	bl	80002ac <__adddf3>
 8018620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018624:	4606      	mov	r6, r0
 8018626:	460f      	mov	r7, r1
 8018628:	f7e8 fa86 	bl	8000b38 <__aeabi_dcmpgt>
 801862c:	b9c8      	cbnz	r0, 8018662 <_dtoa_r+0x69a>
 801862e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018632:	4630      	mov	r0, r6
 8018634:	4639      	mov	r1, r7
 8018636:	f7e8 fa57 	bl	8000ae8 <__aeabi_dcmpeq>
 801863a:	b110      	cbz	r0, 8018642 <_dtoa_r+0x67a>
 801863c:	f018 0f01 	tst.w	r8, #1
 8018640:	d10f      	bne.n	8018662 <_dtoa_r+0x69a>
 8018642:	9904      	ldr	r1, [sp, #16]
 8018644:	4620      	mov	r0, r4
 8018646:	f000 fff0 	bl	801962a <_Bfree>
 801864a:	2300      	movs	r3, #0
 801864c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801864e:	702b      	strb	r3, [r5, #0]
 8018650:	f10a 0301 	add.w	r3, sl, #1
 8018654:	6013      	str	r3, [r2, #0]
 8018656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018658:	2b00      	cmp	r3, #0
 801865a:	f000 8241 	beq.w	8018ae0 <_dtoa_r+0xb18>
 801865e:	601d      	str	r5, [r3, #0]
 8018660:	e23e      	b.n	8018ae0 <_dtoa_r+0xb18>
 8018662:	f8cd a020 	str.w	sl, [sp, #32]
 8018666:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801866a:	2a39      	cmp	r2, #57	; 0x39
 801866c:	f105 33ff 	add.w	r3, r5, #4294967295
 8018670:	d108      	bne.n	8018684 <_dtoa_r+0x6bc>
 8018672:	459b      	cmp	fp, r3
 8018674:	d10a      	bne.n	801868c <_dtoa_r+0x6c4>
 8018676:	9b08      	ldr	r3, [sp, #32]
 8018678:	3301      	adds	r3, #1
 801867a:	9308      	str	r3, [sp, #32]
 801867c:	2330      	movs	r3, #48	; 0x30
 801867e:	f88b 3000 	strb.w	r3, [fp]
 8018682:	465b      	mov	r3, fp
 8018684:	781a      	ldrb	r2, [r3, #0]
 8018686:	3201      	adds	r2, #1
 8018688:	701a      	strb	r2, [r3, #0]
 801868a:	e78c      	b.n	80185a6 <_dtoa_r+0x5de>
 801868c:	461d      	mov	r5, r3
 801868e:	e7ea      	b.n	8018666 <_dtoa_r+0x69e>
 8018690:	2200      	movs	r2, #0
 8018692:	4b9b      	ldr	r3, [pc, #620]	; (8018900 <_dtoa_r+0x938>)
 8018694:	f7e7 ffc0 	bl	8000618 <__aeabi_dmul>
 8018698:	2200      	movs	r2, #0
 801869a:	2300      	movs	r3, #0
 801869c:	4606      	mov	r6, r0
 801869e:	460f      	mov	r7, r1
 80186a0:	f7e8 fa22 	bl	8000ae8 <__aeabi_dcmpeq>
 80186a4:	2800      	cmp	r0, #0
 80186a6:	d09a      	beq.n	80185de <_dtoa_r+0x616>
 80186a8:	e7cb      	b.n	8018642 <_dtoa_r+0x67a>
 80186aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186ac:	2a00      	cmp	r2, #0
 80186ae:	f000 808b 	beq.w	80187c8 <_dtoa_r+0x800>
 80186b2:	9a06      	ldr	r2, [sp, #24]
 80186b4:	2a01      	cmp	r2, #1
 80186b6:	dc6e      	bgt.n	8018796 <_dtoa_r+0x7ce>
 80186b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186ba:	2a00      	cmp	r2, #0
 80186bc:	d067      	beq.n	801878e <_dtoa_r+0x7c6>
 80186be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80186c2:	9f07      	ldr	r7, [sp, #28]
 80186c4:	9d05      	ldr	r5, [sp, #20]
 80186c6:	9a05      	ldr	r2, [sp, #20]
 80186c8:	2101      	movs	r1, #1
 80186ca:	441a      	add	r2, r3
 80186cc:	4620      	mov	r0, r4
 80186ce:	9205      	str	r2, [sp, #20]
 80186d0:	4498      	add	r8, r3
 80186d2:	f001 f888 	bl	80197e6 <__i2b>
 80186d6:	4606      	mov	r6, r0
 80186d8:	2d00      	cmp	r5, #0
 80186da:	dd0c      	ble.n	80186f6 <_dtoa_r+0x72e>
 80186dc:	f1b8 0f00 	cmp.w	r8, #0
 80186e0:	dd09      	ble.n	80186f6 <_dtoa_r+0x72e>
 80186e2:	4545      	cmp	r5, r8
 80186e4:	9a05      	ldr	r2, [sp, #20]
 80186e6:	462b      	mov	r3, r5
 80186e8:	bfa8      	it	ge
 80186ea:	4643      	movge	r3, r8
 80186ec:	1ad2      	subs	r2, r2, r3
 80186ee:	9205      	str	r2, [sp, #20]
 80186f0:	1aed      	subs	r5, r5, r3
 80186f2:	eba8 0803 	sub.w	r8, r8, r3
 80186f6:	9b07      	ldr	r3, [sp, #28]
 80186f8:	b1eb      	cbz	r3, 8018736 <_dtoa_r+0x76e>
 80186fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d067      	beq.n	80187d0 <_dtoa_r+0x808>
 8018700:	b18f      	cbz	r7, 8018726 <_dtoa_r+0x75e>
 8018702:	4631      	mov	r1, r6
 8018704:	463a      	mov	r2, r7
 8018706:	4620      	mov	r0, r4
 8018708:	f001 f90c 	bl	8019924 <__pow5mult>
 801870c:	9a04      	ldr	r2, [sp, #16]
 801870e:	4601      	mov	r1, r0
 8018710:	4606      	mov	r6, r0
 8018712:	4620      	mov	r0, r4
 8018714:	f001 f870 	bl	80197f8 <__multiply>
 8018718:	9904      	ldr	r1, [sp, #16]
 801871a:	9008      	str	r0, [sp, #32]
 801871c:	4620      	mov	r0, r4
 801871e:	f000 ff84 	bl	801962a <_Bfree>
 8018722:	9b08      	ldr	r3, [sp, #32]
 8018724:	9304      	str	r3, [sp, #16]
 8018726:	9b07      	ldr	r3, [sp, #28]
 8018728:	1bda      	subs	r2, r3, r7
 801872a:	d004      	beq.n	8018736 <_dtoa_r+0x76e>
 801872c:	9904      	ldr	r1, [sp, #16]
 801872e:	4620      	mov	r0, r4
 8018730:	f001 f8f8 	bl	8019924 <__pow5mult>
 8018734:	9004      	str	r0, [sp, #16]
 8018736:	2101      	movs	r1, #1
 8018738:	4620      	mov	r0, r4
 801873a:	f001 f854 	bl	80197e6 <__i2b>
 801873e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018740:	4607      	mov	r7, r0
 8018742:	2b00      	cmp	r3, #0
 8018744:	f000 81d0 	beq.w	8018ae8 <_dtoa_r+0xb20>
 8018748:	461a      	mov	r2, r3
 801874a:	4601      	mov	r1, r0
 801874c:	4620      	mov	r0, r4
 801874e:	f001 f8e9 	bl	8019924 <__pow5mult>
 8018752:	9b06      	ldr	r3, [sp, #24]
 8018754:	2b01      	cmp	r3, #1
 8018756:	4607      	mov	r7, r0
 8018758:	dc40      	bgt.n	80187dc <_dtoa_r+0x814>
 801875a:	9b00      	ldr	r3, [sp, #0]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d139      	bne.n	80187d4 <_dtoa_r+0x80c>
 8018760:	9b01      	ldr	r3, [sp, #4]
 8018762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018766:	2b00      	cmp	r3, #0
 8018768:	d136      	bne.n	80187d8 <_dtoa_r+0x810>
 801876a:	9b01      	ldr	r3, [sp, #4]
 801876c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018770:	0d1b      	lsrs	r3, r3, #20
 8018772:	051b      	lsls	r3, r3, #20
 8018774:	b12b      	cbz	r3, 8018782 <_dtoa_r+0x7ba>
 8018776:	9b05      	ldr	r3, [sp, #20]
 8018778:	3301      	adds	r3, #1
 801877a:	9305      	str	r3, [sp, #20]
 801877c:	f108 0801 	add.w	r8, r8, #1
 8018780:	2301      	movs	r3, #1
 8018782:	9307      	str	r3, [sp, #28]
 8018784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018786:	2b00      	cmp	r3, #0
 8018788:	d12a      	bne.n	80187e0 <_dtoa_r+0x818>
 801878a:	2001      	movs	r0, #1
 801878c:	e030      	b.n	80187f0 <_dtoa_r+0x828>
 801878e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018790:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018794:	e795      	b.n	80186c2 <_dtoa_r+0x6fa>
 8018796:	9b07      	ldr	r3, [sp, #28]
 8018798:	f109 37ff 	add.w	r7, r9, #4294967295
 801879c:	42bb      	cmp	r3, r7
 801879e:	bfbf      	itttt	lt
 80187a0:	9b07      	ldrlt	r3, [sp, #28]
 80187a2:	9707      	strlt	r7, [sp, #28]
 80187a4:	1afa      	sublt	r2, r7, r3
 80187a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80187a8:	bfbb      	ittet	lt
 80187aa:	189b      	addlt	r3, r3, r2
 80187ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80187ae:	1bdf      	subge	r7, r3, r7
 80187b0:	2700      	movlt	r7, #0
 80187b2:	f1b9 0f00 	cmp.w	r9, #0
 80187b6:	bfb5      	itete	lt
 80187b8:	9b05      	ldrlt	r3, [sp, #20]
 80187ba:	9d05      	ldrge	r5, [sp, #20]
 80187bc:	eba3 0509 	sublt.w	r5, r3, r9
 80187c0:	464b      	movge	r3, r9
 80187c2:	bfb8      	it	lt
 80187c4:	2300      	movlt	r3, #0
 80187c6:	e77e      	b.n	80186c6 <_dtoa_r+0x6fe>
 80187c8:	9f07      	ldr	r7, [sp, #28]
 80187ca:	9d05      	ldr	r5, [sp, #20]
 80187cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80187ce:	e783      	b.n	80186d8 <_dtoa_r+0x710>
 80187d0:	9a07      	ldr	r2, [sp, #28]
 80187d2:	e7ab      	b.n	801872c <_dtoa_r+0x764>
 80187d4:	2300      	movs	r3, #0
 80187d6:	e7d4      	b.n	8018782 <_dtoa_r+0x7ba>
 80187d8:	9b00      	ldr	r3, [sp, #0]
 80187da:	e7d2      	b.n	8018782 <_dtoa_r+0x7ba>
 80187dc:	2300      	movs	r3, #0
 80187de:	9307      	str	r3, [sp, #28]
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80187e6:	6918      	ldr	r0, [r3, #16]
 80187e8:	f000 ffaf 	bl	801974a <__hi0bits>
 80187ec:	f1c0 0020 	rsb	r0, r0, #32
 80187f0:	4440      	add	r0, r8
 80187f2:	f010 001f 	ands.w	r0, r0, #31
 80187f6:	d047      	beq.n	8018888 <_dtoa_r+0x8c0>
 80187f8:	f1c0 0320 	rsb	r3, r0, #32
 80187fc:	2b04      	cmp	r3, #4
 80187fe:	dd3b      	ble.n	8018878 <_dtoa_r+0x8b0>
 8018800:	9b05      	ldr	r3, [sp, #20]
 8018802:	f1c0 001c 	rsb	r0, r0, #28
 8018806:	4403      	add	r3, r0
 8018808:	9305      	str	r3, [sp, #20]
 801880a:	4405      	add	r5, r0
 801880c:	4480      	add	r8, r0
 801880e:	9b05      	ldr	r3, [sp, #20]
 8018810:	2b00      	cmp	r3, #0
 8018812:	dd05      	ble.n	8018820 <_dtoa_r+0x858>
 8018814:	461a      	mov	r2, r3
 8018816:	9904      	ldr	r1, [sp, #16]
 8018818:	4620      	mov	r0, r4
 801881a:	f001 f8d1 	bl	80199c0 <__lshift>
 801881e:	9004      	str	r0, [sp, #16]
 8018820:	f1b8 0f00 	cmp.w	r8, #0
 8018824:	dd05      	ble.n	8018832 <_dtoa_r+0x86a>
 8018826:	4639      	mov	r1, r7
 8018828:	4642      	mov	r2, r8
 801882a:	4620      	mov	r0, r4
 801882c:	f001 f8c8 	bl	80199c0 <__lshift>
 8018830:	4607      	mov	r7, r0
 8018832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018834:	b353      	cbz	r3, 801888c <_dtoa_r+0x8c4>
 8018836:	4639      	mov	r1, r7
 8018838:	9804      	ldr	r0, [sp, #16]
 801883a:	f001 f915 	bl	8019a68 <__mcmp>
 801883e:	2800      	cmp	r0, #0
 8018840:	da24      	bge.n	801888c <_dtoa_r+0x8c4>
 8018842:	2300      	movs	r3, #0
 8018844:	220a      	movs	r2, #10
 8018846:	9904      	ldr	r1, [sp, #16]
 8018848:	4620      	mov	r0, r4
 801884a:	f000 ff05 	bl	8019658 <__multadd>
 801884e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018850:	9004      	str	r0, [sp, #16]
 8018852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018856:	2b00      	cmp	r3, #0
 8018858:	f000 814d 	beq.w	8018af6 <_dtoa_r+0xb2e>
 801885c:	2300      	movs	r3, #0
 801885e:	4631      	mov	r1, r6
 8018860:	220a      	movs	r2, #10
 8018862:	4620      	mov	r0, r4
 8018864:	f000 fef8 	bl	8019658 <__multadd>
 8018868:	9b02      	ldr	r3, [sp, #8]
 801886a:	2b00      	cmp	r3, #0
 801886c:	4606      	mov	r6, r0
 801886e:	dc4f      	bgt.n	8018910 <_dtoa_r+0x948>
 8018870:	9b06      	ldr	r3, [sp, #24]
 8018872:	2b02      	cmp	r3, #2
 8018874:	dd4c      	ble.n	8018910 <_dtoa_r+0x948>
 8018876:	e011      	b.n	801889c <_dtoa_r+0x8d4>
 8018878:	d0c9      	beq.n	801880e <_dtoa_r+0x846>
 801887a:	9a05      	ldr	r2, [sp, #20]
 801887c:	331c      	adds	r3, #28
 801887e:	441a      	add	r2, r3
 8018880:	9205      	str	r2, [sp, #20]
 8018882:	441d      	add	r5, r3
 8018884:	4498      	add	r8, r3
 8018886:	e7c2      	b.n	801880e <_dtoa_r+0x846>
 8018888:	4603      	mov	r3, r0
 801888a:	e7f6      	b.n	801887a <_dtoa_r+0x8b2>
 801888c:	f1b9 0f00 	cmp.w	r9, #0
 8018890:	dc38      	bgt.n	8018904 <_dtoa_r+0x93c>
 8018892:	9b06      	ldr	r3, [sp, #24]
 8018894:	2b02      	cmp	r3, #2
 8018896:	dd35      	ble.n	8018904 <_dtoa_r+0x93c>
 8018898:	f8cd 9008 	str.w	r9, [sp, #8]
 801889c:	9b02      	ldr	r3, [sp, #8]
 801889e:	b963      	cbnz	r3, 80188ba <_dtoa_r+0x8f2>
 80188a0:	4639      	mov	r1, r7
 80188a2:	2205      	movs	r2, #5
 80188a4:	4620      	mov	r0, r4
 80188a6:	f000 fed7 	bl	8019658 <__multadd>
 80188aa:	4601      	mov	r1, r0
 80188ac:	4607      	mov	r7, r0
 80188ae:	9804      	ldr	r0, [sp, #16]
 80188b0:	f001 f8da 	bl	8019a68 <__mcmp>
 80188b4:	2800      	cmp	r0, #0
 80188b6:	f73f adcc 	bgt.w	8018452 <_dtoa_r+0x48a>
 80188ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188bc:	465d      	mov	r5, fp
 80188be:	ea6f 0a03 	mvn.w	sl, r3
 80188c2:	f04f 0900 	mov.w	r9, #0
 80188c6:	4639      	mov	r1, r7
 80188c8:	4620      	mov	r0, r4
 80188ca:	f000 feae 	bl	801962a <_Bfree>
 80188ce:	2e00      	cmp	r6, #0
 80188d0:	f43f aeb7 	beq.w	8018642 <_dtoa_r+0x67a>
 80188d4:	f1b9 0f00 	cmp.w	r9, #0
 80188d8:	d005      	beq.n	80188e6 <_dtoa_r+0x91e>
 80188da:	45b1      	cmp	r9, r6
 80188dc:	d003      	beq.n	80188e6 <_dtoa_r+0x91e>
 80188de:	4649      	mov	r1, r9
 80188e0:	4620      	mov	r0, r4
 80188e2:	f000 fea2 	bl	801962a <_Bfree>
 80188e6:	4631      	mov	r1, r6
 80188e8:	4620      	mov	r0, r4
 80188ea:	f000 fe9e 	bl	801962a <_Bfree>
 80188ee:	e6a8      	b.n	8018642 <_dtoa_r+0x67a>
 80188f0:	2700      	movs	r7, #0
 80188f2:	463e      	mov	r6, r7
 80188f4:	e7e1      	b.n	80188ba <_dtoa_r+0x8f2>
 80188f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80188fa:	463e      	mov	r6, r7
 80188fc:	e5a9      	b.n	8018452 <_dtoa_r+0x48a>
 80188fe:	bf00      	nop
 8018900:	40240000 	.word	0x40240000
 8018904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018906:	f8cd 9008 	str.w	r9, [sp, #8]
 801890a:	2b00      	cmp	r3, #0
 801890c:	f000 80fa 	beq.w	8018b04 <_dtoa_r+0xb3c>
 8018910:	2d00      	cmp	r5, #0
 8018912:	dd05      	ble.n	8018920 <_dtoa_r+0x958>
 8018914:	4631      	mov	r1, r6
 8018916:	462a      	mov	r2, r5
 8018918:	4620      	mov	r0, r4
 801891a:	f001 f851 	bl	80199c0 <__lshift>
 801891e:	4606      	mov	r6, r0
 8018920:	9b07      	ldr	r3, [sp, #28]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d04c      	beq.n	80189c0 <_dtoa_r+0x9f8>
 8018926:	6871      	ldr	r1, [r6, #4]
 8018928:	4620      	mov	r0, r4
 801892a:	f000 fe4a 	bl	80195c2 <_Balloc>
 801892e:	6932      	ldr	r2, [r6, #16]
 8018930:	3202      	adds	r2, #2
 8018932:	4605      	mov	r5, r0
 8018934:	0092      	lsls	r2, r2, #2
 8018936:	f106 010c 	add.w	r1, r6, #12
 801893a:	300c      	adds	r0, #12
 801893c:	f7fd f9b4 	bl	8015ca8 <memcpy>
 8018940:	2201      	movs	r2, #1
 8018942:	4629      	mov	r1, r5
 8018944:	4620      	mov	r0, r4
 8018946:	f001 f83b 	bl	80199c0 <__lshift>
 801894a:	9b00      	ldr	r3, [sp, #0]
 801894c:	f8cd b014 	str.w	fp, [sp, #20]
 8018950:	f003 0301 	and.w	r3, r3, #1
 8018954:	46b1      	mov	r9, r6
 8018956:	9307      	str	r3, [sp, #28]
 8018958:	4606      	mov	r6, r0
 801895a:	4639      	mov	r1, r7
 801895c:	9804      	ldr	r0, [sp, #16]
 801895e:	f7ff faa4 	bl	8017eaa <quorem>
 8018962:	4649      	mov	r1, r9
 8018964:	4605      	mov	r5, r0
 8018966:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801896a:	9804      	ldr	r0, [sp, #16]
 801896c:	f001 f87c 	bl	8019a68 <__mcmp>
 8018970:	4632      	mov	r2, r6
 8018972:	9000      	str	r0, [sp, #0]
 8018974:	4639      	mov	r1, r7
 8018976:	4620      	mov	r0, r4
 8018978:	f001 f890 	bl	8019a9c <__mdiff>
 801897c:	68c3      	ldr	r3, [r0, #12]
 801897e:	4602      	mov	r2, r0
 8018980:	bb03      	cbnz	r3, 80189c4 <_dtoa_r+0x9fc>
 8018982:	4601      	mov	r1, r0
 8018984:	9008      	str	r0, [sp, #32]
 8018986:	9804      	ldr	r0, [sp, #16]
 8018988:	f001 f86e 	bl	8019a68 <__mcmp>
 801898c:	9a08      	ldr	r2, [sp, #32]
 801898e:	4603      	mov	r3, r0
 8018990:	4611      	mov	r1, r2
 8018992:	4620      	mov	r0, r4
 8018994:	9308      	str	r3, [sp, #32]
 8018996:	f000 fe48 	bl	801962a <_Bfree>
 801899a:	9b08      	ldr	r3, [sp, #32]
 801899c:	b9a3      	cbnz	r3, 80189c8 <_dtoa_r+0xa00>
 801899e:	9a06      	ldr	r2, [sp, #24]
 80189a0:	b992      	cbnz	r2, 80189c8 <_dtoa_r+0xa00>
 80189a2:	9a07      	ldr	r2, [sp, #28]
 80189a4:	b982      	cbnz	r2, 80189c8 <_dtoa_r+0xa00>
 80189a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80189aa:	d029      	beq.n	8018a00 <_dtoa_r+0xa38>
 80189ac:	9b00      	ldr	r3, [sp, #0]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	dd01      	ble.n	80189b6 <_dtoa_r+0x9ee>
 80189b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80189b6:	9b05      	ldr	r3, [sp, #20]
 80189b8:	1c5d      	adds	r5, r3, #1
 80189ba:	f883 8000 	strb.w	r8, [r3]
 80189be:	e782      	b.n	80188c6 <_dtoa_r+0x8fe>
 80189c0:	4630      	mov	r0, r6
 80189c2:	e7c2      	b.n	801894a <_dtoa_r+0x982>
 80189c4:	2301      	movs	r3, #1
 80189c6:	e7e3      	b.n	8018990 <_dtoa_r+0x9c8>
 80189c8:	9a00      	ldr	r2, [sp, #0]
 80189ca:	2a00      	cmp	r2, #0
 80189cc:	db04      	blt.n	80189d8 <_dtoa_r+0xa10>
 80189ce:	d125      	bne.n	8018a1c <_dtoa_r+0xa54>
 80189d0:	9a06      	ldr	r2, [sp, #24]
 80189d2:	bb1a      	cbnz	r2, 8018a1c <_dtoa_r+0xa54>
 80189d4:	9a07      	ldr	r2, [sp, #28]
 80189d6:	bb0a      	cbnz	r2, 8018a1c <_dtoa_r+0xa54>
 80189d8:	2b00      	cmp	r3, #0
 80189da:	ddec      	ble.n	80189b6 <_dtoa_r+0x9ee>
 80189dc:	2201      	movs	r2, #1
 80189de:	9904      	ldr	r1, [sp, #16]
 80189e0:	4620      	mov	r0, r4
 80189e2:	f000 ffed 	bl	80199c0 <__lshift>
 80189e6:	4639      	mov	r1, r7
 80189e8:	9004      	str	r0, [sp, #16]
 80189ea:	f001 f83d 	bl	8019a68 <__mcmp>
 80189ee:	2800      	cmp	r0, #0
 80189f0:	dc03      	bgt.n	80189fa <_dtoa_r+0xa32>
 80189f2:	d1e0      	bne.n	80189b6 <_dtoa_r+0x9ee>
 80189f4:	f018 0f01 	tst.w	r8, #1
 80189f8:	d0dd      	beq.n	80189b6 <_dtoa_r+0x9ee>
 80189fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80189fe:	d1d8      	bne.n	80189b2 <_dtoa_r+0x9ea>
 8018a00:	9b05      	ldr	r3, [sp, #20]
 8018a02:	9a05      	ldr	r2, [sp, #20]
 8018a04:	1c5d      	adds	r5, r3, #1
 8018a06:	2339      	movs	r3, #57	; 0x39
 8018a08:	7013      	strb	r3, [r2, #0]
 8018a0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018a0e:	2b39      	cmp	r3, #57	; 0x39
 8018a10:	f105 32ff 	add.w	r2, r5, #4294967295
 8018a14:	d04f      	beq.n	8018ab6 <_dtoa_r+0xaee>
 8018a16:	3301      	adds	r3, #1
 8018a18:	7013      	strb	r3, [r2, #0]
 8018a1a:	e754      	b.n	80188c6 <_dtoa_r+0x8fe>
 8018a1c:	9a05      	ldr	r2, [sp, #20]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	f102 0501 	add.w	r5, r2, #1
 8018a24:	dd06      	ble.n	8018a34 <_dtoa_r+0xa6c>
 8018a26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018a2a:	d0e9      	beq.n	8018a00 <_dtoa_r+0xa38>
 8018a2c:	f108 0801 	add.w	r8, r8, #1
 8018a30:	9b05      	ldr	r3, [sp, #20]
 8018a32:	e7c2      	b.n	80189ba <_dtoa_r+0x9f2>
 8018a34:	9a02      	ldr	r2, [sp, #8]
 8018a36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018a3a:	eba5 030b 	sub.w	r3, r5, fp
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d021      	beq.n	8018a86 <_dtoa_r+0xabe>
 8018a42:	2300      	movs	r3, #0
 8018a44:	220a      	movs	r2, #10
 8018a46:	9904      	ldr	r1, [sp, #16]
 8018a48:	4620      	mov	r0, r4
 8018a4a:	f000 fe05 	bl	8019658 <__multadd>
 8018a4e:	45b1      	cmp	r9, r6
 8018a50:	9004      	str	r0, [sp, #16]
 8018a52:	f04f 0300 	mov.w	r3, #0
 8018a56:	f04f 020a 	mov.w	r2, #10
 8018a5a:	4649      	mov	r1, r9
 8018a5c:	4620      	mov	r0, r4
 8018a5e:	d105      	bne.n	8018a6c <_dtoa_r+0xaa4>
 8018a60:	f000 fdfa 	bl	8019658 <__multadd>
 8018a64:	4681      	mov	r9, r0
 8018a66:	4606      	mov	r6, r0
 8018a68:	9505      	str	r5, [sp, #20]
 8018a6a:	e776      	b.n	801895a <_dtoa_r+0x992>
 8018a6c:	f000 fdf4 	bl	8019658 <__multadd>
 8018a70:	4631      	mov	r1, r6
 8018a72:	4681      	mov	r9, r0
 8018a74:	2300      	movs	r3, #0
 8018a76:	220a      	movs	r2, #10
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f000 fded 	bl	8019658 <__multadd>
 8018a7e:	4606      	mov	r6, r0
 8018a80:	e7f2      	b.n	8018a68 <_dtoa_r+0xaa0>
 8018a82:	f04f 0900 	mov.w	r9, #0
 8018a86:	2201      	movs	r2, #1
 8018a88:	9904      	ldr	r1, [sp, #16]
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f000 ff98 	bl	80199c0 <__lshift>
 8018a90:	4639      	mov	r1, r7
 8018a92:	9004      	str	r0, [sp, #16]
 8018a94:	f000 ffe8 	bl	8019a68 <__mcmp>
 8018a98:	2800      	cmp	r0, #0
 8018a9a:	dcb6      	bgt.n	8018a0a <_dtoa_r+0xa42>
 8018a9c:	d102      	bne.n	8018aa4 <_dtoa_r+0xadc>
 8018a9e:	f018 0f01 	tst.w	r8, #1
 8018aa2:	d1b2      	bne.n	8018a0a <_dtoa_r+0xa42>
 8018aa4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018aa8:	2b30      	cmp	r3, #48	; 0x30
 8018aaa:	f105 32ff 	add.w	r2, r5, #4294967295
 8018aae:	f47f af0a 	bne.w	80188c6 <_dtoa_r+0x8fe>
 8018ab2:	4615      	mov	r5, r2
 8018ab4:	e7f6      	b.n	8018aa4 <_dtoa_r+0xadc>
 8018ab6:	4593      	cmp	fp, r2
 8018ab8:	d105      	bne.n	8018ac6 <_dtoa_r+0xafe>
 8018aba:	2331      	movs	r3, #49	; 0x31
 8018abc:	f10a 0a01 	add.w	sl, sl, #1
 8018ac0:	f88b 3000 	strb.w	r3, [fp]
 8018ac4:	e6ff      	b.n	80188c6 <_dtoa_r+0x8fe>
 8018ac6:	4615      	mov	r5, r2
 8018ac8:	e79f      	b.n	8018a0a <_dtoa_r+0xa42>
 8018aca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018b30 <_dtoa_r+0xb68>
 8018ace:	e007      	b.n	8018ae0 <_dtoa_r+0xb18>
 8018ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ad2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018b34 <_dtoa_r+0xb6c>
 8018ad6:	b11b      	cbz	r3, 8018ae0 <_dtoa_r+0xb18>
 8018ad8:	f10b 0308 	add.w	r3, fp, #8
 8018adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018ade:	6013      	str	r3, [r2, #0]
 8018ae0:	4658      	mov	r0, fp
 8018ae2:	b017      	add	sp, #92	; 0x5c
 8018ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ae8:	9b06      	ldr	r3, [sp, #24]
 8018aea:	2b01      	cmp	r3, #1
 8018aec:	f77f ae35 	ble.w	801875a <_dtoa_r+0x792>
 8018af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018af2:	9307      	str	r3, [sp, #28]
 8018af4:	e649      	b.n	801878a <_dtoa_r+0x7c2>
 8018af6:	9b02      	ldr	r3, [sp, #8]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	dc03      	bgt.n	8018b04 <_dtoa_r+0xb3c>
 8018afc:	9b06      	ldr	r3, [sp, #24]
 8018afe:	2b02      	cmp	r3, #2
 8018b00:	f73f aecc 	bgt.w	801889c <_dtoa_r+0x8d4>
 8018b04:	465d      	mov	r5, fp
 8018b06:	4639      	mov	r1, r7
 8018b08:	9804      	ldr	r0, [sp, #16]
 8018b0a:	f7ff f9ce 	bl	8017eaa <quorem>
 8018b0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018b12:	f805 8b01 	strb.w	r8, [r5], #1
 8018b16:	9a02      	ldr	r2, [sp, #8]
 8018b18:	eba5 030b 	sub.w	r3, r5, fp
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	ddb0      	ble.n	8018a82 <_dtoa_r+0xaba>
 8018b20:	2300      	movs	r3, #0
 8018b22:	220a      	movs	r2, #10
 8018b24:	9904      	ldr	r1, [sp, #16]
 8018b26:	4620      	mov	r0, r4
 8018b28:	f000 fd96 	bl	8019658 <__multadd>
 8018b2c:	9004      	str	r0, [sp, #16]
 8018b2e:	e7ea      	b.n	8018b06 <_dtoa_r+0xb3e>
 8018b30:	0801adb9 	.word	0x0801adb9
 8018b34:	0801ae38 	.word	0x0801ae38

08018b38 <__sflush_r>:
 8018b38:	898a      	ldrh	r2, [r1, #12]
 8018b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b3e:	4605      	mov	r5, r0
 8018b40:	0710      	lsls	r0, r2, #28
 8018b42:	460c      	mov	r4, r1
 8018b44:	d458      	bmi.n	8018bf8 <__sflush_r+0xc0>
 8018b46:	684b      	ldr	r3, [r1, #4]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	dc05      	bgt.n	8018b58 <__sflush_r+0x20>
 8018b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	dc02      	bgt.n	8018b58 <__sflush_r+0x20>
 8018b52:	2000      	movs	r0, #0
 8018b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b5a:	2e00      	cmp	r6, #0
 8018b5c:	d0f9      	beq.n	8018b52 <__sflush_r+0x1a>
 8018b5e:	2300      	movs	r3, #0
 8018b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b64:	682f      	ldr	r7, [r5, #0]
 8018b66:	6a21      	ldr	r1, [r4, #32]
 8018b68:	602b      	str	r3, [r5, #0]
 8018b6a:	d032      	beq.n	8018bd2 <__sflush_r+0x9a>
 8018b6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b6e:	89a3      	ldrh	r3, [r4, #12]
 8018b70:	075a      	lsls	r2, r3, #29
 8018b72:	d505      	bpl.n	8018b80 <__sflush_r+0x48>
 8018b74:	6863      	ldr	r3, [r4, #4]
 8018b76:	1ac0      	subs	r0, r0, r3
 8018b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b7a:	b10b      	cbz	r3, 8018b80 <__sflush_r+0x48>
 8018b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b7e:	1ac0      	subs	r0, r0, r3
 8018b80:	2300      	movs	r3, #0
 8018b82:	4602      	mov	r2, r0
 8018b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b86:	6a21      	ldr	r1, [r4, #32]
 8018b88:	4628      	mov	r0, r5
 8018b8a:	47b0      	blx	r6
 8018b8c:	1c43      	adds	r3, r0, #1
 8018b8e:	89a3      	ldrh	r3, [r4, #12]
 8018b90:	d106      	bne.n	8018ba0 <__sflush_r+0x68>
 8018b92:	6829      	ldr	r1, [r5, #0]
 8018b94:	291d      	cmp	r1, #29
 8018b96:	d848      	bhi.n	8018c2a <__sflush_r+0xf2>
 8018b98:	4a29      	ldr	r2, [pc, #164]	; (8018c40 <__sflush_r+0x108>)
 8018b9a:	40ca      	lsrs	r2, r1
 8018b9c:	07d6      	lsls	r6, r2, #31
 8018b9e:	d544      	bpl.n	8018c2a <__sflush_r+0xf2>
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	6062      	str	r2, [r4, #4]
 8018ba4:	04d9      	lsls	r1, r3, #19
 8018ba6:	6922      	ldr	r2, [r4, #16]
 8018ba8:	6022      	str	r2, [r4, #0]
 8018baa:	d504      	bpl.n	8018bb6 <__sflush_r+0x7e>
 8018bac:	1c42      	adds	r2, r0, #1
 8018bae:	d101      	bne.n	8018bb4 <__sflush_r+0x7c>
 8018bb0:	682b      	ldr	r3, [r5, #0]
 8018bb2:	b903      	cbnz	r3, 8018bb6 <__sflush_r+0x7e>
 8018bb4:	6560      	str	r0, [r4, #84]	; 0x54
 8018bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018bb8:	602f      	str	r7, [r5, #0]
 8018bba:	2900      	cmp	r1, #0
 8018bbc:	d0c9      	beq.n	8018b52 <__sflush_r+0x1a>
 8018bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bc2:	4299      	cmp	r1, r3
 8018bc4:	d002      	beq.n	8018bcc <__sflush_r+0x94>
 8018bc6:	4628      	mov	r0, r5
 8018bc8:	f7fd f882 	bl	8015cd0 <_free_r>
 8018bcc:	2000      	movs	r0, #0
 8018bce:	6360      	str	r0, [r4, #52]	; 0x34
 8018bd0:	e7c0      	b.n	8018b54 <__sflush_r+0x1c>
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	4628      	mov	r0, r5
 8018bd6:	47b0      	blx	r6
 8018bd8:	1c41      	adds	r1, r0, #1
 8018bda:	d1c8      	bne.n	8018b6e <__sflush_r+0x36>
 8018bdc:	682b      	ldr	r3, [r5, #0]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d0c5      	beq.n	8018b6e <__sflush_r+0x36>
 8018be2:	2b1d      	cmp	r3, #29
 8018be4:	d001      	beq.n	8018bea <__sflush_r+0xb2>
 8018be6:	2b16      	cmp	r3, #22
 8018be8:	d101      	bne.n	8018bee <__sflush_r+0xb6>
 8018bea:	602f      	str	r7, [r5, #0]
 8018bec:	e7b1      	b.n	8018b52 <__sflush_r+0x1a>
 8018bee:	89a3      	ldrh	r3, [r4, #12]
 8018bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bf4:	81a3      	strh	r3, [r4, #12]
 8018bf6:	e7ad      	b.n	8018b54 <__sflush_r+0x1c>
 8018bf8:	690f      	ldr	r7, [r1, #16]
 8018bfa:	2f00      	cmp	r7, #0
 8018bfc:	d0a9      	beq.n	8018b52 <__sflush_r+0x1a>
 8018bfe:	0793      	lsls	r3, r2, #30
 8018c00:	680e      	ldr	r6, [r1, #0]
 8018c02:	bf08      	it	eq
 8018c04:	694b      	ldreq	r3, [r1, #20]
 8018c06:	600f      	str	r7, [r1, #0]
 8018c08:	bf18      	it	ne
 8018c0a:	2300      	movne	r3, #0
 8018c0c:	eba6 0807 	sub.w	r8, r6, r7
 8018c10:	608b      	str	r3, [r1, #8]
 8018c12:	f1b8 0f00 	cmp.w	r8, #0
 8018c16:	dd9c      	ble.n	8018b52 <__sflush_r+0x1a>
 8018c18:	4643      	mov	r3, r8
 8018c1a:	463a      	mov	r2, r7
 8018c1c:	6a21      	ldr	r1, [r4, #32]
 8018c1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c20:	4628      	mov	r0, r5
 8018c22:	47b0      	blx	r6
 8018c24:	2800      	cmp	r0, #0
 8018c26:	dc06      	bgt.n	8018c36 <__sflush_r+0xfe>
 8018c28:	89a3      	ldrh	r3, [r4, #12]
 8018c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c2e:	81a3      	strh	r3, [r4, #12]
 8018c30:	f04f 30ff 	mov.w	r0, #4294967295
 8018c34:	e78e      	b.n	8018b54 <__sflush_r+0x1c>
 8018c36:	4407      	add	r7, r0
 8018c38:	eba8 0800 	sub.w	r8, r8, r0
 8018c3c:	e7e9      	b.n	8018c12 <__sflush_r+0xda>
 8018c3e:	bf00      	nop
 8018c40:	20400001 	.word	0x20400001

08018c44 <_fflush_r>:
 8018c44:	b538      	push	{r3, r4, r5, lr}
 8018c46:	690b      	ldr	r3, [r1, #16]
 8018c48:	4605      	mov	r5, r0
 8018c4a:	460c      	mov	r4, r1
 8018c4c:	b1db      	cbz	r3, 8018c86 <_fflush_r+0x42>
 8018c4e:	b118      	cbz	r0, 8018c58 <_fflush_r+0x14>
 8018c50:	6983      	ldr	r3, [r0, #24]
 8018c52:	b90b      	cbnz	r3, 8018c58 <_fflush_r+0x14>
 8018c54:	f000 f860 	bl	8018d18 <__sinit>
 8018c58:	4b0c      	ldr	r3, [pc, #48]	; (8018c8c <_fflush_r+0x48>)
 8018c5a:	429c      	cmp	r4, r3
 8018c5c:	d109      	bne.n	8018c72 <_fflush_r+0x2e>
 8018c5e:	686c      	ldr	r4, [r5, #4]
 8018c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c64:	b17b      	cbz	r3, 8018c86 <_fflush_r+0x42>
 8018c66:	4621      	mov	r1, r4
 8018c68:	4628      	mov	r0, r5
 8018c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c6e:	f7ff bf63 	b.w	8018b38 <__sflush_r>
 8018c72:	4b07      	ldr	r3, [pc, #28]	; (8018c90 <_fflush_r+0x4c>)
 8018c74:	429c      	cmp	r4, r3
 8018c76:	d101      	bne.n	8018c7c <_fflush_r+0x38>
 8018c78:	68ac      	ldr	r4, [r5, #8]
 8018c7a:	e7f1      	b.n	8018c60 <_fflush_r+0x1c>
 8018c7c:	4b05      	ldr	r3, [pc, #20]	; (8018c94 <_fflush_r+0x50>)
 8018c7e:	429c      	cmp	r4, r3
 8018c80:	bf08      	it	eq
 8018c82:	68ec      	ldreq	r4, [r5, #12]
 8018c84:	e7ec      	b.n	8018c60 <_fflush_r+0x1c>
 8018c86:	2000      	movs	r0, #0
 8018c88:	bd38      	pop	{r3, r4, r5, pc}
 8018c8a:	bf00      	nop
 8018c8c:	0801ae68 	.word	0x0801ae68
 8018c90:	0801ae88 	.word	0x0801ae88
 8018c94:	0801ae48 	.word	0x0801ae48

08018c98 <std>:
 8018c98:	2300      	movs	r3, #0
 8018c9a:	b510      	push	{r4, lr}
 8018c9c:	4604      	mov	r4, r0
 8018c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8018ca2:	6083      	str	r3, [r0, #8]
 8018ca4:	8181      	strh	r1, [r0, #12]
 8018ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8018ca8:	81c2      	strh	r2, [r0, #14]
 8018caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018cae:	6183      	str	r3, [r0, #24]
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	2208      	movs	r2, #8
 8018cb4:	305c      	adds	r0, #92	; 0x5c
 8018cb6:	f7fd f802 	bl	8015cbe <memset>
 8018cba:	4b05      	ldr	r3, [pc, #20]	; (8018cd0 <std+0x38>)
 8018cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8018cbe:	4b05      	ldr	r3, [pc, #20]	; (8018cd4 <std+0x3c>)
 8018cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8018cc2:	4b05      	ldr	r3, [pc, #20]	; (8018cd8 <std+0x40>)
 8018cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018cc6:	4b05      	ldr	r3, [pc, #20]	; (8018cdc <std+0x44>)
 8018cc8:	6224      	str	r4, [r4, #32]
 8018cca:	6323      	str	r3, [r4, #48]	; 0x30
 8018ccc:	bd10      	pop	{r4, pc}
 8018cce:	bf00      	nop
 8018cd0:	0801a155 	.word	0x0801a155
 8018cd4:	0801a177 	.word	0x0801a177
 8018cd8:	0801a1af 	.word	0x0801a1af
 8018cdc:	0801a1d3 	.word	0x0801a1d3

08018ce0 <_cleanup_r>:
 8018ce0:	4901      	ldr	r1, [pc, #4]	; (8018ce8 <_cleanup_r+0x8>)
 8018ce2:	f000 b885 	b.w	8018df0 <_fwalk_reent>
 8018ce6:	bf00      	nop
 8018ce8:	08018c45 	.word	0x08018c45

08018cec <__sfmoreglue>:
 8018cec:	b570      	push	{r4, r5, r6, lr}
 8018cee:	1e4a      	subs	r2, r1, #1
 8018cf0:	2568      	movs	r5, #104	; 0x68
 8018cf2:	4355      	muls	r5, r2
 8018cf4:	460e      	mov	r6, r1
 8018cf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018cfa:	f7fd f837 	bl	8015d6c <_malloc_r>
 8018cfe:	4604      	mov	r4, r0
 8018d00:	b140      	cbz	r0, 8018d14 <__sfmoreglue+0x28>
 8018d02:	2100      	movs	r1, #0
 8018d04:	e9c0 1600 	strd	r1, r6, [r0]
 8018d08:	300c      	adds	r0, #12
 8018d0a:	60a0      	str	r0, [r4, #8]
 8018d0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018d10:	f7fc ffd5 	bl	8015cbe <memset>
 8018d14:	4620      	mov	r0, r4
 8018d16:	bd70      	pop	{r4, r5, r6, pc}

08018d18 <__sinit>:
 8018d18:	6983      	ldr	r3, [r0, #24]
 8018d1a:	b510      	push	{r4, lr}
 8018d1c:	4604      	mov	r4, r0
 8018d1e:	bb33      	cbnz	r3, 8018d6e <__sinit+0x56>
 8018d20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018d24:	6503      	str	r3, [r0, #80]	; 0x50
 8018d26:	4b12      	ldr	r3, [pc, #72]	; (8018d70 <__sinit+0x58>)
 8018d28:	4a12      	ldr	r2, [pc, #72]	; (8018d74 <__sinit+0x5c>)
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	6282      	str	r2, [r0, #40]	; 0x28
 8018d2e:	4298      	cmp	r0, r3
 8018d30:	bf04      	itt	eq
 8018d32:	2301      	moveq	r3, #1
 8018d34:	6183      	streq	r3, [r0, #24]
 8018d36:	f000 f81f 	bl	8018d78 <__sfp>
 8018d3a:	6060      	str	r0, [r4, #4]
 8018d3c:	4620      	mov	r0, r4
 8018d3e:	f000 f81b 	bl	8018d78 <__sfp>
 8018d42:	60a0      	str	r0, [r4, #8]
 8018d44:	4620      	mov	r0, r4
 8018d46:	f000 f817 	bl	8018d78 <__sfp>
 8018d4a:	2200      	movs	r2, #0
 8018d4c:	60e0      	str	r0, [r4, #12]
 8018d4e:	2104      	movs	r1, #4
 8018d50:	6860      	ldr	r0, [r4, #4]
 8018d52:	f7ff ffa1 	bl	8018c98 <std>
 8018d56:	2201      	movs	r2, #1
 8018d58:	2109      	movs	r1, #9
 8018d5a:	68a0      	ldr	r0, [r4, #8]
 8018d5c:	f7ff ff9c 	bl	8018c98 <std>
 8018d60:	2202      	movs	r2, #2
 8018d62:	2112      	movs	r1, #18
 8018d64:	68e0      	ldr	r0, [r4, #12]
 8018d66:	f7ff ff97 	bl	8018c98 <std>
 8018d6a:	2301      	movs	r3, #1
 8018d6c:	61a3      	str	r3, [r4, #24]
 8018d6e:	bd10      	pop	{r4, pc}
 8018d70:	0801ad98 	.word	0x0801ad98
 8018d74:	08018ce1 	.word	0x08018ce1

08018d78 <__sfp>:
 8018d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d7a:	4b1b      	ldr	r3, [pc, #108]	; (8018de8 <__sfp+0x70>)
 8018d7c:	681e      	ldr	r6, [r3, #0]
 8018d7e:	69b3      	ldr	r3, [r6, #24]
 8018d80:	4607      	mov	r7, r0
 8018d82:	b913      	cbnz	r3, 8018d8a <__sfp+0x12>
 8018d84:	4630      	mov	r0, r6
 8018d86:	f7ff ffc7 	bl	8018d18 <__sinit>
 8018d8a:	3648      	adds	r6, #72	; 0x48
 8018d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018d90:	3b01      	subs	r3, #1
 8018d92:	d503      	bpl.n	8018d9c <__sfp+0x24>
 8018d94:	6833      	ldr	r3, [r6, #0]
 8018d96:	b133      	cbz	r3, 8018da6 <__sfp+0x2e>
 8018d98:	6836      	ldr	r6, [r6, #0]
 8018d9a:	e7f7      	b.n	8018d8c <__sfp+0x14>
 8018d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018da0:	b16d      	cbz	r5, 8018dbe <__sfp+0x46>
 8018da2:	3468      	adds	r4, #104	; 0x68
 8018da4:	e7f4      	b.n	8018d90 <__sfp+0x18>
 8018da6:	2104      	movs	r1, #4
 8018da8:	4638      	mov	r0, r7
 8018daa:	f7ff ff9f 	bl	8018cec <__sfmoreglue>
 8018dae:	6030      	str	r0, [r6, #0]
 8018db0:	2800      	cmp	r0, #0
 8018db2:	d1f1      	bne.n	8018d98 <__sfp+0x20>
 8018db4:	230c      	movs	r3, #12
 8018db6:	603b      	str	r3, [r7, #0]
 8018db8:	4604      	mov	r4, r0
 8018dba:	4620      	mov	r0, r4
 8018dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dbe:	4b0b      	ldr	r3, [pc, #44]	; (8018dec <__sfp+0x74>)
 8018dc0:	6665      	str	r5, [r4, #100]	; 0x64
 8018dc2:	e9c4 5500 	strd	r5, r5, [r4]
 8018dc6:	60a5      	str	r5, [r4, #8]
 8018dc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018dcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018dd0:	2208      	movs	r2, #8
 8018dd2:	4629      	mov	r1, r5
 8018dd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018dd8:	f7fc ff71 	bl	8015cbe <memset>
 8018ddc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018de0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018de4:	e7e9      	b.n	8018dba <__sfp+0x42>
 8018de6:	bf00      	nop
 8018de8:	0801ad98 	.word	0x0801ad98
 8018dec:	ffff0001 	.word	0xffff0001

08018df0 <_fwalk_reent>:
 8018df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018df4:	4680      	mov	r8, r0
 8018df6:	4689      	mov	r9, r1
 8018df8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018dfc:	2600      	movs	r6, #0
 8018dfe:	b914      	cbnz	r4, 8018e06 <_fwalk_reent+0x16>
 8018e00:	4630      	mov	r0, r6
 8018e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018e0a:	3f01      	subs	r7, #1
 8018e0c:	d501      	bpl.n	8018e12 <_fwalk_reent+0x22>
 8018e0e:	6824      	ldr	r4, [r4, #0]
 8018e10:	e7f5      	b.n	8018dfe <_fwalk_reent+0xe>
 8018e12:	89ab      	ldrh	r3, [r5, #12]
 8018e14:	2b01      	cmp	r3, #1
 8018e16:	d907      	bls.n	8018e28 <_fwalk_reent+0x38>
 8018e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018e1c:	3301      	adds	r3, #1
 8018e1e:	d003      	beq.n	8018e28 <_fwalk_reent+0x38>
 8018e20:	4629      	mov	r1, r5
 8018e22:	4640      	mov	r0, r8
 8018e24:	47c8      	blx	r9
 8018e26:	4306      	orrs	r6, r0
 8018e28:	3568      	adds	r5, #104	; 0x68
 8018e2a:	e7ee      	b.n	8018e0a <_fwalk_reent+0x1a>

08018e2c <rshift>:
 8018e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e2e:	6906      	ldr	r6, [r0, #16]
 8018e30:	114b      	asrs	r3, r1, #5
 8018e32:	429e      	cmp	r6, r3
 8018e34:	f100 0414 	add.w	r4, r0, #20
 8018e38:	dd30      	ble.n	8018e9c <rshift+0x70>
 8018e3a:	f011 011f 	ands.w	r1, r1, #31
 8018e3e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018e42:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018e46:	d108      	bne.n	8018e5a <rshift+0x2e>
 8018e48:	4621      	mov	r1, r4
 8018e4a:	42b2      	cmp	r2, r6
 8018e4c:	460b      	mov	r3, r1
 8018e4e:	d211      	bcs.n	8018e74 <rshift+0x48>
 8018e50:	f852 3b04 	ldr.w	r3, [r2], #4
 8018e54:	f841 3b04 	str.w	r3, [r1], #4
 8018e58:	e7f7      	b.n	8018e4a <rshift+0x1e>
 8018e5a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018e5e:	f1c1 0c20 	rsb	ip, r1, #32
 8018e62:	40cd      	lsrs	r5, r1
 8018e64:	3204      	adds	r2, #4
 8018e66:	4623      	mov	r3, r4
 8018e68:	42b2      	cmp	r2, r6
 8018e6a:	4617      	mov	r7, r2
 8018e6c:	d30c      	bcc.n	8018e88 <rshift+0x5c>
 8018e6e:	601d      	str	r5, [r3, #0]
 8018e70:	b105      	cbz	r5, 8018e74 <rshift+0x48>
 8018e72:	3304      	adds	r3, #4
 8018e74:	1b1a      	subs	r2, r3, r4
 8018e76:	42a3      	cmp	r3, r4
 8018e78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018e7c:	bf08      	it	eq
 8018e7e:	2300      	moveq	r3, #0
 8018e80:	6102      	str	r2, [r0, #16]
 8018e82:	bf08      	it	eq
 8018e84:	6143      	streq	r3, [r0, #20]
 8018e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e88:	683f      	ldr	r7, [r7, #0]
 8018e8a:	fa07 f70c 	lsl.w	r7, r7, ip
 8018e8e:	433d      	orrs	r5, r7
 8018e90:	f843 5b04 	str.w	r5, [r3], #4
 8018e94:	f852 5b04 	ldr.w	r5, [r2], #4
 8018e98:	40cd      	lsrs	r5, r1
 8018e9a:	e7e5      	b.n	8018e68 <rshift+0x3c>
 8018e9c:	4623      	mov	r3, r4
 8018e9e:	e7e9      	b.n	8018e74 <rshift+0x48>

08018ea0 <__hexdig_fun>:
 8018ea0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018ea4:	2b09      	cmp	r3, #9
 8018ea6:	d802      	bhi.n	8018eae <__hexdig_fun+0xe>
 8018ea8:	3820      	subs	r0, #32
 8018eaa:	b2c0      	uxtb	r0, r0
 8018eac:	4770      	bx	lr
 8018eae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018eb2:	2b05      	cmp	r3, #5
 8018eb4:	d801      	bhi.n	8018eba <__hexdig_fun+0x1a>
 8018eb6:	3847      	subs	r0, #71	; 0x47
 8018eb8:	e7f7      	b.n	8018eaa <__hexdig_fun+0xa>
 8018eba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018ebe:	2b05      	cmp	r3, #5
 8018ec0:	d801      	bhi.n	8018ec6 <__hexdig_fun+0x26>
 8018ec2:	3827      	subs	r0, #39	; 0x27
 8018ec4:	e7f1      	b.n	8018eaa <__hexdig_fun+0xa>
 8018ec6:	2000      	movs	r0, #0
 8018ec8:	4770      	bx	lr

08018eca <__gethex>:
 8018eca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ece:	b08b      	sub	sp, #44	; 0x2c
 8018ed0:	468a      	mov	sl, r1
 8018ed2:	9002      	str	r0, [sp, #8]
 8018ed4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018ed6:	9306      	str	r3, [sp, #24]
 8018ed8:	4690      	mov	r8, r2
 8018eda:	f000 fad0 	bl	801947e <__localeconv_l>
 8018ede:	6803      	ldr	r3, [r0, #0]
 8018ee0:	9303      	str	r3, [sp, #12]
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	f7e7 f984 	bl	80001f0 <strlen>
 8018ee8:	9b03      	ldr	r3, [sp, #12]
 8018eea:	9001      	str	r0, [sp, #4]
 8018eec:	4403      	add	r3, r0
 8018eee:	f04f 0b00 	mov.w	fp, #0
 8018ef2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018ef6:	9307      	str	r3, [sp, #28]
 8018ef8:	f8da 3000 	ldr.w	r3, [sl]
 8018efc:	3302      	adds	r3, #2
 8018efe:	461f      	mov	r7, r3
 8018f00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018f04:	2830      	cmp	r0, #48	; 0x30
 8018f06:	d06c      	beq.n	8018fe2 <__gethex+0x118>
 8018f08:	f7ff ffca 	bl	8018ea0 <__hexdig_fun>
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	2800      	cmp	r0, #0
 8018f10:	d16a      	bne.n	8018fe8 <__gethex+0x11e>
 8018f12:	9a01      	ldr	r2, [sp, #4]
 8018f14:	9903      	ldr	r1, [sp, #12]
 8018f16:	4638      	mov	r0, r7
 8018f18:	f001 f95f 	bl	801a1da <strncmp>
 8018f1c:	2800      	cmp	r0, #0
 8018f1e:	d166      	bne.n	8018fee <__gethex+0x124>
 8018f20:	9b01      	ldr	r3, [sp, #4]
 8018f22:	5cf8      	ldrb	r0, [r7, r3]
 8018f24:	18fe      	adds	r6, r7, r3
 8018f26:	f7ff ffbb 	bl	8018ea0 <__hexdig_fun>
 8018f2a:	2800      	cmp	r0, #0
 8018f2c:	d062      	beq.n	8018ff4 <__gethex+0x12a>
 8018f2e:	4633      	mov	r3, r6
 8018f30:	7818      	ldrb	r0, [r3, #0]
 8018f32:	2830      	cmp	r0, #48	; 0x30
 8018f34:	461f      	mov	r7, r3
 8018f36:	f103 0301 	add.w	r3, r3, #1
 8018f3a:	d0f9      	beq.n	8018f30 <__gethex+0x66>
 8018f3c:	f7ff ffb0 	bl	8018ea0 <__hexdig_fun>
 8018f40:	fab0 f580 	clz	r5, r0
 8018f44:	096d      	lsrs	r5, r5, #5
 8018f46:	4634      	mov	r4, r6
 8018f48:	f04f 0b01 	mov.w	fp, #1
 8018f4c:	463a      	mov	r2, r7
 8018f4e:	4616      	mov	r6, r2
 8018f50:	3201      	adds	r2, #1
 8018f52:	7830      	ldrb	r0, [r6, #0]
 8018f54:	f7ff ffa4 	bl	8018ea0 <__hexdig_fun>
 8018f58:	2800      	cmp	r0, #0
 8018f5a:	d1f8      	bne.n	8018f4e <__gethex+0x84>
 8018f5c:	9a01      	ldr	r2, [sp, #4]
 8018f5e:	9903      	ldr	r1, [sp, #12]
 8018f60:	4630      	mov	r0, r6
 8018f62:	f001 f93a 	bl	801a1da <strncmp>
 8018f66:	b950      	cbnz	r0, 8018f7e <__gethex+0xb4>
 8018f68:	b954      	cbnz	r4, 8018f80 <__gethex+0xb6>
 8018f6a:	9b01      	ldr	r3, [sp, #4]
 8018f6c:	18f4      	adds	r4, r6, r3
 8018f6e:	4622      	mov	r2, r4
 8018f70:	4616      	mov	r6, r2
 8018f72:	3201      	adds	r2, #1
 8018f74:	7830      	ldrb	r0, [r6, #0]
 8018f76:	f7ff ff93 	bl	8018ea0 <__hexdig_fun>
 8018f7a:	2800      	cmp	r0, #0
 8018f7c:	d1f8      	bne.n	8018f70 <__gethex+0xa6>
 8018f7e:	b10c      	cbz	r4, 8018f84 <__gethex+0xba>
 8018f80:	1ba4      	subs	r4, r4, r6
 8018f82:	00a4      	lsls	r4, r4, #2
 8018f84:	7833      	ldrb	r3, [r6, #0]
 8018f86:	2b50      	cmp	r3, #80	; 0x50
 8018f88:	d001      	beq.n	8018f8e <__gethex+0xc4>
 8018f8a:	2b70      	cmp	r3, #112	; 0x70
 8018f8c:	d140      	bne.n	8019010 <__gethex+0x146>
 8018f8e:	7873      	ldrb	r3, [r6, #1]
 8018f90:	2b2b      	cmp	r3, #43	; 0x2b
 8018f92:	d031      	beq.n	8018ff8 <__gethex+0x12e>
 8018f94:	2b2d      	cmp	r3, #45	; 0x2d
 8018f96:	d033      	beq.n	8019000 <__gethex+0x136>
 8018f98:	1c71      	adds	r1, r6, #1
 8018f9a:	f04f 0900 	mov.w	r9, #0
 8018f9e:	7808      	ldrb	r0, [r1, #0]
 8018fa0:	f7ff ff7e 	bl	8018ea0 <__hexdig_fun>
 8018fa4:	1e43      	subs	r3, r0, #1
 8018fa6:	b2db      	uxtb	r3, r3
 8018fa8:	2b18      	cmp	r3, #24
 8018faa:	d831      	bhi.n	8019010 <__gethex+0x146>
 8018fac:	f1a0 0210 	sub.w	r2, r0, #16
 8018fb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018fb4:	f7ff ff74 	bl	8018ea0 <__hexdig_fun>
 8018fb8:	1e43      	subs	r3, r0, #1
 8018fba:	b2db      	uxtb	r3, r3
 8018fbc:	2b18      	cmp	r3, #24
 8018fbe:	d922      	bls.n	8019006 <__gethex+0x13c>
 8018fc0:	f1b9 0f00 	cmp.w	r9, #0
 8018fc4:	d000      	beq.n	8018fc8 <__gethex+0xfe>
 8018fc6:	4252      	negs	r2, r2
 8018fc8:	4414      	add	r4, r2
 8018fca:	f8ca 1000 	str.w	r1, [sl]
 8018fce:	b30d      	cbz	r5, 8019014 <__gethex+0x14a>
 8018fd0:	f1bb 0f00 	cmp.w	fp, #0
 8018fd4:	bf0c      	ite	eq
 8018fd6:	2706      	moveq	r7, #6
 8018fd8:	2700      	movne	r7, #0
 8018fda:	4638      	mov	r0, r7
 8018fdc:	b00b      	add	sp, #44	; 0x2c
 8018fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fe2:	f10b 0b01 	add.w	fp, fp, #1
 8018fe6:	e78a      	b.n	8018efe <__gethex+0x34>
 8018fe8:	2500      	movs	r5, #0
 8018fea:	462c      	mov	r4, r5
 8018fec:	e7ae      	b.n	8018f4c <__gethex+0x82>
 8018fee:	463e      	mov	r6, r7
 8018ff0:	2501      	movs	r5, #1
 8018ff2:	e7c7      	b.n	8018f84 <__gethex+0xba>
 8018ff4:	4604      	mov	r4, r0
 8018ff6:	e7fb      	b.n	8018ff0 <__gethex+0x126>
 8018ff8:	f04f 0900 	mov.w	r9, #0
 8018ffc:	1cb1      	adds	r1, r6, #2
 8018ffe:	e7ce      	b.n	8018f9e <__gethex+0xd4>
 8019000:	f04f 0901 	mov.w	r9, #1
 8019004:	e7fa      	b.n	8018ffc <__gethex+0x132>
 8019006:	230a      	movs	r3, #10
 8019008:	fb03 0202 	mla	r2, r3, r2, r0
 801900c:	3a10      	subs	r2, #16
 801900e:	e7cf      	b.n	8018fb0 <__gethex+0xe6>
 8019010:	4631      	mov	r1, r6
 8019012:	e7da      	b.n	8018fca <__gethex+0x100>
 8019014:	1bf3      	subs	r3, r6, r7
 8019016:	3b01      	subs	r3, #1
 8019018:	4629      	mov	r1, r5
 801901a:	2b07      	cmp	r3, #7
 801901c:	dc49      	bgt.n	80190b2 <__gethex+0x1e8>
 801901e:	9802      	ldr	r0, [sp, #8]
 8019020:	f000 facf 	bl	80195c2 <_Balloc>
 8019024:	9b01      	ldr	r3, [sp, #4]
 8019026:	f100 0914 	add.w	r9, r0, #20
 801902a:	f04f 0b00 	mov.w	fp, #0
 801902e:	f1c3 0301 	rsb	r3, r3, #1
 8019032:	4605      	mov	r5, r0
 8019034:	f8cd 9010 	str.w	r9, [sp, #16]
 8019038:	46da      	mov	sl, fp
 801903a:	9308      	str	r3, [sp, #32]
 801903c:	42b7      	cmp	r7, r6
 801903e:	d33b      	bcc.n	80190b8 <__gethex+0x1ee>
 8019040:	9804      	ldr	r0, [sp, #16]
 8019042:	f840 ab04 	str.w	sl, [r0], #4
 8019046:	eba0 0009 	sub.w	r0, r0, r9
 801904a:	1080      	asrs	r0, r0, #2
 801904c:	6128      	str	r0, [r5, #16]
 801904e:	0147      	lsls	r7, r0, #5
 8019050:	4650      	mov	r0, sl
 8019052:	f000 fb7a 	bl	801974a <__hi0bits>
 8019056:	f8d8 6000 	ldr.w	r6, [r8]
 801905a:	1a3f      	subs	r7, r7, r0
 801905c:	42b7      	cmp	r7, r6
 801905e:	dd64      	ble.n	801912a <__gethex+0x260>
 8019060:	1bbf      	subs	r7, r7, r6
 8019062:	4639      	mov	r1, r7
 8019064:	4628      	mov	r0, r5
 8019066:	f000 fe89 	bl	8019d7c <__any_on>
 801906a:	4682      	mov	sl, r0
 801906c:	b178      	cbz	r0, 801908e <__gethex+0x1c4>
 801906e:	1e7b      	subs	r3, r7, #1
 8019070:	1159      	asrs	r1, r3, #5
 8019072:	f003 021f 	and.w	r2, r3, #31
 8019076:	f04f 0a01 	mov.w	sl, #1
 801907a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801907e:	fa0a f202 	lsl.w	r2, sl, r2
 8019082:	420a      	tst	r2, r1
 8019084:	d003      	beq.n	801908e <__gethex+0x1c4>
 8019086:	4553      	cmp	r3, sl
 8019088:	dc46      	bgt.n	8019118 <__gethex+0x24e>
 801908a:	f04f 0a02 	mov.w	sl, #2
 801908e:	4639      	mov	r1, r7
 8019090:	4628      	mov	r0, r5
 8019092:	f7ff fecb 	bl	8018e2c <rshift>
 8019096:	443c      	add	r4, r7
 8019098:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801909c:	42a3      	cmp	r3, r4
 801909e:	da52      	bge.n	8019146 <__gethex+0x27c>
 80190a0:	4629      	mov	r1, r5
 80190a2:	9802      	ldr	r0, [sp, #8]
 80190a4:	f000 fac1 	bl	801962a <_Bfree>
 80190a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80190aa:	2300      	movs	r3, #0
 80190ac:	6013      	str	r3, [r2, #0]
 80190ae:	27a3      	movs	r7, #163	; 0xa3
 80190b0:	e793      	b.n	8018fda <__gethex+0x110>
 80190b2:	3101      	adds	r1, #1
 80190b4:	105b      	asrs	r3, r3, #1
 80190b6:	e7b0      	b.n	801901a <__gethex+0x150>
 80190b8:	1e73      	subs	r3, r6, #1
 80190ba:	9305      	str	r3, [sp, #20]
 80190bc:	9a07      	ldr	r2, [sp, #28]
 80190be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80190c2:	4293      	cmp	r3, r2
 80190c4:	d018      	beq.n	80190f8 <__gethex+0x22e>
 80190c6:	f1bb 0f20 	cmp.w	fp, #32
 80190ca:	d107      	bne.n	80190dc <__gethex+0x212>
 80190cc:	9b04      	ldr	r3, [sp, #16]
 80190ce:	f8c3 a000 	str.w	sl, [r3]
 80190d2:	3304      	adds	r3, #4
 80190d4:	f04f 0a00 	mov.w	sl, #0
 80190d8:	9304      	str	r3, [sp, #16]
 80190da:	46d3      	mov	fp, sl
 80190dc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80190e0:	f7ff fede 	bl	8018ea0 <__hexdig_fun>
 80190e4:	f000 000f 	and.w	r0, r0, #15
 80190e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80190ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80190f0:	f10b 0b04 	add.w	fp, fp, #4
 80190f4:	9b05      	ldr	r3, [sp, #20]
 80190f6:	e00d      	b.n	8019114 <__gethex+0x24a>
 80190f8:	9b05      	ldr	r3, [sp, #20]
 80190fa:	9a08      	ldr	r2, [sp, #32]
 80190fc:	4413      	add	r3, r2
 80190fe:	42bb      	cmp	r3, r7
 8019100:	d3e1      	bcc.n	80190c6 <__gethex+0x1fc>
 8019102:	4618      	mov	r0, r3
 8019104:	9a01      	ldr	r2, [sp, #4]
 8019106:	9903      	ldr	r1, [sp, #12]
 8019108:	9309      	str	r3, [sp, #36]	; 0x24
 801910a:	f001 f866 	bl	801a1da <strncmp>
 801910e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019110:	2800      	cmp	r0, #0
 8019112:	d1d8      	bne.n	80190c6 <__gethex+0x1fc>
 8019114:	461e      	mov	r6, r3
 8019116:	e791      	b.n	801903c <__gethex+0x172>
 8019118:	1eb9      	subs	r1, r7, #2
 801911a:	4628      	mov	r0, r5
 801911c:	f000 fe2e 	bl	8019d7c <__any_on>
 8019120:	2800      	cmp	r0, #0
 8019122:	d0b2      	beq.n	801908a <__gethex+0x1c0>
 8019124:	f04f 0a03 	mov.w	sl, #3
 8019128:	e7b1      	b.n	801908e <__gethex+0x1c4>
 801912a:	da09      	bge.n	8019140 <__gethex+0x276>
 801912c:	1bf7      	subs	r7, r6, r7
 801912e:	4629      	mov	r1, r5
 8019130:	463a      	mov	r2, r7
 8019132:	9802      	ldr	r0, [sp, #8]
 8019134:	f000 fc44 	bl	80199c0 <__lshift>
 8019138:	1be4      	subs	r4, r4, r7
 801913a:	4605      	mov	r5, r0
 801913c:	f100 0914 	add.w	r9, r0, #20
 8019140:	f04f 0a00 	mov.w	sl, #0
 8019144:	e7a8      	b.n	8019098 <__gethex+0x1ce>
 8019146:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801914a:	42a0      	cmp	r0, r4
 801914c:	dd6a      	ble.n	8019224 <__gethex+0x35a>
 801914e:	1b04      	subs	r4, r0, r4
 8019150:	42a6      	cmp	r6, r4
 8019152:	dc2e      	bgt.n	80191b2 <__gethex+0x2e8>
 8019154:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019158:	2b02      	cmp	r3, #2
 801915a:	d022      	beq.n	80191a2 <__gethex+0x2d8>
 801915c:	2b03      	cmp	r3, #3
 801915e:	d024      	beq.n	80191aa <__gethex+0x2e0>
 8019160:	2b01      	cmp	r3, #1
 8019162:	d115      	bne.n	8019190 <__gethex+0x2c6>
 8019164:	42a6      	cmp	r6, r4
 8019166:	d113      	bne.n	8019190 <__gethex+0x2c6>
 8019168:	2e01      	cmp	r6, #1
 801916a:	dc0b      	bgt.n	8019184 <__gethex+0x2ba>
 801916c:	9a06      	ldr	r2, [sp, #24]
 801916e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019172:	6013      	str	r3, [r2, #0]
 8019174:	2301      	movs	r3, #1
 8019176:	612b      	str	r3, [r5, #16]
 8019178:	f8c9 3000 	str.w	r3, [r9]
 801917c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801917e:	2762      	movs	r7, #98	; 0x62
 8019180:	601d      	str	r5, [r3, #0]
 8019182:	e72a      	b.n	8018fda <__gethex+0x110>
 8019184:	1e71      	subs	r1, r6, #1
 8019186:	4628      	mov	r0, r5
 8019188:	f000 fdf8 	bl	8019d7c <__any_on>
 801918c:	2800      	cmp	r0, #0
 801918e:	d1ed      	bne.n	801916c <__gethex+0x2a2>
 8019190:	4629      	mov	r1, r5
 8019192:	9802      	ldr	r0, [sp, #8]
 8019194:	f000 fa49 	bl	801962a <_Bfree>
 8019198:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801919a:	2300      	movs	r3, #0
 801919c:	6013      	str	r3, [r2, #0]
 801919e:	2750      	movs	r7, #80	; 0x50
 80191a0:	e71b      	b.n	8018fda <__gethex+0x110>
 80191a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d0e1      	beq.n	801916c <__gethex+0x2a2>
 80191a8:	e7f2      	b.n	8019190 <__gethex+0x2c6>
 80191aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d1dd      	bne.n	801916c <__gethex+0x2a2>
 80191b0:	e7ee      	b.n	8019190 <__gethex+0x2c6>
 80191b2:	1e67      	subs	r7, r4, #1
 80191b4:	f1ba 0f00 	cmp.w	sl, #0
 80191b8:	d131      	bne.n	801921e <__gethex+0x354>
 80191ba:	b127      	cbz	r7, 80191c6 <__gethex+0x2fc>
 80191bc:	4639      	mov	r1, r7
 80191be:	4628      	mov	r0, r5
 80191c0:	f000 fddc 	bl	8019d7c <__any_on>
 80191c4:	4682      	mov	sl, r0
 80191c6:	117a      	asrs	r2, r7, #5
 80191c8:	2301      	movs	r3, #1
 80191ca:	f007 071f 	and.w	r7, r7, #31
 80191ce:	fa03 f707 	lsl.w	r7, r3, r7
 80191d2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80191d6:	4621      	mov	r1, r4
 80191d8:	421f      	tst	r7, r3
 80191da:	4628      	mov	r0, r5
 80191dc:	bf18      	it	ne
 80191de:	f04a 0a02 	orrne.w	sl, sl, #2
 80191e2:	1b36      	subs	r6, r6, r4
 80191e4:	f7ff fe22 	bl	8018e2c <rshift>
 80191e8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80191ec:	2702      	movs	r7, #2
 80191ee:	f1ba 0f00 	cmp.w	sl, #0
 80191f2:	d048      	beq.n	8019286 <__gethex+0x3bc>
 80191f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80191f8:	2b02      	cmp	r3, #2
 80191fa:	d015      	beq.n	8019228 <__gethex+0x35e>
 80191fc:	2b03      	cmp	r3, #3
 80191fe:	d017      	beq.n	8019230 <__gethex+0x366>
 8019200:	2b01      	cmp	r3, #1
 8019202:	d109      	bne.n	8019218 <__gethex+0x34e>
 8019204:	f01a 0f02 	tst.w	sl, #2
 8019208:	d006      	beq.n	8019218 <__gethex+0x34e>
 801920a:	f8d9 3000 	ldr.w	r3, [r9]
 801920e:	ea4a 0a03 	orr.w	sl, sl, r3
 8019212:	f01a 0f01 	tst.w	sl, #1
 8019216:	d10e      	bne.n	8019236 <__gethex+0x36c>
 8019218:	f047 0710 	orr.w	r7, r7, #16
 801921c:	e033      	b.n	8019286 <__gethex+0x3bc>
 801921e:	f04f 0a01 	mov.w	sl, #1
 8019222:	e7d0      	b.n	80191c6 <__gethex+0x2fc>
 8019224:	2701      	movs	r7, #1
 8019226:	e7e2      	b.n	80191ee <__gethex+0x324>
 8019228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801922a:	f1c3 0301 	rsb	r3, r3, #1
 801922e:	9315      	str	r3, [sp, #84]	; 0x54
 8019230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019232:	2b00      	cmp	r3, #0
 8019234:	d0f0      	beq.n	8019218 <__gethex+0x34e>
 8019236:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801923a:	f105 0314 	add.w	r3, r5, #20
 801923e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8019242:	eb03 010a 	add.w	r1, r3, sl
 8019246:	f04f 0c00 	mov.w	ip, #0
 801924a:	4618      	mov	r0, r3
 801924c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019250:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019254:	d01c      	beq.n	8019290 <__gethex+0x3c6>
 8019256:	3201      	adds	r2, #1
 8019258:	6002      	str	r2, [r0, #0]
 801925a:	2f02      	cmp	r7, #2
 801925c:	f105 0314 	add.w	r3, r5, #20
 8019260:	d138      	bne.n	80192d4 <__gethex+0x40a>
 8019262:	f8d8 2000 	ldr.w	r2, [r8]
 8019266:	3a01      	subs	r2, #1
 8019268:	42b2      	cmp	r2, r6
 801926a:	d10a      	bne.n	8019282 <__gethex+0x3b8>
 801926c:	1171      	asrs	r1, r6, #5
 801926e:	2201      	movs	r2, #1
 8019270:	f006 061f 	and.w	r6, r6, #31
 8019274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019278:	fa02 f606 	lsl.w	r6, r2, r6
 801927c:	421e      	tst	r6, r3
 801927e:	bf18      	it	ne
 8019280:	4617      	movne	r7, r2
 8019282:	f047 0720 	orr.w	r7, r7, #32
 8019286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019288:	601d      	str	r5, [r3, #0]
 801928a:	9b06      	ldr	r3, [sp, #24]
 801928c:	601c      	str	r4, [r3, #0]
 801928e:	e6a4      	b.n	8018fda <__gethex+0x110>
 8019290:	4299      	cmp	r1, r3
 8019292:	f843 cc04 	str.w	ip, [r3, #-4]
 8019296:	d8d8      	bhi.n	801924a <__gethex+0x380>
 8019298:	68ab      	ldr	r3, [r5, #8]
 801929a:	4599      	cmp	r9, r3
 801929c:	db12      	blt.n	80192c4 <__gethex+0x3fa>
 801929e:	6869      	ldr	r1, [r5, #4]
 80192a0:	9802      	ldr	r0, [sp, #8]
 80192a2:	3101      	adds	r1, #1
 80192a4:	f000 f98d 	bl	80195c2 <_Balloc>
 80192a8:	692a      	ldr	r2, [r5, #16]
 80192aa:	3202      	adds	r2, #2
 80192ac:	f105 010c 	add.w	r1, r5, #12
 80192b0:	4683      	mov	fp, r0
 80192b2:	0092      	lsls	r2, r2, #2
 80192b4:	300c      	adds	r0, #12
 80192b6:	f7fc fcf7 	bl	8015ca8 <memcpy>
 80192ba:	4629      	mov	r1, r5
 80192bc:	9802      	ldr	r0, [sp, #8]
 80192be:	f000 f9b4 	bl	801962a <_Bfree>
 80192c2:	465d      	mov	r5, fp
 80192c4:	692b      	ldr	r3, [r5, #16]
 80192c6:	1c5a      	adds	r2, r3, #1
 80192c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80192cc:	612a      	str	r2, [r5, #16]
 80192ce:	2201      	movs	r2, #1
 80192d0:	615a      	str	r2, [r3, #20]
 80192d2:	e7c2      	b.n	801925a <__gethex+0x390>
 80192d4:	692a      	ldr	r2, [r5, #16]
 80192d6:	454a      	cmp	r2, r9
 80192d8:	dd0b      	ble.n	80192f2 <__gethex+0x428>
 80192da:	2101      	movs	r1, #1
 80192dc:	4628      	mov	r0, r5
 80192de:	f7ff fda5 	bl	8018e2c <rshift>
 80192e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80192e6:	3401      	adds	r4, #1
 80192e8:	42a3      	cmp	r3, r4
 80192ea:	f6ff aed9 	blt.w	80190a0 <__gethex+0x1d6>
 80192ee:	2701      	movs	r7, #1
 80192f0:	e7c7      	b.n	8019282 <__gethex+0x3b8>
 80192f2:	f016 061f 	ands.w	r6, r6, #31
 80192f6:	d0fa      	beq.n	80192ee <__gethex+0x424>
 80192f8:	449a      	add	sl, r3
 80192fa:	f1c6 0620 	rsb	r6, r6, #32
 80192fe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019302:	f000 fa22 	bl	801974a <__hi0bits>
 8019306:	42b0      	cmp	r0, r6
 8019308:	dbe7      	blt.n	80192da <__gethex+0x410>
 801930a:	e7f0      	b.n	80192ee <__gethex+0x424>

0801930c <L_shift>:
 801930c:	f1c2 0208 	rsb	r2, r2, #8
 8019310:	0092      	lsls	r2, r2, #2
 8019312:	b570      	push	{r4, r5, r6, lr}
 8019314:	f1c2 0620 	rsb	r6, r2, #32
 8019318:	6843      	ldr	r3, [r0, #4]
 801931a:	6804      	ldr	r4, [r0, #0]
 801931c:	fa03 f506 	lsl.w	r5, r3, r6
 8019320:	432c      	orrs	r4, r5
 8019322:	40d3      	lsrs	r3, r2
 8019324:	6004      	str	r4, [r0, #0]
 8019326:	f840 3f04 	str.w	r3, [r0, #4]!
 801932a:	4288      	cmp	r0, r1
 801932c:	d3f4      	bcc.n	8019318 <L_shift+0xc>
 801932e:	bd70      	pop	{r4, r5, r6, pc}

08019330 <__match>:
 8019330:	b530      	push	{r4, r5, lr}
 8019332:	6803      	ldr	r3, [r0, #0]
 8019334:	3301      	adds	r3, #1
 8019336:	f811 4b01 	ldrb.w	r4, [r1], #1
 801933a:	b914      	cbnz	r4, 8019342 <__match+0x12>
 801933c:	6003      	str	r3, [r0, #0]
 801933e:	2001      	movs	r0, #1
 8019340:	bd30      	pop	{r4, r5, pc}
 8019342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019346:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801934a:	2d19      	cmp	r5, #25
 801934c:	bf98      	it	ls
 801934e:	3220      	addls	r2, #32
 8019350:	42a2      	cmp	r2, r4
 8019352:	d0f0      	beq.n	8019336 <__match+0x6>
 8019354:	2000      	movs	r0, #0
 8019356:	e7f3      	b.n	8019340 <__match+0x10>

08019358 <__hexnan>:
 8019358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801935c:	680b      	ldr	r3, [r1, #0]
 801935e:	6801      	ldr	r1, [r0, #0]
 8019360:	115f      	asrs	r7, r3, #5
 8019362:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8019366:	f013 031f 	ands.w	r3, r3, #31
 801936a:	b087      	sub	sp, #28
 801936c:	bf18      	it	ne
 801936e:	3704      	addne	r7, #4
 8019370:	2500      	movs	r5, #0
 8019372:	1f3e      	subs	r6, r7, #4
 8019374:	4682      	mov	sl, r0
 8019376:	4690      	mov	r8, r2
 8019378:	9301      	str	r3, [sp, #4]
 801937a:	f847 5c04 	str.w	r5, [r7, #-4]
 801937e:	46b1      	mov	r9, r6
 8019380:	4634      	mov	r4, r6
 8019382:	9502      	str	r5, [sp, #8]
 8019384:	46ab      	mov	fp, r5
 8019386:	784a      	ldrb	r2, [r1, #1]
 8019388:	1c4b      	adds	r3, r1, #1
 801938a:	9303      	str	r3, [sp, #12]
 801938c:	b342      	cbz	r2, 80193e0 <__hexnan+0x88>
 801938e:	4610      	mov	r0, r2
 8019390:	9105      	str	r1, [sp, #20]
 8019392:	9204      	str	r2, [sp, #16]
 8019394:	f7ff fd84 	bl	8018ea0 <__hexdig_fun>
 8019398:	2800      	cmp	r0, #0
 801939a:	d143      	bne.n	8019424 <__hexnan+0xcc>
 801939c:	9a04      	ldr	r2, [sp, #16]
 801939e:	9905      	ldr	r1, [sp, #20]
 80193a0:	2a20      	cmp	r2, #32
 80193a2:	d818      	bhi.n	80193d6 <__hexnan+0x7e>
 80193a4:	9b02      	ldr	r3, [sp, #8]
 80193a6:	459b      	cmp	fp, r3
 80193a8:	dd13      	ble.n	80193d2 <__hexnan+0x7a>
 80193aa:	454c      	cmp	r4, r9
 80193ac:	d206      	bcs.n	80193bc <__hexnan+0x64>
 80193ae:	2d07      	cmp	r5, #7
 80193b0:	dc04      	bgt.n	80193bc <__hexnan+0x64>
 80193b2:	462a      	mov	r2, r5
 80193b4:	4649      	mov	r1, r9
 80193b6:	4620      	mov	r0, r4
 80193b8:	f7ff ffa8 	bl	801930c <L_shift>
 80193bc:	4544      	cmp	r4, r8
 80193be:	d944      	bls.n	801944a <__hexnan+0xf2>
 80193c0:	2300      	movs	r3, #0
 80193c2:	f1a4 0904 	sub.w	r9, r4, #4
 80193c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80193ca:	f8cd b008 	str.w	fp, [sp, #8]
 80193ce:	464c      	mov	r4, r9
 80193d0:	461d      	mov	r5, r3
 80193d2:	9903      	ldr	r1, [sp, #12]
 80193d4:	e7d7      	b.n	8019386 <__hexnan+0x2e>
 80193d6:	2a29      	cmp	r2, #41	; 0x29
 80193d8:	d14a      	bne.n	8019470 <__hexnan+0x118>
 80193da:	3102      	adds	r1, #2
 80193dc:	f8ca 1000 	str.w	r1, [sl]
 80193e0:	f1bb 0f00 	cmp.w	fp, #0
 80193e4:	d044      	beq.n	8019470 <__hexnan+0x118>
 80193e6:	454c      	cmp	r4, r9
 80193e8:	d206      	bcs.n	80193f8 <__hexnan+0xa0>
 80193ea:	2d07      	cmp	r5, #7
 80193ec:	dc04      	bgt.n	80193f8 <__hexnan+0xa0>
 80193ee:	462a      	mov	r2, r5
 80193f0:	4649      	mov	r1, r9
 80193f2:	4620      	mov	r0, r4
 80193f4:	f7ff ff8a 	bl	801930c <L_shift>
 80193f8:	4544      	cmp	r4, r8
 80193fa:	d928      	bls.n	801944e <__hexnan+0xf6>
 80193fc:	4643      	mov	r3, r8
 80193fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8019402:	f843 2b04 	str.w	r2, [r3], #4
 8019406:	42a6      	cmp	r6, r4
 8019408:	d2f9      	bcs.n	80193fe <__hexnan+0xa6>
 801940a:	2200      	movs	r2, #0
 801940c:	f843 2b04 	str.w	r2, [r3], #4
 8019410:	429e      	cmp	r6, r3
 8019412:	d2fb      	bcs.n	801940c <__hexnan+0xb4>
 8019414:	6833      	ldr	r3, [r6, #0]
 8019416:	b91b      	cbnz	r3, 8019420 <__hexnan+0xc8>
 8019418:	4546      	cmp	r6, r8
 801941a:	d127      	bne.n	801946c <__hexnan+0x114>
 801941c:	2301      	movs	r3, #1
 801941e:	6033      	str	r3, [r6, #0]
 8019420:	2005      	movs	r0, #5
 8019422:	e026      	b.n	8019472 <__hexnan+0x11a>
 8019424:	3501      	adds	r5, #1
 8019426:	2d08      	cmp	r5, #8
 8019428:	f10b 0b01 	add.w	fp, fp, #1
 801942c:	dd06      	ble.n	801943c <__hexnan+0xe4>
 801942e:	4544      	cmp	r4, r8
 8019430:	d9cf      	bls.n	80193d2 <__hexnan+0x7a>
 8019432:	2300      	movs	r3, #0
 8019434:	f844 3c04 	str.w	r3, [r4, #-4]
 8019438:	2501      	movs	r5, #1
 801943a:	3c04      	subs	r4, #4
 801943c:	6822      	ldr	r2, [r4, #0]
 801943e:	f000 000f 	and.w	r0, r0, #15
 8019442:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019446:	6020      	str	r0, [r4, #0]
 8019448:	e7c3      	b.n	80193d2 <__hexnan+0x7a>
 801944a:	2508      	movs	r5, #8
 801944c:	e7c1      	b.n	80193d2 <__hexnan+0x7a>
 801944e:	9b01      	ldr	r3, [sp, #4]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d0df      	beq.n	8019414 <__hexnan+0xbc>
 8019454:	f04f 32ff 	mov.w	r2, #4294967295
 8019458:	f1c3 0320 	rsb	r3, r3, #32
 801945c:	fa22 f303 	lsr.w	r3, r2, r3
 8019460:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019464:	401a      	ands	r2, r3
 8019466:	f847 2c04 	str.w	r2, [r7, #-4]
 801946a:	e7d3      	b.n	8019414 <__hexnan+0xbc>
 801946c:	3e04      	subs	r6, #4
 801946e:	e7d1      	b.n	8019414 <__hexnan+0xbc>
 8019470:	2004      	movs	r0, #4
 8019472:	b007      	add	sp, #28
 8019474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019478 <__locale_ctype_ptr_l>:
 8019478:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801947c:	4770      	bx	lr

0801947e <__localeconv_l>:
 801947e:	30f0      	adds	r0, #240	; 0xf0
 8019480:	4770      	bx	lr
	...

08019484 <_localeconv_r>:
 8019484:	4b04      	ldr	r3, [pc, #16]	; (8019498 <_localeconv_r+0x14>)
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	6a18      	ldr	r0, [r3, #32]
 801948a:	4b04      	ldr	r3, [pc, #16]	; (801949c <_localeconv_r+0x18>)
 801948c:	2800      	cmp	r0, #0
 801948e:	bf08      	it	eq
 8019490:	4618      	moveq	r0, r3
 8019492:	30f0      	adds	r0, #240	; 0xf0
 8019494:	4770      	bx	lr
 8019496:	bf00      	nop
 8019498:	200000c4 	.word	0x200000c4
 801949c:	20000128 	.word	0x20000128

080194a0 <__swhatbuf_r>:
 80194a0:	b570      	push	{r4, r5, r6, lr}
 80194a2:	460e      	mov	r6, r1
 80194a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194a8:	2900      	cmp	r1, #0
 80194aa:	b096      	sub	sp, #88	; 0x58
 80194ac:	4614      	mov	r4, r2
 80194ae:	461d      	mov	r5, r3
 80194b0:	da07      	bge.n	80194c2 <__swhatbuf_r+0x22>
 80194b2:	2300      	movs	r3, #0
 80194b4:	602b      	str	r3, [r5, #0]
 80194b6:	89b3      	ldrh	r3, [r6, #12]
 80194b8:	061a      	lsls	r2, r3, #24
 80194ba:	d410      	bmi.n	80194de <__swhatbuf_r+0x3e>
 80194bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80194c0:	e00e      	b.n	80194e0 <__swhatbuf_r+0x40>
 80194c2:	466a      	mov	r2, sp
 80194c4:	f000 feca 	bl	801a25c <_fstat_r>
 80194c8:	2800      	cmp	r0, #0
 80194ca:	dbf2      	blt.n	80194b2 <__swhatbuf_r+0x12>
 80194cc:	9a01      	ldr	r2, [sp, #4]
 80194ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80194d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80194d6:	425a      	negs	r2, r3
 80194d8:	415a      	adcs	r2, r3
 80194da:	602a      	str	r2, [r5, #0]
 80194dc:	e7ee      	b.n	80194bc <__swhatbuf_r+0x1c>
 80194de:	2340      	movs	r3, #64	; 0x40
 80194e0:	2000      	movs	r0, #0
 80194e2:	6023      	str	r3, [r4, #0]
 80194e4:	b016      	add	sp, #88	; 0x58
 80194e6:	bd70      	pop	{r4, r5, r6, pc}

080194e8 <__smakebuf_r>:
 80194e8:	898b      	ldrh	r3, [r1, #12]
 80194ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80194ec:	079d      	lsls	r5, r3, #30
 80194ee:	4606      	mov	r6, r0
 80194f0:	460c      	mov	r4, r1
 80194f2:	d507      	bpl.n	8019504 <__smakebuf_r+0x1c>
 80194f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80194f8:	6023      	str	r3, [r4, #0]
 80194fa:	6123      	str	r3, [r4, #16]
 80194fc:	2301      	movs	r3, #1
 80194fe:	6163      	str	r3, [r4, #20]
 8019500:	b002      	add	sp, #8
 8019502:	bd70      	pop	{r4, r5, r6, pc}
 8019504:	ab01      	add	r3, sp, #4
 8019506:	466a      	mov	r2, sp
 8019508:	f7ff ffca 	bl	80194a0 <__swhatbuf_r>
 801950c:	9900      	ldr	r1, [sp, #0]
 801950e:	4605      	mov	r5, r0
 8019510:	4630      	mov	r0, r6
 8019512:	f7fc fc2b 	bl	8015d6c <_malloc_r>
 8019516:	b948      	cbnz	r0, 801952c <__smakebuf_r+0x44>
 8019518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801951c:	059a      	lsls	r2, r3, #22
 801951e:	d4ef      	bmi.n	8019500 <__smakebuf_r+0x18>
 8019520:	f023 0303 	bic.w	r3, r3, #3
 8019524:	f043 0302 	orr.w	r3, r3, #2
 8019528:	81a3      	strh	r3, [r4, #12]
 801952a:	e7e3      	b.n	80194f4 <__smakebuf_r+0xc>
 801952c:	4b0d      	ldr	r3, [pc, #52]	; (8019564 <__smakebuf_r+0x7c>)
 801952e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019530:	89a3      	ldrh	r3, [r4, #12]
 8019532:	6020      	str	r0, [r4, #0]
 8019534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019538:	81a3      	strh	r3, [r4, #12]
 801953a:	9b00      	ldr	r3, [sp, #0]
 801953c:	6163      	str	r3, [r4, #20]
 801953e:	9b01      	ldr	r3, [sp, #4]
 8019540:	6120      	str	r0, [r4, #16]
 8019542:	b15b      	cbz	r3, 801955c <__smakebuf_r+0x74>
 8019544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019548:	4630      	mov	r0, r6
 801954a:	f000 fe99 	bl	801a280 <_isatty_r>
 801954e:	b128      	cbz	r0, 801955c <__smakebuf_r+0x74>
 8019550:	89a3      	ldrh	r3, [r4, #12]
 8019552:	f023 0303 	bic.w	r3, r3, #3
 8019556:	f043 0301 	orr.w	r3, r3, #1
 801955a:	81a3      	strh	r3, [r4, #12]
 801955c:	89a3      	ldrh	r3, [r4, #12]
 801955e:	431d      	orrs	r5, r3
 8019560:	81a5      	strh	r5, [r4, #12]
 8019562:	e7cd      	b.n	8019500 <__smakebuf_r+0x18>
 8019564:	08018ce1 	.word	0x08018ce1

08019568 <__ascii_mbtowc>:
 8019568:	b082      	sub	sp, #8
 801956a:	b901      	cbnz	r1, 801956e <__ascii_mbtowc+0x6>
 801956c:	a901      	add	r1, sp, #4
 801956e:	b142      	cbz	r2, 8019582 <__ascii_mbtowc+0x1a>
 8019570:	b14b      	cbz	r3, 8019586 <__ascii_mbtowc+0x1e>
 8019572:	7813      	ldrb	r3, [r2, #0]
 8019574:	600b      	str	r3, [r1, #0]
 8019576:	7812      	ldrb	r2, [r2, #0]
 8019578:	1c10      	adds	r0, r2, #0
 801957a:	bf18      	it	ne
 801957c:	2001      	movne	r0, #1
 801957e:	b002      	add	sp, #8
 8019580:	4770      	bx	lr
 8019582:	4610      	mov	r0, r2
 8019584:	e7fb      	b.n	801957e <__ascii_mbtowc+0x16>
 8019586:	f06f 0001 	mvn.w	r0, #1
 801958a:	e7f8      	b.n	801957e <__ascii_mbtowc+0x16>

0801958c <memmove>:
 801958c:	4288      	cmp	r0, r1
 801958e:	b510      	push	{r4, lr}
 8019590:	eb01 0302 	add.w	r3, r1, r2
 8019594:	d807      	bhi.n	80195a6 <memmove+0x1a>
 8019596:	1e42      	subs	r2, r0, #1
 8019598:	4299      	cmp	r1, r3
 801959a:	d00a      	beq.n	80195b2 <memmove+0x26>
 801959c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80195a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80195a4:	e7f8      	b.n	8019598 <memmove+0xc>
 80195a6:	4283      	cmp	r3, r0
 80195a8:	d9f5      	bls.n	8019596 <memmove+0xa>
 80195aa:	1881      	adds	r1, r0, r2
 80195ac:	1ad2      	subs	r2, r2, r3
 80195ae:	42d3      	cmn	r3, r2
 80195b0:	d100      	bne.n	80195b4 <memmove+0x28>
 80195b2:	bd10      	pop	{r4, pc}
 80195b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80195b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80195bc:	e7f7      	b.n	80195ae <memmove+0x22>

080195be <__malloc_lock>:
 80195be:	4770      	bx	lr

080195c0 <__malloc_unlock>:
 80195c0:	4770      	bx	lr

080195c2 <_Balloc>:
 80195c2:	b570      	push	{r4, r5, r6, lr}
 80195c4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80195c6:	4604      	mov	r4, r0
 80195c8:	460e      	mov	r6, r1
 80195ca:	b93d      	cbnz	r5, 80195dc <_Balloc+0x1a>
 80195cc:	2010      	movs	r0, #16
 80195ce:	f7fc fb5b 	bl	8015c88 <malloc>
 80195d2:	6260      	str	r0, [r4, #36]	; 0x24
 80195d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80195d8:	6005      	str	r5, [r0, #0]
 80195da:	60c5      	str	r5, [r0, #12]
 80195dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80195de:	68eb      	ldr	r3, [r5, #12]
 80195e0:	b183      	cbz	r3, 8019604 <_Balloc+0x42>
 80195e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80195e4:	68db      	ldr	r3, [r3, #12]
 80195e6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80195ea:	b9b8      	cbnz	r0, 801961c <_Balloc+0x5a>
 80195ec:	2101      	movs	r1, #1
 80195ee:	fa01 f506 	lsl.w	r5, r1, r6
 80195f2:	1d6a      	adds	r2, r5, #5
 80195f4:	0092      	lsls	r2, r2, #2
 80195f6:	4620      	mov	r0, r4
 80195f8:	f000 fbe1 	bl	8019dbe <_calloc_r>
 80195fc:	b160      	cbz	r0, 8019618 <_Balloc+0x56>
 80195fe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8019602:	e00e      	b.n	8019622 <_Balloc+0x60>
 8019604:	2221      	movs	r2, #33	; 0x21
 8019606:	2104      	movs	r1, #4
 8019608:	4620      	mov	r0, r4
 801960a:	f000 fbd8 	bl	8019dbe <_calloc_r>
 801960e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019610:	60e8      	str	r0, [r5, #12]
 8019612:	68db      	ldr	r3, [r3, #12]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d1e4      	bne.n	80195e2 <_Balloc+0x20>
 8019618:	2000      	movs	r0, #0
 801961a:	bd70      	pop	{r4, r5, r6, pc}
 801961c:	6802      	ldr	r2, [r0, #0]
 801961e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8019622:	2300      	movs	r3, #0
 8019624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019628:	e7f7      	b.n	801961a <_Balloc+0x58>

0801962a <_Bfree>:
 801962a:	b570      	push	{r4, r5, r6, lr}
 801962c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801962e:	4606      	mov	r6, r0
 8019630:	460d      	mov	r5, r1
 8019632:	b93c      	cbnz	r4, 8019644 <_Bfree+0x1a>
 8019634:	2010      	movs	r0, #16
 8019636:	f7fc fb27 	bl	8015c88 <malloc>
 801963a:	6270      	str	r0, [r6, #36]	; 0x24
 801963c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019640:	6004      	str	r4, [r0, #0]
 8019642:	60c4      	str	r4, [r0, #12]
 8019644:	b13d      	cbz	r5, 8019656 <_Bfree+0x2c>
 8019646:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019648:	686a      	ldr	r2, [r5, #4]
 801964a:	68db      	ldr	r3, [r3, #12]
 801964c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019650:	6029      	str	r1, [r5, #0]
 8019652:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8019656:	bd70      	pop	{r4, r5, r6, pc}

08019658 <__multadd>:
 8019658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801965c:	690d      	ldr	r5, [r1, #16]
 801965e:	461f      	mov	r7, r3
 8019660:	4606      	mov	r6, r0
 8019662:	460c      	mov	r4, r1
 8019664:	f101 0c14 	add.w	ip, r1, #20
 8019668:	2300      	movs	r3, #0
 801966a:	f8dc 0000 	ldr.w	r0, [ip]
 801966e:	b281      	uxth	r1, r0
 8019670:	fb02 7101 	mla	r1, r2, r1, r7
 8019674:	0c0f      	lsrs	r7, r1, #16
 8019676:	0c00      	lsrs	r0, r0, #16
 8019678:	fb02 7000 	mla	r0, r2, r0, r7
 801967c:	b289      	uxth	r1, r1
 801967e:	3301      	adds	r3, #1
 8019680:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8019684:	429d      	cmp	r5, r3
 8019686:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801968a:	f84c 1b04 	str.w	r1, [ip], #4
 801968e:	dcec      	bgt.n	801966a <__multadd+0x12>
 8019690:	b1d7      	cbz	r7, 80196c8 <__multadd+0x70>
 8019692:	68a3      	ldr	r3, [r4, #8]
 8019694:	42ab      	cmp	r3, r5
 8019696:	dc12      	bgt.n	80196be <__multadd+0x66>
 8019698:	6861      	ldr	r1, [r4, #4]
 801969a:	4630      	mov	r0, r6
 801969c:	3101      	adds	r1, #1
 801969e:	f7ff ff90 	bl	80195c2 <_Balloc>
 80196a2:	6922      	ldr	r2, [r4, #16]
 80196a4:	3202      	adds	r2, #2
 80196a6:	f104 010c 	add.w	r1, r4, #12
 80196aa:	4680      	mov	r8, r0
 80196ac:	0092      	lsls	r2, r2, #2
 80196ae:	300c      	adds	r0, #12
 80196b0:	f7fc fafa 	bl	8015ca8 <memcpy>
 80196b4:	4621      	mov	r1, r4
 80196b6:	4630      	mov	r0, r6
 80196b8:	f7ff ffb7 	bl	801962a <_Bfree>
 80196bc:	4644      	mov	r4, r8
 80196be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80196c2:	3501      	adds	r5, #1
 80196c4:	615f      	str	r7, [r3, #20]
 80196c6:	6125      	str	r5, [r4, #16]
 80196c8:	4620      	mov	r0, r4
 80196ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080196ce <__s2b>:
 80196ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196d2:	460c      	mov	r4, r1
 80196d4:	4615      	mov	r5, r2
 80196d6:	461f      	mov	r7, r3
 80196d8:	2209      	movs	r2, #9
 80196da:	3308      	adds	r3, #8
 80196dc:	4606      	mov	r6, r0
 80196de:	fb93 f3f2 	sdiv	r3, r3, r2
 80196e2:	2100      	movs	r1, #0
 80196e4:	2201      	movs	r2, #1
 80196e6:	429a      	cmp	r2, r3
 80196e8:	db20      	blt.n	801972c <__s2b+0x5e>
 80196ea:	4630      	mov	r0, r6
 80196ec:	f7ff ff69 	bl	80195c2 <_Balloc>
 80196f0:	9b08      	ldr	r3, [sp, #32]
 80196f2:	6143      	str	r3, [r0, #20]
 80196f4:	2d09      	cmp	r5, #9
 80196f6:	f04f 0301 	mov.w	r3, #1
 80196fa:	6103      	str	r3, [r0, #16]
 80196fc:	dd19      	ble.n	8019732 <__s2b+0x64>
 80196fe:	f104 0809 	add.w	r8, r4, #9
 8019702:	46c1      	mov	r9, r8
 8019704:	442c      	add	r4, r5
 8019706:	f819 3b01 	ldrb.w	r3, [r9], #1
 801970a:	4601      	mov	r1, r0
 801970c:	3b30      	subs	r3, #48	; 0x30
 801970e:	220a      	movs	r2, #10
 8019710:	4630      	mov	r0, r6
 8019712:	f7ff ffa1 	bl	8019658 <__multadd>
 8019716:	45a1      	cmp	r9, r4
 8019718:	d1f5      	bne.n	8019706 <__s2b+0x38>
 801971a:	eb08 0405 	add.w	r4, r8, r5
 801971e:	3c08      	subs	r4, #8
 8019720:	1b2d      	subs	r5, r5, r4
 8019722:	1963      	adds	r3, r4, r5
 8019724:	42bb      	cmp	r3, r7
 8019726:	db07      	blt.n	8019738 <__s2b+0x6a>
 8019728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801972c:	0052      	lsls	r2, r2, #1
 801972e:	3101      	adds	r1, #1
 8019730:	e7d9      	b.n	80196e6 <__s2b+0x18>
 8019732:	340a      	adds	r4, #10
 8019734:	2509      	movs	r5, #9
 8019736:	e7f3      	b.n	8019720 <__s2b+0x52>
 8019738:	f814 3b01 	ldrb.w	r3, [r4], #1
 801973c:	4601      	mov	r1, r0
 801973e:	3b30      	subs	r3, #48	; 0x30
 8019740:	220a      	movs	r2, #10
 8019742:	4630      	mov	r0, r6
 8019744:	f7ff ff88 	bl	8019658 <__multadd>
 8019748:	e7eb      	b.n	8019722 <__s2b+0x54>

0801974a <__hi0bits>:
 801974a:	0c02      	lsrs	r2, r0, #16
 801974c:	0412      	lsls	r2, r2, #16
 801974e:	4603      	mov	r3, r0
 8019750:	b9b2      	cbnz	r2, 8019780 <__hi0bits+0x36>
 8019752:	0403      	lsls	r3, r0, #16
 8019754:	2010      	movs	r0, #16
 8019756:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801975a:	bf04      	itt	eq
 801975c:	021b      	lsleq	r3, r3, #8
 801975e:	3008      	addeq	r0, #8
 8019760:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019764:	bf04      	itt	eq
 8019766:	011b      	lsleq	r3, r3, #4
 8019768:	3004      	addeq	r0, #4
 801976a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801976e:	bf04      	itt	eq
 8019770:	009b      	lsleq	r3, r3, #2
 8019772:	3002      	addeq	r0, #2
 8019774:	2b00      	cmp	r3, #0
 8019776:	db06      	blt.n	8019786 <__hi0bits+0x3c>
 8019778:	005b      	lsls	r3, r3, #1
 801977a:	d503      	bpl.n	8019784 <__hi0bits+0x3a>
 801977c:	3001      	adds	r0, #1
 801977e:	4770      	bx	lr
 8019780:	2000      	movs	r0, #0
 8019782:	e7e8      	b.n	8019756 <__hi0bits+0xc>
 8019784:	2020      	movs	r0, #32
 8019786:	4770      	bx	lr

08019788 <__lo0bits>:
 8019788:	6803      	ldr	r3, [r0, #0]
 801978a:	f013 0207 	ands.w	r2, r3, #7
 801978e:	4601      	mov	r1, r0
 8019790:	d00b      	beq.n	80197aa <__lo0bits+0x22>
 8019792:	07da      	lsls	r2, r3, #31
 8019794:	d423      	bmi.n	80197de <__lo0bits+0x56>
 8019796:	0798      	lsls	r0, r3, #30
 8019798:	bf49      	itett	mi
 801979a:	085b      	lsrmi	r3, r3, #1
 801979c:	089b      	lsrpl	r3, r3, #2
 801979e:	2001      	movmi	r0, #1
 80197a0:	600b      	strmi	r3, [r1, #0]
 80197a2:	bf5c      	itt	pl
 80197a4:	600b      	strpl	r3, [r1, #0]
 80197a6:	2002      	movpl	r0, #2
 80197a8:	4770      	bx	lr
 80197aa:	b298      	uxth	r0, r3
 80197ac:	b9a8      	cbnz	r0, 80197da <__lo0bits+0x52>
 80197ae:	0c1b      	lsrs	r3, r3, #16
 80197b0:	2010      	movs	r0, #16
 80197b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80197b6:	bf04      	itt	eq
 80197b8:	0a1b      	lsreq	r3, r3, #8
 80197ba:	3008      	addeq	r0, #8
 80197bc:	071a      	lsls	r2, r3, #28
 80197be:	bf04      	itt	eq
 80197c0:	091b      	lsreq	r3, r3, #4
 80197c2:	3004      	addeq	r0, #4
 80197c4:	079a      	lsls	r2, r3, #30
 80197c6:	bf04      	itt	eq
 80197c8:	089b      	lsreq	r3, r3, #2
 80197ca:	3002      	addeq	r0, #2
 80197cc:	07da      	lsls	r2, r3, #31
 80197ce:	d402      	bmi.n	80197d6 <__lo0bits+0x4e>
 80197d0:	085b      	lsrs	r3, r3, #1
 80197d2:	d006      	beq.n	80197e2 <__lo0bits+0x5a>
 80197d4:	3001      	adds	r0, #1
 80197d6:	600b      	str	r3, [r1, #0]
 80197d8:	4770      	bx	lr
 80197da:	4610      	mov	r0, r2
 80197dc:	e7e9      	b.n	80197b2 <__lo0bits+0x2a>
 80197de:	2000      	movs	r0, #0
 80197e0:	4770      	bx	lr
 80197e2:	2020      	movs	r0, #32
 80197e4:	4770      	bx	lr

080197e6 <__i2b>:
 80197e6:	b510      	push	{r4, lr}
 80197e8:	460c      	mov	r4, r1
 80197ea:	2101      	movs	r1, #1
 80197ec:	f7ff fee9 	bl	80195c2 <_Balloc>
 80197f0:	2201      	movs	r2, #1
 80197f2:	6144      	str	r4, [r0, #20]
 80197f4:	6102      	str	r2, [r0, #16]
 80197f6:	bd10      	pop	{r4, pc}

080197f8 <__multiply>:
 80197f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197fc:	4614      	mov	r4, r2
 80197fe:	690a      	ldr	r2, [r1, #16]
 8019800:	6923      	ldr	r3, [r4, #16]
 8019802:	429a      	cmp	r2, r3
 8019804:	bfb8      	it	lt
 8019806:	460b      	movlt	r3, r1
 8019808:	4688      	mov	r8, r1
 801980a:	bfbc      	itt	lt
 801980c:	46a0      	movlt	r8, r4
 801980e:	461c      	movlt	r4, r3
 8019810:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019814:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019818:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801981c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019820:	eb07 0609 	add.w	r6, r7, r9
 8019824:	42b3      	cmp	r3, r6
 8019826:	bfb8      	it	lt
 8019828:	3101      	addlt	r1, #1
 801982a:	f7ff feca 	bl	80195c2 <_Balloc>
 801982e:	f100 0514 	add.w	r5, r0, #20
 8019832:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8019836:	462b      	mov	r3, r5
 8019838:	2200      	movs	r2, #0
 801983a:	4573      	cmp	r3, lr
 801983c:	d316      	bcc.n	801986c <__multiply+0x74>
 801983e:	f104 0214 	add.w	r2, r4, #20
 8019842:	f108 0114 	add.w	r1, r8, #20
 8019846:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801984a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801984e:	9300      	str	r3, [sp, #0]
 8019850:	9b00      	ldr	r3, [sp, #0]
 8019852:	9201      	str	r2, [sp, #4]
 8019854:	4293      	cmp	r3, r2
 8019856:	d80c      	bhi.n	8019872 <__multiply+0x7a>
 8019858:	2e00      	cmp	r6, #0
 801985a:	dd03      	ble.n	8019864 <__multiply+0x6c>
 801985c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019860:	2b00      	cmp	r3, #0
 8019862:	d05d      	beq.n	8019920 <__multiply+0x128>
 8019864:	6106      	str	r6, [r0, #16]
 8019866:	b003      	add	sp, #12
 8019868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801986c:	f843 2b04 	str.w	r2, [r3], #4
 8019870:	e7e3      	b.n	801983a <__multiply+0x42>
 8019872:	f8b2 b000 	ldrh.w	fp, [r2]
 8019876:	f1bb 0f00 	cmp.w	fp, #0
 801987a:	d023      	beq.n	80198c4 <__multiply+0xcc>
 801987c:	4689      	mov	r9, r1
 801987e:	46ac      	mov	ip, r5
 8019880:	f04f 0800 	mov.w	r8, #0
 8019884:	f859 4b04 	ldr.w	r4, [r9], #4
 8019888:	f8dc a000 	ldr.w	sl, [ip]
 801988c:	b2a3      	uxth	r3, r4
 801988e:	fa1f fa8a 	uxth.w	sl, sl
 8019892:	fb0b a303 	mla	r3, fp, r3, sl
 8019896:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801989a:	f8dc 4000 	ldr.w	r4, [ip]
 801989e:	4443      	add	r3, r8
 80198a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80198a4:	fb0b 840a 	mla	r4, fp, sl, r8
 80198a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80198ac:	46e2      	mov	sl, ip
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80198b4:	454f      	cmp	r7, r9
 80198b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80198ba:	f84a 3b04 	str.w	r3, [sl], #4
 80198be:	d82b      	bhi.n	8019918 <__multiply+0x120>
 80198c0:	f8cc 8004 	str.w	r8, [ip, #4]
 80198c4:	9b01      	ldr	r3, [sp, #4]
 80198c6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80198ca:	3204      	adds	r2, #4
 80198cc:	f1ba 0f00 	cmp.w	sl, #0
 80198d0:	d020      	beq.n	8019914 <__multiply+0x11c>
 80198d2:	682b      	ldr	r3, [r5, #0]
 80198d4:	4689      	mov	r9, r1
 80198d6:	46a8      	mov	r8, r5
 80198d8:	f04f 0b00 	mov.w	fp, #0
 80198dc:	f8b9 c000 	ldrh.w	ip, [r9]
 80198e0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80198e4:	fb0a 440c 	mla	r4, sl, ip, r4
 80198e8:	445c      	add	r4, fp
 80198ea:	46c4      	mov	ip, r8
 80198ec:	b29b      	uxth	r3, r3
 80198ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80198f2:	f84c 3b04 	str.w	r3, [ip], #4
 80198f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80198fa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80198fe:	0c1b      	lsrs	r3, r3, #16
 8019900:	fb0a b303 	mla	r3, sl, r3, fp
 8019904:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8019908:	454f      	cmp	r7, r9
 801990a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801990e:	d805      	bhi.n	801991c <__multiply+0x124>
 8019910:	f8c8 3004 	str.w	r3, [r8, #4]
 8019914:	3504      	adds	r5, #4
 8019916:	e79b      	b.n	8019850 <__multiply+0x58>
 8019918:	46d4      	mov	ip, sl
 801991a:	e7b3      	b.n	8019884 <__multiply+0x8c>
 801991c:	46e0      	mov	r8, ip
 801991e:	e7dd      	b.n	80198dc <__multiply+0xe4>
 8019920:	3e01      	subs	r6, #1
 8019922:	e799      	b.n	8019858 <__multiply+0x60>

08019924 <__pow5mult>:
 8019924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019928:	4615      	mov	r5, r2
 801992a:	f012 0203 	ands.w	r2, r2, #3
 801992e:	4606      	mov	r6, r0
 8019930:	460f      	mov	r7, r1
 8019932:	d007      	beq.n	8019944 <__pow5mult+0x20>
 8019934:	3a01      	subs	r2, #1
 8019936:	4c21      	ldr	r4, [pc, #132]	; (80199bc <__pow5mult+0x98>)
 8019938:	2300      	movs	r3, #0
 801993a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801993e:	f7ff fe8b 	bl	8019658 <__multadd>
 8019942:	4607      	mov	r7, r0
 8019944:	10ad      	asrs	r5, r5, #2
 8019946:	d035      	beq.n	80199b4 <__pow5mult+0x90>
 8019948:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801994a:	b93c      	cbnz	r4, 801995c <__pow5mult+0x38>
 801994c:	2010      	movs	r0, #16
 801994e:	f7fc f99b 	bl	8015c88 <malloc>
 8019952:	6270      	str	r0, [r6, #36]	; 0x24
 8019954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019958:	6004      	str	r4, [r0, #0]
 801995a:	60c4      	str	r4, [r0, #12]
 801995c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019964:	b94c      	cbnz	r4, 801997a <__pow5mult+0x56>
 8019966:	f240 2171 	movw	r1, #625	; 0x271
 801996a:	4630      	mov	r0, r6
 801996c:	f7ff ff3b 	bl	80197e6 <__i2b>
 8019970:	2300      	movs	r3, #0
 8019972:	f8c8 0008 	str.w	r0, [r8, #8]
 8019976:	4604      	mov	r4, r0
 8019978:	6003      	str	r3, [r0, #0]
 801997a:	f04f 0800 	mov.w	r8, #0
 801997e:	07eb      	lsls	r3, r5, #31
 8019980:	d50a      	bpl.n	8019998 <__pow5mult+0x74>
 8019982:	4639      	mov	r1, r7
 8019984:	4622      	mov	r2, r4
 8019986:	4630      	mov	r0, r6
 8019988:	f7ff ff36 	bl	80197f8 <__multiply>
 801998c:	4639      	mov	r1, r7
 801998e:	4681      	mov	r9, r0
 8019990:	4630      	mov	r0, r6
 8019992:	f7ff fe4a 	bl	801962a <_Bfree>
 8019996:	464f      	mov	r7, r9
 8019998:	106d      	asrs	r5, r5, #1
 801999a:	d00b      	beq.n	80199b4 <__pow5mult+0x90>
 801999c:	6820      	ldr	r0, [r4, #0]
 801999e:	b938      	cbnz	r0, 80199b0 <__pow5mult+0x8c>
 80199a0:	4622      	mov	r2, r4
 80199a2:	4621      	mov	r1, r4
 80199a4:	4630      	mov	r0, r6
 80199a6:	f7ff ff27 	bl	80197f8 <__multiply>
 80199aa:	6020      	str	r0, [r4, #0]
 80199ac:	f8c0 8000 	str.w	r8, [r0]
 80199b0:	4604      	mov	r4, r0
 80199b2:	e7e4      	b.n	801997e <__pow5mult+0x5a>
 80199b4:	4638      	mov	r0, r7
 80199b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199ba:	bf00      	nop
 80199bc:	0801afa8 	.word	0x0801afa8

080199c0 <__lshift>:
 80199c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199c4:	460c      	mov	r4, r1
 80199c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80199ca:	6923      	ldr	r3, [r4, #16]
 80199cc:	6849      	ldr	r1, [r1, #4]
 80199ce:	eb0a 0903 	add.w	r9, sl, r3
 80199d2:	68a3      	ldr	r3, [r4, #8]
 80199d4:	4607      	mov	r7, r0
 80199d6:	4616      	mov	r6, r2
 80199d8:	f109 0501 	add.w	r5, r9, #1
 80199dc:	42ab      	cmp	r3, r5
 80199de:	db32      	blt.n	8019a46 <__lshift+0x86>
 80199e0:	4638      	mov	r0, r7
 80199e2:	f7ff fdee 	bl	80195c2 <_Balloc>
 80199e6:	2300      	movs	r3, #0
 80199e8:	4680      	mov	r8, r0
 80199ea:	f100 0114 	add.w	r1, r0, #20
 80199ee:	461a      	mov	r2, r3
 80199f0:	4553      	cmp	r3, sl
 80199f2:	db2b      	blt.n	8019a4c <__lshift+0x8c>
 80199f4:	6920      	ldr	r0, [r4, #16]
 80199f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80199fa:	f104 0314 	add.w	r3, r4, #20
 80199fe:	f016 021f 	ands.w	r2, r6, #31
 8019a02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019a06:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019a0a:	d025      	beq.n	8019a58 <__lshift+0x98>
 8019a0c:	f1c2 0e20 	rsb	lr, r2, #32
 8019a10:	2000      	movs	r0, #0
 8019a12:	681e      	ldr	r6, [r3, #0]
 8019a14:	468a      	mov	sl, r1
 8019a16:	4096      	lsls	r6, r2
 8019a18:	4330      	orrs	r0, r6
 8019a1a:	f84a 0b04 	str.w	r0, [sl], #4
 8019a1e:	f853 0b04 	ldr.w	r0, [r3], #4
 8019a22:	459c      	cmp	ip, r3
 8019a24:	fa20 f00e 	lsr.w	r0, r0, lr
 8019a28:	d814      	bhi.n	8019a54 <__lshift+0x94>
 8019a2a:	6048      	str	r0, [r1, #4]
 8019a2c:	b108      	cbz	r0, 8019a32 <__lshift+0x72>
 8019a2e:	f109 0502 	add.w	r5, r9, #2
 8019a32:	3d01      	subs	r5, #1
 8019a34:	4638      	mov	r0, r7
 8019a36:	f8c8 5010 	str.w	r5, [r8, #16]
 8019a3a:	4621      	mov	r1, r4
 8019a3c:	f7ff fdf5 	bl	801962a <_Bfree>
 8019a40:	4640      	mov	r0, r8
 8019a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a46:	3101      	adds	r1, #1
 8019a48:	005b      	lsls	r3, r3, #1
 8019a4a:	e7c7      	b.n	80199dc <__lshift+0x1c>
 8019a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019a50:	3301      	adds	r3, #1
 8019a52:	e7cd      	b.n	80199f0 <__lshift+0x30>
 8019a54:	4651      	mov	r1, sl
 8019a56:	e7dc      	b.n	8019a12 <__lshift+0x52>
 8019a58:	3904      	subs	r1, #4
 8019a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a5e:	f841 2f04 	str.w	r2, [r1, #4]!
 8019a62:	459c      	cmp	ip, r3
 8019a64:	d8f9      	bhi.n	8019a5a <__lshift+0x9a>
 8019a66:	e7e4      	b.n	8019a32 <__lshift+0x72>

08019a68 <__mcmp>:
 8019a68:	6903      	ldr	r3, [r0, #16]
 8019a6a:	690a      	ldr	r2, [r1, #16]
 8019a6c:	1a9b      	subs	r3, r3, r2
 8019a6e:	b530      	push	{r4, r5, lr}
 8019a70:	d10c      	bne.n	8019a8c <__mcmp+0x24>
 8019a72:	0092      	lsls	r2, r2, #2
 8019a74:	3014      	adds	r0, #20
 8019a76:	3114      	adds	r1, #20
 8019a78:	1884      	adds	r4, r0, r2
 8019a7a:	4411      	add	r1, r2
 8019a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019a84:	4295      	cmp	r5, r2
 8019a86:	d003      	beq.n	8019a90 <__mcmp+0x28>
 8019a88:	d305      	bcc.n	8019a96 <__mcmp+0x2e>
 8019a8a:	2301      	movs	r3, #1
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	bd30      	pop	{r4, r5, pc}
 8019a90:	42a0      	cmp	r0, r4
 8019a92:	d3f3      	bcc.n	8019a7c <__mcmp+0x14>
 8019a94:	e7fa      	b.n	8019a8c <__mcmp+0x24>
 8019a96:	f04f 33ff 	mov.w	r3, #4294967295
 8019a9a:	e7f7      	b.n	8019a8c <__mcmp+0x24>

08019a9c <__mdiff>:
 8019a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019aa0:	460d      	mov	r5, r1
 8019aa2:	4607      	mov	r7, r0
 8019aa4:	4611      	mov	r1, r2
 8019aa6:	4628      	mov	r0, r5
 8019aa8:	4614      	mov	r4, r2
 8019aaa:	f7ff ffdd 	bl	8019a68 <__mcmp>
 8019aae:	1e06      	subs	r6, r0, #0
 8019ab0:	d108      	bne.n	8019ac4 <__mdiff+0x28>
 8019ab2:	4631      	mov	r1, r6
 8019ab4:	4638      	mov	r0, r7
 8019ab6:	f7ff fd84 	bl	80195c2 <_Balloc>
 8019aba:	2301      	movs	r3, #1
 8019abc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8019ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ac4:	bfa4      	itt	ge
 8019ac6:	4623      	movge	r3, r4
 8019ac8:	462c      	movge	r4, r5
 8019aca:	4638      	mov	r0, r7
 8019acc:	6861      	ldr	r1, [r4, #4]
 8019ace:	bfa6      	itte	ge
 8019ad0:	461d      	movge	r5, r3
 8019ad2:	2600      	movge	r6, #0
 8019ad4:	2601      	movlt	r6, #1
 8019ad6:	f7ff fd74 	bl	80195c2 <_Balloc>
 8019ada:	692b      	ldr	r3, [r5, #16]
 8019adc:	60c6      	str	r6, [r0, #12]
 8019ade:	6926      	ldr	r6, [r4, #16]
 8019ae0:	f105 0914 	add.w	r9, r5, #20
 8019ae4:	f104 0214 	add.w	r2, r4, #20
 8019ae8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019aec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8019af0:	f100 0514 	add.w	r5, r0, #20
 8019af4:	f04f 0e00 	mov.w	lr, #0
 8019af8:	f852 ab04 	ldr.w	sl, [r2], #4
 8019afc:	f859 4b04 	ldr.w	r4, [r9], #4
 8019b00:	fa1e f18a 	uxtah	r1, lr, sl
 8019b04:	b2a3      	uxth	r3, r4
 8019b06:	1ac9      	subs	r1, r1, r3
 8019b08:	0c23      	lsrs	r3, r4, #16
 8019b0a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8019b0e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019b12:	b289      	uxth	r1, r1
 8019b14:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8019b18:	45c8      	cmp	r8, r9
 8019b1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019b1e:	4694      	mov	ip, r2
 8019b20:	f845 3b04 	str.w	r3, [r5], #4
 8019b24:	d8e8      	bhi.n	8019af8 <__mdiff+0x5c>
 8019b26:	45bc      	cmp	ip, r7
 8019b28:	d304      	bcc.n	8019b34 <__mdiff+0x98>
 8019b2a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8019b2e:	b183      	cbz	r3, 8019b52 <__mdiff+0xb6>
 8019b30:	6106      	str	r6, [r0, #16]
 8019b32:	e7c5      	b.n	8019ac0 <__mdiff+0x24>
 8019b34:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019b38:	fa1e f381 	uxtah	r3, lr, r1
 8019b3c:	141a      	asrs	r2, r3, #16
 8019b3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019b42:	b29b      	uxth	r3, r3
 8019b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019b48:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019b4c:	f845 3b04 	str.w	r3, [r5], #4
 8019b50:	e7e9      	b.n	8019b26 <__mdiff+0x8a>
 8019b52:	3e01      	subs	r6, #1
 8019b54:	e7e9      	b.n	8019b2a <__mdiff+0x8e>
	...

08019b58 <__ulp>:
 8019b58:	4b12      	ldr	r3, [pc, #72]	; (8019ba4 <__ulp+0x4c>)
 8019b5a:	ee10 2a90 	vmov	r2, s1
 8019b5e:	401a      	ands	r2, r3
 8019b60:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	dd04      	ble.n	8019b72 <__ulp+0x1a>
 8019b68:	2000      	movs	r0, #0
 8019b6a:	4619      	mov	r1, r3
 8019b6c:	ec41 0b10 	vmov	d0, r0, r1
 8019b70:	4770      	bx	lr
 8019b72:	425b      	negs	r3, r3
 8019b74:	151b      	asrs	r3, r3, #20
 8019b76:	2b13      	cmp	r3, #19
 8019b78:	f04f 0000 	mov.w	r0, #0
 8019b7c:	f04f 0100 	mov.w	r1, #0
 8019b80:	dc04      	bgt.n	8019b8c <__ulp+0x34>
 8019b82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019b86:	fa42 f103 	asr.w	r1, r2, r3
 8019b8a:	e7ef      	b.n	8019b6c <__ulp+0x14>
 8019b8c:	3b14      	subs	r3, #20
 8019b8e:	2b1e      	cmp	r3, #30
 8019b90:	f04f 0201 	mov.w	r2, #1
 8019b94:	bfda      	itte	le
 8019b96:	f1c3 031f 	rsble	r3, r3, #31
 8019b9a:	fa02 f303 	lslle.w	r3, r2, r3
 8019b9e:	4613      	movgt	r3, r2
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	e7e3      	b.n	8019b6c <__ulp+0x14>
 8019ba4:	7ff00000 	.word	0x7ff00000

08019ba8 <__b2d>:
 8019ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019baa:	6905      	ldr	r5, [r0, #16]
 8019bac:	f100 0714 	add.w	r7, r0, #20
 8019bb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019bb4:	1f2e      	subs	r6, r5, #4
 8019bb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019bba:	4620      	mov	r0, r4
 8019bbc:	f7ff fdc5 	bl	801974a <__hi0bits>
 8019bc0:	f1c0 0320 	rsb	r3, r0, #32
 8019bc4:	280a      	cmp	r0, #10
 8019bc6:	600b      	str	r3, [r1, #0]
 8019bc8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019c40 <__b2d+0x98>
 8019bcc:	dc14      	bgt.n	8019bf8 <__b2d+0x50>
 8019bce:	f1c0 0e0b 	rsb	lr, r0, #11
 8019bd2:	fa24 f10e 	lsr.w	r1, r4, lr
 8019bd6:	42b7      	cmp	r7, r6
 8019bd8:	ea41 030c 	orr.w	r3, r1, ip
 8019bdc:	bf34      	ite	cc
 8019bde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019be2:	2100      	movcs	r1, #0
 8019be4:	3015      	adds	r0, #21
 8019be6:	fa04 f000 	lsl.w	r0, r4, r0
 8019bea:	fa21 f10e 	lsr.w	r1, r1, lr
 8019bee:	ea40 0201 	orr.w	r2, r0, r1
 8019bf2:	ec43 2b10 	vmov	d0, r2, r3
 8019bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bf8:	42b7      	cmp	r7, r6
 8019bfa:	bf3a      	itte	cc
 8019bfc:	f1a5 0608 	subcc.w	r6, r5, #8
 8019c00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019c04:	2100      	movcs	r1, #0
 8019c06:	380b      	subs	r0, #11
 8019c08:	d015      	beq.n	8019c36 <__b2d+0x8e>
 8019c0a:	4084      	lsls	r4, r0
 8019c0c:	f1c0 0520 	rsb	r5, r0, #32
 8019c10:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019c14:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8019c18:	42be      	cmp	r6, r7
 8019c1a:	fa21 fc05 	lsr.w	ip, r1, r5
 8019c1e:	ea44 030c 	orr.w	r3, r4, ip
 8019c22:	bf8c      	ite	hi
 8019c24:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019c28:	2400      	movls	r4, #0
 8019c2a:	fa01 f000 	lsl.w	r0, r1, r0
 8019c2e:	40ec      	lsrs	r4, r5
 8019c30:	ea40 0204 	orr.w	r2, r0, r4
 8019c34:	e7dd      	b.n	8019bf2 <__b2d+0x4a>
 8019c36:	ea44 030c 	orr.w	r3, r4, ip
 8019c3a:	460a      	mov	r2, r1
 8019c3c:	e7d9      	b.n	8019bf2 <__b2d+0x4a>
 8019c3e:	bf00      	nop
 8019c40:	3ff00000 	.word	0x3ff00000

08019c44 <__d2b>:
 8019c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019c48:	460e      	mov	r6, r1
 8019c4a:	2101      	movs	r1, #1
 8019c4c:	ec59 8b10 	vmov	r8, r9, d0
 8019c50:	4615      	mov	r5, r2
 8019c52:	f7ff fcb6 	bl	80195c2 <_Balloc>
 8019c56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019c5a:	4607      	mov	r7, r0
 8019c5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019c60:	bb34      	cbnz	r4, 8019cb0 <__d2b+0x6c>
 8019c62:	9301      	str	r3, [sp, #4]
 8019c64:	f1b8 0300 	subs.w	r3, r8, #0
 8019c68:	d027      	beq.n	8019cba <__d2b+0x76>
 8019c6a:	a802      	add	r0, sp, #8
 8019c6c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019c70:	f7ff fd8a 	bl	8019788 <__lo0bits>
 8019c74:	9900      	ldr	r1, [sp, #0]
 8019c76:	b1f0      	cbz	r0, 8019cb6 <__d2b+0x72>
 8019c78:	9a01      	ldr	r2, [sp, #4]
 8019c7a:	f1c0 0320 	rsb	r3, r0, #32
 8019c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8019c82:	430b      	orrs	r3, r1
 8019c84:	40c2      	lsrs	r2, r0
 8019c86:	617b      	str	r3, [r7, #20]
 8019c88:	9201      	str	r2, [sp, #4]
 8019c8a:	9b01      	ldr	r3, [sp, #4]
 8019c8c:	61bb      	str	r3, [r7, #24]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	bf14      	ite	ne
 8019c92:	2102      	movne	r1, #2
 8019c94:	2101      	moveq	r1, #1
 8019c96:	6139      	str	r1, [r7, #16]
 8019c98:	b1c4      	cbz	r4, 8019ccc <__d2b+0x88>
 8019c9a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8019c9e:	4404      	add	r4, r0
 8019ca0:	6034      	str	r4, [r6, #0]
 8019ca2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019ca6:	6028      	str	r0, [r5, #0]
 8019ca8:	4638      	mov	r0, r7
 8019caa:	b003      	add	sp, #12
 8019cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019cb4:	e7d5      	b.n	8019c62 <__d2b+0x1e>
 8019cb6:	6179      	str	r1, [r7, #20]
 8019cb8:	e7e7      	b.n	8019c8a <__d2b+0x46>
 8019cba:	a801      	add	r0, sp, #4
 8019cbc:	f7ff fd64 	bl	8019788 <__lo0bits>
 8019cc0:	9b01      	ldr	r3, [sp, #4]
 8019cc2:	617b      	str	r3, [r7, #20]
 8019cc4:	2101      	movs	r1, #1
 8019cc6:	6139      	str	r1, [r7, #16]
 8019cc8:	3020      	adds	r0, #32
 8019cca:	e7e5      	b.n	8019c98 <__d2b+0x54>
 8019ccc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019cd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019cd4:	6030      	str	r0, [r6, #0]
 8019cd6:	6918      	ldr	r0, [r3, #16]
 8019cd8:	f7ff fd37 	bl	801974a <__hi0bits>
 8019cdc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019ce0:	e7e1      	b.n	8019ca6 <__d2b+0x62>

08019ce2 <__ratio>:
 8019ce2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ce6:	4688      	mov	r8, r1
 8019ce8:	4669      	mov	r1, sp
 8019cea:	4681      	mov	r9, r0
 8019cec:	f7ff ff5c 	bl	8019ba8 <__b2d>
 8019cf0:	a901      	add	r1, sp, #4
 8019cf2:	4640      	mov	r0, r8
 8019cf4:	ec57 6b10 	vmov	r6, r7, d0
 8019cf8:	f7ff ff56 	bl	8019ba8 <__b2d>
 8019cfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019d00:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019d04:	eba3 0c02 	sub.w	ip, r3, r2
 8019d08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019d0c:	1a9b      	subs	r3, r3, r2
 8019d0e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019d12:	ec5b ab10 	vmov	sl, fp, d0
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	bfce      	itee	gt
 8019d1a:	463a      	movgt	r2, r7
 8019d1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019d20:	465a      	movle	r2, fp
 8019d22:	4659      	mov	r1, fp
 8019d24:	463d      	mov	r5, r7
 8019d26:	bfd4      	ite	le
 8019d28:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019d2c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019d30:	4630      	mov	r0, r6
 8019d32:	ee10 2a10 	vmov	r2, s0
 8019d36:	460b      	mov	r3, r1
 8019d38:	4629      	mov	r1, r5
 8019d3a:	f7e6 fd97 	bl	800086c <__aeabi_ddiv>
 8019d3e:	ec41 0b10 	vmov	d0, r0, r1
 8019d42:	b003      	add	sp, #12
 8019d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d48 <__copybits>:
 8019d48:	3901      	subs	r1, #1
 8019d4a:	b510      	push	{r4, lr}
 8019d4c:	1149      	asrs	r1, r1, #5
 8019d4e:	6914      	ldr	r4, [r2, #16]
 8019d50:	3101      	adds	r1, #1
 8019d52:	f102 0314 	add.w	r3, r2, #20
 8019d56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019d5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019d5e:	42a3      	cmp	r3, r4
 8019d60:	4602      	mov	r2, r0
 8019d62:	d303      	bcc.n	8019d6c <__copybits+0x24>
 8019d64:	2300      	movs	r3, #0
 8019d66:	428a      	cmp	r2, r1
 8019d68:	d305      	bcc.n	8019d76 <__copybits+0x2e>
 8019d6a:	bd10      	pop	{r4, pc}
 8019d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d70:	f840 2b04 	str.w	r2, [r0], #4
 8019d74:	e7f3      	b.n	8019d5e <__copybits+0x16>
 8019d76:	f842 3b04 	str.w	r3, [r2], #4
 8019d7a:	e7f4      	b.n	8019d66 <__copybits+0x1e>

08019d7c <__any_on>:
 8019d7c:	f100 0214 	add.w	r2, r0, #20
 8019d80:	6900      	ldr	r0, [r0, #16]
 8019d82:	114b      	asrs	r3, r1, #5
 8019d84:	4298      	cmp	r0, r3
 8019d86:	b510      	push	{r4, lr}
 8019d88:	db11      	blt.n	8019dae <__any_on+0x32>
 8019d8a:	dd0a      	ble.n	8019da2 <__any_on+0x26>
 8019d8c:	f011 011f 	ands.w	r1, r1, #31
 8019d90:	d007      	beq.n	8019da2 <__any_on+0x26>
 8019d92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019d96:	fa24 f001 	lsr.w	r0, r4, r1
 8019d9a:	fa00 f101 	lsl.w	r1, r0, r1
 8019d9e:	428c      	cmp	r4, r1
 8019da0:	d10b      	bne.n	8019dba <__any_on+0x3e>
 8019da2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019da6:	4293      	cmp	r3, r2
 8019da8:	d803      	bhi.n	8019db2 <__any_on+0x36>
 8019daa:	2000      	movs	r0, #0
 8019dac:	bd10      	pop	{r4, pc}
 8019dae:	4603      	mov	r3, r0
 8019db0:	e7f7      	b.n	8019da2 <__any_on+0x26>
 8019db2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019db6:	2900      	cmp	r1, #0
 8019db8:	d0f5      	beq.n	8019da6 <__any_on+0x2a>
 8019dba:	2001      	movs	r0, #1
 8019dbc:	e7f6      	b.n	8019dac <__any_on+0x30>

08019dbe <_calloc_r>:
 8019dbe:	b538      	push	{r3, r4, r5, lr}
 8019dc0:	fb02 f401 	mul.w	r4, r2, r1
 8019dc4:	4621      	mov	r1, r4
 8019dc6:	f7fb ffd1 	bl	8015d6c <_malloc_r>
 8019dca:	4605      	mov	r5, r0
 8019dcc:	b118      	cbz	r0, 8019dd6 <_calloc_r+0x18>
 8019dce:	4622      	mov	r2, r4
 8019dd0:	2100      	movs	r1, #0
 8019dd2:	f7fb ff74 	bl	8015cbe <memset>
 8019dd6:	4628      	mov	r0, r5
 8019dd8:	bd38      	pop	{r3, r4, r5, pc}

08019dda <_realloc_r>:
 8019dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ddc:	4607      	mov	r7, r0
 8019dde:	4614      	mov	r4, r2
 8019de0:	460e      	mov	r6, r1
 8019de2:	b921      	cbnz	r1, 8019dee <_realloc_r+0x14>
 8019de4:	4611      	mov	r1, r2
 8019de6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019dea:	f7fb bfbf 	b.w	8015d6c <_malloc_r>
 8019dee:	b922      	cbnz	r2, 8019dfa <_realloc_r+0x20>
 8019df0:	f7fb ff6e 	bl	8015cd0 <_free_r>
 8019df4:	4625      	mov	r5, r4
 8019df6:	4628      	mov	r0, r5
 8019df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dfa:	f000 fa63 	bl	801a2c4 <_malloc_usable_size_r>
 8019dfe:	42a0      	cmp	r0, r4
 8019e00:	d20f      	bcs.n	8019e22 <_realloc_r+0x48>
 8019e02:	4621      	mov	r1, r4
 8019e04:	4638      	mov	r0, r7
 8019e06:	f7fb ffb1 	bl	8015d6c <_malloc_r>
 8019e0a:	4605      	mov	r5, r0
 8019e0c:	2800      	cmp	r0, #0
 8019e0e:	d0f2      	beq.n	8019df6 <_realloc_r+0x1c>
 8019e10:	4631      	mov	r1, r6
 8019e12:	4622      	mov	r2, r4
 8019e14:	f7fb ff48 	bl	8015ca8 <memcpy>
 8019e18:	4631      	mov	r1, r6
 8019e1a:	4638      	mov	r0, r7
 8019e1c:	f7fb ff58 	bl	8015cd0 <_free_r>
 8019e20:	e7e9      	b.n	8019df6 <_realloc_r+0x1c>
 8019e22:	4635      	mov	r5, r6
 8019e24:	e7e7      	b.n	8019df6 <_realloc_r+0x1c>

08019e26 <__ssputs_r>:
 8019e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e2a:	688e      	ldr	r6, [r1, #8]
 8019e2c:	429e      	cmp	r6, r3
 8019e2e:	4682      	mov	sl, r0
 8019e30:	460c      	mov	r4, r1
 8019e32:	4690      	mov	r8, r2
 8019e34:	4699      	mov	r9, r3
 8019e36:	d837      	bhi.n	8019ea8 <__ssputs_r+0x82>
 8019e38:	898a      	ldrh	r2, [r1, #12]
 8019e3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019e3e:	d031      	beq.n	8019ea4 <__ssputs_r+0x7e>
 8019e40:	6825      	ldr	r5, [r4, #0]
 8019e42:	6909      	ldr	r1, [r1, #16]
 8019e44:	1a6f      	subs	r7, r5, r1
 8019e46:	6965      	ldr	r5, [r4, #20]
 8019e48:	2302      	movs	r3, #2
 8019e4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e4e:	fb95 f5f3 	sdiv	r5, r5, r3
 8019e52:	f109 0301 	add.w	r3, r9, #1
 8019e56:	443b      	add	r3, r7
 8019e58:	429d      	cmp	r5, r3
 8019e5a:	bf38      	it	cc
 8019e5c:	461d      	movcc	r5, r3
 8019e5e:	0553      	lsls	r3, r2, #21
 8019e60:	d530      	bpl.n	8019ec4 <__ssputs_r+0x9e>
 8019e62:	4629      	mov	r1, r5
 8019e64:	f7fb ff82 	bl	8015d6c <_malloc_r>
 8019e68:	4606      	mov	r6, r0
 8019e6a:	b950      	cbnz	r0, 8019e82 <__ssputs_r+0x5c>
 8019e6c:	230c      	movs	r3, #12
 8019e6e:	f8ca 3000 	str.w	r3, [sl]
 8019e72:	89a3      	ldrh	r3, [r4, #12]
 8019e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e78:	81a3      	strh	r3, [r4, #12]
 8019e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8019e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e82:	463a      	mov	r2, r7
 8019e84:	6921      	ldr	r1, [r4, #16]
 8019e86:	f7fb ff0f 	bl	8015ca8 <memcpy>
 8019e8a:	89a3      	ldrh	r3, [r4, #12]
 8019e8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e94:	81a3      	strh	r3, [r4, #12]
 8019e96:	6126      	str	r6, [r4, #16]
 8019e98:	6165      	str	r5, [r4, #20]
 8019e9a:	443e      	add	r6, r7
 8019e9c:	1bed      	subs	r5, r5, r7
 8019e9e:	6026      	str	r6, [r4, #0]
 8019ea0:	60a5      	str	r5, [r4, #8]
 8019ea2:	464e      	mov	r6, r9
 8019ea4:	454e      	cmp	r6, r9
 8019ea6:	d900      	bls.n	8019eaa <__ssputs_r+0x84>
 8019ea8:	464e      	mov	r6, r9
 8019eaa:	4632      	mov	r2, r6
 8019eac:	4641      	mov	r1, r8
 8019eae:	6820      	ldr	r0, [r4, #0]
 8019eb0:	f7ff fb6c 	bl	801958c <memmove>
 8019eb4:	68a3      	ldr	r3, [r4, #8]
 8019eb6:	1b9b      	subs	r3, r3, r6
 8019eb8:	60a3      	str	r3, [r4, #8]
 8019eba:	6823      	ldr	r3, [r4, #0]
 8019ebc:	441e      	add	r6, r3
 8019ebe:	6026      	str	r6, [r4, #0]
 8019ec0:	2000      	movs	r0, #0
 8019ec2:	e7dc      	b.n	8019e7e <__ssputs_r+0x58>
 8019ec4:	462a      	mov	r2, r5
 8019ec6:	f7ff ff88 	bl	8019dda <_realloc_r>
 8019eca:	4606      	mov	r6, r0
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	d1e2      	bne.n	8019e96 <__ssputs_r+0x70>
 8019ed0:	6921      	ldr	r1, [r4, #16]
 8019ed2:	4650      	mov	r0, sl
 8019ed4:	f7fb fefc 	bl	8015cd0 <_free_r>
 8019ed8:	e7c8      	b.n	8019e6c <__ssputs_r+0x46>
	...

08019edc <_svfiprintf_r>:
 8019edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ee0:	461d      	mov	r5, r3
 8019ee2:	898b      	ldrh	r3, [r1, #12]
 8019ee4:	061f      	lsls	r7, r3, #24
 8019ee6:	b09d      	sub	sp, #116	; 0x74
 8019ee8:	4680      	mov	r8, r0
 8019eea:	460c      	mov	r4, r1
 8019eec:	4616      	mov	r6, r2
 8019eee:	d50f      	bpl.n	8019f10 <_svfiprintf_r+0x34>
 8019ef0:	690b      	ldr	r3, [r1, #16]
 8019ef2:	b96b      	cbnz	r3, 8019f10 <_svfiprintf_r+0x34>
 8019ef4:	2140      	movs	r1, #64	; 0x40
 8019ef6:	f7fb ff39 	bl	8015d6c <_malloc_r>
 8019efa:	6020      	str	r0, [r4, #0]
 8019efc:	6120      	str	r0, [r4, #16]
 8019efe:	b928      	cbnz	r0, 8019f0c <_svfiprintf_r+0x30>
 8019f00:	230c      	movs	r3, #12
 8019f02:	f8c8 3000 	str.w	r3, [r8]
 8019f06:	f04f 30ff 	mov.w	r0, #4294967295
 8019f0a:	e0c8      	b.n	801a09e <_svfiprintf_r+0x1c2>
 8019f0c:	2340      	movs	r3, #64	; 0x40
 8019f0e:	6163      	str	r3, [r4, #20]
 8019f10:	2300      	movs	r3, #0
 8019f12:	9309      	str	r3, [sp, #36]	; 0x24
 8019f14:	2320      	movs	r3, #32
 8019f16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f1a:	2330      	movs	r3, #48	; 0x30
 8019f1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f20:	9503      	str	r5, [sp, #12]
 8019f22:	f04f 0b01 	mov.w	fp, #1
 8019f26:	4637      	mov	r7, r6
 8019f28:	463d      	mov	r5, r7
 8019f2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019f2e:	b10b      	cbz	r3, 8019f34 <_svfiprintf_r+0x58>
 8019f30:	2b25      	cmp	r3, #37	; 0x25
 8019f32:	d13e      	bne.n	8019fb2 <_svfiprintf_r+0xd6>
 8019f34:	ebb7 0a06 	subs.w	sl, r7, r6
 8019f38:	d00b      	beq.n	8019f52 <_svfiprintf_r+0x76>
 8019f3a:	4653      	mov	r3, sl
 8019f3c:	4632      	mov	r2, r6
 8019f3e:	4621      	mov	r1, r4
 8019f40:	4640      	mov	r0, r8
 8019f42:	f7ff ff70 	bl	8019e26 <__ssputs_r>
 8019f46:	3001      	adds	r0, #1
 8019f48:	f000 80a4 	beq.w	801a094 <_svfiprintf_r+0x1b8>
 8019f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f4e:	4453      	add	r3, sl
 8019f50:	9309      	str	r3, [sp, #36]	; 0x24
 8019f52:	783b      	ldrb	r3, [r7, #0]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	f000 809d 	beq.w	801a094 <_svfiprintf_r+0x1b8>
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8019f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f64:	9304      	str	r3, [sp, #16]
 8019f66:	9307      	str	r3, [sp, #28]
 8019f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8019f6e:	462f      	mov	r7, r5
 8019f70:	2205      	movs	r2, #5
 8019f72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019f76:	4850      	ldr	r0, [pc, #320]	; (801a0b8 <_svfiprintf_r+0x1dc>)
 8019f78:	f7e6 f942 	bl	8000200 <memchr>
 8019f7c:	9b04      	ldr	r3, [sp, #16]
 8019f7e:	b9d0      	cbnz	r0, 8019fb6 <_svfiprintf_r+0xda>
 8019f80:	06d9      	lsls	r1, r3, #27
 8019f82:	bf44      	itt	mi
 8019f84:	2220      	movmi	r2, #32
 8019f86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019f8a:	071a      	lsls	r2, r3, #28
 8019f8c:	bf44      	itt	mi
 8019f8e:	222b      	movmi	r2, #43	; 0x2b
 8019f90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019f94:	782a      	ldrb	r2, [r5, #0]
 8019f96:	2a2a      	cmp	r2, #42	; 0x2a
 8019f98:	d015      	beq.n	8019fc6 <_svfiprintf_r+0xea>
 8019f9a:	9a07      	ldr	r2, [sp, #28]
 8019f9c:	462f      	mov	r7, r5
 8019f9e:	2000      	movs	r0, #0
 8019fa0:	250a      	movs	r5, #10
 8019fa2:	4639      	mov	r1, r7
 8019fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019fa8:	3b30      	subs	r3, #48	; 0x30
 8019faa:	2b09      	cmp	r3, #9
 8019fac:	d94d      	bls.n	801a04a <_svfiprintf_r+0x16e>
 8019fae:	b1b8      	cbz	r0, 8019fe0 <_svfiprintf_r+0x104>
 8019fb0:	e00f      	b.n	8019fd2 <_svfiprintf_r+0xf6>
 8019fb2:	462f      	mov	r7, r5
 8019fb4:	e7b8      	b.n	8019f28 <_svfiprintf_r+0x4c>
 8019fb6:	4a40      	ldr	r2, [pc, #256]	; (801a0b8 <_svfiprintf_r+0x1dc>)
 8019fb8:	1a80      	subs	r0, r0, r2
 8019fba:	fa0b f000 	lsl.w	r0, fp, r0
 8019fbe:	4318      	orrs	r0, r3
 8019fc0:	9004      	str	r0, [sp, #16]
 8019fc2:	463d      	mov	r5, r7
 8019fc4:	e7d3      	b.n	8019f6e <_svfiprintf_r+0x92>
 8019fc6:	9a03      	ldr	r2, [sp, #12]
 8019fc8:	1d11      	adds	r1, r2, #4
 8019fca:	6812      	ldr	r2, [r2, #0]
 8019fcc:	9103      	str	r1, [sp, #12]
 8019fce:	2a00      	cmp	r2, #0
 8019fd0:	db01      	blt.n	8019fd6 <_svfiprintf_r+0xfa>
 8019fd2:	9207      	str	r2, [sp, #28]
 8019fd4:	e004      	b.n	8019fe0 <_svfiprintf_r+0x104>
 8019fd6:	4252      	negs	r2, r2
 8019fd8:	f043 0302 	orr.w	r3, r3, #2
 8019fdc:	9207      	str	r2, [sp, #28]
 8019fde:	9304      	str	r3, [sp, #16]
 8019fe0:	783b      	ldrb	r3, [r7, #0]
 8019fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8019fe4:	d10c      	bne.n	801a000 <_svfiprintf_r+0x124>
 8019fe6:	787b      	ldrb	r3, [r7, #1]
 8019fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8019fea:	d133      	bne.n	801a054 <_svfiprintf_r+0x178>
 8019fec:	9b03      	ldr	r3, [sp, #12]
 8019fee:	1d1a      	adds	r2, r3, #4
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	9203      	str	r2, [sp, #12]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	bfb8      	it	lt
 8019ff8:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ffc:	3702      	adds	r7, #2
 8019ffe:	9305      	str	r3, [sp, #20]
 801a000:	4d2e      	ldr	r5, [pc, #184]	; (801a0bc <_svfiprintf_r+0x1e0>)
 801a002:	7839      	ldrb	r1, [r7, #0]
 801a004:	2203      	movs	r2, #3
 801a006:	4628      	mov	r0, r5
 801a008:	f7e6 f8fa 	bl	8000200 <memchr>
 801a00c:	b138      	cbz	r0, 801a01e <_svfiprintf_r+0x142>
 801a00e:	2340      	movs	r3, #64	; 0x40
 801a010:	1b40      	subs	r0, r0, r5
 801a012:	fa03 f000 	lsl.w	r0, r3, r0
 801a016:	9b04      	ldr	r3, [sp, #16]
 801a018:	4303      	orrs	r3, r0
 801a01a:	3701      	adds	r7, #1
 801a01c:	9304      	str	r3, [sp, #16]
 801a01e:	7839      	ldrb	r1, [r7, #0]
 801a020:	4827      	ldr	r0, [pc, #156]	; (801a0c0 <_svfiprintf_r+0x1e4>)
 801a022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a026:	2206      	movs	r2, #6
 801a028:	1c7e      	adds	r6, r7, #1
 801a02a:	f7e6 f8e9 	bl	8000200 <memchr>
 801a02e:	2800      	cmp	r0, #0
 801a030:	d038      	beq.n	801a0a4 <_svfiprintf_r+0x1c8>
 801a032:	4b24      	ldr	r3, [pc, #144]	; (801a0c4 <_svfiprintf_r+0x1e8>)
 801a034:	bb13      	cbnz	r3, 801a07c <_svfiprintf_r+0x1a0>
 801a036:	9b03      	ldr	r3, [sp, #12]
 801a038:	3307      	adds	r3, #7
 801a03a:	f023 0307 	bic.w	r3, r3, #7
 801a03e:	3308      	adds	r3, #8
 801a040:	9303      	str	r3, [sp, #12]
 801a042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a044:	444b      	add	r3, r9
 801a046:	9309      	str	r3, [sp, #36]	; 0x24
 801a048:	e76d      	b.n	8019f26 <_svfiprintf_r+0x4a>
 801a04a:	fb05 3202 	mla	r2, r5, r2, r3
 801a04e:	2001      	movs	r0, #1
 801a050:	460f      	mov	r7, r1
 801a052:	e7a6      	b.n	8019fa2 <_svfiprintf_r+0xc6>
 801a054:	2300      	movs	r3, #0
 801a056:	3701      	adds	r7, #1
 801a058:	9305      	str	r3, [sp, #20]
 801a05a:	4619      	mov	r1, r3
 801a05c:	250a      	movs	r5, #10
 801a05e:	4638      	mov	r0, r7
 801a060:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a064:	3a30      	subs	r2, #48	; 0x30
 801a066:	2a09      	cmp	r2, #9
 801a068:	d903      	bls.n	801a072 <_svfiprintf_r+0x196>
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d0c8      	beq.n	801a000 <_svfiprintf_r+0x124>
 801a06e:	9105      	str	r1, [sp, #20]
 801a070:	e7c6      	b.n	801a000 <_svfiprintf_r+0x124>
 801a072:	fb05 2101 	mla	r1, r5, r1, r2
 801a076:	2301      	movs	r3, #1
 801a078:	4607      	mov	r7, r0
 801a07a:	e7f0      	b.n	801a05e <_svfiprintf_r+0x182>
 801a07c:	ab03      	add	r3, sp, #12
 801a07e:	9300      	str	r3, [sp, #0]
 801a080:	4622      	mov	r2, r4
 801a082:	4b11      	ldr	r3, [pc, #68]	; (801a0c8 <_svfiprintf_r+0x1ec>)
 801a084:	a904      	add	r1, sp, #16
 801a086:	4640      	mov	r0, r8
 801a088:	f7fc f89e 	bl	80161c8 <_printf_float>
 801a08c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a090:	4681      	mov	r9, r0
 801a092:	d1d6      	bne.n	801a042 <_svfiprintf_r+0x166>
 801a094:	89a3      	ldrh	r3, [r4, #12]
 801a096:	065b      	lsls	r3, r3, #25
 801a098:	f53f af35 	bmi.w	8019f06 <_svfiprintf_r+0x2a>
 801a09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a09e:	b01d      	add	sp, #116	; 0x74
 801a0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0a4:	ab03      	add	r3, sp, #12
 801a0a6:	9300      	str	r3, [sp, #0]
 801a0a8:	4622      	mov	r2, r4
 801a0aa:	4b07      	ldr	r3, [pc, #28]	; (801a0c8 <_svfiprintf_r+0x1ec>)
 801a0ac:	a904      	add	r1, sp, #16
 801a0ae:	4640      	mov	r0, r8
 801a0b0:	f7fc fb40 	bl	8016734 <_printf_i>
 801a0b4:	e7ea      	b.n	801a08c <_svfiprintf_r+0x1b0>
 801a0b6:	bf00      	nop
 801a0b8:	0801ad9c 	.word	0x0801ad9c
 801a0bc:	0801ada2 	.word	0x0801ada2
 801a0c0:	0801ada6 	.word	0x0801ada6
 801a0c4:	080161c9 	.word	0x080161c9
 801a0c8:	08019e27 	.word	0x08019e27

0801a0cc <_raise_r>:
 801a0cc:	291f      	cmp	r1, #31
 801a0ce:	b538      	push	{r3, r4, r5, lr}
 801a0d0:	4604      	mov	r4, r0
 801a0d2:	460d      	mov	r5, r1
 801a0d4:	d904      	bls.n	801a0e0 <_raise_r+0x14>
 801a0d6:	2316      	movs	r3, #22
 801a0d8:	6003      	str	r3, [r0, #0]
 801a0da:	f04f 30ff 	mov.w	r0, #4294967295
 801a0de:	bd38      	pop	{r3, r4, r5, pc}
 801a0e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a0e2:	b112      	cbz	r2, 801a0ea <_raise_r+0x1e>
 801a0e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a0e8:	b94b      	cbnz	r3, 801a0fe <_raise_r+0x32>
 801a0ea:	4620      	mov	r0, r4
 801a0ec:	f000 f830 	bl	801a150 <_getpid_r>
 801a0f0:	462a      	mov	r2, r5
 801a0f2:	4601      	mov	r1, r0
 801a0f4:	4620      	mov	r0, r4
 801a0f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a0fa:	f000 b817 	b.w	801a12c <_kill_r>
 801a0fe:	2b01      	cmp	r3, #1
 801a100:	d00a      	beq.n	801a118 <_raise_r+0x4c>
 801a102:	1c59      	adds	r1, r3, #1
 801a104:	d103      	bne.n	801a10e <_raise_r+0x42>
 801a106:	2316      	movs	r3, #22
 801a108:	6003      	str	r3, [r0, #0]
 801a10a:	2001      	movs	r0, #1
 801a10c:	e7e7      	b.n	801a0de <_raise_r+0x12>
 801a10e:	2400      	movs	r4, #0
 801a110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a114:	4628      	mov	r0, r5
 801a116:	4798      	blx	r3
 801a118:	2000      	movs	r0, #0
 801a11a:	e7e0      	b.n	801a0de <_raise_r+0x12>

0801a11c <raise>:
 801a11c:	4b02      	ldr	r3, [pc, #8]	; (801a128 <raise+0xc>)
 801a11e:	4601      	mov	r1, r0
 801a120:	6818      	ldr	r0, [r3, #0]
 801a122:	f7ff bfd3 	b.w	801a0cc <_raise_r>
 801a126:	bf00      	nop
 801a128:	200000c4 	.word	0x200000c4

0801a12c <_kill_r>:
 801a12c:	b538      	push	{r3, r4, r5, lr}
 801a12e:	4c07      	ldr	r4, [pc, #28]	; (801a14c <_kill_r+0x20>)
 801a130:	2300      	movs	r3, #0
 801a132:	4605      	mov	r5, r0
 801a134:	4608      	mov	r0, r1
 801a136:	4611      	mov	r1, r2
 801a138:	6023      	str	r3, [r4, #0]
 801a13a:	f7ed fffb 	bl	8008134 <_kill>
 801a13e:	1c43      	adds	r3, r0, #1
 801a140:	d102      	bne.n	801a148 <_kill_r+0x1c>
 801a142:	6823      	ldr	r3, [r4, #0]
 801a144:	b103      	cbz	r3, 801a148 <_kill_r+0x1c>
 801a146:	602b      	str	r3, [r5, #0]
 801a148:	bd38      	pop	{r3, r4, r5, pc}
 801a14a:	bf00      	nop
 801a14c:	20002514 	.word	0x20002514

0801a150 <_getpid_r>:
 801a150:	f7ed bfe8 	b.w	8008124 <_getpid>

0801a154 <__sread>:
 801a154:	b510      	push	{r4, lr}
 801a156:	460c      	mov	r4, r1
 801a158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a15c:	f000 f8ba 	bl	801a2d4 <_read_r>
 801a160:	2800      	cmp	r0, #0
 801a162:	bfab      	itete	ge
 801a164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a166:	89a3      	ldrhlt	r3, [r4, #12]
 801a168:	181b      	addge	r3, r3, r0
 801a16a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a16e:	bfac      	ite	ge
 801a170:	6563      	strge	r3, [r4, #84]	; 0x54
 801a172:	81a3      	strhlt	r3, [r4, #12]
 801a174:	bd10      	pop	{r4, pc}

0801a176 <__swrite>:
 801a176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a17a:	461f      	mov	r7, r3
 801a17c:	898b      	ldrh	r3, [r1, #12]
 801a17e:	05db      	lsls	r3, r3, #23
 801a180:	4605      	mov	r5, r0
 801a182:	460c      	mov	r4, r1
 801a184:	4616      	mov	r6, r2
 801a186:	d505      	bpl.n	801a194 <__swrite+0x1e>
 801a188:	2302      	movs	r3, #2
 801a18a:	2200      	movs	r2, #0
 801a18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a190:	f000 f886 	bl	801a2a0 <_lseek_r>
 801a194:	89a3      	ldrh	r3, [r4, #12]
 801a196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a19a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a19e:	81a3      	strh	r3, [r4, #12]
 801a1a0:	4632      	mov	r2, r6
 801a1a2:	463b      	mov	r3, r7
 801a1a4:	4628      	mov	r0, r5
 801a1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1aa:	f000 b835 	b.w	801a218 <_write_r>

0801a1ae <__sseek>:
 801a1ae:	b510      	push	{r4, lr}
 801a1b0:	460c      	mov	r4, r1
 801a1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1b6:	f000 f873 	bl	801a2a0 <_lseek_r>
 801a1ba:	1c43      	adds	r3, r0, #1
 801a1bc:	89a3      	ldrh	r3, [r4, #12]
 801a1be:	bf15      	itete	ne
 801a1c0:	6560      	strne	r0, [r4, #84]	; 0x54
 801a1c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a1c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a1ca:	81a3      	strheq	r3, [r4, #12]
 801a1cc:	bf18      	it	ne
 801a1ce:	81a3      	strhne	r3, [r4, #12]
 801a1d0:	bd10      	pop	{r4, pc}

0801a1d2 <__sclose>:
 801a1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1d6:	f000 b831 	b.w	801a23c <_close_r>

0801a1da <strncmp>:
 801a1da:	b510      	push	{r4, lr}
 801a1dc:	b16a      	cbz	r2, 801a1fa <strncmp+0x20>
 801a1de:	3901      	subs	r1, #1
 801a1e0:	1884      	adds	r4, r0, r2
 801a1e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a1e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a1ea:	4293      	cmp	r3, r2
 801a1ec:	d103      	bne.n	801a1f6 <strncmp+0x1c>
 801a1ee:	42a0      	cmp	r0, r4
 801a1f0:	d001      	beq.n	801a1f6 <strncmp+0x1c>
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d1f5      	bne.n	801a1e2 <strncmp+0x8>
 801a1f6:	1a98      	subs	r0, r3, r2
 801a1f8:	bd10      	pop	{r4, pc}
 801a1fa:	4610      	mov	r0, r2
 801a1fc:	e7fc      	b.n	801a1f8 <strncmp+0x1e>

0801a1fe <__ascii_wctomb>:
 801a1fe:	b149      	cbz	r1, 801a214 <__ascii_wctomb+0x16>
 801a200:	2aff      	cmp	r2, #255	; 0xff
 801a202:	bf85      	ittet	hi
 801a204:	238a      	movhi	r3, #138	; 0x8a
 801a206:	6003      	strhi	r3, [r0, #0]
 801a208:	700a      	strbls	r2, [r1, #0]
 801a20a:	f04f 30ff 	movhi.w	r0, #4294967295
 801a20e:	bf98      	it	ls
 801a210:	2001      	movls	r0, #1
 801a212:	4770      	bx	lr
 801a214:	4608      	mov	r0, r1
 801a216:	4770      	bx	lr

0801a218 <_write_r>:
 801a218:	b538      	push	{r3, r4, r5, lr}
 801a21a:	4c07      	ldr	r4, [pc, #28]	; (801a238 <_write_r+0x20>)
 801a21c:	4605      	mov	r5, r0
 801a21e:	4608      	mov	r0, r1
 801a220:	4611      	mov	r1, r2
 801a222:	2200      	movs	r2, #0
 801a224:	6022      	str	r2, [r4, #0]
 801a226:	461a      	mov	r2, r3
 801a228:	f7ed ffbb 	bl	80081a2 <_write>
 801a22c:	1c43      	adds	r3, r0, #1
 801a22e:	d102      	bne.n	801a236 <_write_r+0x1e>
 801a230:	6823      	ldr	r3, [r4, #0]
 801a232:	b103      	cbz	r3, 801a236 <_write_r+0x1e>
 801a234:	602b      	str	r3, [r5, #0]
 801a236:	bd38      	pop	{r3, r4, r5, pc}
 801a238:	20002514 	.word	0x20002514

0801a23c <_close_r>:
 801a23c:	b538      	push	{r3, r4, r5, lr}
 801a23e:	4c06      	ldr	r4, [pc, #24]	; (801a258 <_close_r+0x1c>)
 801a240:	2300      	movs	r3, #0
 801a242:	4605      	mov	r5, r0
 801a244:	4608      	mov	r0, r1
 801a246:	6023      	str	r3, [r4, #0]
 801a248:	f7ed ffc7 	bl	80081da <_close>
 801a24c:	1c43      	adds	r3, r0, #1
 801a24e:	d102      	bne.n	801a256 <_close_r+0x1a>
 801a250:	6823      	ldr	r3, [r4, #0]
 801a252:	b103      	cbz	r3, 801a256 <_close_r+0x1a>
 801a254:	602b      	str	r3, [r5, #0]
 801a256:	bd38      	pop	{r3, r4, r5, pc}
 801a258:	20002514 	.word	0x20002514

0801a25c <_fstat_r>:
 801a25c:	b538      	push	{r3, r4, r5, lr}
 801a25e:	4c07      	ldr	r4, [pc, #28]	; (801a27c <_fstat_r+0x20>)
 801a260:	2300      	movs	r3, #0
 801a262:	4605      	mov	r5, r0
 801a264:	4608      	mov	r0, r1
 801a266:	4611      	mov	r1, r2
 801a268:	6023      	str	r3, [r4, #0]
 801a26a:	f7ed ffc2 	bl	80081f2 <_fstat>
 801a26e:	1c43      	adds	r3, r0, #1
 801a270:	d102      	bne.n	801a278 <_fstat_r+0x1c>
 801a272:	6823      	ldr	r3, [r4, #0]
 801a274:	b103      	cbz	r3, 801a278 <_fstat_r+0x1c>
 801a276:	602b      	str	r3, [r5, #0]
 801a278:	bd38      	pop	{r3, r4, r5, pc}
 801a27a:	bf00      	nop
 801a27c:	20002514 	.word	0x20002514

0801a280 <_isatty_r>:
 801a280:	b538      	push	{r3, r4, r5, lr}
 801a282:	4c06      	ldr	r4, [pc, #24]	; (801a29c <_isatty_r+0x1c>)
 801a284:	2300      	movs	r3, #0
 801a286:	4605      	mov	r5, r0
 801a288:	4608      	mov	r0, r1
 801a28a:	6023      	str	r3, [r4, #0]
 801a28c:	f7ed ffc1 	bl	8008212 <_isatty>
 801a290:	1c43      	adds	r3, r0, #1
 801a292:	d102      	bne.n	801a29a <_isatty_r+0x1a>
 801a294:	6823      	ldr	r3, [r4, #0]
 801a296:	b103      	cbz	r3, 801a29a <_isatty_r+0x1a>
 801a298:	602b      	str	r3, [r5, #0]
 801a29a:	bd38      	pop	{r3, r4, r5, pc}
 801a29c:	20002514 	.word	0x20002514

0801a2a0 <_lseek_r>:
 801a2a0:	b538      	push	{r3, r4, r5, lr}
 801a2a2:	4c07      	ldr	r4, [pc, #28]	; (801a2c0 <_lseek_r+0x20>)
 801a2a4:	4605      	mov	r5, r0
 801a2a6:	4608      	mov	r0, r1
 801a2a8:	4611      	mov	r1, r2
 801a2aa:	2200      	movs	r2, #0
 801a2ac:	6022      	str	r2, [r4, #0]
 801a2ae:	461a      	mov	r2, r3
 801a2b0:	f7ed ffba 	bl	8008228 <_lseek>
 801a2b4:	1c43      	adds	r3, r0, #1
 801a2b6:	d102      	bne.n	801a2be <_lseek_r+0x1e>
 801a2b8:	6823      	ldr	r3, [r4, #0]
 801a2ba:	b103      	cbz	r3, 801a2be <_lseek_r+0x1e>
 801a2bc:	602b      	str	r3, [r5, #0]
 801a2be:	bd38      	pop	{r3, r4, r5, pc}
 801a2c0:	20002514 	.word	0x20002514

0801a2c4 <_malloc_usable_size_r>:
 801a2c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a2c8:	1f18      	subs	r0, r3, #4
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	bfbc      	itt	lt
 801a2ce:	580b      	ldrlt	r3, [r1, r0]
 801a2d0:	18c0      	addlt	r0, r0, r3
 801a2d2:	4770      	bx	lr

0801a2d4 <_read_r>:
 801a2d4:	b538      	push	{r3, r4, r5, lr}
 801a2d6:	4c07      	ldr	r4, [pc, #28]	; (801a2f4 <_read_r+0x20>)
 801a2d8:	4605      	mov	r5, r0
 801a2da:	4608      	mov	r0, r1
 801a2dc:	4611      	mov	r1, r2
 801a2de:	2200      	movs	r2, #0
 801a2e0:	6022      	str	r2, [r4, #0]
 801a2e2:	461a      	mov	r2, r3
 801a2e4:	f7ed ff40 	bl	8008168 <_read>
 801a2e8:	1c43      	adds	r3, r0, #1
 801a2ea:	d102      	bne.n	801a2f2 <_read_r+0x1e>
 801a2ec:	6823      	ldr	r3, [r4, #0]
 801a2ee:	b103      	cbz	r3, 801a2f2 <_read_r+0x1e>
 801a2f0:	602b      	str	r3, [r5, #0]
 801a2f2:	bd38      	pop	{r3, r4, r5, pc}
 801a2f4:	20002514 	.word	0x20002514

0801a2f8 <_init>:
 801a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2fa:	bf00      	nop
 801a2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2fe:	bc08      	pop	{r3}
 801a300:	469e      	mov	lr, r3
 801a302:	4770      	bx	lr

0801a304 <_fini>:
 801a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a306:	bf00      	nop
 801a308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a30a:	bc08      	pop	{r3}
 801a30c:	469e      	mov	lr, r3
 801a30e:	4770      	bx	lr
