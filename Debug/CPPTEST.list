
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dd20  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  0801ded0  0801ded0  0002ded0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ecd8  0801ecd8  00030394  2**0
                  CONTENTS
  4 .ARM          00000008  0801ecd8  0801ecd8  0002ecd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ece0  0801ece0  00030394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ece0  0801ece0  0002ece0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ece8  0801ece8  0002ece8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  0801ecec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007a38  20000398  0801f080  00030398  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007dd0  0801f080  00037dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039129  00000000  00000000  000303c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c76  00000000  00000000  000694ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002770  00000000  00000000  00070168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002468  00000000  00000000  000728d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003109f  00000000  00000000  00074d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002516e  00000000  00000000  000a5ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa848  00000000  00000000  000caf4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c5795  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd70  00000000  00000000  001c5810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000398 	.word	0x20000398
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801deb8 	.word	0x0801deb8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000039c 	.word	0x2000039c
 80001ec:	0801deb8 	.word	0x0801deb8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	; 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d64:	f1a2 0201 	sub.w	r2, r2, #1
 8000d68:	d1ed      	bne.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_ldivmod>:
 8000ec4:	b97b      	cbnz	r3, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec6:	b972      	cbnz	r2, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	bfbe      	ittt	lt
 8000ecc:	2000      	movlt	r0, #0
 8000ece:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ed2:	e006      	blt.n	8000ee2 <__aeabi_ldivmod+0x1e>
 8000ed4:	bf08      	it	eq
 8000ed6:	2800      	cmpeq	r0, #0
 8000ed8:	bf1c      	itt	ne
 8000eda:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ede:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee2:	f000 b9bd 	b.w	8001260 <__aeabi_idiv0>
 8000ee6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eee:	2900      	cmp	r1, #0
 8000ef0:	db09      	blt.n	8000f06 <__aeabi_ldivmod+0x42>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db1a      	blt.n	8000f2c <__aeabi_ldivmod+0x68>
 8000ef6:	f000 f84d 	bl	8000f94 <__udivmoddi4>
 8000efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f02:	b004      	add	sp, #16
 8000f04:	4770      	bx	lr
 8000f06:	4240      	negs	r0, r0
 8000f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db1b      	blt.n	8000f48 <__aeabi_ldivmod+0x84>
 8000f10:	f000 f840 	bl	8000f94 <__udivmoddi4>
 8000f14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1c:	b004      	add	sp, #16
 8000f1e:	4240      	negs	r0, r0
 8000f20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f24:	4252      	negs	r2, r2
 8000f26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2a:	4770      	bx	lr
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f32:	f000 f82f 	bl	8000f94 <__udivmoddi4>
 8000f36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3e:	b004      	add	sp, #16
 8000f40:	4240      	negs	r0, r0
 8000f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f46:	4770      	bx	lr
 8000f48:	4252      	negs	r2, r2
 8000f4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4e:	f000 f821 	bl	8000f94 <__udivmoddi4>
 8000f52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5a:	b004      	add	sp, #16
 8000f5c:	4252      	negs	r2, r2
 8000f5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_uldivmod>:
 8000f64:	b953      	cbnz	r3, 8000f7c <__aeabi_uldivmod+0x18>
 8000f66:	b94a      	cbnz	r2, 8000f7c <__aeabi_uldivmod+0x18>
 8000f68:	2900      	cmp	r1, #0
 8000f6a:	bf08      	it	eq
 8000f6c:	2800      	cmpeq	r0, #0
 8000f6e:	bf1c      	itt	ne
 8000f70:	f04f 31ff 	movne.w	r1, #4294967295
 8000f74:	f04f 30ff 	movne.w	r0, #4294967295
 8000f78:	f000 b972 	b.w	8001260 <__aeabi_idiv0>
 8000f7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f84:	f000 f806 	bl	8000f94 <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr

08000f94 <__udivmoddi4>:
 8000f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f98:	9e08      	ldr	r6, [sp, #32]
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4688      	mov	r8, r1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d14b      	bne.n	800103a <__udivmoddi4+0xa6>
 8000fa2:	428a      	cmp	r2, r1
 8000fa4:	4615      	mov	r5, r2
 8000fa6:	d967      	bls.n	8001078 <__udivmoddi4+0xe4>
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	b14a      	cbz	r2, 8000fc2 <__udivmoddi4+0x2e>
 8000fae:	f1c2 0720 	rsb	r7, r2, #32
 8000fb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000fb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000fba:	4095      	lsls	r5, r2
 8000fbc:	ea47 0803 	orr.w	r8, r7, r3
 8000fc0:	4094      	lsls	r4, r2
 8000fc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fc6:	0c23      	lsrs	r3, r4, #16
 8000fc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000fcc:	fa1f fc85 	uxth.w	ip, r5
 8000fd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000fd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000fdc:	4299      	cmp	r1, r3
 8000fde:	d909      	bls.n	8000ff4 <__udivmoddi4+0x60>
 8000fe0:	18eb      	adds	r3, r5, r3
 8000fe2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000fe6:	f080 811b 	bcs.w	8001220 <__udivmoddi4+0x28c>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 8118 	bls.w	8001220 <__udivmoddi4+0x28c>
 8000ff0:	3f02      	subs	r7, #2
 8000ff2:	442b      	add	r3, r5
 8000ff4:	1a5b      	subs	r3, r3, r1
 8000ff6:	b2a4      	uxth	r4, r4
 8000ff8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ffc:	fb0e 3310 	mls	r3, lr, r0, r3
 8001000:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001004:	fb00 fc0c 	mul.w	ip, r0, ip
 8001008:	45a4      	cmp	ip, r4
 800100a:	d909      	bls.n	8001020 <__udivmoddi4+0x8c>
 800100c:	192c      	adds	r4, r5, r4
 800100e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001012:	f080 8107 	bcs.w	8001224 <__udivmoddi4+0x290>
 8001016:	45a4      	cmp	ip, r4
 8001018:	f240 8104 	bls.w	8001224 <__udivmoddi4+0x290>
 800101c:	3802      	subs	r0, #2
 800101e:	442c      	add	r4, r5
 8001020:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001024:	eba4 040c 	sub.w	r4, r4, ip
 8001028:	2700      	movs	r7, #0
 800102a:	b11e      	cbz	r6, 8001034 <__udivmoddi4+0xa0>
 800102c:	40d4      	lsrs	r4, r2
 800102e:	2300      	movs	r3, #0
 8001030:	e9c6 4300 	strd	r4, r3, [r6]
 8001034:	4639      	mov	r1, r7
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d909      	bls.n	8001052 <__udivmoddi4+0xbe>
 800103e:	2e00      	cmp	r6, #0
 8001040:	f000 80eb 	beq.w	800121a <__udivmoddi4+0x286>
 8001044:	2700      	movs	r7, #0
 8001046:	e9c6 0100 	strd	r0, r1, [r6]
 800104a:	4638      	mov	r0, r7
 800104c:	4639      	mov	r1, r7
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	fab3 f783 	clz	r7, r3
 8001056:	2f00      	cmp	r7, #0
 8001058:	d147      	bne.n	80010ea <__udivmoddi4+0x156>
 800105a:	428b      	cmp	r3, r1
 800105c:	d302      	bcc.n	8001064 <__udivmoddi4+0xd0>
 800105e:	4282      	cmp	r2, r0
 8001060:	f200 80fa 	bhi.w	8001258 <__udivmoddi4+0x2c4>
 8001064:	1a84      	subs	r4, r0, r2
 8001066:	eb61 0303 	sbc.w	r3, r1, r3
 800106a:	2001      	movs	r0, #1
 800106c:	4698      	mov	r8, r3
 800106e:	2e00      	cmp	r6, #0
 8001070:	d0e0      	beq.n	8001034 <__udivmoddi4+0xa0>
 8001072:	e9c6 4800 	strd	r4, r8, [r6]
 8001076:	e7dd      	b.n	8001034 <__udivmoddi4+0xa0>
 8001078:	b902      	cbnz	r2, 800107c <__udivmoddi4+0xe8>
 800107a:	deff      	udf	#255	; 0xff
 800107c:	fab2 f282 	clz	r2, r2
 8001080:	2a00      	cmp	r2, #0
 8001082:	f040 808f 	bne.w	80011a4 <__udivmoddi4+0x210>
 8001086:	1b49      	subs	r1, r1, r5
 8001088:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800108c:	fa1f f885 	uxth.w	r8, r5
 8001090:	2701      	movs	r7, #1
 8001092:	fbb1 fcfe 	udiv	ip, r1, lr
 8001096:	0c23      	lsrs	r3, r4, #16
 8001098:	fb0e 111c 	mls	r1, lr, ip, r1
 800109c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010a0:	fb08 f10c 	mul.w	r1, r8, ip
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d907      	bls.n	80010b8 <__udivmoddi4+0x124>
 80010a8:	18eb      	adds	r3, r5, r3
 80010aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80010ae:	d202      	bcs.n	80010b6 <__udivmoddi4+0x122>
 80010b0:	4299      	cmp	r1, r3
 80010b2:	f200 80cd 	bhi.w	8001250 <__udivmoddi4+0x2bc>
 80010b6:	4684      	mov	ip, r0
 80010b8:	1a59      	subs	r1, r3, r1
 80010ba:	b2a3      	uxth	r3, r4
 80010bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80010c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80010c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80010c8:	fb08 f800 	mul.w	r8, r8, r0
 80010cc:	45a0      	cmp	r8, r4
 80010ce:	d907      	bls.n	80010e0 <__udivmoddi4+0x14c>
 80010d0:	192c      	adds	r4, r5, r4
 80010d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80010d6:	d202      	bcs.n	80010de <__udivmoddi4+0x14a>
 80010d8:	45a0      	cmp	r8, r4
 80010da:	f200 80b6 	bhi.w	800124a <__udivmoddi4+0x2b6>
 80010de:	4618      	mov	r0, r3
 80010e0:	eba4 0408 	sub.w	r4, r4, r8
 80010e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010e8:	e79f      	b.n	800102a <__udivmoddi4+0x96>
 80010ea:	f1c7 0c20 	rsb	ip, r7, #32
 80010ee:	40bb      	lsls	r3, r7
 80010f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80010f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80010f8:	fa01 f407 	lsl.w	r4, r1, r7
 80010fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8001100:	fa21 f30c 	lsr.w	r3, r1, ip
 8001104:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001108:	4325      	orrs	r5, r4
 800110a:	fbb3 f9f8 	udiv	r9, r3, r8
 800110e:	0c2c      	lsrs	r4, r5, #16
 8001110:	fb08 3319 	mls	r3, r8, r9, r3
 8001114:	fa1f fa8e 	uxth.w	sl, lr
 8001118:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800111c:	fb09 f40a 	mul.w	r4, r9, sl
 8001120:	429c      	cmp	r4, r3
 8001122:	fa02 f207 	lsl.w	r2, r2, r7
 8001126:	fa00 f107 	lsl.w	r1, r0, r7
 800112a:	d90b      	bls.n	8001144 <__udivmoddi4+0x1b0>
 800112c:	eb1e 0303 	adds.w	r3, lr, r3
 8001130:	f109 30ff 	add.w	r0, r9, #4294967295
 8001134:	f080 8087 	bcs.w	8001246 <__udivmoddi4+0x2b2>
 8001138:	429c      	cmp	r4, r3
 800113a:	f240 8084 	bls.w	8001246 <__udivmoddi4+0x2b2>
 800113e:	f1a9 0902 	sub.w	r9, r9, #2
 8001142:	4473      	add	r3, lr
 8001144:	1b1b      	subs	r3, r3, r4
 8001146:	b2ad      	uxth	r5, r5
 8001148:	fbb3 f0f8 	udiv	r0, r3, r8
 800114c:	fb08 3310 	mls	r3, r8, r0, r3
 8001150:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001154:	fb00 fa0a 	mul.w	sl, r0, sl
 8001158:	45a2      	cmp	sl, r4
 800115a:	d908      	bls.n	800116e <__udivmoddi4+0x1da>
 800115c:	eb1e 0404 	adds.w	r4, lr, r4
 8001160:	f100 33ff 	add.w	r3, r0, #4294967295
 8001164:	d26b      	bcs.n	800123e <__udivmoddi4+0x2aa>
 8001166:	45a2      	cmp	sl, r4
 8001168:	d969      	bls.n	800123e <__udivmoddi4+0x2aa>
 800116a:	3802      	subs	r0, #2
 800116c:	4474      	add	r4, lr
 800116e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001172:	fba0 8902 	umull	r8, r9, r0, r2
 8001176:	eba4 040a 	sub.w	r4, r4, sl
 800117a:	454c      	cmp	r4, r9
 800117c:	46c2      	mov	sl, r8
 800117e:	464b      	mov	r3, r9
 8001180:	d354      	bcc.n	800122c <__udivmoddi4+0x298>
 8001182:	d051      	beq.n	8001228 <__udivmoddi4+0x294>
 8001184:	2e00      	cmp	r6, #0
 8001186:	d069      	beq.n	800125c <__udivmoddi4+0x2c8>
 8001188:	ebb1 050a 	subs.w	r5, r1, sl
 800118c:	eb64 0403 	sbc.w	r4, r4, r3
 8001190:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001194:	40fd      	lsrs	r5, r7
 8001196:	40fc      	lsrs	r4, r7
 8001198:	ea4c 0505 	orr.w	r5, ip, r5
 800119c:	e9c6 5400 	strd	r5, r4, [r6]
 80011a0:	2700      	movs	r7, #0
 80011a2:	e747      	b.n	8001034 <__udivmoddi4+0xa0>
 80011a4:	f1c2 0320 	rsb	r3, r2, #32
 80011a8:	fa20 f703 	lsr.w	r7, r0, r3
 80011ac:	4095      	lsls	r5, r2
 80011ae:	fa01 f002 	lsl.w	r0, r1, r2
 80011b2:	fa21 f303 	lsr.w	r3, r1, r3
 80011b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ba:	4338      	orrs	r0, r7
 80011bc:	0c01      	lsrs	r1, r0, #16
 80011be:	fbb3 f7fe 	udiv	r7, r3, lr
 80011c2:	fa1f f885 	uxth.w	r8, r5
 80011c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80011ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011ce:	fb07 f308 	mul.w	r3, r7, r8
 80011d2:	428b      	cmp	r3, r1
 80011d4:	fa04 f402 	lsl.w	r4, r4, r2
 80011d8:	d907      	bls.n	80011ea <__udivmoddi4+0x256>
 80011da:	1869      	adds	r1, r5, r1
 80011dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80011e0:	d22f      	bcs.n	8001242 <__udivmoddi4+0x2ae>
 80011e2:	428b      	cmp	r3, r1
 80011e4:	d92d      	bls.n	8001242 <__udivmoddi4+0x2ae>
 80011e6:	3f02      	subs	r7, #2
 80011e8:	4429      	add	r1, r5
 80011ea:	1acb      	subs	r3, r1, r3
 80011ec:	b281      	uxth	r1, r0
 80011ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80011f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80011f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011fa:	fb00 f308 	mul.w	r3, r0, r8
 80011fe:	428b      	cmp	r3, r1
 8001200:	d907      	bls.n	8001212 <__udivmoddi4+0x27e>
 8001202:	1869      	adds	r1, r5, r1
 8001204:	f100 3cff 	add.w	ip, r0, #4294967295
 8001208:	d217      	bcs.n	800123a <__udivmoddi4+0x2a6>
 800120a:	428b      	cmp	r3, r1
 800120c:	d915      	bls.n	800123a <__udivmoddi4+0x2a6>
 800120e:	3802      	subs	r0, #2
 8001210:	4429      	add	r1, r5
 8001212:	1ac9      	subs	r1, r1, r3
 8001214:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001218:	e73b      	b.n	8001092 <__udivmoddi4+0xfe>
 800121a:	4637      	mov	r7, r6
 800121c:	4630      	mov	r0, r6
 800121e:	e709      	b.n	8001034 <__udivmoddi4+0xa0>
 8001220:	4607      	mov	r7, r0
 8001222:	e6e7      	b.n	8000ff4 <__udivmoddi4+0x60>
 8001224:	4618      	mov	r0, r3
 8001226:	e6fb      	b.n	8001020 <__udivmoddi4+0x8c>
 8001228:	4541      	cmp	r1, r8
 800122a:	d2ab      	bcs.n	8001184 <__udivmoddi4+0x1f0>
 800122c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001230:	eb69 020e 	sbc.w	r2, r9, lr
 8001234:	3801      	subs	r0, #1
 8001236:	4613      	mov	r3, r2
 8001238:	e7a4      	b.n	8001184 <__udivmoddi4+0x1f0>
 800123a:	4660      	mov	r0, ip
 800123c:	e7e9      	b.n	8001212 <__udivmoddi4+0x27e>
 800123e:	4618      	mov	r0, r3
 8001240:	e795      	b.n	800116e <__udivmoddi4+0x1da>
 8001242:	4667      	mov	r7, ip
 8001244:	e7d1      	b.n	80011ea <__udivmoddi4+0x256>
 8001246:	4681      	mov	r9, r0
 8001248:	e77c      	b.n	8001144 <__udivmoddi4+0x1b0>
 800124a:	3802      	subs	r0, #2
 800124c:	442c      	add	r4, r5
 800124e:	e747      	b.n	80010e0 <__udivmoddi4+0x14c>
 8001250:	f1ac 0c02 	sub.w	ip, ip, #2
 8001254:	442b      	add	r3, r5
 8001256:	e72f      	b.n	80010b8 <__udivmoddi4+0x124>
 8001258:	4638      	mov	r0, r7
 800125a:	e708      	b.n	800106e <__udivmoddi4+0xda>
 800125c:	4637      	mov	r7, r6
 800125e:	e6e9      	b.n	8001034 <__udivmoddi4+0xa0>

08001260 <__aeabi_idiv0>:
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <IST8310+0x24>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 8001272:	f000 f915 	bl	80014a0 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 8001276:	210b      	movs	r1, #11
 8001278:	200a      	movs	r0, #10
 800127a:	f000 f8ff 	bl	800147c <IST8310_write_reg>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200008e0 	.word	0x200008e0

0800128c <IST8310_updataIT>:

/*
 *  150hz gogo
 */
void IST8310_updataIT(){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af02      	add	r7, sp, #8
	while(1){
		if(bm_i2cFlag == bm_i2cIdle){
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <IST8310_updataIT+0x38>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <IST8310_updataIT+0x2c>
			HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <IST8310_updataIT+0x3c>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	2306      	movs	r3, #6
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <IST8310_updataIT+0x40>)
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	211c      	movs	r1, #28
 80012ac:	f009 fa72 	bl	800a794 <HAL_I2C_Mem_Read_IT>
			bm_i2cFlag = bm_i2cIST8310;
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <IST8310_updataIT+0x38>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]
			return;
 80012b6:	e003      	b.n	80012c0 <IST8310_updataIT+0x34>
		}
		else osDelay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f013 fe17 	bl	8014eec <osDelay>
		if(bm_i2cFlag == bm_i2cIdle){
 80012be:	e7e8      	b.n	8001292 <IST8310_updataIT+0x6>
	}
}
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200008fc 	.word	0x200008fc
 80012c8:	200008e0 	.word	0x200008e0
 80012cc:	200008e4 	.word	0x200008e4

080012d0 <IST8310_i2cRxCpltCallback>:
void IST8310_i2cRxCpltCallback(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return;
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <IST8310_i2cRxCpltCallback+0x168>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	f040 8097 	bne.w	800140c <IST8310_i2cRxCpltCallback+0x13c>

	bm_i2cFlag = bm_i2cIdle;
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <IST8310_i2cRxCpltCallback+0x168>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012e6:	795b      	ldrb	r3, [r3, #5]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b51      	ldr	r3, [pc, #324]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012f8:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012fc:	79db      	ldrb	r3, [r3, #7]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b4e      	ldr	r3, [pc, #312]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001304:	799b      	ldrb	r3, [r3, #6]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b4b      	ldr	r3, [pc, #300]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 800130e:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 8001310:	4b4a      	ldr	r3, [pc, #296]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001312:	7a5b      	ldrb	r3, [r3, #9]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b48      	ldr	r3, [pc, #288]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 800131a:	7a1b      	ldrb	r3, [r3, #8]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b46      	ldr	r3, [pc, #280]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001324:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001328:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f909 	bl	8000544 <__aeabi_i2d>
 8001332:	a339      	add	r3, pc, #228	; (adr r3, 8001418 <IST8310_i2cRxCpltCallback+0x148>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff fbfe 	bl	8000b38 <__aeabi_dcmpgt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d166      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001344:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8fb 	bl	8000544 <__aeabi_i2d>
 800134e:	a334      	add	r3, pc, #208	; (adr r3, 8001420 <IST8310_i2cRxCpltCallback+0x150>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff fbd2 	bl	8000afc <__aeabi_dcmplt>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d158      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001360:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8ed 	bl	8000544 <__aeabi_i2d>
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 800136a:	a32b      	add	r3, pc, #172	; (adr r3, 8001418 <IST8310_i2cRxCpltCallback+0x148>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff fbe2 	bl	8000b38 <__aeabi_dcmpgt>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d14a      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 800137c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8df 	bl	8000544 <__aeabi_i2d>
 8001386:	a326      	add	r3, pc, #152	; (adr r3, 8001420 <IST8310_i2cRxCpltCallback+0x150>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fbb6 	bl	8000afc <__aeabi_dcmplt>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d13c      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001398:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8d1 	bl	8000544 <__aeabi_i2d>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 80013a2:	a321      	add	r3, pc, #132	; (adr r3, 8001428 <IST8310_i2cRxCpltCallback+0x158>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff fbc6 	bl	8000b38 <__aeabi_dcmpgt>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d12e      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8c3 	bl	8000544 <__aeabi_i2d>
 80013be:	a31c      	add	r3, pc, #112	; (adr r3, 8001430 <IST8310_i2cRxCpltCallback+0x160>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff fb9a 	bl	8000afc <__aeabi_dcmplt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d120      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013de:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013f2:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001406:	edc3 7a06 	vstr	s15, [r3, #24]
 800140a:	e002      	b.n	8001412 <IST8310_i2cRxCpltCallback+0x142>
	if(bm_i2cFlag != bm_i2cIST8310) return;
 800140c:	bf00      	nop
 800140e:	e000      	b.n	8001412 <IST8310_i2cRxCpltCallback+0x142>
		return;
 8001410:	bf00      	nop
}
 8001412:	bd80      	pop	{r7, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	55555556 	.word	0x55555556
 800141c:	40b4d655 	.word	0x40b4d655
 8001420:	55555556 	.word	0x55555556
 8001424:	c0b4d655 	.word	0xc0b4d655
 8001428:	aaaaaaab 	.word	0xaaaaaaab
 800142c:	40c0472a 	.word	0x40c0472a
 8001430:	aaaaaaab 	.word	0xaaaaaaab
 8001434:	c0c0472a 	.word	0xc0c0472a
 8001438:	200008fc 	.word	0x200008fc
 800143c:	200008e0 	.word	0x200008e0

08001440 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af04      	add	r7, sp, #16
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	4613      	mov	r3, r2
 800144e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <IST8310_write+0x38>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	b299      	uxth	r1, r3
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	b29b      	uxth	r3, r3
 800145c:	2264      	movs	r2, #100	; 0x64
 800145e:	9202      	str	r2, [sp, #8]
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	460a      	mov	r2, r1
 800146a:	211c      	movs	r1, #28
 800146c:	f008 fe72 	bl	800a154 <HAL_I2C_Mem_Write>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200008e0 	.word	0x200008e0

0800147c <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 800148c:	1db9      	adds	r1, r7, #6
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2201      	movs	r2, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ffd4 	bl	8001440 <IST8310_write>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 80014a4:	2101      	movs	r1, #1
 80014a6:	200b      	movs	r0, #11
 80014a8:	f7ff ffe8 	bl	800147c <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 80014ac:	2124      	movs	r1, #36	; 0x24
 80014ae:	2041      	movs	r0, #65	; 0x41
 80014b0:	f7ff ffe4 	bl	800147c <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 80014b4:	21c0      	movs	r1, #192	; 0xc0
 80014b6:	2042      	movs	r0, #66	; 0x42
 80014b8:	f7ff ffe0 	bl	800147c <IST8310_write_reg>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <Lidar1D_init>:

#include "Lidar1D.h"

Lidar1D_t lidar1D={0,};

void Lidar1D_init(TIM_HandleTypeDef *htim, uint32_t directChannel, uint32_t indirectChannel){
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
		lidar1D.htim = htim;
 80014cc:	4a39      	ldr	r2, [pc, #228]	; (80015b4 <Lidar1D_init+0xf4>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6013      	str	r3, [r2, #0]
		lidar1D.directChannel = directChannel;
 80014d2:	4a38      	ldr	r2, [pc, #224]	; (80015b4 <Lidar1D_init+0xf4>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	6053      	str	r3, [r2, #4]
		lidar1D.indirectChannel = indirectChannel;
 80014d8:	4a36      	ldr	r2, [pc, #216]	; (80015b4 <Lidar1D_init+0xf4>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6093      	str	r3, [r2, #8]
	  switch (directChannel)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d82d      	bhi.n	8001540 <Lidar1D_init+0x80>
 80014e4:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <Lidar1D_init+0x2c>)
 80014e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ea:	bf00      	nop
 80014ec:	08001521 	.word	0x08001521
 80014f0:	08001541 	.word	0x08001541
 80014f4:	08001541 	.word	0x08001541
 80014f8:	08001541 	.word	0x08001541
 80014fc:	08001529 	.word	0x08001529
 8001500:	08001541 	.word	0x08001541
 8001504:	08001541 	.word	0x08001541
 8001508:	08001541 	.word	0x08001541
 800150c:	08001531 	.word	0x08001531
 8001510:	08001541 	.word	0x08001541
 8001514:	08001541 	.word	0x08001541
 8001518:	08001541 	.word	0x08001541
 800151c:	08001539 	.word	0x08001539
	  {
	    case TIM_CHANNEL_1:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_1;
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <Lidar1D_init+0xf4>)
 8001522:	2201      	movs	r2, #1
 8001524:	731a      	strb	r2, [r3, #12]
	      break;
 8001526:	e00c      	b.n	8001542 <Lidar1D_init+0x82>
	    }

	    case TIM_CHANNEL_2:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_2;
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <Lidar1D_init+0xf4>)
 800152a:	2202      	movs	r2, #2
 800152c:	731a      	strb	r2, [r3, #12]
	      break;
 800152e:	e008      	b.n	8001542 <Lidar1D_init+0x82>
	    }

	    case TIM_CHANNEL_3:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_2;
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <Lidar1D_init+0xf4>)
 8001532:	2202      	movs	r2, #2
 8001534:	731a      	strb	r2, [r3, #12]
	      break;
 8001536:	e004      	b.n	8001542 <Lidar1D_init+0x82>
	    }

	    case TIM_CHANNEL_4:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_2;
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <Lidar1D_init+0xf4>)
 800153a:	2202      	movs	r2, #2
 800153c:	731a      	strb	r2, [r3, #12]
	      break;
 800153e:	e000      	b.n	8001542 <Lidar1D_init+0x82>
	    }
	    default:
	      break;
 8001540:	bf00      	nop
	  }

	  switch (indirectChannel)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d82d      	bhi.n	80015a4 <Lidar1D_init+0xe4>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <Lidar1D_init+0x90>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001585 	.word	0x08001585
 8001554:	080015a5 	.word	0x080015a5
 8001558:	080015a5 	.word	0x080015a5
 800155c:	080015a5 	.word	0x080015a5
 8001560:	0800158d 	.word	0x0800158d
 8001564:	080015a5 	.word	0x080015a5
 8001568:	080015a5 	.word	0x080015a5
 800156c:	080015a5 	.word	0x080015a5
 8001570:	08001595 	.word	0x08001595
 8001574:	080015a5 	.word	0x080015a5
 8001578:	080015a5 	.word	0x080015a5
 800157c:	080015a5 	.word	0x080015a5
 8001580:	0800159d 	.word	0x0800159d
	  {
	    case TIM_CHANNEL_1:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_1;
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <Lidar1D_init+0xf4>)
 8001586:	2201      	movs	r2, #1
 8001588:	735a      	strb	r2, [r3, #13]
	      break;
 800158a:	e00c      	b.n	80015a6 <Lidar1D_init+0xe6>
	    }

	    case TIM_CHANNEL_2:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_2;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <Lidar1D_init+0xf4>)
 800158e:	2202      	movs	r2, #2
 8001590:	735a      	strb	r2, [r3, #13]
	      break;
 8001592:	e008      	b.n	80015a6 <Lidar1D_init+0xe6>
	    }

	    case TIM_CHANNEL_3:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_2;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <Lidar1D_init+0xf4>)
 8001596:	2202      	movs	r2, #2
 8001598:	735a      	strb	r2, [r3, #13]
	      break;
 800159a:	e004      	b.n	80015a6 <Lidar1D_init+0xe6>
	    }

	    case TIM_CHANNEL_4:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_2;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <Lidar1D_init+0xf4>)
 800159e:	2202      	movs	r2, #2
 80015a0:	735a      	strb	r2, [r3, #13]
	      break;
 80015a2:	e000      	b.n	80015a6 <Lidar1D_init+0xe6>
	    }
	    default:
	      break;
 80015a4:	bf00      	nop
	  }
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200003b4 	.word	0x200003b4

080015b8 <Lidar1D_run>:

HAL_StatusTypeDef Lidar1D_run(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	if(HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80015bc:	2100      	movs	r1, #0
 80015be:	480a      	ldr	r0, [pc, #40]	; (80015e8 <Lidar1D_run+0x30>)
 80015c0:	f00d fd3c 	bl	800f03c <HAL_TIM_IC_Start_IT>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <Lidar1D_run+0x16>
 80015ca:	f006 fc43 	bl	8007e54 <Error_Handler>
	if(HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 80015ce:	2104      	movs	r1, #4
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <Lidar1D_run+0x30>)
 80015d2:	f00d fd33 	bl	800f03c <HAL_TIM_IC_Start_IT>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <Lidar1D_run+0x28>
 80015dc:	f006 fc3a 	bl	8007e54 <Error_Handler>
	return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200056d0 	.word	0x200056d0

080015ec <Lidar1D_CaptureCallback>:


void Lidar1D_CaptureCallback(TIM_HandleTypeDef *htim){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance != lidar1D.htim->Instance) return;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <Lidar1D_CaptureCallback+0x4c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d116      	bne.n	8001630 <Lidar1D_CaptureCallback+0x44>

	if(htim->Channel == lidar1D.activeChannel1){
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7f1a      	ldrb	r2, [r3, #28]
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <Lidar1D_CaptureCallback+0x4c>)
 8001608:	7b1b      	ldrb	r3, [r3, #12]
 800160a:	429a      	cmp	r2, r3
 800160c:	d102      	bne.n	8001614 <Lidar1D_CaptureCallback+0x28>
//		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		TIM9->CNT = 0;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <Lidar1D_CaptureCallback+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(htim->Channel == lidar1D.activeChannel2){
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7f1a      	ldrb	r2, [r3, #28]
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <Lidar1D_CaptureCallback+0x4c>)
 800161a:	7b5b      	ldrb	r3, [r3, #13]
 800161c:	429a      	cmp	r2, r3
 800161e:	d108      	bne.n	8001632 <Lidar1D_CaptureCallback+0x46>
		lidar1D.distance_mm = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001620:	2104      	movs	r1, #4
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f00e f894 	bl	800f750 <HAL_TIM_ReadCapturedValue>
 8001628:	4602      	mov	r2, r0
 800162a:	4b03      	ldr	r3, [pc, #12]	; (8001638 <Lidar1D_CaptureCallback+0x4c>)
 800162c:	611a      	str	r2, [r3, #16]
 800162e:	e000      	b.n	8001632 <Lidar1D_CaptureCallback+0x46>
	if(htim->Instance != lidar1D.htim->Instance) return;
 8001630:	bf00      	nop
	}
}
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200003b4 	.word	0x200003b4
 800163c:	40014000 	.word	0x40014000

08001640 <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 8001648:	4a38      	ldr	r2, [pc, #224]	; (800172c <MPU9250+0xec>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <MPU9250+0xec>)
 8001650:	2202      	movs	r2, #2
 8001652:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <MPU9250+0xec>)
 8001656:	2203      	movs	r2, #3
 8001658:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 800165a:	4b34      	ldr	r3, [pc, #208]	; (800172c <MPU9250+0xec>)
 800165c:	2200      	movs	r2, #0
 800165e:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <MPU9250+0xec>)
 8001662:	2206      	movs	r2, #6
 8001664:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <MPU9250+0xec>)
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <MPU9250+0xec>)
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <MPU9250+0xec>)
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 800167e:	2206      	movs	r2, #6
 8001680:	2100      	movs	r1, #0
 8001682:	482b      	ldr	r0, [pc, #172]	; (8001730 <MPU9250+0xf0>)
 8001684:	f018 f8f7 	bl	8019876 <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 8001688:	2206      	movs	r2, #6
 800168a:	2100      	movs	r1, #0
 800168c:	4829      	ldr	r0, [pc, #164]	; (8001734 <MPU9250+0xf4>)
 800168e:	f018 f8f2 	bl	8019876 <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 8001692:	2206      	movs	r2, #6
 8001694:	2100      	movs	r1, #0
 8001696:	4828      	ldr	r0, [pc, #160]	; (8001738 <MPU9250+0xf8>)
 8001698:	f018 f8ed 	bl	8019876 <memset>
	mpu9250.tmpCount = 0;
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <MPU9250+0xec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 80016a2:	220c      	movs	r2, #12
 80016a4:	2100      	movs	r1, #0
 80016a6:	4825      	ldr	r0, [pc, #148]	; (800173c <MPU9250+0xfc>)
 80016a8:	f018 f8e5 	bl	8019876 <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 80016ac:	220c      	movs	r2, #12
 80016ae:	2100      	movs	r1, #0
 80016b0:	4823      	ldr	r0, [pc, #140]	; (8001740 <MPU9250+0x100>)
 80016b2:	f018 f8e0 	bl	8019876 <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 80016b6:	220c      	movs	r2, #12
 80016b8:	2100      	movs	r1, #0
 80016ba:	4822      	ldr	r0, [pc, #136]	; (8001744 <MPU9250+0x104>)
 80016bc:	f018 f8db 	bl	8019876 <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 80016c0:	220c      	movs	r2, #12
 80016c2:	2100      	movs	r1, #0
 80016c4:	4820      	ldr	r0, [pc, #128]	; (8001748 <MPU9250+0x108>)
 80016c6:	f018 f8d6 	bl	8019876 <memset>
	mpu9250.tmp = 0;
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <MPU9250+0xec>)
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 80016d2:	220e      	movs	r2, #14
 80016d4:	2100      	movs	r1, #0
 80016d6:	481d      	ldr	r0, [pc, #116]	; (800174c <MPU9250+0x10c>)
 80016d8:	f018 f8cd 	bl	8019876 <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 80016dc:	2207      	movs	r2, #7
 80016de:	2100      	movs	r1, #0
 80016e0:	481b      	ldr	r0, [pc, #108]	; (8001750 <MPU9250+0x110>)
 80016e2:	f018 f8c8 	bl	8019876 <memset>
	mpu9250.AK8963_lastUpdate = 0;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MPU9250+0xec>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MPU9250+0xec>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <MPU9250+0xec>)
 80016f8:	4a16      	ldr	r2, [pc, #88]	; (8001754 <MPU9250+0x114>)
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MPU9250+0xec>)
 80016fe:	4a16      	ldr	r2, [pc, #88]	; (8001758 <MPU9250+0x118>)
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <MPU9250+0xec>)
 8001704:	4a15      	ldr	r2, [pc, #84]	; (800175c <MPU9250+0x11c>)
 8001706:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 8001708:	f000 fa14 	bl	8001b34 <MPU9250_getMres>
	MPU9250_getGres();
 800170c:	f000 fa2e 	bl	8001b6c <MPU9250_getGres>
	MPU9250_getAres();
 8001710:	f000 fa5e 	bl	8001bd0 <MPU9250_getAres>

	MPU9250_resetMPU9250();
 8001714:	f000 fa8a 	bl	8001c2c <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 8001718:	f000 fb76 	bl	8001e08 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 800171c:	f000 fb00 	bl	8001d20 <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 8001720:	f000 fa90 	bl	8001c44 <MPU9250_initAK8963>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000568 	.word	0x20000568
 8001730:	2000057c 	.word	0x2000057c
 8001734:	20000582 	.word	0x20000582
 8001738:	20000588 	.word	0x20000588
 800173c:	20000590 	.word	0x20000590
 8001740:	200005a8 	.word	0x200005a8
 8001744:	200005b4 	.word	0x200005b4
 8001748:	200005c0 	.word	0x200005c0
 800174c:	200005d0 	.word	0x200005d0
 8001750:	200005de 	.word	0x200005de
 8001754:	438c0000 	.word	0x438c0000
 8001758:	438e8000 	.word	0x438e8000
 800175c:	43a50000 	.word	0x43a50000

08001760 <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MPU9250_updateDMA+0x38>)
 8001768:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10f      	bne.n	8001790 <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MPU9250_updateDMA+0x38>)
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <MPU9250_updateDMA+0x38>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	230e      	movs	r3, #14
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MPU9250_updateDMA+0x3c>)
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	223b      	movs	r2, #59	; 0x3b
 8001788:	21d0      	movs	r1, #208	; 0xd0
 800178a:	f009 f8c1 	bl	800a910 <HAL_I2C_Mem_Read_DMA>
 800178e:	e000      	b.n	8001792 <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8001790:	bf00      	nop
}
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000568 	.word	0x20000568
 800179c:	200005d0 	.word	0x200005d0

080017a0 <MPU9250_i2cRxCpltCallback>:

void MPU9250_i2cRxCpltCallback(){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <MPU9250_i2cRxCpltCallback+0x80>)
 80017a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d125      	bne.n	80017fc <MPU9250_i2cRxCpltCallback+0x5c>
		if(MPU9250_calRawData() != MPU9250_Fail){
 80017b0:	f000 f83a 	bl	8001828 <MPU9250_calRawData>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MPU9250_i2cRxCpltCallback+0x1e>
			MPU9250_calCalibValue();
 80017ba:	f000 f8b7 	bl	800192c <MPU9250_calCalibValue>
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 80017be:	f015 fa77 	bl	8016cb0 <xTaskGetTickCount>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MPU9250_i2cRxCpltCallback+0x80>)
 80017c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b0a      	cmp	r3, #10
 80017ce:	d921      	bls.n	8001814 <MPU9250_i2cRxCpltCallback+0x74>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MPU9250_i2cRxCpltCallback+0x80>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MPU9250_i2cRxCpltCallback+0x80>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	2307      	movs	r3, #7
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MPU9250_i2cRxCpltCallback+0x84>)
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2301      	movs	r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	2118      	movs	r1, #24
 80017ea:	f009 f891 	bl	800a910 <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 80017ee:	f015 fa5f 	bl	8016cb0 <xTaskGetTickCount>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <MPU9250_i2cRxCpltCallback+0x80>)
 80017f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return;
 80017fa:	e00f      	b.n	800181c <MPU9250_i2cRxCpltCallback+0x7c>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MPU9250_i2cRxCpltCallback+0x80>)
 80017fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001802:	2b02      	cmp	r3, #2
 8001804:	d106      	bne.n	8001814 <MPU9250_i2cRxCpltCallback+0x74>
			if(AK8963_calRawData() == MPU9250_Success){
 8001806:	f000 f903 	bl	8001a10 <AK8963_calRawData>
 800180a:	4603      	mov	r3, r0
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <MPU9250_i2cRxCpltCallback+0x74>
				AK8963_calCalibValue();
 8001810:	f000 f93c 	bl	8001a8c <AK8963_calCalibValue>
			}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8001814:	4b02      	ldr	r3, [pc, #8]	; (8001820 <MPU9250_i2cRxCpltCallback+0x80>)
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000568 	.word	0x20000568
 8001824:	200005de 	.word	0x200005de

08001828 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 800182c:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <MPU9250_calRawData+0x100>)
 800182e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	b21a      	sxth	r2, r3
 8001836:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <MPU9250_calRawData+0x100>)
 8001838:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800183c:	b21b      	sxth	r3, r3
 800183e:	4313      	orrs	r3, r2
 8001840:	b21b      	sxth	r3, r3
 8001842:	b29b      	uxth	r3, r3
 8001844:	425b      	negs	r3, r3
 8001846:	b29b      	uxth	r3, r3
 8001848:	b21a      	sxth	r2, r3
 800184a:	4b37      	ldr	r3, [pc, #220]	; (8001928 <MPU9250_calRawData+0x100>)
 800184c:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 800184e:	4b36      	ldr	r3, [pc, #216]	; (8001928 <MPU9250_calRawData+0x100>)
 8001850:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	4b33      	ldr	r3, [pc, #204]	; (8001928 <MPU9250_calRawData+0x100>)
 800185a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800185e:	b21b      	sxth	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b21b      	sxth	r3, r3
 8001864:	b29b      	uxth	r3, r3
 8001866:	425b      	negs	r3, r3
 8001868:	b29b      	uxth	r3, r3
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <MPU9250_calRawData+0x100>)
 800186e:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <MPU9250_calRawData+0x100>)
 8001872:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21a      	sxth	r2, r3
 800187a:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <MPU9250_calRawData+0x100>)
 800187c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001880:	b21b      	sxth	r3, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	b21b      	sxth	r3, r3
 8001886:	b29b      	uxth	r3, r3
 8001888:	425b      	negs	r3, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	b21a      	sxth	r2, r3
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <MPU9250_calRawData+0x100>)
 8001890:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <MPU9250_calRawData+0x100>)
 8001894:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <MPU9250_calRawData+0x100>)
 800189e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <MPU9250_calRawData+0x100>)
 80018aa:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <MPU9250_calRawData+0x100>)
 80018ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MPU9250_calRawData+0x100>)
 80018b8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80018bc:	b21b      	sxth	r3, r3
 80018be:	4313      	orrs	r3, r2
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MPU9250_calRawData+0x100>)
 80018c4:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <MPU9250_calRawData+0x100>)
 80018c8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <MPU9250_calRawData+0x100>)
 80018d2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4313      	orrs	r3, r2
 80018da:	b21a      	sxth	r2, r3
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <MPU9250_calRawData+0x100>)
 80018de:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MPU9250_calRawData+0x100>)
 80018e2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MPU9250_calRawData+0x100>)
 80018ec:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MPU9250_calRawData+0x100>)
 80018f8:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MPU9250_calRawData+0x100>)
 80018fc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10b      	bne.n	800191c <MPU9250_calRawData+0xf4>
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MPU9250_calRawData+0x100>)
 8001906:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <MPU9250_calRawData+0xf4>
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MPU9250_calRawData+0x100>)
 8001910:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <MPU9250_calRawData+0xf4>
 8001918:	2300      	movs	r3, #0
 800191a:	e000      	b.n	800191e <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	20000568 	.word	0x20000568

0800192c <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 8001930:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 8001932:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193e:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 8001940:	edd3 7a02 	vldr	s15, [r3, #8]
 8001944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 800194a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 8001950:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 800195e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 8001968:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 800196e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 800197c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 8001986:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 800198c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 800199a:	edd3 7a03 	vldr	s15, [r3, #12]
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001a0c <MPU9250_calCalibValue+0xe0>
 80019a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 80019ac:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 80019b2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 80019c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80019c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a0c <MPU9250_calCalibValue+0xe0>
 80019cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 80019d2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 80019d8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 80019e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ee:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001a0c <MPU9250_calCalibValue+0xe0>
 80019f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <MPU9250_calCalibValue+0xdc>)
 80019f8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000568 	.word	0x20000568
 8001a0c:	3c8efa35 	.word	0x3c8efa35

08001a10 <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <AK8963_calRawData+0x16>
 8001a22:	2300      	movs	r3, #0
 8001a24:	e02b      	b.n	8001a7e <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a28:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a32:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a3e:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a42:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a4c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a58:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a5c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a66:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	425b      	negs	r3, r3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <AK8963_calRawData+0x78>)
 8001a7a:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	20000568 	.word	0x20000568

08001a8c <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001a92:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001aa0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001aaa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001ab4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abc:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001abe:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001ac4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001ad2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001adc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001ae6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001af0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001af6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001b04:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001b0e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001b18:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <AK8963_calCalibValue+0xa4>)
 8001b22:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	20000568 	.word	0x20000568

08001b34 <MPU9250_getMres>:

void MPU9250_getMres() {
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MPU9250_getMres+0x2c>)
 8001b3a:	799b      	ldrb	r3, [r3, #6]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <MPU9250_getMres+0x12>
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d004      	beq.n	8001b4e <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 8001b44:	e007      	b.n	8001b56 <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MPU9250_getMres+0x2c>)
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <MPU9250_getMres+0x30>)
 8001b4a:	611a      	str	r2, [r3, #16]
		  break;
 8001b4c:	e003      	b.n	8001b56 <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <MPU9250_getMres+0x2c>)
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <MPU9250_getMres+0x34>)
 8001b52:	611a      	str	r2, [r3, #16]
		  break;
 8001b54:	bf00      	nop
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	20000568 	.word	0x20000568
 8001b64:	40bfebff 	.word	0x40bfebff
 8001b68:	3fbfebff 	.word	0x3fbfebff

08001b6c <MPU9250_getGres>:

void MPU9250_getGres() {
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MPU9250_getGres+0x50>)
 8001b72:	795b      	ldrb	r3, [r3, #5]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d81b      	bhi.n	8001bb0 <MPU9250_getGres+0x44>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <MPU9250_getGres+0x14>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001b91 	.word	0x08001b91
 8001b84:	08001b99 	.word	0x08001b99
 8001b88:	08001ba1 	.word	0x08001ba1
 8001b8c:	08001ba9 	.word	0x08001ba9
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <MPU9250_getGres+0x50>)
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <MPU9250_getGres+0x54>)
 8001b94:	60da      	str	r2, [r3, #12]
          break;
 8001b96:	e00b      	b.n	8001bb0 <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MPU9250_getGres+0x50>)
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <MPU9250_getGres+0x58>)
 8001b9c:	60da      	str	r2, [r3, #12]
          break;
 8001b9e:	e007      	b.n	8001bb0 <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MPU9250_getGres+0x50>)
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <MPU9250_getGres+0x5c>)
 8001ba4:	60da      	str	r2, [r3, #12]
          break;
 8001ba6:	e003      	b.n	8001bb0 <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <MPU9250_getGres+0x50>)
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <MPU9250_getGres+0x60>)
 8001bac:	60da      	str	r2, [r3, #12]
          break;
 8001bae:	bf00      	nop
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000568 	.word	0x20000568
 8001bc0:	3bfa0000 	.word	0x3bfa0000
 8001bc4:	3c7a0000 	.word	0x3c7a0000
 8001bc8:	3cfa0000 	.word	0x3cfa0000
 8001bcc:	3d7a0000 	.word	0x3d7a0000

08001bd0 <MPU9250_getAres>:


void MPU9250_getAres() {
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MPU9250_getAres+0x58>)
 8001bd6:	791b      	ldrb	r3, [r3, #4]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d81f      	bhi.n	8001c1c <MPU9250_getAres+0x4c>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <MPU9250_getAres+0x14>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001bf5 	.word	0x08001bf5
 8001be8:	08001bff 	.word	0x08001bff
 8001bec:	08001c09 	.word	0x08001c09
 8001bf0:	08001c13 	.word	0x08001c13
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MPU9250_getAres+0x58>)
 8001bf6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001bfa:	609a      	str	r2, [r3, #8]
          break;
 8001bfc:	e00e      	b.n	8001c1c <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <MPU9250_getAres+0x58>)
 8001c00:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001c04:	609a      	str	r2, [r3, #8]
          break;
 8001c06:	e009      	b.n	8001c1c <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <MPU9250_getAres+0x58>)
 8001c0a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001c0e:	609a      	str	r2, [r3, #8]
          break;
 8001c10:	e004      	b.n	8001c1c <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <MPU9250_getAres+0x58>)
 8001c14:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001c18:	609a      	str	r2, [r3, #8]
          break;
 8001c1a:	bf00      	nop
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000568 	.word	0x20000568

08001c2c <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	216b      	movs	r1, #107	; 0x6b
 8001c34:	20d0      	movs	r0, #208	; 0xd0
 8001c36:	f000 fb69 	bl	800230c <MPU9250_writeByte>
    HAL_Delay(10);
 8001c3a:	200a      	movs	r0, #10
 8001c3c:	f007 faae 	bl	800919c <HAL_Delay>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	210a      	movs	r1, #10
 8001c4e:	2018      	movs	r0, #24
 8001c50:	f000 fb5c 	bl	800230c <MPU9250_writeByte>
	HAL_Delay(10);
 8001c54:	200a      	movs	r0, #10
 8001c56:	f007 faa1 	bl	800919c <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	210a      	movs	r1, #10
 8001c5e:	2018      	movs	r0, #24
 8001c60:	f000 fb54 	bl	800230c <MPU9250_writeByte>
	HAL_Delay(10);
 8001c64:	200a      	movs	r0, #10
 8001c66:	f007 fa99 	bl	800919c <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	2110      	movs	r1, #16
 8001c70:	2018      	movs	r0, #24
 8001c72:	f000 fb69 	bl	8002348 <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8001c76:	793b      	ldrb	r3, [r7, #4]
 8001c78:	3b80      	subs	r3, #128	; 0x80
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c82:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001d18 <MPU9250_initAK8963+0xd4>
 8001c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <MPU9250_initAK8963+0xd8>)
 8001c94:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001c98:	797b      	ldrb	r3, [r7, #5]
 8001c9a:	3b80      	subs	r3, #128	; 0x80
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001d18 <MPU9250_initAK8963+0xd4>
 8001ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <MPU9250_initAK8963+0xd8>)
 8001cb6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	3b80      	subs	r3, #128	; 0x80
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d18 <MPU9250_initAK8963+0xd4>
 8001cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MPU9250_initAK8963+0xd8>)
 8001cd8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001cdc:	2200      	movs	r2, #0
 8001cde:	210a      	movs	r1, #10
 8001ce0:	2018      	movs	r0, #24
 8001ce2:	f000 fb13 	bl	800230c <MPU9250_writeByte>
	HAL_Delay(10);
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f007 fa58 	bl	800919c <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MPU9250_initAK8963+0xd8>)
 8001cee:	799b      	ldrb	r3, [r3, #6]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	b25a      	sxtb	r2, r3
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MPU9250_initAK8963+0xd8>)
 8001cf6:	79db      	ldrb	r3, [r3, #7]
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b25b      	sxtb	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	210a      	movs	r1, #10
 8001d04:	2018      	movs	r0, #24
 8001d06:	f000 fb01 	bl	800230c <MPU9250_writeByte>
	HAL_Delay(10);
 8001d0a:	200a      	movs	r0, #10
 8001d0c:	f007 fa46 	bl	800919c <HAL_Delay>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	43800000 	.word	0x43800000
 8001d1c:	20000568 	.word	0x20000568

08001d20 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001d26:	2200      	movs	r2, #0
 8001d28:	216b      	movs	r1, #107	; 0x6b
 8001d2a:	20d0      	movs	r0, #208	; 0xd0
 8001d2c:	f000 faee 	bl	800230c <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001d30:	2064      	movs	r0, #100	; 0x64
 8001d32:	f007 fa33 	bl	800919c <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001d36:	2201      	movs	r2, #1
 8001d38:	216b      	movs	r1, #107	; 0x6b
 8001d3a:	20d0      	movs	r0, #208	; 0xd0
 8001d3c:	f000 fae6 	bl	800230c <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8001d40:	2203      	movs	r2, #3
 8001d42:	211a      	movs	r1, #26
 8001d44:	20d0      	movs	r0, #208	; 0xd0
 8001d46:	f000 fae1 	bl	800230c <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	2119      	movs	r1, #25
 8001d4e:	20d0      	movs	r0, #208	; 0xd0
 8001d50:	f000 fadc 	bl	800230c <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8001d54:	211b      	movs	r1, #27
 8001d56:	20d0      	movs	r0, #208	; 0xd0
 8001d58:	f000 fb18 	bl	800238c <MPU9250_readByte>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f023 0302 	bic.w	r3, r3, #2
 8001d66:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f023 0318 	bic.w	r3, r3, #24
 8001d6e:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <MPU9250_initMPU9250+0xe4>)
 8001d72:	795b      	ldrb	r3, [r3, #5]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	b25a      	sxtb	r2, r3
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	461a      	mov	r2, r3
 8001d86:	211b      	movs	r1, #27
 8001d88:	20d0      	movs	r0, #208	; 0xd0
 8001d8a:	f000 fabf 	bl	800230c <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8001d8e:	211c      	movs	r1, #28
 8001d90:	20d0      	movs	r0, #208	; 0xd0
 8001d92:	f000 fafb 	bl	800238c <MPU9250_readByte>
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f023 0318 	bic.w	r3, r3, #24
 8001da0:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MPU9250_initMPU9250+0xe4>)
 8001da4:	791b      	ldrb	r3, [r3, #4]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	b25a      	sxtb	r2, r3
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	461a      	mov	r2, r3
 8001db8:	211c      	movs	r1, #28
 8001dba:	20d0      	movs	r0, #208	; 0xd0
 8001dbc:	f000 faa6 	bl	800230c <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8001dc0:	211d      	movs	r1, #29
 8001dc2:	20d0      	movs	r0, #208	; 0xd0
 8001dc4:	f000 fae2 	bl	800238c <MPU9250_readByte>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f023 030f 	bic.w	r3, r3, #15
 8001dd2:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f043 0303 	orr.w	r3, r3, #3
 8001dda:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	461a      	mov	r2, r3
 8001de0:	211d      	movs	r1, #29
 8001de2:	20d0      	movs	r0, #208	; 0xd0
 8001de4:	f000 fa92 	bl	800230c <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001de8:	2222      	movs	r2, #34	; 0x22
 8001dea:	2137      	movs	r1, #55	; 0x37
 8001dec:	20d0      	movs	r0, #208	; 0xd0
 8001dee:	f000 fa8d 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001df2:	2201      	movs	r2, #1
 8001df4:	2138      	movs	r1, #56	; 0x38
 8001df6:	20d0      	movs	r0, #208	; 0xd0
 8001df8:	f000 fa88 	bl	800230c <MPU9250_writeByte>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000568 	.word	0x20000568

08001e08 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	; 0x50
 8001e0c:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e12:	2300      	movs	r3, #0
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	216b      	movs	r1, #107	; 0x6b
 8001e2a:	20d0      	movs	r0, #208	; 0xd0
 8001e2c:	f000 fa6e 	bl	800230c <MPU9250_writeByte>
  HAL_Delay(100);
 8001e30:	2064      	movs	r0, #100	; 0x64
 8001e32:	f007 f9b3 	bl	800919c <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8001e36:	2201      	movs	r2, #1
 8001e38:	216b      	movs	r1, #107	; 0x6b
 8001e3a:	20d0      	movs	r0, #208	; 0xd0
 8001e3c:	f000 fa66 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8001e40:	2200      	movs	r2, #0
 8001e42:	216c      	movs	r1, #108	; 0x6c
 8001e44:	20d0      	movs	r0, #208	; 0xd0
 8001e46:	f000 fa61 	bl	800230c <MPU9250_writeByte>
  HAL_Delay(200);
 8001e4a:	20c8      	movs	r0, #200	; 0xc8
 8001e4c:	f007 f9a6 	bl	800919c <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8001e50:	2200      	movs	r2, #0
 8001e52:	2138      	movs	r1, #56	; 0x38
 8001e54:	20d0      	movs	r0, #208	; 0xd0
 8001e56:	f000 fa59 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2123      	movs	r1, #35	; 0x23
 8001e5e:	20d0      	movs	r0, #208	; 0xd0
 8001e60:	f000 fa54 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001e64:	2200      	movs	r2, #0
 8001e66:	216b      	movs	r1, #107	; 0x6b
 8001e68:	20d0      	movs	r0, #208	; 0xd0
 8001e6a:	f000 fa4f 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2124      	movs	r1, #36	; 0x24
 8001e72:	20d0      	movs	r0, #208	; 0xd0
 8001e74:	f000 fa4a 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001e78:	2200      	movs	r2, #0
 8001e7a:	216a      	movs	r1, #106	; 0x6a
 8001e7c:	20d0      	movs	r0, #208	; 0xd0
 8001e7e:	f000 fa45 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001e82:	220c      	movs	r2, #12
 8001e84:	216a      	movs	r1, #106	; 0x6a
 8001e86:	20d0      	movs	r0, #208	; 0xd0
 8001e88:	f000 fa40 	bl	800230c <MPU9250_writeByte>
  HAL_Delay(15);
 8001e8c:	200f      	movs	r0, #15
 8001e8e:	f007 f985 	bl	800919c <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001e92:	2201      	movs	r2, #1
 8001e94:	211a      	movs	r1, #26
 8001e96:	20d0      	movs	r0, #208	; 0xd0
 8001e98:	f000 fa38 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2119      	movs	r1, #25
 8001ea0:	20d0      	movs	r0, #208	; 0xd0
 8001ea2:	f000 fa33 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	211b      	movs	r1, #27
 8001eaa:	20d0      	movs	r0, #208	; 0xd0
 8001eac:	f000 fa2e 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	211c      	movs	r1, #28
 8001eb4:	20d0      	movs	r0, #208	; 0xd0
 8001eb6:	f000 fa29 	bl	800230c <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001eba:	2240      	movs	r2, #64	; 0x40
 8001ebc:	216a      	movs	r1, #106	; 0x6a
 8001ebe:	20d0      	movs	r0, #208	; 0xd0
 8001ec0:	f000 fa24 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001ec4:	2278      	movs	r2, #120	; 0x78
 8001ec6:	2123      	movs	r1, #35	; 0x23
 8001ec8:	20d0      	movs	r0, #208	; 0xd0
 8001eca:	f000 fa1f 	bl	800230c <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001ece:	2028      	movs	r0, #40	; 0x28
 8001ed0:	f007 f964 	bl	800919c <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2123      	movs	r1, #35	; 0x23
 8001ed8:	20d0      	movs	r0, #208	; 0xd0
 8001eda:	f000 fa17 	bl	800230c <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001ede:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	2172      	movs	r1, #114	; 0x72
 8001ee6:	20d0      	movs	r0, #208	; 0xd0
 8001ee8:	f000 fa2e 	bl	8002348 <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001eec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	b21a      	sxth	r2, r3
 8001ef4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001f02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f06:	4ab3      	ldr	r2, [pc, #716]	; (80021d4 <MPU9250_calibrateMPU9250+0x3cc>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 8001f12:	2300      	movs	r3, #0
 8001f14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001f18:	e071      	b.n	8001ffe <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	813b      	strh	r3, [r7, #8]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	817b      	strh	r3, [r7, #10]
 8001f22:	2300      	movs	r3, #0
 8001f24:	81bb      	strh	r3, [r7, #12]
 8001f26:	2300      	movs	r3, #0
 8001f28:	803b      	strh	r3, [r7, #0]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	807b      	strh	r3, [r7, #2]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8001f32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f36:	220c      	movs	r2, #12
 8001f38:	2174      	movs	r1, #116	; 0x74
 8001f3a:	20d0      	movs	r0, #208	; 0xd0
 8001f3c:	f000 fa04 	bl	8002348 <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001f40:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001f54:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001f68:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001f7c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001f90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001fa4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001fc8:	4413      	add	r3, r2
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001fdc:	4413      	add	r3, r2
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 8001ff4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001ffe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002002:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002006:	429a      	cmp	r2, r3
 8002008:	d387      	bcc.n	8001f1a <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800200a:	6a3a      	ldr	r2, [r7, #32]
 800200c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002010:	fb92 f3f3 	sdiv	r3, r2, r3
 8002014:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 8002016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002018:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800201c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 8002022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002024:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002028:	fb92 f3f3 	sdiv	r3, r2, r3
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 800202e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002030:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002034:	fb92 f3f3 	sdiv	r3, r2, r3
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 800203a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800203c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002040:	fb92 f3f3 	sdiv	r3, r2, r3
 8002044:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 8002046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002048:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800204c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002050:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 8002052:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <MPU9250_calibrateMPU9250+0x3d0>)
 8002054:	ed93 7a02 	vldr	s14, [r3, #8]
 8002058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800205c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002064:	ee17 3a90 	vmov	r3, s15
 8002068:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	dd05      	ble.n	800207e <MPU9250_calibrateMPU9250+0x276>
 8002072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002074:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
 800207c:	e004      	b.n	8002088 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 800207e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002080:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002084:	4413      	add	r3, r2
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208a:	425b      	negs	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	da00      	bge.n	8002092 <MPU9250_calibrateMPU9250+0x28a>
 8002090:	3303      	adds	r3, #3
 8002092:	109b      	asrs	r3, r3, #2
 8002094:	121b      	asrs	r3, r3, #8
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	425b      	negs	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	da00      	bge.n	80020a6 <MPU9250_calibrateMPU9250+0x29e>
 80020a4:	3303      	adds	r3, #3
 80020a6:	109b      	asrs	r3, r3, #2
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	425b      	negs	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da00      	bge.n	80020b8 <MPU9250_calibrateMPU9250+0x2b0>
 80020b6:	3303      	adds	r3, #3
 80020b8:	109b      	asrs	r3, r3, #2
 80020ba:	121b      	asrs	r3, r3, #8
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	425b      	negs	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	da00      	bge.n	80020cc <MPU9250_calibrateMPU9250+0x2c4>
 80020ca:	3303      	adds	r3, #3
 80020cc:	109b      	asrs	r3, r3, #2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	425b      	negs	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	da00      	bge.n	80020de <MPU9250_calibrateMPU9250+0x2d6>
 80020dc:	3303      	adds	r3, #3
 80020de:	109b      	asrs	r3, r3, #2
 80020e0:	121b      	asrs	r3, r3, #8
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 80020e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ea:	425b      	negs	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da00      	bge.n	80020f2 <MPU9250_calibrateMPU9250+0x2ea>
 80020f0:	3303      	adds	r3, #3
 80020f2:	109b      	asrs	r3, r3, #2
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 80020fa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80020fe:	461a      	mov	r2, r3
 8002100:	2113      	movs	r1, #19
 8002102:	20d0      	movs	r0, #208	; 0xd0
 8002104:	f000 f902 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8002108:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800210c:	461a      	mov	r2, r3
 800210e:	2114      	movs	r1, #20
 8002110:	20d0      	movs	r0, #208	; 0xd0
 8002112:	f000 f8fb 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 8002116:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800211a:	461a      	mov	r2, r3
 800211c:	2115      	movs	r1, #21
 800211e:	20d0      	movs	r0, #208	; 0xd0
 8002120:	f000 f8f4 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 8002124:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002128:	461a      	mov	r2, r3
 800212a:	2116      	movs	r1, #22
 800212c:	20d0      	movs	r0, #208	; 0xd0
 800212e:	f000 f8ed 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 8002132:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002136:	461a      	mov	r2, r3
 8002138:	2117      	movs	r1, #23
 800213a:	20d0      	movs	r0, #208	; 0xd0
 800213c:	f000 f8e6 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8002140:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002144:	461a      	mov	r2, r3
 8002146:	2118      	movs	r1, #24
 8002148:	20d0      	movs	r0, #208	; 0xd0
 800214a:	f000 f8df 	bl	800230c <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 800215a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800215e:	2202      	movs	r2, #2
 8002160:	2177      	movs	r1, #119	; 0x77
 8002162:	20d0      	movs	r0, #208	; 0xd0
 8002164:	f000 f8f0 	bl	8002348 <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8002168:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21b      	sxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 800217a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800217e:	2202      	movs	r2, #2
 8002180:	217a      	movs	r1, #122	; 0x7a
 8002182:	20d0      	movs	r0, #208	; 0xd0
 8002184:	f000 f8e0 	bl	8002348 <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8002188:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	b21b      	sxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 800219a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800219e:	2202      	movs	r2, #2
 80021a0:	217d      	movs	r1, #125	; 0x7d
 80021a2:	20d0      	movs	r0, #208	; 0xd0
 80021a4:	f000 f8d0 	bl	8002348 <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80021a8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80021ba:	2301      	movs	r3, #1
 80021bc:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80021be:	2300      	movs	r3, #0
 80021c0:	743b      	strb	r3, [r7, #16]
 80021c2:	2300      	movs	r3, #0
 80021c4:	747b      	strb	r3, [r7, #17]
 80021c6:	2300      	movs	r3, #0
 80021c8:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80021d0:	e01e      	b.n	8002210 <MPU9250_calibrateMPU9250+0x408>
 80021d2:	bf00      	nop
 80021d4:	aaaaaaab 	.word	0xaaaaaaab
 80021d8:	20000568 	.word	0x20000568
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80021dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80021e6:	4413      	add	r3, r2
 80021e8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80021ec:	461a      	mov	r2, r3
 80021ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <MPU9250_calibrateMPU9250+0x3fe>
 80021f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80021fe:	4413      	add	r3, r2
 8002200:	2201      	movs	r2, #1
 8002202:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 8002206:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800220a:	3301      	adds	r3, #1
 800220c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002210:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002214:	2b02      	cmp	r3, #2
 8002216:	d9e1      	bls.n	80021dc <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	da00      	bge.n	8002222 <MPU9250_calibrateMPU9250+0x41a>
 8002220:	3307      	adds	r3, #7
 8002222:	10db      	asrs	r3, r3, #3
 8002224:	425b      	negs	r3, r3
 8002226:	4413      	add	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	2b00      	cmp	r3, #0
 8002230:	da00      	bge.n	8002234 <MPU9250_calibrateMPU9250+0x42c>
 8002232:	3307      	adds	r3, #7
 8002234:	10db      	asrs	r3, r3, #3
 8002236:	425b      	negs	r3, r3
 8002238:	4413      	add	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	da00      	bge.n	8002246 <MPU9250_calibrateMPU9250+0x43e>
 8002244:	3307      	adds	r3, #7
 8002246:	10db      	asrs	r3, r3, #3
 8002248:	425b      	negs	r3, r3
 800224a:	4413      	add	r3, r2
 800224c:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	121b      	asrs	r3, r3, #8
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002260:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8002264:	7c3b      	ldrb	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	121b      	asrs	r3, r3, #8
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002280:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002284:	7c7b      	ldrb	r3, [r7, #17]
 8002286:	4313      	orrs	r3, r2
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	121b      	asrs	r3, r3, #8
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80022a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80022a4:	7cbb      	ldrb	r3, [r7, #18]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 80022ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80022b2:	461a      	mov	r2, r3
 80022b4:	2177      	movs	r1, #119	; 0x77
 80022b6:	20d0      	movs	r0, #208	; 0xd0
 80022b8:	f000 f828 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
 80022bc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80022c0:	461a      	mov	r2, r3
 80022c2:	2178      	movs	r1, #120	; 0x78
 80022c4:	20d0      	movs	r0, #208	; 0xd0
 80022c6:	f000 f821 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
 80022ca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80022ce:	461a      	mov	r2, r3
 80022d0:	217a      	movs	r1, #122	; 0x7a
 80022d2:	20d0      	movs	r0, #208	; 0xd0
 80022d4:	f000 f81a 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
 80022d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80022dc:	461a      	mov	r2, r3
 80022de:	217b      	movs	r1, #123	; 0x7b
 80022e0:	20d0      	movs	r0, #208	; 0xd0
 80022e2:	f000 f813 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
 80022e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80022ea:	461a      	mov	r2, r3
 80022ec:	217d      	movs	r1, #125	; 0x7d
 80022ee:	20d0      	movs	r0, #208	; 0xd0
 80022f0:	f000 f80c 	bl	800230c <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
 80022f4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80022f8:	461a      	mov	r2, r3
 80022fa:	217e      	movs	r1, #126	; 0x7e
 80022fc:	20d0      	movs	r0, #208	; 0xd0
 80022fe:	f000 f805 	bl	800230c <MPU9250_writeByte>

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 8002302:	bf00      	nop
 8002304:	3750      	adds	r7, #80	; 0x50
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop

0800230c <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af04      	add	r7, sp, #16
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
 8002316:	460b      	mov	r3, r1
 8002318:	71bb      	strb	r3, [r7, #6]
 800231a:	4613      	mov	r3, r2
 800231c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MPU9250_writeByte+0x38>)
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	b299      	uxth	r1, r3
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	b29a      	uxth	r2, r3
 800232a:	2364      	movs	r3, #100	; 0x64
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	2301      	movs	r3, #1
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	1d7b      	adds	r3, r7, #5
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2301      	movs	r3, #1
 8002338:	f007 ff0c 	bl	800a154 <HAL_I2C_Mem_Write>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000568 	.word	0x20000568

08002348 <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b087      	sub	sp, #28
 800234c:	af04      	add	r7, sp, #16
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	460b      	mov	r3, r1
 8002356:	71bb      	strb	r3, [r7, #6]
 8002358:	4613      	mov	r3, r2
 800235a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <MPU9250_readBytes+0x40>)
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	b299      	uxth	r1, r3
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	b29c      	uxth	r4, r3
 8002368:	797b      	ldrb	r3, [r7, #5]
 800236a:	b29b      	uxth	r3, r3
 800236c:	2264      	movs	r2, #100	; 0x64
 800236e:	9202      	str	r2, [sp, #8]
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2301      	movs	r3, #1
 8002378:	4622      	mov	r2, r4
 800237a:	f007 ffe5 	bl	800a348 <HAL_I2C_Mem_Read>
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}
 8002386:	bf00      	nop
 8002388:	20000568 	.word	0x20000568

0800238c <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	460a      	mov	r2, r1
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	4613      	mov	r3, r2
 800239a:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 800239c:	f107 030f 	add.w	r3, r7, #15
 80023a0:	79b9      	ldrb	r1, [r7, #6]
 80023a2:	79f8      	ldrb	r0, [r7, #7]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f7ff ffcf 	bl	8002348 <MPU9250_readBytes>
	return data;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <BME280_init>:
#include "bme280.h"
#include "math.h"

BME280_t bme280 = {0,};

void BME280_init(I2C_HandleTypeDef *hi2c, uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	4608      	mov	r0, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	461a      	mov	r2, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	70fb      	strb	r3, [r7, #3]
 80023c6:	460b      	mov	r3, r1
 80023c8:	70bb      	strb	r3, [r7, #2]
 80023ca:	4613      	mov	r3, r2
 80023cc:	707b      	strb	r3, [r7, #1]
	bme280.hi2c = hi2c;
 80023ce:	4a6f      	ldr	r2, [pc, #444]	; (800258c <BME280_init+0x1d8>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6013      	str	r3, [r2, #0]
	BME280_reset();
 80023d4:	f000 f95a 	bl	800268c <BME280_reset>
	// Configure the BME280
	// Set H oversampling rate
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 80023d8:	78bb      	ldrb	r3, [r7, #2]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	21f2      	movs	r1, #242	; 0xf2
 80023e4:	20ec      	movs	r0, #236	; 0xec
 80023e6:	f000 fb45 	bl	8002a74 <BME280_writeByte>
	// Set T and P oversampling rates and sensor mode
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 80023ea:	787b      	ldrb	r3, [r7, #1]
 80023ec:	015b      	lsls	r3, r3, #5
 80023ee:	b25a      	sxtb	r2, r3
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b25a      	sxtb	r2, r3
 80023fa:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80023fe:	4313      	orrs	r3, r2
 8002400:	b25b      	sxtb	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	21f4      	movs	r1, #244	; 0xf4
 8002408:	20ec      	movs	r0, #236	; 0xec
 800240a:	f000 fb33 	bl	8002a74 <BME280_writeByte>
	// Set standby time interval in normal mode and bandwidth
	BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 800240e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002412:	015b      	lsls	r3, r3, #5
 8002414:	b25a      	sxtb	r2, r3
 8002416:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	b25b      	sxtb	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	b25b      	sxtb	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	21f5      	movs	r1, #245	; 0xf5
 8002428:	20ec      	movs	r0, #236	; 0xec
 800242a:	f000 fb23 	bl	8002a74 <BME280_writeByte>

	//wait.
	HAL_Delay(50);
 800242e:	2032      	movs	r0, #50	; 0x32
 8002430:	f006 feb4 	bl	800919c <HAL_Delay>
	uint8_t calib[26];
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	221a      	movs	r2, #26
 800243a:	2188      	movs	r1, #136	; 0x88
 800243c:	20ec      	movs	r0, #236	; 0xec
 800243e:	f000 fb37 	bl	8002ab0 <BME280_readBytes>
	bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 8002442:	7b7b      	ldrb	r3, [r7, #13]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	b21a      	sxth	r2, r3
 8002448:	7b3b      	ldrb	r3, [r7, #12]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b21b      	sxth	r3, r3
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b4e      	ldr	r3, [pc, #312]	; (800258c <BME280_init+0x1d8>)
 8002454:	821a      	strh	r2, [r3, #16]
	bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	b21a      	sxth	r2, r3
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	b21b      	sxth	r3, r3
 8002460:	4313      	orrs	r3, r2
 8002462:	b21a      	sxth	r2, r3
 8002464:	4b49      	ldr	r3, [pc, #292]	; (800258c <BME280_init+0x1d8>)
 8002466:	831a      	strh	r2, [r3, #24]
	bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 8002468:	7c7b      	ldrb	r3, [r7, #17]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b21a      	sxth	r2, r3
 800246e:	7c3b      	ldrb	r3, [r7, #16]
 8002470:	b21b      	sxth	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b21a      	sxth	r2, r3
 8002476:	4b45      	ldr	r3, [pc, #276]	; (800258c <BME280_init+0x1d8>)
 8002478:	835a      	strh	r2, [r3, #26]
	bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	b21a      	sxth	r2, r3
 8002480:	7cbb      	ldrb	r3, [r7, #18]
 8002482:	b21b      	sxth	r3, r3
 8002484:	4313      	orrs	r3, r2
 8002486:	b21b      	sxth	r3, r3
 8002488:	b29a      	uxth	r2, r3
 800248a:	4b40      	ldr	r3, [pc, #256]	; (800258c <BME280_init+0x1d8>)
 800248c:	825a      	strh	r2, [r3, #18]
	bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 800248e:	7d7b      	ldrb	r3, [r7, #21]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b21a      	sxth	r2, r3
 8002494:	7d3b      	ldrb	r3, [r7, #20]
 8002496:	b21b      	sxth	r3, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	b21a      	sxth	r2, r3
 800249c:	4b3b      	ldr	r3, [pc, #236]	; (800258c <BME280_init+0x1d8>)
 800249e:	839a      	strh	r2, [r3, #28]
	bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	7dbb      	ldrb	r3, [r7, #22]
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	4b37      	ldr	r3, [pc, #220]	; (800258c <BME280_init+0x1d8>)
 80024b0:	83da      	strh	r2, [r3, #30]
	bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 80024b2:	7e7b      	ldrb	r3, [r7, #25]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	7e3b      	ldrb	r3, [r7, #24]
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b21a      	sxth	r2, r3
 80024c0:	4b32      	ldr	r3, [pc, #200]	; (800258c <BME280_init+0x1d8>)
 80024c2:	841a      	strh	r2, [r3, #32]
	bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 80024c4:	7efb      	ldrb	r3, [r7, #27]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	7ebb      	ldrb	r3, [r7, #26]
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	4b2e      	ldr	r3, [pc, #184]	; (800258c <BME280_init+0x1d8>)
 80024d4:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 80024d6:	7f7b      	ldrb	r3, [r7, #29]
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	b21a      	sxth	r2, r3
 80024dc:	7f3b      	ldrb	r3, [r7, #28]
 80024de:	b21b      	sxth	r3, r3
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b21a      	sxth	r2, r3
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <BME280_init+0x1d8>)
 80024e6:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 80024e8:	7ffb      	ldrb	r3, [r7, #31]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	7fbb      	ldrb	r3, [r7, #30]
 80024f0:	b21b      	sxth	r3, r3
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	4b25      	ldr	r3, [pc, #148]	; (800258c <BME280_init+0x1d8>)
 80024f8:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 80024fa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	b21a      	sxth	r2, r3
 8002502:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002506:	b21b      	sxth	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	b21a      	sxth	r2, r3
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <BME280_init+0x1d8>)
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 8002510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b21a      	sxth	r2, r3
 8002518:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21a      	sxth	r2, r3
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <BME280_init+0x1d8>)
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280._dig_H1 = calib[25];
 8002526:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <BME280_init+0x1d8>)
 800252c:	735a      	strb	r2, [r3, #13]
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	2207      	movs	r2, #7
 8002534:	21e1      	movs	r1, #225	; 0xe1
 8002536:	20ec      	movs	r0, #236	; 0xec
 8002538:	f000 faba 	bl	8002ab0 <BME280_readBytes>
	bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 800253c:	7b7b      	ldrb	r3, [r7, #13]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	b21a      	sxth	r2, r3
 8002542:	7b3b      	ldrb	r3, [r7, #12]
 8002544:	b21b      	sxth	r3, r3
 8002546:	4313      	orrs	r3, r2
 8002548:	b21a      	sxth	r2, r3
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <BME280_init+0x1d8>)
 800254c:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280._dig_H3 = calib[2];
 800254e:	7bba      	ldrb	r2, [r7, #14]
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <BME280_init+0x1d8>)
 8002552:	739a      	strb	r2, [r3, #14]
	bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	021a      	lsls	r2, r3, #8
 8002558:	7c3b      	ldrb	r3, [r7, #16]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	b2db      	uxtb	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	111b      	asrs	r3, r3, #4
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <BME280_init+0x1d8>)
 8002566:	829a      	strh	r2, [r3, #20]
	bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 8002568:	7c7b      	ldrb	r3, [r7, #17]
 800256a:	021a      	lsls	r2, r3, #8
 800256c:	7c3b      	ldrb	r3, [r7, #16]
 800256e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002572:	4313      	orrs	r3, r2
 8002574:	111b      	asrs	r3, r3, #4
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <BME280_init+0x1d8>)
 800257a:	82da      	strh	r2, [r3, #22]
	bme280._dig_H6 = calib[6];
 800257c:	7cba      	ldrb	r2, [r7, #18]
 800257e:	4b03      	ldr	r3, [pc, #12]	; (800258c <BME280_init+0x1d8>)
 8002580:	73da      	strb	r2, [r3, #15]
}
 8002582:	bf00      	nop
 8002584:	3728      	adds	r7, #40	; 0x28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200003c8 	.word	0x200003c8

08002590 <BME280_readIT>:

void BME280_readIT(){
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af02      	add	r7, sp, #8
	if(bm_i2cFlag == bm_i2cIdle){
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <BME280_readIT+0x30>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10e      	bne.n	80025bc <BME280_readIT+0x2c>
		HAL_I2C_Mem_Read_IT(bme280.hi2c, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <BME280_readIT+0x34>)
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	2306      	movs	r3, #6
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <BME280_readIT+0x38>)
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2301      	movs	r3, #1
 80025ac:	22f7      	movs	r2, #247	; 0xf7
 80025ae:	21ec      	movs	r1, #236	; 0xec
 80025b0:	f008 f8f0 	bl	800a794 <HAL_I2C_Mem_Read_IT>
		bm_i2cFlag = bm_i2cBME280;
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <BME280_readIT+0x30>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
		return;
 80025ba:	bf00      	nop
	}

}
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200008fc 	.word	0x200008fc
 80025c4:	200003c8 	.word	0x200003c8
 80025c8:	200003cc 	.word	0x200003cc

080025cc <BME280_i2cRxCpltCallback>:

void BME280_i2cRxCpltCallback(){
 80025cc:	b598      	push	{r3, r4, r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return;
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <BME280_i2cRxCpltCallback+0xb0>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d14e      	bne.n	8002676 <BME280_i2cRxCpltCallback+0xaa>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 80025da:	791b      	ldrb	r3, [r3, #4]
 80025dc:	061a      	lsls	r2, r3, #24
 80025de:	4b28      	ldr	r3, [pc, #160]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 80025e0:	795b      	ldrb	r3, [r3, #5]
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	431a      	orrs	r2, r3
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 80025e8:	799b      	ldrb	r3, [r3, #6]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	4313      	orrs	r3, r2
 80025ee:	131b      	asrs	r3, r3, #12
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 80025f8:	79db      	ldrb	r3, [r3, #7]
 80025fa:	061a      	lsls	r2, r3, #24
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 80025fe:	7a1b      	ldrb	r3, [r3, #8]
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 8002606:	7a5b      	ldrb	r3, [r3, #9]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	4313      	orrs	r3, r2
 800260c:	131b      	asrs	r3, r3, #12
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 8002610:	6353      	str	r3, [r2, #52]	; 0x34

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f87e 	bl	8002718 <BME280_compensate_P>
 800261c:	4603      	mov	r3, r0
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ff80 	bl	8000524 <__aeabi_ui2d>
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <BME280_i2cRxCpltCallback+0xb8>)
 800262a:	f7fe f91f 	bl	800086c <__aeabi_ddiv>
 800262e:	4603      	mov	r3, r0
 8002630:	460c      	mov	r4, r1
 8002632:	4618      	mov	r0, r3
 8002634:	4621      	mov	r1, r4
 8002636:	f7fe fae7 	bl	8000c08 <__aeabi_d2f>
 800263a:	4602      	mov	r2, r0
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 800263e:	645a      	str	r2, [r3, #68]	; 0x44
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f82b 	bl	80026a0 <BME280_compensate_T>
 800264a:	4603      	mov	r3, r0
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff79 	bl	8000544 <__aeabi_i2d>
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <BME280_i2cRxCpltCallback+0xbc>)
 8002658:	f7fe f908 	bl	800086c <__aeabi_ddiv>
 800265c:	4603      	mov	r3, r0
 800265e:	460c      	mov	r4, r1
 8002660:	4618      	mov	r0, r3
 8002662:	4621      	mov	r1, r4
 8002664:	f7fe fad0 	bl	8000c08 <__aeabi_d2f>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <BME280_i2cRxCpltCallback+0xb4>)
 800266c:	641a      	str	r2, [r3, #64]	; 0x40

//    bme280.alt = 44330 * (1.0 - pow(bme280.P / bme280.base_P, 0.1903));

    bm_i2cFlag = bm_i2cIdle;
 800266e:	4b03      	ldr	r3, [pc, #12]	; (800267c <BME280_i2cRxCpltCallback+0xb0>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	e000      	b.n	8002678 <BME280_i2cRxCpltCallback+0xac>
	if(bm_i2cFlag != bm_i2cBME280) return;
 8002676:	bf00      	nop
}
 8002678:	bd98      	pop	{r3, r4, r7, pc}
 800267a:	bf00      	nop
 800267c:	200008fc 	.word	0x200008fc
 8002680:	200003c8 	.word	0x200003c8
 8002684:	40d90000 	.word	0x40d90000
 8002688:	40590000 	.word	0x40590000

0800268c <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 8002690:	22b6      	movs	r2, #182	; 0xb6
 8002692:	21e0      	movs	r1, #224	; 0xe0
 8002694:	20ec      	movs	r0, #236	; 0xec
 8002696:	f000 f9ed 	bl	8002a74 <BME280_writeByte>
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <BME280_compensate_T>:



// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	10da      	asrs	r2, r3, #3
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <BME280_compensate_T+0x74>)
 80026ae:	8a1b      	ldrh	r3, [r3, #16]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	4a17      	ldr	r2, [pc, #92]	; (8002714 <BME280_compensate_T+0x74>)
 80026b6:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	12db      	asrs	r3, r3, #11
 80026c0:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	111b      	asrs	r3, r3, #4
 80026c6:	4a13      	ldr	r2, [pc, #76]	; (8002714 <BME280_compensate_T+0x74>)
 80026c8:	8a12      	ldrh	r2, [r2, #16]
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	1112      	asrs	r2, r2, #4
 80026d0:	4910      	ldr	r1, [pc, #64]	; (8002714 <BME280_compensate_T+0x74>)
 80026d2:	8a09      	ldrh	r1, [r1, #16]
 80026d4:	1a52      	subs	r2, r2, r1
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	131b      	asrs	r3, r3, #12
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <BME280_compensate_T+0x74>)
 80026de:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	139b      	asrs	r3, r3, #14
 80026e8:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a08      	ldr	r2, [pc, #32]	; (8002714 <BME280_compensate_T+0x74>)
 80026f2:	6313      	str	r3, [r2, #48]	; 0x30
	  T = (bme280._t_fine * 5 + 128) >> 8;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <BME280_compensate_T+0x74>)
 80026f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3380      	adds	r3, #128	; 0x80
 8002700:	121b      	asrs	r3, r3, #8
 8002702:	60fb      	str	r3, [r7, #12]
	  return T;
 8002704:	68fb      	ldr	r3, [r7, #12]
}
 8002706:	4618      	mov	r0, r3
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	200003c8 	.word	0x200003c8

08002718 <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 8002718:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800271c:	b088      	sub	sp, #32
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 8002722:	4b65      	ldr	r3, [pc, #404]	; (80028b8 <BME280_compensate_P+0x1a0>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4619      	mov	r1, r3
 8002728:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800272c:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002730:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002734:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	fb02 f203 	mul.w	r2, r2, r3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	441a      	add	r2, r3
 800274a:	69b9      	ldr	r1, [r7, #24]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fba1 3403 	umull	r3, r4, r1, r3
 8002752:	4422      	add	r2, r4
 8002754:	4614      	mov	r4, r2
 8002756:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <BME280_compensate_P+0x1a0>)
 8002758:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 800275c:	b211      	sxth	r1, r2
 800275e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002762:	fb01 f504 	mul.w	r5, r1, r4
 8002766:	fb03 f002 	mul.w	r0, r3, r2
 800276a:	4428      	add	r0, r5
 800276c:	fba3 3401 	umull	r3, r4, r3, r1
 8002770:	1902      	adds	r2, r0, r4
 8002772:	4614      	mov	r4, r2
 8002774:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002778:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 800277c:	4b4e      	ldr	r3, [pc, #312]	; (80028b8 <BME280_compensate_P+0x1a0>)
 800277e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002782:	b21b      	sxth	r3, r3
 8002784:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	fb04 f102 	mul.w	r1, r4, r2
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	fb03 f202 	mul.w	r2, r3, r2
 8002794:	1888      	adds	r0, r1, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	fba2 1203 	umull	r1, r2, r2, r3
 800279c:	1883      	adds	r3, r0, r2
 800279e:	461a      	mov	r2, r3
 80027a0:	f04f 0500 	mov.w	r5, #0
 80027a4:	f04f 0600 	mov.w	r6, #0
 80027a8:	0456      	lsls	r6, r2, #17
 80027aa:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80027ae:	044d      	lsls	r5, r1, #17
 80027b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80027b4:	186b      	adds	r3, r5, r1
 80027b6:	eb46 0402 	adc.w	r4, r6, r2
 80027ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 80027be:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <BME280_compensate_P+0x1a0>)
 80027c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80027c4:	b219      	sxth	r1, r3
 80027c6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80027ca:	f04f 0500 	mov.w	r5, #0
 80027ce:	f04f 0600 	mov.w	r6, #0
 80027d2:	00ce      	lsls	r6, r1, #3
 80027d4:	2500      	movs	r5, #0
 80027d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80027da:	186b      	adds	r3, r5, r1
 80027dc:	eb46 0402 	adc.w	r4, r6, r2
 80027e0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	fb02 f203 	mul.w	r2, r2, r3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	441a      	add	r2, r3
 80027f6:	69b9      	ldr	r1, [r7, #24]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fba1 3403 	umull	r3, r4, r1, r3
 80027fe:	4422      	add	r2, r4
 8002800:	4614      	mov	r4, r2
 8002802:	4a2d      	ldr	r2, [pc, #180]	; (80028b8 <BME280_compensate_P+0x1a0>)
 8002804:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8002808:	b211      	sxth	r1, r2
 800280a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800280e:	fb01 f504 	mul.w	r5, r1, r4
 8002812:	fb03 f002 	mul.w	r0, r3, r2
 8002816:	4428      	add	r0, r5
 8002818:	fba3 3401 	umull	r3, r4, r3, r1
 800281c:	1902      	adds	r2, r0, r4
 800281e:	4614      	mov	r4, r2
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	0a19      	lsrs	r1, r3, #8
 800282a:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800282e:	1222      	asrs	r2, r4, #8
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <BME280_compensate_P+0x1a0>)
 8002832:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002836:	b21b      	sxth	r3, r3
 8002838:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800283c:	69b8      	ldr	r0, [r7, #24]
 800283e:	fb04 f500 	mul.w	r5, r4, r0
 8002842:	69f8      	ldr	r0, [r7, #28]
 8002844:	fb03 f000 	mul.w	r0, r3, r0
 8002848:	4428      	add	r0, r5
 800284a:	69bd      	ldr	r5, [r7, #24]
 800284c:	fba5 5603 	umull	r5, r6, r5, r3
 8002850:	1983      	adds	r3, r0, r6
 8002852:	461e      	mov	r6, r3
 8002854:	f04f 0b00 	mov.w	fp, #0
 8002858:	f04f 0c00 	mov.w	ip, #0
 800285c:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002860:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002864:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8002868:	eb1b 0301 	adds.w	r3, fp, r1
 800286c:	eb4c 0402 	adc.w	r4, ip, r2
 8002870:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 8002874:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002878:	1c19      	adds	r1, r3, #0
 800287a:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <BME280_compensate_P+0x1a0>)
 8002880:	8a5b      	ldrh	r3, [r3, #18]
 8002882:	b29b      	uxth	r3, r3
 8002884:	f04f 0400 	mov.w	r4, #0
 8002888:	fb03 f502 	mul.w	r5, r3, r2
 800288c:	fb01 f004 	mul.w	r0, r1, r4
 8002890:	4428      	add	r0, r5
 8002892:	fba1 3403 	umull	r3, r4, r1, r3
 8002896:	1902      	adds	r2, r0, r4
 8002898:	4614      	mov	r4, r2
 800289a:	f04f 0100 	mov.w	r1, #0
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	1061      	asrs	r1, r4, #1
 80028a4:	17e2      	asrs	r2, r4, #31
 80028a6:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 80028aa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80028ae:	4323      	orrs	r3, r4
 80028b0:	d104      	bne.n	80028bc <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e0d7      	b.n	8002a66 <BME280_compensate_P+0x34e>
 80028b6:	bf00      	nop
 80028b8:	200003c8 	.word	0x200003c8
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80028c2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80028c6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	ea4f 0963 	mov.w	r9, r3, asr #1
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80028d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80028da:	4645      	mov	r5, r8
 80028dc:	464e      	mov	r6, r9
 80028de:	1aed      	subs	r5, r5, r3
 80028e0:	eb66 0604 	sbc.w	r6, r6, r4
 80028e4:	46a8      	mov	r8, r5
 80028e6:	46b1      	mov	r9, r6
 80028e8:	eb18 0308 	adds.w	r3, r8, r8
 80028ec:	eb49 0409 	adc.w	r4, r9, r9
 80028f0:	4698      	mov	r8, r3
 80028f2:	46a1      	mov	r9, r4
 80028f4:	eb18 0805 	adds.w	r8, r8, r5
 80028f8:	eb49 0906 	adc.w	r9, r9, r6
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8002908:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 800290c:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002910:	eb18 0801 	adds.w	r8, r8, r1
 8002914:	eb49 0902 	adc.w	r9, r9, r2
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002924:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002928:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800292c:	4688      	mov	r8, r1
 800292e:	4691      	mov	r9, r2
 8002930:	eb18 0805 	adds.w	r8, r8, r5
 8002934:	eb49 0906 	adc.w	r9, r9, r6
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002944:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002948:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800294c:	4688      	mov	r8, r1
 800294e:	4691      	mov	r9, r2
 8002950:	eb18 0005 	adds.w	r0, r8, r5
 8002954:	eb49 0106 	adc.w	r1, r9, r6
 8002958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800295c:	f7fe fab2 	bl	8000ec4 <__aeabi_ldivmod>
 8002960:	4603      	mov	r3, r0
 8002962:	460c      	mov	r4, r1
 8002964:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 8002968:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <BME280_compensate_P+0x358>)
 800296a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800296e:	b219      	sxth	r1, r3
 8002970:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002974:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f04f 0400 	mov.w	r4, #0
 8002980:	0b6b      	lsrs	r3, r5, #13
 8002982:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002986:	1374      	asrs	r4, r6, #13
 8002988:	fb03 f502 	mul.w	r5, r3, r2
 800298c:	fb01 f004 	mul.w	r0, r1, r4
 8002990:	4428      	add	r0, r5
 8002992:	fba1 1203 	umull	r1, r2, r1, r3
 8002996:	1883      	adds	r3, r0, r2
 8002998:	461a      	mov	r2, r3
 800299a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f04f 0400 	mov.w	r4, #0
 80029a6:	0b6b      	lsrs	r3, r5, #13
 80029a8:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80029ac:	1374      	asrs	r4, r6, #13
 80029ae:	fb03 f502 	mul.w	r5, r3, r2
 80029b2:	fb01 f004 	mul.w	r0, r1, r4
 80029b6:	4428      	add	r0, r5
 80029b8:	fba1 1203 	umull	r1, r2, r1, r3
 80029bc:	1883      	adds	r3, r0, r2
 80029be:	461a      	mov	r2, r3
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	f04f 0400 	mov.w	r4, #0
 80029c8:	0e4b      	lsrs	r3, r1, #25
 80029ca:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80029ce:	1654      	asrs	r4, r2, #25
 80029d0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <BME280_compensate_P+0x358>)
 80029d6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80029da:	b21b      	sxth	r3, r3
 80029dc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	fb04 f102 	mul.w	r1, r4, r2
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	fb03 f202 	mul.w	r2, r3, r2
 80029ec:	1888      	adds	r0, r1, r2
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	fba2 1203 	umull	r1, r2, r2, r3
 80029f4:	1883      	adds	r3, r0, r2
 80029f6:	461a      	mov	r2, r3
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	f04f 0400 	mov.w	r4, #0
 8002a00:	0ccb      	lsrs	r3, r1, #19
 8002a02:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002a06:	14d4      	asrs	r4, r2, #19
 8002a08:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 8002a0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002a10:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002a14:	eb11 0803 	adds.w	r8, r1, r3
 8002a18:	eb42 0904 	adc.w	r9, r2, r4
 8002a1c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a20:	eb13 0508 	adds.w	r5, r3, r8
 8002a24:	eb44 0609 	adc.w	r6, r4, r9
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	0a29      	lsrs	r1, r5, #8
 8002a32:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8002a36:	1232      	asrs	r2, r6, #8
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <BME280_compensate_P+0x358>)
 8002a3a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002a3e:	b21d      	sxth	r5, r3
 8002a40:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002a44:	f04f 0800 	mov.w	r8, #0
 8002a48:	f04f 0900 	mov.w	r9, #0
 8002a4c:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002a50:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002a54:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8002a58:	eb18 0301 	adds.w	r3, r8, r1
 8002a5c:	eb49 0402 	adc.w	r4, r9, r2
 8002a60:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 8002a64:	68bb      	ldr	r3, [r7, #8]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002a70:	200003c8 	.word	0x200003c8

08002a74 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af04      	add	r7, sp, #16
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	71bb      	strb	r3, [r7, #6]
 8002a82:	4613      	mov	r3, r2
 8002a84:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(bme280.hi2c, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <BME280_writeByte+0x38>)
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	b299      	uxth	r1, r3
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	2364      	movs	r3, #100	; 0x64
 8002a94:	9302      	str	r3, [sp, #8]
 8002a96:	2301      	movs	r3, #1
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	1d7b      	adds	r3, r7, #5
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f007 fb58 	bl	800a154 <HAL_I2C_Mem_Write>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200003c8 	.word	0x200003c8

08002ab0 <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af04      	add	r7, sp, #16
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
 8002abc:	460b      	mov	r3, r1
 8002abe:	71bb      	strb	r3, [r7, #6]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(bme280.hi2c, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <BME280_readBytes+0x40>)
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	b299      	uxth	r1, r3
 8002acc:	79bb      	ldrb	r3, [r7, #6]
 8002ace:	b29c      	uxth	r4, r3
 8002ad0:	797b      	ldrb	r3, [r7, #5]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2264      	movs	r2, #100	; 0x64
 8002ad6:	9202      	str	r2, [sp, #8]
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	f007 fc31 	bl	800a348 <HAL_I2C_Mem_Read>
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd90      	pop	{r4, r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200003c8 	.word	0x200003c8

08002af4 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 8002afc:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <TM_GPS_Init+0x124>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <TM_GPS_Init+0x128>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 8002b0a:	4844      	ldr	r0, [pc, #272]	; (8002c1c <TM_GPS_Init+0x128>)
 8002b0c:	f001 f9fa 	bl	8003f04 <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 8002b10:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	4a41      	ldr	r2, [pc, #260]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b1a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b24:	4a3e      	ldr	r2, [pc, #248]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b26:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 8002b28:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	4a3b      	ldr	r2, [pc, #236]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b32:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002b34:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f043 0320 	orr.w	r3, r3, #32
 8002b3c:	4a38      	ldr	r2, [pc, #224]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b3e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 8002b40:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	4a35      	ldr	r2, [pc, #212]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b4a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 8002b4c:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f043 0308 	orr.w	r3, r3, #8
 8002b54:	4a32      	ldr	r2, [pc, #200]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b56:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 8002b58:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f043 0310 	orr.w	r3, r3, #16
 8002b60:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b62:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 8002b64:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6c:	4a2c      	ldr	r2, [pc, #176]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b6e:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b78:	4a29      	ldr	r2, [pc, #164]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b7a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b84:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b86:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b90:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b92:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002b9e:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 8002ba0:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002baa:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 8002bac:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb4:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bb6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bc0:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bc2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002bc4:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bce:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bda:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002be6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 8002be8:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	4a0b      	ldr	r2, [pc, #44]	; (8002c20 <TM_GPS_Init+0x12c>)
 8002bf2:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 8002bf4:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <TM_GPS_Init+0x128>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <TM_GPS_Init+0x128>)
 8002bfe:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002c02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c06:	4907      	ldr	r1, [pc, #28]	; (8002c24 <TM_GPS_Init+0x130>)
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f00d fb1b 	bl	8010244 <HAL_UART_Receive_DMA>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000558 	.word	0x20000558
 8002c1c:	20000688 	.word	0x20000688
 8002c20:	2000042c 	.word	0x2000042c
 8002c24:	200007b4 	.word	0x200007b4

08002c28 <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update() {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	70fb      	strb	r3, [r7, #3]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	e013      	b.n	8002c60 <TM_GPS_Update+0x38>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 8002c38:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <TM_GPS_Update+0x68>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4812      	ldr	r0, [pc, #72]	; (8002c90 <TM_GPS_Update+0x68>)
 8002c48:	f000 f8de 	bl	8002e08 <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <TM_GPS_Update+0x68>)
 8002c4e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <TM_GPS_Update+0x32>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 8002c56:	2300      	movs	r3, #0
 8002c58:	70fb      	strb	r3, [r7, #3]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002c66:	dbe7      	blt.n	8002c38 <TM_GPS_Update+0x10>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <TM_GPS_Update+0x6c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <TM_GPS_Update+0x54>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <TM_GPS_Update+0x68>)
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e004      	b.n	8002c86 <TM_GPS_Update+0x5e>
	}
	
	/* We have old data */
	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <TM_GPS_Update+0x68>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002c84:	2301      	movs	r3, #1

	return result;
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000688 	.word	0x20000688
 8002c94:	20000558 	.word	0x20000558

08002c98 <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	2b0e      	cmp	r3, #14
 8002caa:	f200 8086 	bhi.w	8002dba <TM_GPS_ConvertSpeed+0x122>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <TM_GPS_ConvertSpeed+0x1c>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cf1 	.word	0x08002cf1
 8002cb8:	08002cff 	.word	0x08002cff
 8002cbc:	08002d0d 	.word	0x08002d0d
 8002cc0:	08002d1b 	.word	0x08002d1b
 8002cc4:	08002d29 	.word	0x08002d29
 8002cc8:	08002d37 	.word	0x08002d37
 8002ccc:	08002d45 	.word	0x08002d45
 8002cd0:	08002d53 	.word	0x08002d53
 8002cd4:	08002d61 	.word	0x08002d61
 8002cd8:	08002d6f 	.word	0x08002d6f
 8002cdc:	08002d7d 	.word	0x08002d7d
 8002ce0:	08002d8b 	.word	0x08002d8b
 8002ce4:	08002d99 	.word	0x08002d99
 8002ce8:	08002da7 	.word	0x08002da7
 8002cec:	08002db5 	.word	0x08002db5
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 8002cf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cf4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002dcc <TM_GPS_ConvertSpeed+0x134>
 8002cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfc:	e05f      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 8002cfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d02:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002dd0 <TM_GPS_ConvertSpeed+0x138>
 8002d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0a:	e058      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 8002d0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d10:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002dd4 <TM_GPS_ConvertSpeed+0x13c>
 8002d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d18:	e051      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 8002d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d1e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002dd8 <TM_GPS_ConvertSpeed+0x140>
 8002d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d26:	e04a      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d2c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002ddc <TM_GPS_ConvertSpeed+0x144>
 8002d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d34:	e043      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002d36:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d3a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002de0 <TM_GPS_ConvertSpeed+0x148>
 8002d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d42:	e03c      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 8002d44:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d48:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002de4 <TM_GPS_ConvertSpeed+0x14c>
 8002d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d50:	e035      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 8002d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d56:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002de8 <TM_GPS_ConvertSpeed+0x150>
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	e02e      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 8002d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d64:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002dec <TM_GPS_ConvertSpeed+0x154>
 8002d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6c:	e027      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 8002d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d72:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002df0 <TM_GPS_ConvertSpeed+0x158>
 8002d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d7a:	e020      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 8002d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d80:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002df4 <TM_GPS_ConvertSpeed+0x15c>
 8002d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d88:	e019      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 8002d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d8e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002df8 <TM_GPS_ConvertSpeed+0x160>
 8002d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d96:	e012      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 8002d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d9c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002dfc <TM_GPS_ConvertSpeed+0x164>
 8002da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da4:	e00b      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002daa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002e00 <TM_GPS_ConvertSpeed+0x168>
 8002dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db2:	e004      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002db8:	e001      	b.n	8002dbe <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 8002dba:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002e04 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 8002dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	3a06bdf5 	.word	0x3a06bdf5
 8002dd0:	3f03afb8 	.word	0x3f03afb8
 8002dd4:	3fed0e56 	.word	0x3fed0e56
 8002dd8:	41f6f5c3 	.word	0x41f6f5c3
 8002ddc:	39a79d68 	.word	0x39a79d68
 8002de0:	3f9353f8 	.word	0x3f9353f8
 8002de4:	3fd81062 	.word	0x3fd81062
 8002de8:	42ca999a 	.word	0x42ca999a
 8002dec:	4201999a 	.word	0x4201999a
 8002df0:	44f30000 	.word	0x44f30000
 8002df4:	43426666 	.word	0x43426666
 8002df8:	42508f5c 	.word	0x42508f5c
 8002dfc:	45438000 	.word	0x45438000
 8002e00:	4331b333 	.word	0x4331b333
 8002e04:	00000000 	.word	0x00000000

08002e08 <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f001 f847 	bl	8003ea8 <TM_GPS_INT_FlagsOk>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d006      	beq.n	8002e2e <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f001 f86f 	bl	8003f04 <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	2b24      	cmp	r3, #36	; 0x24
 8002e32:	d116      	bne.n	8002e62 <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002e34:	4b5d      	ldr	r3, [pc, #372]	; (8002fac <TM_GPS_INT_Do+0x1a4>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <TM_GPS_INT_Do+0x1a8>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 8002e40:	4b5c      	ldr	r3, [pc, #368]	; (8002fb4 <TM_GPS_INT_Do+0x1ac>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002e46:	4b5c      	ldr	r3, [pc, #368]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 8002e4c:	4b5a      	ldr	r3, [pc, #360]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	b2d1      	uxtb	r1, r2
 8002e54:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002e56:	7011      	strb	r1, [r2, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <TM_GPS_INT_Do+0x1b4>)
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	5453      	strb	r3, [r2, r1]
 8002e60:	e09b      	b.n	8002f9a <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	2b2c      	cmp	r3, #44	; 0x2c
 8002e66:	d120      	bne.n	8002eaa <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 8002e68:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <TM_GPS_INT_Do+0x1a8>)
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	4053      	eors	r3, r2
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b4f      	ldr	r3, [pc, #316]	; (8002fb0 <TM_GPS_INT_Do+0x1a8>)
 8002e74:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 8002e76:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	b2d1      	uxtb	r1, r2
 8002e7e:	4a4e      	ldr	r2, [pc, #312]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002e80:	7011      	strb	r1, [r2, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <TM_GPS_INT_Do+0x1b4>)
 8002e86:	2100      	movs	r1, #0
 8002e88:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f001 f85e 	bl	8003f4c <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f89f 	bl	8002fd4 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <TM_GPS_INT_Do+0x1ac>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4b45      	ldr	r3, [pc, #276]	; (8002fb4 <TM_GPS_INT_Do+0x1ac>)
 8002ea0:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002ea2:	4b45      	ldr	r3, [pc, #276]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e077      	b.n	8002f9a <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	2b0a      	cmp	r3, #10
 8002eae:	d113      	bne.n	8002ed8 <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <TM_GPS_INT_Do+0x1ac>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002eb6:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <TM_GPS_INT_Do+0x1b8>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d16d      	bne.n	8002f9a <TM_GPS_INT_Do+0x192>
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <TM_GPS_INT_Do+0x1bc>)
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <TM_GPS_INT_Do+0x1c0>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d167      	bne.n	8002f9a <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 8002eca:	4b40      	ldr	r3, [pc, #256]	; (8002fcc <TM_GPS_INT_Do+0x1c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed2:	4a3e      	ldr	r2, [pc, #248]	; (8002fcc <TM_GPS_INT_Do+0x1c4>)
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e060      	b.n	8002f9a <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	2b0d      	cmp	r3, #13
 8002edc:	d128      	bne.n	8002f30 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 8002ede:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	b2d1      	uxtb	r1, r2
 8002ee6:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002ee8:	7011      	strb	r1, [r2, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <TM_GPS_INT_Do+0x1b4>)
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 8002ef2:	4b32      	ldr	r3, [pc, #200]	; (8002fbc <TM_GPS_INT_Do+0x1b4>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 ffac 	bl	8003e54 <TM_GPS_INT_Hex2Dec>
 8002efc:	4603      	mov	r3, r0
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	b2dc      	uxtb	r4, r3
 8002f02:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <TM_GPS_INT_Do+0x1b4>)
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 ffa4 	bl	8003e54 <TM_GPS_INT_Hex2Dec>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4423      	add	r3, r4
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <TM_GPS_INT_Do+0x1c8>)
 8002f14:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <TM_GPS_INT_Do+0x1c8>)
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <TM_GPS_INT_Do+0x1a8>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d002      	beq.n	8002f28 <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 ffee 	bl	8003f04 <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <TM_GPS_INT_Do+0x1ac>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e034      	b.n	8002f9a <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	2b2a      	cmp	r3, #42	; 0x2a
 8002f34:	d11c      	bne.n	8002f70 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <TM_GPS_INT_Do+0x1a4>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	b2d1      	uxtb	r1, r2
 8002f44:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002f46:	7011      	strb	r1, [r2, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <TM_GPS_INT_Do+0x1b4>)
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fffb 	bl	8003f4c <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f83c 	bl	8002fd4 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <TM_GPS_INT_Do+0x1ac>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	3301      	adds	r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <TM_GPS_INT_Do+0x1ac>)
 8002f66:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e014      	b.n	8002f9a <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <TM_GPS_INT_Do+0x1a4>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d106      	bne.n	8002f86 <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <TM_GPS_INT_Do+0x1a8>)
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	4053      	eors	r3, r2
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <TM_GPS_INT_Do+0x1a8>)
 8002f84:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	b2d1      	uxtb	r1, r2
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <TM_GPS_INT_Do+0x1b0>)
 8002f90:	7011      	strb	r1, [r2, #0]
 8002f92:	4619      	mov	r1, r3
 8002f94:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <TM_GPS_INT_Do+0x1b4>)
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fe44 	bl	8003c28 <TM_GPS_INT_Return>
 8002fa0:	4603      	mov	r3, r0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000427 	.word	0x20000427
 8002fb0:	20000425 	.word	0x20000425
 8002fb4:	20000423 	.word	0x20000423
 8002fb8:	20000424 	.word	0x20000424
 8002fbc:	20000414 	.word	0x20000414
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000563 	.word	0x20000563
 8002fc8:	20000564 	.word	0x20000564
 8002fcc:	20000428 	.word	0x20000428
 8002fd0:	20000426 	.word	0x20000426

08002fd4 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 8002fd4:	b5b0      	push	{r4, r5, r7, lr}
 8002fd6:	ed2d 8b02 	vpush	{d8}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 8002fe0:	48cb      	ldr	r0, [pc, #812]	; (8003310 <TM_GPS_INT_CheckTerm+0x33c>)
 8002fe2:	7800      	ldrb	r0, [r0, #0]
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	d134      	bne.n	8003052 <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 8002fe8:	49ca      	ldr	r1, [pc, #808]	; (8003314 <TM_GPS_INT_CheckTerm+0x340>)
 8002fea:	48cb      	ldr	r0, [pc, #812]	; (8003318 <TM_GPS_INT_CheckTerm+0x344>)
 8002fec:	f000 fecc 	bl	8003d88 <TM_GPS_INT_StringStartsWith>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 8002ff6:	4bc9      	ldr	r3, [pc, #804]	; (800331c <TM_GPS_INT_CheckTerm+0x348>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e023      	b.n	8003046 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 8002ffe:	49c8      	ldr	r1, [pc, #800]	; (8003320 <TM_GPS_INT_CheckTerm+0x34c>)
 8003000:	48c5      	ldr	r0, [pc, #788]	; (8003318 <TM_GPS_INT_CheckTerm+0x344>)
 8003002:	f000 fec1 	bl	8003d88 <TM_GPS_INT_StringStartsWith>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 800300c:	4bc3      	ldr	r3, [pc, #780]	; (800331c <TM_GPS_INT_CheckTerm+0x348>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e018      	b.n	8003046 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 8003014:	49c3      	ldr	r1, [pc, #780]	; (8003324 <TM_GPS_INT_CheckTerm+0x350>)
 8003016:	48c0      	ldr	r0, [pc, #768]	; (8003318 <TM_GPS_INT_CheckTerm+0x344>)
 8003018:	f000 feb6 	bl	8003d88 <TM_GPS_INT_StringStartsWith>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8003022:	4bbe      	ldr	r3, [pc, #760]	; (800331c <TM_GPS_INT_CheckTerm+0x348>)
 8003024:	2202      	movs	r2, #2
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e00d      	b.n	8003046 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 800302a:	49bf      	ldr	r1, [pc, #764]	; (8003328 <TM_GPS_INT_CheckTerm+0x354>)
 800302c:	48ba      	ldr	r0, [pc, #744]	; (8003318 <TM_GPS_INT_CheckTerm+0x344>)
 800302e:	f000 feab 	bl	8003d88 <TM_GPS_INT_StringStartsWith>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 8003038:	4bb8      	ldr	r3, [pc, #736]	; (800331c <TM_GPS_INT_CheckTerm+0x348>)
 800303a:	2203      	movs	r2, #3
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e002      	b.n	8003046 <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 8003040:	4bb6      	ldr	r3, [pc, #728]	; (800331c <TM_GPS_INT_CheckTerm+0x348>)
 8003042:	2204      	movs	r2, #4
 8003044:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 8003046:	49b4      	ldr	r1, [pc, #720]	; (8003318 <TM_GPS_INT_CheckTerm+0x344>)
 8003048:	48b8      	ldr	r0, [pc, #736]	; (800332c <TM_GPS_INT_CheckTerm+0x358>)
 800304a:	f017 fcd1 	bl	801a9f0 <strcpy>
 800304e:	f000 bdd1 	b.w	8003bf4 <TM_GPS_INT_CheckTerm+0xc20>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003052:	48b2      	ldr	r0, [pc, #712]	; (800331c <TM_GPS_INT_CheckTerm+0x348>)
 8003054:	7800      	ldrb	r0, [r0, #0]
 8003056:	0140      	lsls	r0, r0, #5
 8003058:	4dad      	ldr	r5, [pc, #692]	; (8003310 <TM_GPS_INT_CheckTerm+0x33c>)
 800305a:	782d      	ldrb	r5, [r5, #0]
 800305c:	4328      	orrs	r0, r5
 800305e:	3801      	subs	r0, #1
 8003060:	2862      	cmp	r0, #98	; 0x62
 8003062:	f200 852f 	bhi.w	8003ac4 <TM_GPS_INT_CheckTerm+0xaf0>
 8003066:	a501      	add	r5, pc, #4	; (adr r5, 800306c <TM_GPS_INT_CheckTerm+0x98>)
 8003068:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 800306c:	08003615 	.word	0x08003615
 8003070:	080031f9 	.word	0x080031f9
 8003074:	080032e7 	.word	0x080032e7
 8003078:	08003345 	.word	0x08003345
 800307c:	08003433 	.word	0x08003433
 8003080:	0800347d 	.word	0x0800347d
 8003084:	0800345b 	.word	0x0800345b
 8003088:	08003ac5 	.word	0x08003ac5
 800308c:	0800349f 	.word	0x0800349f
 8003090:	08003ac5 	.word	0x08003ac5
 8003094:	08003ac5 	.word	0x08003ac5
 8003098:	08003ac5 	.word	0x08003ac5
 800309c:	08003ac5 	.word	0x08003ac5
 80030a0:	08003ac5 	.word	0x08003ac5
 80030a4:	08003ac5 	.word	0x08003ac5
 80030a8:	08003ac5 	.word	0x08003ac5
 80030ac:	08003ac5 	.word	0x08003ac5
 80030b0:	08003ac5 	.word	0x08003ac5
 80030b4:	08003ac5 	.word	0x08003ac5
 80030b8:	08003ac5 	.word	0x08003ac5
 80030bc:	08003ac5 	.word	0x08003ac5
 80030c0:	08003ac5 	.word	0x08003ac5
 80030c4:	08003ac5 	.word	0x08003ac5
 80030c8:	08003ac5 	.word	0x08003ac5
 80030cc:	08003ac5 	.word	0x08003ac5
 80030d0:	08003ac5 	.word	0x08003ac5
 80030d4:	08003ac5 	.word	0x08003ac5
 80030d8:	08003ac5 	.word	0x08003ac5
 80030dc:	08003ac5 	.word	0x08003ac5
 80030e0:	08003ac5 	.word	0x08003ac5
 80030e4:	08003ac5 	.word	0x08003ac5
 80030e8:	08003ac5 	.word	0x08003ac5
 80030ec:	08003ac5 	.word	0x08003ac5
 80030f0:	0800380b 	.word	0x0800380b
 80030f4:	08003ac5 	.word	0x08003ac5
 80030f8:	08003ac5 	.word	0x08003ac5
 80030fc:	08003ac5 	.word	0x08003ac5
 8003100:	08003ac5 	.word	0x08003ac5
 8003104:	080036d3 	.word	0x080036d3
 8003108:	0800382f 	.word	0x0800382f
 800310c:	08003771 	.word	0x08003771
 8003110:	08003ac5 	.word	0x08003ac5
 8003114:	08003ac5 	.word	0x08003ac5
 8003118:	08003ac5 	.word	0x08003ac5
 800311c:	08003ac5 	.word	0x08003ac5
 8003120:	08003ac5 	.word	0x08003ac5
 8003124:	08003ac5 	.word	0x08003ac5
 8003128:	08003ac5 	.word	0x08003ac5
 800312c:	08003ac5 	.word	0x08003ac5
 8003130:	08003ac5 	.word	0x08003ac5
 8003134:	08003ac5 	.word	0x08003ac5
 8003138:	08003ac5 	.word	0x08003ac5
 800313c:	08003ac5 	.word	0x08003ac5
 8003140:	08003ac5 	.word	0x08003ac5
 8003144:	08003ac5 	.word	0x08003ac5
 8003148:	08003ac5 	.word	0x08003ac5
 800314c:	08003ac5 	.word	0x08003ac5
 8003150:	08003ac5 	.word	0x08003ac5
 8003154:	08003ac5 	.word	0x08003ac5
 8003158:	08003ac5 	.word	0x08003ac5
 800315c:	08003ac5 	.word	0x08003ac5
 8003160:	08003ac5 	.word	0x08003ac5
 8003164:	08003ac5 	.word	0x08003ac5
 8003168:	08003ac5 	.word	0x08003ac5
 800316c:	08003ac5 	.word	0x08003ac5
 8003170:	08003a31 	.word	0x08003a31
 8003174:	08003a55 	.word	0x08003a55
 8003178:	08003a55 	.word	0x08003a55
 800317c:	08003a55 	.word	0x08003a55
 8003180:	08003a55 	.word	0x08003a55
 8003184:	08003a55 	.word	0x08003a55
 8003188:	08003a55 	.word	0x08003a55
 800318c:	08003a55 	.word	0x08003a55
 8003190:	08003a55 	.word	0x08003a55
 8003194:	08003a55 	.word	0x08003a55
 8003198:	08003a55 	.word	0x08003a55
 800319c:	08003a55 	.word	0x08003a55
 80031a0:	08003a55 	.word	0x08003a55
 80031a4:	0800393d 	.word	0x0800393d
 80031a8:	080038a9 	.word	0x080038a9
 80031ac:	080039b7 	.word	0x080039b7
 80031b0:	08003ac5 	.word	0x08003ac5
 80031b4:	08003ac5 	.word	0x08003ac5
 80031b8:	08003ac5 	.word	0x08003ac5
 80031bc:	08003ac5 	.word	0x08003ac5
 80031c0:	08003ac5 	.word	0x08003ac5
 80031c4:	08003ac5 	.word	0x08003ac5
 80031c8:	08003ac5 	.word	0x08003ac5
 80031cc:	08003ac5 	.word	0x08003ac5
 80031d0:	08003ac5 	.word	0x08003ac5
 80031d4:	08003ac5 	.word	0x08003ac5
 80031d8:	08003ac5 	.word	0x08003ac5
 80031dc:	08003ac5 	.word	0x08003ac5
 80031e0:	08003ac5 	.word	0x08003ac5
 80031e4:	08003ac5 	.word	0x08003ac5
 80031e8:	08003ac5 	.word	0x08003ac5
 80031ec:	08003ac5 	.word	0x08003ac5
 80031f0:	08003ac5 	.word	0x08003ac5
 80031f4:	08003aa1 	.word	0x08003aa1
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80031f8:	f107 0308 	add.w	r3, r7, #8
 80031fc:	4619      	mov	r1, r3
 80031fe:	4846      	ldr	r0, [pc, #280]	; (8003318 <TM_GPS_INT_CheckTerm+0x344>)
 8003200:	f000 fddf 	bl	8003dc2 <TM_GPS_INT_Atoi>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4a49      	ldr	r2, [pc, #292]	; (8003330 <TM_GPS_INT_CheckTerm+0x35c>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd f986 	bl	8000524 <__aeabi_ui2d>
 8003218:	4603      	mov	r3, r0
 800321a:	460c      	mov	r4, r1
 800321c:	4a45      	ldr	r2, [pc, #276]	; (8003334 <TM_GPS_INT_CheckTerm+0x360>)
 800321e:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 8003222:	4b44      	ldr	r3, [pc, #272]	; (8003334 <TM_GPS_INT_CheckTerm+0x360>)
 8003224:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4b41      	ldr	r3, [pc, #260]	; (8003330 <TM_GPS_INT_CheckTerm+0x35c>)
 800322c:	fba3 1302 	umull	r1, r3, r3, r2
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	2164      	movs	r1, #100	; 0x64
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003242:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003338 <TM_GPS_INT_CheckTerm+0x364>
 8003246:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800324a:	ee16 0a90 	vmov	r0, s13
 800324e:	f7fd f98b 	bl	8000568 <__aeabi_f2d>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4620      	mov	r0, r4
 8003258:	4629      	mov	r1, r5
 800325a:	f7fd f827 	bl	80002ac <__adddf3>
 800325e:	4603      	mov	r3, r0
 8003260:	460c      	mov	r4, r1
 8003262:	4a34      	ldr	r2, [pc, #208]	; (8003334 <TM_GPS_INT_CheckTerm+0x360>)
 8003264:	e9c2 3400 	strd	r3, r4, [r2]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	3301      	adds	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	4a29      	ldr	r2, [pc, #164]	; (8003318 <TM_GPS_INT_CheckTerm+0x344>)
 8003272:	4413      	add	r3, r2
 8003274:	f107 0208 	add.w	r2, r7, #8
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fda1 	bl	8003dc2 <TM_GPS_INT_Atoi>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f94c 	bl	8000524 <__aeabi_ui2d>
 800328c:	4604      	mov	r4, r0
 800328e:	460d      	mov	r5, r1
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	4619      	mov	r1, r3
 8003294:	200a      	movs	r0, #10
 8003296:	f000 fdc1 	bl	8003e1c <TM_GPS_INT_Pow>
 800329a:	4603      	mov	r3, r0
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f941 	bl	8000524 <__aeabi_ui2d>
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <TM_GPS_INT_CheckTerm+0x368>)
 80032a8:	f7fd f9b6 	bl	8000618 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4620      	mov	r0, r4
 80032b2:	4629      	mov	r1, r5
 80032b4:	f7fd fada 	bl	800086c <__aeabi_ddiv>
 80032b8:	4603      	mov	r3, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	4618      	mov	r0, r3
 80032be:	4621      	mov	r1, r4
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <TM_GPS_INT_CheckTerm+0x360>)
 80032c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032c6:	461a      	mov	r2, r3
 80032c8:	4623      	mov	r3, r4
 80032ca:	f7fc ffef 	bl	80002ac <__adddf3>
 80032ce:	4603      	mov	r3, r0
 80032d0:	460c      	mov	r4, r1
 80032d2:	4a18      	ldr	r2, [pc, #96]	; (8003334 <TM_GPS_INT_CheckTerm+0x360>)
 80032d4:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <TM_GPS_INT_CheckTerm+0x36c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	4a17      	ldr	r2, [pc, #92]	; (8003340 <TM_GPS_INT_CheckTerm+0x36c>)
 80032e2:	6013      	str	r3, [r2, #0]
			break;
 80032e4:	e3f1      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <TM_GPS_INT_CheckTerm+0x344>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b53      	cmp	r3, #83	; 0x53
 80032ec:	d108      	bne.n	8003300 <TM_GPS_INT_CheckTerm+0x32c>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <TM_GPS_INT_CheckTerm+0x360>)
 80032f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032f4:	4619      	mov	r1, r3
 80032f6:	f084 4200 	eor.w	r2, r4, #2147483648	; 0x80000000
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <TM_GPS_INT_CheckTerm+0x360>)
 80032fc:	e9c3 1200 	strd	r1, r2, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <TM_GPS_INT_CheckTerm+0x36c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <TM_GPS_INT_CheckTerm+0x36c>)
 800330a:	6013      	str	r3, [r2, #0]
			break;
 800330c:	e3dd      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
 800330e:	bf00      	nop
 8003310:	20000423 	.word	0x20000423
 8003314:	0801ded0 	.word	0x0801ded0
 8003318:	20000414 	.word	0x20000414
 800331c:	20000000 	.word	0x20000000
 8003320:	0801ded8 	.word	0x0801ded8
 8003324:	0801dee0 	.word	0x0801dee0
 8003328:	0801dee8 	.word	0x0801dee8
 800332c:	2000055c 	.word	0x2000055c
 8003330:	51eb851f 	.word	0x51eb851f
 8003334:	20000430 	.word	0x20000430
 8003338:	42700000 	.word	0x42700000
 800333c:	404e0000 	.word	0x404e0000
 8003340:	20000428 	.word	0x20000428
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4619      	mov	r1, r3
 800334a:	48ab      	ldr	r0, [pc, #684]	; (80035f8 <TM_GPS_INT_CheckTerm+0x624>)
 800334c:	f000 fd39 	bl	8003dc2 <TM_GPS_INT_Atoi>
 8003350:	4603      	mov	r3, r0
 8003352:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4aa9      	ldr	r2, [pc, #676]	; (80035fc <TM_GPS_INT_CheckTerm+0x628>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f8e0 	bl	8000524 <__aeabi_ui2d>
 8003364:	4603      	mov	r3, r0
 8003366:	460c      	mov	r4, r1
 8003368:	4aa5      	ldr	r2, [pc, #660]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 800336a:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 800336e:	4ba4      	ldr	r3, [pc, #656]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 8003370:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	4ba1      	ldr	r3, [pc, #644]	; (80035fc <TM_GPS_INT_CheckTerm+0x628>)
 8003378:	fba3 1302 	umull	r1, r3, r3, r2
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	2164      	movs	r1, #100	; 0x64
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8003604 <TM_GPS_INT_CheckTerm+0x630>
 8003392:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003396:	ee16 0a90 	vmov	r0, s13
 800339a:	f7fd f8e5 	bl	8000568 <__aeabi_f2d>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4620      	mov	r0, r4
 80033a4:	4629      	mov	r1, r5
 80033a6:	f7fc ff81 	bl	80002ac <__adddf3>
 80033aa:	4603      	mov	r3, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	4a94      	ldr	r2, [pc, #592]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 80033b0:	e9c2 3402 	strd	r3, r4, [r2, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	3301      	adds	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	4a8e      	ldr	r2, [pc, #568]	; (80035f8 <TM_GPS_INT_CheckTerm+0x624>)
 80033be:	4413      	add	r3, r2
 80033c0:	f107 0208 	add.w	r2, r7, #8
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fcfb 	bl	8003dc2 <TM_GPS_INT_Atoi>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd f8a6 	bl	8000524 <__aeabi_ui2d>
 80033d8:	4604      	mov	r4, r0
 80033da:	460d      	mov	r5, r1
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	4619      	mov	r1, r3
 80033e0:	200a      	movs	r0, #10
 80033e2:	f000 fd1b 	bl	8003e1c <TM_GPS_INT_Pow>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f89b 	bl	8000524 <__aeabi_ui2d>
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	4b85      	ldr	r3, [pc, #532]	; (8003608 <TM_GPS_INT_CheckTerm+0x634>)
 80033f4:	f7fd f910 	bl	8000618 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fd fa34 	bl	800086c <__aeabi_ddiv>
 8003404:	4603      	mov	r3, r0
 8003406:	460c      	mov	r4, r1
 8003408:	4618      	mov	r0, r3
 800340a:	4621      	mov	r1, r4
 800340c:	4b7c      	ldr	r3, [pc, #496]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 800340e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003412:	461a      	mov	r2, r3
 8003414:	4623      	mov	r3, r4
 8003416:	f7fc ff49 	bl	80002ac <__adddf3>
 800341a:	4603      	mov	r3, r0
 800341c:	460c      	mov	r4, r1
 800341e:	4a78      	ldr	r2, [pc, #480]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 8003420:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 8003424:	4b79      	ldr	r3, [pc, #484]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	4a77      	ldr	r2, [pc, #476]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 800342e:	6013      	str	r3, [r2, #0]
			break;
 8003430:	e34b      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 8003432:	4a71      	ldr	r2, [pc, #452]	; (80035f8 <TM_GPS_INT_CheckTerm+0x624>)
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	2a57      	cmp	r2, #87	; 0x57
 8003438:	d108      	bne.n	800344c <TM_GPS_INT_CheckTerm+0x478>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 800343a:	4a71      	ldr	r2, [pc, #452]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 800343c:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8003440:	460b      	mov	r3, r1
 8003442:	f082 4400 	eor.w	r4, r2, #2147483648	; 0x80000000
 8003446:	4a6e      	ldr	r2, [pc, #440]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 8003448:	e9c2 3402 	strd	r3, r4, [r2, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 800344c:	4b6f      	ldr	r3, [pc, #444]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f043 0320 	orr.w	r3, r3, #32
 8003454:	4a6d      	ldr	r2, [pc, #436]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 8003456:	6013      	str	r3, [r2, #0]
			break;
 8003458:	e337      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800345a:	f107 0308 	add.w	r3, r7, #8
 800345e:	4619      	mov	r1, r3
 8003460:	4865      	ldr	r0, [pc, #404]	; (80035f8 <TM_GPS_INT_CheckTerm+0x624>)
 8003462:	f000 fcae 	bl	8003dc2 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4b65      	ldr	r3, [pc, #404]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 800346c:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 800346e:	4b67      	ldr	r3, [pc, #412]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	4a65      	ldr	r2, [pc, #404]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 8003478:	6013      	str	r3, [r2, #0]
			break;
 800347a:	e326      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800347c:	f107 0308 	add.w	r3, r7, #8
 8003480:	4619      	mov	r1, r3
 8003482:	485d      	ldr	r0, [pc, #372]	; (80035f8 <TM_GPS_INT_CheckTerm+0x624>)
 8003484:	f000 fc9d 	bl	8003dc2 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	4b5c      	ldr	r3, [pc, #368]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 800348e:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 8003490:	4b5e      	ldr	r3, [pc, #376]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	4a5c      	ldr	r2, [pc, #368]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 800349a:	6013      	str	r3, [r2, #0]
			break;
 800349c:	e315      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 800349e:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <TM_GPS_INT_CheckTerm+0x624>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b2d      	cmp	r3, #45	; 0x2d
 80034a4:	d156      	bne.n	8003554 <TM_GPS_INT_CheckTerm+0x580>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 80034a6:	f107 0308 	add.w	r3, r7, #8
 80034aa:	4619      	mov	r1, r3
 80034ac:	4858      	ldr	r0, [pc, #352]	; (8003610 <TM_GPS_INT_CheckTerm+0x63c>)
 80034ae:	f000 fc88 	bl	8003dc2 <TM_GPS_INT_Atoi>
 80034b2:	4603      	mov	r3, r0
 80034b4:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c0:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 80034c2:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	3301      	adds	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	3301      	adds	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	4a48      	ldr	r2, [pc, #288]	; (80035f8 <TM_GPS_INT_CheckTerm+0x624>)
 80034d6:	4413      	add	r3, r2
 80034d8:	f107 0208 	add.w	r2, r7, #8
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fc6f 	bl	8003dc2 <TM_GPS_INT_Atoi>
 80034e4:	4603      	mov	r3, r0
 80034e6:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd f81a 	bl	8000524 <__aeabi_ui2d>
 80034f0:	4604      	mov	r4, r0
 80034f2:	460d      	mov	r5, r1
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	4619      	mov	r1, r3
 80034f8:	200a      	movs	r0, #10
 80034fa:	f000 fc8f 	bl	8003e1c <TM_GPS_INT_Pow>
 80034fe:	4603      	mov	r3, r0
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd f80f 	bl	8000524 <__aeabi_ui2d>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4620      	mov	r0, r4
 800350c:	4629      	mov	r1, r5
 800350e:	f7fd f9ad 	bl	800086c <__aeabi_ddiv>
 8003512:	4603      	mov	r3, r0
 8003514:	460c      	mov	r4, r1
 8003516:	4625      	mov	r5, r4
 8003518:	461c      	mov	r4, r3
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd f822 	bl	8000568 <__aeabi_f2d>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4620      	mov	r0, r4
 800352a:	4629      	mov	r1, r5
 800352c:	f7fc febe 	bl	80002ac <__adddf3>
 8003530:	4603      	mov	r3, r0
 8003532:	460c      	mov	r4, r1
 8003534:	4618      	mov	r0, r3
 8003536:	4621      	mov	r1, r4
 8003538:	f7fd fb66 	bl	8000c08 <__aeabi_d2f>
 800353c:	4602      	mov	r2, r0
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 8003540:	611a      	str	r2, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 8003542:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 8003544:	edd3 7a04 	vldr	s15, [r3, #16]
 8003548:	eef1 7a67 	vneg.f32	s15, s15
 800354c:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 800354e:	edc3 7a04 	vstr	s15, [r3, #16]
 8003552:	e04a      	b.n	80035ea <TM_GPS_INT_CheckTerm+0x616>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003554:	f107 0308 	add.w	r3, r7, #8
 8003558:	4619      	mov	r1, r3
 800355a:	4827      	ldr	r0, [pc, #156]	; (80035f8 <TM_GPS_INT_CheckTerm+0x624>)
 800355c:	f000 fc31 	bl	8003dc2 <TM_GPS_INT_Atoi>
 8003560:	4603      	mov	r3, r0
 8003562:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 8003570:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	3301      	adds	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <TM_GPS_INT_CheckTerm+0x624>)
 800357e:	4413      	add	r3, r2
 8003580:	f107 0208 	add.w	r2, r7, #8
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fc1b 	bl	8003dc2 <TM_GPS_INT_Atoi>
 800358c:	4603      	mov	r3, r0
 800358e:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc ffc6 	bl	8000524 <__aeabi_ui2d>
 8003598:	4604      	mov	r4, r0
 800359a:	460d      	mov	r5, r1
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	4619      	mov	r1, r3
 80035a0:	200a      	movs	r0, #10
 80035a2:	f000 fc3b 	bl	8003e1c <TM_GPS_INT_Pow>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc ffbb 	bl	8000524 <__aeabi_ui2d>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4620      	mov	r0, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	f7fd f959 	bl	800086c <__aeabi_ddiv>
 80035ba:	4603      	mov	r3, r0
 80035bc:	460c      	mov	r4, r1
 80035be:	4625      	mov	r5, r4
 80035c0:	461c      	mov	r4, r3
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fc ffce 	bl	8000568 <__aeabi_f2d>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4620      	mov	r0, r4
 80035d2:	4629      	mov	r1, r5
 80035d4:	f7fc fe6a 	bl	80002ac <__adddf3>
 80035d8:	4603      	mov	r3, r0
 80035da:	460c      	mov	r4, r1
 80035dc:	4618      	mov	r0, r3
 80035de:	4621      	mov	r1, r4
 80035e0:	f7fd fb12 	bl	8000c08 <__aeabi_d2f>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <TM_GPS_INT_CheckTerm+0x62c>)
 80035e8:	611a      	str	r2, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f043 0310 	orr.w	r3, r3, #16
 80035f2:	4a06      	ldr	r2, [pc, #24]	; (800360c <TM_GPS_INT_CheckTerm+0x638>)
 80035f4:	6013      	str	r3, [r2, #0]
			break;
 80035f6:	e268      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
 80035f8:	20000414 	.word	0x20000414
 80035fc:	51eb851f 	.word	0x51eb851f
 8003600:	20000430 	.word	0x20000430
 8003604:	42700000 	.word	0x42700000
 8003608:	404e0000 	.word	0x404e0000
 800360c:	20000428 	.word	0x20000428
 8003610:	20000415 	.word	0x20000415
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003614:	f107 0308 	add.w	r3, r7, #8
 8003618:	4619      	mov	r1, r3
 800361a:	48c2      	ldr	r0, [pc, #776]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 800361c:	f000 fbd1 	bl	8003dc2 <TM_GPS_INT_Atoi>
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	4bc0      	ldr	r3, [pc, #768]	; (8003928 <TM_GPS_INT_CheckTerm+0x954>)
 8003628:	fba3 1302 	umull	r1, r3, r3, r2
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	2164      	movs	r1, #100	; 0x64
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	b2da      	uxtb	r2, r3
 8003638:	4bbc      	ldr	r3, [pc, #752]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 800363a:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003646:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8003930 <TM_GPS_INT_CheckTerm+0x95c>
 800364a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800364e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003652:	ee17 2a90 	vmov	r2, s15
 8003656:	4bb4      	ldr	r3, [pc, #720]	; (8003928 <TM_GPS_INT_CheckTerm+0x954>)
 8003658:	fb83 1302 	smull	r1, r3, r3, r2
 800365c:	1159      	asrs	r1, r3, #5
 800365e:	17d3      	asrs	r3, r2, #31
 8003660:	1acb      	subs	r3, r1, r3
 8003662:	2164      	movs	r1, #100	; 0x64
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4baf      	ldr	r3, [pc, #700]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 800366e:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367a:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003934 <TM_GPS_INT_CheckTerm+0x960>
 800367e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003686:	ee17 2a90 	vmov	r2, s15
 800368a:	4ba7      	ldr	r3, [pc, #668]	; (8003928 <TM_GPS_INT_CheckTerm+0x954>)
 800368c:	fb83 1302 	smull	r1, r3, r3, r2
 8003690:	1159      	asrs	r1, r3, #5
 8003692:	17d3      	asrs	r3, r2, #31
 8003694:	1acb      	subs	r3, r1, r3
 8003696:	2164      	movs	r1, #100	; 0x64
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4ba2      	ldr	r3, [pc, #648]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 80036a2:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	3301      	adds	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	4a9d      	ldr	r2, [pc, #628]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 80036ae:	4413      	add	r3, r2
 80036b0:	f107 0208 	add.w	r2, r7, #8
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fb83 	bl	8003dc2 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	b29a      	uxth	r2, r3
 80036c0:	4b9a      	ldr	r3, [pc, #616]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 80036c2:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 80036c4:	4b9c      	ldr	r3, [pc, #624]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036cc:	4a9a      	ldr	r2, [pc, #616]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 80036ce:	6013      	str	r3, [r2, #0]
			break;
 80036d0:	e1fb      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80036d2:	f107 0308 	add.w	r3, r7, #8
 80036d6:	4619      	mov	r1, r3
 80036d8:	4892      	ldr	r0, [pc, #584]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 80036da:	f000 fb72 	bl	8003dc2 <TM_GPS_INT_Atoi>
 80036de:	4603      	mov	r3, r0
 80036e0:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	ee07 3a90 	vmov	s15, r3
 80036e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ec:	4b8f      	ldr	r3, [pc, #572]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 80036ee:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	3301      	adds	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	4a8a      	ldr	r2, [pc, #552]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 80036fc:	4413      	add	r3, r2
 80036fe:	f107 0208 	add.w	r2, r7, #8
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fb5c 	bl	8003dc2 <TM_GPS_INT_Atoi>
 800370a:	4603      	mov	r3, r0
 800370c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003718:	ee17 0a90 	vmov	r0, s15
 800371c:	f7fc ff24 	bl	8000568 <__aeabi_f2d>
 8003720:	4604      	mov	r4, r0
 8003722:	460d      	mov	r5, r1
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	4619      	mov	r1, r3
 8003728:	200a      	movs	r0, #10
 800372a:	f000 fb77 	bl	8003e1c <TM_GPS_INT_Pow>
 800372e:	4603      	mov	r3, r0
 8003730:	4618      	mov	r0, r3
 8003732:	f7fc fef7 	bl	8000524 <__aeabi_ui2d>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4620      	mov	r0, r4
 800373c:	4629      	mov	r1, r5
 800373e:	f7fd f895 	bl	800086c <__aeabi_ddiv>
 8003742:	4603      	mov	r3, r0
 8003744:	460c      	mov	r4, r1
 8003746:	4618      	mov	r0, r3
 8003748:	4621      	mov	r1, r4
 800374a:	f7fd fa5d 	bl	8000c08 <__aeabi_d2f>
 800374e:	ee07 0a10 	vmov	s14, r0
 8003752:	4b76      	ldr	r3, [pc, #472]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 8003754:	edd3 7a08 	vldr	s15, [r3, #32]
 8003758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375c:	4b73      	ldr	r3, [pc, #460]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 800375e:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 8003762:	4b75      	ldr	r3, [pc, #468]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	4a73      	ldr	r2, [pc, #460]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 800376c:	6013      	str	r3, [r2, #0]
			break;
 800376e:	e1ac      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003770:	f107 0308 	add.w	r3, r7, #8
 8003774:	4619      	mov	r1, r3
 8003776:	486b      	ldr	r0, [pc, #428]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 8003778:	f000 fb23 	bl	8003dc2 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <TM_GPS_INT_CheckTerm+0x954>)
 8003780:	fba3 1302 	umull	r1, r3, r3, r2
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	2164      	movs	r1, #100	; 0x64
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b66      	ldr	r3, [pc, #408]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 8003792:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003930 <TM_GPS_INT_CheckTerm+0x95c>
 80037a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037aa:	ee17 2a90 	vmov	r2, s15
 80037ae:	4b5e      	ldr	r3, [pc, #376]	; (8003928 <TM_GPS_INT_CheckTerm+0x954>)
 80037b0:	fb83 1302 	smull	r1, r3, r3, r2
 80037b4:	1159      	asrs	r1, r3, #5
 80037b6:	17d3      	asrs	r3, r2, #31
 80037b8:	1acb      	subs	r3, r1, r3
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b59      	ldr	r3, [pc, #356]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 80037c6:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003934 <TM_GPS_INT_CheckTerm+0x960>
 80037d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037de:	ee17 2a90 	vmov	r2, s15
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <TM_GPS_INT_CheckTerm+0x954>)
 80037e4:	fb83 1302 	smull	r1, r3, r3, r2
 80037e8:	1159      	asrs	r1, r3, #5
 80037ea:	17d3      	asrs	r3, r2, #31
 80037ec:	1acb      	subs	r3, r1, r3
 80037ee:	2164      	movs	r1, #100	; 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b4c      	ldr	r3, [pc, #304]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 80037fa:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 80037fc:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003804:	4a4c      	ldr	r2, [pc, #304]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 8003806:	6013      	str	r3, [r2, #0]
			break;
 8003808:	e15f      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 800380a:	4b46      	ldr	r3, [pc, #280]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b41      	cmp	r3, #65	; 0x41
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 800381c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 8003820:	4b45      	ldr	r3, [pc, #276]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003828:	4a43      	ldr	r2, [pc, #268]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 800382a:	6013      	str	r3, [r2, #0]
			break;
 800382c:	e14d      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	4619      	mov	r1, r3
 8003834:	483b      	ldr	r0, [pc, #236]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 8003836:	f000 fac4 	bl	8003dc2 <TM_GPS_INT_Atoi>
 800383a:	4603      	mov	r3, r0
 800383c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003848:	4b38      	ldr	r3, [pc, #224]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 800384a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	3301      	adds	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	4a33      	ldr	r2, [pc, #204]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 8003858:	4413      	add	r3, r2
 800385a:	f107 0208 	add.w	r2, r7, #8
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f000 faae 	bl	8003dc2 <TM_GPS_INT_Atoi>
 8003866:	4603      	mov	r3, r0
 8003868:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	4619      	mov	r1, r3
 8003878:	200a      	movs	r0, #10
 800387a:	f000 facf 	bl	8003e1c <TM_GPS_INT_Pow>
 800387e:	ee07 0a90 	vmov	s15, r0
 8003882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003886:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800388a:	4b28      	ldr	r3, [pc, #160]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 800388c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 8003896:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 800389a:	4b27      	ldr	r3, [pc, #156]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	4a25      	ldr	r2, [pc, #148]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 80038a4:	6013      	str	r3, [r2, #0]
			break;
 80038a6:	e110      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	4619      	mov	r1, r3
 80038ae:	481d      	ldr	r0, [pc, #116]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 80038b0:	f000 fa87 	bl	8003dc2 <TM_GPS_INT_Atoi>
 80038b4:	4603      	mov	r3, r0
 80038b6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 80038c4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	3301      	adds	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <TM_GPS_INT_CheckTerm+0x950>)
 80038d2:	4413      	add	r3, r2
 80038d4:	f107 0208 	add.w	r2, r7, #8
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fa71 	bl	8003dc2 <TM_GPS_INT_Atoi>
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	4619      	mov	r1, r3
 80038f2:	200a      	movs	r0, #10
 80038f4:	f000 fa92 	bl	8003e1c <TM_GPS_INT_Pow>
 80038f8:	ee07 0a90 	vmov	s15, r0
 80038fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003900:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 8003906:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800390a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <TM_GPS_INT_CheckTerm+0x958>)
 8003910:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800391c:	4a06      	ldr	r2, [pc, #24]	; (8003938 <TM_GPS_INT_CheckTerm+0x964>)
 800391e:	6013      	str	r3, [r2, #0]
			break;
 8003920:	e0d3      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
 8003922:	bf00      	nop
 8003924:	20000414 	.word	0x20000414
 8003928:	51eb851f 	.word	0x51eb851f
 800392c:	20000430 	.word	0x20000430
 8003930:	3c23d70a 	.word	0x3c23d70a
 8003934:	38d1b717 	.word	0x38d1b717
 8003938:	20000428 	.word	0x20000428
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800393c:	f107 0308 	add.w	r3, r7, #8
 8003940:	4619      	mov	r1, r3
 8003942:	48af      	ldr	r0, [pc, #700]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003944:	f000 fa3d 	bl	8003dc2 <TM_GPS_INT_Atoi>
 8003948:	4603      	mov	r3, r0
 800394a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003956:	4bab      	ldr	r3, [pc, #684]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003958:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	3301      	adds	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	4aa6      	ldr	r2, [pc, #664]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003966:	4413      	add	r3, r2
 8003968:	f107 0208 	add.w	r2, r7, #8
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fa27 	bl	8003dc2 <TM_GPS_INT_Atoi>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	4619      	mov	r1, r3
 8003986:	200a      	movs	r0, #10
 8003988:	f000 fa48 	bl	8003e1c <TM_GPS_INT_Pow>
 800398c:	ee07 0a90 	vmov	s15, r0
 8003990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003994:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003998:	4b9a      	ldr	r3, [pc, #616]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 800399a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800399e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a2:	4b98      	ldr	r3, [pc, #608]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 80039a4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 80039a8:	4b97      	ldr	r3, [pc, #604]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039b0:	4a95      	ldr	r2, [pc, #596]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 80039b2:	6013      	str	r3, [r2, #0]
			break;
 80039b4:	e089      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	4619      	mov	r1, r3
 80039bc:	4890      	ldr	r0, [pc, #576]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 80039be:	f000 fa00 	bl	8003dc2 <TM_GPS_INT_Atoi>
 80039c2:	4603      	mov	r3, r0
 80039c4:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	ee07 3a90 	vmov	s15, r3
 80039cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d0:	4b8c      	ldr	r3, [pc, #560]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 80039d2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	3301      	adds	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	4a88      	ldr	r2, [pc, #544]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 80039e0:	4413      	add	r3, r2
 80039e2:	f107 0208 	add.w	r2, r7, #8
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f9ea 	bl	8003dc2 <TM_GPS_INT_Atoi>
 80039ee:	4603      	mov	r3, r0
 80039f0:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	ee07 3a90 	vmov	s15, r3
 80039f8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	4619      	mov	r1, r3
 8003a00:	200a      	movs	r0, #10
 8003a02:	f000 fa0b 	bl	8003e1c <TM_GPS_INT_Pow>
 8003a06:	ee07 0a90 	vmov	s15, r0
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0e:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003a12:	4b7c      	ldr	r3, [pc, #496]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a14:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a1e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 8003a22:	4b79      	ldr	r3, [pc, #484]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a2a:	4a77      	ldr	r2, [pc, #476]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 8003a2c:	6013      	str	r3, [r2, #0]
			break;
 8003a2e:	e04c      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003a30:	f107 0308 	add.w	r3, r7, #8
 8003a34:	4619      	mov	r1, r3
 8003a36:	4872      	ldr	r0, [pc, #456]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a38:	f000 f9c3 	bl	8003dc2 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 8003a46:	4b70      	ldr	r3, [pc, #448]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a4e:	4a6e      	ldr	r2, [pc, #440]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 8003a50:	6013      	str	r3, [r2, #0]
			break;
 8003a52:	e03a      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003a54:	f107 0308 	add.w	r3, r7, #8
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4869      	ldr	r0, [pc, #420]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a5c:	f000 f9b1 	bl	8003dc2 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <TM_GPS_INT_CheckTerm+0xc38>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	3b03      	subs	r3, #3
 8003a68:	b2d1      	uxtb	r1, r2
 8003a6a:	4a66      	ldr	r2, [pc, #408]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a6c:	4413      	add	r3, r2
 8003a6e:	460a      	mov	r2, r1
 8003a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 8003a74:	4b66      	ldr	r3, [pc, #408]	; (8003c10 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	4b64      	ldr	r3, [pc, #400]	; (8003c10 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003a7e:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 8003a80:	4b60      	ldr	r3, [pc, #384]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a82:	7d1a      	ldrb	r2, [r3, #20]
 8003a84:	4b62      	ldr	r3, [pc, #392]	; (8003c10 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d11d      	bne.n	8003ac8 <TM_GPS_INT_CheckTerm+0xaf4>
				ids_count = 0;						/* Reset count, we have all statements */
 8003a8c:	4b60      	ldr	r3, [pc, #384]	; (8003c10 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8003a92:	4b5d      	ldr	r3, [pc, #372]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9a:	4a5b      	ldr	r2, [pc, #364]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 8003a9c:	6013      	str	r3, [r2, #0]
			}
			break;
 8003a9e:	e013      	b.n	8003ac8 <TM_GPS_INT_CheckTerm+0xaf4>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003aa0:	f107 0308 	add.w	r3, r7, #8
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4856      	ldr	r0, [pc, #344]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003aa8:	f000 f98b 	bl	8003dc2 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	4b54      	ldr	r3, [pc, #336]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 8003ab6:	4b54      	ldr	r3, [pc, #336]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abe:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <TM_GPS_INT_CheckTerm+0xc34>)
 8003ac0:	6013      	str	r3, [r2, #0]
			break;
 8003ac2:	e002      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
#endif
		default: 
			break;
 8003ac4:	bf00      	nop
 8003ac6:	e000      	b.n	8003aca <TM_GPS_INT_CheckTerm+0xaf6>
			break;
 8003ac8:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 8003aca:	4b52      	ldr	r3, [pc, #328]	; (8003c14 <TM_GPS_INT_CheckTerm+0xc40>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	f040 8090 	bne.w	8003bf4 <TM_GPS_INT_CheckTerm+0xc20>
		if (GPS_Term_Number == 1) {
 8003ad4:	4b4d      	ldr	r3, [pc, #308]	; (8003c0c <TM_GPS_INT_CheckTerm+0xc38>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d109      	bne.n	8003af0 <TM_GPS_INT_CheckTerm+0xb1c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4847      	ldr	r0, [pc, #284]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003ae4:	f000 f96d 	bl	8003dc2 <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b4a      	ldr	r3, [pc, #296]	; (8003c18 <TM_GPS_INT_CheckTerm+0xc44>)
 8003aee:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 8003af0:	4b46      	ldr	r3, [pc, #280]	; (8003c0c <TM_GPS_INT_CheckTerm+0xc38>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d109      	bne.n	8003b0c <TM_GPS_INT_CheckTerm+0xb38>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 8003af8:	f107 0308 	add.w	r3, r7, #8
 8003afc:	4619      	mov	r1, r3
 8003afe:	4840      	ldr	r0, [pc, #256]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003b00:	f000 f95f 	bl	8003dc2 <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b44      	ldr	r3, [pc, #272]	; (8003c1c <TM_GPS_INT_CheckTerm+0xc48>)
 8003b0a:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 8003b0c:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <TM_GPS_INT_CheckTerm+0xc38>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d96f      	bls.n	8003bf4 <TM_GPS_INT_CheckTerm+0xc20>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 8003b14:	f107 0308 	add.w	r3, r7, #8
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4839      	ldr	r0, [pc, #228]	; (8003c00 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003b1c:	f000 f951 	bl	8003dc2 <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 8003b20:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <TM_GPS_INT_CheckTerm+0xc38>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	3b04      	subs	r3, #4
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b2a:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 8003b2c:	4b3c      	ldr	r3, [pc, #240]	; (8003c20 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <TM_GPS_INT_CheckTerm+0xc50>)
 8003b38:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 8003b3a:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <TM_GPS_INT_CheckTerm+0xc48>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	333f      	adds	r3, #63	; 0x3f
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b33      	ldr	r3, [pc, #204]	; (8003c20 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b54:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 8003b56:	4b32      	ldr	r3, [pc, #200]	; (8003c20 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b17      	cmp	r3, #23
 8003b5c:	d84a      	bhi.n	8003bf4 <TM_GPS_INT_CheckTerm+0xc20>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8003b5e:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <TM_GPS_INT_CheckTerm+0xc50>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10e      	bne.n	8003b84 <TM_GPS_INT_CheckTerm+0xbb0>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	b2d0      	uxtb	r0, r2
 8003b70:	4a24      	ldr	r2, [pc, #144]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003b72:	460b      	mov	r3, r1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	440b      	add	r3, r1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3346      	adds	r3, #70	; 0x46
 8003b7e:	4602      	mov	r2, r0
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e037      	b.n	8003bf4 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 1) {
 8003b84:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <TM_GPS_INT_CheckTerm+0xc50>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d10e      	bne.n	8003baa <TM_GPS_INT_CheckTerm+0xbd6>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	b2d0      	uxtb	r0, r2
 8003b96:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003b98:	460b      	mov	r3, r1
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	440b      	add	r3, r1
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3347      	adds	r3, #71	; 0x47
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	e024      	b.n	8003bf4 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 2) {
 8003baa:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <TM_GPS_INT_CheckTerm+0xc50>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d10e      	bne.n	8003bd0 <TM_GPS_INT_CheckTerm+0xbfc>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	b290      	uxth	r0, r2
 8003bbc:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	440b      	add	r3, r1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3348      	adds	r3, #72	; 0x48
 8003bca:	4602      	mov	r2, r0
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	e011      	b.n	8003bf4 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 3) {
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <TM_GPS_INT_CheckTerm+0xc50>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d10d      	bne.n	8003bf4 <TM_GPS_INT_CheckTerm+0xc20>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	4619      	mov	r1, r3
 8003be0:	b2d0      	uxtb	r0, r2
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <TM_GPS_INT_CheckTerm+0xc30>)
 8003be4:	460b      	mov	r3, r1
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	440b      	add	r3, r1
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	334a      	adds	r3, #74	; 0x4a
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	ecbd 8b02 	vpop	{d8}
 8003bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000414 	.word	0x20000414
 8003c04:	20000430 	.word	0x20000430
 8003c08:	20000428 	.word	0x20000428
 8003c0c:	20000423 	.word	0x20000423
 8003c10:	20000567 	.word	0x20000567
 8003c14:	20000000 	.word	0x20000000
 8003c18:	20000563 	.word	0x20000563
 8003c1c:	20000564 	.word	0x20000564
 8003c20:	20000565 	.word	0x20000565
 8003c24:	20000566 	.word	0x20000566

08003c28 <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f939 	bl	8003ea8 <TM_GPS_INT_FlagsOk>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 808d 	beq.w	8003d58 <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <TM_GPS_INT_Return+0x158>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 8003c44:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003c46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003c50:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003c52:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8003c5c:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003c5e:	7d1a      	ldrb	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 8003c64:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003c66:	7d5a      	ldrb	r2, [r3, #21]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 8003c6c:	4b45      	ldr	r3, [pc, #276]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a43      	ldr	r2, [pc, #268]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003c78:	3316      	adds	r3, #22
 8003c7a:	3216      	adds	r2, #22
 8003c7c:	6811      	ldr	r1, [r2, #0]
 8003c7e:	6019      	str	r1, [r3, #0]
 8003c80:	8892      	ldrh	r2, [r2, #4]
 8003c82:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 8003c84:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003c86:	6a1a      	ldr	r2, [r3, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3d      	ldr	r2, [pc, #244]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003c90:	331c      	adds	r3, #28
 8003c92:	321c      	adds	r2, #28
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	4611      	mov	r1, r2
 8003c98:	8019      	strh	r1, [r3, #0]
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	0c12      	lsrs	r2, r2, #16
 8003c9e:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 8003ca0:	4b38      	ldr	r3, [pc, #224]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003ca2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 8003cac:	4b35      	ldr	r3, [pc, #212]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 8003cb4:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 8003cbc:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 8003cc4:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8003ccc:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003cce:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e00d      	b.n	8003cfa <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	4928      	ldr	r1, [pc, #160]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	460a      	mov	r2, r1
 8003cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b0b      	cmp	r3, #11
 8003cfe:	d9ee      	bls.n	8003cde <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 8003d00:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003d02:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]
 8003d10:	e019      	b.n	8003d46 <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	7bf9      	ldrb	r1, [r7, #15]
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	440b      	add	r3, r1
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	4403      	add	r3, r0
 8003d22:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8003d26:	4917      	ldr	r1, [pc, #92]	; (8003d84 <TM_GPS_INT_Return+0x15c>)
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	440b      	add	r3, r1
 8003d32:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8003d36:	4603      	mov	r3, r0
 8003d38:	6811      	ldr	r1, [r2, #0]
 8003d3a:	6019      	str	r1, [r3, #0]
 8003d3c:	8892      	ldrh	r2, [r2, #4]
 8003d3e:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	3301      	adds	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b17      	cmp	r3, #23
 8003d4a:	d9e2      	bls.n	8003d12 <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003d54:	2300      	movs	r3, #0
 8003d56:	e00e      	b.n	8003d76 <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <TM_GPS_INT_Return+0x158>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e004      	b.n	8003d76 <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003d74:	2301      	movs	r3, #1
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd90      	pop	{r4, r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000558 	.word	0x20000558
 8003d84:	20000430 	.word	0x20000430

08003d88 <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
	while (*str) {
 8003d92:	e00b      	b.n	8003dac <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	603a      	str	r2, [r7, #0]
 8003d9a:	781a      	ldrb	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	6079      	str	r1, [r7, #4]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e004      	b.n	8003db6 <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ef      	bne.n	8003d94 <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 8003db4:	2301      	movs	r3, #1
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 8003dd6:	e012      	b.n	8003dfe <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4619      	mov	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	440b      	add	r3, r1
 8003df0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	601a      	str	r2, [r3, #0]
		count++;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b2f      	cmp	r3, #47	; 0x2f
 8003e04:	d903      	bls.n	8003e0e <TM_GPS_INT_Atoi+0x4c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b39      	cmp	r3, #57	; 0x39
 8003e0c:	d9e4      	bls.n	8003dd8 <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	460a      	mov	r2, r1
 8003e26:	71fb      	strb	r3, [r7, #7]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003e30:	e004      	b.n	8003e3c <TM_GPS_INT_Pow+0x20>
		ret *= x;
 8003e32:	79fa      	ldrb	r2, [r7, #7]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003e3c:	79bb      	ldrb	r3, [r7, #6]
 8003e3e:	1e5a      	subs	r2, r3, #1
 8003e40:	71ba      	strb	r2, [r7, #6]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f5      	bne.n	8003e32 <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 8003e46:	68fb      	ldr	r3, [r7, #12]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	2b2f      	cmp	r3, #47	; 0x2f
 8003e62:	d906      	bls.n	8003e72 <TM_GPS_INT_Hex2Dec+0x1e>
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	2b39      	cmp	r3, #57	; 0x39
 8003e68:	d803      	bhi.n	8003e72 <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	3b30      	subs	r3, #48	; 0x30
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	e014      	b.n	8003e9c <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d906      	bls.n	8003e86 <TM_GPS_INT_Hex2Dec+0x32>
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	2b46      	cmp	r3, #70	; 0x46
 8003e7c:	d803      	bhi.n	8003e86 <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	3b37      	subs	r3, #55	; 0x37
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	e00a      	b.n	8003e9c <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	2b60      	cmp	r3, #96	; 0x60
 8003e8a:	d906      	bls.n	8003e9a <TM_GPS_INT_Hex2Dec+0x46>
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	2b66      	cmp	r3, #102	; 0x66
 8003e90:	d803      	bhi.n	8003e9a <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	3b57      	subs	r3, #87	; 0x57
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	e000      	b.n	8003e9c <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 8003eb0:	4b12      	ldr	r3, [pc, #72]	; (8003efc <TM_GPS_INT_FlagsOk+0x54>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <TM_GPS_INT_FlagsOk+0x58>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d118      	bne.n	8003eee <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	e00d      	b.n	8003ede <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	333e      	adds	r3, #62	; 0x3e
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	7ddb      	ldrb	r3, [r3, #23]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e00b      	b.n	8003ef0 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	3301      	adds	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d3eb      	bcc.n	8003ec2 <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	20000428 	.word	0x20000428
 8003f00:	2000042c 	.word	0x2000042c

08003f04 <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <TM_GPS_INT_ClearFlags+0x44>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	e00a      	b.n	8003f2e <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	333e      	adds	r3, #62	; 0x3e
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3ee      	bcc.n	8003f18 <TM_GPS_INT_ClearFlags+0x14>
	}
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000428 	.word	0x20000428

08003f4c <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 8003f54:	4baf      	ldr	r3, [pc, #700]	; (8004214 <TM_GPS_INT_CheckEmpty+0x2c8>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f040 8151 	bne.w	8004200 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003f5e:	4bae      	ldr	r3, [pc, #696]	; (8004218 <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	015b      	lsls	r3, r3, #5
 8003f64:	4aad      	ldr	r2, [pc, #692]	; (800421c <TM_GPS_INT_CheckEmpty+0x2d0>)
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	2b62      	cmp	r3, #98	; 0x62
 8003f6e:	f200 8149 	bhi.w	8004204 <TM_GPS_INT_CheckEmpty+0x2b8>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <TM_GPS_INT_CheckEmpty+0x2c>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08004167 	.word	0x08004167
 8003f7c:	08004105 	.word	0x08004105
 8003f80:	08004113 	.word	0x08004113
 8003f84:	08004121 	.word	0x08004121
 8003f88:	0800412f 	.word	0x0800412f
 8003f8c:	0800414b 	.word	0x0800414b
 8003f90:	0800413d 	.word	0x0800413d
 8003f94:	08004205 	.word	0x08004205
 8003f98:	08004159 	.word	0x08004159
 8003f9c:	08004205 	.word	0x08004205
 8003fa0:	08004205 	.word	0x08004205
 8003fa4:	08004205 	.word	0x08004205
 8003fa8:	08004205 	.word	0x08004205
 8003fac:	08004205 	.word	0x08004205
 8003fb0:	08004205 	.word	0x08004205
 8003fb4:	08004205 	.word	0x08004205
 8003fb8:	08004205 	.word	0x08004205
 8003fbc:	08004205 	.word	0x08004205
 8003fc0:	08004205 	.word	0x08004205
 8003fc4:	08004205 	.word	0x08004205
 8003fc8:	08004205 	.word	0x08004205
 8003fcc:	08004205 	.word	0x08004205
 8003fd0:	08004205 	.word	0x08004205
 8003fd4:	08004205 	.word	0x08004205
 8003fd8:	08004205 	.word	0x08004205
 8003fdc:	08004205 	.word	0x08004205
 8003fe0:	08004205 	.word	0x08004205
 8003fe4:	08004205 	.word	0x08004205
 8003fe8:	08004205 	.word	0x08004205
 8003fec:	08004205 	.word	0x08004205
 8003ff0:	08004205 	.word	0x08004205
 8003ff4:	08004205 	.word	0x08004205
 8003ff8:	08004205 	.word	0x08004205
 8003ffc:	08004191 	.word	0x08004191
 8004000:	08004205 	.word	0x08004205
 8004004:	08004205 	.word	0x08004205
 8004008:	08004205 	.word	0x08004205
 800400c:	08004205 	.word	0x08004205
 8004010:	08004175 	.word	0x08004175
 8004014:	0800419f 	.word	0x0800419f
 8004018:	08004183 	.word	0x08004183
 800401c:	08004205 	.word	0x08004205
 8004020:	08004205 	.word	0x08004205
 8004024:	08004205 	.word	0x08004205
 8004028:	08004205 	.word	0x08004205
 800402c:	08004205 	.word	0x08004205
 8004030:	08004205 	.word	0x08004205
 8004034:	08004205 	.word	0x08004205
 8004038:	08004205 	.word	0x08004205
 800403c:	08004205 	.word	0x08004205
 8004040:	08004205 	.word	0x08004205
 8004044:	08004205 	.word	0x08004205
 8004048:	08004205 	.word	0x08004205
 800404c:	08004205 	.word	0x08004205
 8004050:	08004205 	.word	0x08004205
 8004054:	08004205 	.word	0x08004205
 8004058:	08004205 	.word	0x08004205
 800405c:	08004205 	.word	0x08004205
 8004060:	08004205 	.word	0x08004205
 8004064:	08004205 	.word	0x08004205
 8004068:	08004205 	.word	0x08004205
 800406c:	08004205 	.word	0x08004205
 8004070:	08004205 	.word	0x08004205
 8004074:	08004205 	.word	0x08004205
 8004078:	08004205 	.word	0x08004205
 800407c:	080041d7 	.word	0x080041d7
 8004080:	080041e5 	.word	0x080041e5
 8004084:	080041e5 	.word	0x080041e5
 8004088:	080041e5 	.word	0x080041e5
 800408c:	080041e5 	.word	0x080041e5
 8004090:	080041e5 	.word	0x080041e5
 8004094:	080041e5 	.word	0x080041e5
 8004098:	080041e5 	.word	0x080041e5
 800409c:	080041e5 	.word	0x080041e5
 80040a0:	080041e5 	.word	0x080041e5
 80040a4:	080041e5 	.word	0x080041e5
 80040a8:	080041e5 	.word	0x080041e5
 80040ac:	080041e5 	.word	0x080041e5
 80040b0:	080041bb 	.word	0x080041bb
 80040b4:	080041ad 	.word	0x080041ad
 80040b8:	080041c9 	.word	0x080041c9
 80040bc:	08004205 	.word	0x08004205
 80040c0:	08004205 	.word	0x08004205
 80040c4:	08004205 	.word	0x08004205
 80040c8:	08004205 	.word	0x08004205
 80040cc:	08004205 	.word	0x08004205
 80040d0:	08004205 	.word	0x08004205
 80040d4:	08004205 	.word	0x08004205
 80040d8:	08004205 	.word	0x08004205
 80040dc:	08004205 	.word	0x08004205
 80040e0:	08004205 	.word	0x08004205
 80040e4:	08004205 	.word	0x08004205
 80040e8:	08004205 	.word	0x08004205
 80040ec:	08004205 	.word	0x08004205
 80040f0:	08004205 	.word	0x08004205
 80040f4:	08004205 	.word	0x08004205
 80040f8:	08004205 	.word	0x08004205
 80040fc:	08004205 	.word	0x08004205
 8004100:	080041f3 	.word	0x080041f3
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 8004104:	4b46      	ldr	r3, [pc, #280]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	4a44      	ldr	r2, [pc, #272]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	e079      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 8004112:	4b43      	ldr	r3, [pc, #268]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800411a:	4a41      	ldr	r2, [pc, #260]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e072      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f043 0302 	orr.w	r3, r3, #2
 8004128:	4a3d      	ldr	r2, [pc, #244]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	e06b      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 800412e:	4b3c      	ldr	r3, [pc, #240]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f043 0320 	orr.w	r3, r3, #32
 8004136:	4a3a      	ldr	r2, [pc, #232]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e064      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 800413c:	4b38      	ldr	r3, [pc, #224]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	4a36      	ldr	r2, [pc, #216]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e05d      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 800414a:	4b35      	ldr	r3, [pc, #212]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f043 0308 	orr.w	r3, r3, #8
 8004152:	4a33      	ldr	r2, [pc, #204]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e056      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 8004158:	4b31      	ldr	r3, [pc, #196]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f043 0310 	orr.w	r3, r3, #16
 8004160:	4a2f      	ldr	r2, [pc, #188]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e04f      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 8004166:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416e:	4a2c      	ldr	r2, [pc, #176]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e048      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 8004174:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	4a28      	ldr	r2, [pc, #160]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e041      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 8004182:	4b27      	ldr	r3, [pc, #156]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418a:	4a25      	ldr	r2, [pc, #148]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e03a      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 8004190:	4b23      	ldr	r3, [pc, #140]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e033      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e02c      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 80041ac:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041b4:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e025      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 80041ba:	4b19      	ldr	r3, [pc, #100]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e01e      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 80041c8:	4b15      	ldr	r3, [pc, #84]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041d0:	4a13      	ldr	r2, [pc, #76]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	e017      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e010      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 80041e4:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041ee:	6013      	str	r3, [r2, #0]
				break;
 80041f0:	e009      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e002      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 8004204:	bf00      	nop
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000424 	.word	0x20000424
 8004218:	20000000 	.word	0x20000000
 800421c:	20000423 	.word	0x20000423
 8004220:	20000428 	.word	0x20000428

08004224 <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 8004224:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8004234:	2300      	movs	r3, #0
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b3f      	cmp	r3, #63	; 0x3f
 800423c:	dc16      	bgt.n	800426c <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 800423e:	2201      	movs	r2, #1
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	4619      	mov	r1, r3
 8004248:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800424c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004250:	ea03 0b01 	and.w	fp, r3, r1
 8004254:	ea04 0c02 	and.w	ip, r4, r2
 8004258:	ea5b 030c 	orrs.w	r3, fp, ip
 800425c:	d002      	beq.n	8004264 <_bitCount64+0x40>
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	3301      	adds	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3301      	adds	r3, #1
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	e7e5      	b.n	8004238 <_bitCount64+0x14>
	}
	return cnt;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8004278:	4770      	bx	lr
	...

0800427c <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 8004284:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <SBUS_init+0x54>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 800428a:	2219      	movs	r2, #25
 800428c:	2100      	movs	r1, #0
 800428e:	4811      	ldr	r0, [pc, #68]	; (80042d4 <SBUS_init+0x58>)
 8004290:	f015 faf1 	bl	8019876 <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 8004294:	2219      	movs	r2, #25
 8004296:	2100      	movs	r1, #0
 8004298:	480f      	ldr	r0, [pc, #60]	; (80042d8 <SBUS_init+0x5c>)
 800429a:	f015 faec 	bl	8019876 <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	2100      	movs	r1, #0
 80042a2:	480e      	ldr	r0, [pc, #56]	; (80042dc <SBUS_init+0x60>)
 80042a4:	f015 fae7 	bl	8019876 <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 80042a8:	2224      	movs	r2, #36	; 0x24
 80042aa:	2100      	movs	r1, #0
 80042ac:	480c      	ldr	r0, [pc, #48]	; (80042e0 <SBUS_init+0x64>)
 80042ae:	f015 fae2 	bl	8019876 <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <SBUS_init+0x54>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <SBUS_init+0x54>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2219      	movs	r2, #25
 80042c0:	4904      	ldr	r1, [pc, #16]	; (80042d4 <SBUS_init+0x58>)
 80042c2:	4618      	mov	r0, r3
 80042c4:	f00b ffbe 	bl	8010244 <HAL_UART_Receive_DMA>
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	200005f0 	.word	0x200005f0
 80042d4:	200005f4 	.word	0x200005f4
 80042d8:	2000060d 	.word	0x2000060d
 80042dc:	20000626 	.word	0x20000626
 80042e0:	2000064a 	.word	0x2000064a

080042e4 <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 80042e4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 80042ec:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <SBUS_decoding+0xf4>)
 80042ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <SBUS_decoding+0xf4>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 8004302:	2300      	movs	r3, #0
 8004304:	e1f6      	b.n	80046f4 <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <SBUS_decoding+0xf4>)
 8004308:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800430c:	3301      	adds	r3, #1
 800430e:	b2da      	uxtb	r2, r3
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <SBUS_decoding+0xf4>)
 8004312:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8004316:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <SBUS_decoding+0xf4>)
 8004318:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <SBUS_decoding+0x4e>
 800432a:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <SBUS_decoding+0xf4>)
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 8004332:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <SBUS_decoding+0xf4>)
 8004334:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <SBUS_decoding+0x84>
 8004340:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <SBUS_decoding+0xf4>)
 8004342:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <SBUS_decoding+0xf4>)
 8004348:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800434c:	4618      	mov	r0, r3
 800434e:	2301      	movs	r3, #1
 8004350:	4083      	lsls	r3, r0
 8004352:	469b      	mov	fp, r3
 8004354:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8004358:	ea4b 0301 	orr.w	r3, fp, r1
 800435c:	ea4c 0402 	orr.w	r4, ip, r2
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <SBUS_decoding+0xf4>)
 8004362:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8004366:	e013      	b.n	8004390 <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <SBUS_decoding+0xf4>)
 800436a:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 800436e:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <SBUS_decoding+0xf4>)
 8004370:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004374:	4618      	mov	r0, r3
 8004376:	2301      	movs	r3, #1
 8004378:	4083      	lsls	r3, r0
 800437a:	43db      	mvns	r3, r3
 800437c:	469b      	mov	fp, r3
 800437e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8004382:	ea0b 0301 	and.w	r3, fp, r1
 8004386:	ea0c 0402 	and.w	r4, ip, r2
 800438a:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <SBUS_decoding+0xf4>)
 800438c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <SBUS_decoding+0xf4>)
 8004392:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004396:	4618      	mov	r0, r3
 8004398:	4621      	mov	r1, r4
 800439a:	f7ff ff43 	bl	8004224 <_bitCount64>
 800439e:	4603      	mov	r3, r0
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <SBUS_decoding+0xf4>)
 80043a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <SBUS_decoding+0xf4>)
 80043aa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80043ae:	2b14      	cmp	r3, #20
 80043b0:	d904      	bls.n	80043bc <SBUS_decoding+0xd8>
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <SBUS_decoding+0xf4>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80043ba:	e003      	b.n	80043c4 <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <SBUS_decoding+0xf4>)
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <SBUS_decoding+0xf4>)
 80043c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <SBUS_decoding+0xf8>
 80043d2:	2300      	movs	r3, #0
 80043d4:	e18e      	b.n	80046f4 <SBUS_decoding+0x410>
 80043d6:	bf00      	nop
 80043d8:	200005f0 	.word	0x200005f0

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 80043dc:	4ba7      	ldr	r3, [pc, #668]	; (800467c <SBUS_decoding+0x398>)
 80043de:	7f9b      	ldrb	r3, [r3, #30]
 80043e0:	b21a      	sxth	r2, r3
 80043e2:	4ba6      	ldr	r3, [pc, #664]	; (800467c <SBUS_decoding+0x398>)
 80043e4:	7fdb      	ldrb	r3, [r3, #31]
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	4313      	orrs	r3, r2
 80043ec:	b21b      	sxth	r3, r3
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	4ba1      	ldr	r3, [pc, #644]	; (800467c <SBUS_decoding+0x398>)
 80043f8:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 80043fa:	4ba0      	ldr	r3, [pc, #640]	; (800467c <SBUS_decoding+0x398>)
 80043fc:	7fdb      	ldrb	r3, [r3, #31]
 80043fe:	10db      	asrs	r3, r3, #3
 8004400:	b21a      	sxth	r2, r3
 8004402:	4b9e      	ldr	r3, [pc, #632]	; (800467c <SBUS_decoding+0x398>)
 8004404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004408:	015b      	lsls	r3, r3, #5
 800440a:	b21b      	sxth	r3, r3
 800440c:	4313      	orrs	r3, r2
 800440e:	b21b      	sxth	r3, r3
 8004410:	b29b      	uxth	r3, r3
 8004412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004416:	b29a      	uxth	r2, r3
 8004418:	4b98      	ldr	r3, [pc, #608]	; (800467c <SBUS_decoding+0x398>)
 800441a:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 800441c:	4b97      	ldr	r3, [pc, #604]	; (800467c <SBUS_decoding+0x398>)
 800441e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004422:	119b      	asrs	r3, r3, #6
 8004424:	b21a      	sxth	r2, r3
 8004426:	4b95      	ldr	r3, [pc, #596]	; (800467c <SBUS_decoding+0x398>)
 8004428:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	b21b      	sxth	r3, r3
 8004430:	4313      	orrs	r3, r2
 8004432:	b21a      	sxth	r2, r3
 8004434:	4b91      	ldr	r3, [pc, #580]	; (800467c <SBUS_decoding+0x398>)
 8004436:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800443a:	029b      	lsls	r3, r3, #10
 800443c:	b21b      	sxth	r3, r3
 800443e:	4313      	orrs	r3, r2
 8004440:	b21b      	sxth	r3, r3
 8004442:	b29b      	uxth	r3, r3
 8004444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004448:	b29a      	uxth	r2, r3
 800444a:	4b8c      	ldr	r3, [pc, #560]	; (800467c <SBUS_decoding+0x398>)
 800444c:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 800444e:	4b8b      	ldr	r3, [pc, #556]	; (800467c <SBUS_decoding+0x398>)
 8004450:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004454:	105b      	asrs	r3, r3, #1
 8004456:	b21a      	sxth	r2, r3
 8004458:	4b88      	ldr	r3, [pc, #544]	; (800467c <SBUS_decoding+0x398>)
 800445a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800445e:	01db      	lsls	r3, r3, #7
 8004460:	b21b      	sxth	r3, r3
 8004462:	4313      	orrs	r3, r2
 8004464:	b21b      	sxth	r3, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800446c:	b29a      	uxth	r2, r3
 800446e:	4b83      	ldr	r3, [pc, #524]	; (800467c <SBUS_decoding+0x398>)
 8004470:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 8004472:	4b82      	ldr	r3, [pc, #520]	; (800467c <SBUS_decoding+0x398>)
 8004474:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004478:	111b      	asrs	r3, r3, #4
 800447a:	b21a      	sxth	r2, r3
 800447c:	4b7f      	ldr	r3, [pc, #508]	; (800467c <SBUS_decoding+0x398>)
 800447e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	b21b      	sxth	r3, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	b21b      	sxth	r3, r3
 800448a:	b29b      	uxth	r3, r3
 800448c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004490:	b29a      	uxth	r2, r3
 8004492:	4b7a      	ldr	r3, [pc, #488]	; (800467c <SBUS_decoding+0x398>)
 8004494:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 8004496:	4b79      	ldr	r3, [pc, #484]	; (800467c <SBUS_decoding+0x398>)
 8004498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800449c:	11db      	asrs	r3, r3, #7
 800449e:	b21a      	sxth	r2, r3
 80044a0:	4b76      	ldr	r3, [pc, #472]	; (800467c <SBUS_decoding+0x398>)
 80044a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	b21b      	sxth	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b21a      	sxth	r2, r3
 80044ae:	4b73      	ldr	r3, [pc, #460]	; (800467c <SBUS_decoding+0x398>)
 80044b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80044b4:	025b      	lsls	r3, r3, #9
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	4b6d      	ldr	r3, [pc, #436]	; (800467c <SBUS_decoding+0x398>)
 80044c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 80044ca:	4b6c      	ldr	r3, [pc, #432]	; (800467c <SBUS_decoding+0x398>)
 80044cc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80044d0:	109b      	asrs	r3, r3, #2
 80044d2:	b21a      	sxth	r2, r3
 80044d4:	4b69      	ldr	r3, [pc, #420]	; (800467c <SBUS_decoding+0x398>)
 80044d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80044da:	019b      	lsls	r3, r3, #6
 80044dc:	b21b      	sxth	r3, r3
 80044de:	4313      	orrs	r3, r2
 80044e0:	b21b      	sxth	r3, r3
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	4b64      	ldr	r3, [pc, #400]	; (800467c <SBUS_decoding+0x398>)
 80044ec:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 80044f0:	4b62      	ldr	r3, [pc, #392]	; (800467c <SBUS_decoding+0x398>)
 80044f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80044f6:	115b      	asrs	r3, r3, #5
 80044f8:	b21a      	sxth	r2, r3
 80044fa:	4b60      	ldr	r3, [pc, #384]	; (800467c <SBUS_decoding+0x398>)
 80044fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	b21b      	sxth	r3, r3
 8004504:	4313      	orrs	r3, r2
 8004506:	b21b      	sxth	r3, r3
 8004508:	b29b      	uxth	r3, r3
 800450a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800450e:	b29a      	uxth	r2, r3
 8004510:	4b5a      	ldr	r3, [pc, #360]	; (800467c <SBUS_decoding+0x398>)
 8004512:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 8004516:	4b59      	ldr	r3, [pc, #356]	; (800467c <SBUS_decoding+0x398>)
 8004518:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800451c:	b21a      	sxth	r2, r3
 800451e:	4b57      	ldr	r3, [pc, #348]	; (800467c <SBUS_decoding+0x398>)
 8004520:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	b21b      	sxth	r3, r3
 8004528:	4313      	orrs	r3, r2
 800452a:	b21b      	sxth	r3, r3
 800452c:	b29b      	uxth	r3, r3
 800452e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004532:	b29a      	uxth	r2, r3
 8004534:	4b51      	ldr	r3, [pc, #324]	; (800467c <SBUS_decoding+0x398>)
 8004536:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 800453a:	4b50      	ldr	r3, [pc, #320]	; (800467c <SBUS_decoding+0x398>)
 800453c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004540:	10db      	asrs	r3, r3, #3
 8004542:	b21a      	sxth	r2, r3
 8004544:	4b4d      	ldr	r3, [pc, #308]	; (800467c <SBUS_decoding+0x398>)
 8004546:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800454a:	015b      	lsls	r3, r3, #5
 800454c:	b21b      	sxth	r3, r3
 800454e:	4313      	orrs	r3, r2
 8004550:	b21b      	sxth	r3, r3
 8004552:	b29b      	uxth	r3, r3
 8004554:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004558:	b29a      	uxth	r2, r3
 800455a:	4b48      	ldr	r3, [pc, #288]	; (800467c <SBUS_decoding+0x398>)
 800455c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 8004560:	4b46      	ldr	r3, [pc, #280]	; (800467c <SBUS_decoding+0x398>)
 8004562:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004566:	119b      	asrs	r3, r3, #6
 8004568:	b21a      	sxth	r2, r3
 800456a:	4b44      	ldr	r3, [pc, #272]	; (800467c <SBUS_decoding+0x398>)
 800456c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	b21b      	sxth	r3, r3
 8004574:	4313      	orrs	r3, r2
 8004576:	b21a      	sxth	r2, r3
 8004578:	4b40      	ldr	r3, [pc, #256]	; (800467c <SBUS_decoding+0x398>)
 800457a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800457e:	029b      	lsls	r3, r3, #10
 8004580:	b21b      	sxth	r3, r3
 8004582:	4313      	orrs	r3, r2
 8004584:	b21b      	sxth	r3, r3
 8004586:	b29b      	uxth	r3, r3
 8004588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800458c:	b29a      	uxth	r2, r3
 800458e:	4b3b      	ldr	r3, [pc, #236]	; (800467c <SBUS_decoding+0x398>)
 8004590:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 8004594:	4b39      	ldr	r3, [pc, #228]	; (800467c <SBUS_decoding+0x398>)
 8004596:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800459a:	105b      	asrs	r3, r3, #1
 800459c:	b21a      	sxth	r2, r3
 800459e:	4b37      	ldr	r3, [pc, #220]	; (800467c <SBUS_decoding+0x398>)
 80045a0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80045a4:	01db      	lsls	r3, r3, #7
 80045a6:	b21b      	sxth	r3, r3
 80045a8:	4313      	orrs	r3, r2
 80045aa:	b21b      	sxth	r3, r3
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	4b31      	ldr	r3, [pc, #196]	; (800467c <SBUS_decoding+0x398>)
 80045b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 80045ba:	4b30      	ldr	r3, [pc, #192]	; (800467c <SBUS_decoding+0x398>)
 80045bc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80045c0:	111b      	asrs	r3, r3, #4
 80045c2:	b21a      	sxth	r2, r3
 80045c4:	4b2d      	ldr	r3, [pc, #180]	; (800467c <SBUS_decoding+0x398>)
 80045c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	b21b      	sxth	r3, r3
 80045ce:	4313      	orrs	r3, r2
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045d8:	b29a      	uxth	r2, r3
 80045da:	4b28      	ldr	r3, [pc, #160]	; (800467c <SBUS_decoding+0x398>)
 80045dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 80045e0:	4b26      	ldr	r3, [pc, #152]	; (800467c <SBUS_decoding+0x398>)
 80045e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80045e6:	11db      	asrs	r3, r3, #7
 80045e8:	b21a      	sxth	r2, r3
 80045ea:	4b24      	ldr	r3, [pc, #144]	; (800467c <SBUS_decoding+0x398>)
 80045ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	b21b      	sxth	r3, r3
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b21a      	sxth	r2, r3
 80045f8:	4b20      	ldr	r3, [pc, #128]	; (800467c <SBUS_decoding+0x398>)
 80045fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045fe:	025b      	lsls	r3, r3, #9
 8004600:	b21b      	sxth	r3, r3
 8004602:	4313      	orrs	r3, r2
 8004604:	b21b      	sxth	r3, r3
 8004606:	b29b      	uxth	r3, r3
 8004608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800460c:	b29a      	uxth	r2, r3
 800460e:	4b1b      	ldr	r3, [pc, #108]	; (800467c <SBUS_decoding+0x398>)
 8004610:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <SBUS_decoding+0x398>)
 8004616:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800461a:	109b      	asrs	r3, r3, #2
 800461c:	b21a      	sxth	r2, r3
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <SBUS_decoding+0x398>)
 8004620:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004624:	019b      	lsls	r3, r3, #6
 8004626:	b21b      	sxth	r3, r3
 8004628:	4313      	orrs	r3, r2
 800462a:	b21b      	sxth	r3, r3
 800462c:	b29b      	uxth	r3, r3
 800462e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004632:	b29a      	uxth	r2, r3
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <SBUS_decoding+0x398>)
 8004636:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <SBUS_decoding+0x398>)
 800463c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004640:	115b      	asrs	r3, r3, #5
 8004642:	b21a      	sxth	r2, r3
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <SBUS_decoding+0x398>)
 8004646:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	b21b      	sxth	r3, r3
 800464e:	4313      	orrs	r3, r2
 8004650:	b21b      	sxth	r3, r3
 8004652:	b29b      	uxth	r3, r3
 8004654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004658:	b29a      	uxth	r2, r3
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <SBUS_decoding+0x398>)
 800465c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <SBUS_decoding+0x398>)
 8004662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <SBUS_decoding+0x39c>
 800466e:	4b03      	ldr	r3, [pc, #12]	; (800467c <SBUS_decoding+0x398>)
 8004670:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8004678:	e007      	b.n	800468a <SBUS_decoding+0x3a6>
 800467a:	bf00      	nop
 800467c:	200005f0 	.word	0x200005f0
 8004680:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <SBUS_decoding+0x41c>)
 8004682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004686:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <SBUS_decoding+0x41c>)
 800468c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <SBUS_decoding+0x3c0>
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <SBUS_decoding+0x41c>)
 800469a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800469e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80046a2:	e004      	b.n	80046ae <SBUS_decoding+0x3ca>
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <SBUS_decoding+0x41c>)
 80046a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046aa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b11      	cmp	r3, #17
 80046b6:	dc1c      	bgt.n	80046f2 <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 80046b8:	4a11      	ldr	r2, [pc, #68]	; (8004700 <SBUS_decoding+0x41c>)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3318      	adds	r3, #24
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4413      	add	r3, r2
 80046c2:	88db      	ldrh	r3, [r3, #6]
 80046c4:	461a      	mov	r2, r3
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	da00      	bge.n	80046d2 <SBUS_decoding+0x3ee>
 80046d0:	3307      	adds	r3, #7
 80046d2:	10db      	asrs	r3, r3, #3
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80046da:	b299      	uxth	r1, r3
 80046dc:	4a08      	ldr	r2, [pc, #32]	; (8004700 <SBUS_decoding+0x41c>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	332c      	adds	r3, #44	; 0x2c
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	4413      	add	r3, r2
 80046e6:	460a      	mov	r2, r1
 80046e8:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3301      	adds	r3, #1
 80046ee:	607b      	str	r3, [r7, #4]
 80046f0:	e7df      	b.n	80046b2 <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 80046f2:	2301      	movs	r3, #1
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80046fe:	bf00      	nop
 8004700:	200005f0 	.word	0x200005f0

08004704 <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 800470a:	2300      	movs	r3, #0
 800470c:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 800470e:	4b37      	ldr	r3, [pc, #220]	; (80047ec <SBUS_uartRxCpltCallback+0xe8>)
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	4b35      	ldr	r3, [pc, #212]	; (80047ec <SBUS_uartRxCpltCallback+0xe8>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b18      	cmp	r3, #24
 800471a:	d862      	bhi.n	80047e2 <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 800471c:	4b33      	ldr	r3, [pc, #204]	; (80047ec <SBUS_uartRxCpltCallback+0xe8>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <SBUS_uartRxCpltCallback+0xec>)
 8004724:	4413      	add	r3, r2
 8004726:	791a      	ldrb	r2, [r3, #4]
 8004728:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <SBUS_uartRxCpltCallback+0xf0>)
 800472a:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 800472c:	4b32      	ldr	r3, [pc, #200]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d120      	bne.n	8004776 <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 8004734:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <SBUS_uartRxCpltCallback+0xf0>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b0f      	cmp	r3, #15
 800473a:	d118      	bne.n	800476e <SBUS_uartRxCpltCallback+0x6a>
 800473c:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <SBUS_uartRxCpltCallback+0xf8>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <SBUS_uartRxCpltCallback+0x4c>
 8004744:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <SBUS_uartRxCpltCallback+0xf8>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10e      	bne.n	800476e <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 8004750:	4b29      	ldr	r3, [pc, #164]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	4619      	mov	r1, r3
 8004756:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <SBUS_uartRxCpltCallback+0xf0>)
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <SBUS_uartRxCpltCallback+0xec>)
 800475c:	440b      	add	r3, r1
 800475e:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8004760:	4b25      	ldr	r3, [pc, #148]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e02e      	b.n	80047cc <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 800476e:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e02a      	b.n	80047cc <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 8004776:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b18      	cmp	r3, #24
 800477c:	d80d      	bhi.n	800479a <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	4619      	mov	r1, r3
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <SBUS_uartRxCpltCallback+0xf0>)
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <SBUS_uartRxCpltCallback+0xec>)
 800478a:	440b      	add	r3, r1
 800478c:	775a      	strb	r2, [r3, #29]
				_parserState++;
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	b2da      	uxtb	r2, r3
 8004796:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 8004798:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b19      	cmp	r3, #25
 80047a0:	d114      	bne.n	80047cc <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <SBUS_uartRxCpltCallback+0xf0>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <SBUS_uartRxCpltCallback+0xb2>
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <SBUS_uartRxCpltCallback+0xf0>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d107      	bne.n	80047c6 <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 80047bc:	f7ff fd92 	bl	80042e4 <SBUS_decoding>
 80047c0:	4603      	mov	r3, r0
 80047c2:	71fb      	strb	r3, [r7, #7]
 80047c4:	e002      	b.n	80047cc <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <SBUS_uartRxCpltCallback+0xf4>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <SBUS_uartRxCpltCallback+0xf0>)
 80047ce:	781a      	ldrb	r2, [r3, #0]
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <SBUS_uartRxCpltCallback+0xf8>)
 80047d2:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <SBUS_uartRxCpltCallback+0xe8>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <SBUS_uartRxCpltCallback+0xe8>)
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	e798      	b.n	8004714 <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 80047e2:	79fb      	ldrb	r3, [r7, #7]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000683 	.word	0x20000683
 80047f0:	200005f0 	.word	0x200005f0
 80047f4:	20000681 	.word	0x20000681
 80047f8:	20000680 	.word	0x20000680
 80047fc:	20000682 	.word	0x20000682

08004800 <SBUS_getChannel>:
		printf("%d \t", sbus.compRcValue[i]);
	}
	printf("\r\n");
}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	3b01      	subs	r3, #1
 800480e:	4a05      	ldr	r2, [pc, #20]	; (8004824 <SBUS_getChannel+0x24>)
 8004810:	332c      	adds	r3, #44	; 0x2c
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	885b      	ldrh	r3, [r3, #2]
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	200005f0 	.word	0x200005f0

08004828 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004832:	ed97 0a01 	vldr	s0, [r7, #4]
 8004836:	f013 ff8b 	bl	8018750 <asinf>
 800483a:	eef0 7a40 	vmov.f32	s15, s0
 800483e:	eeb0 0a67 	vmov.f32	s0, s15
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004852:	edc7 0a00 	vstr	s1, [r7]
 8004856:	edd7 0a00 	vldr	s1, [r7]
 800485a:	ed97 0a01 	vldr	s0, [r7, #4]
 800485e:	f013 ffcf 	bl	8018800 <atan2f>
 8004862:	eef0 7a40 	vmov.f32	s15, s0
 8004866:	eeb0 0a67 	vmov.f32	s0, s15
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	ed87 0a01 	vstr	s0, [r7, #4]
 800487a:	ed97 0a01 	vldr	s0, [r7, #4]
 800487e:	f013 fee5 	bl	801864c <cosf>
 8004882:	eef0 7a40 	vmov.f32	s15, s0
 8004886:	eeb0 0a67 	vmov.f32	s0, s15
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	ed87 0a01 	vstr	s0, [r7, #4]
 800489a:	ed97 0a01 	vldr	s0, [r7, #4]
 800489e:	f013 ff15 	bl	80186cc <sinf>
 80048a2:	eef0 7a40 	vmov.f32	s15, s0
 80048a6:	eeb0 0a67 	vmov.f32	s0, s15
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80048ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80048be:	f013 ffa1 	bl	8018804 <sqrtf>
 80048c2:	eef0 7a40 	vmov.f32	s15, s0
 80048c6:	eeb0 0a67 	vmov.f32	s0, s15
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 80048d0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80048d4:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80048d6:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <_ZL11microsecondv+0x40>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0b00 	mov.w	fp, #0
 80048e4:	f04f 0c00 	mov.w	ip, #0
 80048e8:	468c      	mov	ip, r1
 80048ea:	f04f 0b00 	mov.w	fp, #0
 80048ee:	4a09      	ldr	r2, [pc, #36]	; (8004914 <_ZL11microsecondv+0x44>)
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048f4:	4611      	mov	r1, r2
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	ea4b 0301 	orr.w	r3, fp, r1
 80048fe:	ea4c 0402 	orr.w	r4, ip, r2
}
 8004902:	4618      	mov	r0, r3
 8004904:	4621      	mov	r1, r4
 8004906:	46bd      	mov	sp, r7
 8004908:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000900 	.word	0x20000900
 8004914:	20005710 	.word	0x20005710

08004918 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:

class MsgBus {
public:
	MsgBus() = default;

    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel);
 8004918:	b4b0      	push	{r4, r5, r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800492e:	42a2      	cmp	r2, r4
 8004930:	bf08      	it	eq
 8004932:	4299      	cmpeq	r1, r3
 8004934:	d00b      	beq.n	800494e <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x36>
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4614      	mov	r4, r2
 800493c:	461d      	mov	r5, r3
 800493e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004942:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004946:	e884 0003 	stmia.w	r4, {r0, r1}
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x38>
 800494e:	2300      	movs	r3, #0
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bcb0      	pop	{r4, r5, r7}
 8004958:	4770      	bx	lr

0800495a <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
 800495a:	b4b0      	push	{r4, r5, r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	4614      	mov	r4, r2
 800496a:	461d      	mov	r5, r3
 800496c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800496e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004970:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004974:	e884 0003 	stmia.w	r4, {r0, r1}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bcb0      	pop	{r4, r5, r7}
 8004980:	4770      	bx	lr

08004982 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity);
 8004982:	b4b0      	push	{r4, r5, r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004998:	42a2      	cmp	r2, r4
 800499a:	bf08      	it	eq
 800499c:	4299      	cmpeq	r1, r3
 800499e:	d00c      	beq.n	80049ba <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x38>
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4615      	mov	r5, r2
 80049a6:	f103 0418 	add.w	r4, r3, #24
 80049aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x3a>
 80049ba:	2300      	movs	r3, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bcb0      	pop	{r4, r5, r7}
 80049c4:	4770      	bx	lr

080049c6 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
 80049c6:	b4b0      	push	{r4, r5, r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	f103 0418 	add.w	r4, r3, #24
 80049d8:	4615      	mov	r5, r2
 80049da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80049e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bcb0      	pop	{r4, r5, r7}
 80049ee:	4770      	bx	lr

080049f0 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag);
 80049f0:	b4b0      	push	{r4, r5, r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004a06:	42a2      	cmp	r2, r4
 8004a08:	bf08      	it	eq
 8004a0a:	4299      	cmpeq	r1, r3
 8004a0c:	d00c      	beq.n	8004a28 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x38>
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4615      	mov	r5, r2
 8004a14:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8004a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a20:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x3a>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bcb0      	pop	{r4, r5, r7}
 8004a32:	4770      	bx	lr

08004a34 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
 8004a34:	b4b0      	push	{r4, r5, r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8004a46:	4615      	mov	r5, r2
 8004a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a50:	e884 0003 	stmia.w	r4, {r0, r1}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bcb0      	pop	{r4, r5, r7}
 8004a5c:	4770      	bx	lr

08004a5e <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps);
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	3348      	adds	r3, #72	; 0x48
 8004a6e:	4611      	mov	r1, r2
 8004a70:	2248      	movs	r2, #72	; 0x48
 8004a72:	4618      	mov	r0, r3
 8004a74:	f014 fef4 	bl	8019860 <memcpy>
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer);
 8004a80:	b490      	push	{r4, r7}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8004a92:	4613      	mov	r3, r2
 8004a94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc90      	pop	{r4, r7}
 8004aa2:	4770      	bx	lr

08004aa4 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller);
 8004aa4:	b490      	push	{r4, r7}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc90      	pop	{r4, r7}
 8004ac6:	4770      	bx	lr

08004ac8 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude);
 8004ac8:	b4b0      	push	{r4, r5, r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8004ada:	4615      	mov	r5, r2
 8004adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ae8:	e884 0003 	stmia.w	r4, {r0, r1}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bcb0      	pop	{r4, r5, r7}
 8004af4:	4770      	bx	lr

08004af6 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel);
 8004af6:	b4b0      	push	{r4, r5, r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8004b08:	4615      	mov	r5, r2
 8004b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b12:	e884 0003 	stmia.w	r4, {r0, r1}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bcb0      	pop	{r4, r5, r7}
 8004b1e:	4770      	bx	lr

08004b20 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>:

    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag);
 8004b20:	b490      	push	{r4, r7}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 8004b36:	42a2      	cmp	r2, r4
 8004b38:	bf08      	it	eq
 8004b3a:	4299      	cmpeq	r1, r3
 8004b3c:	d008      	beq.n	8004b50 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x30>
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4614      	mov	r4, r2
 8004b44:	33f0      	adds	r3, #240	; 0xf0
 8004b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x32>
 8004b50:	2300      	movs	r3, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc90      	pop	{r4, r7}
 8004b5a:	4770      	bx	lr

08004b5c <_ZN2FC11SensorAccel8setAccelEfff>:
private:
    struct BodyAccel bodyAccel{};
};


void SensorAccel::setAccel(float x, float y, float z){
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b68:	edc7 0a01 	vstr	s1, [r7, #4]
 8004b6c:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004b70:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	d10d      	bne.n	8004b9a <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8004b7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8a:	d106      	bne.n	8004b9a <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8004b8c:	edd7 7a00 	vldr	s15, [r7]
 8004b90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d015      	beq.n	8004bc6 <_ZN2FC11SensorAccel8setAccelEfff+0x6a>
	this->bodyAccel.timestamp = microsecond();
 8004b9a:	f7ff fe99 	bl	80048d0 <_ZL11microsecondv>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	609a      	str	r2, [r3, #8]
	this->bodyAccel.xyz[1] = y;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]
	this->bodyAccel.xyz[2] = z;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4804      	ldr	r0, [pc, #16]	; (8004bd0 <_ZN2FC11SensorAccel8setAccelEfff+0x74>)
 8004bc0:	f7ff fecb 	bl	800495a <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
 8004bc4:	e000      	b.n	8004bc8 <_ZN2FC11SensorAccel8setAccelEfff+0x6c>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004bc6:	bf00      	nop
}
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd90      	pop	{r4, r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000008 	.word	0x20000008

08004bd4 <_ZN2FC10SensorGyro7setGyroEfff>:
    void setGyro(float x, float y, float z);
private:
    struct BodyAngularVelocity bodyAngularVelocity;
};

void SensorGyro::setGyro(float x, float y, float z){
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004be0:	edc7 0a01 	vstr	s1, [r7, #4]
 8004be4:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004be8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d10d      	bne.n	8004c12 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8004bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c02:	d106      	bne.n	8004c12 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8004c04:	edd7 7a00 	vldr	s15, [r7]
 8004c08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c10:	d015      	beq.n	8004c3e <_ZN2FC10SensorGyro7setGyroEfff+0x6a>
	this->bodyAngularVelocity.timestamp = microsecond();
 8004c12:	f7ff fe5d 	bl	80048d0 <_ZL11microsecondv>
 8004c16:	4603      	mov	r3, r0
 8004c18:	460c      	mov	r4, r1
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	609a      	str	r2, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4619      	mov	r1, r3
 8004c36:	4804      	ldr	r0, [pc, #16]	; (8004c48 <_ZN2FC10SensorGyro7setGyroEfff+0x74>)
 8004c38:	f7ff fec5 	bl	80049c6 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
 8004c3c:	e000      	b.n	8004c40 <_ZN2FC10SensorGyro7setGyroEfff+0x6c>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004c3e:	bf00      	nop
}
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000008 	.word	0x20000008

08004c4c <_ZN2FC9SensorMag6setMagEfff>:
    float bias[3];
    float scale[3];
};


void SensorMag::setMag(float x, float y, float z){
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c58:	edc7 0a01 	vstr	s1, [r7, #4]
 8004c5c:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6c:	d10d      	bne.n	8004c8a <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8004c6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	d106      	bne.n	8004c8a <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8004c7c:	edd7 7a00 	vldr	s15, [r7]
 8004c80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	d015      	beq.n	8004cb6 <_ZN2FC9SensorMag6setMagEfff+0x6a>
	this->bodyMag.timestamp = microsecond();
 8004c8a:	f7ff fe21 	bl	80048d0 <_ZL11microsecondv>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	460c      	mov	r4, r1
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = x;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	609a      	str	r2, [r3, #8]
	this->bodyMag.xyz[1] = y;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]
	this->bodyMag.xyz[2] = z;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	611a      	str	r2, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4619      	mov	r1, r3
 8004cae:	4804      	ldr	r0, [pc, #16]	; (8004cc0 <_ZN2FC9SensorMag6setMagEfff+0x74>)
 8004cb0:	f7ff fec0 	bl	8004a34 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>
 8004cb4:	e000      	b.n	8004cb8 <_ZN2FC9SensorMag6setMagEfff+0x6c>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004cb6:	bf00      	nop
}
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000008 	.word	0x20000008
 8004cc4:	00000000 	.word	0x00000000

08004cc8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:


void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b091      	sub	sp, #68	; 0x44
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004cd0:	ed87 0b08 	vstr	d0, [r7, #32]
 8004cd4:	ed87 1b06 	vstr	d1, [r7, #24]
 8004cd8:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8004cdc:	edc7 2a05 	vstr	s5, [r7, #20]
 8004ce0:	ed87 3a04 	vstr	s6, [r7, #16]
 8004ce4:	edc7 3a03 	vstr	s7, [r7, #12]
 8004ce8:	ed87 4a02 	vstr	s8, [r7, #8]
 8004cec:	460b      	mov	r3, r1
 8004cee:	71fb      	strb	r3, [r7, #7]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	71bb      	strb	r3, [r7, #6]

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 8004cf4:	6938      	ldr	r0, [r7, #16]
 8004cf6:	f7fb fc37 	bl	8000568 <__aeabi_f2d>
 8004cfa:	a339      	add	r3, pc, #228	; (adr r3, 8004de0 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x118>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb fc8a 	bl	8000618 <__aeabi_dmul>
 8004d04:	4603      	mov	r3, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	4618      	mov	r0, r3
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	4b31      	ldr	r3, [pc, #196]	; (8004dd8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x110>)
 8004d12:	f7fb fdab 	bl	800086c <__aeabi_ddiv>
 8004d16:	4603      	mov	r3, r0
 8004d18:	460c      	mov	r4, r1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	f7fb ff73 	bl	8000c08 <__aeabi_d2f>
 8004d22:	4603      	mov	r3, r0
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 8004d26:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004d2a:	f7ff fda1 	bl	8004870 <_ZSt3cosf>
 8004d2e:	eeb0 7a40 	vmov.f32	s14, s0
 8004d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d3a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 8004d3e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004d42:	f7ff fda5 	bl	8004890 <_ZSt3sinf>
 8004d46:	eeb0 7a40 	vmov.f32	s14, s0
 8004d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d52:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 8004d56:	f7ff fdbb 	bl	80048d0 <_ZL11microsecondv>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d60:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 8004d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d66:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004d6a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 8004d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d70:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004d74:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 8004d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d7a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004d7e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d86:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d98:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004da6:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	79fa      	ldrb	r2, [r7, #7]
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	79ba      	ldrb	r2, [r7, #6]
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4804      	ldr	r0, [pc, #16]	; (8004ddc <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x114>)
 8004dca:	f7ff fe48 	bl	8004a5e <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>
}
 8004dce:	bf00      	nop
 8004dd0:	3744      	adds	r7, #68	; 0x44
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd90      	pop	{r4, r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40668000 	.word	0x40668000
 8004ddc:	20000008 	.word	0x20000008
 8004de0:	54442d18 	.word	0x54442d18
 8004de4:	400921fb 	.word	0x400921fb

08004de8 <_ZN2FC10SensorBaro7setBaroEff>:
private:
    struct Barometer barometer;
};


void SensorBaro::setBaro(float pressure, float temperature){
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004df4:	edc7 0a01 	vstr	s1, [r7, #4]
	this->barometer.timestamp = microsecond();
 8004df8:	f7ff fd6a 	bl	80048d0 <_ZL11microsecondv>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometer.pressure = pressure;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	609a      	str	r2, [r3, #8]
	this->barometer.temperature = temperature;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	60da      	str	r2, [r3, #12]

	msgBus.setBarometer(this->barometer);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4619      	mov	r1, r3
 8004e16:	4803      	ldr	r0, [pc, #12]	; (8004e24 <_ZN2FC10SensorBaro7setBaroEff+0x3c>)
 8004e18:	f7ff fe32 	bl	8004a80 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}
 8004e24:	20000008 	.word	0x20000008

08004e28 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>:
	if(xQueueReceive(commandQueue, &rcvCommand, portMAX_DELAY)){
		commandHandler(rcvCommand);
	}
}

bool ModuleCommander::sendCommand(Command cmd){
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
//	if(xQueueSendToBack(commandQueue, &cmd, 0) != pdPASS) return false;
	xQueueSendToBackFromISR( commandQueue, &cmd, NULL );
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x20>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	1d39      	adds	r1, r7, #4
 8004e36:	2300      	movs	r3, #0
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f010 ff09 	bl	8015c50 <xQueueGenericSendFromISR>

	return true;
 8004e3e:	2301      	movs	r3, #1
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000960 	.word	0x20000960

08004e4c <_ZN2FC2RC5setRCEttttttttt>:

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode, uint16_t subMode,
			   uint16_t calibration, uint16_t calibration_sub)
{
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b08b      	sub	sp, #44	; 0x2c
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	4608      	mov	r0, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	817b      	strh	r3, [r7, #10]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	813b      	strh	r3, [r7, #8]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]
	/* cotnroller publish */
	this->controllerPub.timestamp = microsecond();
 8004e66:	f7ff fd33 	bl	80048d0 <_ZL11microsecondv>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	e9c2 3400 	strd	r3, r4, [r2]
	this->controllerPub.roll = roll;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	897a      	ldrh	r2, [r7, #10]
 8004e78:	811a      	strh	r2, [r3, #8]
	this->controllerPub.pitch = pitch;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	893a      	ldrh	r2, [r7, #8]
 8004e7e:	815a      	strh	r2, [r3, #10]
	this->controllerPub.yaw = yaw;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	819a      	strh	r2, [r3, #12]
	this->controllerPub.throttle = throttle;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004e8a:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controllerPub);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	480e      	ldr	r0, [pc, #56]	; (8004ecc <_ZN2FC2RC5setRCEttttttttt+0x80>)
 8004e92:	f7ff fe07 	bl	8004aa4 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>

	/* arming */
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);							/* current arm mode */
 8004e96:	f107 0310 	add.w	r3, r7, #16
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	480b      	ldr	r0, [pc, #44]	; (8004ecc <_ZN2FC2RC5setRCEttttttttt+0x80>)
 8004e9e:	f7ff fe3f 	bl	8004b20 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	Command rcvArmFlag = Command::DisArm;						/* request arm mode */
 8004ea2:	2307      	movs	r3, #7
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
	if( armming > ARMING_THRESHOLD )	rcvArmFlag = Command::Arm;
 8004ea6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ea8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <_ZN2FC2RC5setRCEttttttttt+0x68>
 8004eb0:	2306      	movs	r3, #6
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
	if(modeFlag.armMode != rcvArmFlag) ModuleCommander::sendCommand(rcvArmFlag); /* send command */
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d002      	beq.n	8004ec2 <_ZN2FC2RC5setRCEttttttttt+0x76>
 8004ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ebe:	f7ff ffb3 	bl	8004e28 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>

}
 8004ec2:	bf00      	nop
 8004ec4:	372c      	adds	r7, #44	; 0x2c
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd90      	pop	{r4, r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000008 	.word	0x20000008

08004ed0 <_ZN2FC10ModuleAHRS4mainEv>:
    void calNedAccel();

    float invSqrt(float x);
};

void ModuleAHRS::main(){
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b0a1      	sub	sp, #132	; 0x84
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	/* no update */
	if(!msgBus.getBodyAccel(&this->bodyAccelSub)) return;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4822      	ldr	r0, [pc, #136]	; (8004f68 <_ZN2FC10ModuleAHRS4mainEv+0x98>)
 8004ede:	f7ff fd1b 	bl	8004918 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f083 0301 	eor.w	r3, r3, #1
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f040 81b1 	bne.w	8005252 <_ZN2FC10ModuleAHRS4mainEv+0x382>
	if(!msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub)) return;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3318      	adds	r3, #24
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	481c      	ldr	r0, [pc, #112]	; (8004f68 <_ZN2FC10ModuleAHRS4mainEv+0x98>)
 8004ef8:	f7ff fd43 	bl	8004982 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f083 0301 	eor.w	r3, r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f040 81a6 	bne.w	8005256 <_ZN2FC10ModuleAHRS4mainEv+0x386>

	/* mag data not valid */
	if(!msgBus.getBodyMag(&this->bodyMagSub))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3330      	adds	r3, #48	; 0x30
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4815      	ldr	r0, [pc, #84]	; (8004f68 <_ZN2FC10ModuleAHRS4mainEv+0x98>)
 8004f12:	f7ff fd6d 	bl	80049f0 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f083 0301 	eor.w	r3, r3, #1
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d024      	beq.n	8004f6c <_ZN2FC10ModuleAHRS4mainEv+0x9c>
	{
		MadgwickAHRSupdateIMU(bodyAngularVelocitySub.xyz[0],
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	ed93 6a02 	vldr	s12, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	edd3 5a03 	vldr	s11, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	ed93 5a04 	vldr	s10, [r3, #16]
 8004f46:	eef0 2a45 	vmov.f32	s5, s10
 8004f4a:	eeb0 2a65 	vmov.f32	s4, s11
 8004f4e:	eef0 1a46 	vmov.f32	s3, s12
 8004f52:	eeb0 1a66 	vmov.f32	s2, s13
 8004f56:	eef0 0a47 	vmov.f32	s1, s14
 8004f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f001 f8be 	bl	80060e0 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 8004f64:	e02e      	b.n	8004fc4 <_ZN2FC10ModuleAHRS4mainEv+0xf4>
 8004f66:	bf00      	nop
 8004f68:	20000008 	.word	0x20000008
							  bodyAccelSub.xyz[1],
							  bodyAccelSub.xyz[2]);
	}
	/* mag data valid */
	else{
		MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	ed93 6a02 	vldr	s12, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	edd3 5a03 	vldr	s11, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	ed93 5a04 	vldr	s10, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8004fa2:	eeb0 3a64 	vmov.f32	s6, s9
 8004fa6:	eef0 2a45 	vmov.f32	s5, s10
 8004faa:	eeb0 2a65 	vmov.f32	s4, s11
 8004fae:	eef0 1a46 	vmov.f32	s3, s12
 8004fb2:	eeb0 1a66 	vmov.f32	s2, s13
 8004fb6:	eef0 0a47 	vmov.f32	s1, s14
 8004fba:	eeb0 0a67 	vmov.f32	s0, s15
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f952 	bl	8005268 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
						   bodyMagSub.xyz[2]);
	}

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fe8:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800500c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800501c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005020:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005038:	eef0 0a67 	vmov.f32	s1, s15
 800503c:	eeb0 0a46 	vmov.f32	s0, s12
 8005040:	f7ff fc02 	bl	8004848 <_ZSt5atan2ff>
 8005044:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800506c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005070:	eeb0 0a67 	vmov.f32	s0, s15
 8005074:	f7ff fbd8 	bl	8004828 <_ZSt4asinf>
 8005078:	eef0 7a40 	vmov.f32	s15, s0
 800507c:	eef1 7a67 	vneg.f32	s15, s15
 8005080:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80050a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050a8:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80050b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80050c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80050dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80050f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050f8:	eef0 0a67 	vmov.f32	s1, s15
 80050fc:	eeb0 0a46 	vmov.f32	s0, s12
 8005100:	f7ff fba2 	bl	8004848 <_ZSt5atan2ff>
 8005104:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74

    matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 8005120:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005124:	eef0 1a46 	vmov.f32	s3, s12
 8005128:	eeb0 1a66 	vmov.f32	s2, s13
 800512c:	eef0 0a47 	vmov.f32	s1, s14
 8005130:	eeb0 0a67 	vmov.f32	s0, s15
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fe2f 	bl	8006d98 <_ZN6matrix10QuaternionIfEC1Effff>
    matrix::Dcmf dcm(quat.inversed());		/* body -> NED DCM */
 800513a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800513e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f001 fe5e 	bl	8006e06 <_ZNK6matrix10QuaternionIfE8inversedEv>
 800514a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800514e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f001 fec7 	bl	8006ee8 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
    matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
    							   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	ed93 7a03 	vldr	s14, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	edd3 6a04 	vldr	s13, [r3, #16]
 800516c:	f107 0318 	add.w	r3, r7, #24
 8005170:	eeb0 1a66 	vmov.f32	s2, s13
 8005174:	eef0 0a47 	vmov.f32	s1, s14
 8005178:	eeb0 0a67 	vmov.f32	s0, s15
 800517c:	4618      	mov	r0, r3
 800517e:	f001 fffc 	bl	800717a <_ZN6matrix7Vector3IfEC1Efff>

    matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 8005182:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005186:	f107 0218 	add.w	r2, r7, #24
 800518a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800518e:	4618      	mov	r0, r3
 8005190:	f002 f820 	bl	80071d4 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 8005194:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005198:	f107 030c 	add.w	r3, r7, #12
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f002 f869 	bl	8007276 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

    attitudePub.timestamp = microsecond();
 80051a4:	f7ff fb94 	bl	80048d0 <_ZL11microsecondv>
 80051a8:	4603      	mov	r3, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    attitudePub.q[0] = this->q0;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	651a      	str	r2, [r3, #80]	; 0x50
    attitudePub.q[1] = this->q1;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
    attitudePub.q[2] = this->q2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	659a      	str	r2, [r3, #88]	; 0x58
    attitudePub.q[3] = this->q3;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	65da      	str	r2, [r3, #92]	; 0x5c
    attitudePub.roll = roll;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051de:	661a      	str	r2, [r3, #96]	; 0x60
    attitudePub.pitch = pitch;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051e4:	665a      	str	r2, [r3, #100]	; 0x64
    attitudePub.yaw = yaw;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80051ea:	669a      	str	r2, [r3, #104]	; 0x68

    msgBus.setAttitude(attitudePub);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3348      	adds	r3, #72	; 0x48
 80051f0:	4619      	mov	r1, r3
 80051f2:	481b      	ldr	r0, [pc, #108]	; (8005260 <_ZN2FC10ModuleAHRS4mainEv+0x390>)
 80051f4:	f7ff fc68 	bl	8004ac8 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

    nedAccelPub.timestamp = microsecond();
 80051f8:	f7ff fb6a 	bl	80048d0 <_ZL11microsecondv>
 80051fc:	4603      	mov	r3, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    nedAccelPub.xyz[0] = tempNedAccel(0);
 8005206:	f107 030c 	add.w	r3, r7, #12
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f002 f857 	bl	80072c0 <_ZN6matrix6VectorIfLj3EEclEj>
 8005212:	4603      	mov	r3, r0
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	679a      	str	r2, [r3, #120]	; 0x78
    nedAccelPub.xyz[1] = tempNedAccel(1);
 800521a:	f107 030c 	add.w	r3, r7, #12
 800521e:	2101      	movs	r1, #1
 8005220:	4618      	mov	r0, r3
 8005222:	f002 f84d 	bl	80072c0 <_ZN6matrix6VectorIfLj3EEclEj>
 8005226:	4603      	mov	r3, r0
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	67da      	str	r2, [r3, #124]	; 0x7c
    nedAccelPub.xyz[2] = tempNedAccel(2);
 800522e:	f107 030c 	add.w	r3, r7, #12
 8005232:	2102      	movs	r1, #2
 8005234:	4618      	mov	r0, r3
 8005236:	f002 f843 	bl	80072c0 <_ZN6matrix6VectorIfLj3EEclEj>
 800523a:	4603      	mov	r3, r0
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    msgBus.setNedAccel(nedAccelPub);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3370      	adds	r3, #112	; 0x70
 8005248:	4619      	mov	r1, r3
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <_ZN2FC10ModuleAHRS4mainEv+0x390>)
 800524c:	f7ff fc53 	bl	8004af6 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>
 8005250:	e002      	b.n	8005258 <_ZN2FC10ModuleAHRS4mainEv+0x388>
	if(!msgBus.getBodyAccel(&this->bodyAccelSub)) return;
 8005252:	bf00      	nop
 8005254:	e000      	b.n	8005258 <_ZN2FC10ModuleAHRS4mainEv+0x388>
	if(!msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub)) return;
 8005256:	bf00      	nop
}
 8005258:	3784      	adds	r7, #132	; 0x84
 800525a:	46bd      	mov	sp, r7
 800525c:	bd90      	pop	{r4, r7, pc}
 800525e:	bf00      	nop
 8005260:	20000008 	.word	0x20000008
 8005264:	00000000 	.word	0x00000000

08005268 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 8005268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526a:	b0af      	sub	sp, #188	; 0xbc
 800526c:	af00      	add	r7, sp, #0
 800526e:	6278      	str	r0, [r7, #36]	; 0x24
 8005270:	ed87 0a08 	vstr	s0, [r7, #32]
 8005274:	edc7 0a07 	vstr	s1, [r7, #28]
 8005278:	ed87 1a06 	vstr	s2, [r7, #24]
 800527c:	edc7 1a05 	vstr	s3, [r7, #20]
 8005280:	ed87 2a04 	vstr	s4, [r7, #16]
 8005284:	edc7 2a03 	vstr	s5, [r7, #12]
 8005288:	ed87 3a02 	vstr	s6, [r7, #8]
 800528c:	edc7 3a01 	vstr	s7, [r7, #4]
 8005290:	ed87 4a00 	vstr	s8, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8005294:	edd7 7a02 	vldr	s15, [r7, #8]
 8005298:	eef5 7a40 	vcmp.f32	s15, #0.0
 800529c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a0:	d11e      	bne.n	80052e0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x78>
 80052a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80052a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ae:	d117      	bne.n	80052e0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x78>
 80052b0:	edd7 7a00 	vldr	s15, [r7]
 80052b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052bc:	d110      	bne.n	80052e0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x78>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80052be:	edd7 2a03 	vldr	s5, [r7, #12]
 80052c2:	ed97 2a04 	vldr	s4, [r7, #16]
 80052c6:	edd7 1a05 	vldr	s3, [r7, #20]
 80052ca:	ed97 1a06 	vldr	s2, [r7, #24]
 80052ce:	edd7 0a07 	vldr	s1, [r7, #28]
 80052d2:	ed97 0a08 	vldr	s0, [r7, #32]
 80052d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052d8:	f000 ff02 	bl	80060e0 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 80052dc:	f000 bef4 	b.w	80060c8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe60>
		return;
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80052e6:	eeb1 7a67 	vneg.f32	s14, s15
 80052ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80052ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80052f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80052fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005300:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800530a:	edd7 7a06 	vldr	s15, [r7, #24]
 800530e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005316:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800531a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800531e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005328:	edd7 7a08 	vldr	s15, [r7, #32]
 800532c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005336:	edd7 7a06 	vldr	s15, [r7, #24]
 800533a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800533e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005348:	edd7 7a07 	vldr	s15, [r7, #28]
 800534c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005354:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800535c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005366:	edd7 7a07 	vldr	s15, [r7, #28]
 800536a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005374:	edd7 7a06 	vldr	s15, [r7, #24]
 8005378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800537c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005386:	edd7 7a08 	vldr	s15, [r7, #32]
 800538a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800538e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005392:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800539a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80053a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80053a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80053b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80053b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80053c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80053c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053d8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80053dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80053e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80053e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053e8:	edd7 6a04 	vldr	s13, [r7, #16]
 80053ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80053f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053f8:	edd7 6a03 	vldr	s13, [r7, #12]
 80053fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005408:	eeb0 0a67 	vmov.f32	s0, s15
 800540c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800540e:	f001 f9c1 	bl	8006794 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8005412:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 8005416:	ed97 7a05 	vldr	s14, [r7, #20]
 800541a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 8005426:	ed97 7a04 	vldr	s14, [r7, #16]
 800542a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 8005436:	ed97 7a03 	vldr	s14, [r7, #12]
 800543a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8005446:	ed97 7a02 	vldr	s14, [r7, #8]
 800544a:	edd7 7a02 	vldr	s15, [r7, #8]
 800544e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005452:	edd7 6a01 	vldr	s13, [r7, #4]
 8005456:	edd7 7a01 	vldr	s15, [r7, #4]
 800545a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800545e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005462:	edd7 6a00 	vldr	s13, [r7]
 8005466:	edd7 7a00 	vldr	s15, [r7]
 800546a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800546e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005472:	eeb0 0a67 	vmov.f32	s0, s15
 8005476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005478:	f001 f98c 	bl	8006794 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800547c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 8005480:	ed97 7a02 	vldr	s14, [r7, #8]
 8005484:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548c:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 8005490:	ed97 7a01 	vldr	s14, [r7, #4]
 8005494:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549c:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 80054a0:	ed97 7a00 	vldr	s14, [r7]
 80054a4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80054a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ac:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80054b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80054be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80054cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80054d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80054e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054e6:	ed97 7a00 	vldr	s14, [r7]
 80054ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ee:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80054f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8005500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005504:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800550e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005512:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800551c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005520:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800552a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800552e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005538:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800553c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005546:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005554:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800555e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800557c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005580:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005594:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80055a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80055b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055bc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80055cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80055e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80055f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800561c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005620:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005634:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8005638:	ed97 7a02 	vldr	s14, [r7, #8]
 800563c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800564a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800564e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800565c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005668:	edd7 6a02 	vldr	s13, [r7, #8]
 800566c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005678:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800567c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005680:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800568a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800568e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005692:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8005696:	edd7 7a00 	vldr	s15, [r7]
 800569a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80056a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ac:	edd7 6a02 	vldr	s13, [r7, #8]
 80056b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80056b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056bc:	edd7 6a02 	vldr	s13, [r7, #8]
 80056c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80056c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056cc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80056d6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80056da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056de:	edd7 6a01 	vldr	s13, [r7, #4]
 80056e2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80056e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80056f4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005706:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800570a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800570e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005712:	edd7 6a01 	vldr	s13, [r7, #4]
 8005716:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800571a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800571e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005722:	edd7 6a01 	vldr	s13, [r7, #4]
 8005726:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800572a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800572e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005732:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005736:	edd7 7a00 	vldr	s15, [r7]
 800573a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800574c:	edd7 6a01 	vldr	s13, [r7, #4]
 8005750:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800575c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 8005760:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005764:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800576c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005770:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800577c:	eeb0 0a67 	vmov.f32	s0, s15
 8005780:	f7ff f896 	bl	80048b0 <_ZSt4sqrtf>
 8005784:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8005788:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800578c:	eeb1 7a67 	vneg.f32	s14, s15
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80057a0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80057a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ac:	edd7 6a00 	vldr	s13, [r7]
 80057b0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80057b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80057c2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80057c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ce:	edd7 6a00 	vldr	s13, [r7]
 80057d2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80057d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057de:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80057e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80057e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80057f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057f8:	edd7 6a00 	vldr	s13, [r7]
 80057fc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005804:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005808:	edd7 6a00 	vldr	s13, [r7]
 800580c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005818:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 800581c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005820:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005824:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 8005828:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800582c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005830:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005834:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005838:	eeb1 7a67 	vneg.f32	s14, s15
 800583c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005840:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005844:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005848:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800584c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005850:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005854:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005858:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800585c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005860:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005864:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005868:	edd7 7a04 	vldr	s15, [r7, #16]
 800586c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005870:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005878:	ee37 7a27 	vadd.f32	s14, s14, s15
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005882:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005886:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800588a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800588e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005892:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005896:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800589a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800589e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80058a6:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80058aa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80058ae:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80058b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80058b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80058ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80058be:	edd7 7a02 	vldr	s15, [r7, #8]
 80058c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80058c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058ce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058d2:	eef1 6a67 	vneg.f32	s13, s15
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80058dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 80058e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80058ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80058ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80058f2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80058f6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80058fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80058fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005902:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005906:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800590a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800590e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005912:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005916:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800591a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800591e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005922:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800592a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005934:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005938:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800593c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005940:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005944:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005948:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800594c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005950:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005954:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005958:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800595c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005960:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005964:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005968:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800596c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005970:	edd7 7a00 	vldr	s15, [r7]
 8005974:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800597c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005980:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005984:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005988:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800598c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005994:	edd7 7a05 	vldr	s15, [r7, #20]
 8005998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800599c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80059a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059a4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80059a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80059ac:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80059b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80059b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80059b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80059bc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80059c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80059ce:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80059d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80059d6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80059da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80059e2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80059ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059ee:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80059f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80059fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005a08:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005a14:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005a18:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005a1c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005a20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005a24:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005a2c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005a30:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005a34:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005a38:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005a40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a44:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005a5a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 8005a68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005a70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a74:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005a78:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005a7c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005a80:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005a88:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005a8c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005a90:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005a94:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a98:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005a9c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005aa4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005ab6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005aba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005ac4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005ac8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005acc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ad0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005ad4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005ad8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005adc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005ae0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ae4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005ae8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005aec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005af0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005af4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005af8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005afc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b04:	edd7 7a00 	vldr	s15, [r7]
 8005b08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b14:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005b18:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005b1c:	eeb1 7a67 	vneg.f32	s14, s15
 8005b20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005b24:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005b28:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005b2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b30:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b3c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b40:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005b44:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005b48:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b54:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005b66:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005b6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005b6e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005b72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005b7a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b7e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005b82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b86:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b8e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b9a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005b9e:	eef1 6a67 	vneg.f32	s13, s15
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005ba8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 8005bb2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005bb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005bba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005bbe:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005bc2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005bc6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005bca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005bce:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005bd2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005bd6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005bda:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005bde:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005be2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005be6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005bea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005bee:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005bf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bf6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005c08:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 8005c16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005c1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c22:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005c26:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005c2a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c2e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c32:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c36:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005c3a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005c3e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005c42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005c46:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c4a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c52:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005c64:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8005c72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005c76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c7a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c7e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005c82:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005c86:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c8a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c92:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005c96:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005c9a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c9e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ca2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ca6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005caa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005cae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005cb2:	edd7 7a00 	vldr	s15, [r7]
 8005cb6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cc2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005cc6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005cca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005cce:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005cd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005cda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cde:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ce6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005cea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005cee:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005cf2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cfa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005cfe:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d0a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005d0e:	eef1 6a67 	vneg.f32	s13, s15
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005d18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005d22:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d2e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005d32:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d36:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d3a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005d3e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d42:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d46:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d4a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005d4e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005d52:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005d56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d5a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d5e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d66:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d72:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d76:	eef1 6a67 	vneg.f32	s13, s15
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005d80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8005d8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d92:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d96:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005d9a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005d9e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005da2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005da6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005daa:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005dae:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005db2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005db6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005dba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005dbe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dc6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005dd8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005ddc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005de0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005de4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005de8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005dec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005df0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005df4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005df8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005dfc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e00:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e04:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e08:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005e0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e14:	edd7 7a00 	vldr	s15, [r7]
 8005e18:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e24:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8005e28:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005e2c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e34:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e44:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005e48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e54:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005e58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e64:	eeb0 0a67 	vmov.f32	s0, s15
 8005e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e6a:	f000 fc93 	bl	8006794 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8005e6e:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 8005e72:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005e76:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 8005e82:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005e86:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 8005e92:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005e96:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 8005ea2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005ea6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005eb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ec8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005ed2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eda:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ee2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005eec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005efc:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005f06:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f16:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)*1000000;	/*[second]*/
 8005f1a:	f7fe fcd9 	bl	80048d0 <_ZL11microsecondv>
 8005f1e:	460a      	mov	r2, r1
 8005f20:	4601      	mov	r1, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8005f28:	1ac9      	subs	r1, r1, r3
 8005f2a:	eb62 0204 	sbc.w	r2, r2, r4
 8005f2e:	460d      	mov	r5, r1
 8005f30:	4616      	mov	r6, r2
 8005f32:	462b      	mov	r3, r5
 8005f34:	4634      	mov	r4, r6
 8005f36:	f04f 0100 	mov.w	r1, #0
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	0162      	lsls	r2, r4, #5
 8005f40:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005f44:	0159      	lsls	r1, r3, #5
 8005f46:	460b      	mov	r3, r1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	1b5b      	subs	r3, r3, r5
 8005f4c:	eb64 0406 	sbc.w	r4, r4, r6
 8005f50:	f04f 0100 	mov.w	r1, #0
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	0262      	lsls	r2, r4, #9
 8005f5a:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005f5e:	0259      	lsls	r1, r3, #9
 8005f60:	460b      	mov	r3, r1
 8005f62:	4614      	mov	r4, r2
 8005f64:	195b      	adds	r3, r3, r5
 8005f66:	eb44 0406 	adc.w	r4, r4, r6
 8005f6a:	f04f 0100 	mov.w	r1, #0
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	01a2      	lsls	r2, r4, #6
 8005f74:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8005f78:	0199      	lsls	r1, r3, #6
 8005f7a:	1ac9      	subs	r1, r1, r3
 8005f7c:	eb62 0204 	sbc.w	r2, r2, r4
 8005f80:	194b      	adds	r3, r1, r5
 8005f82:	eb42 0406 	adc.w	r4, r2, r6
 8005f86:	4618      	mov	r0, r3
 8005f88:	4621      	mov	r1, r4
 8005f8a:	f7fa ff55 	bl	8000e38 <__aeabi_ul2f>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	62bb      	str	r3, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fa fae7 	bl	8000568 <__aeabi_f2d>
 8005f9a:	a34e      	add	r3, pc, #312	; (adr r3, 80060d4 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe6c>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f7fa fdca 	bl	8000b38 <__aeabi_dcmpgt>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xd46>
 8005faa:	4b49      	ldr	r3, [pc, #292]	; (80060d0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe68>)
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005fb4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005fb8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005fd0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005fd4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005fec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005ff0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006008:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800600c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800602a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800603a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800603e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800604e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006052:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800606a:	eeb0 0a67 	vmov.f32	s0, s15
 800606e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006070:	f000 fb90 	bl	8006794 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006074:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800607e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006092:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80060a6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80060aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80060ba:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 80060c8:	37bc      	adds	r7, #188	; 0xbc
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ce:	bf00      	nop
 80060d0:	3c23d70a 	.word	0x3c23d70a
 80060d4:	47ae147b 	.word	0x47ae147b
 80060d8:	3f847ae1 	.word	0x3f847ae1
 80060dc:	00000000 	.word	0x00000000

080060e0 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80060e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060e2:	b0a1      	sub	sp, #132	; 0x84
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	61f8      	str	r0, [r7, #28]
 80060e8:	ed87 0a06 	vstr	s0, [r7, #24]
 80060ec:	edc7 0a05 	vstr	s1, [r7, #20]
 80060f0:	ed87 1a04 	vstr	s2, [r7, #16]
 80060f4:	edc7 1a03 	vstr	s3, [r7, #12]
 80060f8:	ed87 2a02 	vstr	s4, [r7, #8]
 80060fc:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006106:	eeb1 7a67 	vneg.f32	s14, s15
 800610a:	edd7 7a06 	vldr	s15, [r7, #24]
 800610e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006118:	edd7 7a05 	vldr	s15, [r7, #20]
 800611c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006120:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800612a:	edd7 7a04 	vldr	s15, [r7, #16]
 800612e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006136:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800613a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800613e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006148:	edd7 7a06 	vldr	s15, [r7, #24]
 800614c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006156:	edd7 7a04 	vldr	s15, [r7, #16]
 800615a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800615e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006168:	edd7 7a05 	vldr	s15, [r7, #20]
 800616c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006174:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800617c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006186:	edd7 7a05 	vldr	s15, [r7, #20]
 800618a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8006194:	edd7 7a04 	vldr	s15, [r7, #16]
 8006198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800619c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80061a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80061aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061ba:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80061c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80061c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80061d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80061d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80061e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80061e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061f8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80061fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8006200:	edd7 7a03 	vldr	s15, [r7, #12]
 8006204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006208:	edd7 6a02 	vldr	s13, [r7, #8]
 800620c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006214:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006218:	edd7 6a01 	vldr	s13, [r7, #4]
 800621c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006228:	eeb0 0a67 	vmov.f32	s0, s15
 800622c:	69f8      	ldr	r0, [r7, #28]
 800622e:	f000 fab1 	bl	8006794 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006232:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 8006236:	ed97 7a03 	vldr	s14, [r7, #12]
 800623a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800623e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006242:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 8006246:	ed97 7a02 	vldr	s14, [r7, #8]
 800624a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800624e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006252:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 8006256:	ed97 7a01 	vldr	s14, [r7, #4]
 800625a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800626c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006270:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800627a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800627e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006288:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800628c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006296:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800629a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80062a4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80062a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ac:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80062b6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80062ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062be:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80062c8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80062cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062d0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80062da:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80062de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80062ec:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80062f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8006304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006308:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800632c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006330:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006344:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8006348:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800634c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006354:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006358:	edd7 7a03 	vldr	s15, [r7, #12]
 800635c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006364:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006368:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800636c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006374:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006378:	edd7 7a02 	vldr	s15, [r7, #8]
 800637c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006384:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8006388:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800638c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006394:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006398:	edd7 7a03 	vldr	s15, [r7, #12]
 800639c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063a4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80063a8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80063ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80063b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063be:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80063c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80063c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80063d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063d6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80063da:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80063de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063e6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80063ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80063ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063f6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80063fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80063fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006406:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800640a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800640e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006412:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800641c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006420:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006424:	edd7 7a03 	vldr	s15, [r7, #12]
 8006428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800642c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006430:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8006434:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800643c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006440:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006444:	edd7 7a02 	vldr	s15, [r7, #8]
 8006448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800644c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006450:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006454:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006458:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800645c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006468:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800646c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006478:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800647c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006488:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800648c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006490:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006494:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800649e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064a2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80064a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80064aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064b2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80064b6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80064ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80064c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064cc:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80064d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80064d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80064e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80064e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80064e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064ec:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80064f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80064f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064fc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006500:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800650c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006510:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800651c:	eeb0 0a67 	vmov.f32	s0, s15
 8006520:	69f8      	ldr	r0, [r7, #28]
 8006522:	f000 f937 	bl	8006794 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006526:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 800652a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800652e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 800653a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800653e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006546:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 800654a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800654e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006556:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 800655a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800655e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006566:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006570:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006578:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800657c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006580:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800658a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800658e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006592:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8006596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800659a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80065a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80065a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ac:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80065b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065b4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80065be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80065c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80065ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065ce:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)*1000000;			/*[second]*/
 80065d2:	f7fe f97d 	bl	80048d0 <_ZL11microsecondv>
 80065d6:	460a      	mov	r2, r1
 80065d8:	4601      	mov	r1, r0
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 80065e0:	1ac9      	subs	r1, r1, r3
 80065e2:	eb62 0204 	sbc.w	r2, r2, r4
 80065e6:	460d      	mov	r5, r1
 80065e8:	4616      	mov	r6, r2
 80065ea:	462b      	mov	r3, r5
 80065ec:	4634      	mov	r4, r6
 80065ee:	f04f 0100 	mov.w	r1, #0
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	0162      	lsls	r2, r4, #5
 80065f8:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80065fc:	0159      	lsls	r1, r3, #5
 80065fe:	460b      	mov	r3, r1
 8006600:	4614      	mov	r4, r2
 8006602:	1b5b      	subs	r3, r3, r5
 8006604:	eb64 0406 	sbc.w	r4, r4, r6
 8006608:	f04f 0100 	mov.w	r1, #0
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	0262      	lsls	r2, r4, #9
 8006612:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006616:	0259      	lsls	r1, r3, #9
 8006618:	460b      	mov	r3, r1
 800661a:	4614      	mov	r4, r2
 800661c:	195b      	adds	r3, r3, r5
 800661e:	eb44 0406 	adc.w	r4, r4, r6
 8006622:	f04f 0100 	mov.w	r1, #0
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	01a2      	lsls	r2, r4, #6
 800662c:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8006630:	0199      	lsls	r1, r3, #6
 8006632:	1ac9      	subs	r1, r1, r3
 8006634:	eb62 0204 	sbc.w	r2, r2, r4
 8006638:	194b      	adds	r3, r1, r5
 800663a:	eb42 0406 	adc.w	r4, r2, r6
 800663e:	4618      	mov	r0, r3
 8006640:	4621      	mov	r1, r4
 8006642:	f7fa fbf9 	bl	8000e38 <__aeabi_ul2f>
 8006646:	4603      	mov	r3, r0
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	4618      	mov	r0, r3
 800664e:	f7f9 ff8b 	bl	8000568 <__aeabi_f2d>
 8006652:	a34e      	add	r3, pc, #312	; (adr r3, 800678c <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6ac>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f7fa fa6e 	bl	8000b38 <__aeabi_dcmpgt>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x586>
 8006662:	4b49      	ldr	r3, [pc, #292]	; (8006788 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6a8>)
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800666c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006670:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006688:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800668c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80066a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80066a8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80066ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80066c0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80066c4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80066c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80066e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80066f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800670a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800671a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800671e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006722:	eeb0 0a67 	vmov.f32	s0, s15
 8006726:	69f8      	ldr	r0, [r7, #28]
 8006728:	f000 f834 	bl	8006794 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800672c:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006736:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800673a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800674a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800674e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800675e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006772:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 8006780:	bf00      	nop
 8006782:	3784      	adds	r7, #132	; 0x84
 8006784:	46bd      	mov	sp, r7
 8006786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006788:	3c23d70a 	.word	0x3c23d70a
 800678c:	47ae147b 	.word	0x47ae147b
 8006790:	3f847ae1 	.word	0x3f847ae1

08006794 <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 80067a0:	edd7 7a00 	vldr	s15, [r7]
 80067a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80067a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067ac:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80067b4:	f107 0310 	add.w	r3, r7, #16
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	105a      	asrs	r2, r3, #1
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80067c6:	f107 030c 	add.w	r3, r7, #12
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80067ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80067d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80067d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067da:	edd7 7a04 	vldr	s15, [r7, #16]
 80067de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80067e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80067ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80067ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f2:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	ee07 3a90 	vmov	s15, r3
}
 80067fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	5f3759df 	.word	0x5f3759df

08006810 <_Z13IST8310_timerP15tmrTimerControl>:
//	}
//}
#endif

#ifdef USE_IST8310
void IST8310_timer(TimerHandle_t pxTimer){
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	IST8310_updataIT();
 8006818:	f7fa fd38 	bl	800128c <IST8310_updataIT>
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <_Z12BME280_timerP15tmrTimerControl>:
#endif


#ifdef USE_BME280
void BME280_timer(TimerHandle_t pxTimer){
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	BME280_readIT();
 800682c:	f7fb feb0 	bl	8002590 <BME280_readIT>
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <_Z13MPU9250_timerP15tmrTimerControl>:
#endif

#ifdef USE_MPU9250
void MPU9250_timer(TimerHandle_t pxTimer){
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	MPU9250_updateDMA();
 8006840:	f7fa ff8e 	bl	8001760 <MPU9250_updateDMA>
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <_Z16moduleAHRS_timerP15tmrTimerControl>:
#endif

#ifdef USE_AHRS
void moduleAHRS_timer(TimerHandle_t pxTimer){
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	moduleAHRS.main();
 8006854:	4803      	ldr	r0, [pc, #12]	; (8006864 <_Z16moduleAHRS_timerP15tmrTimerControl+0x18>)
 8006856:	f7fe fb3b 	bl	8004ed0 <_ZN2FC10ModuleAHRS4mainEv>
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000108 	.word	0x20000108

08006868 <_Z10debug_mainPv>:
/*
 *  LED signal
 *  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 */

void debug_main(void* param){
 8006868:	b580      	push	{r7, lr}
 800686a:	b0c4      	sub	sp, #272	; 0x110
 800686c:	af00      	add	r7, sp, #0
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	6018      	str	r0, [r3, #0]
    char buf[256];
    uint32_t bw;
    int len = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    retSD=f_mount(&SDFatFS ,&SDPath[0],1);
 8006878:	2201      	movs	r2, #1
 800687a:	4938      	ldr	r1, [pc, #224]	; (800695c <_Z10debug_mainPv+0xf4>)
 800687c:	4838      	ldr	r0, [pc, #224]	; (8006960 <_Z10debug_mainPv+0xf8>)
 800687e:	f00d fc7f 	bl	8014180 <f_mount>
 8006882:	4603      	mov	r3, r0
 8006884:	461a      	mov	r2, r3
 8006886:	4b37      	ldr	r3, [pc, #220]	; (8006964 <_Z10debug_mainPv+0xfc>)
 8006888:	701a      	strb	r2, [r3, #0]
	if(retSD==FR_OK){
 800688a:	4b36      	ldr	r3, [pc, #216]	; (8006964 <_Z10debug_mainPv+0xfc>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d105      	bne.n	800689e <_Z10debug_mainPv+0x36>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006892:	2201      	movs	r2, #1
 8006894:	2180      	movs	r1, #128	; 0x80
 8006896:	4834      	ldr	r0, [pc, #208]	; (8006968 <_Z10debug_mainPv+0x100>)
 8006898:	f003 faf0 	bl	8009e7c <HAL_GPIO_WritePin>
 800689c:	e004      	b.n	80068a8 <_Z10debug_mainPv+0x40>
	}
	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800689e:	2200      	movs	r2, #0
 80068a0:	2180      	movs	r1, #128	; 0x80
 80068a2:	4831      	ldr	r0, [pc, #196]	; (8006968 <_Z10debug_mainPv+0x100>)
 80068a4:	f003 faea 	bl	8009e7c <HAL_GPIO_WritePin>

	while(1){
		/* open */
		f_open(&SDFile,"log.txt", FA_OPEN_APPEND | FA_WRITE );
 80068a8:	2232      	movs	r2, #50	; 0x32
 80068aa:	4930      	ldr	r1, [pc, #192]	; (800696c <_Z10debug_mainPv+0x104>)
 80068ac:	4830      	ldr	r0, [pc, #192]	; (8006970 <_Z10debug_mainPv+0x108>)
 80068ae:	f00d fccb 	bl	8014248 <f_open>
		if(retSD==FR_OK){
 80068b2:	4b2c      	ldr	r3, [pc, #176]	; (8006964 <_Z10debug_mainPv+0xfc>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <_Z10debug_mainPv+0x68>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80068ba:	2201      	movs	r2, #1
 80068bc:	2180      	movs	r1, #128	; 0x80
 80068be:	482a      	ldr	r0, [pc, #168]	; (8006968 <_Z10debug_mainPv+0x100>)
 80068c0:	f003 fadc 	bl	8009e7c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80068c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068c8:	4827      	ldr	r0, [pc, #156]	; (8006968 <_Z10debug_mainPv+0x100>)
 80068ca:	f003 faf0 	bl	8009eae <HAL_GPIO_TogglePin>
 80068ce:	e004      	b.n	80068da <_Z10debug_mainPv+0x72>
		}
		else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80068d0:	2200      	movs	r2, #0
 80068d2:	2180      	movs	r1, #128	; 0x80
 80068d4:	4824      	ldr	r0, [pc, #144]	; (8006968 <_Z10debug_mainPv+0x100>)
 80068d6:	f003 fad1 	bl	8009e7c <HAL_GPIO_WritePin>
//		}
//		msgBus.getNedAccel(&nedAccel);
//		msgBus.getGPS(&gps);
//		msgBus.getBarometer(&baro);

		len = sprintf(buf,"sexxxxx\n");
 80068da:	f107 030c 	add.w	r3, r7, #12
 80068de:	4a25      	ldr	r2, [pc, #148]	; (8006974 <_Z10debug_mainPv+0x10c>)
 80068e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80068e2:	c303      	stmia	r3!, {r0, r1}
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	2308      	movs	r3, #8
 80068e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		f_write(&SDFile, buf, len, (UINT*)&bw);
 80068ec:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80068f0:	f107 0308 	add.w	r3, r7, #8
 80068f4:	f107 010c 	add.w	r1, r7, #12
 80068f8:	481d      	ldr	r0, [pc, #116]	; (8006970 <_Z10debug_mainPv+0x108>)
 80068fa:	f00d fe78 	bl	80145ee <f_write>

		if(retSD==FR_OK){
 80068fe:	4b19      	ldr	r3, [pc, #100]	; (8006964 <_Z10debug_mainPv+0xfc>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10a      	bne.n	800691c <_Z10debug_mainPv+0xb4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006906:	2201      	movs	r2, #1
 8006908:	2180      	movs	r1, #128	; 0x80
 800690a:	4817      	ldr	r0, [pc, #92]	; (8006968 <_Z10debug_mainPv+0x100>)
 800690c:	f003 fab6 	bl	8009e7c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8006910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006914:	4814      	ldr	r0, [pc, #80]	; (8006968 <_Z10debug_mainPv+0x100>)
 8006916:	f003 faca 	bl	8009eae <HAL_GPIO_TogglePin>
 800691a:	e004      	b.n	8006926 <_Z10debug_mainPv+0xbe>
		}
		else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800691c:	2200      	movs	r2, #0
 800691e:	2180      	movs	r1, #128	; 0x80
 8006920:	4811      	ldr	r0, [pc, #68]	; (8006968 <_Z10debug_mainPv+0x100>)
 8006922:	f003 faab 	bl	8009e7c <HAL_GPIO_WritePin>

		f_close(&SDFile);
 8006926:	4812      	ldr	r0, [pc, #72]	; (8006970 <_Z10debug_mainPv+0x108>)
 8006928:	f00e f8ad 	bl	8014a86 <f_close>
		if(retSD==FR_OK){
 800692c:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <_Z10debug_mainPv+0xfc>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <_Z10debug_mainPv+0xe2>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006934:	2201      	movs	r2, #1
 8006936:	2180      	movs	r1, #128	; 0x80
 8006938:	480b      	ldr	r0, [pc, #44]	; (8006968 <_Z10debug_mainPv+0x100>)
 800693a:	f003 fa9f 	bl	8009e7c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800693e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006942:	4809      	ldr	r0, [pc, #36]	; (8006968 <_Z10debug_mainPv+0x100>)
 8006944:	f003 fab3 	bl	8009eae <HAL_GPIO_TogglePin>
 8006948:	e004      	b.n	8006954 <_Z10debug_mainPv+0xec>
		}
		else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800694a:	2200      	movs	r2, #0
 800694c:	2180      	movs	r1, #128	; 0x80
 800694e:	4806      	ldr	r0, [pc, #24]	; (8006968 <_Z10debug_mainPv+0x100>)
 8006950:	f003 fa94 	bl	8009e7c <HAL_GPIO_WritePin>
		osDelay(5);
 8006954:	2005      	movs	r0, #5
 8006956:	f00e fac9 	bl	8014eec <osDelay>
		f_open(&SDFile,"log.txt", FA_OPEN_APPEND | FA_WRITE );
 800695a:	e7a5      	b.n	80068a8 <_Z10debug_mainPv+0x40>
 800695c:	20005d20 	.word	0x20005d20
 8006960:	20006d54 	.word	0x20006d54
 8006964:	20005d1c 	.word	0x20005d1c
 8006968:	40020400 	.word	0x40020400
 800696c:	0801defc 	.word	0x0801defc
 8006970:	20005d24 	.word	0x20005d24
 8006974:	0801df04 	.word	0x0801df04

08006978 <cppMain>:
#define BME280_UPDATE_HZ 50
#define IST8310_UPDATE_HZ 100

#define AHRS_UPDATE_HZ 200

void cppMain(){
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b089      	sub	sp, #36	; 0x24
 800697c:	af04      	add	r7, sp, #16
    setvbuf(stdout, NULL, _IONBF, 0);
 800697e:	4b55      	ldr	r3, [pc, #340]	; (8006ad4 <cppMain+0x15c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6898      	ldr	r0, [r3, #8]
 8006984:	2300      	movs	r3, #0
 8006986:	2202      	movs	r2, #2
 8006988:	2100      	movs	r1, #0
 800698a:	f013 ff5d 	bl	801a848 <setvbuf>
    printf("test\r\n");
 800698e:	4852      	ldr	r0, [pc, #328]	; (8006ad8 <cppMain+0x160>)
 8006990:	f013 ff52 	bl	801a838 <puts>
    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 8006994:	4851      	ldr	r0, [pc, #324]	; (8006adc <cppMain+0x164>)
 8006996:	f008 facc 	bl	800ef32 <HAL_TIM_Base_Start_IT>

//	HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
//	HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_2);
	Lidar1D_init(&htim9, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800699a:	2204      	movs	r2, #4
 800699c:	2100      	movs	r1, #0
 800699e:	4850      	ldr	r0, [pc, #320]	; (8006ae0 <cppMain+0x168>)
 80069a0:	f7fa fd8e 	bl	80014c0 <Lidar1D_init>
	Lidar1D_run();
 80069a4:	f7fa fe08 	bl	80015b8 <Lidar1D_run>
#ifdef USE_MPU9250
	MPU9250(&hi2c1);
 80069a8:	484e      	ldr	r0, [pc, #312]	; (8006ae4 <cppMain+0x16c>)
 80069aa:	f7fa fe49 	bl	8001640 <MPU9250>
	TimerHandle_t thMPU9250 = xTimerCreate("MPU9250_timer",
 80069ae:	4b4e      	ldr	r3, [pc, #312]	; (8006ae8 <cppMain+0x170>)
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	2300      	movs	r3, #0
 80069b4:	2201      	movs	r2, #1
 80069b6:	2105      	movs	r1, #5
 80069b8:	484c      	ldr	r0, [pc, #304]	; (8006aec <cppMain+0x174>)
 80069ba:	f010 fed5 	bl	8017768 <xTimerCreate>
 80069be:	4603      	mov	r3, r0
										   pdMS_TO_TICKS(1000/MPU9250_UPDATE_HZ),
										   pdTRUE,
										   NULL,
										   MPU9250_timer);
 80069c0:	60fb      	str	r3, [r7, #12]
	if(thMPU9250 == NULL) {
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d100      	bne.n	80069ca <cppMain+0x52>
		/* timer heap error */
		while(1){
 80069c8:	e7fe      	b.n	80069c8 <cppMain+0x50>

		}
	}
	/* timer start */
	if( xTimerStart( thMPU9250, 0 ) != pdPASS )
 80069ca:	68fc      	ldr	r4, [r7, #12]
 80069cc:	f010 f970 	bl	8016cb0 <xTaskGetTickCount>
 80069d0:	4602      	mov	r2, r0
 80069d2:	2300      	movs	r3, #0
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	2300      	movs	r3, #0
 80069d8:	2101      	movs	r1, #1
 80069da:	4620      	mov	r0, r4
 80069dc:	f010 ff20 	bl	8017820 <xTimerGenericCommand>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b01      	cmp	r3, #1
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(&hi2c2, P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 80069e4:	2300      	movs	r3, #0
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	2304      	movs	r3, #4
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	2303      	movs	r3, #3
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	2301      	movs	r3, #1
 80069f2:	2201      	movs	r2, #1
 80069f4:	2103      	movs	r1, #3
 80069f6:	483e      	ldr	r0, [pc, #248]	; (8006af0 <cppMain+0x178>)
 80069f8:	f7fb fcdc 	bl	80023b4 <BME280_init>
	TimerHandle_t thBME280 = xTimerCreate("BME280_timer",
 80069fc:	4b3d      	ldr	r3, [pc, #244]	; (8006af4 <cppMain+0x17c>)
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	2201      	movs	r2, #1
 8006a04:	2114      	movs	r1, #20
 8006a06:	483c      	ldr	r0, [pc, #240]	; (8006af8 <cppMain+0x180>)
 8006a08:	f010 feae 	bl	8017768 <xTimerCreate>
 8006a0c:	4603      	mov	r3, r0
										  pdMS_TO_TICKS(1000/BME280_UPDATE_HZ),
										  pdTRUE,
										  NULL,
										  BME280_timer);
 8006a0e:	60bb      	str	r3, [r7, #8]
	if(thBME280 == NULL) {
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d100      	bne.n	8006a18 <cppMain+0xa0>
		while(1){
 8006a16:	e7fe      	b.n	8006a16 <cppMain+0x9e>
			/* timer heap error */
		}
	}
	/* timer start */
	if( xTimerStart( thBME280, 0 ) != pdPASS )
 8006a18:	68bc      	ldr	r4, [r7, #8]
 8006a1a:	f010 f949 	bl	8016cb0 <xTaskGetTickCount>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	2300      	movs	r3, #0
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	2101      	movs	r1, #1
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f010 fef9 	bl	8017820 <xTimerGenericCommand>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b01      	cmp	r3, #1
		// The timer could not be set into the Active state.
	}
#endif

#ifdef USE_IST8310
	IST8310(&hi2c2);
 8006a32:	482f      	ldr	r0, [pc, #188]	; (8006af0 <cppMain+0x178>)
 8006a34:	f7fa fc16 	bl	8001264 <IST8310>
	TimerHandle_t thIST8310 = xTimerCreate("IST8310_timer",
 8006a38:	4b30      	ldr	r3, [pc, #192]	; (8006afc <cppMain+0x184>)
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2201      	movs	r2, #1
 8006a40:	210a      	movs	r1, #10
 8006a42:	482f      	ldr	r0, [pc, #188]	; (8006b00 <cppMain+0x188>)
 8006a44:	f010 fe90 	bl	8017768 <xTimerCreate>
 8006a48:	4603      	mov	r3, r0
										   pdMS_TO_TICKS(1000/IST8310_UPDATE_HZ),
										   pdTRUE,
										   NULL,
										   IST8310_timer);
 8006a4a:	607b      	str	r3, [r7, #4]
	if(thIST8310 == NULL) {
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d100      	bne.n	8006a54 <cppMain+0xdc>
		while(1){
 8006a52:	e7fe      	b.n	8006a52 <cppMain+0xda>
			/* timer heap error */
		}
	}
	/* timer start */
	if( xTimerStart( thIST8310, 0 ) != pdPASS )
 8006a54:	687c      	ldr	r4, [r7, #4]
 8006a56:	f010 f92b 	bl	8016cb0 <xTaskGetTickCount>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	2300      	movs	r3, #0
 8006a62:	2101      	movs	r1, #1
 8006a64:	4620      	mov	r0, r4
 8006a66:	f010 fedb 	bl	8017820 <xTimerGenericCommand>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b01      	cmp	r3, #1

#ifdef USE_GPS
	/*
	 *  GPS using DMA circular mode
	 */
    TM_GPS_Init(&huart8);
 8006a6e:	4825      	ldr	r0, [pc, #148]	; (8006b04 <cppMain+0x18c>)
 8006a70:	f7fc f840 	bl	8002af4 <TM_GPS_Init>
#endif

#ifdef USE_SBUS
	SBUS_init(&huart7);
 8006a74:	4824      	ldr	r0, [pc, #144]	; (8006b08 <cppMain+0x190>)
 8006a76:	f7fd fc01 	bl	800427c <SBUS_init>
#endif

#ifdef USE_AHRS
	TimerHandle_t thModuleAHRS = xTimerCreate("moduleAHRS_timer",
 8006a7a:	4b24      	ldr	r3, [pc, #144]	; (8006b0c <cppMain+0x194>)
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2201      	movs	r2, #1
 8006a82:	2105      	movs	r1, #5
 8006a84:	4822      	ldr	r0, [pc, #136]	; (8006b10 <cppMain+0x198>)
 8006a86:	f010 fe6f 	bl	8017768 <xTimerCreate>
 8006a8a:	4603      	mov	r3, r0
							   	   	   	   	  pdMS_TO_TICKS(1000/AHRS_UPDATE_HZ),
											  pdTRUE,
											  NULL,
											  moduleAHRS_timer);
 8006a8c:	603b      	str	r3, [r7, #0]
	if(thModuleAHRS == NULL) {
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d100      	bne.n	8006a96 <cppMain+0x11e>
		/* timer heap error */
		while(1){
 8006a94:	e7fe      	b.n	8006a94 <cppMain+0x11c>

		}
	}
	/* timer start */
	if( xTimerStart( thModuleAHRS, 0 ) != pdPASS )
 8006a96:	683c      	ldr	r4, [r7, #0]
 8006a98:	f010 f90a 	bl	8016cb0 <xTaskGetTickCount>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f010 feba 	bl	8017820 <xTimerGenericCommand>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b01      	cmp	r3, #1
	{
		// The timer could not be set into the Active state.
	}
#endif

    std::printf("boot complete\r\n");
 8006ab0:	4818      	ldr	r0, [pc, #96]	; (8006b14 <cppMain+0x19c>)
 8006ab2:	f013 fec1 	bl	801a838 <puts>

	xTaskCreate(debug_main,
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	2305      	movs	r3, #5
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ac4:	4914      	ldr	r1, [pc, #80]	; (8006b18 <cppMain+0x1a0>)
 8006ac6:	4815      	ldr	r0, [pc, #84]	; (8006b1c <cppMain+0x1a4>)
 8006ac8:	f00f fe6c 	bl	80167a4 <xTaskCreate>
//				configMINIMAL_STACK_SIZE,
//				NULL,
//				5,
//				NULL);

}
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd90      	pop	{r4, r7, pc}
 8006ad4:	200001c4 	.word	0x200001c4
 8006ad8:	0801df10 	.word	0x0801df10
 8006adc:	20005710 	.word	0x20005710
 8006ae0:	200056d0 	.word	0x200056d0
 8006ae4:	20005384 	.word	0x20005384
 8006ae8:	08006839 	.word	0x08006839
 8006aec:	0801df18 	.word	0x0801df18
 8006af0:	200053d8 	.word	0x200053d8
 8006af4:	08006825 	.word	0x08006825
 8006af8:	0801df28 	.word	0x0801df28
 8006afc:	08006811 	.word	0x08006811
 8006b00:	0801df38 	.word	0x0801df38
 8006b04:	20005890 	.word	0x20005890
 8006b08:	20005750 	.word	0x20005750
 8006b0c:	0800684d 	.word	0x0800684d
 8006b10:	0801df48 	.word	0x0801df48
 8006b14:	0801df5c 	.word	0x0801df5c
 8006b18:	0801df6c 	.word	0x0801df6c
 8006b1c:	08006869 	.word	0x08006869

08006b20 <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
#ifdef USE_MPU9250
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	4b2f      	ldr	r3, [pc, #188]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d137      	bne.n	8006ba6 <HAL_I2C_MemRxCpltCallback+0x86>
		MPU9250_i2cRxCpltCallback();
 8006b36:	f7fa fe33 	bl	80017a0 <MPU9250_i2cRxCpltCallback>
		sensorAccel.setAccel(mpu9250.accel[0], mpu9250.accel[1], mpu9250.accel[2]);
 8006b3a:	4b2c      	ldr	r3, [pc, #176]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b3c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006b40:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b42:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b48:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8006b4c:	eeb0 1a66 	vmov.f32	s2, s13
 8006b50:	eef0 0a47 	vmov.f32	s1, s14
 8006b54:	eeb0 0a67 	vmov.f32	s0, s15
 8006b58:	4825      	ldr	r0, [pc, #148]	; (8006bf0 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8006b5a:	f7fd ffff 	bl	8004b5c <_ZN2FC11SensorAccel8setAccelEfff>
		sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8006b5e:	4b23      	ldr	r3, [pc, #140]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b60:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006b64:	4b21      	ldr	r3, [pc, #132]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b66:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8006b6a:	4b20      	ldr	r3, [pc, #128]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b6c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8006b70:	eeb0 1a66 	vmov.f32	s2, s13
 8006b74:	eef0 0a47 	vmov.f32	s1, s14
 8006b78:	eeb0 0a67 	vmov.f32	s0, s15
 8006b7c:	481d      	ldr	r0, [pc, #116]	; (8006bf4 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8006b7e:	f7fe f829 	bl	8004bd4 <_ZN2FC10SensorGyro7setGyroEfff>
		sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
 8006b82:	4b1a      	ldr	r3, [pc, #104]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b84:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006b88:	4b18      	ldr	r3, [pc, #96]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b8a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8006b8e:	4b17      	ldr	r3, [pc, #92]	; (8006bec <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006b90:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8006b94:	eeb0 1a66 	vmov.f32	s2, s13
 8006b98:	eef0 0a47 	vmov.f32	s1, s14
 8006b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006ba0:	4815      	ldr	r0, [pc, #84]	; (8006bf8 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8006ba2:	f7fe f853 	bl	8004c4c <_ZN2FC9SensorMag6setMagEfff>
	}
#endif

#ifdef USE_IST8310
	if(hi2c->Instance == ist8310.hi2c->Instance){
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <HAL_I2C_MemRxCpltCallback+0xdc>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d101      	bne.n	8006bb8 <HAL_I2C_MemRxCpltCallback+0x98>
		IST8310_i2cRxCpltCallback();
 8006bb4:	f7fa fb8c 	bl	80012d0 <IST8310_i2cRxCpltCallback>
	}
#endif

#ifdef USE_BME280
	if(hi2c->Instance == bme280.hi2c->Instance){
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d10e      	bne.n	8006be4 <HAL_I2C_MemRxCpltCallback+0xc4>
		BME280_i2cRxCpltCallback();
 8006bc6:	f7fb fd01 	bl	80025cc <BME280_i2cRxCpltCallback>
		sensorBaro.setBaro(bme280.P, bme280.T);
 8006bca:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8006bcc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8006bd2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006bd6:	eef0 0a47 	vmov.f32	s1, s14
 8006bda:	eeb0 0a67 	vmov.f32	s0, s15
 8006bde:	4809      	ldr	r0, [pc, #36]	; (8006c04 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8006be0:	f7fe f902 	bl	8004de8 <_ZN2FC10SensorBaro7setBaroEff>
	}
#endif
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20000568 	.word	0x20000568
 8006bf0:	20000998 	.word	0x20000998
 8006bf4:	200009b0 	.word	0x200009b0
 8006bf8:	20000968 	.word	0x20000968
 8006bfc:	200008e0 	.word	0x200008e0
 8006c00:	200003c8 	.word	0x200003c8
 8006c04:	200009c8 	.word	0x200009c8

08006c08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0c:	ed2d 8b06 	vpush	{d8-d10}
 8006c10:	b088      	sub	sp, #32
 8006c12:	af06      	add	r7, sp, #24
 8006c14:	6078      	str	r0, [r7, #4]
#ifdef USE_SBUS
	if(huart->Instance == sbus.huart->Instance){
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b45      	ldr	r3, [pc, #276]	; (8006d30 <HAL_UART_RxCpltCallback+0x128>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d132      	bne.n	8006c8a <HAL_UART_RxCpltCallback+0x82>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 8006c24:	f7fd fd6e 	bl	8004704 <SBUS_uartRxCpltCallback>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d028      	beq.n	8006c8a <HAL_UART_RxCpltCallback+0x82>
			rc.setRC(SBUS_getChannel(2),	/* roll */
 8006c38:	2002      	movs	r0, #2
 8006c3a:	f7fd fde1 	bl	8004800 <SBUS_getChannel>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	461d      	mov	r5, r3
 8006c42:	2003      	movs	r0, #3
 8006c44:	f7fd fddc 	bl	8004800 <SBUS_getChannel>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461e      	mov	r6, r3
 8006c4c:	2003      	movs	r0, #3
 8006c4e:	f7fd fdd7 	bl	8004800 <SBUS_getChannel>
 8006c52:	4603      	mov	r3, r0
 8006c54:	4698      	mov	r8, r3
 8006c56:	2001      	movs	r0, #1
 8006c58:	f7fd fdd2 	bl	8004800 <SBUS_getChannel>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	461c      	mov	r4, r3
 8006c60:	200b      	movs	r0, #11
 8006c62:	f7fd fdcd 	bl	8004800 <SBUS_getChannel>
 8006c66:	4603      	mov	r3, r0
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9305      	str	r3, [sp, #20]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9304      	str	r3, [sp, #16]
 8006c72:	2300      	movs	r3, #0
 8006c74:	9303      	str	r3, [sp, #12]
 8006c76:	2300      	movs	r3, #0
 8006c78:	9302      	str	r3, [sp, #8]
 8006c7a:	9201      	str	r2, [sp, #4]
 8006c7c:	9400      	str	r4, [sp, #0]
 8006c7e:	4643      	mov	r3, r8
 8006c80:	4632      	mov	r2, r6
 8006c82:	4629      	mov	r1, r5
 8006c84:	482b      	ldr	r0, [pc, #172]	; (8006d34 <HAL_UART_RxCpltCallback+0x12c>)
 8006c86:	f7fe f8e1 	bl	8004e4c <_ZN2FC2RC5setRCEttttttttt>
		}
	}
#endif

#ifdef USE_GPS
	if(huart->Instance == UART8){
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2a      	ldr	r2, [pc, #168]	; (8006d38 <HAL_UART_RxCpltCallback+0x130>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d145      	bne.n	8006d20 <HAL_UART_RxCpltCallback+0x118>
		if(TM_GPS_Update() == TM_GPS_Result_NewData){
 8006c94:	f7fb ffc8 	bl	8002c28 <TM_GPS_Update>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bf0c      	ite	eq
 8006c9e:	2301      	moveq	r3, #1
 8006ca0:	2300      	movne	r3, #0
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d03b      	beq.n	8006d20 <HAL_UART_RxCpltCallback+0x118>
			sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 8006ca8:	4b24      	ldr	r3, [pc, #144]	; (8006d3c <HAL_UART_RxCpltCallback+0x134>)
 8006caa:	ed93 8b00 	vldr	d8, [r3]
 8006cae:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <HAL_UART_RxCpltCallback+0x134>)
 8006cb0:	ed93 9b02 	vldr	d9, [r3, #8]
 8006cb4:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <HAL_UART_RxCpltCallback+0x134>)
 8006cb6:	ed93 aa04 	vldr	s20, [r3, #16]
 8006cba:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <HAL_UART_RxCpltCallback+0x134>)
 8006cbc:	edd3 7a08 	vldr	s15, [r3, #32]
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8006cc6:	f7fb ffe7 	bl	8002c98 <TM_GPS_ConvertSpeed>
 8006cca:	eeb0 6a40 	vmov.f32	s12, s0
 8006cce:	4b1b      	ldr	r3, [pc, #108]	; (8006d3c <HAL_UART_RxCpltCallback+0x134>)
 8006cd0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006cd4:	4b19      	ldr	r3, [pc, #100]	; (8006d3c <HAL_UART_RxCpltCallback+0x134>)
 8006cd6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006cda:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <HAL_UART_RxCpltCallback+0x134>)
 8006cdc:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8006ce0:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <HAL_UART_RxCpltCallback+0x134>)
 8006ce2:	7d19      	ldrb	r1, [r3, #20]
 8006ce4:	4b15      	ldr	r3, [pc, #84]	; (8006d3c <HAL_UART_RxCpltCallback+0x134>)
 8006ce6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	f04f 0400 	mov.w	r4, #0
 8006cf2:	e9cd 3400 	strd	r3, r4, [sp]
 8006cf6:	eeb0 4a66 	vmov.f32	s8, s13
 8006cfa:	eef0 3a47 	vmov.f32	s7, s14
 8006cfe:	eeb0 3a67 	vmov.f32	s6, s15
 8006d02:	eef0 2a46 	vmov.f32	s5, s12
 8006d06:	eeb0 2a4a 	vmov.f32	s4, s20
 8006d0a:	eeb0 1a49 	vmov.f32	s2, s18
 8006d0e:	eef0 1a69 	vmov.f32	s3, s19
 8006d12:	eeb0 0a48 	vmov.f32	s0, s16
 8006d16:	eef0 0a68 	vmov.f32	s1, s17
 8006d1a:	4809      	ldr	r0, [pc, #36]	; (8006d40 <HAL_UART_RxCpltCallback+0x138>)
 8006d1c:	f7fd ffd4 	bl	8004cc8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
#endif

	if(huart->Instance == USART2){
		// telemetry
	}
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	ecbd 8b06 	vpop	{d8-d10}
 8006d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d2e:	bf00      	nop
 8006d30:	200005f0 	.word	0x200005f0
 8006d34:	20000a20 	.word	0x20000a20
 8006d38:	40007c00 	.word	0x40007c00
 8006d3c:	20000688 	.word	0x20000688
 8006d40:	200009d8 	.word	0x200009d8

08006d44 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	Lidar1D_CaptureCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7fa fc4d 	bl	80015ec <Lidar1D_CaptureCallback>
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	461a      	mov	r2, r3
 8006d66:	2300      	movs	r3, #0
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	6053      	str	r3, [r2, #4]
 8006d6c:	6093      	str	r3, [r2, #8]
 8006d6e:	60d3      	str	r3, [r2, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff ffe6 	bl	8006d5a <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6178      	str	r0, [r7, #20]
 8006da0:	ed87 0a04 	vstr	s0, [r7, #16]
 8006da4:	edc7 0a03 	vstr	s1, [r7, #12]
 8006da8:	ed87 1a02 	vstr	s2, [r7, #8]
 8006dac:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff ffe3 	bl	8006d7e <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fa9d 	bl	8007300 <_ZN6matrix6VectorIfLj4EEclEj>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6013      	str	r3, [r2, #0]
        q(1) = b;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fa95 	bl	8007300 <_ZN6matrix6VectorIfLj4EEclEj>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6013      	str	r3, [r2, #0]
        q(2) = c;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	2102      	movs	r1, #2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fa8d 	bl	8007300 <_ZN6matrix6VectorIfLj4EEclEj>
 8006de6:	4602      	mov	r2, r0
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6013      	str	r3, [r2, #0]
        q(3) = d;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2103      	movs	r1, #3
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fa85 	bl	8007300 <_ZN6matrix6VectorIfLj4EEclEj>
 8006df6:	4602      	mov	r2, r0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6013      	str	r3, [r2, #0]
    }
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <_ZNK6matrix10QuaternionIfE8inversedEv>:
    /**
     * Invert quaternion
     *
     * @return inverted quaternion
     */
    Quaternion inversed() const
 8006e06:	b580      	push	{r7, lr}
 8006e08:	ed2d 8b04 	vpush	{d8-d9}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
    {
        const Quaternion &q = *this;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
        Type normSq = q.dot(q);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fa8e 	bl	8007340 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>
 8006e24:	ed87 0a02 	vstr	s0, [r7, #8]
        return Quaternion(
                   q(0)/normSq,
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fabb 	bl	80073a8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006e32:	eeb0 7a40 	vmov.f32	s14, s0
                   -q(1)/normSq,
                   -q(2)/normSq,
                   -q(3)/normSq);
 8006e36:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e3a:	ee87 8a27 	vdiv.f32	s16, s14, s15
                   -q(1)/normSq,
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2101      	movs	r1, #1
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fab0 	bl	80073a8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006e48:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 8006e4c:	eeb1 7a67 	vneg.f32	s14, s15
 8006e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e54:	eec7 8a27 	vdiv.f32	s17, s14, s15
                   -q(2)/normSq,
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2102      	movs	r1, #2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 faa3 	bl	80073a8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006e62:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 8006e66:	eeb1 7a67 	vneg.f32	s14, s15
 8006e6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e6e:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2103      	movs	r1, #3
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fa96 	bl	80073a8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006e7c:	eef0 7a40 	vmov.f32	s15, s0
 8006e80:	eeb1 7a67 	vneg.f32	s14, s15
 8006e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006e8c:	eef0 1a66 	vmov.f32	s3, s13
 8006e90:	eeb0 1a49 	vmov.f32	s2, s18
 8006e94:	eef0 0a68 	vmov.f32	s1, s17
 8006e98:	eeb0 0a48 	vmov.f32	s0, s16
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff ff7b 	bl	8006d98 <_ZN6matrix10QuaternionIfEC1Effff>
    }
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	ecbd 8b04 	vpop	{d8-d9}
 8006eac:	bd80      	pop	{r7, pc}

08006eae <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	2324      	movs	r3, #36	; 0x24
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	f012 fcd9 	bl	8019876 <memset>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff ffe8 	bl	8006eae <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	ed2d 8b02 	vpush	{d8}
 8006eee:	b092      	sub	sp, #72	; 0x48
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
    {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff ffe8 	bl	8006ece <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fa4e 	bl	80073a8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006f0c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2101      	movs	r1, #1
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fa47 	bl	80073a8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006f1a:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2102      	movs	r1, #2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fa40 	bl	80073a8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006f28:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2103      	movs	r1, #3
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fa39 	bl	80073a8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006f36:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 8006f3a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006f3e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 8006f4a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006f4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f56:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 8006f5a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006f5e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f66:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 8006f6a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006f6e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f76:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 8006f7a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006f7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f86:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 8006f8a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006f8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f96:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 8006f9a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006f9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa6:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 8006faa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006fae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb6:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 8006fba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006fbe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 8006fca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006fce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 8006fda:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006fde:	edd7 7a08 	vldr	s15, [r7, #32]
 8006fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fe6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006fea:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 f9f9 	bl	80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8007000:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007004:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 8007008:	ed97 7a07 	vldr	s14, [r7, #28]
 800700c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007010:	ee37 8a67 	vsub.f32	s16, s14, s15
 8007014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007016:	2201      	movs	r2, #1
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f9e6 	bl	80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007020:	4603      	mov	r3, r0
 8007022:	ee78 7a08 	vadd.f32	s15, s16, s16
 8007026:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 800702a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800702e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007032:	ee37 8a27 	vadd.f32	s16, s14, s15
 8007036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007038:	2202      	movs	r2, #2
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f9d5 	bl	80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007042:	4603      	mov	r3, r0
 8007044:	ee78 7a08 	vadd.f32	s15, s16, s16
 8007048:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 800704c:	ed97 7a07 	vldr	s14, [r7, #28]
 8007050:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007054:	ee37 8a27 	vadd.f32	s16, s14, s15
 8007058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705a:	2200      	movs	r2, #0
 800705c:	2101      	movs	r1, #1
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f9c4 	bl	80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007064:	4603      	mov	r3, r0
 8007066:	ee78 7a08 	vadd.f32	s15, s16, s16
 800706a:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 800706e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007072:	edd7 7a08 	vldr	s15, [r7, #32]
 8007076:	ee37 7a67 	vsub.f32	s14, s14, s15
 800707a:	edd7 7a05 	vldr	s15, [r7, #20]
 800707e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8007082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007084:	2201      	movs	r2, #1
 8007086:	2101      	movs	r1, #1
 8007088:	4618      	mov	r0, r3
 800708a:	f000 f9af 	bl	80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800708e:	4603      	mov	r3, r0
 8007090:	edd7 7a03 	vldr	s15, [r7, #12]
 8007094:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007098:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 800709c:	ed97 7a04 	vldr	s14, [r7, #16]
 80070a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80070a4:	ee37 8a67 	vsub.f32	s16, s14, s15
 80070a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070aa:	2202      	movs	r2, #2
 80070ac:	2101      	movs	r1, #1
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f99c 	bl	80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80070b4:	4603      	mov	r3, r0
 80070b6:	ee78 7a08 	vadd.f32	s15, s16, s16
 80070ba:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 80070be:	ed97 7a06 	vldr	s14, [r7, #24]
 80070c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80070c6:	ee37 8a67 	vsub.f32	s16, s14, s15
 80070ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070cc:	2200      	movs	r2, #0
 80070ce:	2102      	movs	r1, #2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 f98b 	bl	80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80070d6:	4603      	mov	r3, r0
 80070d8:	ee78 7a08 	vadd.f32	s15, s16, s16
 80070dc:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 80070e0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80070e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80070e8:	ee37 8a27 	vadd.f32	s16, s14, s15
 80070ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ee:	2201      	movs	r2, #1
 80070f0:	2102      	movs	r1, #2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f97a 	bl	80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80070f8:	4603      	mov	r3, r0
 80070fa:	ee78 7a08 	vadd.f32	s15, s16, s16
 80070fe:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 8007102:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007106:	edd7 7a08 	vldr	s15, [r7, #32]
 800710a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800710e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007112:	ee37 8a67 	vsub.f32	s16, s14, s15
 8007116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007118:	2202      	movs	r2, #2
 800711a:	2102      	movs	r1, #2
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f965 	bl	80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007122:	4603      	mov	r3, r0
 8007124:	edd7 7a03 	vldr	s15, [r7, #12]
 8007128:	ee78 7a27 	vadd.f32	s15, s16, s15
 800712c:	edc3 7a00 	vstr	s15, [r3]
    }
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4618      	mov	r0, r3
 8007134:	3748      	adds	r7, #72	; 0x48
 8007136:	46bd      	mov	sp, r7
 8007138:	ecbd 8b02 	vpop	{d8}
 800713c:	bd80      	pop	{r7, pc}

0800713e <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	461a      	mov	r2, r3
 800714a:	2300      	movs	r3, #0
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	6053      	str	r3, [r2, #4]
 8007150:	6093      	str	r3, [r2, #8]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <_ZN6matrix6VectorIfLj3EEC1Ev>:
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff ffe7 	bl	800713e <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	ed87 0a02 	vstr	s0, [r7, #8]
 8007186:	edc7 0a01 	vstr	s1, [r7, #4]
 800718a:	ed87 1a00 	vstr	s2, [r7]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff ffe5 	bl	8007160 <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	617b      	str	r3, [r7, #20]
        v(0) = x;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2100      	movs	r1, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f88e 	bl	80072c0 <_ZN6matrix6VectorIfLj3EEclEj>
 80071a4:	4602      	mov	r2, r0
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6013      	str	r3, [r2, #0]
        v(1) = y;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2101      	movs	r1, #1
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f886 	bl	80072c0 <_ZN6matrix6VectorIfLj3EEclEj>
 80071b4:	4602      	mov	r2, r0
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6013      	str	r3, [r2, #0]
        v(2) = z;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2102      	movs	r1, #2
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f87e 	bl	80072c0 <_ZN6matrix6VectorIfLj3EEclEj>
 80071c4:	4602      	mov	r2, r0
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6013      	str	r3, [r2, #0]
    }
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 80071d4:	b580      	push	{r7, lr}
 80071d6:	ed2d 8b02 	vpush	{d8}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	461a      	mov	r2, r3
 80071ec:	2300      	movs	r3, #0
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	6053      	str	r3, [r2, #4]
 80071f2:	6093      	str	r3, [r2, #8]
        res.setZero();
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f927 	bl	8007448 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d831      	bhi.n	8007268 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 8007204:	2300      	movs	r3, #0
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d128      	bne.n	8007260 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d81f      	bhi.n	8007258 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	69f9      	ldr	r1, [r7, #28]
 800721c:	6938      	ldr	r0, [r7, #16]
 800721e:	f000 f94b 	bl	80074b8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 8007222:	eeb0 8a40 	vmov.f32	s16, s0
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	6979      	ldr	r1, [r7, #20]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f976 	bl	800751c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 8007230:	eef0 7a40 	vmov.f32	s15, s0
 8007234:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	69f9      	ldr	r1, [r7, #28]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f911 	bl	8007464 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 8007242:	4603      	mov	r3, r0
 8007244:	edd3 7a00 	vldr	s15, [r3]
 8007248:	ee78 7a27 	vadd.f32	s15, s16, s15
 800724c:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	3301      	adds	r3, #1
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	e7dc      	b.n	8007212 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	3301      	adds	r3, #1
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e7d3      	b.n	8007208 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	3301      	adds	r3, #1
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	e7ca      	b.n	80071fe <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 8007268:	bf00      	nop
    }
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	ecbd 8b02 	vpop	{d8}
 8007274:	bd80      	pop	{r7, pc}

08007276 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	f000 f977 	bl	8007578 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4618      	mov	r0, r3
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
    {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	461a      	mov	r2, r3
 80072a2:	2300      	movs	r3, #0
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	6053      	str	r3, [r2, #4]
 80072a8:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	220c      	movs	r2, #12
 80072b0:	4618      	mov	r0, r3
 80072b2:	f012 fad5 	bl	8019860 <memcpy>
    }
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d905      	bls.n	80072dc <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 80072d0:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 80072d2:	4a09      	ldr	r2, [pc, #36]	; (80072f8 <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 80072d4:	2137      	movs	r1, #55	; 0x37
 80072d6:	4809      	ldr	r0, [pc, #36]	; (80072fc <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 80072d8:	f012 fa68 	bl	80197ac <__assert_func>

        MatrixM1 &v = *this;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 80072e0:	2200      	movs	r2, #0
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f8bd 	bl	8007464 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 80072ea:	4603      	mov	r3, r0
    }
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	0801df78 	.word	0x0801df78
 80072f8:	0801e4b4 	.word	0x0801e4b4
 80072fc:	0801df80 	.word	0x0801df80

08007300 <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b03      	cmp	r3, #3
 800730e:	d905      	bls.n	800731c <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 8007310:	4b08      	ldr	r3, [pc, #32]	; (8007334 <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 8007312:	4a09      	ldr	r2, [pc, #36]	; (8007338 <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 8007314:	2137      	movs	r1, #55	; 0x37
 8007316:	4809      	ldr	r0, [pc, #36]	; (800733c <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 8007318:	f012 fa48 	bl	80197ac <__assert_func>
        MatrixM1 &v = *this;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 8007320:	2200      	movs	r2, #0
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 f937 	bl	8007598 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 800732a:	4603      	mov	r3, r0
    }
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	0801df78 	.word	0x0801df78
 8007338:	0801e050 	.word	0x0801e050
 800733c:	0801df80 	.word	0x0801df80

08007340 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>:

    Type dot(const MatrixM1 & b) const {
 8007340:	b580      	push	{r7, lr}
 8007342:	ed2d 8b02 	vpush	{d8}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
        const Vector &a(*this);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60fb      	str	r3, [r7, #12]
        Type r(0);
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 8007358:	2300      	movs	r3, #0
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2b03      	cmp	r3, #3
 8007360:	d818      	bhi.n	8007394 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x54>
            r += a(i)*b(i,0);
 8007362:	6939      	ldr	r1, [r7, #16]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 f81f 	bl	80073a8 <_ZNK6matrix6VectorIfLj4EEclEj>
 800736a:	eeb0 8a40 	vmov.f32	s16, s0
 800736e:	2200      	movs	r2, #0
 8007370:	6939      	ldr	r1, [r7, #16]
 8007372:	6838      	ldr	r0, [r7, #0]
 8007374:	f000 f93a 	bl	80075ec <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 8007378:	eef0 7a40 	vmov.f32	s15, s0
 800737c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007380:	ed97 7a05 	vldr	s14, [r7, #20]
 8007384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007388:	edc7 7a05 	vstr	s15, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	3301      	adds	r3, #1
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	e7e3      	b.n	800735c <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x1c>
        }
        return r;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	ee07 3a90 	vmov	s15, r3
    }
 800739a:	eeb0 0a67 	vmov.f32	s0, s15
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	ecbd 8b02 	vpop	{d8}
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
        assert(i < M);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d905      	bls.n	80073c4 <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 80073b8:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 80073ba:	4a0a      	ldr	r2, [pc, #40]	; (80073e4 <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 80073bc:	212e      	movs	r1, #46	; 0x2e
 80073be:	480a      	ldr	r0, [pc, #40]	; (80073e8 <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 80073c0:	f012 f9f4 	bl	80197ac <__assert_func>
        const MatrixM1 &v = *this;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 80073c8:	2200      	movs	r2, #0
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f90d 	bl	80075ec <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 80073d2:	eef0 7a40 	vmov.f32	s15, s0
    }
 80073d6:	eeb0 0a67 	vmov.f32	s0, s15
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	0801df78 	.word	0x0801df78
 80073e4:	0801e1ec 	.word	0x0801e1ec
 80073e8:	0801df80 	.word	0x0801df80

080073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d905      	bls.n	800740a <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 80073fe:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 8007400:	4a0e      	ldr	r2, [pc, #56]	; (800743c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 8007402:	216e      	movs	r1, #110	; 0x6e
 8007404:	480e      	ldr	r0, [pc, #56]	; (8007440 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 8007406:	f012 f9d1 	bl	80197ac <__assert_func>
        assert(j < N);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d905      	bls.n	800741c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 8007410:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 8007412:	4a0a      	ldr	r2, [pc, #40]	; (800743c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 8007414:	2170      	movs	r1, #112	; 0x70
 8007416:	480a      	ldr	r0, [pc, #40]	; (8007440 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 8007418:	f012 f9c8 	bl	80197ac <__assert_func>
        return _data[i][j];
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4413      	add	r3, r2
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4413      	add	r3, r2
    }
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	0801df78 	.word	0x0801df78
 800743c:	0801e264 	.word	0x0801e264
 8007440:	0801dfb0 	.word	0x0801dfb0
 8007444:	0801dfe0 	.word	0x0801dfe0

08007448 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	220c      	movs	r2, #12
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f012 fa0d 	bl	8019876 <memset>
    }
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d905      	bls.n	8007482 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 8007476:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 8007478:	4a0c      	ldr	r2, [pc, #48]	; (80074ac <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800747a:	216e      	movs	r1, #110	; 0x6e
 800747c:	480c      	ldr	r0, [pc, #48]	; (80074b0 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800747e:	f012 f995 	bl	80197ac <__assert_func>
        assert(j < N);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 8007488:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800748a:	4a08      	ldr	r2, [pc, #32]	; (80074ac <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800748c:	2170      	movs	r1, #112	; 0x70
 800748e:	4808      	ldr	r0, [pc, #32]	; (80074b0 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 8007490:	f012 f98c 	bl	80197ac <__assert_func>
        return _data[i][j];
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4413      	add	r3, r2
    }
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	0801df78 	.word	0x0801df78
 80074ac:	0801e424 	.word	0x0801e424
 80074b0:	0801dfb0 	.word	0x0801dfb0
 80074b4:	0801dfe0 	.word	0x0801dfe0

080074b8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d905      	bls.n	80074d6 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 80074ca:	4b10      	ldr	r3, [pc, #64]	; (800750c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 80074cc:	4a10      	ldr	r2, [pc, #64]	; (8007510 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 80074ce:	2164      	movs	r1, #100	; 0x64
 80074d0:	4810      	ldr	r0, [pc, #64]	; (8007514 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 80074d2:	f012 f96b 	bl	80197ac <__assert_func>
        assert(j < N);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d905      	bls.n	80074e8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 80074de:	4a0c      	ldr	r2, [pc, #48]	; (8007510 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 80074e0:	2166      	movs	r1, #102	; 0x66
 80074e2:	480c      	ldr	r0, [pc, #48]	; (8007514 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 80074e4:	f012 f962 	bl	80197ac <__assert_func>
        return _data[i][j];
 80074e8:	68f9      	ldr	r1, [r7, #12]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	4613      	mov	r3, r2
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	4413      	add	r3, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	ee07 3a90 	vmov	s15, r3
    }
 8007500:	eeb0 0a67 	vmov.f32	s0, s15
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	0801df78 	.word	0x0801df78
 8007510:	0801e2f4 	.word	0x0801e2f4
 8007514:	0801dfb0 	.word	0x0801dfb0
 8007518:	0801dfe0 	.word	0x0801dfe0

0800751c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d905      	bls.n	800753a <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800752e:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 8007530:	4a0e      	ldr	r2, [pc, #56]	; (800756c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 8007532:	2164      	movs	r1, #100	; 0x64
 8007534:	480e      	ldr	r0, [pc, #56]	; (8007570 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 8007536:	f012 f939 	bl	80197ac <__assert_func>
        assert(j < N);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 8007540:	4b0c      	ldr	r3, [pc, #48]	; (8007574 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 8007542:	4a0a      	ldr	r2, [pc, #40]	; (800756c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 8007544:	2166      	movs	r1, #102	; 0x66
 8007546:	480a      	ldr	r0, [pc, #40]	; (8007570 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 8007548:	f012 f930 	bl	80197ac <__assert_func>
        return _data[i][j];
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	440b      	add	r3, r1
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	ee07 3a90 	vmov	s15, r3
    }
 800755e:	eeb0 0a67 	vmov.f32	s0, s15
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	0801df78 	.word	0x0801df78
 800756c:	0801e38c 	.word	0x0801e38c
 8007570:	0801dfb0 	.word	0x0801dfb0
 8007574:	0801dfe0 	.word	0x0801dfe0

08007578 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff fe84 	bl	8007294 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d905      	bls.n	80075b6 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 80075aa:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 80075ac:	4a0c      	ldr	r2, [pc, #48]	; (80075e0 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 80075ae:	216e      	movs	r1, #110	; 0x6e
 80075b0:	480c      	ldr	r0, [pc, #48]	; (80075e4 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 80075b2:	f012 f8fb 	bl	80197ac <__assert_func>
        assert(j < N);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 80075be:	4a08      	ldr	r2, [pc, #32]	; (80075e0 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 80075c0:	2170      	movs	r1, #112	; 0x70
 80075c2:	4808      	ldr	r0, [pc, #32]	; (80075e4 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 80075c4:	f012 f8f2 	bl	80197ac <__assert_func>
        return _data[i][j];
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4413      	add	r3, r2
    }
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	0801df78 	.word	0x0801df78
 80075e0:	0801e0c4 	.word	0x0801e0c4
 80075e4:	0801dfb0 	.word	0x0801dfb0
 80075e8:	0801dfe0 	.word	0x0801dfe0

080075ec <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d905      	bls.n	800760a <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 80075fe:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 8007600:	4a0e      	ldr	r2, [pc, #56]	; (800763c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 8007602:	2164      	movs	r1, #100	; 0x64
 8007604:	480e      	ldr	r0, [pc, #56]	; (8007640 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 8007606:	f012 f8d1 	bl	80197ac <__assert_func>
        assert(j < N);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 8007610:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 8007612:	4a0a      	ldr	r2, [pc, #40]	; (800763c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 8007614:	2166      	movs	r1, #102	; 0x66
 8007616:	480a      	ldr	r0, [pc, #40]	; (8007640 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 8007618:	f012 f8c8 	bl	80197ac <__assert_func>
        return _data[i][j];
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	440b      	add	r3, r1
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	ee07 3a90 	vmov	s15, r3
    }
 800762e:	eeb0 0a67 	vmov.f32	s0, s15
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	0801df78 	.word	0x0801df78
 800763c:	0801e154 	.word	0x0801e154
 8007640:	0801dfb0 	.word	0x0801dfb0
 8007644:	0801dfe0 	.word	0x0801dfe0

08007648 <_Z41__static_initialization_and_destruction_0ii>:
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af02      	add	r7, sp, #8
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d10f      	bne.n	8007678 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800765e:	4293      	cmp	r3, r2
 8007660:	d10a      	bne.n	8007678 <_Z41__static_initialization_and_destruction_0ii+0x30>
QueueHandle_t commandQueue = xQueueCreateStatic(CMD_QUEUE_LENGTH,
 8007662:	2300      	movs	r3, #0
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8007668:	4a06      	ldr	r2, [pc, #24]	; (8007684 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800766a:	2104      	movs	r1, #4
 800766c:	2003      	movs	r0, #3
 800766e:	f00e f8b9 	bl	80157e4 <xQueueGenericCreateStatic>
 8007672:	4602      	mov	r2, r0
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000904 	.word	0x20000904
 8007684:	20000954 	.word	0x20000954
 8007688:	20000960 	.word	0x20000960

0800768c <_GLOBAL__sub_I_mpu9250>:
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
 8007690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007694:	2001      	movs	r0, #1
 8007696:	f7ff ffd7 	bl	8007648 <_Z41__static_initialization_and_destruction_0ii>
 800769a:	bd80      	pop	{r7, pc}

0800769c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80076a2:	2300      	movs	r3, #0
 80076a4:	607b      	str	r3, [r7, #4]
 80076a6:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <MX_DMA_Init+0x4c>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	4a0f      	ldr	r2, [pc, #60]	; (80076e8 <MX_DMA_Init+0x4c>)
 80076ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076b0:	6313      	str	r3, [r2, #48]	; 0x30
 80076b2:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <MX_DMA_Init+0x4c>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076ba:	607b      	str	r3, [r7, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80076be:	2300      	movs	r3, #0
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <MX_DMA_Init+0x4c>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	4a08      	ldr	r2, [pc, #32]	; (80076e8 <MX_DMA_Init+0x4c>)
 80076c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076cc:	6313      	str	r3, [r2, #48]	; 0x30
 80076ce:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <MX_DMA_Init+0x4c>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	683b      	ldr	r3, [r7, #0]

}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	40023800 	.word	0x40023800

080076ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80076f0:	4a04      	ldr	r2, [pc, #16]	; (8007704 <MX_FREERTOS_Init+0x18>)
 80076f2:	2100      	movs	r1, #0
 80076f4:	4804      	ldr	r0, [pc, #16]	; (8007708 <MX_FREERTOS_Init+0x1c>)
 80076f6:	f00d fb53 	bl	8014da0 <osThreadNew>
 80076fa:	4602      	mov	r2, r0
 80076fc:	4b03      	ldr	r3, [pc, #12]	; (800770c <MX_FREERTOS_Init+0x20>)
 80076fe:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8007700:	bf00      	nop
 8007702:	bd80      	pop	{r7, pc}
 8007704:	0801e528 	.word	0x0801e528
 8007708:	08007711 	.word	0x08007711
 800770c:	20005380 	.word	0x20005380

08007710 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007718:	2001      	movs	r0, #1
 800771a:	f00d fbe7 	bl	8014eec <osDelay>
 800771e:	e7fb      	b.n	8007718 <StartDefaultTask+0x8>

08007720 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08e      	sub	sp, #56	; 0x38
 8007724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	605a      	str	r2, [r3, #4]
 8007730:	609a      	str	r2, [r3, #8]
 8007732:	60da      	str	r2, [r3, #12]
 8007734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007736:	2300      	movs	r3, #0
 8007738:	623b      	str	r3, [r7, #32]
 800773a:	4b8b      	ldr	r3, [pc, #556]	; (8007968 <MX_GPIO_Init+0x248>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4a8a      	ldr	r2, [pc, #552]	; (8007968 <MX_GPIO_Init+0x248>)
 8007740:	f043 0310 	orr.w	r3, r3, #16
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b88      	ldr	r3, [pc, #544]	; (8007968 <MX_GPIO_Init+0x248>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	623b      	str	r3, [r7, #32]
 8007750:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007752:	2300      	movs	r3, #0
 8007754:	61fb      	str	r3, [r7, #28]
 8007756:	4b84      	ldr	r3, [pc, #528]	; (8007968 <MX_GPIO_Init+0x248>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	4a83      	ldr	r2, [pc, #524]	; (8007968 <MX_GPIO_Init+0x248>)
 800775c:	f043 0304 	orr.w	r3, r3, #4
 8007760:	6313      	str	r3, [r2, #48]	; 0x30
 8007762:	4b81      	ldr	r3, [pc, #516]	; (8007968 <MX_GPIO_Init+0x248>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	4b7d      	ldr	r3, [pc, #500]	; (8007968 <MX_GPIO_Init+0x248>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	4a7c      	ldr	r2, [pc, #496]	; (8007968 <MX_GPIO_Init+0x248>)
 8007778:	f043 0320 	orr.w	r3, r3, #32
 800777c:	6313      	str	r3, [r2, #48]	; 0x30
 800777e:	4b7a      	ldr	r3, [pc, #488]	; (8007968 <MX_GPIO_Init+0x248>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	f003 0320 	and.w	r3, r3, #32
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	4b76      	ldr	r3, [pc, #472]	; (8007968 <MX_GPIO_Init+0x248>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	4a75      	ldr	r2, [pc, #468]	; (8007968 <MX_GPIO_Init+0x248>)
 8007794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007798:	6313      	str	r3, [r2, #48]	; 0x30
 800779a:	4b73      	ldr	r3, [pc, #460]	; (8007968 <MX_GPIO_Init+0x248>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077a6:	2300      	movs	r3, #0
 80077a8:	613b      	str	r3, [r7, #16]
 80077aa:	4b6f      	ldr	r3, [pc, #444]	; (8007968 <MX_GPIO_Init+0x248>)
 80077ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ae:	4a6e      	ldr	r2, [pc, #440]	; (8007968 <MX_GPIO_Init+0x248>)
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	6313      	str	r3, [r2, #48]	; 0x30
 80077b6:	4b6c      	ldr	r3, [pc, #432]	; (8007968 <MX_GPIO_Init+0x248>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	4b68      	ldr	r3, [pc, #416]	; (8007968 <MX_GPIO_Init+0x248>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	4a67      	ldr	r2, [pc, #412]	; (8007968 <MX_GPIO_Init+0x248>)
 80077cc:	f043 0302 	orr.w	r3, r3, #2
 80077d0:	6313      	str	r3, [r2, #48]	; 0x30
 80077d2:	4b65      	ldr	r3, [pc, #404]	; (8007968 <MX_GPIO_Init+0x248>)
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80077de:	2300      	movs	r3, #0
 80077e0:	60bb      	str	r3, [r7, #8]
 80077e2:	4b61      	ldr	r3, [pc, #388]	; (8007968 <MX_GPIO_Init+0x248>)
 80077e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e6:	4a60      	ldr	r2, [pc, #384]	; (8007968 <MX_GPIO_Init+0x248>)
 80077e8:	f043 0308 	orr.w	r3, r3, #8
 80077ec:	6313      	str	r3, [r2, #48]	; 0x30
 80077ee:	4b5e      	ldr	r3, [pc, #376]	; (8007968 <MX_GPIO_Init+0x248>)
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	60bb      	str	r3, [r7, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
 80077fe:	4b5a      	ldr	r3, [pc, #360]	; (8007968 <MX_GPIO_Init+0x248>)
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	4a59      	ldr	r2, [pc, #356]	; (8007968 <MX_GPIO_Init+0x248>)
 8007804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007808:	6313      	str	r3, [r2, #48]	; 0x30
 800780a:	4b57      	ldr	r3, [pc, #348]	; (8007968 <MX_GPIO_Init+0x248>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	607b      	str	r3, [r7, #4]
 8007814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8007816:	2200      	movs	r2, #0
 8007818:	f244 0181 	movw	r1, #16513	; 0x4081
 800781c:	4853      	ldr	r0, [pc, #332]	; (800796c <MX_GPIO_Init+0x24c>)
 800781e:	f002 fb2d 	bl	8009e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SIGNAL_GPIO_Port, LED_SIGNAL_Pin, GPIO_PIN_RESET);
 8007822:	2200      	movs	r2, #0
 8007824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007828:	4851      	ldr	r0, [pc, #324]	; (8007970 <MX_GPIO_Init+0x250>)
 800782a:	f002 fb27 	bl	8009e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800782e:	2200      	movs	r2, #0
 8007830:	2140      	movs	r1, #64	; 0x40
 8007832:	4850      	ldr	r0, [pc, #320]	; (8007974 <MX_GPIO_Init+0x254>)
 8007834:	f002 fb22 	bl	8009e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8007838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800783e:	4b4e      	ldr	r3, [pc, #312]	; (8007978 <MX_GPIO_Init+0x258>)
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007842:	2300      	movs	r3, #0
 8007844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8007846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800784a:	4619      	mov	r1, r3
 800784c:	484b      	ldr	r0, [pc, #300]	; (800797c <MX_GPIO_Init+0x25c>)
 800784e:	f002 f953 	bl	8009af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007852:	2332      	movs	r3, #50	; 0x32
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007856:	2302      	movs	r3, #2
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800785a:	2300      	movs	r3, #0
 800785c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800785e:	2303      	movs	r3, #3
 8007860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007862:	230b      	movs	r3, #11
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800786a:	4619      	mov	r1, r3
 800786c:	4843      	ldr	r0, [pc, #268]	; (800797c <MX_GPIO_Init+0x25c>)
 800786e:	f002 f943 	bl	8009af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007872:	2386      	movs	r3, #134	; 0x86
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007876:	2302      	movs	r3, #2
 8007878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787a:	2300      	movs	r3, #0
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800787e:	2303      	movs	r3, #3
 8007880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007882:	230b      	movs	r3, #11
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800788a:	4619      	mov	r1, r3
 800788c:	483c      	ldr	r0, [pc, #240]	; (8007980 <MX_GPIO_Init+0x260>)
 800788e:	f002 f933 	bl	8009af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8007892:	f244 0381 	movw	r3, #16513	; 0x4081
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007898:	2301      	movs	r3, #1
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789c:	2300      	movs	r3, #0
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078a0:	2300      	movs	r3, #0
 80078a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078a8:	4619      	mov	r1, r3
 80078aa:	4830      	ldr	r0, [pc, #192]	; (800796c <MX_GPIO_Init+0x24c>)
 80078ac:	f002 f924 	bl	8009af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SIGNAL_Pin;
 80078b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078b6:	2301      	movs	r3, #1
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80078ba:	2302      	movs	r3, #2
 80078bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078be:	2300      	movs	r3, #0
 80078c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80078c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078c6:	4619      	mov	r1, r3
 80078c8:	4829      	ldr	r0, [pc, #164]	; (8007970 <MX_GPIO_Init+0x250>)
 80078ca:	f002 f915 	bl	8009af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80078ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d4:	2302      	movs	r3, #2
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078dc:	2303      	movs	r3, #3
 80078de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80078e0:	230b      	movs	r3, #11
 80078e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80078e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078e8:	4619      	mov	r1, r3
 80078ea:	4820      	ldr	r0, [pc, #128]	; (800796c <MX_GPIO_Init+0x24c>)
 80078ec:	f002 f904 	bl	8009af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = SD_Detect_Pin|USB_OverCurrent_Pin;
 80078f0:	2388      	movs	r3, #136	; 0x88
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078f4:	2300      	movs	r3, #0
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80078fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007900:	4619      	mov	r1, r3
 8007902:	481c      	ldr	r0, [pc, #112]	; (8007974 <MX_GPIO_Init+0x254>)
 8007904:	f002 f8f8 	bl	8009af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8007908:	2340      	movs	r3, #64	; 0x40
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800790c:	2301      	movs	r3, #1
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007910:	2300      	movs	r3, #0
 8007912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007914:	2300      	movs	r3, #0
 8007916:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800791c:	4619      	mov	r1, r3
 800791e:	4815      	ldr	r0, [pc, #84]	; (8007974 <MX_GPIO_Init+0x254>)
 8007920:	f002 f8ea 	bl	8009af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SafetySwitch_Pin;
 8007924:	2380      	movs	r3, #128	; 0x80
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007928:	4b13      	ldr	r3, [pc, #76]	; (8007978 <MX_GPIO_Init+0x258>)
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800792c:	2302      	movs	r3, #2
 800792e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SafetySwitch_GPIO_Port, &GPIO_InitStruct);
 8007930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007934:	4619      	mov	r1, r3
 8007936:	4813      	ldr	r0, [pc, #76]	; (8007984 <MX_GPIO_Init+0x264>)
 8007938:	f002 f8de 	bl	8009af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800793c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007942:	2302      	movs	r3, #2
 8007944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007946:	2300      	movs	r3, #0
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800794a:	2303      	movs	r3, #3
 800794c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800794e:	230b      	movs	r3, #11
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007956:	4619      	mov	r1, r3
 8007958:	4806      	ldr	r0, [pc, #24]	; (8007974 <MX_GPIO_Init+0x254>)
 800795a:	f002 f8cd 	bl	8009af8 <HAL_GPIO_Init>

}
 800795e:	bf00      	nop
 8007960:	3738      	adds	r7, #56	; 0x38
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40023800 	.word	0x40023800
 800796c:	40020400 	.word	0x40020400
 8007970:	40021400 	.word	0x40021400
 8007974:	40021800 	.word	0x40021800
 8007978:	10110000 	.word	0x10110000
 800797c:	40020800 	.word	0x40020800
 8007980:	40020000 	.word	0x40020000
 8007984:	40020c00 	.word	0x40020c00

08007988 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800798c:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <MX_I2C1_Init+0x74>)
 800798e:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <MX_I2C1_Init+0x78>)
 8007990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007992:	4b1a      	ldr	r3, [pc, #104]	; (80079fc <MX_I2C1_Init+0x74>)
 8007994:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <MX_I2C1_Init+0x7c>)
 8007996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007998:	4b18      	ldr	r3, [pc, #96]	; (80079fc <MX_I2C1_Init+0x74>)
 800799a:	2200      	movs	r2, #0
 800799c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800799e:	4b17      	ldr	r3, [pc, #92]	; (80079fc <MX_I2C1_Init+0x74>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80079a4:	4b15      	ldr	r3, [pc, #84]	; (80079fc <MX_I2C1_Init+0x74>)
 80079a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80079aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80079ac:	4b13      	ldr	r3, [pc, #76]	; (80079fc <MX_I2C1_Init+0x74>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80079b2:	4b12      	ldr	r3, [pc, #72]	; (80079fc <MX_I2C1_Init+0x74>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <MX_I2C1_Init+0x74>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <MX_I2C1_Init+0x74>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80079c4:	480d      	ldr	r0, [pc, #52]	; (80079fc <MX_I2C1_Init+0x74>)
 80079c6:	f002 fa8d 	bl	8009ee4 <HAL_I2C_Init>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80079d0:	f000 fa40 	bl	8007e54 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80079d4:	2100      	movs	r1, #0
 80079d6:	4809      	ldr	r0, [pc, #36]	; (80079fc <MX_I2C1_Init+0x74>)
 80079d8:	f005 f955 	bl	800cc86 <HAL_I2CEx_ConfigAnalogFilter>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80079e2:	f000 fa37 	bl	8007e54 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80079e6:	2100      	movs	r1, #0
 80079e8:	4804      	ldr	r0, [pc, #16]	; (80079fc <MX_I2C1_Init+0x74>)
 80079ea:	f005 f988 	bl	800ccfe <HAL_I2CEx_ConfigDigitalFilter>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80079f4:	f000 fa2e 	bl	8007e54 <Error_Handler>
  }

}
 80079f8:	bf00      	nop
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20005384 	.word	0x20005384
 8007a00:	40005400 	.word	0x40005400
 8007a04:	00061a80 	.word	0x00061a80

08007a08 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8007a0c:	4b1b      	ldr	r3, [pc, #108]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a0e:	4a1c      	ldr	r2, [pc, #112]	; (8007a80 <MX_I2C2_Init+0x78>)
 8007a10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007a12:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a14:	4a1b      	ldr	r2, [pc, #108]	; (8007a84 <MX_I2C2_Init+0x7c>)
 8007a16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007a18:	4b18      	ldr	r3, [pc, #96]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007a1e:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007a24:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007a2c:	4b13      	ldr	r3, [pc, #76]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007a32:	4b12      	ldr	r3, [pc, #72]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007a38:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007a3e:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007a44:	480d      	ldr	r0, [pc, #52]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a46:	f002 fa4d 	bl	8009ee4 <HAL_I2C_Init>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8007a50:	f000 fa00 	bl	8007e54 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007a54:	2100      	movs	r1, #0
 8007a56:	4809      	ldr	r0, [pc, #36]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a58:	f005 f915 	bl	800cc86 <HAL_I2CEx_ConfigAnalogFilter>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8007a62:	f000 f9f7 	bl	8007e54 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007a66:	2100      	movs	r1, #0
 8007a68:	4804      	ldr	r0, [pc, #16]	; (8007a7c <MX_I2C2_Init+0x74>)
 8007a6a:	f005 f948 	bl	800ccfe <HAL_I2CEx_ConfigDigitalFilter>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8007a74:	f000 f9ee 	bl	8007e54 <Error_Handler>
  }

}
 8007a78:	bf00      	nop
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	200053d8 	.word	0x200053d8
 8007a80:	40005800 	.word	0x40005800
 8007a84:	00061a80 	.word	0x00061a80

08007a88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08c      	sub	sp, #48	; 0x30
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a90:	f107 031c 	add.w	r3, r7, #28
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	605a      	str	r2, [r3, #4]
 8007a9a:	609a      	str	r2, [r3, #8]
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a49      	ldr	r2, [pc, #292]	; (8007bcc <HAL_I2C_MspInit+0x144>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d15b      	bne.n	8007b62 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	4b48      	ldr	r3, [pc, #288]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	4a47      	ldr	r2, [pc, #284]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007ab4:	f043 0302 	orr.w	r3, r3, #2
 8007ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8007aba:	4b45      	ldr	r3, [pc, #276]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8007ac6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007acc:	2312      	movs	r3, #18
 8007ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007ad8:	2304      	movs	r3, #4
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007adc:	f107 031c 	add.w	r3, r7, #28
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	483c      	ldr	r0, [pc, #240]	; (8007bd4 <HAL_I2C_MspInit+0x14c>)
 8007ae4:	f002 f808 	bl	8009af8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	4b38      	ldr	r3, [pc, #224]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	4a37      	ldr	r2, [pc, #220]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007af6:	6413      	str	r3, [r2, #64]	; 0x40
 8007af8:	4b35      	ldr	r3, [pc, #212]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b00:	617b      	str	r3, [r7, #20]
 8007b02:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8007b04:	4b34      	ldr	r3, [pc, #208]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b06:	4a35      	ldr	r2, [pc, #212]	; (8007bdc <HAL_I2C_MspInit+0x154>)
 8007b08:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8007b0a:	4b33      	ldr	r3, [pc, #204]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b10:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b12:	4b31      	ldr	r3, [pc, #196]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b18:	4b2f      	ldr	r3, [pc, #188]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b1e:	4b2e      	ldr	r3, [pc, #184]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b24:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b26:	4b2c      	ldr	r3, [pc, #176]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b2c:	4b2a      	ldr	r3, [pc, #168]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007b32:	4b29      	ldr	r3, [pc, #164]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b38:	4b27      	ldr	r3, [pc, #156]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007b3e:	4b26      	ldr	r3, [pc, #152]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007b44:	4824      	ldr	r0, [pc, #144]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b46:	f001 fc2d 	bl	80093a4 <HAL_DMA_Init>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8007b50:	f000 f980 	bl	8007e54 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a20      	ldr	r2, [pc, #128]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38
 8007b5a:	4a1f      	ldr	r2, [pc, #124]	; (8007bd8 <HAL_I2C_MspInit+0x150>)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007b60:	e030      	b.n	8007bc4 <HAL_I2C_MspInit+0x13c>
  else if(i2cHandle->Instance==I2C2)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a1e      	ldr	r2, [pc, #120]	; (8007be0 <HAL_I2C_MspInit+0x158>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d12b      	bne.n	8007bc4 <HAL_I2C_MspInit+0x13c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	4a16      	ldr	r2, [pc, #88]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007b76:	f043 0320 	orr.w	r3, r3, #32
 8007b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8007b7c:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b8c:	2312      	movs	r3, #18
 8007b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b90:	2301      	movs	r3, #1
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b94:	2303      	movs	r3, #3
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007b98:	2304      	movs	r3, #4
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007b9c:	f107 031c 	add.w	r3, r7, #28
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4810      	ldr	r0, [pc, #64]	; (8007be4 <HAL_I2C_MspInit+0x15c>)
 8007ba4:	f001 ffa8 	bl	8009af8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	4b08      	ldr	r3, [pc, #32]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	4a07      	ldr	r2, [pc, #28]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8007bb8:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <HAL_I2C_MspInit+0x148>)
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
}
 8007bc4:	bf00      	nop
 8007bc6:	3730      	adds	r7, #48	; 0x30
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	40005400 	.word	0x40005400
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	40020400 	.word	0x40020400
 8007bd8:	2000542c 	.word	0x2000542c
 8007bdc:	40026088 	.word	0x40026088
 8007be0:	40005800 	.word	0x40005800
 8007be4:	40021400 	.word	0x40021400

08007be8 <msOverFlow>:

static __inline void msOverFlow(){
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <msOverFlow+0x18>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	4a03      	ldr	r2, [pc, #12]	; (8007c00 <msOverFlow+0x18>)
 8007bf4:	6013      	str	r3, [r2, #0]
}
 8007bf6:	bf00      	nop
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	20000a30 	.word	0x20000a30

08007c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c08:	f001 fa86 	bl	8009118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c0c:	f000 f82c 	bl	8007c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c10:	f7ff fd86 	bl	8007720 <MX_GPIO_Init>
  MX_DMA_Init();
 8007c14:	f7ff fd42 	bl	800769c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8007c18:	f001 f828 	bl	8008c6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8007c1c:	f001 f9ca 	bl	8008fb4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8007c20:	f7ff feb2 	bl	8007988 <MX_I2C1_Init>
  MX_TIM3_Init();
 8007c24:	f000 fc94 	bl	8008550 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007c28:	f000 fd14 	bl	8008654 <MX_TIM4_Init>
  MX_UART7_Init();
 8007c2c:	f000 ff9c 	bl	8008b68 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8007c30:	f000 fff2 	bl	8008c18 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8007c34:	f7ff fee8 	bl	8007a08 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007c38:	f000 fc3e 	bl	80084b8 <MX_TIM2_Init>
  MX_TIM10_Init();
 8007c3c:	f000 fdf2 	bl	8008824 <MX_TIM10_Init>
  MX_UART8_Init();
 8007c40:	f000 ffc0 	bl	8008bc4 <MX_UART8_Init>
  MX_SDIO_SD_Init();
 8007c44:	f000 f90e 	bl	8007e64 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8007c48:	f00a f9ec 	bl	8012024 <MX_FATFS_Init>
  MX_TIM9_Init();
 8007c4c:	f000 fd9a 	bl	8008784 <MX_TIM9_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8007c50:	f000 f874 	bl	8007d3c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  cppMain();
 8007c54:	f7fe fe90 	bl	8006978 <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8007c58:	f00c ffee 	bl	8014c38 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8007c5c:	f7ff fd46 	bl	80076ec <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8007c60:	f00d f840 	bl	8014ce4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007c64:	e7fe      	b.n	8007c64 <main+0x60>
	...

08007c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b094      	sub	sp, #80	; 0x50
 8007c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c6e:	f107 0320 	add.w	r3, r7, #32
 8007c72:	2230      	movs	r2, #48	; 0x30
 8007c74:	2100      	movs	r1, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f011 fdfd 	bl	8019876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c7c:	f107 030c 	add.w	r3, r7, #12
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	605a      	str	r2, [r3, #4]
 8007c86:	609a      	str	r2, [r3, #8]
 8007c88:	60da      	str	r2, [r3, #12]
 8007c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60bb      	str	r3, [r7, #8]
 8007c90:	4b28      	ldr	r3, [pc, #160]	; (8007d34 <SystemClock_Config+0xcc>)
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	4a27      	ldr	r2, [pc, #156]	; (8007d34 <SystemClock_Config+0xcc>)
 8007c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8007c9c:	4b25      	ldr	r3, [pc, #148]	; (8007d34 <SystemClock_Config+0xcc>)
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca4:	60bb      	str	r3, [r7, #8]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ca8:	2300      	movs	r3, #0
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	4b22      	ldr	r3, [pc, #136]	; (8007d38 <SystemClock_Config+0xd0>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a21      	ldr	r2, [pc, #132]	; (8007d38 <SystemClock_Config+0xd0>)
 8007cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	4b1f      	ldr	r3, [pc, #124]	; (8007d38 <SystemClock_Config+0xd0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007cc0:	607b      	str	r3, [r7, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007cce:	2302      	movs	r3, #2
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007cd8:	2308      	movs	r3, #8
 8007cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007cdc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007ce0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007ce6:	2307      	movs	r3, #7
 8007ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007cea:	f107 0320 	add.w	r3, r7, #32
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f005 f962 	bl	800cfb8 <HAL_RCC_OscConfig>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007cfa:	f000 f8ab 	bl	8007e54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007cfe:	230f      	movs	r3, #15
 8007d00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d02:	2302      	movs	r3, #2
 8007d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d06:	2300      	movs	r3, #0
 8007d08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007d0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007d16:	f107 030c 	add.w	r3, r7, #12
 8007d1a:	2105      	movs	r1, #5
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f005 fbbb 	bl	800d498 <HAL_RCC_ClockConfig>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8007d28:	f000 f894 	bl	8007e54 <Error_Handler>
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	3750      	adds	r7, #80	; 0x50
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	40023800 	.word	0x40023800
 8007d38:	40007000 	.word	0x40007000

08007d3c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8007d40:	2200      	movs	r2, #0
 8007d42:	2105      	movs	r1, #5
 8007d44:	201f      	movs	r0, #31
 8007d46:	f001 fb03 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007d4a:	201f      	movs	r0, #31
 8007d4c:	f001 fb1c 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8007d50:	2200      	movs	r2, #0
 8007d52:	2105      	movs	r1, #5
 8007d54:	2020      	movs	r0, #32
 8007d56:	f001 fafb 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007d5a:	2020      	movs	r0, #32
 8007d5c:	f001 fb14 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8007d60:	2200      	movs	r2, #0
 8007d62:	2105      	movs	r1, #5
 8007d64:	2052      	movs	r0, #82	; 0x52
 8007d66:	f001 faf3 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 8007d6a:	2052      	movs	r0, #82	; 0x52
 8007d6c:	f001 fb0c 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8007d70:	2200      	movs	r2, #0
 8007d72:	2105      	movs	r1, #5
 8007d74:	2021      	movs	r0, #33	; 0x21
 8007d76:	f001 faeb 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007d7a:	2021      	movs	r0, #33	; 0x21
 8007d7c:	f001 fb04 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* I2C2_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8007d80:	2200      	movs	r2, #0
 8007d82:	2105      	movs	r1, #5
 8007d84:	2022      	movs	r0, #34	; 0x22
 8007d86:	f001 fae3 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8007d8a:	2022      	movs	r0, #34	; 0x22
 8007d8c:	f001 fafc 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* SDIO_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SDIO_IRQn, 15, 0);
 8007d90:	2200      	movs	r2, #0
 8007d92:	210f      	movs	r1, #15
 8007d94:	2031      	movs	r0, #49	; 0x31
 8007d96:	f001 fadb 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007d9a:	2031      	movs	r0, #49	; 0x31
 8007d9c:	f001 faf4 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8007da0:	2200      	movs	r2, #0
 8007da2:	2105      	movs	r1, #5
 8007da4:	200e      	movs	r0, #14
 8007da6:	f001 fad3 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8007daa:	200e      	movs	r0, #14
 8007dac:	f001 faec 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8007db0:	2200      	movs	r2, #0
 8007db2:	2105      	movs	r1, #5
 8007db4:	2011      	movs	r0, #17
 8007db6:	f001 facb 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8007dba:	2011      	movs	r0, #17
 8007dbc:	f001 fae4 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2105      	movs	r1, #5
 8007dc4:	2010      	movs	r0, #16
 8007dc6:	f001 fac3 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007dca:	2010      	movs	r0, #16
 8007dcc:	f001 fadc 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 15, 0);
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	210f      	movs	r1, #15
 8007dd4:	203b      	movs	r0, #59	; 0x3b
 8007dd6:	f001 fabb 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007dda:	203b      	movs	r0, #59	; 0x3b
 8007ddc:	f001 fad4 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 15, 0);
 8007de0:	2200      	movs	r2, #0
 8007de2:	210f      	movs	r1, #15
 8007de4:	2045      	movs	r0, #69	; 0x45
 8007de6:	f001 fab3 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8007dea:	2045      	movs	r0, #69	; 0x45
 8007dec:	f001 facc 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8007df0:	2200      	movs	r2, #0
 8007df2:	2105      	movs	r1, #5
 8007df4:	2018      	movs	r0, #24
 8007df6:	f001 faab 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007dfa:	2018      	movs	r0, #24
 8007dfc:	f001 fac4 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8007e00:	2200      	movs	r2, #0
 8007e02:	2105      	movs	r1, #5
 8007e04:	201c      	movs	r0, #28
 8007e06:	f001 faa3 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007e0a:	201c      	movs	r0, #28
 8007e0c:	f001 fabc 	bl	8009388 <HAL_NVIC_EnableIRQ>
  /* UART8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8007e10:	2200      	movs	r2, #0
 8007e12:	2105      	movs	r1, #5
 8007e14:	2053      	movs	r0, #83	; 0x53
 8007e16:	f001 fa9b 	bl	8009350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART8_IRQn);
 8007e1a:	2053      	movs	r0, #83	; 0x53
 8007e1c:	f001 fab4 	bl	8009388 <HAL_NVIC_EnableIRQ>
}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	/* microseond timer */
  if(htim->Instance == TIM2){
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_PeriodElapsedCallback+0x16>
	  msOverFlow();
 8007e36:	f7ff fed7 	bl	8007be8 <msOverFlow>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a04      	ldr	r2, [pc, #16]	; (8007e50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d101      	bne.n	8007e48 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8007e44:	f001 f98a 	bl	800915c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	40001000 	.word	0x40001000

08007e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007e58:	bf00      	nop
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
	...

08007e64 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8007e68:	4b0c      	ldr	r3, [pc, #48]	; (8007e9c <MX_SDIO_SD_Init+0x38>)
 8007e6a:	4a0d      	ldr	r2, [pc, #52]	; (8007ea0 <MX_SDIO_SD_Init+0x3c>)
 8007e6c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8007e6e:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <MX_SDIO_SD_Init+0x38>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007e74:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <MX_SDIO_SD_Init+0x38>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007e7a:	4b08      	ldr	r3, [pc, #32]	; (8007e9c <MX_SDIO_SD_Init+0x38>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <MX_SDIO_SD_Init+0x38>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <MX_SDIO_SD_Init+0x38>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8007e8c:	4b03      	ldr	r3, [pc, #12]	; (8007e9c <MX_SDIO_SD_Init+0x38>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	619a      	str	r2, [r3, #24]

}
 8007e92:	bf00      	nop
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	2000554c 	.word	0x2000554c
 8007ea0:	40012c00 	.word	0x40012c00

08007ea4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08a      	sub	sp, #40	; 0x28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eac:	f107 0314 	add.w	r3, r7, #20
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	605a      	str	r2, [r3, #4]
 8007eb6:	609a      	str	r2, [r3, #8]
 8007eb8:	60da      	str	r2, [r3, #12]
 8007eba:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a6c      	ldr	r2, [pc, #432]	; (8008074 <HAL_SD_MspInit+0x1d0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	f040 80d2 	bne.w	800806c <HAL_SD_MspInit+0x1c8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007ec8:	2300      	movs	r3, #0
 8007eca:	613b      	str	r3, [r7, #16]
 8007ecc:	4b6a      	ldr	r3, [pc, #424]	; (8008078 <HAL_SD_MspInit+0x1d4>)
 8007ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed0:	4a69      	ldr	r2, [pc, #420]	; (8008078 <HAL_SD_MspInit+0x1d4>)
 8007ed2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ed6:	6453      	str	r3, [r2, #68]	; 0x44
 8007ed8:	4b67      	ldr	r3, [pc, #412]	; (8008078 <HAL_SD_MspInit+0x1d4>)
 8007eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	4b63      	ldr	r3, [pc, #396]	; (8008078 <HAL_SD_MspInit+0x1d4>)
 8007eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eec:	4a62      	ldr	r2, [pc, #392]	; (8008078 <HAL_SD_MspInit+0x1d4>)
 8007eee:	f043 0304 	orr.w	r3, r3, #4
 8007ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ef4:	4b60      	ldr	r3, [pc, #384]	; (8008078 <HAL_SD_MspInit+0x1d4>)
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f00:	2300      	movs	r3, #0
 8007f02:	60bb      	str	r3, [r7, #8]
 8007f04:	4b5c      	ldr	r3, [pc, #368]	; (8008078 <HAL_SD_MspInit+0x1d4>)
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	4a5b      	ldr	r2, [pc, #364]	; (8008078 <HAL_SD_MspInit+0x1d4>)
 8007f0a:	f043 0308 	orr.w	r3, r3, #8
 8007f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8007f10:	4b59      	ldr	r3, [pc, #356]	; (8008078 <HAL_SD_MspInit+0x1d4>)
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	60bb      	str	r3, [r7, #8]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8007f1c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f22:	2302      	movs	r3, #2
 8007f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f26:	2301      	movs	r3, #1
 8007f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007f2e:	230c      	movs	r3, #12
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f32:	f107 0314 	add.w	r3, r7, #20
 8007f36:	4619      	mov	r1, r3
 8007f38:	4850      	ldr	r0, [pc, #320]	; (800807c <HAL_SD_MspInit+0x1d8>)
 8007f3a:	f001 fddd 	bl	8009af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f44:	2302      	movs	r3, #2
 8007f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007f50:	230c      	movs	r3, #12
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f54:	f107 0314 	add.w	r3, r7, #20
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4848      	ldr	r0, [pc, #288]	; (800807c <HAL_SD_MspInit+0x1d8>)
 8007f5c:	f001 fdcc 	bl	8009af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007f60:	2304      	movs	r3, #4
 8007f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f64:	2302      	movs	r3, #2
 8007f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007f70:	230c      	movs	r3, #12
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f74:	f107 0314 	add.w	r3, r7, #20
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4841      	ldr	r0, [pc, #260]	; (8008080 <HAL_SD_MspInit+0x1dc>)
 8007f7c:	f001 fdbc 	bl	8009af8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8007f80:	4b40      	ldr	r3, [pc, #256]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007f82:	4a41      	ldr	r2, [pc, #260]	; (8008088 <HAL_SD_MspInit+0x1e4>)
 8007f84:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007f86:	4b3f      	ldr	r3, [pc, #252]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007f88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f8c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f8e:	4b3d      	ldr	r3, [pc, #244]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f94:	4b3b      	ldr	r3, [pc, #236]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007f9a:	4b3a      	ldr	r3, [pc, #232]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fa0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007fa2:	4b38      	ldr	r3, [pc, #224]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007fa8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007faa:	4b36      	ldr	r3, [pc, #216]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fb0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007fb2:	4b34      	ldr	r3, [pc, #208]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007fb8:	4b32      	ldr	r3, [pc, #200]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007fbe:	4b31      	ldr	r3, [pc, #196]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007fc4:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007fca:	4b2e      	ldr	r3, [pc, #184]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fcc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007fd2:	4b2c      	ldr	r3, [pc, #176]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fd4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007fd8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007fda:	482a      	ldr	r0, [pc, #168]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fdc:	f001 f9e2 	bl	80093a4 <HAL_DMA_Init>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8007fe6:	f7ff ff35 	bl	8007e54 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a25      	ldr	r2, [pc, #148]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007fee:	641a      	str	r2, [r3, #64]	; 0x40
 8007ff0:	4a24      	ldr	r2, [pc, #144]	; (8008084 <HAL_SD_MspInit+0x1e0>)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007ff6:	4b25      	ldr	r3, [pc, #148]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8007ff8:	4a25      	ldr	r2, [pc, #148]	; (8008090 <HAL_SD_MspInit+0x1ec>)
 8007ffa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007ffc:	4b23      	ldr	r3, [pc, #140]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8007ffe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008002:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008004:	4b21      	ldr	r3, [pc, #132]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8008006:	2240      	movs	r2, #64	; 0x40
 8008008:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800800a:	4b20      	ldr	r3, [pc, #128]	; (800808c <HAL_SD_MspInit+0x1e8>)
 800800c:	2200      	movs	r2, #0
 800800e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008010:	4b1e      	ldr	r3, [pc, #120]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8008012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008016:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008018:	4b1c      	ldr	r3, [pc, #112]	; (800808c <HAL_SD_MspInit+0x1e8>)
 800801a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800801e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008020:	4b1a      	ldr	r3, [pc, #104]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8008022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008026:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8008028:	4b18      	ldr	r3, [pc, #96]	; (800808c <HAL_SD_MspInit+0x1e8>)
 800802a:	2220      	movs	r2, #32
 800802c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800802e:	4b17      	ldr	r3, [pc, #92]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8008030:	2200      	movs	r2, #0
 8008032:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008034:	4b15      	ldr	r3, [pc, #84]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8008036:	2204      	movs	r2, #4
 8008038:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800803a:	4b14      	ldr	r3, [pc, #80]	; (800808c <HAL_SD_MspInit+0x1e8>)
 800803c:	2203      	movs	r2, #3
 800803e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8008040:	4b12      	ldr	r3, [pc, #72]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8008042:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008046:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8008048:	4b10      	ldr	r3, [pc, #64]	; (800808c <HAL_SD_MspInit+0x1e8>)
 800804a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800804e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8008050:	480e      	ldr	r0, [pc, #56]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8008052:	f001 f9a7 	bl	80093a4 <HAL_DMA_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800805c:	f7ff fefa 	bl	8007e54 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a0a      	ldr	r2, [pc, #40]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8008064:	63da      	str	r2, [r3, #60]	; 0x3c
 8008066:	4a09      	ldr	r2, [pc, #36]	; (800808c <HAL_SD_MspInit+0x1e8>)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800806c:	bf00      	nop
 800806e:	3728      	adds	r7, #40	; 0x28
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40023800 	.word	0x40023800
 800807c:	40020800 	.word	0x40020800
 8008080:	40020c00 	.word	0x40020c00
 8008084:	2000548c 	.word	0x2000548c
 8008088:	40026458 	.word	0x40026458
 800808c:	200054ec 	.word	0x200054ec
 8008090:	400264a0 	.word	0x400264a0

08008094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800809a:	2300      	movs	r3, #0
 800809c:	607b      	str	r3, [r7, #4]
 800809e:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <HAL_MspInit+0x54>)
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	4a11      	ldr	r2, [pc, #68]	; (80080e8 <HAL_MspInit+0x54>)
 80080a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080a8:	6453      	str	r3, [r2, #68]	; 0x44
 80080aa:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <HAL_MspInit+0x54>)
 80080ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080b2:	607b      	str	r3, [r7, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080b6:	2300      	movs	r3, #0
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <HAL_MspInit+0x54>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	4a0a      	ldr	r2, [pc, #40]	; (80080e8 <HAL_MspInit+0x54>)
 80080c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c4:	6413      	str	r3, [r2, #64]	; 0x40
 80080c6:	4b08      	ldr	r3, [pc, #32]	; (80080e8 <HAL_MspInit+0x54>)
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80080d2:	2200      	movs	r2, #0
 80080d4:	210f      	movs	r1, #15
 80080d6:	f06f 0001 	mvn.w	r0, #1
 80080da:	f001 f939 	bl	8009350 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	40023800 	.word	0x40023800

080080ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08c      	sub	sp, #48	; 0x30
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80080fc:	2200      	movs	r2, #0
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	2036      	movs	r0, #54	; 0x36
 8008102:	f001 f925 	bl	8009350 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8008106:	2036      	movs	r0, #54	; 0x36
 8008108:	f001 f93e 	bl	8009388 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800810c:	2300      	movs	r3, #0
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	4b1f      	ldr	r3, [pc, #124]	; (8008190 <HAL_InitTick+0xa4>)
 8008112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008114:	4a1e      	ldr	r2, [pc, #120]	; (8008190 <HAL_InitTick+0xa4>)
 8008116:	f043 0310 	orr.w	r3, r3, #16
 800811a:	6413      	str	r3, [r2, #64]	; 0x40
 800811c:	4b1c      	ldr	r3, [pc, #112]	; (8008190 <HAL_InitTick+0xa4>)
 800811e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008120:	f003 0310 	and.w	r3, r3, #16
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008128:	f107 0210 	add.w	r2, r7, #16
 800812c:	f107 0314 	add.w	r3, r7, #20
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f005 fba2 	bl	800d87c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008138:	f005 fb78 	bl	800d82c <HAL_RCC_GetPCLK1Freq>
 800813c:	4603      	mov	r3, r0
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	4a13      	ldr	r2, [pc, #76]	; (8008194 <HAL_InitTick+0xa8>)
 8008146:	fba2 2303 	umull	r2, r3, r2, r3
 800814a:	0c9b      	lsrs	r3, r3, #18
 800814c:	3b01      	subs	r3, #1
 800814e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008150:	4b11      	ldr	r3, [pc, #68]	; (8008198 <HAL_InitTick+0xac>)
 8008152:	4a12      	ldr	r2, [pc, #72]	; (800819c <HAL_InitTick+0xb0>)
 8008154:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8008156:	4b10      	ldr	r3, [pc, #64]	; (8008198 <HAL_InitTick+0xac>)
 8008158:	f240 32e7 	movw	r2, #999	; 0x3e7
 800815c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800815e:	4a0e      	ldr	r2, [pc, #56]	; (8008198 <HAL_InitTick+0xac>)
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008164:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <HAL_InitTick+0xac>)
 8008166:	2200      	movs	r2, #0
 8008168:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800816a:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <HAL_InitTick+0xac>)
 800816c:	2200      	movs	r2, #0
 800816e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8008170:	4809      	ldr	r0, [pc, #36]	; (8008198 <HAL_InitTick+0xac>)
 8008172:	f006 feb3 	bl	800eedc <HAL_TIM_Base_Init>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800817c:	4806      	ldr	r0, [pc, #24]	; (8008198 <HAL_InitTick+0xac>)
 800817e:	f006 fed8 	bl	800ef32 <HAL_TIM_Base_Start_IT>
 8008182:	4603      	mov	r3, r0
 8008184:	e000      	b.n	8008188 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
}
 8008188:	4618      	mov	r0, r3
 800818a:	3730      	adds	r7, #48	; 0x30
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	40023800 	.word	0x40023800
 8008194:	431bde83 	.word	0x431bde83
 8008198:	200055d0 	.word	0x200055d0
 800819c:	40001000 	.word	0x40001000

080081a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081ae:	b480      	push	{r7}
 80081b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081b2:	e7fe      	b.n	80081b2 <HardFault_Handler+0x4>

080081b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081b8:	e7fe      	b.n	80081b8 <MemManage_Handler+0x4>

080081ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081ba:	b480      	push	{r7}
 80081bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081be:	e7fe      	b.n	80081be <BusFault_Handler+0x4>

080081c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081c4:	e7fe      	b.n	80081c4 <UsageFault_Handler+0x4>

080081c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081c6:	b480      	push	{r7}
 80081c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081ca:	bf00      	nop
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80081d8:	4802      	ldr	r0, [pc, #8]	; (80081e4 <DMA1_Stream3_IRQHandler+0x10>)
 80081da:	f001 fa0b 	bl	80095f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80081de:	bf00      	nop
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	200057d0 	.word	0x200057d0

080081e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80081ec:	4802      	ldr	r0, [pc, #8]	; (80081f8 <DMA1_Stream5_IRQHandler+0x10>)
 80081ee:	f001 fa01 	bl	80095f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80081f2:	bf00      	nop
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	2000542c 	.word	0x2000542c

080081fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8008200:	4802      	ldr	r0, [pc, #8]	; (800820c <DMA1_Stream6_IRQHandler+0x10>)
 8008202:	f001 f9f7 	bl	80095f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20005830 	.word	0x20005830

08008210 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8008214:	4802      	ldr	r0, [pc, #8]	; (8008220 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8008216:	f006 ff79 	bl	800f10c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800821a:	bf00      	nop
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	200056d0 	.word	0x200056d0

08008224 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008228:	4802      	ldr	r0, [pc, #8]	; (8008234 <TIM2_IRQHandler+0x10>)
 800822a:	f006 ff6f 	bl	800f10c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800822e:	bf00      	nop
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20005710 	.word	0x20005710

08008238 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800823c:	4802      	ldr	r0, [pc, #8]	; (8008248 <I2C1_EV_IRQHandler+0x10>)
 800823e:	f002 fcb3 	bl	800aba8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8008242:	bf00      	nop
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20005384 	.word	0x20005384

0800824c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8008250:	4802      	ldr	r0, [pc, #8]	; (800825c <I2C1_ER_IRQHandler+0x10>)
 8008252:	f002 fe0f 	bl	800ae74 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008256:	bf00      	nop
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20005384 	.word	0x20005384

08008260 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8008264:	4802      	ldr	r0, [pc, #8]	; (8008270 <I2C2_EV_IRQHandler+0x10>)
 8008266:	f002 fc9f 	bl	800aba8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800826a:	bf00      	nop
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	200053d8 	.word	0x200053d8

08008274 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8008278:	4802      	ldr	r0, [pc, #8]	; (8008284 <I2C2_ER_IRQHandler+0x10>)
 800827a:	f002 fdfb 	bl	800ae74 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800827e:	bf00      	nop
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	200053d8 	.word	0x200053d8

08008288 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800828c:	4802      	ldr	r0, [pc, #8]	; (8008298 <USART3_IRQHandler+0x10>)
 800828e:	f008 f859 	bl	8010344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008292:	bf00      	nop
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20005790 	.word	0x20005790

0800829c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80082a0:	4802      	ldr	r0, [pc, #8]	; (80082ac <SDIO_IRQHandler+0x10>)
 80082a2:	f005 fd87 	bl	800ddb4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80082a6:	bf00      	nop
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	2000554c 	.word	0x2000554c

080082b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80082b4:	4802      	ldr	r0, [pc, #8]	; (80082c0 <TIM6_DAC_IRQHandler+0x10>)
 80082b6:	f006 ff29 	bl	800f10c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80082ba:	bf00      	nop
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	200055d0 	.word	0x200055d0

080082c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80082c8:	4802      	ldr	r0, [pc, #8]	; (80082d4 <DMA2_Stream3_IRQHandler+0x10>)
 80082ca:	f001 f993 	bl	80095f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80082ce:	bf00      	nop
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	2000548c 	.word	0x2000548c

080082d8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80082dc:	4802      	ldr	r0, [pc, #8]	; (80082e8 <DMA2_Stream6_IRQHandler+0x10>)
 80082de:	f001 f989 	bl	80095f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80082e2:	bf00      	nop
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	200054ec 	.word	0x200054ec

080082ec <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80082f0:	4802      	ldr	r0, [pc, #8]	; (80082fc <UART7_IRQHandler+0x10>)
 80082f2:	f008 f827 	bl	8010344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80082f6:	bf00      	nop
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20005750 	.word	0x20005750

08008300 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8008304:	4802      	ldr	r0, [pc, #8]	; (8008310 <UART8_IRQHandler+0x10>)
 8008306:	f008 f81d 	bl	8010344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800830a:	bf00      	nop
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20005890 	.word	0x20005890

08008314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008314:	b480      	push	{r7}
 8008316:	af00      	add	r7, sp, #0
	return 1;
 8008318:	2301      	movs	r3, #1
}
 800831a:	4618      	mov	r0, r3
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <_kill>:

int _kill(int pid, int sig)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800832e:	f011 fa5b 	bl	80197e8 <__errno>
 8008332:	4602      	mov	r2, r0
 8008334:	2316      	movs	r3, #22
 8008336:	6013      	str	r3, [r2, #0]
	return -1;
 8008338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <_exit>:

void _exit (int status)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800834c:	f04f 31ff 	mov.w	r1, #4294967295
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff ffe7 	bl	8008324 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008356:	e7fe      	b.n	8008356 <_exit+0x12>

08008358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	e00a      	b.n	8008380 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800836a:	f3af 8000 	nop.w
 800836e:	4601      	mov	r1, r0
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	60ba      	str	r2, [r7, #8]
 8008376:	b2ca      	uxtb	r2, r1
 8008378:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	3301      	adds	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	429a      	cmp	r2, r3
 8008386:	dbf0      	blt.n	800836a <_read+0x12>
	}

return len;
 8008388:	687b      	ldr	r3, [r7, #4]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b086      	sub	sp, #24
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800839e:	2300      	movs	r3, #0
 80083a0:	617b      	str	r3, [r7, #20]
 80083a2:	e009      	b.n	80083b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	60ba      	str	r2, [r7, #8]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	3301      	adds	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	429a      	cmp	r2, r3
 80083be:	dbf1      	blt.n	80083a4 <_write+0x12>
	}
	return len;
 80083c0:	687b      	ldr	r3, [r7, #4]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <_close>:

int _close(int file)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
	return -1;
 80083d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80083f2:	605a      	str	r2, [r3, #4]
	return 0;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <_isatty>:

int _isatty(int file)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
	return 1;
 800840a:	2301      	movs	r3, #1
}
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
	return 0;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800843c:	4b11      	ldr	r3, [pc, #68]	; (8008484 <_sbrk+0x50>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <_sbrk+0x16>
		heap_end = &end;
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <_sbrk+0x50>)
 8008446:	4a10      	ldr	r2, [pc, #64]	; (8008488 <_sbrk+0x54>)
 8008448:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800844a:	4b0e      	ldr	r3, [pc, #56]	; (8008484 <_sbrk+0x50>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008450:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <_sbrk+0x50>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4413      	add	r3, r2
 8008458:	466a      	mov	r2, sp
 800845a:	4293      	cmp	r3, r2
 800845c:	d907      	bls.n	800846e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800845e:	f011 f9c3 	bl	80197e8 <__errno>
 8008462:	4602      	mov	r2, r0
 8008464:	230c      	movs	r3, #12
 8008466:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008468:	f04f 33ff 	mov.w	r3, #4294967295
 800846c:	e006      	b.n	800847c <_sbrk+0x48>
	}

	heap_end += incr;
 800846e:	4b05      	ldr	r3, [pc, #20]	; (8008484 <_sbrk+0x50>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4413      	add	r3, r2
 8008476:	4a03      	ldr	r2, [pc, #12]	; (8008484 <_sbrk+0x50>)
 8008478:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800847a:	68fb      	ldr	r3, [r7, #12]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000a34 	.word	0x20000a34
 8008488:	20007dd0 	.word	0x20007dd0

0800848c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008490:	4b08      	ldr	r3, [pc, #32]	; (80084b4 <SystemInit+0x28>)
 8008492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008496:	4a07      	ldr	r2, [pc, #28]	; (80084b4 <SystemInit+0x28>)
 8008498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800849c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80084a0:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <SystemInit+0x28>)
 80084a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80084a6:	609a      	str	r2, [r3, #8]
#endif
}
 80084a8:	bf00      	nop
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	e000ed00 	.word	0xe000ed00

080084b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	605a      	str	r2, [r3, #4]
 80084c8:	609a      	str	r2, [r3, #8]
 80084ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084cc:	463b      	mov	r3, r7
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80084d4:	4b1d      	ldr	r3, [pc, #116]	; (800854c <MX_TIM2_Init+0x94>)
 80084d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80084da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80084dc:	4b1b      	ldr	r3, [pc, #108]	; (800854c <MX_TIM2_Init+0x94>)
 80084de:	2253      	movs	r2, #83	; 0x53
 80084e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084e2:	4b1a      	ldr	r3, [pc, #104]	; (800854c <MX_TIM2_Init+0x94>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 80084e8:	4b18      	ldr	r3, [pc, #96]	; (800854c <MX_TIM2_Init+0x94>)
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084f0:	4b16      	ldr	r3, [pc, #88]	; (800854c <MX_TIM2_Init+0x94>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084f6:	4b15      	ldr	r3, [pc, #84]	; (800854c <MX_TIM2_Init+0x94>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80084fc:	4813      	ldr	r0, [pc, #76]	; (800854c <MX_TIM2_Init+0x94>)
 80084fe:	f006 fced 	bl	800eedc <HAL_TIM_Base_Init>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008508:	f7ff fca4 	bl	8007e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800850c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008510:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008512:	f107 0308 	add.w	r3, r7, #8
 8008516:	4619      	mov	r1, r3
 8008518:	480c      	ldr	r0, [pc, #48]	; (800854c <MX_TIM2_Init+0x94>)
 800851a:	f007 f861 	bl	800f5e0 <HAL_TIM_ConfigClockSource>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008524:	f7ff fc96 	bl	8007e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008528:	2300      	movs	r3, #0
 800852a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800852c:	2300      	movs	r3, #0
 800852e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008530:	463b      	mov	r3, r7
 8008532:	4619      	mov	r1, r3
 8008534:	4805      	ldr	r0, [pc, #20]	; (800854c <MX_TIM2_Init+0x94>)
 8008536:	f007 fda7 	bl	8010088 <HAL_TIMEx_MasterConfigSynchronization>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008540:	f7ff fc88 	bl	8007e54 <Error_Handler>
  }

}
 8008544:	bf00      	nop
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	20005710 	.word	0x20005710

08008550 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08e      	sub	sp, #56	; 0x38
 8008554:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	605a      	str	r2, [r3, #4]
 8008560:	609a      	str	r2, [r3, #8]
 8008562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008564:	f107 0320 	add.w	r3, r7, #32
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800856e:	1d3b      	adds	r3, r7, #4
 8008570:	2200      	movs	r2, #0
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	609a      	str	r2, [r3, #8]
 8008578:	60da      	str	r2, [r3, #12]
 800857a:	611a      	str	r2, [r3, #16]
 800857c:	615a      	str	r2, [r3, #20]
 800857e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8008580:	4b32      	ldr	r3, [pc, #200]	; (800864c <MX_TIM3_Init+0xfc>)
 8008582:	4a33      	ldr	r2, [pc, #204]	; (8008650 <MX_TIM3_Init+0x100>)
 8008584:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8008586:	4b31      	ldr	r3, [pc, #196]	; (800864c <MX_TIM3_Init+0xfc>)
 8008588:	2229      	movs	r2, #41	; 0x29
 800858a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800858c:	4b2f      	ldr	r3, [pc, #188]	; (800864c <MX_TIM3_Init+0xfc>)
 800858e:	2200      	movs	r2, #0
 8008590:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8008592:	4b2e      	ldr	r3, [pc, #184]	; (800864c <MX_TIM3_Init+0xfc>)
 8008594:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8008598:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800859a:	4b2c      	ldr	r3, [pc, #176]	; (800864c <MX_TIM3_Init+0xfc>)
 800859c:	2200      	movs	r2, #0
 800859e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085a0:	4b2a      	ldr	r3, [pc, #168]	; (800864c <MX_TIM3_Init+0xfc>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80085a6:	4829      	ldr	r0, [pc, #164]	; (800864c <MX_TIM3_Init+0xfc>)
 80085a8:	f006 fc98 	bl	800eedc <HAL_TIM_Base_Init>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80085b2:	f7ff fc4f 	bl	8007e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80085bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085c0:	4619      	mov	r1, r3
 80085c2:	4822      	ldr	r0, [pc, #136]	; (800864c <MX_TIM3_Init+0xfc>)
 80085c4:	f007 f80c 	bl	800f5e0 <HAL_TIM_ConfigClockSource>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80085ce:	f7ff fc41 	bl	8007e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80085d2:	481e      	ldr	r0, [pc, #120]	; (800864c <MX_TIM3_Init+0xfc>)
 80085d4:	f006 fcd1 	bl	800ef7a <HAL_TIM_PWM_Init>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80085de:	f7ff fc39 	bl	8007e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085e2:	2300      	movs	r3, #0
 80085e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085e6:	2300      	movs	r3, #0
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80085ea:	f107 0320 	add.w	r3, r7, #32
 80085ee:	4619      	mov	r1, r3
 80085f0:	4816      	ldr	r0, [pc, #88]	; (800864c <MX_TIM3_Init+0xfc>)
 80085f2:	f007 fd49 	bl	8010088 <HAL_TIMEx_MasterConfigSynchronization>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80085fc:	f7ff fc2a 	bl	8007e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008600:	2360      	movs	r3, #96	; 0x60
 8008602:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008610:	1d3b      	adds	r3, r7, #4
 8008612:	2200      	movs	r2, #0
 8008614:	4619      	mov	r1, r3
 8008616:	480d      	ldr	r0, [pc, #52]	; (800864c <MX_TIM3_Init+0xfc>)
 8008618:	f006 ff1c 	bl	800f454 <HAL_TIM_PWM_ConfigChannel>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8008622:	f7ff fc17 	bl	8007e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008626:	1d3b      	adds	r3, r7, #4
 8008628:	2204      	movs	r2, #4
 800862a:	4619      	mov	r1, r3
 800862c:	4807      	ldr	r0, [pc, #28]	; (800864c <MX_TIM3_Init+0xfc>)
 800862e:	f006 ff11 	bl	800f454 <HAL_TIM_PWM_ConfigChannel>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8008638:	f7ff fc0c 	bl	8007e54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800863c:	4803      	ldr	r0, [pc, #12]	; (800864c <MX_TIM3_Init+0xfc>)
 800863e:	f000 f9e9 	bl	8008a14 <HAL_TIM_MspPostInit>

}
 8008642:	bf00      	nop
 8008644:	3738      	adds	r7, #56	; 0x38
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20005690 	.word	0x20005690
 8008650:	40000400 	.word	0x40000400

08008654 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08e      	sub	sp, #56	; 0x38
 8008658:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800865a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	605a      	str	r2, [r3, #4]
 8008664:	609a      	str	r2, [r3, #8]
 8008666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008668:	f107 0320 	add.w	r3, r7, #32
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008672:	1d3b      	adds	r3, r7, #4
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	609a      	str	r2, [r3, #8]
 800867c:	60da      	str	r2, [r3, #12]
 800867e:	611a      	str	r2, [r3, #16]
 8008680:	615a      	str	r2, [r3, #20]
 8008682:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8008684:	4b3d      	ldr	r3, [pc, #244]	; (800877c <MX_TIM4_Init+0x128>)
 8008686:	4a3e      	ldr	r2, [pc, #248]	; (8008780 <MX_TIM4_Init+0x12c>)
 8008688:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 800868a:	4b3c      	ldr	r3, [pc, #240]	; (800877c <MX_TIM4_Init+0x128>)
 800868c:	2229      	movs	r2, #41	; 0x29
 800868e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008690:	4b3a      	ldr	r3, [pc, #232]	; (800877c <MX_TIM4_Init+0x128>)
 8008692:	2200      	movs	r2, #0
 8008694:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8008696:	4b39      	ldr	r3, [pc, #228]	; (800877c <MX_TIM4_Init+0x128>)
 8008698:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800869c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800869e:	4b37      	ldr	r3, [pc, #220]	; (800877c <MX_TIM4_Init+0x128>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086a4:	4b35      	ldr	r3, [pc, #212]	; (800877c <MX_TIM4_Init+0x128>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80086aa:	4834      	ldr	r0, [pc, #208]	; (800877c <MX_TIM4_Init+0x128>)
 80086ac:	f006 fc16 	bl	800eedc <HAL_TIM_Base_Init>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80086b6:	f7ff fbcd 	bl	8007e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80086ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80086c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086c4:	4619      	mov	r1, r3
 80086c6:	482d      	ldr	r0, [pc, #180]	; (800877c <MX_TIM4_Init+0x128>)
 80086c8:	f006 ff8a 	bl	800f5e0 <HAL_TIM_ConfigClockSource>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80086d2:	f7ff fbbf 	bl	8007e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80086d6:	4829      	ldr	r0, [pc, #164]	; (800877c <MX_TIM4_Init+0x128>)
 80086d8:	f006 fc4f 	bl	800ef7a <HAL_TIM_PWM_Init>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80086e2:	f7ff fbb7 	bl	8007e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086e6:	2300      	movs	r3, #0
 80086e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086ea:	2300      	movs	r3, #0
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80086ee:	f107 0320 	add.w	r3, r7, #32
 80086f2:	4619      	mov	r1, r3
 80086f4:	4821      	ldr	r0, [pc, #132]	; (800877c <MX_TIM4_Init+0x128>)
 80086f6:	f007 fcc7 	bl	8010088 <HAL_TIMEx_MasterConfigSynchronization>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8008700:	f7ff fba8 	bl	8007e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008704:	2360      	movs	r3, #96	; 0x60
 8008706:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008714:	1d3b      	adds	r3, r7, #4
 8008716:	2200      	movs	r2, #0
 8008718:	4619      	mov	r1, r3
 800871a:	4818      	ldr	r0, [pc, #96]	; (800877c <MX_TIM4_Init+0x128>)
 800871c:	f006 fe9a 	bl	800f454 <HAL_TIM_PWM_ConfigChannel>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8008726:	f7ff fb95 	bl	8007e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800872a:	1d3b      	adds	r3, r7, #4
 800872c:	2204      	movs	r2, #4
 800872e:	4619      	mov	r1, r3
 8008730:	4812      	ldr	r0, [pc, #72]	; (800877c <MX_TIM4_Init+0x128>)
 8008732:	f006 fe8f 	bl	800f454 <HAL_TIM_PWM_ConfigChannel>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800873c:	f7ff fb8a 	bl	8007e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008740:	1d3b      	adds	r3, r7, #4
 8008742:	2208      	movs	r2, #8
 8008744:	4619      	mov	r1, r3
 8008746:	480d      	ldr	r0, [pc, #52]	; (800877c <MX_TIM4_Init+0x128>)
 8008748:	f006 fe84 	bl	800f454 <HAL_TIM_PWM_ConfigChannel>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8008752:	f7ff fb7f 	bl	8007e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008756:	1d3b      	adds	r3, r7, #4
 8008758:	220c      	movs	r2, #12
 800875a:	4619      	mov	r1, r3
 800875c:	4807      	ldr	r0, [pc, #28]	; (800877c <MX_TIM4_Init+0x128>)
 800875e:	f006 fe79 	bl	800f454 <HAL_TIM_PWM_ConfigChannel>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8008768:	f7ff fb74 	bl	8007e54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800876c:	4803      	ldr	r0, [pc, #12]	; (800877c <MX_TIM4_Init+0x128>)
 800876e:	f000 f951 	bl	8008a14 <HAL_TIM_MspPostInit>

}
 8008772:	bf00      	nop
 8008774:	3738      	adds	r7, #56	; 0x38
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20005610 	.word	0x20005610
 8008780:	40000800 	.word	0x40000800

08008784 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef sConfigIC = {0};
 800878a:	463b      	mov	r3, r7
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	605a      	str	r2, [r3, #4]
 8008792:	609a      	str	r2, [r3, #8]
 8008794:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8008796:	4b21      	ldr	r3, [pc, #132]	; (800881c <MX_TIM9_Init+0x98>)
 8008798:	4a21      	ldr	r2, [pc, #132]	; (8008820 <MX_TIM9_Init+0x9c>)
 800879a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 800879c:	4b1f      	ldr	r3, [pc, #124]	; (800881c <MX_TIM9_Init+0x98>)
 800879e:	22a7      	movs	r2, #167	; 0xa7
 80087a0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087a2:	4b1e      	ldr	r3, [pc, #120]	; (800881c <MX_TIM9_Init+0x98>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65536-1;
 80087a8:	4b1c      	ldr	r3, [pc, #112]	; (800881c <MX_TIM9_Init+0x98>)
 80087aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087ae:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087b0:	4b1a      	ldr	r3, [pc, #104]	; (800881c <MX_TIM9_Init+0x98>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087b6:	4b19      	ldr	r3, [pc, #100]	; (800881c <MX_TIM9_Init+0x98>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80087bc:	4817      	ldr	r0, [pc, #92]	; (800881c <MX_TIM9_Init+0x98>)
 80087be:	f006 fc11 	bl	800efe4 <HAL_TIM_IC_Init>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80087c8:	f7ff fb44 	bl	8007e54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80087cc:	2300      	movs	r3, #0
 80087ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80087d0:	2301      	movs	r3, #1
 80087d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80087d8:	230f      	movs	r3, #15
 80087da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80087dc:	463b      	mov	r3, r7
 80087de:	2200      	movs	r2, #0
 80087e0:	4619      	mov	r1, r3
 80087e2:	480e      	ldr	r0, [pc, #56]	; (800881c <MX_TIM9_Init+0x98>)
 80087e4:	f006 fd9a 	bl	800f31c <HAL_TIM_IC_ConfigChannel>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 80087ee:	f7ff fb31 	bl	8007e54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80087f2:	2302      	movs	r3, #2
 80087f4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80087f6:	2302      	movs	r3, #2
 80087f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80087fe:	463b      	mov	r3, r7
 8008800:	2204      	movs	r2, #4
 8008802:	4619      	mov	r1, r3
 8008804:	4805      	ldr	r0, [pc, #20]	; (800881c <MX_TIM9_Init+0x98>)
 8008806:	f006 fd89 	bl	800f31c <HAL_TIM_IC_ConfigChannel>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <MX_TIM9_Init+0x90>
  {
    Error_Handler();
 8008810:	f7ff fb20 	bl	8007e54 <Error_Handler>
  }

}
 8008814:	bf00      	nop
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	200056d0 	.word	0x200056d0
 8008820:	40014000 	.word	0x40014000

08008824 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800882a:	1d3b      	adds	r3, r7, #4
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	605a      	str	r2, [r3, #4]
 8008832:	609a      	str	r2, [r3, #8]
 8008834:	60da      	str	r2, [r3, #12]
 8008836:	611a      	str	r2, [r3, #16]
 8008838:	615a      	str	r2, [r3, #20]
 800883a:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 800883c:	4b1e      	ldr	r3, [pc, #120]	; (80088b8 <MX_TIM10_Init+0x94>)
 800883e:	4a1f      	ldr	r2, [pc, #124]	; (80088bc <MX_TIM10_Init+0x98>)
 8008840:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8008842:	4b1d      	ldr	r3, [pc, #116]	; (80088b8 <MX_TIM10_Init+0x94>)
 8008844:	22a7      	movs	r2, #167	; 0xa7
 8008846:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008848:	4b1b      	ldr	r3, [pc, #108]	; (80088b8 <MX_TIM10_Init+0x94>)
 800884a:	2200      	movs	r2, #0
 800884c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800884e:	4b1a      	ldr	r3, [pc, #104]	; (80088b8 <MX_TIM10_Init+0x94>)
 8008850:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008854:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008856:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <MX_TIM10_Init+0x94>)
 8008858:	2200      	movs	r2, #0
 800885a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800885c:	4b16      	ldr	r3, [pc, #88]	; (80088b8 <MX_TIM10_Init+0x94>)
 800885e:	2200      	movs	r2, #0
 8008860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008862:	4815      	ldr	r0, [pc, #84]	; (80088b8 <MX_TIM10_Init+0x94>)
 8008864:	f006 fb3a 	bl	800eedc <HAL_TIM_Base_Init>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800886e:	f7ff faf1 	bl	8007e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8008872:	4811      	ldr	r0, [pc, #68]	; (80088b8 <MX_TIM10_Init+0x94>)
 8008874:	f006 fb81 	bl	800ef7a <HAL_TIM_PWM_Init>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800887e:	f7ff fae9 	bl	8007e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008882:	2360      	movs	r3, #96	; 0x60
 8008884:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8008886:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800888a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008890:	2300      	movs	r3, #0
 8008892:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008894:	1d3b      	adds	r3, r7, #4
 8008896:	2200      	movs	r2, #0
 8008898:	4619      	mov	r1, r3
 800889a:	4807      	ldr	r0, [pc, #28]	; (80088b8 <MX_TIM10_Init+0x94>)
 800889c:	f006 fdda 	bl	800f454 <HAL_TIM_PWM_ConfigChannel>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80088a6:	f7ff fad5 	bl	8007e54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 80088aa:	4803      	ldr	r0, [pc, #12]	; (80088b8 <MX_TIM10_Init+0x94>)
 80088ac:	f000 f8b2 	bl	8008a14 <HAL_TIM_MspPostInit>

}
 80088b0:	bf00      	nop
 80088b2:	3720      	adds	r7, #32
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20005650 	.word	0x20005650
 80088bc:	40014400 	.word	0x40014400

080088c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d0:	d10e      	bne.n	80088f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	4b27      	ldr	r3, [pc, #156]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	4a26      	ldr	r2, [pc, #152]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 80088dc:	f043 0301 	orr.w	r3, r3, #1
 80088e0:	6413      	str	r3, [r2, #64]	; 0x40
 80088e2:	4b24      	ldr	r3, [pc, #144]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80088ee:	e03a      	b.n	8008966 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a20      	ldr	r2, [pc, #128]	; (8008978 <HAL_TIM_Base_MspInit+0xb8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d10e      	bne.n	8008918 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80088fa:	2300      	movs	r3, #0
 80088fc:	613b      	str	r3, [r7, #16]
 80088fe:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	4a1c      	ldr	r2, [pc, #112]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 8008904:	f043 0302 	orr.w	r3, r3, #2
 8008908:	6413      	str	r3, [r2, #64]	; 0x40
 800890a:	4b1a      	ldr	r3, [pc, #104]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 800890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	693b      	ldr	r3, [r7, #16]
}
 8008916:	e026      	b.n	8008966 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a17      	ldr	r2, [pc, #92]	; (800897c <HAL_TIM_Base_MspInit+0xbc>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d10e      	bne.n	8008940 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	4b13      	ldr	r3, [pc, #76]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	4a12      	ldr	r2, [pc, #72]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 800892c:	f043 0304 	orr.w	r3, r3, #4
 8008930:	6413      	str	r3, [r2, #64]	; 0x40
 8008932:	4b10      	ldr	r3, [pc, #64]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	f003 0304 	and.w	r3, r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
}
 800893e:	e012      	b.n	8008966 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM10)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a0e      	ldr	r2, [pc, #56]	; (8008980 <HAL_TIM_Base_MspInit+0xc0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d10d      	bne.n	8008966 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800894a:	2300      	movs	r3, #0
 800894c:	60bb      	str	r3, [r7, #8]
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 8008950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008952:	4a08      	ldr	r2, [pc, #32]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 8008954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008958:	6453      	str	r3, [r2, #68]	; 0x44
 800895a:	4b06      	ldr	r3, [pc, #24]	; (8008974 <HAL_TIM_Base_MspInit+0xb4>)
 800895c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008962:	60bb      	str	r3, [r7, #8]
 8008964:	68bb      	ldr	r3, [r7, #8]
}
 8008966:	bf00      	nop
 8008968:	371c      	adds	r7, #28
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	40023800 	.word	0x40023800
 8008978:	40000400 	.word	0x40000400
 800897c:	40000800 	.word	0x40000800
 8008980:	40014400 	.word	0x40014400

08008984 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08a      	sub	sp, #40	; 0x28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800898c:	f107 0314 	add.w	r3, r7, #20
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	605a      	str	r2, [r3, #4]
 8008996:	609a      	str	r2, [r3, #8]
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a19      	ldr	r2, [pc, #100]	; (8008a08 <HAL_TIM_IC_MspInit+0x84>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d12b      	bne.n	80089fe <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <HAL_TIM_IC_MspInit+0x88>)
 80089ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ae:	4a17      	ldr	r2, [pc, #92]	; (8008a0c <HAL_TIM_IC_MspInit+0x88>)
 80089b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089b4:	6453      	str	r3, [r2, #68]	; 0x44
 80089b6:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <HAL_TIM_IC_MspInit+0x88>)
 80089b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <HAL_TIM_IC_MspInit+0x88>)
 80089c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ca:	4a10      	ldr	r2, [pc, #64]	; (8008a0c <HAL_TIM_IC_MspInit+0x88>)
 80089cc:	f043 0310 	orr.w	r3, r3, #16
 80089d0:	6313      	str	r3, [r2, #48]	; 0x30
 80089d2:	4b0e      	ldr	r3, [pc, #56]	; (8008a0c <HAL_TIM_IC_MspInit+0x88>)
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration    
    PE5     ------> TIM9_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80089de:	2320      	movs	r3, #32
 80089e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089e2:	2302      	movs	r3, #2
 80089e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089ea:	2300      	movs	r3, #0
 80089ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80089ee:	2303      	movs	r3, #3
 80089f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80089f2:	f107 0314 	add.w	r3, r7, #20
 80089f6:	4619      	mov	r1, r3
 80089f8:	4805      	ldr	r0, [pc, #20]	; (8008a10 <HAL_TIM_IC_MspInit+0x8c>)
 80089fa:	f001 f87d 	bl	8009af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80089fe:	bf00      	nop
 8008a00:	3728      	adds	r7, #40	; 0x28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40014000 	.word	0x40014000
 8008a0c:	40023800 	.word	0x40023800
 8008a10:	40021000 	.word	0x40021000

08008a14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08c      	sub	sp, #48	; 0x30
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a1c:	f107 031c 	add.w	r3, r7, #28
 8008a20:	2200      	movs	r2, #0
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	605a      	str	r2, [r3, #4]
 8008a26:	609a      	str	r2, [r3, #8]
 8008a28:	60da      	str	r2, [r3, #12]
 8008a2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a45      	ldr	r2, [pc, #276]	; (8008b48 <HAL_TIM_MspPostInit+0x134>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d13c      	bne.n	8008ab0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a36:	2300      	movs	r3, #0
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	4b44      	ldr	r3, [pc, #272]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	4a43      	ldr	r2, [pc, #268]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008a40:	f043 0301 	orr.w	r3, r3, #1
 8008a44:	6313      	str	r3, [r2, #48]	; 0x30
 8008a46:	4b41      	ldr	r3, [pc, #260]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	61bb      	str	r3, [r7, #24]
 8008a50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a52:	2300      	movs	r3, #0
 8008a54:	617b      	str	r3, [r7, #20]
 8008a56:	4b3d      	ldr	r3, [pc, #244]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5a:	4a3c      	ldr	r2, [pc, #240]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008a5c:	f043 0304 	orr.w	r3, r3, #4
 8008a60:	6313      	str	r3, [r2, #48]	; 0x30
 8008a62:	4b3a      	ldr	r3, [pc, #232]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	f003 0304 	and.w	r3, r3, #4
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008a6e:	2340      	movs	r3, #64	; 0x40
 8008a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a72:	2302      	movs	r3, #2
 8008a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a82:	f107 031c 	add.w	r3, r7, #28
 8008a86:	4619      	mov	r1, r3
 8008a88:	4831      	ldr	r0, [pc, #196]	; (8008b50 <HAL_TIM_MspPostInit+0x13c>)
 8008a8a:	f001 f835 	bl	8009af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008a8e:	2380      	movs	r3, #128	; 0x80
 8008a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a92:	2302      	movs	r3, #2
 8008a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008aa2:	f107 031c 	add.w	r3, r7, #28
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	482a      	ldr	r0, [pc, #168]	; (8008b54 <HAL_TIM_MspPostInit+0x140>)
 8008aaa:	f001 f825 	bl	8009af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8008aae:	e047      	b.n	8008b40 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a28      	ldr	r2, [pc, #160]	; (8008b58 <HAL_TIM_MspPostInit+0x144>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d11f      	bne.n	8008afa <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008aba:	2300      	movs	r3, #0
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	4b23      	ldr	r3, [pc, #140]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac2:	4a22      	ldr	r2, [pc, #136]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008ac4:	f043 0308 	orr.w	r3, r3, #8
 8008ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8008aca:	4b20      	ldr	r3, [pc, #128]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ace:	f003 0308 	and.w	r3, r3, #8
 8008ad2:	613b      	str	r3, [r7, #16]
 8008ad4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8008ad6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008adc:	2302      	movs	r3, #2
 8008ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008aec:	f107 031c 	add.w	r3, r7, #28
 8008af0:	4619      	mov	r1, r3
 8008af2:	481a      	ldr	r0, [pc, #104]	; (8008b5c <HAL_TIM_MspPostInit+0x148>)
 8008af4:	f001 f800 	bl	8009af8 <HAL_GPIO_Init>
}
 8008af8:	e022      	b.n	8008b40 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM10)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a18      	ldr	r2, [pc, #96]	; (8008b60 <HAL_TIM_MspPostInit+0x14c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d11d      	bne.n	8008b40 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	4b10      	ldr	r3, [pc, #64]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0c:	4a0f      	ldr	r2, [pc, #60]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008b0e:	f043 0320 	orr.w	r3, r3, #32
 8008b12:	6313      	str	r3, [r2, #48]	; 0x30
 8008b14:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <HAL_TIM_MspPostInit+0x138>)
 8008b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008b20:	2340      	movs	r3, #64	; 0x40
 8008b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b24:	2302      	movs	r3, #2
 8008b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8008b30:	2303      	movs	r3, #3
 8008b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008b34:	f107 031c 	add.w	r3, r7, #28
 8008b38:	4619      	mov	r1, r3
 8008b3a:	480a      	ldr	r0, [pc, #40]	; (8008b64 <HAL_TIM_MspPostInit+0x150>)
 8008b3c:	f000 ffdc 	bl	8009af8 <HAL_GPIO_Init>
}
 8008b40:	bf00      	nop
 8008b42:	3730      	adds	r7, #48	; 0x30
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	40000400 	.word	0x40000400
 8008b4c:	40023800 	.word	0x40023800
 8008b50:	40020000 	.word	0x40020000
 8008b54:	40020800 	.word	0x40020800
 8008b58:	40000800 	.word	0x40000800
 8008b5c:	40020c00 	.word	0x40020c00
 8008b60:	40014400 	.word	0x40014400
 8008b64:	40021400 	.word	0x40021400

08008b68 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8008b6c:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <MX_UART7_Init+0x50>)
 8008b6e:	4a13      	ldr	r2, [pc, #76]	; (8008bbc <MX_UART7_Init+0x54>)
 8008b70:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <MX_UART7_Init+0x50>)
 8008b74:	4a12      	ldr	r2, [pc, #72]	; (8008bc0 <MX_UART7_Init+0x58>)
 8008b76:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8008b78:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <MX_UART7_Init+0x50>)
 8008b7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b7e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8008b80:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <MX_UART7_Init+0x50>)
 8008b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b86:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8008b88:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <MX_UART7_Init+0x50>)
 8008b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b8e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8008b90:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <MX_UART7_Init+0x50>)
 8008b92:	220c      	movs	r2, #12
 8008b94:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b96:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <MX_UART7_Init+0x50>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <MX_UART7_Init+0x50>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8008ba2:	4805      	ldr	r0, [pc, #20]	; (8008bb8 <MX_UART7_Init+0x50>)
 8008ba4:	f007 fb00 	bl	80101a8 <HAL_UART_Init>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 8008bae:	f7ff f951 	bl	8007e54 <Error_Handler>
  }

}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20005750 	.word	0x20005750
 8008bbc:	40007800 	.word	0x40007800
 8008bc0:	000186a0 	.word	0x000186a0

08008bc4 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8008bc8:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <MX_UART8_Init+0x4c>)
 8008bca:	4a12      	ldr	r2, [pc, #72]	; (8008c14 <MX_UART8_Init+0x50>)
 8008bcc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 8008bce:	4b10      	ldr	r3, [pc, #64]	; (8008c10 <MX_UART8_Init+0x4c>)
 8008bd0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8008bd4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8008bd6:	4b0e      	ldr	r3, [pc, #56]	; (8008c10 <MX_UART8_Init+0x4c>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8008bdc:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <MX_UART8_Init+0x4c>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8008be2:	4b0b      	ldr	r3, [pc, #44]	; (8008c10 <MX_UART8_Init+0x4c>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8008be8:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <MX_UART8_Init+0x4c>)
 8008bea:	220c      	movs	r2, #12
 8008bec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bee:	4b08      	ldr	r3, [pc, #32]	; (8008c10 <MX_UART8_Init+0x4c>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8008bf4:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <MX_UART8_Init+0x4c>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8008bfa:	4805      	ldr	r0, [pc, #20]	; (8008c10 <MX_UART8_Init+0x4c>)
 8008bfc:	f007 fad4 	bl	80101a8 <HAL_UART_Init>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8008c06:	f7ff f925 	bl	8007e54 <Error_Handler>
  }

}
 8008c0a:	bf00      	nop
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20005890 	.word	0x20005890
 8008c14:	40007c00 	.word	0x40007c00

08008c18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008c1c:	4b11      	ldr	r3, [pc, #68]	; (8008c64 <MX_USART2_UART_Init+0x4c>)
 8008c1e:	4a12      	ldr	r2, [pc, #72]	; (8008c68 <MX_USART2_UART_Init+0x50>)
 8008c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <MX_USART2_UART_Init+0x4c>)
 8008c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008c2a:	4b0e      	ldr	r3, [pc, #56]	; (8008c64 <MX_USART2_UART_Init+0x4c>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008c30:	4b0c      	ldr	r3, [pc, #48]	; (8008c64 <MX_USART2_UART_Init+0x4c>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008c36:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <MX_USART2_UART_Init+0x4c>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008c3c:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <MX_USART2_UART_Init+0x4c>)
 8008c3e:	220c      	movs	r2, #12
 8008c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8008c42:	4b08      	ldr	r3, [pc, #32]	; (8008c64 <MX_USART2_UART_Init+0x4c>)
 8008c44:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008c48:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c4a:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <MX_USART2_UART_Init+0x4c>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008c50:	4804      	ldr	r0, [pc, #16]	; (8008c64 <MX_USART2_UART_Init+0x4c>)
 8008c52:	f007 faa9 	bl	80101a8 <HAL_UART_Init>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8008c5c:	f7ff f8fa 	bl	8007e54 <Error_Handler>
  }

}
 8008c60:	bf00      	nop
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	200058d0 	.word	0x200058d0
 8008c68:	40004400 	.word	0x40004400

08008c6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8008c70:	4b11      	ldr	r3, [pc, #68]	; (8008cb8 <MX_USART3_UART_Init+0x4c>)
 8008c72:	4a12      	ldr	r2, [pc, #72]	; (8008cbc <MX_USART3_UART_Init+0x50>)
 8008c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8008c76:	4b10      	ldr	r3, [pc, #64]	; (8008cb8 <MX_USART3_UART_Init+0x4c>)
 8008c78:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8008c7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <MX_USART3_UART_Init+0x4c>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008c84:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <MX_USART3_UART_Init+0x4c>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008c8a:	4b0b      	ldr	r3, [pc, #44]	; (8008cb8 <MX_USART3_UART_Init+0x4c>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008c90:	4b09      	ldr	r3, [pc, #36]	; (8008cb8 <MX_USART3_UART_Init+0x4c>)
 8008c92:	220c      	movs	r2, #12
 8008c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c96:	4b08      	ldr	r3, [pc, #32]	; (8008cb8 <MX_USART3_UART_Init+0x4c>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <MX_USART3_UART_Init+0x4c>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008ca2:	4805      	ldr	r0, [pc, #20]	; (8008cb8 <MX_USART3_UART_Init+0x4c>)
 8008ca4:	f007 fa80 	bl	80101a8 <HAL_UART_Init>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008cae:	f7ff f8d1 	bl	8007e54 <Error_Handler>
  }

}
 8008cb2:	bf00      	nop
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20005790 	.word	0x20005790
 8008cbc:	40004800 	.word	0x40004800

08008cc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b090      	sub	sp, #64	; 0x40
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	609a      	str	r2, [r3, #8]
 8008cd4:	60da      	str	r2, [r3, #12]
 8008cd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a88      	ldr	r2, [pc, #544]	; (8008f00 <HAL_UART_MspInit+0x240>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d15c      	bne.n	8008d9c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ce6:	4b87      	ldr	r3, [pc, #540]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	4a86      	ldr	r2, [pc, #536]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008cec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8008cf2:	4b84      	ldr	r3, [pc, #528]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008cfe:	2300      	movs	r3, #0
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
 8008d02:	4b80      	ldr	r3, [pc, #512]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d06:	4a7f      	ldr	r2, [pc, #508]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008d08:	f043 0310 	orr.w	r3, r3, #16
 8008d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d0e:	4b7d      	ldr	r3, [pc, #500]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	f003 0310 	and.w	r3, r3, #16
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8008d1a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d20:	2302      	movs	r3, #2
 8008d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008d24:	2301      	movs	r3, #1
 8008d26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8008d2c:	2308      	movs	r3, #8
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d34:	4619      	mov	r1, r3
 8008d36:	4874      	ldr	r0, [pc, #464]	; (8008f08 <HAL_UART_MspInit+0x248>)
 8008d38:	f000 fede 	bl	8009af8 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8008d3c:	4b73      	ldr	r3, [pc, #460]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d3e:	4a74      	ldr	r2, [pc, #464]	; (8008f10 <HAL_UART_MspInit+0x250>)
 8008d40:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8008d42:	4b72      	ldr	r3, [pc, #456]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d44:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008d48:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d4a:	4b70      	ldr	r3, [pc, #448]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d50:	4b6e      	ldr	r3, [pc, #440]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d56:	4b6d      	ldr	r3, [pc, #436]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d5c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d5e:	4b6b      	ldr	r3, [pc, #428]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d64:	4b69      	ldr	r3, [pc, #420]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8008d6a:	4b68      	ldr	r3, [pc, #416]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d70:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008d72:	4b66      	ldr	r3, [pc, #408]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008d78:	4b64      	ldr	r3, [pc, #400]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8008d7e:	4863      	ldr	r0, [pc, #396]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d80:	f000 fb10 	bl	80093a4 <HAL_DMA_Init>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8008d8a:	f7ff f863 	bl	8007e54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a5e      	ldr	r2, [pc, #376]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d92:	635a      	str	r2, [r3, #52]	; 0x34
 8008d94:	4a5d      	ldr	r2, [pc, #372]	; (8008f0c <HAL_UART_MspInit+0x24c>)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008d9a:	e101      	b.n	8008fa0 <HAL_UART_MspInit+0x2e0>
  else if(uartHandle->Instance==UART8)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a5c      	ldr	r2, [pc, #368]	; (8008f14 <HAL_UART_MspInit+0x254>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d15b      	bne.n	8008e5e <HAL_UART_MspInit+0x19e>
    __HAL_RCC_UART8_CLK_ENABLE();
 8008da6:	2300      	movs	r3, #0
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	4b56      	ldr	r3, [pc, #344]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dae:	4a55      	ldr	r2, [pc, #340]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008db4:	6413      	str	r3, [r2, #64]	; 0x40
 8008db6:	4b53      	ldr	r3, [pc, #332]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dbe:	623b      	str	r3, [r7, #32]
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61fb      	str	r3, [r7, #28]
 8008dc6:	4b4f      	ldr	r3, [pc, #316]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dca:	4a4e      	ldr	r2, [pc, #312]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008dcc:	f043 0310 	orr.w	r3, r3, #16
 8008dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008dd2:	4b4c      	ldr	r3, [pc, #304]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	f003 0310 	and.w	r3, r3, #16
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008dde:	2303      	movs	r3, #3
 8008de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de2:	2302      	movs	r3, #2
 8008de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008de6:	2301      	movs	r3, #1
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dea:	2303      	movs	r3, #3
 8008dec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8008dee:	2308      	movs	r3, #8
 8008df0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008df6:	4619      	mov	r1, r3
 8008df8:	4843      	ldr	r0, [pc, #268]	; (8008f08 <HAL_UART_MspInit+0x248>)
 8008dfa:	f000 fe7d 	bl	8009af8 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8008dfe:	4b46      	ldr	r3, [pc, #280]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e00:	4a46      	ldr	r2, [pc, #280]	; (8008f1c <HAL_UART_MspInit+0x25c>)
 8008e02:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8008e04:	4b44      	ldr	r3, [pc, #272]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e06:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008e0a:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e0c:	4b42      	ldr	r3, [pc, #264]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e12:	4b41      	ldr	r3, [pc, #260]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e18:	4b3f      	ldr	r3, [pc, #252]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e1e:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e20:	4b3d      	ldr	r3, [pc, #244]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e26:	4b3c      	ldr	r3, [pc, #240]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8008e2c:	4b3a      	ldr	r3, [pc, #232]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e32:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008e34:	4b38      	ldr	r3, [pc, #224]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e3a:	4b37      	ldr	r3, [pc, #220]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8008e40:	4835      	ldr	r0, [pc, #212]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e42:	f000 faaf 	bl	80093a4 <HAL_DMA_Init>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8008e4c:	f7ff f802 	bl	8007e54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a31      	ldr	r2, [pc, #196]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e54:	635a      	str	r2, [r3, #52]	; 0x34
 8008e56:	4a30      	ldr	r2, [pc, #192]	; (8008f18 <HAL_UART_MspInit+0x258>)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008e5c:	e0a0      	b.n	8008fa0 <HAL_UART_MspInit+0x2e0>
  else if(uartHandle->Instance==USART2)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a2f      	ldr	r2, [pc, #188]	; (8008f20 <HAL_UART_MspInit+0x260>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d161      	bne.n	8008f2c <HAL_UART_MspInit+0x26c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008e68:	2300      	movs	r3, #0
 8008e6a:	61bb      	str	r3, [r7, #24]
 8008e6c:	4b25      	ldr	r3, [pc, #148]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e70:	4a24      	ldr	r2, [pc, #144]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e76:	6413      	str	r3, [r2, #64]	; 0x40
 8008e78:	4b22      	ldr	r3, [pc, #136]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e80:	61bb      	str	r3, [r7, #24]
 8008e82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	4b1e      	ldr	r3, [pc, #120]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8c:	4a1d      	ldr	r2, [pc, #116]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008e8e:	f043 0301 	orr.w	r3, r3, #1
 8008e92:	6313      	str	r3, [r2, #48]	; 0x30
 8008e94:	4b1b      	ldr	r3, [pc, #108]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	617b      	str	r3, [r7, #20]
 8008e9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	4b17      	ldr	r3, [pc, #92]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea8:	4a16      	ldr	r2, [pc, #88]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008eaa:	f043 0308 	orr.w	r3, r3, #8
 8008eae:	6313      	str	r3, [r2, #48]	; 0x30
 8008eb0:	4b14      	ldr	r3, [pc, #80]	; (8008f04 <HAL_UART_MspInit+0x244>)
 8008eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8008ebc:	2309      	movs	r3, #9
 8008ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008ecc:	2307      	movs	r3, #7
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4813      	ldr	r0, [pc, #76]	; (8008f24 <HAL_UART_MspInit+0x264>)
 8008ed8:	f000 fe0e 	bl	8009af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008edc:	2330      	movs	r3, #48	; 0x30
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008eec:	2307      	movs	r3, #7
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	480c      	ldr	r0, [pc, #48]	; (8008f28 <HAL_UART_MspInit+0x268>)
 8008ef8:	f000 fdfe 	bl	8009af8 <HAL_GPIO_Init>
}
 8008efc:	e050      	b.n	8008fa0 <HAL_UART_MspInit+0x2e0>
 8008efe:	bf00      	nop
 8008f00:	40007800 	.word	0x40007800
 8008f04:	40023800 	.word	0x40023800
 8008f08:	40021000 	.word	0x40021000
 8008f0c:	200057d0 	.word	0x200057d0
 8008f10:	40026058 	.word	0x40026058
 8008f14:	40007c00 	.word	0x40007c00
 8008f18:	20005830 	.word	0x20005830
 8008f1c:	400260a0 	.word	0x400260a0
 8008f20:	40004400 	.word	0x40004400
 8008f24:	40020000 	.word	0x40020000
 8008f28:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1d      	ldr	r2, [pc, #116]	; (8008fa8 <HAL_UART_MspInit+0x2e8>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d134      	bne.n	8008fa0 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	4b1c      	ldr	r3, [pc, #112]	; (8008fac <HAL_UART_MspInit+0x2ec>)
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3e:	4a1b      	ldr	r2, [pc, #108]	; (8008fac <HAL_UART_MspInit+0x2ec>)
 8008f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f44:	6413      	str	r3, [r2, #64]	; 0x40
 8008f46:	4b19      	ldr	r3, [pc, #100]	; (8008fac <HAL_UART_MspInit+0x2ec>)
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f52:	2300      	movs	r3, #0
 8008f54:	60bb      	str	r3, [r7, #8]
 8008f56:	4b15      	ldr	r3, [pc, #84]	; (8008fac <HAL_UART_MspInit+0x2ec>)
 8008f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5a:	4a14      	ldr	r2, [pc, #80]	; (8008fac <HAL_UART_MspInit+0x2ec>)
 8008f5c:	f043 0308 	orr.w	r3, r3, #8
 8008f60:	6313      	str	r3, [r2, #48]	; 0x30
 8008f62:	4b12      	ldr	r3, [pc, #72]	; (8008fac <HAL_UART_MspInit+0x2ec>)
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	f003 0308 	and.w	r3, r3, #8
 8008f6a:	60bb      	str	r3, [r7, #8]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8008f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f74:	2302      	movs	r3, #2
 8008f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008f80:	2307      	movs	r3, #7
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4809      	ldr	r0, [pc, #36]	; (8008fb0 <HAL_UART_MspInit+0x2f0>)
 8008f8c:	f000 fdb4 	bl	8009af8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8008f90:	2200      	movs	r2, #0
 8008f92:	2105      	movs	r1, #5
 8008f94:	2027      	movs	r0, #39	; 0x27
 8008f96:	f000 f9db 	bl	8009350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008f9a:	2027      	movs	r0, #39	; 0x27
 8008f9c:	f000 f9f4 	bl	8009388 <HAL_NVIC_EnableIRQ>
}
 8008fa0:	bf00      	nop
 8008fa2:	3740      	adds	r7, #64	; 0x40
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40004800 	.word	0x40004800
 8008fac:	40023800 	.word	0x40023800
 8008fb0:	40020c00 	.word	0x40020c00

08008fb4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fb8:	4b14      	ldr	r3, [pc, #80]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008fba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008fbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008fc0:	4b12      	ldr	r3, [pc, #72]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008fc2:	2204      	movs	r2, #4
 8008fc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fc6:	4b11      	ldr	r3, [pc, #68]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008fc8:	2202      	movs	r2, #2
 8008fca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fcc:	4b0f      	ldr	r3, [pc, #60]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fd2:	4b0e      	ldr	r3, [pc, #56]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008fd8:	4b0c      	ldr	r3, [pc, #48]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008fda:	2201      	movs	r2, #1
 8008fdc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fde:	4b0b      	ldr	r3, [pc, #44]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fe4:	4b09      	ldr	r3, [pc, #36]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008fea:	4b08      	ldr	r3, [pc, #32]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008fec:	2201      	movs	r2, #1
 8008fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ff0:	4b06      	ldr	r3, [pc, #24]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ff6:	4805      	ldr	r0, [pc, #20]	; (800900c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008ff8:	f003 fec0 	bl	800cd7c <HAL_PCD_Init>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8009002:	f7fe ff27 	bl	8007e54 <Error_Handler>
  }

}
 8009006:	bf00      	nop
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20005910 	.word	0x20005910

08009010 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08a      	sub	sp, #40	; 0x28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009018:	f107 0314 	add.w	r3, r7, #20
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	605a      	str	r2, [r3, #4]
 8009022:	609a      	str	r2, [r3, #8]
 8009024:	60da      	str	r2, [r3, #12]
 8009026:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009030:	d13f      	bne.n	80090b2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009032:	2300      	movs	r3, #0
 8009034:	613b      	str	r3, [r7, #16]
 8009036:	4b21      	ldr	r3, [pc, #132]	; (80090bc <HAL_PCD_MspInit+0xac>)
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	4a20      	ldr	r2, [pc, #128]	; (80090bc <HAL_PCD_MspInit+0xac>)
 800903c:	f043 0301 	orr.w	r3, r3, #1
 8009040:	6313      	str	r3, [r2, #48]	; 0x30
 8009042:	4b1e      	ldr	r3, [pc, #120]	; (80090bc <HAL_PCD_MspInit+0xac>)
 8009044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	613b      	str	r3, [r7, #16]
 800904c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800904e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009054:	2302      	movs	r3, #2
 8009056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009058:	2300      	movs	r3, #0
 800905a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800905c:	2303      	movs	r3, #3
 800905e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009060:	230a      	movs	r3, #10
 8009062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	4619      	mov	r1, r3
 800906a:	4815      	ldr	r0, [pc, #84]	; (80090c0 <HAL_PCD_MspInit+0xb0>)
 800906c:	f000 fd44 	bl	8009af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009076:	2300      	movs	r3, #0
 8009078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800907a:	2300      	movs	r3, #0
 800907c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800907e:	f107 0314 	add.w	r3, r7, #20
 8009082:	4619      	mov	r1, r3
 8009084:	480e      	ldr	r0, [pc, #56]	; (80090c0 <HAL_PCD_MspInit+0xb0>)
 8009086:	f000 fd37 	bl	8009af8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <HAL_PCD_MspInit+0xac>)
 800908c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908e:	4a0b      	ldr	r2, [pc, #44]	; (80090bc <HAL_PCD_MspInit+0xac>)
 8009090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009094:	6353      	str	r3, [r2, #52]	; 0x34
 8009096:	2300      	movs	r3, #0
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	4b08      	ldr	r3, [pc, #32]	; (80090bc <HAL_PCD_MspInit+0xac>)
 800909c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909e:	4a07      	ldr	r2, [pc, #28]	; (80090bc <HAL_PCD_MspInit+0xac>)
 80090a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090a4:	6453      	str	r3, [r2, #68]	; 0x44
 80090a6:	4b05      	ldr	r3, [pc, #20]	; (80090bc <HAL_PCD_MspInit+0xac>)
 80090a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090b2:	bf00      	nop
 80090b4:	3728      	adds	r7, #40	; 0x28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40023800 	.word	0x40023800
 80090c0:	40020000 	.word	0x40020000

080090c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80090c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80090fc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80090c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80090ca:	e003      	b.n	80090d4 <LoopCopyDataInit>

080090cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80090cc:	4b0c      	ldr	r3, [pc, #48]	; (8009100 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80090ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80090d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80090d2:	3104      	adds	r1, #4

080090d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80090d4:	480b      	ldr	r0, [pc, #44]	; (8009104 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80090d6:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80090d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80090da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80090dc:	d3f6      	bcc.n	80090cc <CopyDataInit>
  ldr  r2, =_sbss
 80090de:	4a0b      	ldr	r2, [pc, #44]	; (800910c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80090e0:	e002      	b.n	80090e8 <LoopFillZerobss>

080090e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80090e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80090e4:	f842 3b04 	str.w	r3, [r2], #4

080090e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80090e8:	4b09      	ldr	r3, [pc, #36]	; (8009110 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80090ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80090ec:	d3f9      	bcc.n	80090e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80090ee:	f7ff f9cd 	bl	800848c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80090f2:	f010 fb91 	bl	8019818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80090f6:	f7fe fd85 	bl	8007c04 <main>
  bx  lr    
 80090fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80090fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8009100:	0801ecec 	.word	0x0801ecec
  ldr  r0, =_sdata
 8009104:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009108:	20000394 	.word	0x20000394
  ldr  r2, =_sbss
 800910c:	20000398 	.word	0x20000398
  ldr  r3, = _ebss
 8009110:	20007dd0 	.word	0x20007dd0

08009114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009114:	e7fe      	b.n	8009114 <ADC_IRQHandler>
	...

08009118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800911c:	4b0e      	ldr	r3, [pc, #56]	; (8009158 <HAL_Init+0x40>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a0d      	ldr	r2, [pc, #52]	; (8009158 <HAL_Init+0x40>)
 8009122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009128:	4b0b      	ldr	r3, [pc, #44]	; (8009158 <HAL_Init+0x40>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a0a      	ldr	r2, [pc, #40]	; (8009158 <HAL_Init+0x40>)
 800912e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009134:	4b08      	ldr	r3, [pc, #32]	; (8009158 <HAL_Init+0x40>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a07      	ldr	r2, [pc, #28]	; (8009158 <HAL_Init+0x40>)
 800913a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800913e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009140:	2003      	movs	r0, #3
 8009142:	f000 f8fa 	bl	800933a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009146:	2000      	movs	r0, #0
 8009148:	f7fe ffd0 	bl	80080ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800914c:	f7fe ffa2 	bl	8008094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	40023c00 	.word	0x40023c00

0800915c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <HAL_IncTick+0x20>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	4b06      	ldr	r3, [pc, #24]	; (8009180 <HAL_IncTick+0x24>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4413      	add	r3, r2
 800916c:	4a04      	ldr	r2, [pc, #16]	; (8009180 <HAL_IncTick+0x24>)
 800916e:	6013      	str	r3, [r2, #0]
}
 8009170:	bf00      	nop
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	200001b8 	.word	0x200001b8
 8009180:	20005d18 	.word	0x20005d18

08009184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009184:	b480      	push	{r7}
 8009186:	af00      	add	r7, sp, #0
  return uwTick;
 8009188:	4b03      	ldr	r3, [pc, #12]	; (8009198 <HAL_GetTick+0x14>)
 800918a:	681b      	ldr	r3, [r3, #0]
}
 800918c:	4618      	mov	r0, r3
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	20005d18 	.word	0x20005d18

0800919c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80091a4:	f7ff ffee 	bl	8009184 <HAL_GetTick>
 80091a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d005      	beq.n	80091c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80091b6:	4b09      	ldr	r3, [pc, #36]	; (80091dc <HAL_Delay+0x40>)
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4413      	add	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80091c2:	bf00      	nop
 80091c4:	f7ff ffde 	bl	8009184 <HAL_GetTick>
 80091c8:	4602      	mov	r2, r0
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d8f7      	bhi.n	80091c4 <HAL_Delay+0x28>
  {
  }
}
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	200001b8 	.word	0x200001b8

080091e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80091f0:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <__NVIC_SetPriorityGrouping+0x44>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80091fc:	4013      	ands	r3, r2
 80091fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800920c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009212:	4a04      	ldr	r2, [pc, #16]	; (8009224 <__NVIC_SetPriorityGrouping+0x44>)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	60d3      	str	r3, [r2, #12]
}
 8009218:	bf00      	nop
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	e000ed00 	.word	0xe000ed00

08009228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800922c:	4b04      	ldr	r3, [pc, #16]	; (8009240 <__NVIC_GetPriorityGrouping+0x18>)
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	f003 0307 	and.w	r3, r3, #7
}
 8009236:	4618      	mov	r0, r3
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	e000ed00 	.word	0xe000ed00

08009244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800924e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009252:	2b00      	cmp	r3, #0
 8009254:	db0b      	blt.n	800926e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	f003 021f 	and.w	r2, r3, #31
 800925c:	4907      	ldr	r1, [pc, #28]	; (800927c <__NVIC_EnableIRQ+0x38>)
 800925e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009262:	095b      	lsrs	r3, r3, #5
 8009264:	2001      	movs	r0, #1
 8009266:	fa00 f202 	lsl.w	r2, r0, r2
 800926a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	e000e100 	.word	0xe000e100

08009280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	6039      	str	r1, [r7, #0]
 800928a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800928c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009290:	2b00      	cmp	r3, #0
 8009292:	db0a      	blt.n	80092aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	b2da      	uxtb	r2, r3
 8009298:	490c      	ldr	r1, [pc, #48]	; (80092cc <__NVIC_SetPriority+0x4c>)
 800929a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800929e:	0112      	lsls	r2, r2, #4
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	440b      	add	r3, r1
 80092a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80092a8:	e00a      	b.n	80092c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	4908      	ldr	r1, [pc, #32]	; (80092d0 <__NVIC_SetPriority+0x50>)
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	f003 030f 	and.w	r3, r3, #15
 80092b6:	3b04      	subs	r3, #4
 80092b8:	0112      	lsls	r2, r2, #4
 80092ba:	b2d2      	uxtb	r2, r2
 80092bc:	440b      	add	r3, r1
 80092be:	761a      	strb	r2, [r3, #24]
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	e000e100 	.word	0xe000e100
 80092d0:	e000ed00 	.word	0xe000ed00

080092d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b089      	sub	sp, #36	; 0x24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f003 0307 	and.w	r3, r3, #7
 80092e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	f1c3 0307 	rsb	r3, r3, #7
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	bf28      	it	cs
 80092f2:	2304      	movcs	r3, #4
 80092f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	3304      	adds	r3, #4
 80092fa:	2b06      	cmp	r3, #6
 80092fc:	d902      	bls.n	8009304 <NVIC_EncodePriority+0x30>
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	3b03      	subs	r3, #3
 8009302:	e000      	b.n	8009306 <NVIC_EncodePriority+0x32>
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009308:	f04f 32ff 	mov.w	r2, #4294967295
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	fa02 f303 	lsl.w	r3, r2, r3
 8009312:	43da      	mvns	r2, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	401a      	ands	r2, r3
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800931c:	f04f 31ff 	mov.w	r1, #4294967295
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	fa01 f303 	lsl.w	r3, r1, r3
 8009326:	43d9      	mvns	r1, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800932c:	4313      	orrs	r3, r2
         );
}
 800932e:	4618      	mov	r0, r3
 8009330:	3724      	adds	r7, #36	; 0x24
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff ff4c 	bl	80091e0 <__NVIC_SetPriorityGrouping>
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	4603      	mov	r3, r0
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800935e:	2300      	movs	r3, #0
 8009360:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009362:	f7ff ff61 	bl	8009228 <__NVIC_GetPriorityGrouping>
 8009366:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	68b9      	ldr	r1, [r7, #8]
 800936c:	6978      	ldr	r0, [r7, #20]
 800936e:	f7ff ffb1 	bl	80092d4 <NVIC_EncodePriority>
 8009372:	4602      	mov	r2, r0
 8009374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009378:	4611      	mov	r1, r2
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff ff80 	bl	8009280 <__NVIC_SetPriority>
}
 8009380:	bf00      	nop
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff ff54 	bl	8009244 <__NVIC_EnableIRQ>
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80093b0:	f7ff fee8 	bl	8009184 <HAL_GetTick>
 80093b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e099      	b.n	80094f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f022 0201 	bic.w	r2, r2, #1
 80093de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80093e0:	e00f      	b.n	8009402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80093e2:	f7ff fecf 	bl	8009184 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b05      	cmp	r3, #5
 80093ee:	d908      	bls.n	8009402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2220      	movs	r2, #32
 80093f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2203      	movs	r2, #3
 80093fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e078      	b.n	80094f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e8      	bne.n	80093e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	4b38      	ldr	r3, [pc, #224]	; (80094fc <HAL_DMA_Init+0x158>)
 800941c:	4013      	ands	r3, r2
 800941e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800942e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800943a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	4313      	orrs	r3, r2
 8009452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	2b04      	cmp	r3, #4
 800945a:	d107      	bne.n	800946c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009464:	4313      	orrs	r3, r2
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	4313      	orrs	r3, r2
 800946a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f023 0307 	bic.w	r3, r3, #7
 8009482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	4313      	orrs	r3, r2
 800948c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	2b04      	cmp	r3, #4
 8009494:	d117      	bne.n	80094c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	4313      	orrs	r3, r2
 800949e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00e      	beq.n	80094c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 faab 	bl	8009a04 <DMA_CheckFifoParam>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d008      	beq.n	80094c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2240      	movs	r2, #64	; 0x40
 80094b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80094c2:	2301      	movs	r3, #1
 80094c4:	e016      	b.n	80094f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa62 	bl	8009998 <DMA_CalcBaseAndBitshift>
 80094d4:	4603      	mov	r3, r0
 80094d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094dc:	223f      	movs	r2, #63	; 0x3f
 80094de:	409a      	lsls	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	f010803f 	.word	0xf010803f

08009500 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009516:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_DMA_Start_IT+0x26>
 8009522:	2302      	movs	r3, #2
 8009524:	e040      	b.n	80095a8 <HAL_DMA_Start_IT+0xa8>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b01      	cmp	r3, #1
 8009538:	d12f      	bne.n	800959a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2202      	movs	r2, #2
 800953e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	68b9      	ldr	r1, [r7, #8]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 f9f4 	bl	800993c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009558:	223f      	movs	r2, #63	; 0x3f
 800955a:	409a      	lsls	r2, r3
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f042 0216 	orr.w	r2, r2, #22
 800956e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009574:	2b00      	cmp	r3, #0
 8009576:	d007      	beq.n	8009588 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0208 	orr.w	r2, r2, #8
 8009586:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0201 	orr.w	r2, r2, #1
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	e005      	b.n	80095a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80095a2:	2302      	movs	r3, #2
 80095a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d004      	beq.n	80095ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2280      	movs	r2, #128	; 0x80
 80095c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e00c      	b.n	80095e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2205      	movs	r2, #5
 80095d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0201 	bic.w	r2, r2, #1
 80095e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009600:	4b92      	ldr	r3, [pc, #584]	; (800984c <HAL_DMA_IRQHandler+0x258>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a92      	ldr	r2, [pc, #584]	; (8009850 <HAL_DMA_IRQHandler+0x25c>)
 8009606:	fba2 2303 	umull	r2, r3, r2, r3
 800960a:	0a9b      	lsrs	r3, r3, #10
 800960c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009612:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800961e:	2208      	movs	r2, #8
 8009620:	409a      	lsls	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	4013      	ands	r3, r2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d01a      	beq.n	8009660 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d013      	beq.n	8009660 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f022 0204 	bic.w	r2, r2, #4
 8009646:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800964c:	2208      	movs	r2, #8
 800964e:	409a      	lsls	r2, r3
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009658:	f043 0201 	orr.w	r2, r3, #1
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009664:	2201      	movs	r2, #1
 8009666:	409a      	lsls	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4013      	ands	r3, r2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d012      	beq.n	8009696 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00b      	beq.n	8009696 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009682:	2201      	movs	r2, #1
 8009684:	409a      	lsls	r2, r3
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968e:	f043 0202 	orr.w	r2, r3, #2
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800969a:	2204      	movs	r2, #4
 800969c:	409a      	lsls	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d012      	beq.n	80096cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096b8:	2204      	movs	r2, #4
 80096ba:	409a      	lsls	r2, r3
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c4:	f043 0204 	orr.w	r2, r3, #4
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d0:	2210      	movs	r2, #16
 80096d2:	409a      	lsls	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4013      	ands	r3, r2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d043      	beq.n	8009764 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0308 	and.w	r3, r3, #8
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d03c      	beq.n	8009764 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096ee:	2210      	movs	r2, #16
 80096f0:	409a      	lsls	r2, r3
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d018      	beq.n	8009736 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d108      	bne.n	8009724 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	d024      	beq.n	8009764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
 8009722:	e01f      	b.n	8009764 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009728:	2b00      	cmp	r3, #0
 800972a:	d01b      	beq.n	8009764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	4798      	blx	r3
 8009734:	e016      	b.n	8009764 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009740:	2b00      	cmp	r3, #0
 8009742:	d107      	bne.n	8009754 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0208 	bic.w	r2, r2, #8
 8009752:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009768:	2220      	movs	r2, #32
 800976a:	409a      	lsls	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4013      	ands	r3, r2
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 808e 	beq.w	8009892 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0310 	and.w	r3, r3, #16
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 8086 	beq.w	8009892 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800978a:	2220      	movs	r2, #32
 800978c:	409a      	lsls	r2, r3
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b05      	cmp	r3, #5
 800979c:	d136      	bne.n	800980c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0216 	bic.w	r2, r2, #22
 80097ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	695a      	ldr	r2, [r3, #20]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d103      	bne.n	80097ce <HAL_DMA_IRQHandler+0x1da>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d007      	beq.n	80097de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 0208 	bic.w	r2, r2, #8
 80097dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097e2:	223f      	movs	r2, #63	; 0x3f
 80097e4:	409a      	lsls	r2, r3
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d07d      	beq.n	80098fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
        }
        return;
 800980a:	e078      	b.n	80098fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01c      	beq.n	8009854 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d108      	bne.n	800983a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800982c:	2b00      	cmp	r3, #0
 800982e:	d030      	beq.n	8009892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	4798      	blx	r3
 8009838:	e02b      	b.n	8009892 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d027      	beq.n	8009892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	4798      	blx	r3
 800984a:	e022      	b.n	8009892 <HAL_DMA_IRQHandler+0x29e>
 800984c:	200001b0 	.word	0x200001b0
 8009850:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10f      	bne.n	8009882 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f022 0210 	bic.w	r2, r2, #16
 8009870:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009896:	2b00      	cmp	r3, #0
 8009898:	d032      	beq.n	8009900 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d022      	beq.n	80098ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2205      	movs	r2, #5
 80098aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 0201 	bic.w	r2, r2, #1
 80098bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	3301      	adds	r3, #1
 80098c2:	60bb      	str	r3, [r7, #8]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d307      	bcc.n	80098da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1f2      	bne.n	80098be <HAL_DMA_IRQHandler+0x2ca>
 80098d8:	e000      	b.n	80098dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80098da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	4798      	blx	r3
 80098fc:	e000      	b.n	8009900 <HAL_DMA_IRQHandler+0x30c>
        return;
 80098fe:	bf00      	nop
    }
  }
}
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop

08009908 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009916:	b2db      	uxtb	r3, r3
}
 8009918:	4618      	mov	r0, r3
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009930:	4618      	mov	r0, r3
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009958:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	2b40      	cmp	r3, #64	; 0x40
 8009968:	d108      	bne.n	800997c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800997a:	e007      	b.n	800998c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	60da      	str	r2, [r3, #12]
}
 800998c:	bf00      	nop
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	3b10      	subs	r3, #16
 80099a8:	4a14      	ldr	r2, [pc, #80]	; (80099fc <DMA_CalcBaseAndBitshift+0x64>)
 80099aa:	fba2 2303 	umull	r2, r3, r2, r3
 80099ae:	091b      	lsrs	r3, r3, #4
 80099b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80099b2:	4a13      	ldr	r2, [pc, #76]	; (8009a00 <DMA_CalcBaseAndBitshift+0x68>)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4413      	add	r3, r2
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d909      	bls.n	80099da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	1d1a      	adds	r2, r3, #4
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	659a      	str	r2, [r3, #88]	; 0x58
 80099d8:	e007      	b.n	80099ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80099e2:	f023 0303 	bic.w	r3, r3, #3
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	aaaaaaab 	.word	0xaaaaaaab
 8009a00:	0801e564 	.word	0x0801e564

08009a04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d11f      	bne.n	8009a5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d855      	bhi.n	8009ad0 <DMA_CheckFifoParam+0xcc>
 8009a24:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <DMA_CheckFifoParam+0x28>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a3d 	.word	0x08009a3d
 8009a30:	08009a4f 	.word	0x08009a4f
 8009a34:	08009a3d 	.word	0x08009a3d
 8009a38:	08009ad1 	.word	0x08009ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d045      	beq.n	8009ad4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a4c:	e042      	b.n	8009ad4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009a56:	d13f      	bne.n	8009ad8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a5c:	e03c      	b.n	8009ad8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a66:	d121      	bne.n	8009aac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d836      	bhi.n	8009adc <DMA_CheckFifoParam+0xd8>
 8009a6e:	a201      	add	r2, pc, #4	; (adr r2, 8009a74 <DMA_CheckFifoParam+0x70>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009a85 	.word	0x08009a85
 8009a78:	08009a8b 	.word	0x08009a8b
 8009a7c:	08009a85 	.word	0x08009a85
 8009a80:	08009a9d 	.word	0x08009a9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	73fb      	strb	r3, [r7, #15]
      break;
 8009a88:	e02f      	b.n	8009aea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d024      	beq.n	8009ae0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a9a:	e021      	b.n	8009ae0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009aa4:	d11e      	bne.n	8009ae4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009aaa:	e01b      	b.n	8009ae4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d902      	bls.n	8009ab8 <DMA_CheckFifoParam+0xb4>
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d003      	beq.n	8009abe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009ab6:	e018      	b.n	8009aea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	73fb      	strb	r3, [r7, #15]
      break;
 8009abc:	e015      	b.n	8009aea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00e      	beq.n	8009ae8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ace:	e00b      	b.n	8009ae8 <DMA_CheckFifoParam+0xe4>
      break;
 8009ad0:	bf00      	nop
 8009ad2:	e00a      	b.n	8009aea <DMA_CheckFifoParam+0xe6>
      break;
 8009ad4:	bf00      	nop
 8009ad6:	e008      	b.n	8009aea <DMA_CheckFifoParam+0xe6>
      break;
 8009ad8:	bf00      	nop
 8009ada:	e006      	b.n	8009aea <DMA_CheckFifoParam+0xe6>
      break;
 8009adc:	bf00      	nop
 8009ade:	e004      	b.n	8009aea <DMA_CheckFifoParam+0xe6>
      break;
 8009ae0:	bf00      	nop
 8009ae2:	e002      	b.n	8009aea <DMA_CheckFifoParam+0xe6>
      break;   
 8009ae4:	bf00      	nop
 8009ae6:	e000      	b.n	8009aea <DMA_CheckFifoParam+0xe6>
      break;
 8009ae8:	bf00      	nop
    }
  } 
  
  return status; 
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b089      	sub	sp, #36	; 0x24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009b02:	2300      	movs	r3, #0
 8009b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b0e:	2300      	movs	r3, #0
 8009b10:	61fb      	str	r3, [r7, #28]
 8009b12:	e177      	b.n	8009e04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009b14:	2201      	movs	r2, #1
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	4013      	ands	r3, r2
 8009b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	f040 8166 	bne.w	8009dfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d00b      	beq.n	8009b52 <HAL_GPIO_Init+0x5a>
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d007      	beq.n	8009b52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009b46:	2b11      	cmp	r3, #17
 8009b48:	d003      	beq.n	8009b52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2b12      	cmp	r3, #18
 8009b50:	d130      	bne.n	8009bb4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	2203      	movs	r2, #3
 8009b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b62:	43db      	mvns	r3, r3
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	4013      	ands	r3, r2
 8009b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	68da      	ldr	r2, [r3, #12]
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	fa02 f303 	lsl.w	r3, r2, r3
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b88:	2201      	movs	r2, #1
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	43db      	mvns	r3, r3
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	4013      	ands	r3, r2
 8009b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	091b      	lsrs	r3, r3, #4
 8009b9e:	f003 0201 	and.w	r2, r3, #1
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	2203      	movs	r2, #3
 8009bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc4:	43db      	mvns	r3, r3
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	4013      	ands	r3, r2
 8009bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	689a      	ldr	r2, [r3, #8]
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d003      	beq.n	8009bf4 <HAL_GPIO_Init+0xfc>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	2b12      	cmp	r3, #18
 8009bf2:	d123      	bne.n	8009c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	08da      	lsrs	r2, r3, #3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3208      	adds	r2, #8
 8009bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	220f      	movs	r2, #15
 8009c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c10:	43db      	mvns	r3, r3
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	4013      	ands	r3, r2
 8009c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	691a      	ldr	r2, [r3, #16]
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f003 0307 	and.w	r3, r3, #7
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	fa02 f303 	lsl.w	r3, r2, r3
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	08da      	lsrs	r2, r3, #3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3208      	adds	r2, #8
 8009c36:	69b9      	ldr	r1, [r7, #24]
 8009c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	2203      	movs	r2, #3
 8009c48:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4c:	43db      	mvns	r3, r3
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	4013      	ands	r3, r2
 8009c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f003 0203 	and.w	r2, r3, #3
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	fa02 f303 	lsl.w	r3, r2, r3
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 80c0 	beq.w	8009dfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	4b65      	ldr	r3, [pc, #404]	; (8009e18 <HAL_GPIO_Init+0x320>)
 8009c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c86:	4a64      	ldr	r2, [pc, #400]	; (8009e18 <HAL_GPIO_Init+0x320>)
 8009c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8009c8e:	4b62      	ldr	r3, [pc, #392]	; (8009e18 <HAL_GPIO_Init+0x320>)
 8009c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c9a:	4a60      	ldr	r2, [pc, #384]	; (8009e1c <HAL_GPIO_Init+0x324>)
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	089b      	lsrs	r3, r3, #2
 8009ca0:	3302      	adds	r3, #2
 8009ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	220f      	movs	r2, #15
 8009cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb6:	43db      	mvns	r3, r3
 8009cb8:	69ba      	ldr	r2, [r7, #24]
 8009cba:	4013      	ands	r3, r2
 8009cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a57      	ldr	r2, [pc, #348]	; (8009e20 <HAL_GPIO_Init+0x328>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d037      	beq.n	8009d36 <HAL_GPIO_Init+0x23e>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a56      	ldr	r2, [pc, #344]	; (8009e24 <HAL_GPIO_Init+0x32c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d031      	beq.n	8009d32 <HAL_GPIO_Init+0x23a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a55      	ldr	r2, [pc, #340]	; (8009e28 <HAL_GPIO_Init+0x330>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d02b      	beq.n	8009d2e <HAL_GPIO_Init+0x236>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a54      	ldr	r2, [pc, #336]	; (8009e2c <HAL_GPIO_Init+0x334>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d025      	beq.n	8009d2a <HAL_GPIO_Init+0x232>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a53      	ldr	r2, [pc, #332]	; (8009e30 <HAL_GPIO_Init+0x338>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d01f      	beq.n	8009d26 <HAL_GPIO_Init+0x22e>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a52      	ldr	r2, [pc, #328]	; (8009e34 <HAL_GPIO_Init+0x33c>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d019      	beq.n	8009d22 <HAL_GPIO_Init+0x22a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a51      	ldr	r2, [pc, #324]	; (8009e38 <HAL_GPIO_Init+0x340>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d013      	beq.n	8009d1e <HAL_GPIO_Init+0x226>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a50      	ldr	r2, [pc, #320]	; (8009e3c <HAL_GPIO_Init+0x344>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d00d      	beq.n	8009d1a <HAL_GPIO_Init+0x222>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a4f      	ldr	r2, [pc, #316]	; (8009e40 <HAL_GPIO_Init+0x348>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d007      	beq.n	8009d16 <HAL_GPIO_Init+0x21e>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a4e      	ldr	r2, [pc, #312]	; (8009e44 <HAL_GPIO_Init+0x34c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d101      	bne.n	8009d12 <HAL_GPIO_Init+0x21a>
 8009d0e:	2309      	movs	r3, #9
 8009d10:	e012      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d12:	230a      	movs	r3, #10
 8009d14:	e010      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d16:	2308      	movs	r3, #8
 8009d18:	e00e      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d1a:	2307      	movs	r3, #7
 8009d1c:	e00c      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d1e:	2306      	movs	r3, #6
 8009d20:	e00a      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d22:	2305      	movs	r3, #5
 8009d24:	e008      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d26:	2304      	movs	r3, #4
 8009d28:	e006      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e004      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e002      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e000      	b.n	8009d38 <HAL_GPIO_Init+0x240>
 8009d36:	2300      	movs	r3, #0
 8009d38:	69fa      	ldr	r2, [r7, #28]
 8009d3a:	f002 0203 	and.w	r2, r2, #3
 8009d3e:	0092      	lsls	r2, r2, #2
 8009d40:	4093      	lsls	r3, r2
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d48:	4934      	ldr	r1, [pc, #208]	; (8009e1c <HAL_GPIO_Init+0x324>)
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	089b      	lsrs	r3, r3, #2
 8009d4e:	3302      	adds	r3, #2
 8009d50:	69ba      	ldr	r2, [r7, #24]
 8009d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009d56:	4b3c      	ldr	r3, [pc, #240]	; (8009e48 <HAL_GPIO_Init+0x350>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	43db      	mvns	r3, r3
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	4013      	ands	r3, r2
 8009d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009d7a:	4a33      	ldr	r2, [pc, #204]	; (8009e48 <HAL_GPIO_Init+0x350>)
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009d80:	4b31      	ldr	r3, [pc, #196]	; (8009e48 <HAL_GPIO_Init+0x350>)
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009da4:	4a28      	ldr	r2, [pc, #160]	; (8009e48 <HAL_GPIO_Init+0x350>)
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009daa:	4b27      	ldr	r3, [pc, #156]	; (8009e48 <HAL_GPIO_Init+0x350>)
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	43db      	mvns	r3, r3
 8009db4:	69ba      	ldr	r2, [r7, #24]
 8009db6:	4013      	ands	r3, r2
 8009db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009dc6:	69ba      	ldr	r2, [r7, #24]
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009dce:	4a1e      	ldr	r2, [pc, #120]	; (8009e48 <HAL_GPIO_Init+0x350>)
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009dd4:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <HAL_GPIO_Init+0x350>)
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	43db      	mvns	r3, r3
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	4013      	ands	r3, r2
 8009de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009df8:	4a13      	ldr	r2, [pc, #76]	; (8009e48 <HAL_GPIO_Init+0x350>)
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	3301      	adds	r3, #1
 8009e02:	61fb      	str	r3, [r7, #28]
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	2b0f      	cmp	r3, #15
 8009e08:	f67f ae84 	bls.w	8009b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009e0c:	bf00      	nop
 8009e0e:	3724      	adds	r7, #36	; 0x24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	40023800 	.word	0x40023800
 8009e1c:	40013800 	.word	0x40013800
 8009e20:	40020000 	.word	0x40020000
 8009e24:	40020400 	.word	0x40020400
 8009e28:	40020800 	.word	0x40020800
 8009e2c:	40020c00 	.word	0x40020c00
 8009e30:	40021000 	.word	0x40021000
 8009e34:	40021400 	.word	0x40021400
 8009e38:	40021800 	.word	0x40021800
 8009e3c:	40021c00 	.word	0x40021c00
 8009e40:	40022000 	.word	0x40022000
 8009e44:	40022400 	.word	0x40022400
 8009e48:	40013c00 	.word	0x40013c00

08009e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691a      	ldr	r2, [r3, #16]
 8009e5c:	887b      	ldrh	r3, [r7, #2]
 8009e5e:	4013      	ands	r3, r2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e64:	2301      	movs	r3, #1
 8009e66:	73fb      	strb	r3, [r7, #15]
 8009e68:	e001      	b.n	8009e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	807b      	strh	r3, [r7, #2]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009e8c:	787b      	ldrb	r3, [r7, #1]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e92:	887a      	ldrh	r2, [r7, #2]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009e98:	e003      	b.n	8009ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009e9a:	887b      	ldrh	r3, [r7, #2]
 8009e9c:	041a      	lsls	r2, r3, #16
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	619a      	str	r2, [r3, #24]
}
 8009ea2:	bf00      	nop
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	695a      	ldr	r2, [r3, #20]
 8009ebe:	887b      	ldrh	r3, [r7, #2]
 8009ec0:	401a      	ands	r2, r3
 8009ec2:	887b      	ldrh	r3, [r7, #2]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d104      	bne.n	8009ed2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009ec8:	887b      	ldrh	r3, [r7, #2]
 8009eca:	041a      	lsls	r2, r3, #16
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009ed0:	e002      	b.n	8009ed8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009ed2:	887a      	ldrh	r2, [r7, #2]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	619a      	str	r2, [r3, #24]
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e11f      	b.n	800a136 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d106      	bne.n	8009f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7fd fdbc 	bl	8007a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2224      	movs	r2, #36	; 0x24
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0201 	bic.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009f48:	f003 fc70 	bl	800d82c <HAL_RCC_GetPCLK1Freq>
 8009f4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	4a7b      	ldr	r2, [pc, #492]	; (800a140 <HAL_I2C_Init+0x25c>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d807      	bhi.n	8009f68 <HAL_I2C_Init+0x84>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4a7a      	ldr	r2, [pc, #488]	; (800a144 <HAL_I2C_Init+0x260>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	bf94      	ite	ls
 8009f60:	2301      	movls	r3, #1
 8009f62:	2300      	movhi	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	e006      	b.n	8009f76 <HAL_I2C_Init+0x92>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4a77      	ldr	r2, [pc, #476]	; (800a148 <HAL_I2C_Init+0x264>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	bf94      	ite	ls
 8009f70:	2301      	movls	r3, #1
 8009f72:	2300      	movhi	r3, #0
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e0db      	b.n	800a136 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4a72      	ldr	r2, [pc, #456]	; (800a14c <HAL_I2C_Init+0x268>)
 8009f82:	fba2 2303 	umull	r2, r3, r2, r3
 8009f86:	0c9b      	lsrs	r3, r3, #18
 8009f88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	4a64      	ldr	r2, [pc, #400]	; (800a140 <HAL_I2C_Init+0x25c>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d802      	bhi.n	8009fb8 <HAL_I2C_Init+0xd4>
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	e009      	b.n	8009fcc <HAL_I2C_Init+0xe8>
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009fbe:	fb02 f303 	mul.w	r3, r2, r3
 8009fc2:	4a63      	ldr	r2, [pc, #396]	; (800a150 <HAL_I2C_Init+0x26c>)
 8009fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc8:	099b      	lsrs	r3, r3, #6
 8009fca:	3301      	adds	r3, #1
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	6812      	ldr	r2, [r2, #0]
 8009fd0:	430b      	orrs	r3, r1
 8009fd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009fde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	4956      	ldr	r1, [pc, #344]	; (800a140 <HAL_I2C_Init+0x25c>)
 8009fe8:	428b      	cmp	r3, r1
 8009fea:	d80d      	bhi.n	800a008 <HAL_I2C_Init+0x124>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	1e59      	subs	r1, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a000:	2b04      	cmp	r3, #4
 800a002:	bf38      	it	cc
 800a004:	2304      	movcc	r3, #4
 800a006:	e04f      	b.n	800a0a8 <HAL_I2C_Init+0x1c4>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d111      	bne.n	800a034 <HAL_I2C_Init+0x150>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	1e58      	subs	r0, r3, #1
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6859      	ldr	r1, [r3, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	440b      	add	r3, r1
 800a01e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a022:	3301      	adds	r3, #1
 800a024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bf0c      	ite	eq
 800a02c:	2301      	moveq	r3, #1
 800a02e:	2300      	movne	r3, #0
 800a030:	b2db      	uxtb	r3, r3
 800a032:	e012      	b.n	800a05a <HAL_I2C_Init+0x176>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	1e58      	subs	r0, r3, #1
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6859      	ldr	r1, [r3, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	440b      	add	r3, r1
 800a042:	0099      	lsls	r1, r3, #2
 800a044:	440b      	add	r3, r1
 800a046:	fbb0 f3f3 	udiv	r3, r0, r3
 800a04a:	3301      	adds	r3, #1
 800a04c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a050:	2b00      	cmp	r3, #0
 800a052:	bf0c      	ite	eq
 800a054:	2301      	moveq	r3, #1
 800a056:	2300      	movne	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <HAL_I2C_Init+0x17e>
 800a05e:	2301      	movs	r3, #1
 800a060:	e022      	b.n	800a0a8 <HAL_I2C_Init+0x1c4>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10e      	bne.n	800a088 <HAL_I2C_Init+0x1a4>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	1e58      	subs	r0, r3, #1
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6859      	ldr	r1, [r3, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	440b      	add	r3, r1
 800a078:	fbb0 f3f3 	udiv	r3, r0, r3
 800a07c:	3301      	adds	r3, #1
 800a07e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a086:	e00f      	b.n	800a0a8 <HAL_I2C_Init+0x1c4>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	1e58      	subs	r0, r3, #1
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6859      	ldr	r1, [r3, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	440b      	add	r3, r1
 800a096:	0099      	lsls	r1, r3, #2
 800a098:	440b      	add	r3, r1
 800a09a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a09e:	3301      	adds	r3, #1
 800a0a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	6809      	ldr	r1, [r1, #0]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	69da      	ldr	r2, [r3, #28]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a0d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6911      	ldr	r1, [r2, #16]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	68d2      	ldr	r2, [r2, #12]
 800a0e2:	4311      	orrs	r1, r2
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	6812      	ldr	r2, [r2, #0]
 800a0e8:	430b      	orrs	r3, r1
 800a0ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	695a      	ldr	r2, [r3, #20]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	431a      	orrs	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f042 0201 	orr.w	r2, r2, #1
 800a116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2220      	movs	r2, #32
 800a122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	000186a0 	.word	0x000186a0
 800a144:	001e847f 	.word	0x001e847f
 800a148:	003d08ff 	.word	0x003d08ff
 800a14c:	431bde83 	.word	0x431bde83
 800a150:	10624dd3 	.word	0x10624dd3

0800a154 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af02      	add	r7, sp, #8
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	4608      	mov	r0, r1
 800a15e:	4611      	mov	r1, r2
 800a160:	461a      	mov	r2, r3
 800a162:	4603      	mov	r3, r0
 800a164:	817b      	strh	r3, [r7, #10]
 800a166:	460b      	mov	r3, r1
 800a168:	813b      	strh	r3, [r7, #8]
 800a16a:	4613      	mov	r3, r2
 800a16c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a16e:	f7ff f809 	bl	8009184 <HAL_GetTick>
 800a172:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b20      	cmp	r3, #32
 800a17e:	f040 80d9 	bne.w	800a334 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	2319      	movs	r3, #25
 800a188:	2201      	movs	r2, #1
 800a18a:	496d      	ldr	r1, [pc, #436]	; (800a340 <HAL_I2C_Mem_Write+0x1ec>)
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f002 fb82 	bl	800c896 <I2C_WaitOnFlagUntilTimeout>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a198:	2302      	movs	r3, #2
 800a19a:	e0cc      	b.n	800a336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d101      	bne.n	800a1aa <HAL_I2C_Mem_Write+0x56>
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	e0c5      	b.n	800a336 <HAL_I2C_Mem_Write+0x1e2>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d007      	beq.n	800a1d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0201 	orr.w	r2, r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2221      	movs	r2, #33	; 0x21
 800a1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2240      	movs	r2, #64	; 0x40
 800a1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a3a      	ldr	r2, [r7, #32]
 800a1fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a206:	b29a      	uxth	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4a4d      	ldr	r2, [pc, #308]	; (800a344 <HAL_I2C_Mem_Write+0x1f0>)
 800a210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a212:	88f8      	ldrh	r0, [r7, #6]
 800a214:	893a      	ldrh	r2, [r7, #8]
 800a216:	8979      	ldrh	r1, [r7, #10]
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	4603      	mov	r3, r0
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f002 f82c 	bl	800c280 <I2C_RequestMemoryWrite>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d052      	beq.n	800a2d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e081      	b.n	800a336 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f002 fc03 	bl	800ca42 <I2C_WaitOnTXEFlagUntilTimeout>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00d      	beq.n	800a25e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a246:	2b04      	cmp	r3, #4
 800a248:	d107      	bne.n	800a25a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e06b      	b.n	800a336 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	781a      	ldrb	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a278:	3b01      	subs	r3, #1
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a284:	b29b      	uxth	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	f003 0304 	and.w	r3, r3, #4
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d11b      	bne.n	800a2d4 <HAL_I2C_Mem_Write+0x180>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d017      	beq.n	800a2d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	781a      	ldrb	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b4:	1c5a      	adds	r2, r3, #1
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1aa      	bne.n	800a232 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f002 fbef 	bl	800cac4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00d      	beq.n	800a308 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f0:	2b04      	cmp	r3, #4
 800a2f2:	d107      	bne.n	800a304 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a302:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e016      	b.n	800a336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2220      	movs	r2, #32
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	e000      	b.n	800a336 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a334:	2302      	movs	r3, #2
  }
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	00100002 	.word	0x00100002
 800a344:	ffff0000 	.word	0xffff0000

0800a348 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08c      	sub	sp, #48	; 0x30
 800a34c:	af02      	add	r7, sp, #8
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	4608      	mov	r0, r1
 800a352:	4611      	mov	r1, r2
 800a354:	461a      	mov	r2, r3
 800a356:	4603      	mov	r3, r0
 800a358:	817b      	strh	r3, [r7, #10]
 800a35a:	460b      	mov	r3, r1
 800a35c:	813b      	strh	r3, [r7, #8]
 800a35e:	4613      	mov	r3, r2
 800a360:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a362:	f7fe ff0f 	bl	8009184 <HAL_GetTick>
 800a366:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	2b20      	cmp	r3, #32
 800a372:	f040 8208 	bne.w	800a786 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	2319      	movs	r3, #25
 800a37c:	2201      	movs	r2, #1
 800a37e:	497b      	ldr	r1, [pc, #492]	; (800a56c <HAL_I2C_Mem_Read+0x224>)
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f002 fa88 	bl	800c896 <I2C_WaitOnFlagUntilTimeout>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a38c:	2302      	movs	r3, #2
 800a38e:	e1fb      	b.n	800a788 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a396:	2b01      	cmp	r3, #1
 800a398:	d101      	bne.n	800a39e <HAL_I2C_Mem_Read+0x56>
 800a39a:	2302      	movs	r3, #2
 800a39c:	e1f4      	b.n	800a788 <HAL_I2C_Mem_Read+0x440>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d007      	beq.n	800a3c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f042 0201 	orr.w	r2, r2, #1
 800a3c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2222      	movs	r2, #34	; 0x22
 800a3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2240      	movs	r2, #64	; 0x40
 800a3e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a3f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4a5b      	ldr	r2, [pc, #364]	; (800a570 <HAL_I2C_Mem_Read+0x228>)
 800a404:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a406:	88f8      	ldrh	r0, [r7, #6]
 800a408:	893a      	ldrh	r2, [r7, #8]
 800a40a:	8979      	ldrh	r1, [r7, #10]
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	4603      	mov	r3, r0
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f001 ffc6 	bl	800c3a8 <I2C_RequestMemoryRead>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e1b0      	b.n	800a788 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d113      	bne.n	800a456 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a42e:	2300      	movs	r3, #0
 800a430:	623b      	str	r3, [r7, #32]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	623b      	str	r3, [r7, #32]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	623b      	str	r3, [r7, #32]
 800a442:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	e184      	b.n	800a760 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d11b      	bne.n	800a496 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a46c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a46e:	2300      	movs	r3, #0
 800a470:	61fb      	str	r3, [r7, #28]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	61fb      	str	r3, [r7, #28]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	61fb      	str	r3, [r7, #28]
 800a482:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	e164      	b.n	800a760 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d11b      	bne.n	800a4d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61bb      	str	r3, [r7, #24]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	61bb      	str	r3, [r7, #24]
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	e144      	b.n	800a760 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	617b      	str	r3, [r7, #20]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	617b      	str	r3, [r7, #20]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	617b      	str	r3, [r7, #20]
 800a4ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a4ec:	e138      	b.n	800a760 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	f200 80f1 	bhi.w	800a6da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d123      	bne.n	800a548 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f002 fb1e 	bl	800cb46 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e139      	b.n	800a788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	691a      	ldr	r2, [r3, #16]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	b2d2      	uxtb	r2, r2
 800a520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a530:	3b01      	subs	r3, #1
 800a532:	b29a      	uxth	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	3b01      	subs	r3, #1
 800a540:	b29a      	uxth	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a546:	e10b      	b.n	800a760 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d14e      	bne.n	800a5ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	2200      	movs	r2, #0
 800a558:	4906      	ldr	r1, [pc, #24]	; (800a574 <HAL_I2C_Mem_Read+0x22c>)
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f002 f99b 	bl	800c896 <I2C_WaitOnFlagUntilTimeout>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d008      	beq.n	800a578 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e10e      	b.n	800a788 <HAL_I2C_Mem_Read+0x440>
 800a56a:	bf00      	nop
 800a56c:	00100002 	.word	0x00100002
 800a570:	ffff0000 	.word	0xffff0000
 800a574:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	691a      	ldr	r2, [r3, #16]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	b2d2      	uxtb	r2, r2
 800a594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	691a      	ldr	r2, [r3, #16]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	b2d2      	uxtb	r2, r2
 800a5c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5ec:	e0b8      	b.n	800a760 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	4966      	ldr	r1, [pc, #408]	; (800a790 <HAL_I2C_Mem_Read+0x448>)
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f002 f94c 	bl	800c896 <I2C_WaitOnFlagUntilTimeout>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e0bf      	b.n	800a788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	691a      	ldr	r2, [r3, #16]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a634:	3b01      	subs	r3, #1
 800a636:	b29a      	uxth	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a640:	b29b      	uxth	r3, r3
 800a642:	3b01      	subs	r3, #1
 800a644:	b29a      	uxth	r2, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	2200      	movs	r2, #0
 800a652:	494f      	ldr	r1, [pc, #316]	; (800a790 <HAL_I2C_Mem_Read+0x448>)
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f002 f91e 	bl	800c896 <I2C_WaitOnFlagUntilTimeout>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e091      	b.n	800a788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	691a      	ldr	r2, [r3, #16]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	b2d2      	uxtb	r2, r2
 800a680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a690:	3b01      	subs	r3, #1
 800a692:	b29a      	uxth	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	691a      	ldr	r2, [r3, #16]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	b2d2      	uxtb	r2, r2
 800a6b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6d8:	e042      	b.n	800a760 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f002 fa31 	bl	800cb46 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e04c      	b.n	800a788 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	b2d2      	uxtb	r2, r2
 800a6fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	1c5a      	adds	r2, r3, #1
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a716:	b29b      	uxth	r3, r3
 800a718:	3b01      	subs	r3, #1
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	f003 0304 	and.w	r3, r3, #4
 800a72a:	2b04      	cmp	r3, #4
 800a72c:	d118      	bne.n	800a760 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	691a      	ldr	r2, [r3, #16]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	b2d2      	uxtb	r2, r2
 800a73a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a74a:	3b01      	subs	r3, #1
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a756:	b29b      	uxth	r3, r3
 800a758:	3b01      	subs	r3, #1
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a764:	2b00      	cmp	r3, #0
 800a766:	f47f aec2 	bne.w	800a4ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	e000      	b.n	800a788 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a786:	2302      	movs	r3, #2
  }
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3728      	adds	r7, #40	; 0x28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	00010004 	.word	0x00010004

0800a794 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	4608      	mov	r0, r1
 800a79e:	4611      	mov	r1, r2
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	817b      	strh	r3, [r7, #10]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	813b      	strh	r3, [r7, #8]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b20      	cmp	r3, #32
 800a7bc:	f040 809a 	bne.w	800a8f4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a7c0:	4b50      	ldr	r3, [pc, #320]	; (800a904 <HAL_I2C_Mem_Read_IT+0x170>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	08db      	lsrs	r3, r3, #3
 800a7c6:	4a50      	ldr	r2, [pc, #320]	; (800a908 <HAL_I2C_Mem_Read_IT+0x174>)
 800a7c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7cc:	0a1a      	lsrs	r2, r3, #8
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	009a      	lsls	r2, r3, #2
 800a7d6:	4413      	add	r3, r2
 800a7d8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d116      	bne.n	800a814 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a800:	f043 0220 	orr.w	r2, r3, #32
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e070      	b.n	800a8f6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d0db      	beq.n	800a7da <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d101      	bne.n	800a830 <HAL_I2C_Mem_Read_IT+0x9c>
 800a82c:	2302      	movs	r3, #2
 800a82e:	e062      	b.n	800a8f6 <HAL_I2C_Mem_Read_IT+0x162>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b01      	cmp	r3, #1
 800a844:	d007      	beq.n	800a856 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f042 0201 	orr.w	r2, r2, #1
 800a854:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a864:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2222      	movs	r2, #34	; 0x22
 800a86a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2240      	movs	r2, #64	; 0x40
 800a872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6a3a      	ldr	r2, [r7, #32]
 800a880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a886:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	4a1d      	ldr	r2, [pc, #116]	; (800a90c <HAL_I2C_Mem_Read_IT+0x178>)
 800a896:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800a898:	897a      	ldrh	r2, [r7, #10]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800a89e:	893a      	ldrh	r2, [r7, #8]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800a8a4:	88fa      	ldrh	r2, [r7, #6]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a8be:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8ce:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d007      	beq.n	800a8f0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	685a      	ldr	r2, [r3, #4]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800a8ee:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	e000      	b.n	800a8f6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800a8f4:	2302      	movs	r3, #2
  }
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	200001b0 	.word	0x200001b0
 800a908:	14f8b589 	.word	0x14f8b589
 800a90c:	ffff0000 	.word	0xffff0000

0800a910 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08c      	sub	sp, #48	; 0x30
 800a914:	af02      	add	r7, sp, #8
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	4608      	mov	r0, r1
 800a91a:	4611      	mov	r1, r2
 800a91c:	461a      	mov	r2, r3
 800a91e:	4603      	mov	r3, r0
 800a920:	817b      	strh	r3, [r7, #10]
 800a922:	460b      	mov	r3, r1
 800a924:	813b      	strh	r3, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a92a:	f7fe fc2b 	bl	8009184 <HAL_GetTick>
 800a92e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b20      	cmp	r3, #32
 800a93e:	f040 8123 	bne.w	800ab88 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a942:	4b94      	ldr	r3, [pc, #592]	; (800ab94 <HAL_I2C_Mem_Read_DMA+0x284>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	08db      	lsrs	r3, r3, #3
 800a948:	4a93      	ldr	r2, [pc, #588]	; (800ab98 <HAL_I2C_Mem_Read_DMA+0x288>)
 800a94a:	fba2 2303 	umull	r2, r3, r2, r3
 800a94e:	0a1a      	lsrs	r2, r3, #8
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	009a      	lsls	r2, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	3b01      	subs	r3, #1
 800a960:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d116      	bne.n	800a996 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2220      	movs	r2, #32
 800a972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a982:	f043 0220 	orr.w	r2, r3, #32
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e0f9      	b.n	800ab8a <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	f003 0302 	and.w	r3, r3, #2
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d0db      	beq.n	800a95c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <HAL_I2C_Mem_Read_DMA+0xa2>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e0eb      	b.n	800ab8a <HAL_I2C_Mem_Read_DMA+0x27a>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d007      	beq.n	800a9d8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f042 0201 	orr.w	r2, r2, #1
 800a9d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2222      	movs	r2, #34	; 0x22
 800a9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2240      	movs	r2, #64	; 0x40
 800a9f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800aa08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4a61      	ldr	r2, [pc, #388]	; (800ab9c <HAL_I2C_Mem_Read_DMA+0x28c>)
 800aa18:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 8085 	beq.w	800ab2e <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa28:	4a5d      	ldr	r2, [pc, #372]	; (800aba0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800aa2a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa30:	4a5c      	ldr	r2, [pc, #368]	; (800aba4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800aa32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa38:	2200      	movs	r2, #0
 800aa3a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa40:	2200      	movs	r2, #0
 800aa42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	2200      	movs	r2, #0
 800aa4a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa50:	2200      	movs	r2, #0
 800aa52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3310      	adds	r3, #16
 800aa5e:	4619      	mov	r1, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	461a      	mov	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa6a:	f7fe fd49 	bl	8009500 <HAL_DMA_Start_IT>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 800aa74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d144      	bne.n	800ab06 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800aa7c:	88f8      	ldrh	r0, [r7, #6]
 800aa7e:	893a      	ldrh	r2, [r7, #8]
 800aa80:	8979      	ldrh	r1, [r7, #10]
 800aa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	2323      	movs	r3, #35	; 0x23
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f001 fc8b 	bl	800c3a8 <I2C_RequestMemoryRead>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e076      	b.n	800ab8a <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d108      	bne.n	800aab6 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	e007      	b.n	800aac6 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aac4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aac6:	2300      	movs	r3, #0
 800aac8:	61bb      	str	r3, [r7, #24]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	61bb      	str	r3, [r7, #24]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	61bb      	str	r3, [r7, #24]
 800aada:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aaf2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab02:	605a      	str	r2, [r3, #4]
 800ab04:	e03e      	b.n	800ab84 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2220      	movs	r2, #32
 800ab0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1a:	f043 0210 	orr.w	r2, r3, #16
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e02d      	b.n	800ab8a <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800ab2e:	88f8      	ldrh	r0, [r7, #6]
 800ab30:	893a      	ldrh	r2, [r7, #8]
 800ab32:	8979      	ldrh	r1, [r7, #10]
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	2323      	movs	r3, #35	; 0x23
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f001 fc32 	bl	800c3a8 <I2C_RequestMemoryRead>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e01d      	b.n	800ab8a <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	617b      	str	r3, [r7, #20]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	617b      	str	r3, [r7, #20]
 800ab62:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab72:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2220      	movs	r2, #32
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	e000      	b.n	800ab8a <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 800ab88:	2302      	movs	r3, #2
  }
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3728      	adds	r7, #40	; 0x28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	200001b0 	.word	0x200001b0
 800ab98:	14f8b589 	.word	0x14f8b589
 800ab9c:	ffff0000 	.word	0xffff0000
 800aba0:	0800c575 	.word	0x0800c575
 800aba4:	0800c71f 	.word	0x0800c71f

0800aba8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800abb0:	2300      	movs	r3, #0
 800abb2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abd0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
 800abd4:	2b10      	cmp	r3, #16
 800abd6:	d003      	beq.n	800abe0 <HAL_I2C_EV_IRQHandler+0x38>
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	2b40      	cmp	r3, #64	; 0x40
 800abdc:	f040 80b6 	bne.w	800ad4c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10d      	bne.n	800ac16 <HAL_I2C_EV_IRQHandler+0x6e>
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ac00:	d003      	beq.n	800ac0a <HAL_I2C_EV_IRQHandler+0x62>
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ac08:	d101      	bne.n	800ac0e <HAL_I2C_EV_IRQHandler+0x66>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <HAL_I2C_EV_IRQHandler+0x68>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	f000 8127 	beq.w	800ae64 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00c      	beq.n	800ac3a <HAL_I2C_EV_IRQHandler+0x92>
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	0a5b      	lsrs	r3, r3, #9
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d006      	beq.n	800ac3a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f002 f80f 	bl	800cc50 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fd12 	bl	800b65c <I2C_Master_SB>
 800ac38:	e087      	b.n	800ad4a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	08db      	lsrs	r3, r3, #3
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d009      	beq.n	800ac5a <HAL_I2C_EV_IRQHandler+0xb2>
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	0a5b      	lsrs	r3, r3, #9
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fd88 	bl	800b768 <I2C_Master_ADD10>
 800ac58:	e077      	b.n	800ad4a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	085b      	lsrs	r3, r3, #1
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d009      	beq.n	800ac7a <HAL_I2C_EV_IRQHandler+0xd2>
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	0a5b      	lsrs	r3, r3, #9
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fda2 	bl	800b7bc <I2C_Master_ADDR>
 800ac78:	e067      	b.n	800ad4a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	089b      	lsrs	r3, r3, #2
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d030      	beq.n	800ace8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac94:	f000 80e8 	beq.w	800ae68 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	09db      	lsrs	r3, r3, #7
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00f      	beq.n	800acc4 <HAL_I2C_EV_IRQHandler+0x11c>
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	0a9b      	lsrs	r3, r3, #10
 800aca8:	f003 0301 	and.w	r3, r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	d009      	beq.n	800acc4 <HAL_I2C_EV_IRQHandler+0x11c>
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	089b      	lsrs	r3, r3, #2
 800acb4:	f003 0301 	and.w	r3, r3, #1
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d103      	bne.n	800acc4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f9de 	bl	800b07e <I2C_MasterTransmit_TXE>
 800acc2:	e042      	b.n	800ad4a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	089b      	lsrs	r3, r3, #2
 800acc8:	f003 0301 	and.w	r3, r3, #1
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 80cb 	beq.w	800ae68 <HAL_I2C_EV_IRQHandler+0x2c0>
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	0a5b      	lsrs	r3, r3, #9
 800acd6:	f003 0301 	and.w	r3, r3, #1
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 80c4 	beq.w	800ae68 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fa68 	bl	800b1b6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ace6:	e0bf      	b.n	800ae68 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acf6:	f000 80b7 	beq.w	800ae68 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	099b      	lsrs	r3, r3, #6
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00f      	beq.n	800ad26 <HAL_I2C_EV_IRQHandler+0x17e>
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	0a9b      	lsrs	r3, r3, #10
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d009      	beq.n	800ad26 <HAL_I2C_EV_IRQHandler+0x17e>
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	089b      	lsrs	r3, r3, #2
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d103      	bne.n	800ad26 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fb30 	bl	800b384 <I2C_MasterReceive_RXNE>
 800ad24:	e011      	b.n	800ad4a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	089b      	lsrs	r3, r3, #2
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 809a 	beq.w	800ae68 <HAL_I2C_EV_IRQHandler+0x2c0>
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	0a5b      	lsrs	r3, r3, #9
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 8093 	beq.w	800ae68 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fba0 	bl	800b488 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ad48:	e08e      	b.n	800ae68 <HAL_I2C_EV_IRQHandler+0x2c0>
 800ad4a:	e08d      	b.n	800ae68 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d004      	beq.n	800ad5e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	61fb      	str	r3, [r7, #28]
 800ad5c:	e007      	b.n	800ad6e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	085b      	lsrs	r3, r3, #1
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d012      	beq.n	800ada0 <HAL_I2C_EV_IRQHandler+0x1f8>
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	0a5b      	lsrs	r3, r3, #9
 800ad7e:	f003 0301 	and.w	r3, r3, #1
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00c      	beq.n	800ada0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800ad96:	69b9      	ldr	r1, [r7, #24]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 ff5e 	bl	800bc5a <I2C_Slave_ADDR>
 800ad9e:	e066      	b.n	800ae6e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	091b      	lsrs	r3, r3, #4
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d009      	beq.n	800adc0 <HAL_I2C_EV_IRQHandler+0x218>
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	0a5b      	lsrs	r3, r3, #9
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d003      	beq.n	800adc0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 ff93 	bl	800bce4 <I2C_Slave_STOPF>
 800adbe:	e056      	b.n	800ae6e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800adc0:	7bbb      	ldrb	r3, [r7, #14]
 800adc2:	2b21      	cmp	r3, #33	; 0x21
 800adc4:	d002      	beq.n	800adcc <HAL_I2C_EV_IRQHandler+0x224>
 800adc6:	7bbb      	ldrb	r3, [r7, #14]
 800adc8:	2b29      	cmp	r3, #41	; 0x29
 800adca:	d125      	bne.n	800ae18 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	09db      	lsrs	r3, r3, #7
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00f      	beq.n	800adf8 <HAL_I2C_EV_IRQHandler+0x250>
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	0a9b      	lsrs	r3, r3, #10
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d009      	beq.n	800adf8 <HAL_I2C_EV_IRQHandler+0x250>
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	089b      	lsrs	r3, r3, #2
 800ade8:	f003 0301 	and.w	r3, r3, #1
 800adec:	2b00      	cmp	r3, #0
 800adee:	d103      	bne.n	800adf8 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fe74 	bl	800bade <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800adf6:	e039      	b.n	800ae6c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	089b      	lsrs	r3, r3, #2
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d033      	beq.n	800ae6c <HAL_I2C_EV_IRQHandler+0x2c4>
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	0a5b      	lsrs	r3, r3, #9
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d02d      	beq.n	800ae6c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fea1 	bl	800bb58 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ae16:	e029      	b.n	800ae6c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	099b      	lsrs	r3, r3, #6
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00f      	beq.n	800ae44 <HAL_I2C_EV_IRQHandler+0x29c>
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	0a9b      	lsrs	r3, r3, #10
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d009      	beq.n	800ae44 <HAL_I2C_EV_IRQHandler+0x29c>
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	089b      	lsrs	r3, r3, #2
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d103      	bne.n	800ae44 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 feac 	bl	800bb9a <I2C_SlaveReceive_RXNE>
 800ae42:	e014      	b.n	800ae6e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	089b      	lsrs	r3, r3, #2
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00e      	beq.n	800ae6e <HAL_I2C_EV_IRQHandler+0x2c6>
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	0a5b      	lsrs	r3, r3, #9
 800ae54:	f003 0301 	and.w	r3, r3, #1
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d008      	beq.n	800ae6e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 feda 	bl	800bc16 <I2C_SlaveReceive_BTF>
 800ae62:	e004      	b.n	800ae6e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800ae64:	bf00      	nop
 800ae66:	e002      	b.n	800ae6e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ae68:	bf00      	nop
 800ae6a:	e000      	b.n	800ae6e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ae6c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800ae6e:	3720      	adds	r7, #32
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b08a      	sub	sp, #40	; 0x28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae96:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ae98:	6a3b      	ldr	r3, [r7, #32]
 800ae9a:	0a1b      	lsrs	r3, r3, #8
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00e      	beq.n	800aec2 <HAL_I2C_ER_IRQHandler+0x4e>
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	0a1b      	lsrs	r3, r3, #8
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d008      	beq.n	800aec2 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	f043 0301 	orr.w	r3, r3, #1
 800aeb6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aec0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	0a5b      	lsrs	r3, r3, #9
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00e      	beq.n	800aeec <HAL_I2C_ER_IRQHandler+0x78>
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	0a1b      	lsrs	r3, r3, #8
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d008      	beq.n	800aeec <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	f043 0302 	orr.w	r3, r3, #2
 800aee0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800aeea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	0a9b      	lsrs	r3, r3, #10
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d03f      	beq.n	800af78 <HAL_I2C_ER_IRQHandler+0x104>
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	0a1b      	lsrs	r3, r3, #8
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	2b00      	cmp	r3, #0
 800af02:	d039      	beq.n	800af78 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800af04:	7efb      	ldrb	r3, [r7, #27]
 800af06:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af16:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800af1e:	7ebb      	ldrb	r3, [r7, #26]
 800af20:	2b20      	cmp	r3, #32
 800af22:	d112      	bne.n	800af4a <HAL_I2C_ER_IRQHandler+0xd6>
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10f      	bne.n	800af4a <HAL_I2C_ER_IRQHandler+0xd6>
 800af2a:	7cfb      	ldrb	r3, [r7, #19]
 800af2c:	2b21      	cmp	r3, #33	; 0x21
 800af2e:	d008      	beq.n	800af42 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800af30:	7cfb      	ldrb	r3, [r7, #19]
 800af32:	2b29      	cmp	r3, #41	; 0x29
 800af34:	d005      	beq.n	800af42 <HAL_I2C_ER_IRQHandler+0xce>
 800af36:	7cfb      	ldrb	r3, [r7, #19]
 800af38:	2b28      	cmp	r3, #40	; 0x28
 800af3a:	d106      	bne.n	800af4a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b21      	cmp	r3, #33	; 0x21
 800af40:	d103      	bne.n	800af4a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fffe 	bl	800bf44 <I2C_Slave_AF>
 800af48:	e016      	b.n	800af78 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af52:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	f043 0304 	orr.w	r3, r3, #4
 800af5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800af5c:	7efb      	ldrb	r3, [r7, #27]
 800af5e:	2b10      	cmp	r3, #16
 800af60:	d002      	beq.n	800af68 <HAL_I2C_ER_IRQHandler+0xf4>
 800af62:	7efb      	ldrb	r3, [r7, #27]
 800af64:	2b40      	cmp	r3, #64	; 0x40
 800af66:	d107      	bne.n	800af78 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af76:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800af78:	6a3b      	ldr	r3, [r7, #32]
 800af7a:	0adb      	lsrs	r3, r3, #11
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00e      	beq.n	800afa2 <HAL_I2C_ER_IRQHandler+0x12e>
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	0a1b      	lsrs	r3, r3, #8
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d008      	beq.n	800afa2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	f043 0308 	orr.w	r3, r3, #8
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800afa0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800afa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d008      	beq.n	800afba <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	431a      	orrs	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f001 f835 	bl	800c024 <I2C_ITError>
  }
}
 800afba:	bf00      	nop
 800afbc:	3728      	adds	r7, #40	; 0x28
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800afca:	bf00      	nop
 800afcc:	370c      	adds	r7, #12
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b083      	sub	sp, #12
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800afde:	bf00      	nop
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afea:	b480      	push	{r7}
 800afec:	b083      	sub	sp, #12
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800aff2:	bf00      	nop
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800affe:	b480      	push	{r7}
 800b000:	b083      	sub	sp, #12
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	460b      	mov	r3, r1
 800b01c:	70fb      	strb	r3, [r7, #3]
 800b01e:	4613      	mov	r3, r2
 800b020:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b022:	bf00      	nop
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b04a:	bf00      	nop
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b083      	sub	sp, #12
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b072:	bf00      	nop
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b08c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b094:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d150      	bne.n	800b146 <I2C_MasterTransmit_TXE+0xc8>
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	2b21      	cmp	r3, #33	; 0x21
 800b0a8:	d14d      	bne.n	800b146 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2b08      	cmp	r3, #8
 800b0ae:	d01d      	beq.n	800b0ec <I2C_MasterTransmit_TXE+0x6e>
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2b20      	cmp	r3, #32
 800b0b4:	d01a      	beq.n	800b0ec <I2C_MasterTransmit_TXE+0x6e>
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b0bc:	d016      	beq.n	800b0ec <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b0cc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2211      	movs	r2, #17
 800b0d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2220      	movs	r2, #32
 800b0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f7ff ff6c 	bl	800afc2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b0ea:	e060      	b.n	800b1ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685a      	ldr	r2, [r3, #4]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b0fa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b10a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2220      	movs	r2, #32
 800b116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b120:	b2db      	uxtb	r3, r3
 800b122:	2b40      	cmp	r3, #64	; 0x40
 800b124:	d107      	bne.n	800b136 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7ff ff87 	bl	800b042 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b134:	e03b      	b.n	800b1ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff ff3f 	bl	800afc2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b144:	e033      	b.n	800b1ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800b146:	7bfb      	ldrb	r3, [r7, #15]
 800b148:	2b21      	cmp	r3, #33	; 0x21
 800b14a:	d005      	beq.n	800b158 <I2C_MasterTransmit_TXE+0xda>
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
 800b14e:	2b40      	cmp	r3, #64	; 0x40
 800b150:	d12d      	bne.n	800b1ae <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	2b22      	cmp	r3, #34	; 0x22
 800b156:	d12a      	bne.n	800b1ae <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d108      	bne.n	800b174 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b170:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b172:	e01c      	b.n	800b1ae <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b40      	cmp	r3, #64	; 0x40
 800b17e:	d103      	bne.n	800b188 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f898 	bl	800b2b6 <I2C_MemoryTransmit_TXE_BTF>
}
 800b186:	e012      	b.n	800b1ae <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	781a      	ldrb	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b1ac:	e7ff      	b.n	800b1ae <I2C_MasterTransmit_TXE+0x130>
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b21      	cmp	r3, #33	; 0x21
 800b1ce:	d165      	bne.n	800b29c <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d012      	beq.n	800b200 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	781a      	ldrb	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800b1fe:	e056      	b.n	800b2ae <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b08      	cmp	r3, #8
 800b204:	d01d      	beq.n	800b242 <I2C_MasterTransmit_BTF+0x8c>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d01a      	beq.n	800b242 <I2C_MasterTransmit_BTF+0x8c>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b212:	d016      	beq.n	800b242 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	685a      	ldr	r2, [r3, #4]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b222:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2211      	movs	r2, #17
 800b228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2220      	movs	r2, #32
 800b236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7ff fec1 	bl	800afc2 <HAL_I2C_MasterTxCpltCallback>
}
 800b240:	e035      	b.n	800b2ae <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b250:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b260:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2220      	movs	r2, #32
 800b26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b40      	cmp	r3, #64	; 0x40
 800b27a:	d107      	bne.n	800b28c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7ff fedc 	bl	800b042 <HAL_I2C_MemTxCpltCallback>
}
 800b28a:	e010      	b.n	800b2ae <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7ff fe94 	bl	800afc2 <HAL_I2C_MasterTxCpltCallback>
}
 800b29a:	e008      	b.n	800b2ae <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	2b40      	cmp	r3, #64	; 0x40
 800b2a6:	d102      	bne.n	800b2ae <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 f804 	bl	800b2b6 <I2C_MemoryTransmit_TXE_BTF>
}
 800b2ae:	bf00      	nop
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b083      	sub	sp, #12
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d11d      	bne.n	800b302 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d10b      	bne.n	800b2e6 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2de:	1c9a      	adds	r2, r3, #2
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800b2e4:	e048      	b.n	800b378 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	121b      	asrs	r3, r3, #8
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b300:	e03a      	b.n	800b378 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b306:	2b01      	cmp	r3, #1
 800b308:	d10b      	bne.n	800b322 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b30e:	b2da      	uxtb	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b320:	e02a      	b.n	800b378 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b326:	2b02      	cmp	r3, #2
 800b328:	d126      	bne.n	800b378 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b22      	cmp	r3, #34	; 0x22
 800b334:	d108      	bne.n	800b348 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b344:	601a      	str	r2, [r3, #0]
}
 800b346:	e017      	b.n	800b378 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b21      	cmp	r3, #33	; 0x21
 800b352:	d111      	bne.n	800b378 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b36e:	b29b      	uxth	r3, r3
 800b370:	3b01      	subs	r3, #1
 800b372:	b29a      	uxth	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b22      	cmp	r3, #34	; 0x22
 800b396:	d173      	bne.n	800b480 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d920      	bls.n	800b3e8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	691a      	ldr	r2, [r3, #16]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b0:	b2d2      	uxtb	r2, r2
 800b3b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	1c5a      	adds	r2, r3, #1
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	2b03      	cmp	r3, #3
 800b3d4:	d154      	bne.n	800b480 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3e4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800b3e6:	e04b      	b.n	800b480 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d047      	beq.n	800b480 <I2C_MasterReceive_RXNE+0xfc>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d002      	beq.n	800b3fc <I2C_MasterReceive_RXNE+0x78>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d141      	bne.n	800b480 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b40a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b41a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	691a      	ldr	r2, [r3, #16]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b426:	b2d2      	uxtb	r2, r2
 800b428:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42e:	1c5a      	adds	r2, r3, #1
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b438:	b29b      	uxth	r3, r3
 800b43a:	3b01      	subs	r3, #1
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2220      	movs	r2, #32
 800b446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b40      	cmp	r3, #64	; 0x40
 800b454:	d10a      	bne.n	800b46c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7fb fb5b 	bl	8006b20 <HAL_I2C_MemRxCpltCallback>
}
 800b46a:	e009      	b.n	800b480 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2212      	movs	r2, #18
 800b478:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f7ff fdab 	bl	800afd6 <HAL_I2C_MasterRxCpltCallback>
}
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d11b      	bne.n	800b4d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	691a      	ldr	r2, [r3, #16]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c2:	1c5a      	adds	r2, r3, #1
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800b4d6:	e0bd      	b.n	800b654 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d129      	bne.n	800b536 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	d00a      	beq.n	800b50e <I2C_MasterReceive_BTF+0x86>
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d007      	beq.n	800b50e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b50c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	691a      	ldr	r2, [r3, #16]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b518:	b2d2      	uxtb	r2, r2
 800b51a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b520:	1c5a      	adds	r2, r3, #1
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	3b01      	subs	r3, #1
 800b52e:	b29a      	uxth	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b534:	e08e      	b.n	800b654 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d176      	bne.n	800b62e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d002      	beq.n	800b54c <I2C_MasterReceive_BTF+0xc4>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2b10      	cmp	r3, #16
 800b54a:	d108      	bne.n	800b55e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b55a:	601a      	str	r2, [r3, #0]
 800b55c:	e019      	b.n	800b592 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b04      	cmp	r3, #4
 800b562:	d002      	beq.n	800b56a <I2C_MasterReceive_BTF+0xe2>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b02      	cmp	r3, #2
 800b568:	d108      	bne.n	800b57c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	e00a      	b.n	800b592 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b10      	cmp	r3, #16
 800b580:	d007      	beq.n	800b592 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b590:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	691a      	ldr	r2, [r3, #16]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	b2d2      	uxtb	r2, r2
 800b59e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	691a      	ldr	r2, [r3, #16]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	b2d2      	uxtb	r2, r2
 800b5c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b5ec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2220      	movs	r2, #32
 800b5f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b40      	cmp	r3, #64	; 0x40
 800b600:	d10a      	bne.n	800b618 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7fb fa85 	bl	8006b20 <HAL_I2C_MemRxCpltCallback>
}
 800b616:	e01d      	b.n	800b654 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2212      	movs	r2, #18
 800b624:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff fcd5 	bl	800afd6 <HAL_I2C_MasterRxCpltCallback>
}
 800b62c:	e012      	b.n	800b654 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	b2d2      	uxtb	r2, r2
 800b63a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	3b01      	subs	r3, #1
 800b64e:	b29a      	uxth	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b654:	bf00      	nop
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	2b40      	cmp	r3, #64	; 0x40
 800b66e:	d117      	bne.n	800b6a0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b674:	2b00      	cmp	r3, #0
 800b676:	d109      	bne.n	800b68c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	461a      	mov	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b688:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b68a:	e067      	b.n	800b75c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b690:	b2db      	uxtb	r3, r3
 800b692:	f043 0301 	orr.w	r3, r3, #1
 800b696:	b2da      	uxtb	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	611a      	str	r2, [r3, #16]
}
 800b69e:	e05d      	b.n	800b75c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6a8:	d133      	bne.n	800b712 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	2b21      	cmp	r3, #33	; 0x21
 800b6b4:	d109      	bne.n	800b6ca <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	461a      	mov	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b6c6:	611a      	str	r2, [r3, #16]
 800b6c8:	e008      	b.n	800b6dc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	f043 0301 	orr.w	r3, r3, #1
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d004      	beq.n	800b6ee <I2C_Master_SB+0x92>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d108      	bne.n	800b700 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d032      	beq.n	800b75c <I2C_Master_SB+0x100>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d02d      	beq.n	800b75c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b70e:	605a      	str	r2, [r3, #4]
}
 800b710:	e024      	b.n	800b75c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10e      	bne.n	800b738 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b71e:	b29b      	uxth	r3, r3
 800b720:	11db      	asrs	r3, r3, #7
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 0306 	and.w	r3, r3, #6
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	f063 030f 	orn	r3, r3, #15
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	611a      	str	r2, [r3, #16]
}
 800b736:	e011      	b.n	800b75c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d10d      	bne.n	800b75c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b744:	b29b      	uxth	r3, r3
 800b746:	11db      	asrs	r3, r3, #7
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	f003 0306 	and.w	r3, r3, #6
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	f063 030e 	orn	r3, r3, #14
 800b754:	b2da      	uxtb	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	611a      	str	r2, [r3, #16]
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b774:	b2da      	uxtb	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b780:	2b00      	cmp	r3, #0
 800b782:	d103      	bne.n	800b78c <I2C_Master_ADD10+0x24>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d011      	beq.n	800b7b0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b792:	2b00      	cmp	r3, #0
 800b794:	d104      	bne.n	800b7a0 <I2C_Master_ADD10+0x38>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d007      	beq.n	800b7b0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7ae:	605a      	str	r2, [r3, #4]
    }
  }
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b091      	sub	sp, #68	; 0x44
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b22      	cmp	r3, #34	; 0x22
 800b7e4:	f040 8169 	bne.w	800baba <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10f      	bne.n	800b810 <I2C_Master_ADDR+0x54>
 800b7f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7f4:	2b40      	cmp	r3, #64	; 0x40
 800b7f6:	d10b      	bne.n	800b810 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	633b      	str	r3, [r7, #48]	; 0x30
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	633b      	str	r3, [r7, #48]	; 0x30
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	633b      	str	r3, [r7, #48]	; 0x30
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	e160      	b.n	800bad2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b814:	2b00      	cmp	r3, #0
 800b816:	d11d      	bne.n	800b854 <I2C_Master_ADDR+0x98>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b820:	d118      	bne.n	800b854 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b822:	2300      	movs	r3, #0
 800b824:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b846:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b84c:	1c5a      	adds	r2, r3, #1
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	651a      	str	r2, [r3, #80]	; 0x50
 800b852:	e13e      	b.n	800bad2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b858:	b29b      	uxth	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d113      	bne.n	800b886 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b85e:	2300      	movs	r3, #0
 800b860:	62bb      	str	r3, [r7, #40]	; 0x28
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	62bb      	str	r3, [r7, #40]	; 0x28
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	62bb      	str	r3, [r7, #40]	; 0x28
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	e115      	b.n	800bab2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	f040 808a 	bne.w	800b9a6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b898:	d137      	bne.n	800b90a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8a8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8b8:	d113      	bne.n	800b8e2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8c8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	699b      	ldr	r3, [r3, #24]
 800b8dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	e0e7      	b.n	800bab2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	623b      	str	r3, [r7, #32]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	623b      	str	r3, [r7, #32]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	623b      	str	r3, [r7, #32]
 800b8f6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	e0d3      	b.n	800bab2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	2b08      	cmp	r3, #8
 800b90e:	d02e      	beq.n	800b96e <I2C_Master_ADDR+0x1b2>
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	2b20      	cmp	r3, #32
 800b914:	d02b      	beq.n	800b96e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b918:	2b12      	cmp	r3, #18
 800b91a:	d102      	bne.n	800b922 <I2C_Master_ADDR+0x166>
 800b91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d125      	bne.n	800b96e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b924:	2b04      	cmp	r3, #4
 800b926:	d00e      	beq.n	800b946 <I2C_Master_ADDR+0x18a>
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d00b      	beq.n	800b946 <I2C_Master_ADDR+0x18a>
 800b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b930:	2b10      	cmp	r3, #16
 800b932:	d008      	beq.n	800b946 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	e007      	b.n	800b956 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b954:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b956:	2300      	movs	r3, #0
 800b958:	61fb      	str	r3, [r7, #28]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	61fb      	str	r3, [r7, #28]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	61fb      	str	r3, [r7, #28]
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	e0a1      	b.n	800bab2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b97c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b97e:	2300      	movs	r3, #0
 800b980:	61bb      	str	r3, [r7, #24]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	695b      	ldr	r3, [r3, #20]
 800b988:	61bb      	str	r3, [r7, #24]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	61bb      	str	r3, [r7, #24]
 800b992:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	e085      	b.n	800bab2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d14d      	bne.n	800ba4c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	d016      	beq.n	800b9e4 <I2C_Master_ADDR+0x228>
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d013      	beq.n	800b9e4 <I2C_Master_ADDR+0x228>
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	2b10      	cmp	r3, #16
 800b9c0:	d010      	beq.n	800b9e4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9d0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	e007      	b.n	800b9f4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9f2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba02:	d117      	bne.n	800ba34 <I2C_Master_ADDR+0x278>
 800ba04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba0a:	d00b      	beq.n	800ba24 <I2C_Master_ADDR+0x268>
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d008      	beq.n	800ba24 <I2C_Master_ADDR+0x268>
 800ba12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba14:	2b08      	cmp	r3, #8
 800ba16:	d005      	beq.n	800ba24 <I2C_Master_ADDR+0x268>
 800ba18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1a:	2b10      	cmp	r3, #16
 800ba1c:	d002      	beq.n	800ba24 <I2C_Master_ADDR+0x268>
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba20:	2b20      	cmp	r3, #32
 800ba22:	d107      	bne.n	800ba34 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	685a      	ldr	r2, [r3, #4]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba32:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba34:	2300      	movs	r3, #0
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	617b      	str	r3, [r7, #20]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	699b      	ldr	r3, [r3, #24]
 800ba46:	617b      	str	r3, [r7, #20]
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	e032      	b.n	800bab2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba5a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba6a:	d117      	bne.n	800ba9c <I2C_Master_ADDR+0x2e0>
 800ba6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba72:	d00b      	beq.n	800ba8c <I2C_Master_ADDR+0x2d0>
 800ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d008      	beq.n	800ba8c <I2C_Master_ADDR+0x2d0>
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	2b08      	cmp	r3, #8
 800ba7e:	d005      	beq.n	800ba8c <I2C_Master_ADDR+0x2d0>
 800ba80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba82:	2b10      	cmp	r3, #16
 800ba84:	d002      	beq.n	800ba8c <I2C_Master_ADDR+0x2d0>
 800ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba88:	2b20      	cmp	r3, #32
 800ba8a:	d107      	bne.n	800ba9c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba9a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	613b      	str	r3, [r7, #16]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	613b      	str	r3, [r7, #16]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	699b      	ldr	r3, [r3, #24]
 800baae:	613b      	str	r3, [r7, #16]
 800bab0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800bab8:	e00b      	b.n	800bad2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800baba:	2300      	movs	r3, #0
 800babc:	60fb      	str	r3, [r7, #12]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	60fb      	str	r3, [r7, #12]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	68fb      	ldr	r3, [r7, #12]
}
 800bad0:	e7ff      	b.n	800bad2 <I2C_Master_ADDR+0x316>
 800bad2:	bf00      	nop
 800bad4:	3744      	adds	r7, #68	; 0x44
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d02b      	beq.n	800bb50 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafc:	781a      	ldrb	r2, [r3, #0]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	3b01      	subs	r3, #1
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d114      	bne.n	800bb50 <I2C_SlaveTransmit_TXE+0x72>
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
 800bb28:	2b29      	cmp	r3, #41	; 0x29
 800bb2a:	d111      	bne.n	800bb50 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2221      	movs	r2, #33	; 0x21
 800bb40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2228      	movs	r2, #40	; 0x28
 800bb46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff fa4d 	bl	800afea <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800bb50:	bf00      	nop
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d011      	beq.n	800bb8e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6e:	781a      	ldrb	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	3b01      	subs	r3, #1
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800bb8e:	bf00      	nop
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bba8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d02c      	beq.n	800bc0e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	691a      	ldr	r2, [r3, #16]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbe:	b2d2      	uxtb	r2, r2
 800bbc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d114      	bne.n	800bc0e <I2C_SlaveReceive_RXNE+0x74>
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
 800bbe6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbe8:	d111      	bne.n	800bc0e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbf8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2222      	movs	r2, #34	; 0x22
 800bbfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2228      	movs	r2, #40	; 0x28
 800bc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff f9f8 	bl	800affe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800bc0e:	bf00      	nop
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800bc16:	b480      	push	{r7}
 800bc18:	b083      	sub	sp, #12
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d012      	beq.n	800bc4e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	691a      	ldr	r2, [r3, #16]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc32:	b2d2      	uxtb	r2, r2
 800bc34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3a:	1c5a      	adds	r2, r3, #1
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	3b01      	subs	r3, #1
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b084      	sub	sp, #16
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bc74:	2b28      	cmp	r3, #40	; 0x28
 800bc76:	d127      	bne.n	800bcc8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc86:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	089b      	lsrs	r3, r3, #2
 800bc8c:	f003 0301 	and.w	r3, r3, #1
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800bc94:	2301      	movs	r3, #1
 800bc96:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	09db      	lsrs	r3, r3, #7
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d103      	bne.n	800bcac <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	81bb      	strh	r3, [r7, #12]
 800bcaa:	e002      	b.n	800bcb2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800bcba:	89ba      	ldrh	r2, [r7, #12]
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7ff f9a6 	bl	800b012 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bcc6:	e008      	b.n	800bcda <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f06f 0202 	mvn.w	r2, #2
 800bcd0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800bcda:	bf00      	nop
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
	...

0800bce4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcf2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bd02:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800bd04:	2300      	movs	r3, #0
 800bd06:	60bb      	str	r3, [r7, #8]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	60bb      	str	r3, [r7, #8]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f042 0201 	orr.w	r2, r2, #1
 800bd1e:	601a      	str	r2, [r3, #0]
 800bd20:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd30:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd40:	d172      	bne.n	800be28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
 800bd44:	2b22      	cmp	r3, #34	; 0x22
 800bd46:	d002      	beq.n	800bd4e <I2C_Slave_STOPF+0x6a>
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd4c:	d135      	bne.n	800bdba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d005      	beq.n	800bd72 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6a:	f043 0204 	orr.w	r2, r3, #4
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fd fdbe 	bl	8009908 <HAL_DMA_GetState>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d049      	beq.n	800be26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd96:	4a69      	ldr	r2, [pc, #420]	; (800bf3c <I2C_Slave_STOPF+0x258>)
 800bd98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fd fc06 	bl	80095b0 <HAL_DMA_Abort_IT>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d03d      	beq.n	800be26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bdb8:	e035      	b.n	800be26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d005      	beq.n	800bdde <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd6:	f043 0204 	orr.w	r2, r3, #4
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bdec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fd fd88 	bl	8009908 <HAL_DMA_GetState>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d014      	beq.n	800be28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be02:	4a4e      	ldr	r2, [pc, #312]	; (800bf3c <I2C_Slave_STOPF+0x258>)
 800be04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fd fbd0 	bl	80095b0 <HAL_DMA_Abort_IT>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d008      	beq.n	800be28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be20:	4610      	mov	r0, r2
 800be22:	4798      	blx	r3
 800be24:	e000      	b.n	800be28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800be26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d03e      	beq.n	800beb0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	d112      	bne.n	800be66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	691a      	ldr	r2, [r3, #16]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4a:	b2d2      	uxtb	r2, r2
 800be4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	3b01      	subs	r3, #1
 800be60:	b29a      	uxth	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be70:	2b40      	cmp	r3, #64	; 0x40
 800be72:	d112      	bne.n	800be9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	691a      	ldr	r2, [r3, #16]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7e:	b2d2      	uxtb	r2, r2
 800be80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	1c5a      	adds	r2, r3, #1
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be90:	b29b      	uxth	r3, r3
 800be92:	3b01      	subs	r3, #1
 800be94:	b29a      	uxth	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea8:	f043 0204 	orr.w	r2, r3, #4
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 f8b3 	bl	800c024 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800bebe:	e039      	b.n	800bf34 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
 800bec2:	2b2a      	cmp	r3, #42	; 0x2a
 800bec4:	d109      	bne.n	800beda <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2228      	movs	r2, #40	; 0x28
 800bed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff f892 	bl	800affe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b28      	cmp	r3, #40	; 0x28
 800bee4:	d111      	bne.n	800bf0a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a15      	ldr	r2, [pc, #84]	; (800bf40 <I2C_Slave_STOPF+0x25c>)
 800beea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2220      	movs	r2, #32
 800bef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff f893 	bl	800b02e <HAL_I2C_ListenCpltCallback>
}
 800bf08:	e014      	b.n	800bf34 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0e:	2b22      	cmp	r3, #34	; 0x22
 800bf10:	d002      	beq.n	800bf18 <I2C_Slave_STOPF+0x234>
 800bf12:	7bfb      	ldrb	r3, [r7, #15]
 800bf14:	2b22      	cmp	r3, #34	; 0x22
 800bf16:	d10d      	bne.n	800bf34 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2220      	movs	r2, #32
 800bf22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff f865 	bl	800affe <HAL_I2C_SlaveRxCpltCallback>
}
 800bf34:	bf00      	nop
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	0800c799 	.word	0x0800c799
 800bf40:	ffff0000 	.word	0xffff0000

0800bf44 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf52:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf58:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2b08      	cmp	r3, #8
 800bf5e:	d002      	beq.n	800bf66 <I2C_Slave_AF+0x22>
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2b20      	cmp	r3, #32
 800bf64:	d129      	bne.n	800bfba <I2C_Slave_AF+0x76>
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
 800bf68:	2b28      	cmp	r3, #40	; 0x28
 800bf6a:	d126      	bne.n	800bfba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a2c      	ldr	r2, [pc, #176]	; (800c020 <I2C_Slave_AF+0xdc>)
 800bf70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bf80:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bf8a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf9a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff f83b 	bl	800b02e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800bfb8:	e02e      	b.n	800c018 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	2b21      	cmp	r3, #33	; 0x21
 800bfbe:	d126      	bne.n	800c00e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	4a17      	ldr	r2, [pc, #92]	; (800c020 <I2C_Slave_AF+0xdc>)
 800bfc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2221      	movs	r2, #33	; 0x21
 800bfca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	685a      	ldr	r2, [r3, #4]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bfea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bff4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c004:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7fe ffef 	bl	800afea <HAL_I2C_SlaveTxCpltCallback>
}
 800c00c:	e004      	b.n	800c018 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c016:	615a      	str	r2, [r3, #20]
}
 800c018:	bf00      	nop
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	ffff0000 	.word	0xffff0000

0800c024 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c032:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	2b10      	cmp	r3, #16
 800c03e:	d10a      	bne.n	800c056 <I2C_ITError+0x32>
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	2b22      	cmp	r3, #34	; 0x22
 800c044:	d107      	bne.n	800c056 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c054:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c056:	7bfb      	ldrb	r3, [r7, #15]
 800c058:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c05c:	2b28      	cmp	r3, #40	; 0x28
 800c05e:	d107      	bne.n	800c070 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2228      	movs	r2, #40	; 0x28
 800c06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c06e:	e015      	b.n	800c09c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c07a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c07e:	d006      	beq.n	800c08e <I2C_ITError+0x6a>
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	2b60      	cmp	r3, #96	; 0x60
 800c084:	d003      	beq.n	800c08e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2220      	movs	r2, #32
 800c08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0aa:	d162      	bne.n	800c172 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	685a      	ldr	r2, [r3, #4]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d020      	beq.n	800c10c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ce:	4a6a      	ldr	r2, [pc, #424]	; (800c278 <I2C_ITError+0x254>)
 800c0d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd fa6a 	bl	80095b0 <HAL_DMA_Abort_IT>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 8089 	beq.w	800c1f6 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f022 0201 	bic.w	r2, r2, #1
 800c0f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2220      	movs	r2, #32
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c106:	4610      	mov	r0, r2
 800c108:	4798      	blx	r3
 800c10a:	e074      	b.n	800c1f6 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c110:	4a59      	ldr	r2, [pc, #356]	; (800c278 <I2C_ITError+0x254>)
 800c112:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fd fa49 	bl	80095b0 <HAL_DMA_Abort_IT>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d068      	beq.n	800c1f6 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	695b      	ldr	r3, [r3, #20]
 800c12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c12e:	2b40      	cmp	r3, #64	; 0x40
 800c130:	d10b      	bne.n	800c14a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	691a      	ldr	r2, [r3, #16]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13c:	b2d2      	uxtb	r2, r2
 800c13e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f022 0201 	bic.w	r2, r2, #1
 800c158:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2220      	movs	r2, #32
 800c15e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c16c:	4610      	mov	r0, r2
 800c16e:	4798      	blx	r3
 800c170:	e041      	b.n	800c1f6 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b60      	cmp	r3, #96	; 0x60
 800c17c:	d125      	bne.n	800c1ca <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2220      	movs	r2, #32
 800c182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	695b      	ldr	r3, [r3, #20]
 800c192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c196:	2b40      	cmp	r3, #64	; 0x40
 800c198:	d10b      	bne.n	800c1b2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	691a      	ldr	r2, [r3, #16]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a4:	b2d2      	uxtb	r2, r2
 800c1a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ac:	1c5a      	adds	r2, r3, #1
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f022 0201 	bic.w	r2, r2, #1
 800c1c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7fe ff51 	bl	800b06a <HAL_I2C_AbortCpltCallback>
 800c1c8:	e015      	b.n	800c1f6 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	695b      	ldr	r3, [r3, #20]
 800c1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1d4:	2b40      	cmp	r3, #64	; 0x40
 800c1d6:	d10b      	bne.n	800c1f0 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	691a      	ldr	r2, [r3, #16]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	b2d2      	uxtb	r2, r2
 800c1e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ea:	1c5a      	adds	r2, r3, #1
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7fe ff30 	bl	800b056 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	f003 0301 	and.w	r3, r3, #1
 800c202:	2b00      	cmp	r3, #0
 800c204:	d10e      	bne.n	800c224 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d109      	bne.n	800c224 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c216:	2b00      	cmp	r3, #0
 800c218:	d104      	bne.n	800c224 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c220:	2b00      	cmp	r3, #0
 800c222:	d007      	beq.n	800c234 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	685a      	ldr	r2, [r3, #4]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c232:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c23a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b04      	cmp	r3, #4
 800c246:	d113      	bne.n	800c270 <I2C_ITError+0x24c>
 800c248:	7bfb      	ldrb	r3, [r7, #15]
 800c24a:	2b28      	cmp	r3, #40	; 0x28
 800c24c:	d110      	bne.n	800c270 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a0a      	ldr	r2, [pc, #40]	; (800c27c <I2C_ITError+0x258>)
 800c252:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2220      	movs	r2, #32
 800c25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7fe fedf 	bl	800b02e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c270:	bf00      	nop
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	0800c799 	.word	0x0800c799
 800c27c:	ffff0000 	.word	0xffff0000

0800c280 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b088      	sub	sp, #32
 800c284:	af02      	add	r7, sp, #8
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	4608      	mov	r0, r1
 800c28a:	4611      	mov	r1, r2
 800c28c:	461a      	mov	r2, r3
 800c28e:	4603      	mov	r3, r0
 800c290:	817b      	strh	r3, [r7, #10]
 800c292:	460b      	mov	r3, r1
 800c294:	813b      	strh	r3, [r7, #8]
 800c296:	4613      	mov	r3, r2
 800c298:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	9300      	str	r3, [sp, #0]
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 faed 	bl	800c896 <I2C_WaitOnFlagUntilTimeout>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00c      	beq.n	800c2dc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d003      	beq.n	800c2d8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e05f      	b.n	800c39c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c2dc:	897b      	ldrh	r3, [r7, #10]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c2ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	6a3a      	ldr	r2, [r7, #32]
 800c2f0:	492c      	ldr	r1, [pc, #176]	; (800c3a4 <I2C_RequestMemoryWrite+0x124>)
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f000 fb26 	bl	800c944 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800c2fe:	2301      	movs	r3, #1
 800c300:	e04c      	b.n	800c39c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c302:	2300      	movs	r3, #0
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	695b      	ldr	r3, [r3, #20]
 800c30c:	617b      	str	r3, [r7, #20]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	617b      	str	r3, [r7, #20]
 800c316:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31a:	6a39      	ldr	r1, [r7, #32]
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f000 fb90 	bl	800ca42 <I2C_WaitOnTXEFlagUntilTimeout>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00d      	beq.n	800c344 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32c:	2b04      	cmp	r3, #4
 800c32e:	d107      	bne.n	800c340 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c33e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	e02b      	b.n	800c39c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c344:	88fb      	ldrh	r3, [r7, #6]
 800c346:	2b01      	cmp	r3, #1
 800c348:	d105      	bne.n	800c356 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c34a:	893b      	ldrh	r3, [r7, #8]
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	611a      	str	r2, [r3, #16]
 800c354:	e021      	b.n	800c39a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c356:	893b      	ldrh	r3, [r7, #8]
 800c358:	0a1b      	lsrs	r3, r3, #8
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c366:	6a39      	ldr	r1, [r7, #32]
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f000 fb6a 	bl	800ca42 <I2C_WaitOnTXEFlagUntilTimeout>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00d      	beq.n	800c390 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d107      	bne.n	800c38c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c38a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e005      	b.n	800c39c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c390:	893b      	ldrh	r3, [r7, #8]
 800c392:	b2da      	uxtb	r2, r3
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	00010002 	.word	0x00010002

0800c3a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b088      	sub	sp, #32
 800c3ac:	af02      	add	r7, sp, #8
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	4608      	mov	r0, r1
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	817b      	strh	r3, [r7, #10]
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	813b      	strh	r3, [r7, #8]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c3d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	6a3b      	ldr	r3, [r7, #32]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f000 fa51 	bl	800c896 <I2C_WaitOnFlagUntilTimeout>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00c      	beq.n	800c414 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c40e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c410:	2303      	movs	r3, #3
 800c412:	e0a9      	b.n	800c568 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c414:	897b      	ldrh	r3, [r7, #10]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	461a      	mov	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c422:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	6a3a      	ldr	r2, [r7, #32]
 800c428:	4951      	ldr	r1, [pc, #324]	; (800c570 <I2C_RequestMemoryRead+0x1c8>)
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f000 fa8a 	bl	800c944 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d001      	beq.n	800c43a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e096      	b.n	800c568 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c43a:	2300      	movs	r3, #0
 800c43c:	617b      	str	r3, [r7, #20]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	695b      	ldr	r3, [r3, #20]
 800c444:	617b      	str	r3, [r7, #20]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	617b      	str	r3, [r7, #20]
 800c44e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c452:	6a39      	ldr	r1, [r7, #32]
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f000 faf4 	bl	800ca42 <I2C_WaitOnTXEFlagUntilTimeout>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00d      	beq.n	800c47c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c464:	2b04      	cmp	r3, #4
 800c466:	d107      	bne.n	800c478 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c476:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	e075      	b.n	800c568 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c47c:	88fb      	ldrh	r3, [r7, #6]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d105      	bne.n	800c48e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c482:	893b      	ldrh	r3, [r7, #8]
 800c484:	b2da      	uxtb	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	611a      	str	r2, [r3, #16]
 800c48c:	e021      	b.n	800c4d2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c48e:	893b      	ldrh	r3, [r7, #8]
 800c490:	0a1b      	lsrs	r3, r3, #8
 800c492:	b29b      	uxth	r3, r3
 800c494:	b2da      	uxtb	r2, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c49e:	6a39      	ldr	r1, [r7, #32]
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 face 	bl	800ca42 <I2C_WaitOnTXEFlagUntilTimeout>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00d      	beq.n	800c4c8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b0:	2b04      	cmp	r3, #4
 800c4b2:	d107      	bne.n	800c4c4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e04f      	b.n	800c568 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c4c8:	893b      	ldrh	r3, [r7, #8]
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4d4:	6a39      	ldr	r1, [r7, #32]
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f000 fab3 	bl	800ca42 <I2C_WaitOnTXEFlagUntilTimeout>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00d      	beq.n	800c4fe <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e6:	2b04      	cmp	r3, #4
 800c4e8:	d107      	bne.n	800c4fa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e034      	b.n	800c568 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c50c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	6a3b      	ldr	r3, [r7, #32]
 800c514:	2200      	movs	r2, #0
 800c516:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f000 f9bb 	bl	800c896 <I2C_WaitOnFlagUntilTimeout>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00c      	beq.n	800c540 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c530:	2b00      	cmp	r3, #0
 800c532:	d003      	beq.n	800c53c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c53a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c53c:	2303      	movs	r3, #3
 800c53e:	e013      	b.n	800c568 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c540:	897b      	ldrh	r3, [r7, #10]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	f043 0301 	orr.w	r3, r3, #1
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	6a3a      	ldr	r2, [r7, #32]
 800c554:	4906      	ldr	r1, [pc, #24]	; (800c570 <I2C_RequestMemoryRead+0x1c8>)
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f000 f9f4 	bl	800c944 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e000      	b.n	800c568 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3718      	adds	r7, #24
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	00010002 	.word	0x00010002

0800c574 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c580:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c588:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c590:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c596:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c5a6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d003      	beq.n	800c5c8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800c5c8:	7cfb      	ldrb	r3, [r7, #19]
 800c5ca:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800c5ce:	2b21      	cmp	r3, #33	; 0x21
 800c5d0:	d007      	beq.n	800c5e2 <I2C_DMAXferCplt+0x6e>
 800c5d2:	7cfb      	ldrb	r3, [r7, #19]
 800c5d4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800c5d8:	2b22      	cmp	r3, #34	; 0x22
 800c5da:	d131      	bne.n	800c640 <I2C_DMAXferCplt+0xcc>
 800c5dc:	7cbb      	ldrb	r3, [r7, #18]
 800c5de:	2b20      	cmp	r3, #32
 800c5e0:	d12e      	bne.n	800c640 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	685a      	ldr	r2, [r3, #4]
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5f0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c5f8:	7cfb      	ldrb	r3, [r7, #19]
 800c5fa:	2b29      	cmp	r3, #41	; 0x29
 800c5fc:	d10a      	bne.n	800c614 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2221      	movs	r2, #33	; 0x21
 800c602:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	2228      	movs	r2, #40	; 0x28
 800c608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c60c:	6978      	ldr	r0, [r7, #20]
 800c60e:	f7fe fcec 	bl	800afea <HAL_I2C_SlaveTxCpltCallback>
 800c612:	e00c      	b.n	800c62e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c614:	7cfb      	ldrb	r3, [r7, #19]
 800c616:	2b2a      	cmp	r3, #42	; 0x2a
 800c618:	d109      	bne.n	800c62e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2222      	movs	r2, #34	; 0x22
 800c61e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2228      	movs	r2, #40	; 0x28
 800c624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c628:	6978      	ldr	r0, [r7, #20]
 800c62a:	f7fe fce8 	bl	800affe <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c63c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c63e:	e06a      	b.n	800c716 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c646:	b2db      	uxtb	r3, r3
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d064      	beq.n	800c716 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c650:	b29b      	uxth	r3, r3
 800c652:	2b01      	cmp	r3, #1
 800c654:	d107      	bne.n	800c666 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c664:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c674:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c67c:	d009      	beq.n	800c692 <I2C_DMAXferCplt+0x11e>
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2b08      	cmp	r3, #8
 800c682:	d006      	beq.n	800c692 <I2C_DMAXferCplt+0x11e>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c68a:	d002      	beq.n	800c692 <I2C_DMAXferCplt+0x11e>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b20      	cmp	r3, #32
 800c690:	d107      	bne.n	800c6a2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6a0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	685a      	ldr	r2, [r3, #4]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c6b0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	685a      	ldr	r2, [r3, #4]
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6c0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d003      	beq.n	800c6d8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800c6d0:	6978      	ldr	r0, [r7, #20]
 800c6d2:	f7fe fcc0 	bl	800b056 <HAL_I2C_ErrorCallback>
}
 800c6d6:	e01e      	b.n	800c716 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2220      	movs	r2, #32
 800c6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b40      	cmp	r3, #64	; 0x40
 800c6ea:	d10a      	bne.n	800c702 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800c6fa:	6978      	ldr	r0, [r7, #20]
 800c6fc:	f7fa fa10 	bl	8006b20 <HAL_I2C_MemRxCpltCallback>
}
 800c700:	e009      	b.n	800c716 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	2212      	movs	r2, #18
 800c70e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800c710:	6978      	ldr	r0, [r7, #20]
 800c712:	f7fe fc60 	bl	800afd6 <HAL_I2C_MasterRxCpltCallback>
}
 800c716:	bf00      	nop
 800c718:	3718      	adds	r7, #24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c730:	2b00      	cmp	r3, #0
 800c732:	d003      	beq.n	800c73c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c738:	2200      	movs	r2, #0
 800c73a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c748:	2200      	movs	r2, #0
 800c74a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7fd f8e9 	bl	8009924 <HAL_DMA_GetError>
 800c752:	4603      	mov	r3, r0
 800c754:	2b02      	cmp	r3, #2
 800c756:	d01b      	beq.n	800c790 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c766:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2200      	movs	r2, #0
 800c76c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2220      	movs	r2, #32
 800c772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c782:	f043 0210 	orr.w	r2, r3, #16
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f7fe fc63 	bl	800b056 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c790:	bf00      	nop
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a4:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7ac:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d003      	beq.n	800c7be <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d003      	beq.n	800c7f4 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c800:	2200      	movs	r2, #0
 800c802:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f022 0201 	bic.w	r2, r2, #1
 800c812:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	2b60      	cmp	r3, #96	; 0x60
 800c81e:	d10e      	bne.n	800c83e <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2220      	movs	r2, #32
 800c824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2200      	movs	r2, #0
 800c834:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7fe fc17 	bl	800b06a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c83c:	e027      	b.n	800c88e <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c83e:	7afb      	ldrb	r3, [r7, #11]
 800c840:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c844:	2b28      	cmp	r3, #40	; 0x28
 800c846:	d117      	bne.n	800c878 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f042 0201 	orr.w	r2, r2, #1
 800c856:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c866:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2228      	movs	r2, #40	; 0x28
 800c872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c876:	e007      	b.n	800c888 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2220      	movs	r2, #32
 800c87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f7fe fbe4 	bl	800b056 <HAL_I2C_ErrorCallback>
}
 800c88e:	bf00      	nop
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b084      	sub	sp, #16
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	60f8      	str	r0, [r7, #12]
 800c89e:	60b9      	str	r1, [r7, #8]
 800c8a0:	603b      	str	r3, [r7, #0]
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c8a6:	e025      	b.n	800c8f4 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ae:	d021      	beq.n	800c8f4 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8b0:	f7fc fc68 	bl	8009184 <HAL_GetTick>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d302      	bcc.n	800c8c6 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d116      	bne.n	800c8f4 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e0:	f043 0220 	orr.w	r2, r3, #32
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e023      	b.n	800c93c <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	0c1b      	lsrs	r3, r3, #16
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d10d      	bne.n	800c91a <I2C_WaitOnFlagUntilTimeout+0x84>
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	695b      	ldr	r3, [r3, #20]
 800c904:	43da      	mvns	r2, r3
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	4013      	ands	r3, r2
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	bf0c      	ite	eq
 800c910:	2301      	moveq	r3, #1
 800c912:	2300      	movne	r3, #0
 800c914:	b2db      	uxtb	r3, r3
 800c916:	461a      	mov	r2, r3
 800c918:	e00c      	b.n	800c934 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	43da      	mvns	r2, r3
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	4013      	ands	r3, r2
 800c926:	b29b      	uxth	r3, r3
 800c928:	2b00      	cmp	r3, #0
 800c92a:	bf0c      	ite	eq
 800c92c:	2301      	moveq	r3, #1
 800c92e:	2300      	movne	r3, #0
 800c930:	b2db      	uxtb	r3, r3
 800c932:	461a      	mov	r2, r3
 800c934:	79fb      	ldrb	r3, [r7, #7]
 800c936:	429a      	cmp	r2, r3
 800c938:	d0b6      	beq.n	800c8a8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c952:	e051      	b.n	800c9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	695b      	ldr	r3, [r3, #20]
 800c95a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c95e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c962:	d123      	bne.n	800c9ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c972:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c97c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2200      	movs	r2, #0
 800c982:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2220      	movs	r2, #32
 800c988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c998:	f043 0204 	orr.w	r2, r3, #4
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e046      	b.n	800ca3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b2:	d021      	beq.n	800c9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9b4:	f7fc fbe6 	bl	8009184 <HAL_GetTick>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d302      	bcc.n	800c9ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d116      	bne.n	800c9f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2220      	movs	r2, #32
 800c9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e4:	f043 0220 	orr.w	r2, r3, #32
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e020      	b.n	800ca3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	0c1b      	lsrs	r3, r3, #16
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d10c      	bne.n	800ca1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	695b      	ldr	r3, [r3, #20]
 800ca08:	43da      	mvns	r2, r3
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	bf14      	ite	ne
 800ca14:	2301      	movne	r3, #1
 800ca16:	2300      	moveq	r3, #0
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	e00b      	b.n	800ca34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	43da      	mvns	r2, r3
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	4013      	ands	r3, r2
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	bf14      	ite	ne
 800ca2e:	2301      	movne	r3, #1
 800ca30:	2300      	moveq	r3, #0
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d18d      	bne.n	800c954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b084      	sub	sp, #16
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	60b9      	str	r1, [r7, #8]
 800ca4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ca4e:	e02d      	b.n	800caac <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f000 f8ce 	bl	800cbf2 <I2C_IsAcknowledgeFailed>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d001      	beq.n	800ca60 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e02d      	b.n	800cabc <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca66:	d021      	beq.n	800caac <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca68:	f7fc fb8c 	bl	8009184 <HAL_GetTick>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d302      	bcc.n	800ca7e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d116      	bne.n	800caac <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2220      	movs	r2, #32
 800ca88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca98:	f043 0220 	orr.w	r2, r3, #32
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
 800caaa:	e007      	b.n	800cabc <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	695b      	ldr	r3, [r3, #20]
 800cab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cab6:	2b80      	cmp	r3, #128	; 0x80
 800cab8:	d1ca      	bne.n	800ca50 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cad0:	e02d      	b.n	800cb2e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f000 f88d 	bl	800cbf2 <I2C_IsAcknowledgeFailed>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d001      	beq.n	800cae2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	e02d      	b.n	800cb3e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae8:	d021      	beq.n	800cb2e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800caea:	f7fc fb4b 	bl	8009184 <HAL_GetTick>
 800caee:	4602      	mov	r2, r0
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d302      	bcc.n	800cb00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d116      	bne.n	800cb2e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2220      	movs	r2, #32
 800cb0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1a:	f043 0220 	orr.w	r2, r3, #32
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e007      	b.n	800cb3e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	f003 0304 	and.w	r3, r3, #4
 800cb38:	2b04      	cmp	r3, #4
 800cb3a:	d1ca      	bne.n	800cad2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b084      	sub	sp, #16
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	60f8      	str	r0, [r7, #12]
 800cb4e:	60b9      	str	r1, [r7, #8]
 800cb50:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cb52:	e042      	b.n	800cbda <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	695b      	ldr	r3, [r3, #20]
 800cb5a:	f003 0310 	and.w	r3, r3, #16
 800cb5e:	2b10      	cmp	r3, #16
 800cb60:	d119      	bne.n	800cb96 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f06f 0210 	mvn.w	r2, #16
 800cb6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2220      	movs	r2, #32
 800cb76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e029      	b.n	800cbea <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb96:	f7fc faf5 	bl	8009184 <HAL_GetTick>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d302      	bcc.n	800cbac <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d116      	bne.n	800cbda <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2220      	movs	r2, #32
 800cbb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc6:	f043 0220 	orr.w	r2, r3, #32
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e007      	b.n	800cbea <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	695b      	ldr	r3, [r3, #20]
 800cbe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe4:	2b40      	cmp	r3, #64	; 0x40
 800cbe6:	d1b5      	bne.n	800cb54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800cbf2:	b480      	push	{r7}
 800cbf4:	b083      	sub	sp, #12
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc08:	d11b      	bne.n	800cc42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cc12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2220      	movs	r2, #32
 800cc1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2e:	f043 0204 	orr.w	r2, r3, #4
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e000      	b.n	800cc44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800cc60:	d103      	bne.n	800cc6a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2201      	movs	r2, #1
 800cc66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800cc68:	e007      	b.n	800cc7a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800cc72:	d102      	bne.n	800cc7a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2208      	movs	r2, #8
 800cc78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800cc7a:	bf00      	nop
 800cc7c:	370c      	adds	r7, #12
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cc86:	b480      	push	{r7}
 800cc88:	b083      	sub	sp, #12
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	2b20      	cmp	r3, #32
 800cc9a:	d129      	bne.n	800ccf0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2224      	movs	r2, #36	; 0x24
 800cca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f022 0201 	bic.w	r2, r2, #1
 800ccb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f022 0210 	bic.w	r2, r2, #16
 800ccc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	430a      	orrs	r2, r1
 800ccd2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f042 0201 	orr.w	r2, r2, #1
 800cce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2220      	movs	r2, #32
 800cce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	e000      	b.n	800ccf2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800ccf0:	2302      	movs	r3, #2
  }
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b085      	sub	sp, #20
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	2b20      	cmp	r3, #32
 800cd16:	d12a      	bne.n	800cd6e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2224      	movs	r2, #36	; 0x24
 800cd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f022 0201 	bic.w	r2, r2, #1
 800cd2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd36:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800cd38:	89fb      	ldrh	r3, [r7, #14]
 800cd3a:	f023 030f 	bic.w	r3, r3, #15
 800cd3e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	89fb      	ldrh	r3, [r7, #14]
 800cd46:	4313      	orrs	r3, r2
 800cd48:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	89fa      	ldrh	r2, [r7, #14]
 800cd50:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f042 0201 	orr.w	r2, r2, #1
 800cd60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2220      	movs	r2, #32
 800cd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e000      	b.n	800cd70 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800cd6e:	2302      	movs	r3, #2
  }
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd7e:	b08f      	sub	sp, #60	; 0x3c
 800cd80:	af0a      	add	r7, sp, #40	; 0x28
 800cd82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e10f      	b.n	800cfae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d106      	bne.n	800cdae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f7fc f931 	bl	8009010 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2203      	movs	r2, #3
 800cdb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d102      	bne.n	800cdc8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f004 fedc 	bl	8011b8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	603b      	str	r3, [r7, #0]
 800cdd8:	687e      	ldr	r6, [r7, #4]
 800cdda:	466d      	mov	r5, sp
 800cddc:	f106 0410 	add.w	r4, r6, #16
 800cde0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cde2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cde4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cde6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cde8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cdec:	e885 0003 	stmia.w	r5, {r0, r1}
 800cdf0:	1d33      	adds	r3, r6, #4
 800cdf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdf4:	6838      	ldr	r0, [r7, #0]
 800cdf6:	f004 fe67 	bl	8011ac8 <USB_CoreInit>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d005      	beq.n	800ce0c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2202      	movs	r2, #2
 800ce04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e0d0      	b.n	800cfae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2100      	movs	r1, #0
 800ce12:	4618      	mov	r0, r3
 800ce14:	f004 feca 	bl	8011bac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	73fb      	strb	r3, [r7, #15]
 800ce1c:	e04a      	b.n	800ceb4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ce1e:	7bfa      	ldrb	r2, [r7, #15]
 800ce20:	6879      	ldr	r1, [r7, #4]
 800ce22:	4613      	mov	r3, r2
 800ce24:	00db      	lsls	r3, r3, #3
 800ce26:	1a9b      	subs	r3, r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	440b      	add	r3, r1
 800ce2c:	333d      	adds	r3, #61	; 0x3d
 800ce2e:	2201      	movs	r2, #1
 800ce30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ce32:	7bfa      	ldrb	r2, [r7, #15]
 800ce34:	6879      	ldr	r1, [r7, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	1a9b      	subs	r3, r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	440b      	add	r3, r1
 800ce40:	333c      	adds	r3, #60	; 0x3c
 800ce42:	7bfa      	ldrb	r2, [r7, #15]
 800ce44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ce46:	7bfa      	ldrb	r2, [r7, #15]
 800ce48:	7bfb      	ldrb	r3, [r7, #15]
 800ce4a:	b298      	uxth	r0, r3
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	00db      	lsls	r3, r3, #3
 800ce52:	1a9b      	subs	r3, r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	440b      	add	r3, r1
 800ce58:	3342      	adds	r3, #66	; 0x42
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ce5e:	7bfa      	ldrb	r2, [r7, #15]
 800ce60:	6879      	ldr	r1, [r7, #4]
 800ce62:	4613      	mov	r3, r2
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	1a9b      	subs	r3, r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	440b      	add	r3, r1
 800ce6c:	333f      	adds	r3, #63	; 0x3f
 800ce6e:	2200      	movs	r2, #0
 800ce70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ce72:	7bfa      	ldrb	r2, [r7, #15]
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4613      	mov	r3, r2
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	1a9b      	subs	r3, r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	440b      	add	r3, r1
 800ce80:	3344      	adds	r3, #68	; 0x44
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ce86:	7bfa      	ldrb	r2, [r7, #15]
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	1a9b      	subs	r3, r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	440b      	add	r3, r1
 800ce94:	3348      	adds	r3, #72	; 0x48
 800ce96:	2200      	movs	r2, #0
 800ce98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ce9a:	7bfa      	ldrb	r2, [r7, #15]
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	00db      	lsls	r3, r3, #3
 800cea2:	1a9b      	subs	r3, r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	440b      	add	r3, r1
 800cea8:	3350      	adds	r3, #80	; 0x50
 800ceaa:	2200      	movs	r2, #0
 800ceac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ceae:	7bfb      	ldrb	r3, [r7, #15]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	73fb      	strb	r3, [r7, #15]
 800ceb4:	7bfa      	ldrb	r2, [r7, #15]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d3af      	bcc.n	800ce1e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cebe:	2300      	movs	r3, #0
 800cec0:	73fb      	strb	r3, [r7, #15]
 800cec2:	e044      	b.n	800cf4e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cec4:	7bfa      	ldrb	r2, [r7, #15]
 800cec6:	6879      	ldr	r1, [r7, #4]
 800cec8:	4613      	mov	r3, r2
 800ceca:	00db      	lsls	r3, r3, #3
 800cecc:	1a9b      	subs	r3, r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	440b      	add	r3, r1
 800ced2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ced6:	2200      	movs	r2, #0
 800ced8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ceda:	7bfa      	ldrb	r2, [r7, #15]
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	4613      	mov	r3, r2
 800cee0:	00db      	lsls	r3, r3, #3
 800cee2:	1a9b      	subs	r3, r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	440b      	add	r3, r1
 800cee8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ceec:	7bfa      	ldrb	r2, [r7, #15]
 800ceee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cef0:	7bfa      	ldrb	r2, [r7, #15]
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	4613      	mov	r3, r2
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	1a9b      	subs	r3, r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	440b      	add	r3, r1
 800cefe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cf02:	2200      	movs	r2, #0
 800cf04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cf06:	7bfa      	ldrb	r2, [r7, #15]
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	1a9b      	subs	r3, r3, r2
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	440b      	add	r3, r1
 800cf14:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cf18:	2200      	movs	r2, #0
 800cf1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cf1c:	7bfa      	ldrb	r2, [r7, #15]
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	4613      	mov	r3, r2
 800cf22:	00db      	lsls	r3, r3, #3
 800cf24:	1a9b      	subs	r3, r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	440b      	add	r3, r1
 800cf2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cf2e:	2200      	movs	r2, #0
 800cf30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cf32:	7bfa      	ldrb	r2, [r7, #15]
 800cf34:	6879      	ldr	r1, [r7, #4]
 800cf36:	4613      	mov	r3, r2
 800cf38:	00db      	lsls	r3, r3, #3
 800cf3a:	1a9b      	subs	r3, r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	440b      	add	r3, r1
 800cf40:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cf44:	2200      	movs	r2, #0
 800cf46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	73fb      	strb	r3, [r7, #15]
 800cf4e:	7bfa      	ldrb	r2, [r7, #15]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d3b5      	bcc.n	800cec4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	603b      	str	r3, [r7, #0]
 800cf5e:	687e      	ldr	r6, [r7, #4]
 800cf60:	466d      	mov	r5, sp
 800cf62:	f106 0410 	add.w	r4, r6, #16
 800cf66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cf72:	e885 0003 	stmia.w	r5, {r0, r1}
 800cf76:	1d33      	adds	r3, r6, #4
 800cf78:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf7a:	6838      	ldr	r0, [r7, #0]
 800cf7c:	f004 fe40 	bl	8011c00 <USB_DevInit>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d005      	beq.n	800cf92 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e00d      	b.n	800cfae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f004 ffef 	bl	8011f8a <USB_DevDisconnect>

  return HAL_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3714      	adds	r7, #20
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cfb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e25b      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0301 	and.w	r3, r3, #1
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d075      	beq.n	800d0c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cfd6:	4ba3      	ldr	r3, [pc, #652]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	f003 030c 	and.w	r3, r3, #12
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	d00c      	beq.n	800cffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cfe2:	4ba0      	ldr	r3, [pc, #640]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cfea:	2b08      	cmp	r3, #8
 800cfec:	d112      	bne.n	800d014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cfee:	4b9d      	ldr	r3, [pc, #628]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cffa:	d10b      	bne.n	800d014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cffc:	4b99      	ldr	r3, [pc, #612]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d05b      	beq.n	800d0c0 <HAL_RCC_OscConfig+0x108>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d157      	bne.n	800d0c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	e236      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d01c:	d106      	bne.n	800d02c <HAL_RCC_OscConfig+0x74>
 800d01e:	4b91      	ldr	r3, [pc, #580]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a90      	ldr	r2, [pc, #576]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d028:	6013      	str	r3, [r2, #0]
 800d02a:	e01d      	b.n	800d068 <HAL_RCC_OscConfig+0xb0>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d034:	d10c      	bne.n	800d050 <HAL_RCC_OscConfig+0x98>
 800d036:	4b8b      	ldr	r3, [pc, #556]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a8a      	ldr	r2, [pc, #552]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d03c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	4b88      	ldr	r3, [pc, #544]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a87      	ldr	r2, [pc, #540]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	e00b      	b.n	800d068 <HAL_RCC_OscConfig+0xb0>
 800d050:	4b84      	ldr	r3, [pc, #528]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a83      	ldr	r2, [pc, #524]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d05a:	6013      	str	r3, [r2, #0]
 800d05c:	4b81      	ldr	r3, [pc, #516]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a80      	ldr	r2, [pc, #512]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d013      	beq.n	800d098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d070:	f7fc f888 	bl	8009184 <HAL_GetTick>
 800d074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d076:	e008      	b.n	800d08a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d078:	f7fc f884 	bl	8009184 <HAL_GetTick>
 800d07c:	4602      	mov	r2, r0
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	2b64      	cmp	r3, #100	; 0x64
 800d084:	d901      	bls.n	800d08a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d086:	2303      	movs	r3, #3
 800d088:	e1fb      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d08a:	4b76      	ldr	r3, [pc, #472]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d092:	2b00      	cmp	r3, #0
 800d094:	d0f0      	beq.n	800d078 <HAL_RCC_OscConfig+0xc0>
 800d096:	e014      	b.n	800d0c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d098:	f7fc f874 	bl	8009184 <HAL_GetTick>
 800d09c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d09e:	e008      	b.n	800d0b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d0a0:	f7fc f870 	bl	8009184 <HAL_GetTick>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	2b64      	cmp	r3, #100	; 0x64
 800d0ac:	d901      	bls.n	800d0b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	e1e7      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d0b2:	4b6c      	ldr	r3, [pc, #432]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1f0      	bne.n	800d0a0 <HAL_RCC_OscConfig+0xe8>
 800d0be:	e000      	b.n	800d0c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f003 0302 	and.w	r3, r3, #2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d063      	beq.n	800d196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d0ce:	4b65      	ldr	r3, [pc, #404]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f003 030c 	and.w	r3, r3, #12
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00b      	beq.n	800d0f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d0da:	4b62      	ldr	r3, [pc, #392]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d0e2:	2b08      	cmp	r3, #8
 800d0e4:	d11c      	bne.n	800d120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d0e6:	4b5f      	ldr	r3, [pc, #380]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d116      	bne.n	800d120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d0f2:	4b5c      	ldr	r3, [pc, #368]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 0302 	and.w	r3, r3, #2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d005      	beq.n	800d10a <HAL_RCC_OscConfig+0x152>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d001      	beq.n	800d10a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	e1bb      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d10a:	4b56      	ldr	r3, [pc, #344]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	4952      	ldr	r1, [pc, #328]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d11a:	4313      	orrs	r3, r2
 800d11c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d11e:	e03a      	b.n	800d196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d020      	beq.n	800d16a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d128:	4b4f      	ldr	r3, [pc, #316]	; (800d268 <HAL_RCC_OscConfig+0x2b0>)
 800d12a:	2201      	movs	r2, #1
 800d12c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d12e:	f7fc f829 	bl	8009184 <HAL_GetTick>
 800d132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d134:	e008      	b.n	800d148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d136:	f7fc f825 	bl	8009184 <HAL_GetTick>
 800d13a:	4602      	mov	r2, r0
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	1ad3      	subs	r3, r2, r3
 800d140:	2b02      	cmp	r3, #2
 800d142:	d901      	bls.n	800d148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d144:	2303      	movs	r3, #3
 800d146:	e19c      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d148:	4b46      	ldr	r3, [pc, #280]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0f0      	beq.n	800d136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d154:	4b43      	ldr	r3, [pc, #268]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	691b      	ldr	r3, [r3, #16]
 800d160:	00db      	lsls	r3, r3, #3
 800d162:	4940      	ldr	r1, [pc, #256]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d164:	4313      	orrs	r3, r2
 800d166:	600b      	str	r3, [r1, #0]
 800d168:	e015      	b.n	800d196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d16a:	4b3f      	ldr	r3, [pc, #252]	; (800d268 <HAL_RCC_OscConfig+0x2b0>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d170:	f7fc f808 	bl	8009184 <HAL_GetTick>
 800d174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d176:	e008      	b.n	800d18a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d178:	f7fc f804 	bl	8009184 <HAL_GetTick>
 800d17c:	4602      	mov	r2, r0
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	2b02      	cmp	r3, #2
 800d184:	d901      	bls.n	800d18a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d186:	2303      	movs	r3, #3
 800d188:	e17b      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d18a:	4b36      	ldr	r3, [pc, #216]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f003 0302 	and.w	r3, r3, #2
 800d192:	2b00      	cmp	r3, #0
 800d194:	d1f0      	bne.n	800d178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f003 0308 	and.w	r3, r3, #8
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d030      	beq.n	800d204 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d016      	beq.n	800d1d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d1aa:	4b30      	ldr	r3, [pc, #192]	; (800d26c <HAL_RCC_OscConfig+0x2b4>)
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1b0:	f7fb ffe8 	bl	8009184 <HAL_GetTick>
 800d1b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d1b6:	e008      	b.n	800d1ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d1b8:	f7fb ffe4 	bl	8009184 <HAL_GetTick>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d901      	bls.n	800d1ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	e15b      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d1ca:	4b26      	ldr	r3, [pc, #152]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1ce:	f003 0302 	and.w	r3, r3, #2
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d0f0      	beq.n	800d1b8 <HAL_RCC_OscConfig+0x200>
 800d1d6:	e015      	b.n	800d204 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d1d8:	4b24      	ldr	r3, [pc, #144]	; (800d26c <HAL_RCC_OscConfig+0x2b4>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d1de:	f7fb ffd1 	bl	8009184 <HAL_GetTick>
 800d1e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d1e4:	e008      	b.n	800d1f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d1e6:	f7fb ffcd 	bl	8009184 <HAL_GetTick>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	2b02      	cmp	r3, #2
 800d1f2:	d901      	bls.n	800d1f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	e144      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d1f8:	4b1a      	ldr	r3, [pc, #104]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1f0      	bne.n	800d1e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f003 0304 	and.w	r3, r3, #4
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 80a0 	beq.w	800d352 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d212:	2300      	movs	r3, #0
 800d214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d216:	4b13      	ldr	r3, [pc, #76]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10f      	bne.n	800d242 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d222:	2300      	movs	r3, #0
 800d224:	60bb      	str	r3, [r7, #8]
 800d226:	4b0f      	ldr	r3, [pc, #60]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d22a:	4a0e      	ldr	r2, [pc, #56]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d22c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d230:	6413      	str	r3, [r2, #64]	; 0x40
 800d232:	4b0c      	ldr	r3, [pc, #48]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d23a:	60bb      	str	r3, [r7, #8]
 800d23c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d23e:	2301      	movs	r3, #1
 800d240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d242:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <HAL_RCC_OscConfig+0x2b8>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d121      	bne.n	800d292 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d24e:	4b08      	ldr	r3, [pc, #32]	; (800d270 <HAL_RCC_OscConfig+0x2b8>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a07      	ldr	r2, [pc, #28]	; (800d270 <HAL_RCC_OscConfig+0x2b8>)
 800d254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d25a:	f7fb ff93 	bl	8009184 <HAL_GetTick>
 800d25e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d260:	e011      	b.n	800d286 <HAL_RCC_OscConfig+0x2ce>
 800d262:	bf00      	nop
 800d264:	40023800 	.word	0x40023800
 800d268:	42470000 	.word	0x42470000
 800d26c:	42470e80 	.word	0x42470e80
 800d270:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d274:	f7fb ff86 	bl	8009184 <HAL_GetTick>
 800d278:	4602      	mov	r2, r0
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	2b02      	cmp	r3, #2
 800d280:	d901      	bls.n	800d286 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d282:	2303      	movs	r3, #3
 800d284:	e0fd      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d286:	4b81      	ldr	r3, [pc, #516]	; (800d48c <HAL_RCC_OscConfig+0x4d4>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d0f0      	beq.n	800d274 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d106      	bne.n	800d2a8 <HAL_RCC_OscConfig+0x2f0>
 800d29a:	4b7d      	ldr	r3, [pc, #500]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d29e:	4a7c      	ldr	r2, [pc, #496]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2a0:	f043 0301 	orr.w	r3, r3, #1
 800d2a4:	6713      	str	r3, [r2, #112]	; 0x70
 800d2a6:	e01c      	b.n	800d2e2 <HAL_RCC_OscConfig+0x32a>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	2b05      	cmp	r3, #5
 800d2ae:	d10c      	bne.n	800d2ca <HAL_RCC_OscConfig+0x312>
 800d2b0:	4b77      	ldr	r3, [pc, #476]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2b4:	4a76      	ldr	r2, [pc, #472]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2b6:	f043 0304 	orr.w	r3, r3, #4
 800d2ba:	6713      	str	r3, [r2, #112]	; 0x70
 800d2bc:	4b74      	ldr	r3, [pc, #464]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c0:	4a73      	ldr	r2, [pc, #460]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2c2:	f043 0301 	orr.w	r3, r3, #1
 800d2c6:	6713      	str	r3, [r2, #112]	; 0x70
 800d2c8:	e00b      	b.n	800d2e2 <HAL_RCC_OscConfig+0x32a>
 800d2ca:	4b71      	ldr	r3, [pc, #452]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ce:	4a70      	ldr	r2, [pc, #448]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2d0:	f023 0301 	bic.w	r3, r3, #1
 800d2d4:	6713      	str	r3, [r2, #112]	; 0x70
 800d2d6:	4b6e      	ldr	r3, [pc, #440]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2da:	4a6d      	ldr	r2, [pc, #436]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2dc:	f023 0304 	bic.w	r3, r3, #4
 800d2e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d015      	beq.n	800d316 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2ea:	f7fb ff4b 	bl	8009184 <HAL_GetTick>
 800d2ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d2f0:	e00a      	b.n	800d308 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d2f2:	f7fb ff47 	bl	8009184 <HAL_GetTick>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d300:	4293      	cmp	r3, r2
 800d302:	d901      	bls.n	800d308 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d304:	2303      	movs	r3, #3
 800d306:	e0bc      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d308:	4b61      	ldr	r3, [pc, #388]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d30c:	f003 0302 	and.w	r3, r3, #2
 800d310:	2b00      	cmp	r3, #0
 800d312:	d0ee      	beq.n	800d2f2 <HAL_RCC_OscConfig+0x33a>
 800d314:	e014      	b.n	800d340 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d316:	f7fb ff35 	bl	8009184 <HAL_GetTick>
 800d31a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d31c:	e00a      	b.n	800d334 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d31e:	f7fb ff31 	bl	8009184 <HAL_GetTick>
 800d322:	4602      	mov	r2, r0
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	f241 3288 	movw	r2, #5000	; 0x1388
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d901      	bls.n	800d334 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d330:	2303      	movs	r3, #3
 800d332:	e0a6      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d334:	4b56      	ldr	r3, [pc, #344]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d338:	f003 0302 	and.w	r3, r3, #2
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1ee      	bne.n	800d31e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d340:	7dfb      	ldrb	r3, [r7, #23]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d105      	bne.n	800d352 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d346:	4b52      	ldr	r3, [pc, #328]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34a:	4a51      	ldr	r2, [pc, #324]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d34c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 8092 	beq.w	800d480 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d35c:	4b4c      	ldr	r3, [pc, #304]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	f003 030c 	and.w	r3, r3, #12
 800d364:	2b08      	cmp	r3, #8
 800d366:	d05c      	beq.n	800d422 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d141      	bne.n	800d3f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d370:	4b48      	ldr	r3, [pc, #288]	; (800d494 <HAL_RCC_OscConfig+0x4dc>)
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d376:	f7fb ff05 	bl	8009184 <HAL_GetTick>
 800d37a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d37c:	e008      	b.n	800d390 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d37e:	f7fb ff01 	bl	8009184 <HAL_GetTick>
 800d382:	4602      	mov	r2, r0
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d901      	bls.n	800d390 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e078      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d390:	4b3f      	ldr	r3, [pc, #252]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1f0      	bne.n	800d37e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	69da      	ldr	r2, [r3, #28]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a1b      	ldr	r3, [r3, #32]
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3aa:	019b      	lsls	r3, r3, #6
 800d3ac:	431a      	orrs	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b2:	085b      	lsrs	r3, r3, #1
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	041b      	lsls	r3, r3, #16
 800d3b8:	431a      	orrs	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3be:	061b      	lsls	r3, r3, #24
 800d3c0:	4933      	ldr	r1, [pc, #204]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d3c6:	4b33      	ldr	r3, [pc, #204]	; (800d494 <HAL_RCC_OscConfig+0x4dc>)
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3cc:	f7fb feda 	bl	8009184 <HAL_GetTick>
 800d3d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d3d2:	e008      	b.n	800d3e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d3d4:	f7fb fed6 	bl	8009184 <HAL_GetTick>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d901      	bls.n	800d3e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	e04d      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d3e6:	4b2a      	ldr	r3, [pc, #168]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d0f0      	beq.n	800d3d4 <HAL_RCC_OscConfig+0x41c>
 800d3f2:	e045      	b.n	800d480 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3f4:	4b27      	ldr	r3, [pc, #156]	; (800d494 <HAL_RCC_OscConfig+0x4dc>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3fa:	f7fb fec3 	bl	8009184 <HAL_GetTick>
 800d3fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d400:	e008      	b.n	800d414 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d402:	f7fb febf 	bl	8009184 <HAL_GetTick>
 800d406:	4602      	mov	r2, r0
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d901      	bls.n	800d414 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d410:	2303      	movs	r3, #3
 800d412:	e036      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d414:	4b1e      	ldr	r3, [pc, #120]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1f0      	bne.n	800d402 <HAL_RCC_OscConfig+0x44a>
 800d420:	e02e      	b.n	800d480 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d101      	bne.n	800d42e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e029      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d42e:	4b18      	ldr	r3, [pc, #96]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d11c      	bne.n	800d47c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d115      	bne.n	800d47c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d456:	4013      	ands	r3, r2
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d10d      	bne.n	800d47c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d106      	bne.n	800d47c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d478:	429a      	cmp	r2, r3
 800d47a:	d001      	beq.n	800d480 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	e000      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d480:	2300      	movs	r3, #0
}
 800d482:	4618      	mov	r0, r3
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	40007000 	.word	0x40007000
 800d490:	40023800 	.word	0x40023800
 800d494:	42470060 	.word	0x42470060

0800d498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d101      	bne.n	800d4ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e0cc      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d4ac:	4b68      	ldr	r3, [pc, #416]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 030f 	and.w	r3, r3, #15
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d90c      	bls.n	800d4d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4ba:	4b65      	ldr	r3, [pc, #404]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	b2d2      	uxtb	r2, r2
 800d4c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4c2:	4b63      	ldr	r3, [pc, #396]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f003 030f 	and.w	r3, r3, #15
 800d4ca:	683a      	ldr	r2, [r7, #0]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d001      	beq.n	800d4d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e0b8      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f003 0302 	and.w	r3, r3, #2
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d020      	beq.n	800d522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f003 0304 	and.w	r3, r3, #4
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d005      	beq.n	800d4f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d4ec:	4b59      	ldr	r3, [pc, #356]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	4a58      	ldr	r2, [pc, #352]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d4f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d4f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 0308 	and.w	r3, r3, #8
 800d500:	2b00      	cmp	r3, #0
 800d502:	d005      	beq.n	800d510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d504:	4b53      	ldr	r3, [pc, #332]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	4a52      	ldr	r2, [pc, #328]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d50a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d50e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d510:	4b50      	ldr	r3, [pc, #320]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	494d      	ldr	r1, [pc, #308]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d51e:	4313      	orrs	r3, r2
 800d520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d044      	beq.n	800d5b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d107      	bne.n	800d546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d536:	4b47      	ldr	r3, [pc, #284]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d119      	bne.n	800d576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	e07f      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d003      	beq.n	800d556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d552:	2b03      	cmp	r3, #3
 800d554:	d107      	bne.n	800d566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d556:	4b3f      	ldr	r3, [pc, #252]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d109      	bne.n	800d576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e06f      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d566:	4b3b      	ldr	r3, [pc, #236]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 0302 	and.w	r3, r3, #2
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d101      	bne.n	800d576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e067      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d576:	4b37      	ldr	r3, [pc, #220]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f023 0203 	bic.w	r2, r3, #3
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	4934      	ldr	r1, [pc, #208]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d584:	4313      	orrs	r3, r2
 800d586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d588:	f7fb fdfc 	bl	8009184 <HAL_GetTick>
 800d58c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d58e:	e00a      	b.n	800d5a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d590:	f7fb fdf8 	bl	8009184 <HAL_GetTick>
 800d594:	4602      	mov	r2, r0
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d901      	bls.n	800d5a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d5a2:	2303      	movs	r3, #3
 800d5a4:	e04f      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5a6:	4b2b      	ldr	r3, [pc, #172]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	f003 020c 	and.w	r2, r3, #12
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d1eb      	bne.n	800d590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d5b8:	4b25      	ldr	r3, [pc, #148]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f003 030f 	and.w	r3, r3, #15
 800d5c0:	683a      	ldr	r2, [r7, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d20c      	bcs.n	800d5e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5c6:	4b22      	ldr	r3, [pc, #136]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d5c8:	683a      	ldr	r2, [r7, #0]
 800d5ca:	b2d2      	uxtb	r2, r2
 800d5cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5ce:	4b20      	ldr	r3, [pc, #128]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f003 030f 	and.w	r3, r3, #15
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d001      	beq.n	800d5e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e032      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 0304 	and.w	r3, r3, #4
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d008      	beq.n	800d5fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d5ec:	4b19      	ldr	r3, [pc, #100]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d5ee:	689b      	ldr	r3, [r3, #8]
 800d5f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	4916      	ldr	r1, [pc, #88]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f003 0308 	and.w	r3, r3, #8
 800d606:	2b00      	cmp	r3, #0
 800d608:	d009      	beq.n	800d61e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d60a:	4b12      	ldr	r3, [pc, #72]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	00db      	lsls	r3, r3, #3
 800d618:	490e      	ldr	r1, [pc, #56]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d61a:	4313      	orrs	r3, r2
 800d61c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d61e:	f000 f821 	bl	800d664 <HAL_RCC_GetSysClockFreq>
 800d622:	4601      	mov	r1, r0
 800d624:	4b0b      	ldr	r3, [pc, #44]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	091b      	lsrs	r3, r3, #4
 800d62a:	f003 030f 	and.w	r3, r3, #15
 800d62e:	4a0a      	ldr	r2, [pc, #40]	; (800d658 <HAL_RCC_ClockConfig+0x1c0>)
 800d630:	5cd3      	ldrb	r3, [r2, r3]
 800d632:	fa21 f303 	lsr.w	r3, r1, r3
 800d636:	4a09      	ldr	r2, [pc, #36]	; (800d65c <HAL_RCC_ClockConfig+0x1c4>)
 800d638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d63a:	4b09      	ldr	r3, [pc, #36]	; (800d660 <HAL_RCC_ClockConfig+0x1c8>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fa fd54 	bl	80080ec <HAL_InitTick>

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	40023c00 	.word	0x40023c00
 800d654:	40023800 	.word	0x40023800
 800d658:	0801e54c 	.word	0x0801e54c
 800d65c:	200001b0 	.word	0x200001b0
 800d660:	200001b4 	.word	0x200001b4

0800d664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d66a:	2300      	movs	r3, #0
 800d66c:	607b      	str	r3, [r7, #4]
 800d66e:	2300      	movs	r3, #0
 800d670:	60fb      	str	r3, [r7, #12]
 800d672:	2300      	movs	r3, #0
 800d674:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d676:	2300      	movs	r3, #0
 800d678:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d67a:	4b63      	ldr	r3, [pc, #396]	; (800d808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	f003 030c 	and.w	r3, r3, #12
 800d682:	2b04      	cmp	r3, #4
 800d684:	d007      	beq.n	800d696 <HAL_RCC_GetSysClockFreq+0x32>
 800d686:	2b08      	cmp	r3, #8
 800d688:	d008      	beq.n	800d69c <HAL_RCC_GetSysClockFreq+0x38>
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f040 80b4 	bne.w	800d7f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d690:	4b5e      	ldr	r3, [pc, #376]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d692:	60bb      	str	r3, [r7, #8]
       break;
 800d694:	e0b3      	b.n	800d7fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d696:	4b5e      	ldr	r3, [pc, #376]	; (800d810 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d698:	60bb      	str	r3, [r7, #8]
      break;
 800d69a:	e0b0      	b.n	800d7fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d69c:	4b5a      	ldr	r3, [pc, #360]	; (800d808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d6a6:	4b58      	ldr	r3, [pc, #352]	; (800d808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d04a      	beq.n	800d748 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d6b2:	4b55      	ldr	r3, [pc, #340]	; (800d808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	099b      	lsrs	r3, r3, #6
 800d6b8:	f04f 0400 	mov.w	r4, #0
 800d6bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d6c0:	f04f 0200 	mov.w	r2, #0
 800d6c4:	ea03 0501 	and.w	r5, r3, r1
 800d6c8:	ea04 0602 	and.w	r6, r4, r2
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	4632      	mov	r2, r6
 800d6d0:	f04f 0300 	mov.w	r3, #0
 800d6d4:	f04f 0400 	mov.w	r4, #0
 800d6d8:	0154      	lsls	r4, r2, #5
 800d6da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d6de:	014b      	lsls	r3, r1, #5
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	4622      	mov	r2, r4
 800d6e4:	1b49      	subs	r1, r1, r5
 800d6e6:	eb62 0206 	sbc.w	r2, r2, r6
 800d6ea:	f04f 0300 	mov.w	r3, #0
 800d6ee:	f04f 0400 	mov.w	r4, #0
 800d6f2:	0194      	lsls	r4, r2, #6
 800d6f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d6f8:	018b      	lsls	r3, r1, #6
 800d6fa:	1a5b      	subs	r3, r3, r1
 800d6fc:	eb64 0402 	sbc.w	r4, r4, r2
 800d700:	f04f 0100 	mov.w	r1, #0
 800d704:	f04f 0200 	mov.w	r2, #0
 800d708:	00e2      	lsls	r2, r4, #3
 800d70a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d70e:	00d9      	lsls	r1, r3, #3
 800d710:	460b      	mov	r3, r1
 800d712:	4614      	mov	r4, r2
 800d714:	195b      	adds	r3, r3, r5
 800d716:	eb44 0406 	adc.w	r4, r4, r6
 800d71a:	f04f 0100 	mov.w	r1, #0
 800d71e:	f04f 0200 	mov.w	r2, #0
 800d722:	0262      	lsls	r2, r4, #9
 800d724:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800d728:	0259      	lsls	r1, r3, #9
 800d72a:	460b      	mov	r3, r1
 800d72c:	4614      	mov	r4, r2
 800d72e:	4618      	mov	r0, r3
 800d730:	4621      	mov	r1, r4
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f04f 0400 	mov.w	r4, #0
 800d738:	461a      	mov	r2, r3
 800d73a:	4623      	mov	r3, r4
 800d73c:	f7f3 fc12 	bl	8000f64 <__aeabi_uldivmod>
 800d740:	4603      	mov	r3, r0
 800d742:	460c      	mov	r4, r1
 800d744:	60fb      	str	r3, [r7, #12]
 800d746:	e049      	b.n	800d7dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d748:	4b2f      	ldr	r3, [pc, #188]	; (800d808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	099b      	lsrs	r3, r3, #6
 800d74e:	f04f 0400 	mov.w	r4, #0
 800d752:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d756:	f04f 0200 	mov.w	r2, #0
 800d75a:	ea03 0501 	and.w	r5, r3, r1
 800d75e:	ea04 0602 	and.w	r6, r4, r2
 800d762:	4629      	mov	r1, r5
 800d764:	4632      	mov	r2, r6
 800d766:	f04f 0300 	mov.w	r3, #0
 800d76a:	f04f 0400 	mov.w	r4, #0
 800d76e:	0154      	lsls	r4, r2, #5
 800d770:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d774:	014b      	lsls	r3, r1, #5
 800d776:	4619      	mov	r1, r3
 800d778:	4622      	mov	r2, r4
 800d77a:	1b49      	subs	r1, r1, r5
 800d77c:	eb62 0206 	sbc.w	r2, r2, r6
 800d780:	f04f 0300 	mov.w	r3, #0
 800d784:	f04f 0400 	mov.w	r4, #0
 800d788:	0194      	lsls	r4, r2, #6
 800d78a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d78e:	018b      	lsls	r3, r1, #6
 800d790:	1a5b      	subs	r3, r3, r1
 800d792:	eb64 0402 	sbc.w	r4, r4, r2
 800d796:	f04f 0100 	mov.w	r1, #0
 800d79a:	f04f 0200 	mov.w	r2, #0
 800d79e:	00e2      	lsls	r2, r4, #3
 800d7a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d7a4:	00d9      	lsls	r1, r3, #3
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	4614      	mov	r4, r2
 800d7aa:	195b      	adds	r3, r3, r5
 800d7ac:	eb44 0406 	adc.w	r4, r4, r6
 800d7b0:	f04f 0100 	mov.w	r1, #0
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	02a2      	lsls	r2, r4, #10
 800d7ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d7be:	0299      	lsls	r1, r3, #10
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	4614      	mov	r4, r2
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f04f 0400 	mov.w	r4, #0
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	4623      	mov	r3, r4
 800d7d2:	f7f3 fbc7 	bl	8000f64 <__aeabi_uldivmod>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	460c      	mov	r4, r1
 800d7da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d7dc:	4b0a      	ldr	r3, [pc, #40]	; (800d808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	0c1b      	lsrs	r3, r3, #16
 800d7e2:	f003 0303 	and.w	r3, r3, #3
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	005b      	lsls	r3, r3, #1
 800d7ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7f4:	60bb      	str	r3, [r7, #8]
      break;
 800d7f6:	e002      	b.n	800d7fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d7f8:	4b04      	ldr	r3, [pc, #16]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d7fa:	60bb      	str	r3, [r7, #8]
      break;
 800d7fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d7fe:	68bb      	ldr	r3, [r7, #8]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d808:	40023800 	.word	0x40023800
 800d80c:	00f42400 	.word	0x00f42400
 800d810:	007a1200 	.word	0x007a1200

0800d814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d818:	4b03      	ldr	r3, [pc, #12]	; (800d828 <HAL_RCC_GetHCLKFreq+0x14>)
 800d81a:	681b      	ldr	r3, [r3, #0]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	200001b0 	.word	0x200001b0

0800d82c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d830:	f7ff fff0 	bl	800d814 <HAL_RCC_GetHCLKFreq>
 800d834:	4601      	mov	r1, r0
 800d836:	4b05      	ldr	r3, [pc, #20]	; (800d84c <HAL_RCC_GetPCLK1Freq+0x20>)
 800d838:	689b      	ldr	r3, [r3, #8]
 800d83a:	0a9b      	lsrs	r3, r3, #10
 800d83c:	f003 0307 	and.w	r3, r3, #7
 800d840:	4a03      	ldr	r2, [pc, #12]	; (800d850 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d842:	5cd3      	ldrb	r3, [r2, r3]
 800d844:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d848:	4618      	mov	r0, r3
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	40023800 	.word	0x40023800
 800d850:	0801e55c 	.word	0x0801e55c

0800d854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d858:	f7ff ffdc 	bl	800d814 <HAL_RCC_GetHCLKFreq>
 800d85c:	4601      	mov	r1, r0
 800d85e:	4b05      	ldr	r3, [pc, #20]	; (800d874 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	0b5b      	lsrs	r3, r3, #13
 800d864:	f003 0307 	and.w	r3, r3, #7
 800d868:	4a03      	ldr	r2, [pc, #12]	; (800d878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d86a:	5cd3      	ldrb	r3, [r2, r3]
 800d86c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d870:	4618      	mov	r0, r3
 800d872:	bd80      	pop	{r7, pc}
 800d874:	40023800 	.word	0x40023800
 800d878:	0801e55c 	.word	0x0801e55c

0800d87c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	220f      	movs	r2, #15
 800d88a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d88c:	4b12      	ldr	r3, [pc, #72]	; (800d8d8 <HAL_RCC_GetClockConfig+0x5c>)
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	f003 0203 	and.w	r2, r3, #3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d898:	4b0f      	ldr	r3, [pc, #60]	; (800d8d8 <HAL_RCC_GetClockConfig+0x5c>)
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d8a4:	4b0c      	ldr	r3, [pc, #48]	; (800d8d8 <HAL_RCC_GetClockConfig+0x5c>)
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d8b0:	4b09      	ldr	r3, [pc, #36]	; (800d8d8 <HAL_RCC_GetClockConfig+0x5c>)
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	08db      	lsrs	r3, r3, #3
 800d8b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d8be:	4b07      	ldr	r3, [pc, #28]	; (800d8dc <HAL_RCC_GetClockConfig+0x60>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f003 020f 	and.w	r2, r3, #15
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	601a      	str	r2, [r3, #0]
}
 800d8ca:	bf00      	nop
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	40023800 	.word	0x40023800
 800d8dc:	40023c00 	.word	0x40023c00

0800d8e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d101      	bne.n	800d8f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e022      	b.n	800d938 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d105      	bne.n	800d90a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f7fa facd 	bl	8007ea4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2203      	movs	r2, #3
 800d90e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 f814 	bl	800d940 <HAL_SD_InitCard>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d001      	beq.n	800d922 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e00a      	b.n	800d938 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d940:	b5b0      	push	{r4, r5, r7, lr}
 800d942:	b08e      	sub	sp, #56	; 0x38
 800d944:	af04      	add	r7, sp, #16
 800d946:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d948:	2300      	movs	r3, #0
 800d94a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d94c:	2300      	movs	r3, #0
 800d94e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d950:	2300      	movs	r3, #0
 800d952:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d954:	2300      	movs	r3, #0
 800d956:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d958:	2300      	movs	r3, #0
 800d95a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d95c:	2376      	movs	r3, #118	; 0x76
 800d95e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681d      	ldr	r5, [r3, #0]
 800d964:	466c      	mov	r4, sp
 800d966:	f107 0314 	add.w	r3, r7, #20
 800d96a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d96e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d972:	f107 0308 	add.w	r3, r7, #8
 800d976:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d978:	4628      	mov	r0, r5
 800d97a:	f003 fb41 	bl	8011000 <SDIO_Init>
 800d97e:	4603      	mov	r3, r0
 800d980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d98c:	2301      	movs	r3, #1
 800d98e:	e031      	b.n	800d9f4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d990:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <HAL_SD_InitCard+0xbc>)
 800d992:	2200      	movs	r2, #0
 800d994:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f003 fb79 	bl	8011092 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d9a0:	4b16      	ldr	r3, [pc, #88]	; (800d9fc <HAL_SD_InitCard+0xbc>)
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 ffdc 	bl	800e964 <SD_PowerON>
 800d9ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9ae:	6a3b      	ldr	r3, [r7, #32]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00b      	beq.n	800d9cc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9c0:	6a3b      	ldr	r3, [r7, #32]
 800d9c2:	431a      	orrs	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e013      	b.n	800d9f4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 fefb 	bl	800e7c8 <SD_InitCard>
 800d9d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00b      	beq.n	800d9f2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	431a      	orrs	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e000      	b.n	800d9f4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3728      	adds	r7, #40	; 0x28
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d9fc:	422580a0 	.word	0x422580a0

0800da00 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08c      	sub	sp, #48	; 0x30
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
 800da0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d107      	bne.n	800da28 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800da24:	2301      	movs	r3, #1
 800da26:	e0c9      	b.n	800dbbc <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b01      	cmp	r3, #1
 800da32:	f040 80c2 	bne.w	800dbba <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2200      	movs	r2, #0
 800da3a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800da3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	441a      	add	r2, r3
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da46:	429a      	cmp	r2, r3
 800da48:	d907      	bls.n	800da5a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e0b0      	b.n	800dbbc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2203      	movs	r2, #3
 800da5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2200      	movs	r2, #0
 800da68:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	6812      	ldr	r2, [r2, #0]
 800da74:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800da78:	f043 0302 	orr.w	r3, r3, #2
 800da7c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da82:	4a50      	ldr	r2, [pc, #320]	; (800dbc4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800da84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da8a:	4a4f      	ldr	r2, [pc, #316]	; (800dbc8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800da8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da92:	2200      	movs	r2, #0
 800da94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3380      	adds	r3, #128	; 0x80
 800daa0:	4619      	mov	r1, r3
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	025b      	lsls	r3, r3, #9
 800daa8:	089b      	lsrs	r3, r3, #2
 800daaa:	f7fb fd29 	bl	8009500 <HAL_DMA_Start_IT>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d017      	beq.n	800dae4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800dac2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a40      	ldr	r2, [pc, #256]	; (800dbcc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800daca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2201      	movs	r2, #1
 800dadc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800dae0:	2301      	movs	r3, #1
 800dae2:	e06b      	b.n	800dbbc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800dae4:	4b3a      	ldr	r3, [pc, #232]	; (800dbd0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800dae6:	2201      	movs	r2, #1
 800dae8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d002      	beq.n	800daf8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf4:	025b      	lsls	r3, r3, #9
 800daf6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800db00:	4618      	mov	r0, r3
 800db02:	f003 fb59 	bl	80111b8 <SDMMC_CmdBlockLength>
 800db06:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00f      	beq.n	800db2e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a2e      	ldr	r2, [pc, #184]	; (800dbcc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800db14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1c:	431a      	orrs	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800db2a:	2301      	movs	r3, #1
 800db2c:	e046      	b.n	800dbbc <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db2e:	f04f 33ff 	mov.w	r3, #4294967295
 800db32:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	025b      	lsls	r3, r3, #9
 800db38:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800db3a:	2390      	movs	r3, #144	; 0x90
 800db3c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800db3e:	2302      	movs	r3, #2
 800db40:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800db42:	2300      	movs	r3, #0
 800db44:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800db46:	2301      	movs	r3, #1
 800db48:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f107 0210 	add.w	r2, r7, #16
 800db52:	4611      	mov	r1, r2
 800db54:	4618      	mov	r0, r3
 800db56:	f003 fb03 	bl	8011160 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d90a      	bls.n	800db76 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2282      	movs	r2, #130	; 0x82
 800db64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db6c:	4618      	mov	r0, r3
 800db6e:	f003 fb67 	bl	8011240 <SDMMC_CmdReadMultiBlock>
 800db72:	62f8      	str	r0, [r7, #44]	; 0x2c
 800db74:	e009      	b.n	800db8a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2281      	movs	r2, #129	; 0x81
 800db7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db82:	4618      	mov	r0, r3
 800db84:	f003 fb3a 	bl	80111fc <SDMMC_CmdReadSingleBlock>
 800db88:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d012      	beq.n	800dbb6 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a0d      	ldr	r2, [pc, #52]	; (800dbcc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800db96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9e:	431a      	orrs	r2, r3
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e002      	b.n	800dbbc <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	e000      	b.n	800dbbc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800dbba:	2302      	movs	r3, #2
  }
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3730      	adds	r7, #48	; 0x30
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	0800e5d7 	.word	0x0800e5d7
 800dbc8:	0800e649 	.word	0x0800e649
 800dbcc:	004005ff 	.word	0x004005ff
 800dbd0:	4225858c 	.word	0x4225858c

0800dbd4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08c      	sub	sp, #48	; 0x30
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
 800dbe0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d107      	bne.n	800dbfc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e0ce      	b.n	800dd9a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	f040 80c7 	bne.w	800dd98 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dc10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	441a      	add	r2, r3
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d907      	bls.n	800dc2e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc22:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e0b5      	b.n	800dd9a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2203      	movs	r2, #3
 800dc32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc44:	68fa      	ldr	r2, [r7, #12]
 800dc46:	6812      	ldr	r2, [r2, #0]
 800dc48:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800dc4c:	f043 0302 	orr.w	r3, r3, #2
 800dc50:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc56:	4a53      	ldr	r2, [pc, #332]	; (800dda4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800dc58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc5e:	4a52      	ldr	r2, [pc, #328]	; (800dda8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800dc60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc66:	2200      	movs	r2, #0
 800dc68:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d002      	beq.n	800dc78 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800dc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc74:	025b      	lsls	r3, r3, #9
 800dc76:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc80:	4618      	mov	r0, r3
 800dc82:	f003 fa99 	bl	80111b8 <SDMMC_CmdBlockLength>
 800dc86:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00f      	beq.n	800dcae <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4a46      	ldr	r2, [pc, #280]	; (800ddac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800dc94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9c:	431a      	orrs	r2, r3
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e075      	b.n	800dd9a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d90a      	bls.n	800dcca <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	22a0      	movs	r2, #160	; 0xa0
 800dcb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f003 fb01 	bl	80112c8 <SDMMC_CmdWriteMultiBlock>
 800dcc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dcc8:	e009      	b.n	800dcde <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2290      	movs	r2, #144	; 0x90
 800dcce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f003 fad4 	bl	8011284 <SDMMC_CmdWriteSingleBlock>
 800dcdc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d012      	beq.n	800dd0a <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a30      	ldr	r2, [pc, #192]	; (800ddac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800dcea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf2:	431a      	orrs	r2, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2200      	movs	r2, #0
 800dd04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dd06:	2301      	movs	r3, #1
 800dd08:	e047      	b.n	800dd9a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800dd0a:	4b29      	ldr	r3, [pc, #164]	; (800ddb0 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dd14:	68b9      	ldr	r1, [r7, #8]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3380      	adds	r3, #128	; 0x80
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	025b      	lsls	r3, r3, #9
 800dd22:	089b      	lsrs	r3, r3, #2
 800dd24:	f7fb fbec 	bl	8009500 <HAL_DMA_Start_IT>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d01c      	beq.n	800dd68 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	6812      	ldr	r2, [r2, #0]
 800dd38:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800dd3c:	f023 0302 	bic.w	r3, r3, #2
 800dd40:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a19      	ldr	r2, [pc, #100]	; (800ddac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800dd48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dd64:	2301      	movs	r3, #1
 800dd66:	e018      	b.n	800dd9a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd68:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	025b      	lsls	r3, r3, #9
 800dd72:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800dd74:	2390      	movs	r3, #144	; 0x90
 800dd76:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800dd80:	2301      	movs	r3, #1
 800dd82:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f107 0210 	add.w	r2, r7, #16
 800dd8c:	4611      	mov	r1, r2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f003 f9e6 	bl	8011160 <SDIO_ConfigData>

      return HAL_OK;
 800dd94:	2300      	movs	r3, #0
 800dd96:	e000      	b.n	800dd9a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800dd98:	2302      	movs	r3, #2
  }
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3730      	adds	r7, #48	; 0x30
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	0800e5ad 	.word	0x0800e5ad
 800dda8:	0800e649 	.word	0x0800e649
 800ddac:	004005ff 	.word	0x004005ff
 800ddb0:	4225858c 	.word	0x4225858c

0800ddb4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d008      	beq.n	800dde2 <HAL_SD_IRQHandler+0x2e>
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f003 0308 	and.w	r3, r3, #8
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d003      	beq.n	800dde2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 ffd8 	bl	800ed90 <SD_Read_IT>
 800dde0:	e165      	b.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 808f 	beq.w	800df10 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ddfa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	6812      	ldr	r2, [r2, #0]
 800de06:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800de0a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800de0e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f022 0201 	bic.w	r2, r2, #1
 800de1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f003 0308 	and.w	r3, r3, #8
 800de26:	2b00      	cmp	r3, #0
 800de28:	d039      	beq.n	800de9e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f003 0302 	and.w	r3, r3, #2
 800de30:	2b00      	cmp	r3, #0
 800de32:	d104      	bne.n	800de3e <HAL_SD_IRQHandler+0x8a>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f003 0320 	and.w	r3, r3, #32
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d011      	beq.n	800de62 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4618      	mov	r0, r3
 800de44:	f003 fa62 	bl	801130c <SDMMC_CmdStopTransfer>
 800de48:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d008      	beq.n	800de62 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	431a      	orrs	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 f92f 	bl	800e0c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f240 523a 	movw	r2, #1338	; 0x53a
 800de6a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2201      	movs	r2, #1
 800de70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f003 0301 	and.w	r3, r3, #1
 800de80:	2b00      	cmp	r3, #0
 800de82:	d104      	bne.n	800de8e <HAL_SD_IRQHandler+0xda>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f003 0302 	and.w	r3, r3, #2
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d003      	beq.n	800de96 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f004 f96e 	bl	8012170 <HAL_SD_RxCpltCallback>
 800de94:	e10b      	b.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f004 f960 	bl	801215c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800de9c:	e107      	b.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f000 8102 	beq.w	800e0ae <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f003 0320 	and.w	r3, r3, #32
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d011      	beq.n	800ded8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4618      	mov	r0, r3
 800deba:	f003 fa27 	bl	801130c <SDMMC_CmdStopTransfer>
 800debe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d008      	beq.n	800ded8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	431a      	orrs	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f8f4 	bl	800e0c0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f003 0301 	and.w	r3, r3, #1
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f040 80e5 	bne.w	800e0ae <HAL_SD_IRQHandler+0x2fa>
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f003 0302 	and.w	r3, r3, #2
 800deea:	2b00      	cmp	r3, #0
 800deec:	f040 80df 	bne.w	800e0ae <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f022 0208 	bic.w	r2, r2, #8
 800defe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2201      	movs	r2, #1
 800df04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f004 f927 	bl	801215c <HAL_SD_TxCpltCallback>
}
 800df0e:	e0ce      	b.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d008      	beq.n	800df30 <HAL_SD_IRQHandler+0x17c>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f003 0308 	and.w	r3, r3, #8
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 ff82 	bl	800ee32 <SD_Write_IT>
 800df2e:	e0be      	b.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df36:	f240 233a 	movw	r3, #570	; 0x23a
 800df3a:	4013      	ands	r3, r2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f000 80b6 	beq.w	800e0ae <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df48:	f003 0302 	and.w	r3, r3, #2
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d005      	beq.n	800df5c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df54:	f043 0202 	orr.w	r2, r3, #2
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df62:	f003 0308 	and.w	r3, r3, #8
 800df66:	2b00      	cmp	r3, #0
 800df68:	d005      	beq.n	800df76 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6e:	f043 0208 	orr.w	r2, r3, #8
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7c:	f003 0320 	and.w	r3, r3, #32
 800df80:	2b00      	cmp	r3, #0
 800df82:	d005      	beq.n	800df90 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df88:	f043 0220 	orr.w	r2, r3, #32
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df96:	f003 0310 	and.w	r3, r3, #16
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d005      	beq.n	800dfaa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa2:	f043 0210 	orr.w	r2, r3, #16
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d005      	beq.n	800dfc4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfbc:	f043 0208 	orr.w	r2, r3, #8
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f240 723a 	movw	r2, #1850	; 0x73a
 800dfcc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	6812      	ldr	r2, [r2, #0]
 800dfd8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800dfdc:	f023 0302 	bic.w	r3, r3, #2
 800dfe0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f003 f990 	bl	801130c <SDMMC_CmdStopTransfer>
 800dfec:	4602      	mov	r2, r0
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff2:	431a      	orrs	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f003 0308 	and.w	r3, r3, #8
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00a      	beq.n	800e018 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2201      	movs	r2, #1
 800e006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 f855 	bl	800e0c0 <HAL_SD_ErrorCallback>
}
 800e016:	e04a      	b.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d045      	beq.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f003 0310 	and.w	r3, r3, #16
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d104      	bne.n	800e036 <HAL_SD_IRQHandler+0x282>
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f003 0320 	and.w	r3, r3, #32
 800e032:	2b00      	cmp	r3, #0
 800e034:	d011      	beq.n	800e05a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e03a:	4a1f      	ldr	r2, [pc, #124]	; (800e0b8 <HAL_SD_IRQHandler+0x304>)
 800e03c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e042:	4618      	mov	r0, r3
 800e044:	f7fb fab4 	bl	80095b0 <HAL_DMA_Abort_IT>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d02f      	beq.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e052:	4618      	mov	r0, r3
 800e054:	f000 fb4a 	bl	800e6ec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e058:	e029      	b.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f003 0301 	and.w	r3, r3, #1
 800e060:	2b00      	cmp	r3, #0
 800e062:	d104      	bne.n	800e06e <HAL_SD_IRQHandler+0x2ba>
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f003 0302 	and.w	r3, r3, #2
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d011      	beq.n	800e092 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e072:	4a12      	ldr	r2, [pc, #72]	; (800e0bc <HAL_SD_IRQHandler+0x308>)
 800e074:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fb fa98 	bl	80095b0 <HAL_DMA_Abort_IT>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d013      	beq.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e08a:	4618      	mov	r0, r3
 800e08c:	f000 fb65 	bl	800e75a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e090:	e00d      	b.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f004 f84e 	bl	8012148 <HAL_SD_AbortCallback>
}
 800e0ac:	e7ff      	b.n	800e0ae <HAL_SD_IRQHandler+0x2fa>
 800e0ae:	bf00      	nop
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	0800e6ed 	.word	0x0800e6ed
 800e0bc:	0800e75b 	.word	0x0800e75b

0800e0c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0e2:	0f9b      	lsrs	r3, r3, #30
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ee:	0e9b      	lsrs	r3, r3, #26
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	f003 030f 	and.w	r3, r3, #15
 800e0f6:	b2da      	uxtb	r2, r3
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e100:	0e1b      	lsrs	r3, r3, #24
 800e102:	b2db      	uxtb	r3, r3
 800e104:	f003 0303 	and.w	r3, r3, #3
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e112:	0c1b      	lsrs	r3, r3, #16
 800e114:	b2da      	uxtb	r2, r3
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e11e:	0a1b      	lsrs	r3, r3, #8
 800e120:	b2da      	uxtb	r2, r3
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e12a:	b2da      	uxtb	r2, r3
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e134:	0d1b      	lsrs	r3, r3, #20
 800e136:	b29a      	uxth	r2, r3
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e140:	0c1b      	lsrs	r3, r3, #16
 800e142:	b2db      	uxtb	r3, r3
 800e144:	f003 030f 	and.w	r3, r3, #15
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e152:	0bdb      	lsrs	r3, r3, #15
 800e154:	b2db      	uxtb	r3, r3
 800e156:	f003 0301 	and.w	r3, r3, #1
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e164:	0b9b      	lsrs	r3, r3, #14
 800e166:	b2db      	uxtb	r3, r3
 800e168:	f003 0301 	and.w	r3, r3, #1
 800e16c:	b2da      	uxtb	r2, r3
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e176:	0b5b      	lsrs	r3, r3, #13
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	f003 0301 	and.w	r3, r3, #1
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e188:	0b1b      	lsrs	r3, r3, #12
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	f003 0301 	and.w	r3, r3, #1
 800e190:	b2da      	uxtb	r2, r3
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2200      	movs	r2, #0
 800e19a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d163      	bne.n	800e26c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1a8:	009a      	lsls	r2, r3, #2
 800e1aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e1ae:	4013      	ands	r3, r2
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e1b4:	0f92      	lsrs	r2, r2, #30
 800e1b6:	431a      	orrs	r2, r3
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c0:	0edb      	lsrs	r3, r3, #27
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	f003 0307 	and.w	r3, r3, #7
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1d2:	0e1b      	lsrs	r3, r3, #24
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	f003 0307 	and.w	r3, r3, #7
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1e4:	0d5b      	lsrs	r3, r3, #21
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	f003 0307 	and.w	r3, r3, #7
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1f6:	0c9b      	lsrs	r3, r3, #18
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	f003 0307 	and.w	r3, r3, #7
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e208:	0bdb      	lsrs	r3, r3, #15
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	f003 0307 	and.w	r3, r3, #7
 800e210:	b2da      	uxtb	r2, r3
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	691b      	ldr	r3, [r3, #16]
 800e21a:	1c5a      	adds	r2, r3, #1
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	7e1b      	ldrb	r3, [r3, #24]
 800e224:	b2db      	uxtb	r3, r3
 800e226:	f003 0307 	and.w	r3, r3, #7
 800e22a:	3302      	adds	r3, #2
 800e22c:	2201      	movs	r2, #1
 800e22e:	fa02 f303 	lsl.w	r3, r2, r3
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e236:	fb02 f203 	mul.w	r2, r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	7a1b      	ldrb	r3, [r3, #8]
 800e242:	b2db      	uxtb	r3, r3
 800e244:	f003 030f 	and.w	r3, r3, #15
 800e248:	2201      	movs	r2, #1
 800e24a:	409a      	lsls	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e258:	0a52      	lsrs	r2, r2, #9
 800e25a:	fb02 f203 	mul.w	r2, r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e268:	661a      	str	r2, [r3, #96]	; 0x60
 800e26a:	e031      	b.n	800e2d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e270:	2b01      	cmp	r3, #1
 800e272:	d11d      	bne.n	800e2b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e278:	041b      	lsls	r3, r3, #16
 800e27a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e282:	0c1b      	lsrs	r3, r3, #16
 800e284:	431a      	orrs	r2, r3
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	3301      	adds	r3, #1
 800e290:	029a      	lsls	r2, r3, #10
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2a4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	661a      	str	r2, [r3, #96]	; 0x60
 800e2ae:	e00f      	b.n	800e2d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a58      	ldr	r2, [pc, #352]	; (800e418 <HAL_SD_GetCardCSD+0x344>)
 800e2b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e09d      	b.n	800e40c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2d4:	0b9b      	lsrs	r3, r3, #14
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	f003 0301 	and.w	r3, r3, #1
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2e6:	09db      	lsrs	r3, r3, #7
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e308:	0fdb      	lsrs	r3, r3, #31
 800e30a:	b2da      	uxtb	r2, r3
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e314:	0f5b      	lsrs	r3, r3, #29
 800e316:	b2db      	uxtb	r3, r3
 800e318:	f003 0303 	and.w	r3, r3, #3
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e326:	0e9b      	lsrs	r3, r3, #26
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	f003 0307 	and.w	r3, r3, #7
 800e32e:	b2da      	uxtb	r2, r3
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e338:	0d9b      	lsrs	r3, r3, #22
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	f003 030f 	and.w	r3, r3, #15
 800e340:	b2da      	uxtb	r2, r3
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e34a:	0d5b      	lsrs	r3, r3, #21
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	b2da      	uxtb	r2, r3
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e366:	0c1b      	lsrs	r3, r3, #16
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e37a:	0bdb      	lsrs	r3, r3, #15
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	f003 0301 	and.w	r3, r3, #1
 800e382:	b2da      	uxtb	r2, r3
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e38e:	0b9b      	lsrs	r3, r3, #14
 800e390:	b2db      	uxtb	r3, r3
 800e392:	f003 0301 	and.w	r3, r3, #1
 800e396:	b2da      	uxtb	r2, r3
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3a2:	0b5b      	lsrs	r3, r3, #13
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	f003 0301 	and.w	r3, r3, #1
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3b6:	0b1b      	lsrs	r3, r3, #12
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	f003 0301 	and.w	r3, r3, #1
 800e3be:	b2da      	uxtb	r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ca:	0a9b      	lsrs	r3, r3, #10
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	f003 0303 	and.w	r3, r3, #3
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3de:	0a1b      	lsrs	r3, r3, #8
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	f003 0303 	and.w	r3, r3, #3
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3f2:	085b      	lsrs	r3, r3, #1
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	2201      	movs	r2, #1
 800e406:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e40a:	2300      	movs	r3, #0
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	004005ff 	.word	0x004005ff

0800e41c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e466:	2300      	movs	r3, #0
}
 800e468:	4618      	mov	r0, r3
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e474:	b5b0      	push	{r4, r5, r7, lr}
 800e476:	b08e      	sub	sp, #56	; 0x38
 800e478:	af04      	add	r7, sp, #16
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2203      	movs	r2, #3
 800e482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	d02e      	beq.n	800e4ec <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e494:	d106      	bne.n	800e4a4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	639a      	str	r2, [r3, #56]	; 0x38
 800e4a2:	e029      	b.n	800e4f8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4aa:	d10a      	bne.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 fb0f 	bl	800ead0 <SD_WideBus_Enable>
 800e4b2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	431a      	orrs	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	639a      	str	r2, [r3, #56]	; 0x38
 800e4c0:	e01a      	b.n	800e4f8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10a      	bne.n	800e4de <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fb4c 	bl	800eb66 <SD_WideBus_Disable>
 800e4ce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d6:	431a      	orrs	r2, r3
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	639a      	str	r2, [r3, #56]	; 0x38
 800e4dc:	e00c      	b.n	800e4f8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	639a      	str	r2, [r3, #56]	; 0x38
 800e4ea:	e005      	b.n	800e4f8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d009      	beq.n	800e514 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a18      	ldr	r2, [pc, #96]	; (800e568 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800e506:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e510:	2301      	movs	r3, #1
 800e512:	e024      	b.n	800e55e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	695b      	ldr	r3, [r3, #20]
 800e52e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	699b      	ldr	r3, [r3, #24]
 800e534:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681d      	ldr	r5, [r3, #0]
 800e53a:	466c      	mov	r4, sp
 800e53c:	f107 0318 	add.w	r3, r7, #24
 800e540:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e548:	f107 030c 	add.w	r3, r7, #12
 800e54c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e54e:	4628      	mov	r0, r5
 800e550:	f002 fd56 	bl	8011000 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2201      	movs	r2, #1
 800e558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e55c:	2300      	movs	r3, #0
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3728      	adds	r7, #40	; 0x28
 800e562:	46bd      	mov	sp, r7
 800e564:	bdb0      	pop	{r4, r5, r7, pc}
 800e566:	bf00      	nop
 800e568:	004005ff 	.word	0x004005ff

0800e56c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e574:	2300      	movs	r3, #0
 800e576:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e578:	f107 030c 	add.w	r3, r7, #12
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fa7e 	bl	800ea80 <SD_SendStatus>
 800e584:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d005      	beq.n	800e598 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	431a      	orrs	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	0a5b      	lsrs	r3, r3, #9
 800e59c:	f003 030f 	and.w	r3, r3, #15
 800e5a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e5a2:	693b      	ldr	r3, [r7, #16]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3718      	adds	r7, #24
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b085      	sub	sp, #20
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e5ca:	bf00      	nop
 800e5cc:	3714      	adds	r7, #20
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b084      	sub	sp, #16
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e8:	2b82      	cmp	r3, #130	; 0x82
 800e5ea:	d111      	bne.n	800e610 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f002 fe8b 	bl	801130c <SDMMC_CmdStopTransfer>
 800e5f6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d008      	beq.n	800e610 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	431a      	orrs	r2, r3
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e60a:	68f8      	ldr	r0, [r7, #12]
 800e60c:	f7ff fd58 	bl	800e0c0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f022 0208 	bic.w	r2, r2, #8
 800e61e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f240 523a 	movw	r2, #1338	; 0x53a
 800e628:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2201      	movs	r2, #1
 800e62e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f003 fd99 	bl	8012170 <HAL_SD_RxCpltCallback>
#endif
}
 800e63e:	bf00      	nop
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
	...

0800e648 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e654:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7fb f964 	bl	8009924 <HAL_DMA_GetError>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d03e      	beq.n	800e6e0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e668:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e670:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	2b01      	cmp	r3, #1
 800e676:	d002      	beq.n	800e67e <SD_DMAError+0x36>
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d12d      	bne.n	800e6da <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a19      	ldr	r2, [pc, #100]	; (800e6e8 <SD_DMAError+0xa0>)
 800e684:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e694:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e69a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e6a2:	6978      	ldr	r0, [r7, #20]
 800e6a4:	f7ff ff62 	bl	800e56c <HAL_SD_GetCardState>
 800e6a8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	2b06      	cmp	r3, #6
 800e6ae:	d002      	beq.n	800e6b6 <SD_DMAError+0x6e>
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	2b05      	cmp	r3, #5
 800e6b4:	d10a      	bne.n	800e6cc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f002 fe26 	bl	801130c <SDMMC_CmdStopTransfer>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c6:	431a      	orrs	r2, r3
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e6da:	6978      	ldr	r0, [r7, #20]
 800e6dc:	f7ff fcf0 	bl	800e0c0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e6e0:	bf00      	nop
 800e6e2:	3718      	adds	r7, #24
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	004005ff 	.word	0x004005ff

0800e6ec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f240 523a 	movw	r2, #1338	; 0x53a
 800e702:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f7ff ff31 	bl	800e56c <HAL_SD_GetCardState>
 800e70a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2b06      	cmp	r3, #6
 800e71e:	d002      	beq.n	800e726 <SD_DMATxAbort+0x3a>
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	2b05      	cmp	r3, #5
 800e724:	d10a      	bne.n	800e73c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f002 fdee 	bl	801130c <SDMMC_CmdStopTransfer>
 800e730:	4602      	mov	r2, r0
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e736:	431a      	orrs	r2, r3
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e740:	2b00      	cmp	r3, #0
 800e742:	d103      	bne.n	800e74c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f003 fcff 	bl	8012148 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e74a:	e002      	b.n	800e752 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f7ff fcb7 	bl	800e0c0 <HAL_SD_ErrorCallback>
}
 800e752:	bf00      	nop
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b084      	sub	sp, #16
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e766:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f240 523a 	movw	r2, #1338	; 0x53a
 800e770:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f7ff fefa 	bl	800e56c <HAL_SD_GetCardState>
 800e778:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2200      	movs	r2, #0
 800e786:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	2b06      	cmp	r3, #6
 800e78c:	d002      	beq.n	800e794 <SD_DMARxAbort+0x3a>
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	2b05      	cmp	r3, #5
 800e792:	d10a      	bne.n	800e7aa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4618      	mov	r0, r3
 800e79a:	f002 fdb7 	bl	801130c <SDMMC_CmdStopTransfer>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a4:	431a      	orrs	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d103      	bne.n	800e7ba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f003 fcc8 	bl	8012148 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e7b8:	e002      	b.n	800e7c0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f7ff fc80 	bl	800e0c0 <HAL_SD_ErrorCallback>
}
 800e7c0:	bf00      	nop
 800e7c2:	3710      	adds	r7, #16
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e7c8:	b5b0      	push	{r4, r5, r7, lr}
 800e7ca:	b094      	sub	sp, #80	; 0x50
 800e7cc:	af04      	add	r7, sp, #16
 800e7ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f002 fc69 	bl	80110b0 <SDIO_GetPowerState>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d102      	bne.n	800e7ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e7e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e7e8:	e0b7      	b.n	800e95a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ee:	2b03      	cmp	r3, #3
 800e7f0:	d02f      	beq.n	800e852 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f002 fe92 	bl	8011520 <SDMMC_CmdSendCID>
 800e7fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <SD_InitCard+0x40>
    {
      return errorstate;
 800e804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e806:	e0a8      	b.n	800e95a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2100      	movs	r1, #0
 800e80e:	4618      	mov	r0, r3
 800e810:	f002 fc93 	bl	801113a <SDIO_GetResponse>
 800e814:	4602      	mov	r2, r0
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2104      	movs	r1, #4
 800e820:	4618      	mov	r0, r3
 800e822:	f002 fc8a 	bl	801113a <SDIO_GetResponse>
 800e826:	4602      	mov	r2, r0
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2108      	movs	r1, #8
 800e832:	4618      	mov	r0, r3
 800e834:	f002 fc81 	bl	801113a <SDIO_GetResponse>
 800e838:	4602      	mov	r2, r0
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	210c      	movs	r1, #12
 800e844:	4618      	mov	r0, r3
 800e846:	f002 fc78 	bl	801113a <SDIO_GetResponse>
 800e84a:	4602      	mov	r2, r0
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e856:	2b03      	cmp	r3, #3
 800e858:	d00d      	beq.n	800e876 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f107 020e 	add.w	r2, r7, #14
 800e862:	4611      	mov	r1, r2
 800e864:	4618      	mov	r0, r3
 800e866:	f002 fe98 	bl	801159a <SDMMC_CmdSetRelAdd>
 800e86a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d001      	beq.n	800e876 <SD_InitCard+0xae>
    {
      return errorstate;
 800e872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e874:	e071      	b.n	800e95a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e87a:	2b03      	cmp	r3, #3
 800e87c:	d036      	beq.n	800e8ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e87e:	89fb      	ldrh	r3, [r7, #14]
 800e880:	461a      	mov	r2, r3
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e88e:	041b      	lsls	r3, r3, #16
 800e890:	4619      	mov	r1, r3
 800e892:	4610      	mov	r0, r2
 800e894:	f002 fe62 	bl	801155c <SDMMC_CmdSendCSD>
 800e898:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d001      	beq.n	800e8a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a2:	e05a      	b.n	800e95a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f002 fc45 	bl	801113a <SDIO_GetResponse>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2104      	movs	r1, #4
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f002 fc3c 	bl	801113a <SDIO_GetResponse>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2108      	movs	r1, #8
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f002 fc33 	bl	801113a <SDIO_GetResponse>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	210c      	movs	r1, #12
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f002 fc2a 	bl	801113a <SDIO_GetResponse>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2104      	movs	r1, #4
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f002 fc21 	bl	801113a <SDIO_GetResponse>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	0d1a      	lsrs	r2, r3, #20
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e900:	f107 0310 	add.w	r3, r7, #16
 800e904:	4619      	mov	r1, r3
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7ff fbe4 	bl	800e0d4 <HAL_SD_GetCardCSD>
 800e90c:	4603      	mov	r3, r0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d002      	beq.n	800e918 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e912:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e916:	e020      	b.n	800e95a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6819      	ldr	r1, [r3, #0]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e920:	041b      	lsls	r3, r3, #16
 800e922:	f04f 0400 	mov.w	r4, #0
 800e926:	461a      	mov	r2, r3
 800e928:	4623      	mov	r3, r4
 800e92a:	4608      	mov	r0, r1
 800e92c:	f002 fd10 	bl	8011350 <SDMMC_CmdSelDesel>
 800e930:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e934:	2b00      	cmp	r3, #0
 800e936:	d001      	beq.n	800e93c <SD_InitCard+0x174>
  {
    return errorstate;
 800e938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e93a:	e00e      	b.n	800e95a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681d      	ldr	r5, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	466c      	mov	r4, sp
 800e944:	f103 0210 	add.w	r2, r3, #16
 800e948:	ca07      	ldmia	r2, {r0, r1, r2}
 800e94a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e94e:	3304      	adds	r3, #4
 800e950:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e952:	4628      	mov	r0, r5
 800e954:	f002 fb54 	bl	8011000 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3740      	adds	r7, #64	; 0x40
 800e95e:	46bd      	mov	sp, r7
 800e960:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e964 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b086      	sub	sp, #24
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e96c:	2300      	movs	r3, #0
 800e96e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e970:	2300      	movs	r3, #0
 800e972:	617b      	str	r3, [r7, #20]
 800e974:	2300      	movs	r3, #0
 800e976:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4618      	mov	r0, r3
 800e97e:	f002 fd0a 	bl	8011396 <SDMMC_CmdGoIdleState>
 800e982:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	e072      	b.n	800ea74 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4618      	mov	r0, r3
 800e994:	f002 fd1d 	bl	80113d2 <SDMMC_CmdOperCond>
 800e998:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d00d      	beq.n	800e9bc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f002 fcf3 	bl	8011396 <SDMMC_CmdGoIdleState>
 800e9b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d004      	beq.n	800e9c2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	e05b      	b.n	800ea74 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d137      	bne.n	800ea3a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f002 fd1d 	bl	8011410 <SDMMC_CmdAppCommand>
 800e9d6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d02d      	beq.n	800ea3a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e9de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e9e2:	e047      	b.n	800ea74 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f002 fd10 	bl	8011410 <SDMMC_CmdAppCommand>
 800e9f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <SD_PowerON+0x98>
    {
      return errorstate;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	e03b      	b.n	800ea74 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	491e      	ldr	r1, [pc, #120]	; (800ea7c <SD_PowerON+0x118>)
 800ea02:	4618      	mov	r0, r3
 800ea04:	f002 fd26 	bl	8011454 <SDMMC_CmdAppOperCommand>
 800ea08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d002      	beq.n	800ea16 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea14:	e02e      	b.n	800ea74 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f002 fb8c 	bl	801113a <SDIO_GetResponse>
 800ea22:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	0fdb      	lsrs	r3, r3, #31
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d101      	bne.n	800ea30 <SD_PowerON+0xcc>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e000      	b.n	800ea32 <SD_PowerON+0xce>
 800ea30:	2300      	movs	r3, #0
 800ea32:	613b      	str	r3, [r7, #16]

    count++;
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	3301      	adds	r3, #1
 800ea38:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d802      	bhi.n	800ea4a <SD_PowerON+0xe6>
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d0cc      	beq.n	800e9e4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d902      	bls.n	800ea5a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ea54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea58:	e00c      	b.n	800ea74 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d003      	beq.n	800ea6c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2201      	movs	r2, #1
 800ea68:	645a      	str	r2, [r3, #68]	; 0x44
 800ea6a:	e002      	b.n	800ea72 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3718      	adds	r7, #24
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	c1100000 	.word	0xc1100000

0800ea80 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d102      	bne.n	800ea96 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ea90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea94:	e018      	b.n	800eac8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea9e:	041b      	lsls	r3, r3, #16
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	f002 fd9a 	bl	80115dc <SDMMC_CmdSendStatus>
 800eaa8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	e009      	b.n	800eac8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2100      	movs	r1, #0
 800eaba:	4618      	mov	r0, r3
 800eabc:	f002 fb3d 	bl	801113a <SDIO_GetResponse>
 800eac0:	4602      	mov	r2, r0
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ead8:	2300      	movs	r3, #0
 800eada:	60fb      	str	r3, [r7, #12]
 800eadc:	2300      	movs	r3, #0
 800eade:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2100      	movs	r1, #0
 800eae6:	4618      	mov	r0, r3
 800eae8:	f002 fb27 	bl	801113a <SDIO_GetResponse>
 800eaec:	4603      	mov	r3, r0
 800eaee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eaf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eaf6:	d102      	bne.n	800eafe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eaf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eafc:	e02f      	b.n	800eb5e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eafe:	f107 030c 	add.w	r3, r7, #12
 800eb02:	4619      	mov	r1, r3
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 f879 	bl	800ebfc <SD_FindSCR>
 800eb0a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d001      	beq.n	800eb16 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	e023      	b.n	800eb5e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d01c      	beq.n	800eb5a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb28:	041b      	lsls	r3, r3, #16
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	4610      	mov	r0, r2
 800eb2e:	f002 fc6f 	bl	8011410 <SDMMC_CmdAppCommand>
 800eb32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	e00f      	b.n	800eb5e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2102      	movs	r1, #2
 800eb44:	4618      	mov	r0, r3
 800eb46:	f002 fca8 	bl	801149a <SDMMC_CmdBusWidth>
 800eb4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	e003      	b.n	800eb5e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb56:	2300      	movs	r3, #0
 800eb58:	e001      	b.n	800eb5e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3718      	adds	r7, #24
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b086      	sub	sp, #24
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800eb6e:	2300      	movs	r3, #0
 800eb70:	60fb      	str	r3, [r7, #12]
 800eb72:	2300      	movs	r3, #0
 800eb74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f002 fadc 	bl	801113a <SDIO_GetResponse>
 800eb82:	4603      	mov	r3, r0
 800eb84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb8c:	d102      	bne.n	800eb94 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb92:	e02f      	b.n	800ebf4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb94:	f107 030c 	add.w	r3, r7, #12
 800eb98:	4619      	mov	r1, r3
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 f82e 	bl	800ebfc <SD_FindSCR>
 800eba0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	e023      	b.n	800ebf4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d01c      	beq.n	800ebf0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebbe:	041b      	lsls	r3, r3, #16
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	f002 fc24 	bl	8011410 <SDMMC_CmdAppCommand>
 800ebc8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	e00f      	b.n	800ebf4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2100      	movs	r1, #0
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f002 fc5d 	bl	801149a <SDMMC_CmdBusWidth>
 800ebe0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d001      	beq.n	800ebec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	e003      	b.n	800ebf4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ebec:	2300      	movs	r3, #0
 800ebee:	e001      	b.n	800ebf4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ebf0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3718      	adds	r7, #24
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ebfc:	b590      	push	{r4, r7, lr}
 800ebfe:	b08f      	sub	sp, #60	; 0x3c
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ec06:	f7fa fabd 	bl	8009184 <HAL_GetTick>
 800ec0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ec10:	2300      	movs	r3, #0
 800ec12:	60bb      	str	r3, [r7, #8]
 800ec14:	2300      	movs	r3, #0
 800ec16:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2108      	movs	r1, #8
 800ec22:	4618      	mov	r0, r3
 800ec24:	f002 fac8 	bl	80111b8 <SDMMC_CmdBlockLength>
 800ec28:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d001      	beq.n	800ec34 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ec30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec32:	e0a9      	b.n	800ed88 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec3c:	041b      	lsls	r3, r3, #16
 800ec3e:	4619      	mov	r1, r3
 800ec40:	4610      	mov	r0, r2
 800ec42:	f002 fbe5 	bl	8011410 <SDMMC_CmdAppCommand>
 800ec46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d001      	beq.n	800ec52 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ec4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec50:	e09a      	b.n	800ed88 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ec52:	f04f 33ff 	mov.w	r3, #4294967295
 800ec56:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ec58:	2308      	movs	r3, #8
 800ec5a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ec5c:	2330      	movs	r3, #48	; 0x30
 800ec5e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ec60:	2302      	movs	r3, #2
 800ec62:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ec64:	2300      	movs	r3, #0
 800ec66:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f107 0210 	add.w	r2, r7, #16
 800ec74:	4611      	mov	r1, r2
 800ec76:	4618      	mov	r0, r3
 800ec78:	f002 fa72 	bl	8011160 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f002 fc2c 	bl	80114de <SDMMC_CmdSendSCR>
 800ec86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d022      	beq.n	800ecd4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec90:	e07a      	b.n	800ed88 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00e      	beq.n	800ecbe <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6819      	ldr	r1, [r3, #0]
 800eca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	f107 0208 	add.w	r2, r7, #8
 800ecac:	18d4      	adds	r4, r2, r3
 800ecae:	4608      	mov	r0, r1
 800ecb0:	f002 f9d1 	bl	8011056 <SDIO_ReadFIFO>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	6023      	str	r3, [r4, #0]
      index++;
 800ecb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecba:	3301      	adds	r3, #1
 800ecbc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ecbe:	f7fa fa61 	bl	8009184 <HAL_GetTick>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eccc:	d102      	bne.n	800ecd4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ecce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ecd2:	e059      	b.n	800ed88 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecda:	f240 432a 	movw	r3, #1066	; 0x42a
 800ecde:	4013      	ands	r3, r2
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d0d6      	beq.n	800ec92 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecea:	f003 0308 	and.w	r3, r3, #8
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d005      	beq.n	800ecfe <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2208      	movs	r2, #8
 800ecf8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ecfa:	2308      	movs	r3, #8
 800ecfc:	e044      	b.n	800ed88 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed04:	f003 0302 	and.w	r3, r3, #2
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d005      	beq.n	800ed18 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2202      	movs	r2, #2
 800ed12:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ed14:	2302      	movs	r3, #2
 800ed16:	e037      	b.n	800ed88 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed1e:	f003 0320 	and.w	r3, r3, #32
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d005      	beq.n	800ed32 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2220      	movs	r2, #32
 800ed2c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ed2e:	2320      	movs	r3, #32
 800ed30:	e02a      	b.n	800ed88 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f240 523a 	movw	r2, #1338	; 0x53a
 800ed3a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	061a      	lsls	r2, r3, #24
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	021b      	lsls	r3, r3, #8
 800ed44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed48:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	0a1b      	lsrs	r3, r3, #8
 800ed4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ed52:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	0e1b      	lsrs	r3, r3, #24
 800ed58:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ed5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5c:	601a      	str	r2, [r3, #0]
    scr++;
 800ed5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed60:	3304      	adds	r3, #4
 800ed62:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	061a      	lsls	r2, r3, #24
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	021b      	lsls	r3, r3, #8
 800ed6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed70:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	0a1b      	lsrs	r3, r3, #8
 800ed76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ed7a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	0e1b      	lsrs	r3, r3, #24
 800ed80:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed84:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ed86:	2300      	movs	r3, #0
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	373c      	adds	r7, #60	; 0x3c
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd90      	pop	{r4, r7, pc}

0800ed90 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed9c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d03f      	beq.n	800ee2a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800edaa:	2300      	movs	r3, #0
 800edac:	617b      	str	r3, [r7, #20]
 800edae:	e033      	b.n	800ee18 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f002 f94e 	bl	8011056 <SDIO_ReadFIFO>
 800edba:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	3301      	adds	r3, #1
 800edc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	3b01      	subs	r3, #1
 800edce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	0a1b      	lsrs	r3, r3, #8
 800edd4:	b2da      	uxtb	r2, r3
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	3301      	adds	r3, #1
 800edde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	3b01      	subs	r3, #1
 800ede4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	0c1b      	lsrs	r3, r3, #16
 800edea:	b2da      	uxtb	r2, r3
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	3301      	adds	r3, #1
 800edf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	3b01      	subs	r3, #1
 800edfa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	0e1b      	lsrs	r3, r3, #24
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	3301      	adds	r3, #1
 800ee16:	617b      	str	r3, [r7, #20]
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	2b07      	cmp	r3, #7
 800ee1c:	d9c8      	bls.n	800edb0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68fa      	ldr	r2, [r7, #12]
 800ee22:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	693a      	ldr	r2, [r7, #16]
 800ee28:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ee2a:	bf00      	nop
 800ee2c:	3718      	adds	r7, #24
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}

0800ee32 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b086      	sub	sp, #24
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee44:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d043      	beq.n	800eed4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	617b      	str	r3, [r7, #20]
 800ee50:	e037      	b.n	800eec2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	3b01      	subs	r3, #1
 800ee62:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	021a      	lsls	r2, r3, #8
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	3301      	adds	r3, #1
 800ee74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	3b01      	subs	r3, #1
 800ee7a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	041a      	lsls	r2, r3, #16
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	4313      	orrs	r3, r2
 800ee86:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	3b01      	subs	r3, #1
 800ee92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	061a      	lsls	r2, r3, #24
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	3301      	adds	r3, #1
 800eea4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f107 0208 	add.w	r2, r7, #8
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f002 f8da 	bl	8011070 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	3301      	adds	r3, #1
 800eec0:	617b      	str	r3, [r7, #20]
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	2b07      	cmp	r3, #7
 800eec6:	d9c4      	bls.n	800ee52 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	693a      	ldr	r2, [r7, #16]
 800eed2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800eed4:	bf00      	nop
 800eed6:	3718      	adds	r7, #24
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d101      	bne.n	800eeee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	e01d      	b.n	800ef2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d106      	bne.n	800ef08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f7f9 fcdc 	bl	80088c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2202      	movs	r2, #2
 800ef0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	3304      	adds	r3, #4
 800ef18:	4619      	mov	r1, r3
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	f000 fc7a 	bl	800f814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3708      	adds	r7, #8
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef32:	b480      	push	{r7}
 800ef34:	b085      	sub	sp, #20
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	68da      	ldr	r2, [r3, #12]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f042 0201 	orr.w	r2, r2, #1
 800ef48:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	f003 0307 	and.w	r3, r3, #7
 800ef54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2b06      	cmp	r3, #6
 800ef5a:	d007      	beq.n	800ef6c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f042 0201 	orr.w	r2, r2, #1
 800ef6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef6c:	2300      	movs	r3, #0
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3714      	adds	r7, #20
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr

0800ef7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b082      	sub	sp, #8
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d101      	bne.n	800ef8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e01d      	b.n	800efc8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d106      	bne.n	800efa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 f815 	bl	800efd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2202      	movs	r2, #2
 800efaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	3304      	adds	r3, #4
 800efb6:	4619      	mov	r1, r3
 800efb8:	4610      	mov	r0, r2
 800efba:	f000 fc2b 	bl	800f814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2201      	movs	r2, #1
 800efc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e01d      	b.n	800f032 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800effc:	b2db      	uxtb	r3, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d106      	bne.n	800f010 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7f9 fcba 	bl	8008984 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2202      	movs	r2, #2
 800f014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	3304      	adds	r3, #4
 800f020:	4619      	mov	r1, r3
 800f022:	4610      	mov	r0, r2
 800f024:	f000 fbf6 	bl	800f814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
	...

0800f03c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	2b0c      	cmp	r3, #12
 800f04a:	d841      	bhi.n	800f0d0 <HAL_TIM_IC_Start_IT+0x94>
 800f04c:	a201      	add	r2, pc, #4	; (adr r2, 800f054 <HAL_TIM_IC_Start_IT+0x18>)
 800f04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f052:	bf00      	nop
 800f054:	0800f089 	.word	0x0800f089
 800f058:	0800f0d1 	.word	0x0800f0d1
 800f05c:	0800f0d1 	.word	0x0800f0d1
 800f060:	0800f0d1 	.word	0x0800f0d1
 800f064:	0800f09b 	.word	0x0800f09b
 800f068:	0800f0d1 	.word	0x0800f0d1
 800f06c:	0800f0d1 	.word	0x0800f0d1
 800f070:	0800f0d1 	.word	0x0800f0d1
 800f074:	0800f0ad 	.word	0x0800f0ad
 800f078:	0800f0d1 	.word	0x0800f0d1
 800f07c:	0800f0d1 	.word	0x0800f0d1
 800f080:	0800f0d1 	.word	0x0800f0d1
 800f084:	0800f0bf 	.word	0x0800f0bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68da      	ldr	r2, [r3, #12]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f042 0202 	orr.w	r2, r2, #2
 800f096:	60da      	str	r2, [r3, #12]
      break;
 800f098:	e01b      	b.n	800f0d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68da      	ldr	r2, [r3, #12]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f042 0204 	orr.w	r2, r2, #4
 800f0a8:	60da      	str	r2, [r3, #12]
      break;
 800f0aa:	e012      	b.n	800f0d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	68da      	ldr	r2, [r3, #12]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f042 0208 	orr.w	r2, r2, #8
 800f0ba:	60da      	str	r2, [r3, #12]
      break;
 800f0bc:	e009      	b.n	800f0d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	68da      	ldr	r2, [r3, #12]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f042 0210 	orr.w	r2, r2, #16
 800f0cc:	60da      	str	r2, [r3, #12]
      break;
 800f0ce:	e000      	b.n	800f0d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800f0d0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	6839      	ldr	r1, [r7, #0]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 ffae 	bl	801003c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	f003 0307 	and.w	r3, r3, #7
 800f0ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2b06      	cmp	r3, #6
 800f0f0:	d007      	beq.n	800f102 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f042 0201 	orr.w	r2, r2, #1
 800f100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	f003 0302 	and.w	r3, r3, #2
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d122      	bne.n	800f168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	f003 0302 	and.w	r3, r3, #2
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	d11b      	bne.n	800f168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f06f 0202 	mvn.w	r2, #2
 800f138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2201      	movs	r2, #1
 800f13e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	699b      	ldr	r3, [r3, #24]
 800f146:	f003 0303 	and.w	r3, r3, #3
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d003      	beq.n	800f156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f7f7 fdf8 	bl	8006d44 <HAL_TIM_IC_CaptureCallback>
 800f154:	e005      	b.n	800f162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 fb3e 	bl	800f7d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 fb45 	bl	800f7ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	691b      	ldr	r3, [r3, #16]
 800f16e:	f003 0304 	and.w	r3, r3, #4
 800f172:	2b04      	cmp	r3, #4
 800f174:	d122      	bne.n	800f1bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	f003 0304 	and.w	r3, r3, #4
 800f180:	2b04      	cmp	r3, #4
 800f182:	d11b      	bne.n	800f1bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f06f 0204 	mvn.w	r2, #4
 800f18c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2202      	movs	r2, #2
 800f192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	699b      	ldr	r3, [r3, #24]
 800f19a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d003      	beq.n	800f1aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7f7 fdce 	bl	8006d44 <HAL_TIM_IC_CaptureCallback>
 800f1a8:	e005      	b.n	800f1b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 fb14 	bl	800f7d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 fb1b 	bl	800f7ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	f003 0308 	and.w	r3, r3, #8
 800f1c6:	2b08      	cmp	r3, #8
 800f1c8:	d122      	bne.n	800f210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	f003 0308 	and.w	r3, r3, #8
 800f1d4:	2b08      	cmp	r3, #8
 800f1d6:	d11b      	bne.n	800f210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f06f 0208 	mvn.w	r2, #8
 800f1e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2204      	movs	r2, #4
 800f1e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	69db      	ldr	r3, [r3, #28]
 800f1ee:	f003 0303 	and.w	r3, r3, #3
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d003      	beq.n	800f1fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7f7 fda4 	bl	8006d44 <HAL_TIM_IC_CaptureCallback>
 800f1fc:	e005      	b.n	800f20a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 faea 	bl	800f7d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 faf1 	bl	800f7ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	691b      	ldr	r3, [r3, #16]
 800f216:	f003 0310 	and.w	r3, r3, #16
 800f21a:	2b10      	cmp	r3, #16
 800f21c:	d122      	bne.n	800f264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	f003 0310 	and.w	r3, r3, #16
 800f228:	2b10      	cmp	r3, #16
 800f22a:	d11b      	bne.n	800f264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f06f 0210 	mvn.w	r2, #16
 800f234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2208      	movs	r2, #8
 800f23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	69db      	ldr	r3, [r3, #28]
 800f242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f246:	2b00      	cmp	r3, #0
 800f248:	d003      	beq.n	800f252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7f7 fd7a 	bl	8006d44 <HAL_TIM_IC_CaptureCallback>
 800f250:	e005      	b.n	800f25e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 fac0 	bl	800f7d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 fac7 	bl	800f7ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	691b      	ldr	r3, [r3, #16]
 800f26a:	f003 0301 	and.w	r3, r3, #1
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d10e      	bne.n	800f290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	f003 0301 	and.w	r3, r3, #1
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d107      	bne.n	800f290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f06f 0201 	mvn.w	r2, #1
 800f288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f7f8 fdca 	bl	8007e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	691b      	ldr	r3, [r3, #16]
 800f296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f29a:	2b80      	cmp	r3, #128	; 0x80
 800f29c:	d10e      	bne.n	800f2bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2a8:	2b80      	cmp	r3, #128	; 0x80
 800f2aa:	d107      	bne.n	800f2bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 ff6c 	bl	8010194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	691b      	ldr	r3, [r3, #16]
 800f2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c6:	2b40      	cmp	r3, #64	; 0x40
 800f2c8:	d10e      	bne.n	800f2e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2d4:	2b40      	cmp	r3, #64	; 0x40
 800f2d6:	d107      	bne.n	800f2e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f2e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 fa8c 	bl	800f800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	691b      	ldr	r3, [r3, #16]
 800f2ee:	f003 0320 	and.w	r3, r3, #32
 800f2f2:	2b20      	cmp	r3, #32
 800f2f4:	d10e      	bne.n	800f314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	f003 0320 	and.w	r3, r3, #32
 800f300:	2b20      	cmp	r3, #32
 800f302:	d107      	bne.n	800f314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f06f 0220 	mvn.w	r2, #32
 800f30c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 ff36 	bl	8010180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f314:	bf00      	nop
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d101      	bne.n	800f336 <HAL_TIM_IC_ConfigChannel+0x1a>
 800f332:	2302      	movs	r3, #2
 800f334:	e08a      	b.n	800f44c <HAL_TIM_IC_ConfigChannel+0x130>
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2201      	movs	r2, #1
 800f33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2202      	movs	r2, #2
 800f342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d11b      	bne.n	800f384 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	6818      	ldr	r0, [r3, #0]
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	6819      	ldr	r1, [r3, #0]
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	685a      	ldr	r2, [r3, #4]
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	f000 fcaa 	bl	800fcb4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	699a      	ldr	r2, [r3, #24]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f022 020c 	bic.w	r2, r2, #12
 800f36e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	6999      	ldr	r1, [r3, #24]
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	689a      	ldr	r2, [r3, #8]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	430a      	orrs	r2, r1
 800f380:	619a      	str	r2, [r3, #24]
 800f382:	e05a      	b.n	800f43a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2b04      	cmp	r3, #4
 800f388:	d11c      	bne.n	800f3c4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6818      	ldr	r0, [r3, #0]
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	6819      	ldr	r1, [r3, #0]
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	f000 fd2e 	bl	800fdfa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	699a      	ldr	r2, [r3, #24]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f3ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	6999      	ldr	r1, [r3, #24]
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	021a      	lsls	r2, r3, #8
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	430a      	orrs	r2, r1
 800f3c0:	619a      	str	r2, [r3, #24]
 800f3c2:	e03a      	b.n	800f43a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2b08      	cmp	r3, #8
 800f3c8:	d11b      	bne.n	800f402 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6818      	ldr	r0, [r3, #0]
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	6819      	ldr	r1, [r3, #0]
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	685a      	ldr	r2, [r3, #4]
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	f000 fd7b 	bl	800fed4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	69da      	ldr	r2, [r3, #28]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f022 020c 	bic.w	r2, r2, #12
 800f3ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	69d9      	ldr	r1, [r3, #28]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	689a      	ldr	r2, [r3, #8]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	430a      	orrs	r2, r1
 800f3fe:	61da      	str	r2, [r3, #28]
 800f400:	e01b      	b.n	800f43a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	6818      	ldr	r0, [r3, #0]
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	6819      	ldr	r1, [r3, #0]
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	685a      	ldr	r2, [r3, #4]
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	f000 fd9b 	bl	800ff4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	69da      	ldr	r2, [r3, #28]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f424:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	69d9      	ldr	r1, [r3, #28]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	021a      	lsls	r2, r3, #8
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	430a      	orrs	r2, r1
 800f438:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2201      	movs	r2, #1
 800f43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2200      	movs	r2, #0
 800f446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f466:	2b01      	cmp	r3, #1
 800f468:	d101      	bne.n	800f46e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f46a:	2302      	movs	r3, #2
 800f46c:	e0b4      	b.n	800f5d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2201      	movs	r2, #1
 800f472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2202      	movs	r2, #2
 800f47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2b0c      	cmp	r3, #12
 800f482:	f200 809f 	bhi.w	800f5c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f486:	a201      	add	r2, pc, #4	; (adr r2, 800f48c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48c:	0800f4c1 	.word	0x0800f4c1
 800f490:	0800f5c5 	.word	0x0800f5c5
 800f494:	0800f5c5 	.word	0x0800f5c5
 800f498:	0800f5c5 	.word	0x0800f5c5
 800f49c:	0800f501 	.word	0x0800f501
 800f4a0:	0800f5c5 	.word	0x0800f5c5
 800f4a4:	0800f5c5 	.word	0x0800f5c5
 800f4a8:	0800f5c5 	.word	0x0800f5c5
 800f4ac:	0800f543 	.word	0x0800f543
 800f4b0:	0800f5c5 	.word	0x0800f5c5
 800f4b4:	0800f5c5 	.word	0x0800f5c5
 800f4b8:	0800f5c5 	.word	0x0800f5c5
 800f4bc:	0800f583 	.word	0x0800f583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68b9      	ldr	r1, [r7, #8]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f000 fa44 	bl	800f954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	699a      	ldr	r2, [r3, #24]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f042 0208 	orr.w	r2, r2, #8
 800f4da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	699a      	ldr	r2, [r3, #24]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f022 0204 	bic.w	r2, r2, #4
 800f4ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6999      	ldr	r1, [r3, #24]
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	691a      	ldr	r2, [r3, #16]
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	430a      	orrs	r2, r1
 800f4fc:	619a      	str	r2, [r3, #24]
      break;
 800f4fe:	e062      	b.n	800f5c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	68b9      	ldr	r1, [r7, #8]
 800f506:	4618      	mov	r0, r3
 800f508:	f000 fa94 	bl	800fa34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	699a      	ldr	r2, [r3, #24]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f51a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	699a      	ldr	r2, [r3, #24]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f52a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	6999      	ldr	r1, [r3, #24]
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	691b      	ldr	r3, [r3, #16]
 800f536:	021a      	lsls	r2, r3, #8
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	430a      	orrs	r2, r1
 800f53e:	619a      	str	r2, [r3, #24]
      break;
 800f540:	e041      	b.n	800f5c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	68b9      	ldr	r1, [r7, #8]
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 fae9 	bl	800fb20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	69da      	ldr	r2, [r3, #28]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f042 0208 	orr.w	r2, r2, #8
 800f55c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	69da      	ldr	r2, [r3, #28]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f022 0204 	bic.w	r2, r2, #4
 800f56c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	69d9      	ldr	r1, [r3, #28]
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	691a      	ldr	r2, [r3, #16]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	430a      	orrs	r2, r1
 800f57e:	61da      	str	r2, [r3, #28]
      break;
 800f580:	e021      	b.n	800f5c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 fb3d 	bl	800fc08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	69da      	ldr	r2, [r3, #28]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f59c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	69da      	ldr	r2, [r3, #28]
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	69d9      	ldr	r1, [r3, #28]
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	021a      	lsls	r2, r3, #8
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	430a      	orrs	r2, r1
 800f5c0:	61da      	str	r2, [r3, #28]
      break;
 800f5c2:	e000      	b.n	800f5c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f5c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3710      	adds	r7, #16
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d101      	bne.n	800f5f8 <HAL_TIM_ConfigClockSource+0x18>
 800f5f4:	2302      	movs	r3, #2
 800f5f6:	e0a6      	b.n	800f746 <HAL_TIM_ConfigClockSource+0x166>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2202      	movs	r2, #2
 800f604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f61e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b40      	cmp	r3, #64	; 0x40
 800f62e:	d067      	beq.n	800f700 <HAL_TIM_ConfigClockSource+0x120>
 800f630:	2b40      	cmp	r3, #64	; 0x40
 800f632:	d80b      	bhi.n	800f64c <HAL_TIM_ConfigClockSource+0x6c>
 800f634:	2b10      	cmp	r3, #16
 800f636:	d073      	beq.n	800f720 <HAL_TIM_ConfigClockSource+0x140>
 800f638:	2b10      	cmp	r3, #16
 800f63a:	d802      	bhi.n	800f642 <HAL_TIM_ConfigClockSource+0x62>
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d06f      	beq.n	800f720 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800f640:	e078      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f642:	2b20      	cmp	r3, #32
 800f644:	d06c      	beq.n	800f720 <HAL_TIM_ConfigClockSource+0x140>
 800f646:	2b30      	cmp	r3, #48	; 0x30
 800f648:	d06a      	beq.n	800f720 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800f64a:	e073      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f64c:	2b70      	cmp	r3, #112	; 0x70
 800f64e:	d00d      	beq.n	800f66c <HAL_TIM_ConfigClockSource+0x8c>
 800f650:	2b70      	cmp	r3, #112	; 0x70
 800f652:	d804      	bhi.n	800f65e <HAL_TIM_ConfigClockSource+0x7e>
 800f654:	2b50      	cmp	r3, #80	; 0x50
 800f656:	d033      	beq.n	800f6c0 <HAL_TIM_ConfigClockSource+0xe0>
 800f658:	2b60      	cmp	r3, #96	; 0x60
 800f65a:	d041      	beq.n	800f6e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800f65c:	e06a      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f662:	d066      	beq.n	800f732 <HAL_TIM_ConfigClockSource+0x152>
 800f664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f668:	d017      	beq.n	800f69a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800f66a:	e063      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6818      	ldr	r0, [r3, #0]
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	6899      	ldr	r1, [r3, #8]
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	685a      	ldr	r2, [r3, #4]
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	f000 fcbe 	bl	800fffc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f68e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	609a      	str	r2, [r3, #8]
      break;
 800f698:	e04c      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6818      	ldr	r0, [r3, #0]
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	6899      	ldr	r1, [r3, #8]
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	685a      	ldr	r2, [r3, #4]
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	f000 fca7 	bl	800fffc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	689a      	ldr	r2, [r3, #8]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f6bc:	609a      	str	r2, [r3, #8]
      break;
 800f6be:	e039      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6818      	ldr	r0, [r3, #0]
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	6859      	ldr	r1, [r3, #4]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	f000 fb65 	bl	800fd9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	2150      	movs	r1, #80	; 0x50
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 fc74 	bl	800ffc6 <TIM_ITRx_SetConfig>
      break;
 800f6de:	e029      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6818      	ldr	r0, [r3, #0]
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	6859      	ldr	r1, [r3, #4]
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	f000 fbc1 	bl	800fe74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2160      	movs	r1, #96	; 0x60
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f000 fc64 	bl	800ffc6 <TIM_ITRx_SetConfig>
      break;
 800f6fe:	e019      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6818      	ldr	r0, [r3, #0]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	6859      	ldr	r1, [r3, #4]
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	461a      	mov	r2, r3
 800f70e:	f000 fb45 	bl	800fd9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	2140      	movs	r1, #64	; 0x40
 800f718:	4618      	mov	r0, r3
 800f71a:	f000 fc54 	bl	800ffc6 <TIM_ITRx_SetConfig>
      break;
 800f71e:	e009      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4619      	mov	r1, r3
 800f72a:	4610      	mov	r0, r2
 800f72c:	f000 fc4b 	bl	800ffc6 <TIM_ITRx_SetConfig>
      break;
 800f730:	e000      	b.n	800f734 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800f732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2201      	movs	r2, #1
 800f738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f744:	2300      	movs	r3, #0
}
 800f746:	4618      	mov	r0, r3
 800f748:	3710      	adds	r7, #16
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
	...

0800f750 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800f75a:	2300      	movs	r3, #0
 800f75c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	2b0c      	cmp	r3, #12
 800f762:	d831      	bhi.n	800f7c8 <HAL_TIM_ReadCapturedValue+0x78>
 800f764:	a201      	add	r2, pc, #4	; (adr r2, 800f76c <HAL_TIM_ReadCapturedValue+0x1c>)
 800f766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f76a:	bf00      	nop
 800f76c:	0800f7a1 	.word	0x0800f7a1
 800f770:	0800f7c9 	.word	0x0800f7c9
 800f774:	0800f7c9 	.word	0x0800f7c9
 800f778:	0800f7c9 	.word	0x0800f7c9
 800f77c:	0800f7ab 	.word	0x0800f7ab
 800f780:	0800f7c9 	.word	0x0800f7c9
 800f784:	0800f7c9 	.word	0x0800f7c9
 800f788:	0800f7c9 	.word	0x0800f7c9
 800f78c:	0800f7b5 	.word	0x0800f7b5
 800f790:	0800f7c9 	.word	0x0800f7c9
 800f794:	0800f7c9 	.word	0x0800f7c9
 800f798:	0800f7c9 	.word	0x0800f7c9
 800f79c:	0800f7bf 	.word	0x0800f7bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7a6:	60fb      	str	r3, [r7, #12]

      break;
 800f7a8:	e00f      	b.n	800f7ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7b0:	60fb      	str	r3, [r7, #12]

      break;
 800f7b2:	e00a      	b.n	800f7ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7ba:	60fb      	str	r3, [r7, #12]

      break;
 800f7bc:	e005      	b.n	800f7ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7c4:	60fb      	str	r3, [r7, #12]

      break;
 800f7c6:	e000      	b.n	800f7ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800f7c8:	bf00      	nop
  }

  return tmpreg;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3714      	adds	r7, #20
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f7e0:	bf00      	nop
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f7f4:	bf00      	nop
 800f7f6:	370c      	adds	r7, #12
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f808:	bf00      	nop
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f814:	b480      	push	{r7}
 800f816:	b085      	sub	sp, #20
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a40      	ldr	r2, [pc, #256]	; (800f928 <TIM_Base_SetConfig+0x114>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d013      	beq.n	800f854 <TIM_Base_SetConfig+0x40>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f832:	d00f      	beq.n	800f854 <TIM_Base_SetConfig+0x40>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	4a3d      	ldr	r2, [pc, #244]	; (800f92c <TIM_Base_SetConfig+0x118>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d00b      	beq.n	800f854 <TIM_Base_SetConfig+0x40>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	4a3c      	ldr	r2, [pc, #240]	; (800f930 <TIM_Base_SetConfig+0x11c>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d007      	beq.n	800f854 <TIM_Base_SetConfig+0x40>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4a3b      	ldr	r2, [pc, #236]	; (800f934 <TIM_Base_SetConfig+0x120>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d003      	beq.n	800f854 <TIM_Base_SetConfig+0x40>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	4a3a      	ldr	r2, [pc, #232]	; (800f938 <TIM_Base_SetConfig+0x124>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d108      	bne.n	800f866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f85a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	4313      	orrs	r3, r2
 800f864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	4a2f      	ldr	r2, [pc, #188]	; (800f928 <TIM_Base_SetConfig+0x114>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d02b      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f874:	d027      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4a2c      	ldr	r2, [pc, #176]	; (800f92c <TIM_Base_SetConfig+0x118>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d023      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	4a2b      	ldr	r2, [pc, #172]	; (800f930 <TIM_Base_SetConfig+0x11c>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d01f      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4a2a      	ldr	r2, [pc, #168]	; (800f934 <TIM_Base_SetConfig+0x120>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d01b      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4a29      	ldr	r2, [pc, #164]	; (800f938 <TIM_Base_SetConfig+0x124>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d017      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4a28      	ldr	r2, [pc, #160]	; (800f93c <TIM_Base_SetConfig+0x128>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d013      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4a27      	ldr	r2, [pc, #156]	; (800f940 <TIM_Base_SetConfig+0x12c>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d00f      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4a26      	ldr	r2, [pc, #152]	; (800f944 <TIM_Base_SetConfig+0x130>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d00b      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a25      	ldr	r2, [pc, #148]	; (800f948 <TIM_Base_SetConfig+0x134>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d007      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a24      	ldr	r2, [pc, #144]	; (800f94c <TIM_Base_SetConfig+0x138>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d003      	beq.n	800f8c6 <TIM_Base_SetConfig+0xb2>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a23      	ldr	r2, [pc, #140]	; (800f950 <TIM_Base_SetConfig+0x13c>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d108      	bne.n	800f8d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	68db      	ldr	r3, [r3, #12]
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	695b      	ldr	r3, [r3, #20]
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	689a      	ldr	r2, [r3, #8]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4a0a      	ldr	r2, [pc, #40]	; (800f928 <TIM_Base_SetConfig+0x114>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d003      	beq.n	800f90c <TIM_Base_SetConfig+0xf8>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4a0c      	ldr	r2, [pc, #48]	; (800f938 <TIM_Base_SetConfig+0x124>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d103      	bne.n	800f914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	691a      	ldr	r2, [r3, #16]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2201      	movs	r2, #1
 800f918:	615a      	str	r2, [r3, #20]
}
 800f91a:	bf00      	nop
 800f91c:	3714      	adds	r7, #20
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr
 800f926:	bf00      	nop
 800f928:	40010000 	.word	0x40010000
 800f92c:	40000400 	.word	0x40000400
 800f930:	40000800 	.word	0x40000800
 800f934:	40000c00 	.word	0x40000c00
 800f938:	40010400 	.word	0x40010400
 800f93c:	40014000 	.word	0x40014000
 800f940:	40014400 	.word	0x40014400
 800f944:	40014800 	.word	0x40014800
 800f948:	40001800 	.word	0x40001800
 800f94c:	40001c00 	.word	0x40001c00
 800f950:	40002000 	.word	0x40002000

0800f954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f954:	b480      	push	{r7}
 800f956:	b087      	sub	sp, #28
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6a1b      	ldr	r3, [r3, #32]
 800f962:	f023 0201 	bic.w	r2, r3, #1
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a1b      	ldr	r3, [r3, #32]
 800f96e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	699b      	ldr	r3, [r3, #24]
 800f97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f023 0303 	bic.w	r3, r3, #3
 800f98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	4313      	orrs	r3, r2
 800f994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	f023 0302 	bic.w	r3, r3, #2
 800f99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	697a      	ldr	r2, [r7, #20]
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	4a20      	ldr	r2, [pc, #128]	; (800fa2c <TIM_OC1_SetConfig+0xd8>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d003      	beq.n	800f9b8 <TIM_OC1_SetConfig+0x64>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	4a1f      	ldr	r2, [pc, #124]	; (800fa30 <TIM_OC1_SetConfig+0xdc>)
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d10c      	bne.n	800f9d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	f023 0308 	bic.w	r3, r3, #8
 800f9be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	697a      	ldr	r2, [r7, #20]
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	f023 0304 	bic.w	r3, r3, #4
 800f9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a15      	ldr	r2, [pc, #84]	; (800fa2c <TIM_OC1_SetConfig+0xd8>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d003      	beq.n	800f9e2 <TIM_OC1_SetConfig+0x8e>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a14      	ldr	r2, [pc, #80]	; (800fa30 <TIM_OC1_SetConfig+0xdc>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d111      	bne.n	800fa06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	695b      	ldr	r3, [r3, #20]
 800f9f6:	693a      	ldr	r2, [r7, #16]
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	693a      	ldr	r2, [r7, #16]
 800fa02:	4313      	orrs	r3, r2
 800fa04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	693a      	ldr	r2, [r7, #16]
 800fa0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	68fa      	ldr	r2, [r7, #12]
 800fa10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	685a      	ldr	r2, [r3, #4]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	697a      	ldr	r2, [r7, #20]
 800fa1e:	621a      	str	r2, [r3, #32]
}
 800fa20:	bf00      	nop
 800fa22:	371c      	adds	r7, #28
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	40010000 	.word	0x40010000
 800fa30:	40010400 	.word	0x40010400

0800fa34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b087      	sub	sp, #28
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6a1b      	ldr	r3, [r3, #32]
 800fa42:	f023 0210 	bic.w	r2, r3, #16
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	699b      	ldr	r3, [r3, #24]
 800fa5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	021b      	lsls	r3, r3, #8
 800fa72:	68fa      	ldr	r2, [r7, #12]
 800fa74:	4313      	orrs	r3, r2
 800fa76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	f023 0320 	bic.w	r3, r3, #32
 800fa7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	011b      	lsls	r3, r3, #4
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4a22      	ldr	r2, [pc, #136]	; (800fb18 <TIM_OC2_SetConfig+0xe4>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d003      	beq.n	800fa9c <TIM_OC2_SetConfig+0x68>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	4a21      	ldr	r2, [pc, #132]	; (800fb1c <TIM_OC2_SetConfig+0xe8>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d10d      	bne.n	800fab8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	011b      	lsls	r3, r3, #4
 800faaa:	697a      	ldr	r2, [r7, #20]
 800faac:	4313      	orrs	r3, r2
 800faae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	4a17      	ldr	r2, [pc, #92]	; (800fb18 <TIM_OC2_SetConfig+0xe4>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d003      	beq.n	800fac8 <TIM_OC2_SetConfig+0x94>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	4a16      	ldr	r2, [pc, #88]	; (800fb1c <TIM_OC2_SetConfig+0xe8>)
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d113      	bne.n	800faf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800face:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	695b      	ldr	r3, [r3, #20]
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	693a      	ldr	r2, [r7, #16]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	699b      	ldr	r3, [r3, #24]
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	693a      	ldr	r2, [r7, #16]
 800faec:	4313      	orrs	r3, r2
 800faee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	693a      	ldr	r2, [r7, #16]
 800faf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	697a      	ldr	r2, [r7, #20]
 800fb08:	621a      	str	r2, [r3, #32]
}
 800fb0a:	bf00      	nop
 800fb0c:	371c      	adds	r7, #28
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	40010000 	.word	0x40010000
 800fb1c:	40010400 	.word	0x40010400

0800fb20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b087      	sub	sp, #28
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6a1b      	ldr	r3, [r3, #32]
 800fb2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6a1b      	ldr	r3, [r3, #32]
 800fb3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	69db      	ldr	r3, [r3, #28]
 800fb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f023 0303 	bic.w	r3, r3, #3
 800fb56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	689b      	ldr	r3, [r3, #8]
 800fb6e:	021b      	lsls	r3, r3, #8
 800fb70:	697a      	ldr	r2, [r7, #20]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4a21      	ldr	r2, [pc, #132]	; (800fc00 <TIM_OC3_SetConfig+0xe0>)
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d003      	beq.n	800fb86 <TIM_OC3_SetConfig+0x66>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	4a20      	ldr	r2, [pc, #128]	; (800fc04 <TIM_OC3_SetConfig+0xe4>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d10d      	bne.n	800fba2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	021b      	lsls	r3, r3, #8
 800fb94:	697a      	ldr	r2, [r7, #20]
 800fb96:	4313      	orrs	r3, r2
 800fb98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4a16      	ldr	r2, [pc, #88]	; (800fc00 <TIM_OC3_SetConfig+0xe0>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d003      	beq.n	800fbb2 <TIM_OC3_SetConfig+0x92>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	4a15      	ldr	r2, [pc, #84]	; (800fc04 <TIM_OC3_SetConfig+0xe4>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d113      	bne.n	800fbda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	695b      	ldr	r3, [r3, #20]
 800fbc6:	011b      	lsls	r3, r3, #4
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	699b      	ldr	r3, [r3, #24]
 800fbd2:	011b      	lsls	r3, r3, #4
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	693a      	ldr	r2, [r7, #16]
 800fbde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	68fa      	ldr	r2, [r7, #12]
 800fbe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	685a      	ldr	r2, [r3, #4]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	697a      	ldr	r2, [r7, #20]
 800fbf2:	621a      	str	r2, [r3, #32]
}
 800fbf4:	bf00      	nop
 800fbf6:	371c      	adds	r7, #28
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	40010000 	.word	0x40010000
 800fc04:	40010400 	.word	0x40010400

0800fc08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b087      	sub	sp, #28
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6a1b      	ldr	r3, [r3, #32]
 800fc22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	69db      	ldr	r3, [r3, #28]
 800fc2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	021b      	lsls	r3, r3, #8
 800fc46:	68fa      	ldr	r2, [r7, #12]
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	031b      	lsls	r3, r3, #12
 800fc5a:	693a      	ldr	r2, [r7, #16]
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4a12      	ldr	r2, [pc, #72]	; (800fcac <TIM_OC4_SetConfig+0xa4>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d003      	beq.n	800fc70 <TIM_OC4_SetConfig+0x68>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4a11      	ldr	r2, [pc, #68]	; (800fcb0 <TIM_OC4_SetConfig+0xa8>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d109      	bne.n	800fc84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	695b      	ldr	r3, [r3, #20]
 800fc7c:	019b      	lsls	r3, r3, #6
 800fc7e:	697a      	ldr	r2, [r7, #20]
 800fc80:	4313      	orrs	r3, r2
 800fc82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	697a      	ldr	r2, [r7, #20]
 800fc88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	68fa      	ldr	r2, [r7, #12]
 800fc8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	693a      	ldr	r2, [r7, #16]
 800fc9c:	621a      	str	r2, [r3, #32]
}
 800fc9e:	bf00      	nop
 800fca0:	371c      	adds	r7, #28
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	40010000 	.word	0x40010000
 800fcb0:	40010400 	.word	0x40010400

0800fcb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b087      	sub	sp, #28
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
 800fcc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	f023 0201 	bic.w	r2, r3, #1
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	699b      	ldr	r3, [r3, #24]
 800fcd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6a1b      	ldr	r3, [r3, #32]
 800fcd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	4a28      	ldr	r2, [pc, #160]	; (800fd80 <TIM_TI1_SetConfig+0xcc>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d01b      	beq.n	800fd1a <TIM_TI1_SetConfig+0x66>
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fce8:	d017      	beq.n	800fd1a <TIM_TI1_SetConfig+0x66>
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	4a25      	ldr	r2, [pc, #148]	; (800fd84 <TIM_TI1_SetConfig+0xd0>)
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d013      	beq.n	800fd1a <TIM_TI1_SetConfig+0x66>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	4a24      	ldr	r2, [pc, #144]	; (800fd88 <TIM_TI1_SetConfig+0xd4>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d00f      	beq.n	800fd1a <TIM_TI1_SetConfig+0x66>
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4a23      	ldr	r2, [pc, #140]	; (800fd8c <TIM_TI1_SetConfig+0xd8>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d00b      	beq.n	800fd1a <TIM_TI1_SetConfig+0x66>
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	4a22      	ldr	r2, [pc, #136]	; (800fd90 <TIM_TI1_SetConfig+0xdc>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d007      	beq.n	800fd1a <TIM_TI1_SetConfig+0x66>
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	4a21      	ldr	r2, [pc, #132]	; (800fd94 <TIM_TI1_SetConfig+0xe0>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d003      	beq.n	800fd1a <TIM_TI1_SetConfig+0x66>
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4a20      	ldr	r2, [pc, #128]	; (800fd98 <TIM_TI1_SetConfig+0xe4>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d101      	bne.n	800fd1e <TIM_TI1_SetConfig+0x6a>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	e000      	b.n	800fd20 <TIM_TI1_SetConfig+0x6c>
 800fd1e:	2300      	movs	r3, #0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d008      	beq.n	800fd36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	f023 0303 	bic.w	r3, r3, #3
 800fd2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800fd2c:	697a      	ldr	r2, [r7, #20]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	617b      	str	r3, [r7, #20]
 800fd34:	e003      	b.n	800fd3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	f043 0301 	orr.w	r3, r3, #1
 800fd3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	011b      	lsls	r3, r3, #4
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	697a      	ldr	r2, [r7, #20]
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	f023 030a 	bic.w	r3, r3, #10
 800fd58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	f003 030a 	and.w	r3, r3, #10
 800fd60:	693a      	ldr	r2, [r7, #16]
 800fd62:	4313      	orrs	r3, r2
 800fd64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	697a      	ldr	r2, [r7, #20]
 800fd6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	693a      	ldr	r2, [r7, #16]
 800fd70:	621a      	str	r2, [r3, #32]
}
 800fd72:	bf00      	nop
 800fd74:	371c      	adds	r7, #28
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop
 800fd80:	40010000 	.word	0x40010000
 800fd84:	40000400 	.word	0x40000400
 800fd88:	40000800 	.word	0x40000800
 800fd8c:	40000c00 	.word	0x40000c00
 800fd90:	40010400 	.word	0x40010400
 800fd94:	40014000 	.word	0x40014000
 800fd98:	40001800 	.word	0x40001800

0800fd9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b087      	sub	sp, #28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	6a1b      	ldr	r3, [r3, #32]
 800fdac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6a1b      	ldr	r3, [r3, #32]
 800fdb2:	f023 0201 	bic.w	r2, r3, #1
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	699b      	ldr	r3, [r3, #24]
 800fdbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fdc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	011b      	lsls	r3, r3, #4
 800fdcc:	693a      	ldr	r2, [r7, #16]
 800fdce:	4313      	orrs	r3, r2
 800fdd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	f023 030a 	bic.w	r3, r3, #10
 800fdd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fdda:	697a      	ldr	r2, [r7, #20]
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	4313      	orrs	r3, r2
 800fde0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	693a      	ldr	r2, [r7, #16]
 800fde6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	697a      	ldr	r2, [r7, #20]
 800fdec:	621a      	str	r2, [r3, #32]
}
 800fdee:	bf00      	nop
 800fdf0:	371c      	adds	r7, #28
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr

0800fdfa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fdfa:	b480      	push	{r7}
 800fdfc:	b087      	sub	sp, #28
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	60f8      	str	r0, [r7, #12]
 800fe02:	60b9      	str	r1, [r7, #8]
 800fe04:	607a      	str	r2, [r7, #4]
 800fe06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	6a1b      	ldr	r3, [r3, #32]
 800fe0c:	f023 0210 	bic.w	r2, r3, #16
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	699b      	ldr	r3, [r3, #24]
 800fe18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6a1b      	ldr	r3, [r3, #32]
 800fe1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	021b      	lsls	r3, r3, #8
 800fe2c:	697a      	ldr	r2, [r7, #20]
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fe38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	031b      	lsls	r3, r3, #12
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	697a      	ldr	r2, [r7, #20]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fe4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	011b      	lsls	r3, r3, #4
 800fe52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fe56:	693a      	ldr	r2, [r7, #16]
 800fe58:	4313      	orrs	r3, r2
 800fe5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	697a      	ldr	r2, [r7, #20]
 800fe60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	693a      	ldr	r2, [r7, #16]
 800fe66:	621a      	str	r2, [r3, #32]
}
 800fe68:	bf00      	nop
 800fe6a:	371c      	adds	r7, #28
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b087      	sub	sp, #28
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6a1b      	ldr	r3, [r3, #32]
 800fe84:	f023 0210 	bic.w	r2, r3, #16
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	699b      	ldr	r3, [r3, #24]
 800fe90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6a1b      	ldr	r3, [r3, #32]
 800fe96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fe9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	031b      	lsls	r3, r3, #12
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800feb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	011b      	lsls	r3, r3, #4
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	4313      	orrs	r3, r2
 800feba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	697a      	ldr	r2, [r7, #20]
 800fec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	693a      	ldr	r2, [r7, #16]
 800fec6:	621a      	str	r2, [r3, #32]
}
 800fec8:	bf00      	nop
 800feca:	371c      	adds	r7, #28
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b087      	sub	sp, #28
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	607a      	str	r2, [r7, #4]
 800fee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6a1b      	ldr	r3, [r3, #32]
 800fee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	69db      	ldr	r3, [r3, #28]
 800fef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6a1b      	ldr	r3, [r3, #32]
 800fef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	f023 0303 	bic.w	r3, r3, #3
 800ff00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ff02:	697a      	ldr	r2, [r7, #20]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4313      	orrs	r3, r2
 800ff08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ff10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	011b      	lsls	r3, r3, #4
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	697a      	ldr	r2, [r7, #20]
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ff24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	021b      	lsls	r3, r3, #8
 800ff2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ff2e:	693a      	ldr	r2, [r7, #16]
 800ff30:	4313      	orrs	r3, r2
 800ff32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	693a      	ldr	r2, [r7, #16]
 800ff3e:	621a      	str	r2, [r3, #32]
}
 800ff40:	bf00      	nop
 800ff42:	371c      	adds	r7, #28
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b087      	sub	sp, #28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
 800ff58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	6a1b      	ldr	r3, [r3, #32]
 800ff5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	69db      	ldr	r3, [r3, #28]
 800ff6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	6a1b      	ldr	r3, [r3, #32]
 800ff70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	021b      	lsls	r3, r3, #8
 800ff7e:	697a      	ldr	r2, [r7, #20]
 800ff80:	4313      	orrs	r3, r2
 800ff82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ff8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	031b      	lsls	r3, r3, #12
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	697a      	ldr	r2, [r7, #20]
 800ff94:	4313      	orrs	r3, r2
 800ff96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ff9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	031b      	lsls	r3, r3, #12
 800ffa4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ffa8:	693a      	ldr	r2, [r7, #16]
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	697a      	ldr	r2, [r7, #20]
 800ffb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	693a      	ldr	r2, [r7, #16]
 800ffb8:	621a      	str	r2, [r3, #32]
}
 800ffba:	bf00      	nop
 800ffbc:	371c      	adds	r7, #28
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr

0800ffc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ffc6:	b480      	push	{r7}
 800ffc8:	b085      	sub	sp, #20
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ffde:	683a      	ldr	r2, [r7, #0]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	f043 0307 	orr.w	r3, r3, #7
 800ffe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	609a      	str	r2, [r3, #8]
}
 800fff0:	bf00      	nop
 800fff2:	3714      	adds	r7, #20
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b087      	sub	sp, #28
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
 8010008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	021a      	lsls	r2, r3, #8
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	431a      	orrs	r2, r3
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	4313      	orrs	r3, r2
 8010024:	697a      	ldr	r2, [r7, #20]
 8010026:	4313      	orrs	r3, r2
 8010028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	697a      	ldr	r2, [r7, #20]
 801002e:	609a      	str	r2, [r3, #8]
}
 8010030:	bf00      	nop
 8010032:	371c      	adds	r7, #28
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr

0801003c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801003c:	b480      	push	{r7}
 801003e:	b087      	sub	sp, #28
 8010040:	af00      	add	r7, sp, #0
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	f003 031f 	and.w	r3, r3, #31
 801004e:	2201      	movs	r2, #1
 8010050:	fa02 f303 	lsl.w	r3, r2, r3
 8010054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6a1a      	ldr	r2, [r3, #32]
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	43db      	mvns	r3, r3
 801005e:	401a      	ands	r2, r3
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	6a1a      	ldr	r2, [r3, #32]
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	f003 031f 	and.w	r3, r3, #31
 801006e:	6879      	ldr	r1, [r7, #4]
 8010070:	fa01 f303 	lsl.w	r3, r1, r3
 8010074:	431a      	orrs	r2, r3
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	621a      	str	r2, [r3, #32]
}
 801007a:	bf00      	nop
 801007c:	371c      	adds	r7, #28
 801007e:	46bd      	mov	sp, r7
 8010080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010084:	4770      	bx	lr
	...

08010088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010088:	b480      	push	{r7}
 801008a:	b085      	sub	sp, #20
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010098:	2b01      	cmp	r3, #1
 801009a:	d101      	bne.n	80100a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801009c:	2302      	movs	r3, #2
 801009e:	e05a      	b.n	8010156 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2202      	movs	r2, #2
 80100ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	68fa      	ldr	r2, [r7, #12]
 80100ce:	4313      	orrs	r3, r2
 80100d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4a21      	ldr	r2, [pc, #132]	; (8010164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d022      	beq.n	801012a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100ec:	d01d      	beq.n	801012a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	4a1d      	ldr	r2, [pc, #116]	; (8010168 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d018      	beq.n	801012a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4a1b      	ldr	r2, [pc, #108]	; (801016c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	d013      	beq.n	801012a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a1a      	ldr	r2, [pc, #104]	; (8010170 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d00e      	beq.n	801012a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	4a18      	ldr	r2, [pc, #96]	; (8010174 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d009      	beq.n	801012a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4a17      	ldr	r2, [pc, #92]	; (8010178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d004      	beq.n	801012a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4a15      	ldr	r2, [pc, #84]	; (801017c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d10c      	bne.n	8010144 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	68ba      	ldr	r2, [r7, #8]
 8010138:	4313      	orrs	r3, r2
 801013a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	68ba      	ldr	r2, [r7, #8]
 8010142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2201      	movs	r2, #1
 8010148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	3714      	adds	r7, #20
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	40010000 	.word	0x40010000
 8010168:	40000400 	.word	0x40000400
 801016c:	40000800 	.word	0x40000800
 8010170:	40000c00 	.word	0x40000c00
 8010174:	40010400 	.word	0x40010400
 8010178:	40014000 	.word	0x40014000
 801017c:	40001800 	.word	0x40001800

08010180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010180:	b480      	push	{r7}
 8010182:	b083      	sub	sp, #12
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010188:	bf00      	nop
 801018a:	370c      	adds	r7, #12
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr

08010194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801019c:	bf00      	nop
 801019e:	370c      	adds	r7, #12
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d101      	bne.n	80101ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101b6:	2301      	movs	r3, #1
 80101b8:	e03f      	b.n	801023a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d106      	bne.n	80101d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2200      	movs	r2, #0
 80101ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7f8 fd76 	bl	8008cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2224      	movs	r2, #36	; 0x24
 80101d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	68da      	ldr	r2, [r3, #12]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80101ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 fb8b 	bl	8010908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	691a      	ldr	r2, [r3, #16]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	695a      	ldr	r2, [r3, #20]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	68da      	ldr	r2, [r3, #12]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2220      	movs	r2, #32
 801022c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2220      	movs	r2, #32
 8010234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010238:	2300      	movs	r3, #0
}
 801023a:	4618      	mov	r0, r3
 801023c:	3708      	adds	r7, #8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
	...

08010244 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b086      	sub	sp, #24
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	4613      	mov	r3, r2
 8010250:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b20      	cmp	r3, #32
 801025c:	d166      	bne.n	801032c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d002      	beq.n	801026a <HAL_UART_Receive_DMA+0x26>
 8010264:	88fb      	ldrh	r3, [r7, #6]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d101      	bne.n	801026e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801026a:	2301      	movs	r3, #1
 801026c:	e05f      	b.n	801032e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010274:	2b01      	cmp	r3, #1
 8010276:	d101      	bne.n	801027c <HAL_UART_Receive_DMA+0x38>
 8010278:	2302      	movs	r3, #2
 801027a:	e058      	b.n	801032e <HAL_UART_Receive_DMA+0xea>
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2201      	movs	r2, #1
 8010280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	88fa      	ldrh	r2, [r7, #6]
 801028e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2200      	movs	r2, #0
 8010294:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2222      	movs	r2, #34	; 0x22
 801029a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102a2:	4a25      	ldr	r2, [pc, #148]	; (8010338 <HAL_UART_Receive_DMA+0xf4>)
 80102a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102aa:	4a24      	ldr	r2, [pc, #144]	; (801033c <HAL_UART_Receive_DMA+0xf8>)
 80102ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102b2:	4a23      	ldr	r2, [pc, #140]	; (8010340 <HAL_UART_Receive_DMA+0xfc>)
 80102b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ba:	2200      	movs	r2, #0
 80102bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80102be:	f107 0308 	add.w	r3, r7, #8
 80102c2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	3304      	adds	r3, #4
 80102ce:	4619      	mov	r1, r3
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	88fb      	ldrh	r3, [r7, #6]
 80102d6:	f7f9 f913 	bl	8009500 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80102da:	2300      	movs	r3, #0
 80102dc:	613b      	str	r3, [r7, #16]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	613b      	str	r3, [r7, #16]
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	613b      	str	r3, [r7, #16]
 80102ee:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2200      	movs	r2, #0
 80102f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	68da      	ldr	r2, [r3, #12]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010306:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	695a      	ldr	r2, [r3, #20]
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f042 0201 	orr.w	r2, r2, #1
 8010316:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	695a      	ldr	r2, [r3, #20]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010326:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8010328:	2300      	movs	r3, #0
 801032a:	e000      	b.n	801032e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 801032c:	2302      	movs	r3, #2
  }
}
 801032e:	4618      	mov	r0, r3
 8010330:	3718      	adds	r7, #24
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	08010581 	.word	0x08010581
 801033c:	080105e9 	.word	0x080105e9
 8010340:	08010605 	.word	0x08010605

08010344 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b088      	sub	sp, #32
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	695b      	ldr	r3, [r3, #20]
 8010362:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010364:	2300      	movs	r3, #0
 8010366:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010368:	2300      	movs	r3, #0
 801036a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	f003 030f 	and.w	r3, r3, #15
 8010372:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10d      	bne.n	8010396 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	f003 0320 	and.w	r3, r3, #32
 8010380:	2b00      	cmp	r3, #0
 8010382:	d008      	beq.n	8010396 <HAL_UART_IRQHandler+0x52>
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	f003 0320 	and.w	r3, r3, #32
 801038a:	2b00      	cmp	r3, #0
 801038c:	d003      	beq.n	8010396 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 fa38 	bl	8010804 <UART_Receive_IT>
      return;
 8010394:	e0d1      	b.n	801053a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 80b0 	beq.w	80104fe <HAL_UART_IRQHandler+0x1ba>
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	f003 0301 	and.w	r3, r3, #1
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d105      	bne.n	80103b4 <HAL_UART_IRQHandler+0x70>
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f000 80a5 	beq.w	80104fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	f003 0301 	and.w	r3, r3, #1
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00a      	beq.n	80103d4 <HAL_UART_IRQHandler+0x90>
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d005      	beq.n	80103d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103cc:	f043 0201 	orr.w	r2, r3, #1
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80103d4:	69fb      	ldr	r3, [r7, #28]
 80103d6:	f003 0304 	and.w	r3, r3, #4
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d00a      	beq.n	80103f4 <HAL_UART_IRQHandler+0xb0>
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	f003 0301 	and.w	r3, r3, #1
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d005      	beq.n	80103f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ec:	f043 0202 	orr.w	r2, r3, #2
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	f003 0302 	and.w	r3, r3, #2
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00a      	beq.n	8010414 <HAL_UART_IRQHandler+0xd0>
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	f003 0301 	and.w	r3, r3, #1
 8010404:	2b00      	cmp	r3, #0
 8010406:	d005      	beq.n	8010414 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801040c:	f043 0204 	orr.w	r2, r3, #4
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	f003 0308 	and.w	r3, r3, #8
 801041a:	2b00      	cmp	r3, #0
 801041c:	d00f      	beq.n	801043e <HAL_UART_IRQHandler+0xfa>
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	f003 0320 	and.w	r3, r3, #32
 8010424:	2b00      	cmp	r3, #0
 8010426:	d104      	bne.n	8010432 <HAL_UART_IRQHandler+0xee>
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	f003 0301 	and.w	r3, r3, #1
 801042e:	2b00      	cmp	r3, #0
 8010430:	d005      	beq.n	801043e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010436:	f043 0208 	orr.w	r2, r3, #8
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010442:	2b00      	cmp	r3, #0
 8010444:	d078      	beq.n	8010538 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	f003 0320 	and.w	r3, r3, #32
 801044c:	2b00      	cmp	r3, #0
 801044e:	d007      	beq.n	8010460 <HAL_UART_IRQHandler+0x11c>
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	f003 0320 	and.w	r3, r3, #32
 8010456:	2b00      	cmp	r3, #0
 8010458:	d002      	beq.n	8010460 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f000 f9d2 	bl	8010804 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	695b      	ldr	r3, [r3, #20]
 8010466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801046a:	2b40      	cmp	r3, #64	; 0x40
 801046c:	bf0c      	ite	eq
 801046e:	2301      	moveq	r3, #1
 8010470:	2300      	movne	r3, #0
 8010472:	b2db      	uxtb	r3, r3
 8010474:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801047a:	f003 0308 	and.w	r3, r3, #8
 801047e:	2b00      	cmp	r3, #0
 8010480:	d102      	bne.n	8010488 <HAL_UART_IRQHandler+0x144>
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d031      	beq.n	80104ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 f91b 	bl	80106c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	695b      	ldr	r3, [r3, #20]
 8010494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010498:	2b40      	cmp	r3, #64	; 0x40
 801049a:	d123      	bne.n	80104e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	695a      	ldr	r2, [r3, #20]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80104aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d013      	beq.n	80104dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104b8:	4a21      	ldr	r2, [pc, #132]	; (8010540 <HAL_UART_IRQHandler+0x1fc>)
 80104ba:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7f9 f875 	bl	80095b0 <HAL_DMA_Abort_IT>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d016      	beq.n	80104fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80104d6:	4610      	mov	r0, r2
 80104d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104da:	e00e      	b.n	80104fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f000 f845 	bl	801056c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104e2:	e00a      	b.n	80104fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f000 f841 	bl	801056c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104ea:	e006      	b.n	80104fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 f83d 	bl	801056c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2200      	movs	r2, #0
 80104f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80104f8:	e01e      	b.n	8010538 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104fa:	bf00      	nop
    return;
 80104fc:	e01c      	b.n	8010538 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010504:	2b00      	cmp	r3, #0
 8010506:	d008      	beq.n	801051a <HAL_UART_IRQHandler+0x1d6>
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801050e:	2b00      	cmp	r3, #0
 8010510:	d003      	beq.n	801051a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f908 	bl	8010728 <UART_Transmit_IT>
    return;
 8010518:	e00f      	b.n	801053a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00a      	beq.n	801053a <HAL_UART_IRQHandler+0x1f6>
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801052a:	2b00      	cmp	r3, #0
 801052c:	d005      	beq.n	801053a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 f950 	bl	80107d4 <UART_EndTransmit_IT>
    return;
 8010534:	bf00      	nop
 8010536:	e000      	b.n	801053a <HAL_UART_IRQHandler+0x1f6>
    return;
 8010538:	bf00      	nop
  }
}
 801053a:	3720      	adds	r7, #32
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	08010701 	.word	0x08010701

08010544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010544:	b480      	push	{r7}
 8010546:	b083      	sub	sp, #12
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801054c:	bf00      	nop
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010560:	bf00      	nop
 8010562:	370c      	adds	r7, #12
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr

0801056c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010574:	bf00      	nop
 8010576:	370c      	adds	r7, #12
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801058c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010598:	2b00      	cmp	r3, #0
 801059a:	d11e      	bne.n	80105da <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2200      	movs	r2, #0
 80105a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	68da      	ldr	r2, [r3, #12]
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80105b0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	695a      	ldr	r2, [r3, #20]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f022 0201 	bic.w	r2, r2, #1
 80105c0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	695a      	ldr	r2, [r3, #20]
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105d0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2220      	movs	r2, #32
 80105d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f7f6 fb14 	bl	8006c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105e0:	bf00      	nop
 80105e2:	3710      	adds	r7, #16
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105f4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80105f6:	68f8      	ldr	r0, [r7, #12]
 80105f8:	f7ff ffae 	bl	8010558 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105fc:	bf00      	nop
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801060c:	2300      	movs	r3, #0
 801060e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010614:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	695b      	ldr	r3, [r3, #20]
 801061c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010620:	2b80      	cmp	r3, #128	; 0x80
 8010622:	bf0c      	ite	eq
 8010624:	2301      	moveq	r3, #1
 8010626:	2300      	movne	r3, #0
 8010628:	b2db      	uxtb	r3, r3
 801062a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b21      	cmp	r3, #33	; 0x21
 8010636:	d108      	bne.n	801064a <UART_DMAError+0x46>
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d005      	beq.n	801064a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2200      	movs	r2, #0
 8010642:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010644:	68b8      	ldr	r0, [r7, #8]
 8010646:	f000 f827 	bl	8010698 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	695b      	ldr	r3, [r3, #20]
 8010650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010654:	2b40      	cmp	r3, #64	; 0x40
 8010656:	bf0c      	ite	eq
 8010658:	2301      	moveq	r3, #1
 801065a:	2300      	movne	r3, #0
 801065c:	b2db      	uxtb	r3, r3
 801065e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010666:	b2db      	uxtb	r3, r3
 8010668:	2b22      	cmp	r3, #34	; 0x22
 801066a:	d108      	bne.n	801067e <UART_DMAError+0x7a>
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d005      	beq.n	801067e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	2200      	movs	r2, #0
 8010676:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010678:	68b8      	ldr	r0, [r7, #8]
 801067a:	f000 f823 	bl	80106c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010682:	f043 0210 	orr.w	r2, r3, #16
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801068a:	68b8      	ldr	r0, [r7, #8]
 801068c:	f7ff ff6e 	bl	801056c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010690:	bf00      	nop
 8010692:	3710      	adds	r7, #16
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	68da      	ldr	r2, [r3, #12]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80106ae:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2220      	movs	r2, #32
 80106b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80106b8:	bf00      	nop
 80106ba:	370c      	adds	r7, #12
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	68da      	ldr	r2, [r3, #12]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80106da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	695a      	ldr	r2, [r3, #20]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f022 0201 	bic.w	r2, r2, #1
 80106ea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2220      	movs	r2, #32
 80106f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80106f4:	bf00      	nop
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801070c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2200      	movs	r2, #0
 8010712:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2200      	movs	r2, #0
 8010718:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801071a:	68f8      	ldr	r0, [r7, #12]
 801071c:	f7ff ff26 	bl	801056c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010720:	bf00      	nop
 8010722:	3710      	adds	r7, #16
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010736:	b2db      	uxtb	r3, r3
 8010738:	2b21      	cmp	r3, #33	; 0x21
 801073a:	d144      	bne.n	80107c6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	689b      	ldr	r3, [r3, #8]
 8010740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010744:	d11a      	bne.n	801077c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6a1b      	ldr	r3, [r3, #32]
 801074a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	881b      	ldrh	r3, [r3, #0]
 8010750:	461a      	mov	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801075a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d105      	bne.n	8010770 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6a1b      	ldr	r3, [r3, #32]
 8010768:	1c9a      	adds	r2, r3, #2
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	621a      	str	r2, [r3, #32]
 801076e:	e00e      	b.n	801078e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6a1b      	ldr	r3, [r3, #32]
 8010774:	1c5a      	adds	r2, r3, #1
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	621a      	str	r2, [r3, #32]
 801077a:	e008      	b.n	801078e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6a1b      	ldr	r3, [r3, #32]
 8010780:	1c59      	adds	r1, r3, #1
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	6211      	str	r1, [r2, #32]
 8010786:	781a      	ldrb	r2, [r3, #0]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010792:	b29b      	uxth	r3, r3
 8010794:	3b01      	subs	r3, #1
 8010796:	b29b      	uxth	r3, r3
 8010798:	687a      	ldr	r2, [r7, #4]
 801079a:	4619      	mov	r1, r3
 801079c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d10f      	bne.n	80107c2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	68da      	ldr	r2, [r3, #12]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	68da      	ldr	r2, [r3, #12]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	e000      	b.n	80107c8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80107c6:	2302      	movs	r3, #2
  }
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3714      	adds	r7, #20
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	68da      	ldr	r2, [r3, #12]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2220      	movs	r2, #32
 80107f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7ff fea5 	bl	8010544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80107fa:	2300      	movs	r3, #0
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010812:	b2db      	uxtb	r3, r3
 8010814:	2b22      	cmp	r3, #34	; 0x22
 8010816:	d171      	bne.n	80108fc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	689b      	ldr	r3, [r3, #8]
 801081c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010820:	d123      	bne.n	801086a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010826:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	691b      	ldr	r3, [r3, #16]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d10e      	bne.n	801084e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	b29b      	uxth	r3, r3
 8010838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801083c:	b29a      	uxth	r2, r3
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010846:	1c9a      	adds	r2, r3, #2
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	629a      	str	r2, [r3, #40]	; 0x28
 801084c:	e029      	b.n	80108a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	b29b      	uxth	r3, r3
 8010856:	b2db      	uxtb	r3, r3
 8010858:	b29a      	uxth	r2, r3
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010862:	1c5a      	adds	r2, r3, #1
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	629a      	str	r2, [r3, #40]	; 0x28
 8010868:	e01b      	b.n	80108a2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	691b      	ldr	r3, [r3, #16]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d10a      	bne.n	8010888 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	6858      	ldr	r0, [r3, #4]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801087c:	1c59      	adds	r1, r3, #1
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	6291      	str	r1, [r2, #40]	; 0x28
 8010882:	b2c2      	uxtb	r2, r0
 8010884:	701a      	strb	r2, [r3, #0]
 8010886:	e00c      	b.n	80108a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	b2da      	uxtb	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010894:	1c58      	adds	r0, r3, #1
 8010896:	6879      	ldr	r1, [r7, #4]
 8010898:	6288      	str	r0, [r1, #40]	; 0x28
 801089a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801089e:	b2d2      	uxtb	r2, r2
 80108a0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	3b01      	subs	r3, #1
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	4619      	mov	r1, r3
 80108b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d120      	bne.n	80108f8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	68da      	ldr	r2, [r3, #12]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f022 0220 	bic.w	r2, r2, #32
 80108c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	68da      	ldr	r2, [r3, #12]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80108d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	695a      	ldr	r2, [r3, #20]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f022 0201 	bic.w	r2, r2, #1
 80108e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2220      	movs	r2, #32
 80108ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7f6 f98a 	bl	8006c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80108f4:	2300      	movs	r3, #0
 80108f6:	e002      	b.n	80108fe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80108f8:	2300      	movs	r3, #0
 80108fa:	e000      	b.n	80108fe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80108fc:	2302      	movs	r3, #2
  }
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3710      	adds	r7, #16
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
	...

08010908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801090c:	b085      	sub	sp, #20
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	68da      	ldr	r2, [r3, #12]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	430a      	orrs	r2, r1
 8010926:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	689a      	ldr	r2, [r3, #8]
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	691b      	ldr	r3, [r3, #16]
 8010930:	431a      	orrs	r2, r3
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	695b      	ldr	r3, [r3, #20]
 8010936:	431a      	orrs	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	69db      	ldr	r3, [r3, #28]
 801093c:	4313      	orrs	r3, r2
 801093e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801094a:	f023 030c 	bic.w	r3, r3, #12
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	6812      	ldr	r2, [r2, #0]
 8010952:	68f9      	ldr	r1, [r7, #12]
 8010954:	430b      	orrs	r3, r1
 8010956:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	695b      	ldr	r3, [r3, #20]
 801095e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	699a      	ldr	r2, [r3, #24]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	430a      	orrs	r2, r1
 801096c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	69db      	ldr	r3, [r3, #28]
 8010972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010976:	f040 818b 	bne.w	8010c90 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4ac1      	ldr	r2, [pc, #772]	; (8010c84 <UART_SetConfig+0x37c>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d005      	beq.n	8010990 <UART_SetConfig+0x88>
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	4abf      	ldr	r2, [pc, #764]	; (8010c88 <UART_SetConfig+0x380>)
 801098a:	4293      	cmp	r3, r2
 801098c:	f040 80bd 	bne.w	8010b0a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010990:	f7fc ff60 	bl	800d854 <HAL_RCC_GetPCLK2Freq>
 8010994:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	461d      	mov	r5, r3
 801099a:	f04f 0600 	mov.w	r6, #0
 801099e:	46a8      	mov	r8, r5
 80109a0:	46b1      	mov	r9, r6
 80109a2:	eb18 0308 	adds.w	r3, r8, r8
 80109a6:	eb49 0409 	adc.w	r4, r9, r9
 80109aa:	4698      	mov	r8, r3
 80109ac:	46a1      	mov	r9, r4
 80109ae:	eb18 0805 	adds.w	r8, r8, r5
 80109b2:	eb49 0906 	adc.w	r9, r9, r6
 80109b6:	f04f 0100 	mov.w	r1, #0
 80109ba:	f04f 0200 	mov.w	r2, #0
 80109be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80109c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80109c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80109ca:	4688      	mov	r8, r1
 80109cc:	4691      	mov	r9, r2
 80109ce:	eb18 0005 	adds.w	r0, r8, r5
 80109d2:	eb49 0106 	adc.w	r1, r9, r6
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	461d      	mov	r5, r3
 80109dc:	f04f 0600 	mov.w	r6, #0
 80109e0:	196b      	adds	r3, r5, r5
 80109e2:	eb46 0406 	adc.w	r4, r6, r6
 80109e6:	461a      	mov	r2, r3
 80109e8:	4623      	mov	r3, r4
 80109ea:	f7f0 fabb 	bl	8000f64 <__aeabi_uldivmod>
 80109ee:	4603      	mov	r3, r0
 80109f0:	460c      	mov	r4, r1
 80109f2:	461a      	mov	r2, r3
 80109f4:	4ba5      	ldr	r3, [pc, #660]	; (8010c8c <UART_SetConfig+0x384>)
 80109f6:	fba3 2302 	umull	r2, r3, r3, r2
 80109fa:	095b      	lsrs	r3, r3, #5
 80109fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	461d      	mov	r5, r3
 8010a04:	f04f 0600 	mov.w	r6, #0
 8010a08:	46a9      	mov	r9, r5
 8010a0a:	46b2      	mov	sl, r6
 8010a0c:	eb19 0309 	adds.w	r3, r9, r9
 8010a10:	eb4a 040a 	adc.w	r4, sl, sl
 8010a14:	4699      	mov	r9, r3
 8010a16:	46a2      	mov	sl, r4
 8010a18:	eb19 0905 	adds.w	r9, r9, r5
 8010a1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8010a20:	f04f 0100 	mov.w	r1, #0
 8010a24:	f04f 0200 	mov.w	r2, #0
 8010a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010a2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010a30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010a34:	4689      	mov	r9, r1
 8010a36:	4692      	mov	sl, r2
 8010a38:	eb19 0005 	adds.w	r0, r9, r5
 8010a3c:	eb4a 0106 	adc.w	r1, sl, r6
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	461d      	mov	r5, r3
 8010a46:	f04f 0600 	mov.w	r6, #0
 8010a4a:	196b      	adds	r3, r5, r5
 8010a4c:	eb46 0406 	adc.w	r4, r6, r6
 8010a50:	461a      	mov	r2, r3
 8010a52:	4623      	mov	r3, r4
 8010a54:	f7f0 fa86 	bl	8000f64 <__aeabi_uldivmod>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	460c      	mov	r4, r1
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	4b8b      	ldr	r3, [pc, #556]	; (8010c8c <UART_SetConfig+0x384>)
 8010a60:	fba3 1302 	umull	r1, r3, r3, r2
 8010a64:	095b      	lsrs	r3, r3, #5
 8010a66:	2164      	movs	r1, #100	; 0x64
 8010a68:	fb01 f303 	mul.w	r3, r1, r3
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	00db      	lsls	r3, r3, #3
 8010a70:	3332      	adds	r3, #50	; 0x32
 8010a72:	4a86      	ldr	r2, [pc, #536]	; (8010c8c <UART_SetConfig+0x384>)
 8010a74:	fba2 2303 	umull	r2, r3, r2, r3
 8010a78:	095b      	lsrs	r3, r3, #5
 8010a7a:	005b      	lsls	r3, r3, #1
 8010a7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010a80:	4498      	add	r8, r3
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	461d      	mov	r5, r3
 8010a86:	f04f 0600 	mov.w	r6, #0
 8010a8a:	46a9      	mov	r9, r5
 8010a8c:	46b2      	mov	sl, r6
 8010a8e:	eb19 0309 	adds.w	r3, r9, r9
 8010a92:	eb4a 040a 	adc.w	r4, sl, sl
 8010a96:	4699      	mov	r9, r3
 8010a98:	46a2      	mov	sl, r4
 8010a9a:	eb19 0905 	adds.w	r9, r9, r5
 8010a9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010aa2:	f04f 0100 	mov.w	r1, #0
 8010aa6:	f04f 0200 	mov.w	r2, #0
 8010aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010aae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010ab2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010ab6:	4689      	mov	r9, r1
 8010ab8:	4692      	mov	sl, r2
 8010aba:	eb19 0005 	adds.w	r0, r9, r5
 8010abe:	eb4a 0106 	adc.w	r1, sl, r6
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	461d      	mov	r5, r3
 8010ac8:	f04f 0600 	mov.w	r6, #0
 8010acc:	196b      	adds	r3, r5, r5
 8010ace:	eb46 0406 	adc.w	r4, r6, r6
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	4623      	mov	r3, r4
 8010ad6:	f7f0 fa45 	bl	8000f64 <__aeabi_uldivmod>
 8010ada:	4603      	mov	r3, r0
 8010adc:	460c      	mov	r4, r1
 8010ade:	461a      	mov	r2, r3
 8010ae0:	4b6a      	ldr	r3, [pc, #424]	; (8010c8c <UART_SetConfig+0x384>)
 8010ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8010ae6:	095b      	lsrs	r3, r3, #5
 8010ae8:	2164      	movs	r1, #100	; 0x64
 8010aea:	fb01 f303 	mul.w	r3, r1, r3
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	00db      	lsls	r3, r3, #3
 8010af2:	3332      	adds	r3, #50	; 0x32
 8010af4:	4a65      	ldr	r2, [pc, #404]	; (8010c8c <UART_SetConfig+0x384>)
 8010af6:	fba2 2303 	umull	r2, r3, r2, r3
 8010afa:	095b      	lsrs	r3, r3, #5
 8010afc:	f003 0207 	and.w	r2, r3, #7
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4442      	add	r2, r8
 8010b06:	609a      	str	r2, [r3, #8]
 8010b08:	e26f      	b.n	8010fea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010b0a:	f7fc fe8f 	bl	800d82c <HAL_RCC_GetPCLK1Freq>
 8010b0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	461d      	mov	r5, r3
 8010b14:	f04f 0600 	mov.w	r6, #0
 8010b18:	46a8      	mov	r8, r5
 8010b1a:	46b1      	mov	r9, r6
 8010b1c:	eb18 0308 	adds.w	r3, r8, r8
 8010b20:	eb49 0409 	adc.w	r4, r9, r9
 8010b24:	4698      	mov	r8, r3
 8010b26:	46a1      	mov	r9, r4
 8010b28:	eb18 0805 	adds.w	r8, r8, r5
 8010b2c:	eb49 0906 	adc.w	r9, r9, r6
 8010b30:	f04f 0100 	mov.w	r1, #0
 8010b34:	f04f 0200 	mov.w	r2, #0
 8010b38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010b3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010b40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010b44:	4688      	mov	r8, r1
 8010b46:	4691      	mov	r9, r2
 8010b48:	eb18 0005 	adds.w	r0, r8, r5
 8010b4c:	eb49 0106 	adc.w	r1, r9, r6
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	461d      	mov	r5, r3
 8010b56:	f04f 0600 	mov.w	r6, #0
 8010b5a:	196b      	adds	r3, r5, r5
 8010b5c:	eb46 0406 	adc.w	r4, r6, r6
 8010b60:	461a      	mov	r2, r3
 8010b62:	4623      	mov	r3, r4
 8010b64:	f7f0 f9fe 	bl	8000f64 <__aeabi_uldivmod>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	460c      	mov	r4, r1
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	4b47      	ldr	r3, [pc, #284]	; (8010c8c <UART_SetConfig+0x384>)
 8010b70:	fba3 2302 	umull	r2, r3, r3, r2
 8010b74:	095b      	lsrs	r3, r3, #5
 8010b76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	461d      	mov	r5, r3
 8010b7e:	f04f 0600 	mov.w	r6, #0
 8010b82:	46a9      	mov	r9, r5
 8010b84:	46b2      	mov	sl, r6
 8010b86:	eb19 0309 	adds.w	r3, r9, r9
 8010b8a:	eb4a 040a 	adc.w	r4, sl, sl
 8010b8e:	4699      	mov	r9, r3
 8010b90:	46a2      	mov	sl, r4
 8010b92:	eb19 0905 	adds.w	r9, r9, r5
 8010b96:	eb4a 0a06 	adc.w	sl, sl, r6
 8010b9a:	f04f 0100 	mov.w	r1, #0
 8010b9e:	f04f 0200 	mov.w	r2, #0
 8010ba2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010ba6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010baa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010bae:	4689      	mov	r9, r1
 8010bb0:	4692      	mov	sl, r2
 8010bb2:	eb19 0005 	adds.w	r0, r9, r5
 8010bb6:	eb4a 0106 	adc.w	r1, sl, r6
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	461d      	mov	r5, r3
 8010bc0:	f04f 0600 	mov.w	r6, #0
 8010bc4:	196b      	adds	r3, r5, r5
 8010bc6:	eb46 0406 	adc.w	r4, r6, r6
 8010bca:	461a      	mov	r2, r3
 8010bcc:	4623      	mov	r3, r4
 8010bce:	f7f0 f9c9 	bl	8000f64 <__aeabi_uldivmod>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	460c      	mov	r4, r1
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	4b2c      	ldr	r3, [pc, #176]	; (8010c8c <UART_SetConfig+0x384>)
 8010bda:	fba3 1302 	umull	r1, r3, r3, r2
 8010bde:	095b      	lsrs	r3, r3, #5
 8010be0:	2164      	movs	r1, #100	; 0x64
 8010be2:	fb01 f303 	mul.w	r3, r1, r3
 8010be6:	1ad3      	subs	r3, r2, r3
 8010be8:	00db      	lsls	r3, r3, #3
 8010bea:	3332      	adds	r3, #50	; 0x32
 8010bec:	4a27      	ldr	r2, [pc, #156]	; (8010c8c <UART_SetConfig+0x384>)
 8010bee:	fba2 2303 	umull	r2, r3, r2, r3
 8010bf2:	095b      	lsrs	r3, r3, #5
 8010bf4:	005b      	lsls	r3, r3, #1
 8010bf6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010bfa:	4498      	add	r8, r3
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	461d      	mov	r5, r3
 8010c00:	f04f 0600 	mov.w	r6, #0
 8010c04:	46a9      	mov	r9, r5
 8010c06:	46b2      	mov	sl, r6
 8010c08:	eb19 0309 	adds.w	r3, r9, r9
 8010c0c:	eb4a 040a 	adc.w	r4, sl, sl
 8010c10:	4699      	mov	r9, r3
 8010c12:	46a2      	mov	sl, r4
 8010c14:	eb19 0905 	adds.w	r9, r9, r5
 8010c18:	eb4a 0a06 	adc.w	sl, sl, r6
 8010c1c:	f04f 0100 	mov.w	r1, #0
 8010c20:	f04f 0200 	mov.w	r2, #0
 8010c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010c28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010c2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010c30:	4689      	mov	r9, r1
 8010c32:	4692      	mov	sl, r2
 8010c34:	eb19 0005 	adds.w	r0, r9, r5
 8010c38:	eb4a 0106 	adc.w	r1, sl, r6
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	461d      	mov	r5, r3
 8010c42:	f04f 0600 	mov.w	r6, #0
 8010c46:	196b      	adds	r3, r5, r5
 8010c48:	eb46 0406 	adc.w	r4, r6, r6
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	4623      	mov	r3, r4
 8010c50:	f7f0 f988 	bl	8000f64 <__aeabi_uldivmod>
 8010c54:	4603      	mov	r3, r0
 8010c56:	460c      	mov	r4, r1
 8010c58:	461a      	mov	r2, r3
 8010c5a:	4b0c      	ldr	r3, [pc, #48]	; (8010c8c <UART_SetConfig+0x384>)
 8010c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8010c60:	095b      	lsrs	r3, r3, #5
 8010c62:	2164      	movs	r1, #100	; 0x64
 8010c64:	fb01 f303 	mul.w	r3, r1, r3
 8010c68:	1ad3      	subs	r3, r2, r3
 8010c6a:	00db      	lsls	r3, r3, #3
 8010c6c:	3332      	adds	r3, #50	; 0x32
 8010c6e:	4a07      	ldr	r2, [pc, #28]	; (8010c8c <UART_SetConfig+0x384>)
 8010c70:	fba2 2303 	umull	r2, r3, r2, r3
 8010c74:	095b      	lsrs	r3, r3, #5
 8010c76:	f003 0207 	and.w	r2, r3, #7
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4442      	add	r2, r8
 8010c80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010c82:	e1b2      	b.n	8010fea <UART_SetConfig+0x6e2>
 8010c84:	40011000 	.word	0x40011000
 8010c88:	40011400 	.word	0x40011400
 8010c8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4ad7      	ldr	r2, [pc, #860]	; (8010ff4 <UART_SetConfig+0x6ec>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d005      	beq.n	8010ca6 <UART_SetConfig+0x39e>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4ad6      	ldr	r2, [pc, #856]	; (8010ff8 <UART_SetConfig+0x6f0>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	f040 80d1 	bne.w	8010e48 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010ca6:	f7fc fdd5 	bl	800d854 <HAL_RCC_GetPCLK2Freq>
 8010caa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	469a      	mov	sl, r3
 8010cb0:	f04f 0b00 	mov.w	fp, #0
 8010cb4:	46d0      	mov	r8, sl
 8010cb6:	46d9      	mov	r9, fp
 8010cb8:	eb18 0308 	adds.w	r3, r8, r8
 8010cbc:	eb49 0409 	adc.w	r4, r9, r9
 8010cc0:	4698      	mov	r8, r3
 8010cc2:	46a1      	mov	r9, r4
 8010cc4:	eb18 080a 	adds.w	r8, r8, sl
 8010cc8:	eb49 090b 	adc.w	r9, r9, fp
 8010ccc:	f04f 0100 	mov.w	r1, #0
 8010cd0:	f04f 0200 	mov.w	r2, #0
 8010cd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010cd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010cdc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010ce0:	4688      	mov	r8, r1
 8010ce2:	4691      	mov	r9, r2
 8010ce4:	eb1a 0508 	adds.w	r5, sl, r8
 8010ce8:	eb4b 0609 	adc.w	r6, fp, r9
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	f04f 0200 	mov.w	r2, #0
 8010cf6:	f04f 0300 	mov.w	r3, #0
 8010cfa:	f04f 0400 	mov.w	r4, #0
 8010cfe:	0094      	lsls	r4, r2, #2
 8010d00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010d04:	008b      	lsls	r3, r1, #2
 8010d06:	461a      	mov	r2, r3
 8010d08:	4623      	mov	r3, r4
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	4631      	mov	r1, r6
 8010d0e:	f7f0 f929 	bl	8000f64 <__aeabi_uldivmod>
 8010d12:	4603      	mov	r3, r0
 8010d14:	460c      	mov	r4, r1
 8010d16:	461a      	mov	r2, r3
 8010d18:	4bb8      	ldr	r3, [pc, #736]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8010d1e:	095b      	lsrs	r3, r3, #5
 8010d20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	469b      	mov	fp, r3
 8010d28:	f04f 0c00 	mov.w	ip, #0
 8010d2c:	46d9      	mov	r9, fp
 8010d2e:	46e2      	mov	sl, ip
 8010d30:	eb19 0309 	adds.w	r3, r9, r9
 8010d34:	eb4a 040a 	adc.w	r4, sl, sl
 8010d38:	4699      	mov	r9, r3
 8010d3a:	46a2      	mov	sl, r4
 8010d3c:	eb19 090b 	adds.w	r9, r9, fp
 8010d40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010d44:	f04f 0100 	mov.w	r1, #0
 8010d48:	f04f 0200 	mov.w	r2, #0
 8010d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010d50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010d54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010d58:	4689      	mov	r9, r1
 8010d5a:	4692      	mov	sl, r2
 8010d5c:	eb1b 0509 	adds.w	r5, fp, r9
 8010d60:	eb4c 060a 	adc.w	r6, ip, sl
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	4619      	mov	r1, r3
 8010d6a:	f04f 0200 	mov.w	r2, #0
 8010d6e:	f04f 0300 	mov.w	r3, #0
 8010d72:	f04f 0400 	mov.w	r4, #0
 8010d76:	0094      	lsls	r4, r2, #2
 8010d78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010d7c:	008b      	lsls	r3, r1, #2
 8010d7e:	461a      	mov	r2, r3
 8010d80:	4623      	mov	r3, r4
 8010d82:	4628      	mov	r0, r5
 8010d84:	4631      	mov	r1, r6
 8010d86:	f7f0 f8ed 	bl	8000f64 <__aeabi_uldivmod>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	460c      	mov	r4, r1
 8010d8e:	461a      	mov	r2, r3
 8010d90:	4b9a      	ldr	r3, [pc, #616]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010d92:	fba3 1302 	umull	r1, r3, r3, r2
 8010d96:	095b      	lsrs	r3, r3, #5
 8010d98:	2164      	movs	r1, #100	; 0x64
 8010d9a:	fb01 f303 	mul.w	r3, r1, r3
 8010d9e:	1ad3      	subs	r3, r2, r3
 8010da0:	011b      	lsls	r3, r3, #4
 8010da2:	3332      	adds	r3, #50	; 0x32
 8010da4:	4a95      	ldr	r2, [pc, #596]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010da6:	fba2 2303 	umull	r2, r3, r2, r3
 8010daa:	095b      	lsrs	r3, r3, #5
 8010dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010db0:	4498      	add	r8, r3
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	469b      	mov	fp, r3
 8010db6:	f04f 0c00 	mov.w	ip, #0
 8010dba:	46d9      	mov	r9, fp
 8010dbc:	46e2      	mov	sl, ip
 8010dbe:	eb19 0309 	adds.w	r3, r9, r9
 8010dc2:	eb4a 040a 	adc.w	r4, sl, sl
 8010dc6:	4699      	mov	r9, r3
 8010dc8:	46a2      	mov	sl, r4
 8010dca:	eb19 090b 	adds.w	r9, r9, fp
 8010dce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010dd2:	f04f 0100 	mov.w	r1, #0
 8010dd6:	f04f 0200 	mov.w	r2, #0
 8010dda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010dde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010de2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010de6:	4689      	mov	r9, r1
 8010de8:	4692      	mov	sl, r2
 8010dea:	eb1b 0509 	adds.w	r5, fp, r9
 8010dee:	eb4c 060a 	adc.w	r6, ip, sl
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	4619      	mov	r1, r3
 8010df8:	f04f 0200 	mov.w	r2, #0
 8010dfc:	f04f 0300 	mov.w	r3, #0
 8010e00:	f04f 0400 	mov.w	r4, #0
 8010e04:	0094      	lsls	r4, r2, #2
 8010e06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010e0a:	008b      	lsls	r3, r1, #2
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	4623      	mov	r3, r4
 8010e10:	4628      	mov	r0, r5
 8010e12:	4631      	mov	r1, r6
 8010e14:	f7f0 f8a6 	bl	8000f64 <__aeabi_uldivmod>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	4b77      	ldr	r3, [pc, #476]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010e20:	fba3 1302 	umull	r1, r3, r3, r2
 8010e24:	095b      	lsrs	r3, r3, #5
 8010e26:	2164      	movs	r1, #100	; 0x64
 8010e28:	fb01 f303 	mul.w	r3, r1, r3
 8010e2c:	1ad3      	subs	r3, r2, r3
 8010e2e:	011b      	lsls	r3, r3, #4
 8010e30:	3332      	adds	r3, #50	; 0x32
 8010e32:	4a72      	ldr	r2, [pc, #456]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010e34:	fba2 2303 	umull	r2, r3, r2, r3
 8010e38:	095b      	lsrs	r3, r3, #5
 8010e3a:	f003 020f 	and.w	r2, r3, #15
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4442      	add	r2, r8
 8010e44:	609a      	str	r2, [r3, #8]
 8010e46:	e0d0      	b.n	8010fea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010e48:	f7fc fcf0 	bl	800d82c <HAL_RCC_GetPCLK1Freq>
 8010e4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	469a      	mov	sl, r3
 8010e52:	f04f 0b00 	mov.w	fp, #0
 8010e56:	46d0      	mov	r8, sl
 8010e58:	46d9      	mov	r9, fp
 8010e5a:	eb18 0308 	adds.w	r3, r8, r8
 8010e5e:	eb49 0409 	adc.w	r4, r9, r9
 8010e62:	4698      	mov	r8, r3
 8010e64:	46a1      	mov	r9, r4
 8010e66:	eb18 080a 	adds.w	r8, r8, sl
 8010e6a:	eb49 090b 	adc.w	r9, r9, fp
 8010e6e:	f04f 0100 	mov.w	r1, #0
 8010e72:	f04f 0200 	mov.w	r2, #0
 8010e76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010e7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010e7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010e82:	4688      	mov	r8, r1
 8010e84:	4691      	mov	r9, r2
 8010e86:	eb1a 0508 	adds.w	r5, sl, r8
 8010e8a:	eb4b 0609 	adc.w	r6, fp, r9
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	685b      	ldr	r3, [r3, #4]
 8010e92:	4619      	mov	r1, r3
 8010e94:	f04f 0200 	mov.w	r2, #0
 8010e98:	f04f 0300 	mov.w	r3, #0
 8010e9c:	f04f 0400 	mov.w	r4, #0
 8010ea0:	0094      	lsls	r4, r2, #2
 8010ea2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010ea6:	008b      	lsls	r3, r1, #2
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	4623      	mov	r3, r4
 8010eac:	4628      	mov	r0, r5
 8010eae:	4631      	mov	r1, r6
 8010eb0:	f7f0 f858 	bl	8000f64 <__aeabi_uldivmod>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	461a      	mov	r2, r3
 8010eba:	4b50      	ldr	r3, [pc, #320]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8010ec0:	095b      	lsrs	r3, r3, #5
 8010ec2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	469b      	mov	fp, r3
 8010eca:	f04f 0c00 	mov.w	ip, #0
 8010ece:	46d9      	mov	r9, fp
 8010ed0:	46e2      	mov	sl, ip
 8010ed2:	eb19 0309 	adds.w	r3, r9, r9
 8010ed6:	eb4a 040a 	adc.w	r4, sl, sl
 8010eda:	4699      	mov	r9, r3
 8010edc:	46a2      	mov	sl, r4
 8010ede:	eb19 090b 	adds.w	r9, r9, fp
 8010ee2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010ee6:	f04f 0100 	mov.w	r1, #0
 8010eea:	f04f 0200 	mov.w	r2, #0
 8010eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010ef2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010ef6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010efa:	4689      	mov	r9, r1
 8010efc:	4692      	mov	sl, r2
 8010efe:	eb1b 0509 	adds.w	r5, fp, r9
 8010f02:	eb4c 060a 	adc.w	r6, ip, sl
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	f04f 0200 	mov.w	r2, #0
 8010f10:	f04f 0300 	mov.w	r3, #0
 8010f14:	f04f 0400 	mov.w	r4, #0
 8010f18:	0094      	lsls	r4, r2, #2
 8010f1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010f1e:	008b      	lsls	r3, r1, #2
 8010f20:	461a      	mov	r2, r3
 8010f22:	4623      	mov	r3, r4
 8010f24:	4628      	mov	r0, r5
 8010f26:	4631      	mov	r1, r6
 8010f28:	f7f0 f81c 	bl	8000f64 <__aeabi_uldivmod>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	460c      	mov	r4, r1
 8010f30:	461a      	mov	r2, r3
 8010f32:	4b32      	ldr	r3, [pc, #200]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010f34:	fba3 1302 	umull	r1, r3, r3, r2
 8010f38:	095b      	lsrs	r3, r3, #5
 8010f3a:	2164      	movs	r1, #100	; 0x64
 8010f3c:	fb01 f303 	mul.w	r3, r1, r3
 8010f40:	1ad3      	subs	r3, r2, r3
 8010f42:	011b      	lsls	r3, r3, #4
 8010f44:	3332      	adds	r3, #50	; 0x32
 8010f46:	4a2d      	ldr	r2, [pc, #180]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010f48:	fba2 2303 	umull	r2, r3, r2, r3
 8010f4c:	095b      	lsrs	r3, r3, #5
 8010f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f52:	4498      	add	r8, r3
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	469b      	mov	fp, r3
 8010f58:	f04f 0c00 	mov.w	ip, #0
 8010f5c:	46d9      	mov	r9, fp
 8010f5e:	46e2      	mov	sl, ip
 8010f60:	eb19 0309 	adds.w	r3, r9, r9
 8010f64:	eb4a 040a 	adc.w	r4, sl, sl
 8010f68:	4699      	mov	r9, r3
 8010f6a:	46a2      	mov	sl, r4
 8010f6c:	eb19 090b 	adds.w	r9, r9, fp
 8010f70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010f74:	f04f 0100 	mov.w	r1, #0
 8010f78:	f04f 0200 	mov.w	r2, #0
 8010f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010f80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010f84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010f88:	4689      	mov	r9, r1
 8010f8a:	4692      	mov	sl, r2
 8010f8c:	eb1b 0509 	adds.w	r5, fp, r9
 8010f90:	eb4c 060a 	adc.w	r6, ip, sl
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	4619      	mov	r1, r3
 8010f9a:	f04f 0200 	mov.w	r2, #0
 8010f9e:	f04f 0300 	mov.w	r3, #0
 8010fa2:	f04f 0400 	mov.w	r4, #0
 8010fa6:	0094      	lsls	r4, r2, #2
 8010fa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010fac:	008b      	lsls	r3, r1, #2
 8010fae:	461a      	mov	r2, r3
 8010fb0:	4623      	mov	r3, r4
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	f7ef ffd5 	bl	8000f64 <__aeabi_uldivmod>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	460c      	mov	r4, r1
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	4b0e      	ldr	r3, [pc, #56]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8010fc6:	095b      	lsrs	r3, r3, #5
 8010fc8:	2164      	movs	r1, #100	; 0x64
 8010fca:	fb01 f303 	mul.w	r3, r1, r3
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	011b      	lsls	r3, r3, #4
 8010fd2:	3332      	adds	r3, #50	; 0x32
 8010fd4:	4a09      	ldr	r2, [pc, #36]	; (8010ffc <UART_SetConfig+0x6f4>)
 8010fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8010fda:	095b      	lsrs	r3, r3, #5
 8010fdc:	f003 020f 	and.w	r2, r3, #15
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4442      	add	r2, r8
 8010fe6:	609a      	str	r2, [r3, #8]
}
 8010fe8:	e7ff      	b.n	8010fea <UART_SetConfig+0x6e2>
 8010fea:	bf00      	nop
 8010fec:	3714      	adds	r7, #20
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff4:	40011000 	.word	0x40011000
 8010ff8:	40011400 	.word	0x40011400
 8010ffc:	51eb851f 	.word	0x51eb851f

08011000 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011000:	b084      	sub	sp, #16
 8011002:	b480      	push	{r7}
 8011004:	b085      	sub	sp, #20
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]
 801100a:	f107 001c 	add.w	r0, r7, #28
 801100e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011012:	2300      	movs	r3, #0
 8011014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011016:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011018:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801101a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801101e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011020:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011022:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8011026:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801102a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801102c:	68fa      	ldr	r2, [r7, #12]
 801102e:	4313      	orrs	r3, r2
 8011030:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801103a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801103e:	68fa      	ldr	r2, [r7, #12]
 8011040:	431a      	orrs	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011046:	2300      	movs	r3, #0
}
 8011048:	4618      	mov	r0, r3
 801104a:	3714      	adds	r7, #20
 801104c:	46bd      	mov	sp, r7
 801104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011052:	b004      	add	sp, #16
 8011054:	4770      	bx	lr

08011056 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8011056:	b480      	push	{r7}
 8011058:	b083      	sub	sp, #12
 801105a:	af00      	add	r7, sp, #0
 801105c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011064:	4618      	mov	r0, r3
 8011066:	370c      	adds	r7, #12
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr

08011070 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011084:	2300      	movs	r3, #0
}
 8011086:	4618      	mov	r0, r3
 8011088:	370c      	adds	r7, #12
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr

08011092 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8011092:	b580      	push	{r7, lr}
 8011094:	b082      	sub	sp, #8
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2203      	movs	r2, #3
 801109e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80110a0:	2002      	movs	r0, #2
 80110a2:	f7f8 f87b 	bl	800919c <HAL_Delay>
  
  return HAL_OK;
 80110a6:	2300      	movs	r3, #0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3708      	adds	r7, #8
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80110b0:	b480      	push	{r7}
 80110b2:	b083      	sub	sp, #12
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f003 0303 	and.w	r3, r3, #3
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b085      	sub	sp, #20
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80110d6:	2300      	movs	r3, #0
 80110d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80110f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80110f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110f8:	68fa      	ldr	r2, [r7, #12]
 80110fa:	4313      	orrs	r3, r2
 80110fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	68db      	ldr	r3, [r3, #12]
 8011102:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011106:	f023 030f 	bic.w	r3, r3, #15
 801110a:	68fa      	ldr	r2, [r7, #12]
 801110c:	431a      	orrs	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3714      	adds	r7, #20
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr

08011120 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	691b      	ldr	r3, [r3, #16]
 801112c:	b2db      	uxtb	r3, r3
}
 801112e:	4618      	mov	r0, r3
 8011130:	370c      	adds	r7, #12
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr

0801113a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801113a:	b480      	push	{r7}
 801113c:	b085      	sub	sp, #20
 801113e:	af00      	add	r7, sp, #0
 8011140:	6078      	str	r0, [r7, #4]
 8011142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	3314      	adds	r3, #20
 8011148:	461a      	mov	r2, r3
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	4413      	add	r3, r2
 801114e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
}  
 8011154:	4618      	mov	r0, r3
 8011156:	3714      	adds	r7, #20
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr

08011160 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	685a      	ldr	r2, [r3, #4]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011186:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801118c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011192:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011194:	68fa      	ldr	r2, [r7, #12]
 8011196:	4313      	orrs	r3, r2
 8011198:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801119e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	431a      	orrs	r2, r3
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80111aa:	2300      	movs	r3, #0

}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3714      	adds	r7, #20
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b088      	sub	sp, #32
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80111c6:	2310      	movs	r3, #16
 80111c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80111ca:	2340      	movs	r3, #64	; 0x40
 80111cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80111ce:	2300      	movs	r3, #0
 80111d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80111d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80111d8:	f107 0308 	add.w	r3, r7, #8
 80111dc:	4619      	mov	r1, r3
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f7ff ff74 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80111e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80111e8:	2110      	movs	r1, #16
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 fa40 	bl	8011670 <SDMMC_GetCmdResp1>
 80111f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111f2:	69fb      	ldr	r3, [r7, #28]
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3720      	adds	r7, #32
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b088      	sub	sp, #32
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801120a:	2311      	movs	r3, #17
 801120c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801120e:	2340      	movs	r3, #64	; 0x40
 8011210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011212:	2300      	movs	r3, #0
 8011214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801121a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801121c:	f107 0308 	add.w	r3, r7, #8
 8011220:	4619      	mov	r1, r3
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7ff ff52 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011228:	f241 3288 	movw	r2, #5000	; 0x1388
 801122c:	2111      	movs	r1, #17
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 fa1e 	bl	8011670 <SDMMC_GetCmdResp1>
 8011234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011236:	69fb      	ldr	r3, [r7, #28]
}
 8011238:	4618      	mov	r0, r3
 801123a:	3720      	adds	r7, #32
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}

08011240 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b088      	sub	sp, #32
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801124e:	2312      	movs	r3, #18
 8011250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011252:	2340      	movs	r3, #64	; 0x40
 8011254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011256:	2300      	movs	r3, #0
 8011258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801125e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011260:	f107 0308 	add.w	r3, r7, #8
 8011264:	4619      	mov	r1, r3
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7ff ff30 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801126c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011270:	2112      	movs	r1, #18
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 f9fc 	bl	8011670 <SDMMC_GetCmdResp1>
 8011278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801127a:	69fb      	ldr	r3, [r7, #28]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3720      	adds	r7, #32
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b088      	sub	sp, #32
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011292:	2318      	movs	r3, #24
 8011294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011296:	2340      	movs	r3, #64	; 0x40
 8011298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801129a:	2300      	movs	r3, #0
 801129c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801129e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80112a4:	f107 0308 	add.w	r3, r7, #8
 80112a8:	4619      	mov	r1, r3
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7ff ff0e 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80112b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80112b4:	2118      	movs	r1, #24
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f000 f9da 	bl	8011670 <SDMMC_GetCmdResp1>
 80112bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112be:	69fb      	ldr	r3, [r7, #28]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3720      	adds	r7, #32
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b088      	sub	sp, #32
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80112d6:	2319      	movs	r3, #25
 80112d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80112da:	2340      	movs	r3, #64	; 0x40
 80112dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80112de:	2300      	movs	r3, #0
 80112e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80112e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80112e8:	f107 0308 	add.w	r3, r7, #8
 80112ec:	4619      	mov	r1, r3
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f7ff feec 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80112f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80112f8:	2119      	movs	r1, #25
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f000 f9b8 	bl	8011670 <SDMMC_GetCmdResp1>
 8011300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011302:	69fb      	ldr	r3, [r7, #28]
}
 8011304:	4618      	mov	r0, r3
 8011306:	3720      	adds	r7, #32
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b088      	sub	sp, #32
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011314:	2300      	movs	r3, #0
 8011316:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011318:	230c      	movs	r3, #12
 801131a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801131c:	2340      	movs	r3, #64	; 0x40
 801131e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011320:	2300      	movs	r3, #0
 8011322:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011328:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801132a:	f107 0308 	add.w	r3, r7, #8
 801132e:	4619      	mov	r1, r3
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f7ff fecb 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8011336:	4a05      	ldr	r2, [pc, #20]	; (801134c <SDMMC_CmdStopTransfer+0x40>)
 8011338:	210c      	movs	r1, #12
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f000 f998 	bl	8011670 <SDMMC_GetCmdResp1>
 8011340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011342:	69fb      	ldr	r3, [r7, #28]
}
 8011344:	4618      	mov	r0, r3
 8011346:	3720      	adds	r7, #32
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	05f5e100 	.word	0x05f5e100

08011350 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b08a      	sub	sp, #40	; 0x28
 8011354:	af00      	add	r7, sp, #0
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011360:	2307      	movs	r3, #7
 8011362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011364:	2340      	movs	r3, #64	; 0x40
 8011366:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011368:	2300      	movs	r3, #0
 801136a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011370:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011372:	f107 0310 	add.w	r3, r7, #16
 8011376:	4619      	mov	r1, r3
 8011378:	68f8      	ldr	r0, [r7, #12]
 801137a:	f7ff fea7 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801137e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011382:	2107      	movs	r1, #7
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f000 f973 	bl	8011670 <SDMMC_GetCmdResp1>
 801138a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801138e:	4618      	mov	r0, r3
 8011390:	3728      	adds	r7, #40	; 0x28
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}

08011396 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8011396:	b580      	push	{r7, lr}
 8011398:	b088      	sub	sp, #32
 801139a:	af00      	add	r7, sp, #0
 801139c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801139e:	2300      	movs	r3, #0
 80113a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80113a2:	2300      	movs	r3, #0
 80113a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80113a6:	2300      	movs	r3, #0
 80113a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80113aa:	2300      	movs	r3, #0
 80113ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80113ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80113b4:	f107 0308 	add.w	r3, r7, #8
 80113b8:	4619      	mov	r1, r3
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f7ff fe86 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f000 f92d 	bl	8011620 <SDMMC_GetCmdError>
 80113c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113c8:	69fb      	ldr	r3, [r7, #28]
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3720      	adds	r7, #32
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}

080113d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80113d2:	b580      	push	{r7, lr}
 80113d4:	b088      	sub	sp, #32
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80113da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80113de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80113e0:	2308      	movs	r3, #8
 80113e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80113e4:	2340      	movs	r3, #64	; 0x40
 80113e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80113e8:	2300      	movs	r3, #0
 80113ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80113ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80113f2:	f107 0308 	add.w	r3, r7, #8
 80113f6:	4619      	mov	r1, r3
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7ff fe67 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f000 fb16 	bl	8011a30 <SDMMC_GetCmdResp7>
 8011404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011406:	69fb      	ldr	r3, [r7, #28]
}
 8011408:	4618      	mov	r0, r3
 801140a:	3720      	adds	r7, #32
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b088      	sub	sp, #32
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801141e:	2337      	movs	r3, #55	; 0x37
 8011420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011422:	2340      	movs	r3, #64	; 0x40
 8011424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011426:	2300      	movs	r3, #0
 8011428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801142e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011430:	f107 0308 	add.w	r3, r7, #8
 8011434:	4619      	mov	r1, r3
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7ff fe48 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801143c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011440:	2137      	movs	r1, #55	; 0x37
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 f914 	bl	8011670 <SDMMC_GetCmdResp1>
 8011448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801144a:	69fb      	ldr	r3, [r7, #28]
}
 801144c:	4618      	mov	r0, r3
 801144e:	3720      	adds	r7, #32
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b088      	sub	sp, #32
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801146a:	2329      	movs	r3, #41	; 0x29
 801146c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801146e:	2340      	movs	r3, #64	; 0x40
 8011470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011472:	2300      	movs	r3, #0
 8011474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801147a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801147c:	f107 0308 	add.w	r3, r7, #8
 8011480:	4619      	mov	r1, r3
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7ff fe22 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f000 fa23 	bl	80118d4 <SDMMC_GetCmdResp3>
 801148e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011490:	69fb      	ldr	r3, [r7, #28]
}
 8011492:	4618      	mov	r0, r3
 8011494:	3720      	adds	r7, #32
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}

0801149a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801149a:	b580      	push	{r7, lr}
 801149c:	b088      	sub	sp, #32
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
 80114a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80114a8:	2306      	movs	r3, #6
 80114aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80114ac:	2340      	movs	r3, #64	; 0x40
 80114ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80114b0:	2300      	movs	r3, #0
 80114b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80114b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80114ba:	f107 0308 	add.w	r3, r7, #8
 80114be:	4619      	mov	r1, r3
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f7ff fe03 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80114c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80114ca:	2106      	movs	r1, #6
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f000 f8cf 	bl	8011670 <SDMMC_GetCmdResp1>
 80114d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114d4:	69fb      	ldr	r3, [r7, #28]
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3720      	adds	r7, #32
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}

080114de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b088      	sub	sp, #32
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80114e6:	2300      	movs	r3, #0
 80114e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80114ea:	2333      	movs	r3, #51	; 0x33
 80114ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80114ee:	2340      	movs	r3, #64	; 0x40
 80114f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80114f2:	2300      	movs	r3, #0
 80114f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80114f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80114fc:	f107 0308 	add.w	r3, r7, #8
 8011500:	4619      	mov	r1, r3
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f7ff fde2 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8011508:	f241 3288 	movw	r2, #5000	; 0x1388
 801150c:	2133      	movs	r1, #51	; 0x33
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f000 f8ae 	bl	8011670 <SDMMC_GetCmdResp1>
 8011514:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011516:	69fb      	ldr	r3, [r7, #28]
}
 8011518:	4618      	mov	r0, r3
 801151a:	3720      	adds	r7, #32
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b088      	sub	sp, #32
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011528:	2300      	movs	r3, #0
 801152a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801152c:	2302      	movs	r3, #2
 801152e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011530:	23c0      	movs	r3, #192	; 0xc0
 8011532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011534:	2300      	movs	r3, #0
 8011536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801153c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801153e:	f107 0308 	add.w	r3, r7, #8
 8011542:	4619      	mov	r1, r3
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7ff fdc1 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f000 f97c 	bl	8011848 <SDMMC_GetCmdResp2>
 8011550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011552:	69fb      	ldr	r3, [r7, #28]
}
 8011554:	4618      	mov	r0, r3
 8011556:	3720      	adds	r7, #32
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b088      	sub	sp, #32
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801156a:	2309      	movs	r3, #9
 801156c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801156e:	23c0      	movs	r3, #192	; 0xc0
 8011570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011572:	2300      	movs	r3, #0
 8011574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801157a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801157c:	f107 0308 	add.w	r3, r7, #8
 8011580:	4619      	mov	r1, r3
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f7ff fda2 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f000 f95d 	bl	8011848 <SDMMC_GetCmdResp2>
 801158e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011590:	69fb      	ldr	r3, [r7, #28]
}
 8011592:	4618      	mov	r0, r3
 8011594:	3720      	adds	r7, #32
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801159a:	b580      	push	{r7, lr}
 801159c:	b088      	sub	sp, #32
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
 80115a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80115a4:	2300      	movs	r3, #0
 80115a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80115a8:	2303      	movs	r3, #3
 80115aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80115ac:	2340      	movs	r3, #64	; 0x40
 80115ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80115b0:	2300      	movs	r3, #0
 80115b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80115b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80115ba:	f107 0308 	add.w	r3, r7, #8
 80115be:	4619      	mov	r1, r3
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f7ff fd83 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80115c6:	683a      	ldr	r2, [r7, #0]
 80115c8:	2103      	movs	r1, #3
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 f9bc 	bl	8011948 <SDMMC_GetCmdResp6>
 80115d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115d2:	69fb      	ldr	r3, [r7, #28]
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3720      	adds	r7, #32
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b088      	sub	sp, #32
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80115ea:	230d      	movs	r3, #13
 80115ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80115ee:	2340      	movs	r3, #64	; 0x40
 80115f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80115f2:	2300      	movs	r3, #0
 80115f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80115f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80115fc:	f107 0308 	add.w	r3, r7, #8
 8011600:	4619      	mov	r1, r3
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f7ff fd62 	bl	80110cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8011608:	f241 3288 	movw	r2, #5000	; 0x1388
 801160c:	210d      	movs	r1, #13
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f000 f82e 	bl	8011670 <SDMMC_GetCmdResp1>
 8011614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011616:	69fb      	ldr	r3, [r7, #28]
}
 8011618:	4618      	mov	r0, r3
 801161a:	3720      	adds	r7, #32
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8011620:	b490      	push	{r4, r7}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011628:	4b0f      	ldr	r3, [pc, #60]	; (8011668 <SDMMC_GetCmdError+0x48>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4a0f      	ldr	r2, [pc, #60]	; (801166c <SDMMC_GetCmdError+0x4c>)
 801162e:	fba2 2303 	umull	r2, r3, r2, r3
 8011632:	0a5b      	lsrs	r3, r3, #9
 8011634:	f241 3288 	movw	r2, #5000	; 0x1388
 8011638:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801163c:	4623      	mov	r3, r4
 801163e:	1e5c      	subs	r4, r3, #1
 8011640:	2b00      	cmp	r3, #0
 8011642:	d102      	bne.n	801164a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011644:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011648:	e009      	b.n	801165e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011652:	2b00      	cmp	r3, #0
 8011654:	d0f2      	beq.n	801163c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	22c5      	movs	r2, #197	; 0xc5
 801165a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801165c:	2300      	movs	r3, #0
}
 801165e:	4618      	mov	r0, r3
 8011660:	3708      	adds	r7, #8
 8011662:	46bd      	mov	sp, r7
 8011664:	bc90      	pop	{r4, r7}
 8011666:	4770      	bx	lr
 8011668:	200001b0 	.word	0x200001b0
 801166c:	10624dd3 	.word	0x10624dd3

08011670 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011670:	b590      	push	{r4, r7, lr}
 8011672:	b087      	sub	sp, #28
 8011674:	af00      	add	r7, sp, #0
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	460b      	mov	r3, r1
 801167a:	607a      	str	r2, [r7, #4]
 801167c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801167e:	4b6f      	ldr	r3, [pc, #444]	; (801183c <SDMMC_GetCmdResp1+0x1cc>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	4a6f      	ldr	r2, [pc, #444]	; (8011840 <SDMMC_GetCmdResp1+0x1d0>)
 8011684:	fba2 2303 	umull	r2, r3, r2, r3
 8011688:	0a5b      	lsrs	r3, r3, #9
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011690:	4623      	mov	r3, r4
 8011692:	1e5c      	subs	r4, r3, #1
 8011694:	2b00      	cmp	r3, #0
 8011696:	d102      	bne.n	801169e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011698:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801169c:	e0c9      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116a2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d0f0      	beq.n	8011690 <SDMMC_GetCmdResp1+0x20>
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1eb      	bne.n	8011690 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116bc:	f003 0304 	and.w	r3, r3, #4
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d004      	beq.n	80116ce <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2204      	movs	r2, #4
 80116c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80116ca:	2304      	movs	r3, #4
 80116cc:	e0b1      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116d2:	f003 0301 	and.w	r3, r3, #1
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d004      	beq.n	80116e4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2201      	movs	r2, #1
 80116de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80116e0:	2301      	movs	r3, #1
 80116e2:	e0a6      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	22c5      	movs	r2, #197	; 0xc5
 80116e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80116ea:	68f8      	ldr	r0, [r7, #12]
 80116ec:	f7ff fd18 	bl	8011120 <SDIO_GetCommandResponse>
 80116f0:	4603      	mov	r3, r0
 80116f2:	461a      	mov	r2, r3
 80116f4:	7afb      	ldrb	r3, [r7, #11]
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d001      	beq.n	80116fe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80116fa:	2301      	movs	r3, #1
 80116fc:	e099      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80116fe:	2100      	movs	r1, #0
 8011700:	68f8      	ldr	r0, [r7, #12]
 8011702:	f7ff fd1a 	bl	801113a <SDIO_GetResponse>
 8011706:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011708:	693a      	ldr	r2, [r7, #16]
 801170a:	4b4e      	ldr	r3, [pc, #312]	; (8011844 <SDMMC_GetCmdResp1+0x1d4>)
 801170c:	4013      	ands	r3, r2
 801170e:	2b00      	cmp	r3, #0
 8011710:	d101      	bne.n	8011716 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8011712:	2300      	movs	r3, #0
 8011714:	e08d      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	2b00      	cmp	r3, #0
 801171a:	da02      	bge.n	8011722 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801171c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011720:	e087      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011728:	2b00      	cmp	r3, #0
 801172a:	d001      	beq.n	8011730 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801172c:	2340      	movs	r3, #64	; 0x40
 801172e:	e080      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801173a:	2380      	movs	r3, #128	; 0x80
 801173c:	e079      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011744:	2b00      	cmp	r3, #0
 8011746:	d002      	beq.n	801174e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011748:	f44f 7380 	mov.w	r3, #256	; 0x100
 801174c:	e071      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011754:	2b00      	cmp	r3, #0
 8011756:	d002      	beq.n	801175e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011758:	f44f 7300 	mov.w	r3, #512	; 0x200
 801175c:	e069      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011764:	2b00      	cmp	r3, #0
 8011766:	d002      	beq.n	801176e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801176c:	e061      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011774:	2b00      	cmp	r3, #0
 8011776:	d002      	beq.n	801177e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801177c:	e059      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801178c:	e051      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011794:	2b00      	cmp	r3, #0
 8011796:	d002      	beq.n	801179e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801179c:	e049      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d002      	beq.n	80117ae <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80117a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80117ac:	e041      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d002      	beq.n	80117be <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80117b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117bc:	e039      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d002      	beq.n	80117ce <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80117c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80117cc:	e031      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d002      	beq.n	80117de <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80117d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80117dc:	e029      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d002      	beq.n	80117ee <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80117e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80117ec:	e021      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d002      	beq.n	80117fe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80117f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80117fc:	e019      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011804:	2b00      	cmp	r3, #0
 8011806:	d002      	beq.n	801180e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011808:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801180c:	e011      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011814:	2b00      	cmp	r3, #0
 8011816:	d002      	beq.n	801181e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011818:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801181c:	e009      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	f003 0308 	and.w	r3, r3, #8
 8011824:	2b00      	cmp	r3, #0
 8011826:	d002      	beq.n	801182e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011828:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801182c:	e001      	b.n	8011832 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801182e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011832:	4618      	mov	r0, r3
 8011834:	371c      	adds	r7, #28
 8011836:	46bd      	mov	sp, r7
 8011838:	bd90      	pop	{r4, r7, pc}
 801183a:	bf00      	nop
 801183c:	200001b0 	.word	0x200001b0
 8011840:	10624dd3 	.word	0x10624dd3
 8011844:	fdffe008 	.word	0xfdffe008

08011848 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011848:	b490      	push	{r4, r7}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011850:	4b1e      	ldr	r3, [pc, #120]	; (80118cc <SDMMC_GetCmdResp2+0x84>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4a1e      	ldr	r2, [pc, #120]	; (80118d0 <SDMMC_GetCmdResp2+0x88>)
 8011856:	fba2 2303 	umull	r2, r3, r2, r3
 801185a:	0a5b      	lsrs	r3, r3, #9
 801185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011860:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011864:	4623      	mov	r3, r4
 8011866:	1e5c      	subs	r4, r3, #1
 8011868:	2b00      	cmp	r3, #0
 801186a:	d102      	bne.n	8011872 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801186c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011870:	e026      	b.n	80118c0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011876:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801187e:	2b00      	cmp	r3, #0
 8011880:	d0f0      	beq.n	8011864 <SDMMC_GetCmdResp2+0x1c>
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011888:	2b00      	cmp	r3, #0
 801188a:	d1eb      	bne.n	8011864 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011890:	f003 0304 	and.w	r3, r3, #4
 8011894:	2b00      	cmp	r3, #0
 8011896:	d004      	beq.n	80118a2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2204      	movs	r2, #4
 801189c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801189e:	2304      	movs	r3, #4
 80118a0:	e00e      	b.n	80118c0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118a6:	f003 0301 	and.w	r3, r3, #1
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d004      	beq.n	80118b8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2201      	movs	r2, #1
 80118b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80118b4:	2301      	movs	r3, #1
 80118b6:	e003      	b.n	80118c0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	22c5      	movs	r2, #197	; 0xc5
 80118bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3710      	adds	r7, #16
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bc90      	pop	{r4, r7}
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	200001b0 	.word	0x200001b0
 80118d0:	10624dd3 	.word	0x10624dd3

080118d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80118d4:	b490      	push	{r4, r7}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118dc:	4b18      	ldr	r3, [pc, #96]	; (8011940 <SDMMC_GetCmdResp3+0x6c>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a18      	ldr	r2, [pc, #96]	; (8011944 <SDMMC_GetCmdResp3+0x70>)
 80118e2:	fba2 2303 	umull	r2, r3, r2, r3
 80118e6:	0a5b      	lsrs	r3, r3, #9
 80118e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80118ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80118f0:	4623      	mov	r3, r4
 80118f2:	1e5c      	subs	r4, r3, #1
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d102      	bne.n	80118fe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118fc:	e01b      	b.n	8011936 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011902:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801190a:	2b00      	cmp	r3, #0
 801190c:	d0f0      	beq.n	80118f0 <SDMMC_GetCmdResp3+0x1c>
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1eb      	bne.n	80118f0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801191c:	f003 0304 	and.w	r3, r3, #4
 8011920:	2b00      	cmp	r3, #0
 8011922:	d004      	beq.n	801192e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2204      	movs	r2, #4
 8011928:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801192a:	2304      	movs	r3, #4
 801192c:	e003      	b.n	8011936 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	22c5      	movs	r2, #197	; 0xc5
 8011932:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bc90      	pop	{r4, r7}
 801193e:	4770      	bx	lr
 8011940:	200001b0 	.word	0x200001b0
 8011944:	10624dd3 	.word	0x10624dd3

08011948 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011948:	b590      	push	{r4, r7, lr}
 801194a:	b087      	sub	sp, #28
 801194c:	af00      	add	r7, sp, #0
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	460b      	mov	r3, r1
 8011952:	607a      	str	r2, [r7, #4]
 8011954:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011956:	4b34      	ldr	r3, [pc, #208]	; (8011a28 <SDMMC_GetCmdResp6+0xe0>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4a34      	ldr	r2, [pc, #208]	; (8011a2c <SDMMC_GetCmdResp6+0xe4>)
 801195c:	fba2 2303 	umull	r2, r3, r2, r3
 8011960:	0a5b      	lsrs	r3, r3, #9
 8011962:	f241 3288 	movw	r2, #5000	; 0x1388
 8011966:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801196a:	4623      	mov	r3, r4
 801196c:	1e5c      	subs	r4, r3, #1
 801196e:	2b00      	cmp	r3, #0
 8011970:	d102      	bne.n	8011978 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011972:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011976:	e052      	b.n	8011a1e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801197c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011984:	2b00      	cmp	r3, #0
 8011986:	d0f0      	beq.n	801196a <SDMMC_GetCmdResp6+0x22>
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801198e:	2b00      	cmp	r3, #0
 8011990:	d1eb      	bne.n	801196a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011996:	f003 0304 	and.w	r3, r3, #4
 801199a:	2b00      	cmp	r3, #0
 801199c:	d004      	beq.n	80119a8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2204      	movs	r2, #4
 80119a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119a4:	2304      	movs	r3, #4
 80119a6:	e03a      	b.n	8011a1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ac:	f003 0301 	and.w	r3, r3, #1
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d004      	beq.n	80119be <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	2201      	movs	r2, #1
 80119b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119ba:	2301      	movs	r3, #1
 80119bc:	e02f      	b.n	8011a1e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80119be:	68f8      	ldr	r0, [r7, #12]
 80119c0:	f7ff fbae 	bl	8011120 <SDIO_GetCommandResponse>
 80119c4:	4603      	mov	r3, r0
 80119c6:	461a      	mov	r2, r3
 80119c8:	7afb      	ldrb	r3, [r7, #11]
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d001      	beq.n	80119d2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119ce:	2301      	movs	r3, #1
 80119d0:	e025      	b.n	8011a1e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	22c5      	movs	r2, #197	; 0xc5
 80119d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80119d8:	2100      	movs	r1, #0
 80119da:	68f8      	ldr	r0, [r7, #12]
 80119dc:	f7ff fbad 	bl	801113a <SDIO_GetResponse>
 80119e0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d106      	bne.n	80119fa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	0c1b      	lsrs	r3, r3, #16
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80119f6:	2300      	movs	r3, #0
 80119f8:	e011      	b.n	8011a1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d002      	beq.n	8011a0a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a08:	e009      	b.n	8011a1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d002      	beq.n	8011a1a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a18:	e001      	b.n	8011a1e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	371c      	adds	r7, #28
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd90      	pop	{r4, r7, pc}
 8011a26:	bf00      	nop
 8011a28:	200001b0 	.word	0x200001b0
 8011a2c:	10624dd3 	.word	0x10624dd3

08011a30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011a30:	b490      	push	{r4, r7}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a38:	4b21      	ldr	r3, [pc, #132]	; (8011ac0 <SDMMC_GetCmdResp7+0x90>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4a21      	ldr	r2, [pc, #132]	; (8011ac4 <SDMMC_GetCmdResp7+0x94>)
 8011a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a42:	0a5b      	lsrs	r3, r3, #9
 8011a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011a4c:	4623      	mov	r3, r4
 8011a4e:	1e5c      	subs	r4, r3, #1
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d102      	bne.n	8011a5a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a58:	e02c      	b.n	8011ab4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a5e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d0f0      	beq.n	8011a4c <SDMMC_GetCmdResp7+0x1c>
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d1eb      	bne.n	8011a4c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a78:	f003 0304 	and.w	r3, r3, #4
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d004      	beq.n	8011a8a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2204      	movs	r2, #4
 8011a84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a86:	2304      	movs	r3, #4
 8011a88:	e014      	b.n	8011ab4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a8e:	f003 0301 	and.w	r3, r3, #1
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d004      	beq.n	8011aa0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2201      	movs	r2, #1
 8011a9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e009      	b.n	8011ab4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d002      	beq.n	8011ab2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2240      	movs	r2, #64	; 0x40
 8011ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011ab2:	2300      	movs	r3, #0
  
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3710      	adds	r7, #16
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bc90      	pop	{r4, r7}
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	200001b0 	.word	0x200001b0
 8011ac4:	10624dd3 	.word	0x10624dd3

08011ac8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011ac8:	b084      	sub	sp, #16
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b084      	sub	sp, #16
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
 8011ad2:	f107 001c 	add.w	r0, r7, #28
 8011ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d122      	bne.n	8011b26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011af8:	687a      	ldr	r2, [r7, #4]
 8011afa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b0a:	2b01      	cmp	r3, #1
 8011b0c:	d105      	bne.n	8011b1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	68db      	ldr	r3, [r3, #12]
 8011b12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f000 fa4e 	bl	8011fbc <USB_CoreReset>
 8011b20:	4603      	mov	r3, r0
 8011b22:	73fb      	strb	r3, [r7, #15]
 8011b24:	e01a      	b.n	8011b5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 fa42 	bl	8011fbc <USB_CoreReset>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d106      	bne.n	8011b50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	639a      	str	r2, [r3, #56]	; 0x38
 8011b4e:	e005      	b.n	8011b5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d10b      	bne.n	8011b7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	689b      	ldr	r3, [r3, #8]
 8011b66:	f043 0206 	orr.w	r2, r3, #6
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	689b      	ldr	r3, [r3, #8]
 8011b72:	f043 0220 	orr.w	r2, r3, #32
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3710      	adds	r7, #16
 8011b80:	46bd      	mov	sp, r7
 8011b82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b86:	b004      	add	sp, #16
 8011b88:	4770      	bx	lr

08011b8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011b8a:	b480      	push	{r7}
 8011b8c:	b083      	sub	sp, #12
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	689b      	ldr	r3, [r3, #8]
 8011b96:	f023 0201 	bic.w	r2, r3, #1
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011b9e:	2300      	movs	r3, #0
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	370c      	adds	r7, #12
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011bc4:	78fb      	ldrb	r3, [r7, #3]
 8011bc6:	2b01      	cmp	r3, #1
 8011bc8:	d106      	bne.n	8011bd8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	60da      	str	r2, [r3, #12]
 8011bd6:	e00b      	b.n	8011bf0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011bd8:	78fb      	ldrb	r3, [r7, #3]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d106      	bne.n	8011bec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	68db      	ldr	r3, [r3, #12]
 8011be2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	60da      	str	r2, [r3, #12]
 8011bea:	e001      	b.n	8011bf0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011bec:	2301      	movs	r3, #1
 8011bee:	e003      	b.n	8011bf8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011bf0:	2032      	movs	r0, #50	; 0x32
 8011bf2:	f7f7 fad3 	bl	800919c <HAL_Delay>

  return HAL_OK;
 8011bf6:	2300      	movs	r3, #0
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011c00:	b084      	sub	sp, #16
 8011c02:	b580      	push	{r7, lr}
 8011c04:	b086      	sub	sp, #24
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
 8011c0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011c12:	2300      	movs	r3, #0
 8011c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	613b      	str	r3, [r7, #16]
 8011c1e:	e009      	b.n	8011c34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	3340      	adds	r3, #64	; 0x40
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	4413      	add	r3, r2
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	3301      	adds	r3, #1
 8011c32:	613b      	str	r3, [r7, #16]
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	2b0e      	cmp	r3, #14
 8011c38:	d9f2      	bls.n	8011c20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d11c      	bne.n	8011c7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c46:	685b      	ldr	r3, [r3, #4]
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c4e:	f043 0302 	orr.w	r3, r3, #2
 8011c52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	639a      	str	r2, [r3, #56]	; 0x38
 8011c78:	e00b      	b.n	8011c92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011c98:	461a      	mov	r2, r3
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cac:	461a      	mov	r2, r3
 8011cae:	680b      	ldr	r3, [r1, #0]
 8011cb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d10c      	bne.n	8011cd2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d104      	bne.n	8011cc8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011cbe:	2100      	movs	r1, #0
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 f949 	bl	8011f58 <USB_SetDevSpeed>
 8011cc6:	e008      	b.n	8011cda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011cc8:	2101      	movs	r1, #1
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f000 f944 	bl	8011f58 <USB_SetDevSpeed>
 8011cd0:	e003      	b.n	8011cda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011cd2:	2103      	movs	r1, #3
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f000 f93f 	bl	8011f58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011cda:	2110      	movs	r1, #16
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f000 f8f3 	bl	8011ec8 <USB_FlushTxFifo>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d001      	beq.n	8011cec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8011ce8:	2301      	movs	r3, #1
 8011cea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f000 f911 	bl	8011f14 <USB_FlushRxFifo>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d001      	beq.n	8011cfc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d02:	461a      	mov	r2, r3
 8011d04:	2300      	movs	r3, #0
 8011d06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d0e:	461a      	mov	r2, r3
 8011d10:	2300      	movs	r3, #0
 8011d12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011d20:	2300      	movs	r3, #0
 8011d22:	613b      	str	r3, [r7, #16]
 8011d24:	e043      	b.n	8011dae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	015a      	lsls	r2, r3, #5
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	4413      	add	r3, r2
 8011d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d3c:	d118      	bne.n	8011d70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d10a      	bne.n	8011d5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	015a      	lsls	r2, r3, #5
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	4413      	add	r3, r2
 8011d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d50:	461a      	mov	r2, r3
 8011d52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011d56:	6013      	str	r3, [r2, #0]
 8011d58:	e013      	b.n	8011d82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	015a      	lsls	r2, r3, #5
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	4413      	add	r3, r2
 8011d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d66:	461a      	mov	r2, r3
 8011d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011d6c:	6013      	str	r3, [r2, #0]
 8011d6e:	e008      	b.n	8011d82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	015a      	lsls	r2, r3, #5
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	4413      	add	r3, r2
 8011d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	2300      	movs	r3, #0
 8011d80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	015a      	lsls	r2, r3, #5
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	4413      	add	r3, r2
 8011d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d8e:	461a      	mov	r2, r3
 8011d90:	2300      	movs	r3, #0
 8011d92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	015a      	lsls	r2, r3, #5
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	4413      	add	r3, r2
 8011d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011da0:	461a      	mov	r2, r3
 8011da2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011da6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	3301      	adds	r3, #1
 8011dac:	613b      	str	r3, [r7, #16]
 8011dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db0:	693a      	ldr	r2, [r7, #16]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d3b7      	bcc.n	8011d26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011db6:	2300      	movs	r3, #0
 8011db8:	613b      	str	r3, [r7, #16]
 8011dba:	e043      	b.n	8011e44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	015a      	lsls	r2, r3, #5
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	4413      	add	r3, r2
 8011dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011dd2:	d118      	bne.n	8011e06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d10a      	bne.n	8011df0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	015a      	lsls	r2, r3, #5
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	4413      	add	r3, r2
 8011de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011de6:	461a      	mov	r2, r3
 8011de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011dec:	6013      	str	r3, [r2, #0]
 8011dee:	e013      	b.n	8011e18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	015a      	lsls	r2, r3, #5
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	4413      	add	r3, r2
 8011df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dfc:	461a      	mov	r2, r3
 8011dfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011e02:	6013      	str	r3, [r2, #0]
 8011e04:	e008      	b.n	8011e18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	015a      	lsls	r2, r3, #5
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	4413      	add	r3, r2
 8011e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e12:	461a      	mov	r2, r3
 8011e14:	2300      	movs	r3, #0
 8011e16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	015a      	lsls	r2, r3, #5
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	4413      	add	r3, r2
 8011e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e24:	461a      	mov	r2, r3
 8011e26:	2300      	movs	r3, #0
 8011e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	015a      	lsls	r2, r3, #5
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	4413      	add	r3, r2
 8011e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e36:	461a      	mov	r2, r3
 8011e38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011e3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	3301      	adds	r3, #1
 8011e42:	613b      	str	r3, [r7, #16]
 8011e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e46:	693a      	ldr	r2, [r7, #16]
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d3b7      	bcc.n	8011dbc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e52:	691b      	ldr	r3, [r3, #16]
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2200      	movs	r2, #0
 8011e64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011e6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d105      	bne.n	8011e80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	699b      	ldr	r3, [r3, #24]
 8011e78:	f043 0210 	orr.w	r2, r3, #16
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	699a      	ldr	r2, [r3, #24]
 8011e84:	4b0f      	ldr	r3, [pc, #60]	; (8011ec4 <USB_DevInit+0x2c4>)
 8011e86:	4313      	orrs	r3, r2
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d005      	beq.n	8011e9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	699b      	ldr	r3, [r3, #24]
 8011e96:	f043 0208 	orr.w	r2, r3, #8
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d107      	bne.n	8011eb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	699b      	ldr	r3, [r3, #24]
 8011ea8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011eac:	f043 0304 	orr.w	r3, r3, #4
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3718      	adds	r7, #24
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ec0:	b004      	add	sp, #16
 8011ec2:	4770      	bx	lr
 8011ec4:	803c3800 	.word	0x803c3800

08011ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	b085      	sub	sp, #20
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	019b      	lsls	r3, r3, #6
 8011eda:	f043 0220 	orr.w	r2, r3, #32
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	60fb      	str	r3, [r7, #12]
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	4a09      	ldr	r2, [pc, #36]	; (8011f10 <USB_FlushTxFifo+0x48>)
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d901      	bls.n	8011ef4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011ef0:	2303      	movs	r3, #3
 8011ef2:	e006      	b.n	8011f02 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	691b      	ldr	r3, [r3, #16]
 8011ef8:	f003 0320 	and.w	r3, r3, #32
 8011efc:	2b20      	cmp	r3, #32
 8011efe:	d0f0      	beq.n	8011ee2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3714      	adds	r7, #20
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	00030d40 	.word	0x00030d40

08011f14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b085      	sub	sp, #20
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2210      	movs	r2, #16
 8011f24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	3301      	adds	r3, #1
 8011f2a:	60fb      	str	r3, [r7, #12]
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	4a09      	ldr	r2, [pc, #36]	; (8011f54 <USB_FlushRxFifo+0x40>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d901      	bls.n	8011f38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011f34:	2303      	movs	r3, #3
 8011f36:	e006      	b.n	8011f46 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	691b      	ldr	r3, [r3, #16]
 8011f3c:	f003 0310 	and.w	r3, r3, #16
 8011f40:	2b10      	cmp	r3, #16
 8011f42:	d0f0      	beq.n	8011f26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011f44:	2300      	movs	r3, #0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3714      	adds	r7, #20
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	00030d40 	.word	0x00030d40

08011f58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b085      	sub	sp, #20
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	460b      	mov	r3, r1
 8011f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	78fb      	ldrb	r3, [r7, #3]
 8011f72:	68f9      	ldr	r1, [r7, #12]
 8011f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f78:	4313      	orrs	r3, r2
 8011f7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011f7c:	2300      	movs	r3, #0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3714      	adds	r7, #20
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b084      	sub	sp, #16
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	68fa      	ldr	r2, [r7, #12]
 8011fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011fa4:	f043 0302 	orr.w	r3, r3, #2
 8011fa8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011faa:	2003      	movs	r0, #3
 8011fac:	f7f7 f8f6 	bl	800919c <HAL_Delay>

  return HAL_OK;
 8011fb0:	2300      	movs	r3, #0
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3710      	adds	r7, #16
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
	...

08011fbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b085      	sub	sp, #20
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	60fb      	str	r3, [r7, #12]
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	4a13      	ldr	r2, [pc, #76]	; (8012020 <USB_CoreReset+0x64>)
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	d901      	bls.n	8011fda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011fd6:	2303      	movs	r3, #3
 8011fd8:	e01b      	b.n	8012012 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	daf2      	bge.n	8011fc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	f043 0201 	orr.w	r2, r3, #1
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	60fb      	str	r3, [r7, #12]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	4a09      	ldr	r2, [pc, #36]	; (8012020 <USB_CoreReset+0x64>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d901      	bls.n	8012004 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012000:	2303      	movs	r3, #3
 8012002:	e006      	b.n	8012012 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	691b      	ldr	r3, [r3, #16]
 8012008:	f003 0301 	and.w	r3, r3, #1
 801200c:	2b01      	cmp	r3, #1
 801200e:	d0f0      	beq.n	8011ff2 <USB_CoreReset+0x36>

  return HAL_OK;
 8012010:	2300      	movs	r3, #0
}
 8012012:	4618      	mov	r0, r3
 8012014:	3714      	adds	r7, #20
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop
 8012020:	00030d40 	.word	0x00030d40

08012024 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8012024:	b580      	push	{r7, lr}
 8012026:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012028:	4904      	ldr	r1, [pc, #16]	; (801203c <MX_FATFS_Init+0x18>)
 801202a:	4805      	ldr	r0, [pc, #20]	; (8012040 <MX_FATFS_Init+0x1c>)
 801202c:	f002 fda6 	bl	8014b7c <FATFS_LinkDriver>
 8012030:	4603      	mov	r3, r0
 8012032:	461a      	mov	r2, r3
 8012034:	4b03      	ldr	r3, [pc, #12]	; (8012044 <MX_FATFS_Init+0x20>)
 8012036:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8012038:	bf00      	nop
 801203a:	bd80      	pop	{r7, pc}
 801203c:	20005d20 	.word	0x20005d20
 8012040:	0801e56c 	.word	0x0801e56c
 8012044:	20005d1c 	.word	0x20005d1c

08012048 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012048:	b480      	push	{r7}
 801204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801204c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 801204e:	4618      	mov	r0, r3
 8012050:	46bd      	mov	sp, r7
 8012052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012056:	4770      	bx	lr

08012058 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801205e:	2300      	movs	r3, #0
 8012060:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012062:	f000 f896 	bl	8012192 <BSP_SD_IsDetected>
 8012066:	4603      	mov	r3, r0
 8012068:	2b01      	cmp	r3, #1
 801206a:	d001      	beq.n	8012070 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801206c:	2301      	movs	r3, #1
 801206e:	e012      	b.n	8012096 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8012070:	480b      	ldr	r0, [pc, #44]	; (80120a0 <BSP_SD_Init+0x48>)
 8012072:	f7fb fc35 	bl	800d8e0 <HAL_SD_Init>
 8012076:	4603      	mov	r3, r0
 8012078:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801207a:	79fb      	ldrb	r3, [r7, #7]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d109      	bne.n	8012094 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8012080:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012084:	4806      	ldr	r0, [pc, #24]	; (80120a0 <BSP_SD_Init+0x48>)
 8012086:	f7fc f9f5 	bl	800e474 <HAL_SD_ConfigWideBusOperation>
 801208a:	4603      	mov	r3, r0
 801208c:	2b00      	cmp	r3, #0
 801208e:	d001      	beq.n	8012094 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012090:	2301      	movs	r3, #1
 8012092:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012094:	79fb      	ldrb	r3, [r7, #7]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3708      	adds	r7, #8
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	2000554c 	.word	0x2000554c

080120a4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b086      	sub	sp, #24
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80120b0:	2300      	movs	r3, #0
 80120b2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	68ba      	ldr	r2, [r7, #8]
 80120b8:	68f9      	ldr	r1, [r7, #12]
 80120ba:	4806      	ldr	r0, [pc, #24]	; (80120d4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80120bc:	f7fb fca0 	bl	800da00 <HAL_SD_ReadBlocks_DMA>
 80120c0:	4603      	mov	r3, r0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d001      	beq.n	80120ca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80120c6:	2301      	movs	r3, #1
 80120c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80120ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3718      	adds	r7, #24
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	2000554c 	.word	0x2000554c

080120d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b086      	sub	sp, #24
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80120e4:	2300      	movs	r3, #0
 80120e6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	68f9      	ldr	r1, [r7, #12]
 80120ee:	4806      	ldr	r0, [pc, #24]	; (8012108 <BSP_SD_WriteBlocks_DMA+0x30>)
 80120f0:	f7fb fd70 	bl	800dbd4 <HAL_SD_WriteBlocks_DMA>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d001      	beq.n	80120fe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80120fa:	2301      	movs	r3, #1
 80120fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80120fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012100:	4618      	mov	r0, r3
 8012102:	3718      	adds	r7, #24
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	2000554c 	.word	0x2000554c

0801210c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012110:	4805      	ldr	r0, [pc, #20]	; (8012128 <BSP_SD_GetCardState+0x1c>)
 8012112:	f7fc fa2b 	bl	800e56c <HAL_SD_GetCardState>
 8012116:	4603      	mov	r3, r0
 8012118:	2b04      	cmp	r3, #4
 801211a:	bf14      	ite	ne
 801211c:	2301      	movne	r3, #1
 801211e:	2300      	moveq	r3, #0
 8012120:	b2db      	uxtb	r3, r3
}
 8012122:	4618      	mov	r0, r3
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	2000554c 	.word	0x2000554c

0801212c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012134:	6879      	ldr	r1, [r7, #4]
 8012136:	4803      	ldr	r0, [pc, #12]	; (8012144 <BSP_SD_GetCardInfo+0x18>)
 8012138:	f7fc f970 	bl	800e41c <HAL_SD_GetCardInfo>
}
 801213c:	bf00      	nop
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	2000554c 	.word	0x2000554c

08012148 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012150:	f000 f818 	bl	8012184 <BSP_SD_AbortCallback>
}
 8012154:	bf00      	nop
 8012156:	3708      	adds	r7, #8
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b082      	sub	sp, #8
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012164:	f000 f9b4 	bl	80124d0 <BSP_SD_WriteCpltCallback>
}
 8012168:	bf00      	nop
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012178:	f000 f9bc 	bl	80124f4 <BSP_SD_ReadCpltCallback>
}
 801217c:	bf00      	nop
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012184:	b480      	push	{r7}
 8012186:	af00      	add	r7, sp, #0

}
 8012188:	bf00      	nop
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr

08012192 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b082      	sub	sp, #8
 8012196:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012198:	2301      	movs	r3, #1
 801219a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 801219c:	f000 f80c 	bl	80121b8 <BSP_PlatformIsDetected>
 80121a0:	4603      	mov	r3, r0
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d101      	bne.n	80121aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80121a6:	2300      	movs	r3, #0
 80121a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80121aa:	79fb      	ldrb	r3, [r7, #7]
 80121ac:	b2db      	uxtb	r3, r3
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3708      	adds	r7, #8
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
	...

080121b8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80121be:	2301      	movs	r3, #1
 80121c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80121c2:	2108      	movs	r1, #8
 80121c4:	4806      	ldr	r0, [pc, #24]	; (80121e0 <BSP_PlatformIsDetected+0x28>)
 80121c6:	f7f7 fe41 	bl	8009e4c <HAL_GPIO_ReadPin>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80121d0:	2300      	movs	r3, #0
 80121d2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80121d4:	79fb      	ldrb	r3, [r7, #7]
}  
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	40021800 	.word	0x40021800

080121e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80121ec:	f002 fdb0 	bl	8014d50 <osKernelGetTickCount>
 80121f0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80121f2:	e006      	b.n	8012202 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80121f4:	f7ff ff8a 	bl	801210c <BSP_SD_GetCardState>
 80121f8:	4603      	mov	r3, r0
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d101      	bne.n	8012202 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80121fe:	2300      	movs	r3, #0
 8012200:	e009      	b.n	8012216 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8012202:	f002 fda5 	bl	8014d50 <osKernelGetTickCount>
 8012206:	4602      	mov	r2, r0
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	687a      	ldr	r2, [r7, #4]
 801220e:	429a      	cmp	r2, r3
 8012210:	d8f0      	bhi.n	80121f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012216:	4618      	mov	r0, r3
 8012218:	3710      	adds	r7, #16
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
	...

08012220 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	4603      	mov	r3, r0
 8012228:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801222a:	4b0b      	ldr	r3, [pc, #44]	; (8012258 <SD_CheckStatus+0x38>)
 801222c:	2201      	movs	r2, #1
 801222e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012230:	f7ff ff6c 	bl	801210c <BSP_SD_GetCardState>
 8012234:	4603      	mov	r3, r0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d107      	bne.n	801224a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801223a:	4b07      	ldr	r3, [pc, #28]	; (8012258 <SD_CheckStatus+0x38>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	b2db      	uxtb	r3, r3
 8012240:	f023 0301 	bic.w	r3, r3, #1
 8012244:	b2da      	uxtb	r2, r3
 8012246:	4b04      	ldr	r3, [pc, #16]	; (8012258 <SD_CheckStatus+0x38>)
 8012248:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801224a:	4b03      	ldr	r3, [pc, #12]	; (8012258 <SD_CheckStatus+0x38>)
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	b2db      	uxtb	r3, r3
}
 8012250:	4618      	mov	r0, r3
 8012252:	3708      	adds	r7, #8
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	200001b9 	.word	0x200001b9

0801225c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	4603      	mov	r3, r0
 8012264:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8012266:	4b1c      	ldr	r3, [pc, #112]	; (80122d8 <SD_initialize+0x7c>)
 8012268:	2201      	movs	r2, #1
 801226a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 801226c:	f002 fd18 	bl	8014ca0 <osKernelGetState>
 8012270:	4603      	mov	r3, r0
 8012272:	2b02      	cmp	r3, #2
 8012274:	d129      	bne.n	80122ca <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8012276:	f7ff feef 	bl	8012058 <BSP_SD_Init>
 801227a:	4603      	mov	r3, r0
 801227c:	2b00      	cmp	r3, #0
 801227e:	d107      	bne.n	8012290 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8012280:	79fb      	ldrb	r3, [r7, #7]
 8012282:	4618      	mov	r0, r3
 8012284:	f7ff ffcc 	bl	8012220 <SD_CheckStatus>
 8012288:	4603      	mov	r3, r0
 801228a:	461a      	mov	r2, r3
 801228c:	4b12      	ldr	r3, [pc, #72]	; (80122d8 <SD_initialize+0x7c>)
 801228e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012290:	4b11      	ldr	r3, [pc, #68]	; (80122d8 <SD_initialize+0x7c>)
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	b2db      	uxtb	r3, r3
 8012296:	2b01      	cmp	r3, #1
 8012298:	d017      	beq.n	80122ca <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801229a:	4b10      	ldr	r3, [pc, #64]	; (80122dc <SD_initialize+0x80>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d107      	bne.n	80122b2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80122a2:	2200      	movs	r2, #0
 80122a4:	2102      	movs	r1, #2
 80122a6:	200a      	movs	r0, #10
 80122a8:	f002 ffe0 	bl	801526c <osMessageQueueNew>
 80122ac:	4602      	mov	r2, r0
 80122ae:	4b0b      	ldr	r3, [pc, #44]	; (80122dc <SD_initialize+0x80>)
 80122b0:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 80122b2:	4b0a      	ldr	r3, [pc, #40]	; (80122dc <SD_initialize+0x80>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d107      	bne.n	80122ca <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80122ba:	4b07      	ldr	r3, [pc, #28]	; (80122d8 <SD_initialize+0x7c>)
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	f043 0301 	orr.w	r3, r3, #1
 80122c4:	b2da      	uxtb	r2, r3
 80122c6:	4b04      	ldr	r3, [pc, #16]	; (80122d8 <SD_initialize+0x7c>)
 80122c8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80122ca:	4b03      	ldr	r3, [pc, #12]	; (80122d8 <SD_initialize+0x7c>)
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	b2db      	uxtb	r3, r3
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	200001b9 	.word	0x200001b9
 80122dc:	20000a38 	.word	0x20000a38

080122e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	4603      	mov	r3, r0
 80122e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80122ea:	79fb      	ldrb	r3, [r7, #7]
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7ff ff97 	bl	8012220 <SD_CheckStatus>
 80122f2:	4603      	mov	r3, r0
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3708      	adds	r7, #8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b088      	sub	sp, #32
 8012300:	af00      	add	r7, sp, #0
 8012302:	60b9      	str	r1, [r7, #8]
 8012304:	607a      	str	r2, [r7, #4]
 8012306:	603b      	str	r3, [r7, #0]
 8012308:	4603      	mov	r3, r0
 801230a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801230c:	2301      	movs	r3, #1
 801230e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012310:	f247 5030 	movw	r0, #30000	; 0x7530
 8012314:	f7ff ff66 	bl	80121e4 <SD_CheckStatusWithTimeout>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	da01      	bge.n	8012322 <SD_read+0x26>
  {
    return res;
 801231e:	7ffb      	ldrb	r3, [r7, #31]
 8012320:	e02f      	b.n	8012382 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8012322:	683a      	ldr	r2, [r7, #0]
 8012324:	6879      	ldr	r1, [r7, #4]
 8012326:	68b8      	ldr	r0, [r7, #8]
 8012328:	f7ff febc 	bl	80120a4 <BSP_SD_ReadBlocks_DMA>
 801232c:	4603      	mov	r3, r0
 801232e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8012330:	7fbb      	ldrb	r3, [r7, #30]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d124      	bne.n	8012380 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8012336:	4b15      	ldr	r3, [pc, #84]	; (801238c <SD_read+0x90>)
 8012338:	6818      	ldr	r0, [r3, #0]
 801233a:	f107 0112 	add.w	r1, r7, #18
 801233e:	f247 5330 	movw	r3, #30000	; 0x7530
 8012342:	2200      	movs	r2, #0
 8012344:	f003 f88c 	bl	8015460 <osMessageQueueGet>
 8012348:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801234a:	69bb      	ldr	r3, [r7, #24]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d117      	bne.n	8012380 <SD_read+0x84>
 8012350:	8a7b      	ldrh	r3, [r7, #18]
 8012352:	2b01      	cmp	r3, #1
 8012354:	d114      	bne.n	8012380 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8012356:	f002 fcfb 	bl	8014d50 <osKernelGetTickCount>
 801235a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801235c:	e007      	b.n	801236e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801235e:	f7ff fed5 	bl	801210c <BSP_SD_GetCardState>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d102      	bne.n	801236e <SD_read+0x72>
              {
                res = RES_OK;
 8012368:	2300      	movs	r3, #0
 801236a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801236c:	e008      	b.n	8012380 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801236e:	f002 fcef 	bl	8014d50 <osKernelGetTickCount>
 8012372:	4602      	mov	r2, r0
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	1ad3      	subs	r3, r2, r3
 8012378:	f247 522f 	movw	r2, #29999	; 0x752f
 801237c:	4293      	cmp	r3, r2
 801237e:	d9ee      	bls.n	801235e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012380:	7ffb      	ldrb	r3, [r7, #31]
}
 8012382:	4618      	mov	r0, r3
 8012384:	3720      	adds	r7, #32
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	20000a38 	.word	0x20000a38

08012390 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b088      	sub	sp, #32
 8012394:	af00      	add	r7, sp, #0
 8012396:	60b9      	str	r1, [r7, #8]
 8012398:	607a      	str	r2, [r7, #4]
 801239a:	603b      	str	r3, [r7, #0]
 801239c:	4603      	mov	r3, r0
 801239e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80123a0:	2301      	movs	r3, #1
 80123a2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80123a4:	f247 5030 	movw	r0, #30000	; 0x7530
 80123a8:	f7ff ff1c 	bl	80121e4 <SD_CheckStatusWithTimeout>
 80123ac:	4603      	mov	r3, r0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	da01      	bge.n	80123b6 <SD_write+0x26>
  {
    return res;
 80123b2:	7ffb      	ldrb	r3, [r7, #31]
 80123b4:	e02d      	b.n	8012412 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80123b6:	683a      	ldr	r2, [r7, #0]
 80123b8:	6879      	ldr	r1, [r7, #4]
 80123ba:	68b8      	ldr	r0, [r7, #8]
 80123bc:	f7ff fe8c 	bl	80120d8 <BSP_SD_WriteBlocks_DMA>
 80123c0:	4603      	mov	r3, r0
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d124      	bne.n	8012410 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80123c6:	4b15      	ldr	r3, [pc, #84]	; (801241c <SD_write+0x8c>)
 80123c8:	6818      	ldr	r0, [r3, #0]
 80123ca:	f107 0112 	add.w	r1, r7, #18
 80123ce:	f247 5330 	movw	r3, #30000	; 0x7530
 80123d2:	2200      	movs	r2, #0
 80123d4:	f003 f844 	bl	8015460 <osMessageQueueGet>
 80123d8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80123da:	69bb      	ldr	r3, [r7, #24]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d117      	bne.n	8012410 <SD_write+0x80>
 80123e0:	8a7b      	ldrh	r3, [r7, #18]
 80123e2:	2b02      	cmp	r3, #2
 80123e4:	d114      	bne.n	8012410 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80123e6:	f002 fcb3 	bl	8014d50 <osKernelGetTickCount>
 80123ea:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80123ec:	e007      	b.n	80123fe <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80123ee:	f7ff fe8d 	bl	801210c <BSP_SD_GetCardState>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d102      	bne.n	80123fe <SD_write+0x6e>
          {
            res = RES_OK;
 80123f8:	2300      	movs	r3, #0
 80123fa:	77fb      	strb	r3, [r7, #31]
            break;
 80123fc:	e008      	b.n	8012410 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80123fe:	f002 fca7 	bl	8014d50 <osKernelGetTickCount>
 8012402:	4602      	mov	r2, r0
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	1ad3      	subs	r3, r2, r3
 8012408:	f247 522f 	movw	r2, #29999	; 0x752f
 801240c:	4293      	cmp	r3, r2
 801240e:	d9ee      	bls.n	80123ee <SD_write+0x5e>
    }

  }
#endif

  return res;
 8012410:	7ffb      	ldrb	r3, [r7, #31]
}
 8012412:	4618      	mov	r0, r3
 8012414:	3720      	adds	r7, #32
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	20000a38 	.word	0x20000a38

08012420 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b08c      	sub	sp, #48	; 0x30
 8012424:	af00      	add	r7, sp, #0
 8012426:	4603      	mov	r3, r0
 8012428:	603a      	str	r2, [r7, #0]
 801242a:	71fb      	strb	r3, [r7, #7]
 801242c:	460b      	mov	r3, r1
 801242e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012430:	2301      	movs	r3, #1
 8012432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012436:	4b25      	ldr	r3, [pc, #148]	; (80124cc <SD_ioctl+0xac>)
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	b2db      	uxtb	r3, r3
 801243c:	f003 0301 	and.w	r3, r3, #1
 8012440:	2b00      	cmp	r3, #0
 8012442:	d001      	beq.n	8012448 <SD_ioctl+0x28>
 8012444:	2303      	movs	r3, #3
 8012446:	e03c      	b.n	80124c2 <SD_ioctl+0xa2>

  switch (cmd)
 8012448:	79bb      	ldrb	r3, [r7, #6]
 801244a:	2b03      	cmp	r3, #3
 801244c:	d834      	bhi.n	80124b8 <SD_ioctl+0x98>
 801244e:	a201      	add	r2, pc, #4	; (adr r2, 8012454 <SD_ioctl+0x34>)
 8012450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012454:	08012465 	.word	0x08012465
 8012458:	0801246d 	.word	0x0801246d
 801245c:	08012485 	.word	0x08012485
 8012460:	0801249f 	.word	0x0801249f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012464:	2300      	movs	r3, #0
 8012466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801246a:	e028      	b.n	80124be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801246c:	f107 030c 	add.w	r3, r7, #12
 8012470:	4618      	mov	r0, r3
 8012472:	f7ff fe5b 	bl	801212c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801247c:	2300      	movs	r3, #0
 801247e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012482:	e01c      	b.n	80124be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012484:	f107 030c 	add.w	r3, r7, #12
 8012488:	4618      	mov	r0, r3
 801248a:	f7ff fe4f 	bl	801212c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012490:	b29a      	uxth	r2, r3
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012496:	2300      	movs	r3, #0
 8012498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801249c:	e00f      	b.n	80124be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801249e:	f107 030c 	add.w	r3, r7, #12
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7ff fe42 	bl	801212c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80124a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124aa:	0a5a      	lsrs	r2, r3, #9
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80124b0:	2300      	movs	r3, #0
 80124b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80124b6:	e002      	b.n	80124be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80124b8:	2304      	movs	r3, #4
 80124ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80124be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3730      	adds	r7, #48	; 0x30
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	200001b9 	.word	0x200001b9

080124d0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80124d6:	2302      	movs	r3, #2
 80124d8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80124da:	4b05      	ldr	r3, [pc, #20]	; (80124f0 <BSP_SD_WriteCpltCallback+0x20>)
 80124dc:	6818      	ldr	r0, [r3, #0]
 80124de:	1db9      	adds	r1, r7, #6
 80124e0:	2300      	movs	r3, #0
 80124e2:	2200      	movs	r2, #0
 80124e4:	f002 ff48 	bl	8015378 <osMessageQueuePut>
#endif
}
 80124e8:	bf00      	nop
 80124ea:	3708      	adds	r7, #8
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	20000a38 	.word	0x20000a38

080124f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80124fa:	2301      	movs	r3, #1
 80124fc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80124fe:	4b05      	ldr	r3, [pc, #20]	; (8012514 <BSP_SD_ReadCpltCallback+0x20>)
 8012500:	6818      	ldr	r0, [r3, #0]
 8012502:	1db9      	adds	r1, r7, #6
 8012504:	2300      	movs	r3, #0
 8012506:	2200      	movs	r2, #0
 8012508:	f002 ff36 	bl	8015378 <osMessageQueuePut>
#endif
}
 801250c:	bf00      	nop
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}
 8012514:	20000a38 	.word	0x20000a38

08012518 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	4603      	mov	r3, r0
 8012520:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012522:	79fb      	ldrb	r3, [r7, #7]
 8012524:	4a08      	ldr	r2, [pc, #32]	; (8012548 <disk_status+0x30>)
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	4413      	add	r3, r2
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	79fa      	ldrb	r2, [r7, #7]
 8012530:	4905      	ldr	r1, [pc, #20]	; (8012548 <disk_status+0x30>)
 8012532:	440a      	add	r2, r1
 8012534:	7a12      	ldrb	r2, [r2, #8]
 8012536:	4610      	mov	r0, r2
 8012538:	4798      	blx	r3
 801253a:	4603      	mov	r3, r0
 801253c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801253e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	20000a64 	.word	0x20000a64

0801254c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	4603      	mov	r3, r0
 8012554:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012556:	2300      	movs	r3, #0
 8012558:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801255a:	79fb      	ldrb	r3, [r7, #7]
 801255c:	4a0d      	ldr	r2, [pc, #52]	; (8012594 <disk_initialize+0x48>)
 801255e:	5cd3      	ldrb	r3, [r2, r3]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d111      	bne.n	8012588 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012564:	79fb      	ldrb	r3, [r7, #7]
 8012566:	4a0b      	ldr	r2, [pc, #44]	; (8012594 <disk_initialize+0x48>)
 8012568:	2101      	movs	r1, #1
 801256a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801256c:	79fb      	ldrb	r3, [r7, #7]
 801256e:	4a09      	ldr	r2, [pc, #36]	; (8012594 <disk_initialize+0x48>)
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	4413      	add	r3, r2
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	79fa      	ldrb	r2, [r7, #7]
 801257a:	4906      	ldr	r1, [pc, #24]	; (8012594 <disk_initialize+0x48>)
 801257c:	440a      	add	r2, r1
 801257e:	7a12      	ldrb	r2, [r2, #8]
 8012580:	4610      	mov	r0, r2
 8012582:	4798      	blx	r3
 8012584:	4603      	mov	r3, r0
 8012586:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012588:	7bfb      	ldrb	r3, [r7, #15]
}
 801258a:	4618      	mov	r0, r3
 801258c:	3710      	adds	r7, #16
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
 8012592:	bf00      	nop
 8012594:	20000a64 	.word	0x20000a64

08012598 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012598:	b590      	push	{r4, r7, lr}
 801259a:	b087      	sub	sp, #28
 801259c:	af00      	add	r7, sp, #0
 801259e:	60b9      	str	r1, [r7, #8]
 80125a0:	607a      	str	r2, [r7, #4]
 80125a2:	603b      	str	r3, [r7, #0]
 80125a4:	4603      	mov	r3, r0
 80125a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80125a8:	7bfb      	ldrb	r3, [r7, #15]
 80125aa:	4a0a      	ldr	r2, [pc, #40]	; (80125d4 <disk_read+0x3c>)
 80125ac:	009b      	lsls	r3, r3, #2
 80125ae:	4413      	add	r3, r2
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	689c      	ldr	r4, [r3, #8]
 80125b4:	7bfb      	ldrb	r3, [r7, #15]
 80125b6:	4a07      	ldr	r2, [pc, #28]	; (80125d4 <disk_read+0x3c>)
 80125b8:	4413      	add	r3, r2
 80125ba:	7a18      	ldrb	r0, [r3, #8]
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	68b9      	ldr	r1, [r7, #8]
 80125c2:	47a0      	blx	r4
 80125c4:	4603      	mov	r3, r0
 80125c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80125c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	371c      	adds	r7, #28
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd90      	pop	{r4, r7, pc}
 80125d2:	bf00      	nop
 80125d4:	20000a64 	.word	0x20000a64

080125d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80125d8:	b590      	push	{r4, r7, lr}
 80125da:	b087      	sub	sp, #28
 80125dc:	af00      	add	r7, sp, #0
 80125de:	60b9      	str	r1, [r7, #8]
 80125e0:	607a      	str	r2, [r7, #4]
 80125e2:	603b      	str	r3, [r7, #0]
 80125e4:	4603      	mov	r3, r0
 80125e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80125e8:	7bfb      	ldrb	r3, [r7, #15]
 80125ea:	4a0a      	ldr	r2, [pc, #40]	; (8012614 <disk_write+0x3c>)
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	4413      	add	r3, r2
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	68dc      	ldr	r4, [r3, #12]
 80125f4:	7bfb      	ldrb	r3, [r7, #15]
 80125f6:	4a07      	ldr	r2, [pc, #28]	; (8012614 <disk_write+0x3c>)
 80125f8:	4413      	add	r3, r2
 80125fa:	7a18      	ldrb	r0, [r3, #8]
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	68b9      	ldr	r1, [r7, #8]
 8012602:	47a0      	blx	r4
 8012604:	4603      	mov	r3, r0
 8012606:	75fb      	strb	r3, [r7, #23]
  return res;
 8012608:	7dfb      	ldrb	r3, [r7, #23]
}
 801260a:	4618      	mov	r0, r3
 801260c:	371c      	adds	r7, #28
 801260e:	46bd      	mov	sp, r7
 8012610:	bd90      	pop	{r4, r7, pc}
 8012612:	bf00      	nop
 8012614:	20000a64 	.word	0x20000a64

08012618 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b084      	sub	sp, #16
 801261c:	af00      	add	r7, sp, #0
 801261e:	4603      	mov	r3, r0
 8012620:	603a      	str	r2, [r7, #0]
 8012622:	71fb      	strb	r3, [r7, #7]
 8012624:	460b      	mov	r3, r1
 8012626:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012628:	79fb      	ldrb	r3, [r7, #7]
 801262a:	4a09      	ldr	r2, [pc, #36]	; (8012650 <disk_ioctl+0x38>)
 801262c:	009b      	lsls	r3, r3, #2
 801262e:	4413      	add	r3, r2
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	691b      	ldr	r3, [r3, #16]
 8012634:	79fa      	ldrb	r2, [r7, #7]
 8012636:	4906      	ldr	r1, [pc, #24]	; (8012650 <disk_ioctl+0x38>)
 8012638:	440a      	add	r2, r1
 801263a:	7a10      	ldrb	r0, [r2, #8]
 801263c:	79b9      	ldrb	r1, [r7, #6]
 801263e:	683a      	ldr	r2, [r7, #0]
 8012640:	4798      	blx	r3
 8012642:	4603      	mov	r3, r0
 8012644:	73fb      	strb	r3, [r7, #15]
  return res;
 8012646:	7bfb      	ldrb	r3, [r7, #15]
}
 8012648:	4618      	mov	r0, r3
 801264a:	3710      	adds	r7, #16
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}
 8012650:	20000a64 	.word	0x20000a64

08012654 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	3301      	adds	r3, #1
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012664:	89fb      	ldrh	r3, [r7, #14]
 8012666:	021b      	lsls	r3, r3, #8
 8012668:	b21a      	sxth	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	b21b      	sxth	r3, r3
 8012670:	4313      	orrs	r3, r2
 8012672:	b21b      	sxth	r3, r3
 8012674:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012676:	89fb      	ldrh	r3, [r7, #14]
}
 8012678:	4618      	mov	r0, r3
 801267a:	3714      	adds	r7, #20
 801267c:	46bd      	mov	sp, r7
 801267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012682:	4770      	bx	lr

08012684 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012684:	b480      	push	{r7}
 8012686:	b085      	sub	sp, #20
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	3303      	adds	r3, #3
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	021b      	lsls	r3, r3, #8
 8012698:	687a      	ldr	r2, [r7, #4]
 801269a:	3202      	adds	r2, #2
 801269c:	7812      	ldrb	r2, [r2, #0]
 801269e:	4313      	orrs	r3, r2
 80126a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	021b      	lsls	r3, r3, #8
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	3201      	adds	r2, #1
 80126aa:	7812      	ldrb	r2, [r2, #0]
 80126ac:	4313      	orrs	r3, r2
 80126ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	021b      	lsls	r3, r3, #8
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	7812      	ldrb	r2, [r2, #0]
 80126b8:	4313      	orrs	r3, r2
 80126ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80126bc:	68fb      	ldr	r3, [r7, #12]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3714      	adds	r7, #20
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr

080126ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80126ca:	b480      	push	{r7}
 80126cc:	b083      	sub	sp, #12
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
 80126d2:	460b      	mov	r3, r1
 80126d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	1c5a      	adds	r2, r3, #1
 80126da:	607a      	str	r2, [r7, #4]
 80126dc:	887a      	ldrh	r2, [r7, #2]
 80126de:	b2d2      	uxtb	r2, r2
 80126e0:	701a      	strb	r2, [r3, #0]
 80126e2:	887b      	ldrh	r3, [r7, #2]
 80126e4:	0a1b      	lsrs	r3, r3, #8
 80126e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	1c5a      	adds	r2, r3, #1
 80126ec:	607a      	str	r2, [r7, #4]
 80126ee:	887a      	ldrh	r2, [r7, #2]
 80126f0:	b2d2      	uxtb	r2, r2
 80126f2:	701a      	strb	r2, [r3, #0]
}
 80126f4:	bf00      	nop
 80126f6:	370c      	adds	r7, #12
 80126f8:	46bd      	mov	sp, r7
 80126fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fe:	4770      	bx	lr

08012700 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012700:	b480      	push	{r7}
 8012702:	b083      	sub	sp, #12
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	1c5a      	adds	r2, r3, #1
 801270e:	607a      	str	r2, [r7, #4]
 8012710:	683a      	ldr	r2, [r7, #0]
 8012712:	b2d2      	uxtb	r2, r2
 8012714:	701a      	strb	r2, [r3, #0]
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	0a1b      	lsrs	r3, r3, #8
 801271a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	1c5a      	adds	r2, r3, #1
 8012720:	607a      	str	r2, [r7, #4]
 8012722:	683a      	ldr	r2, [r7, #0]
 8012724:	b2d2      	uxtb	r2, r2
 8012726:	701a      	strb	r2, [r3, #0]
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	0a1b      	lsrs	r3, r3, #8
 801272c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	1c5a      	adds	r2, r3, #1
 8012732:	607a      	str	r2, [r7, #4]
 8012734:	683a      	ldr	r2, [r7, #0]
 8012736:	b2d2      	uxtb	r2, r2
 8012738:	701a      	strb	r2, [r3, #0]
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	0a1b      	lsrs	r3, r3, #8
 801273e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	1c5a      	adds	r2, r3, #1
 8012744:	607a      	str	r2, [r7, #4]
 8012746:	683a      	ldr	r2, [r7, #0]
 8012748:	b2d2      	uxtb	r2, r2
 801274a:	701a      	strb	r2, [r3, #0]
}
 801274c:	bf00      	nop
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012758:	b480      	push	{r7}
 801275a:	b087      	sub	sp, #28
 801275c:	af00      	add	r7, sp, #0
 801275e:	60f8      	str	r0, [r7, #12]
 8012760:	60b9      	str	r1, [r7, #8]
 8012762:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d00d      	beq.n	801278e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012772:	693a      	ldr	r2, [r7, #16]
 8012774:	1c53      	adds	r3, r2, #1
 8012776:	613b      	str	r3, [r7, #16]
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	1c59      	adds	r1, r3, #1
 801277c:	6179      	str	r1, [r7, #20]
 801277e:	7812      	ldrb	r2, [r2, #0]
 8012780:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	3b01      	subs	r3, #1
 8012786:	607b      	str	r3, [r7, #4]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d1f1      	bne.n	8012772 <mem_cpy+0x1a>
	}
}
 801278e:	bf00      	nop
 8012790:	371c      	adds	r7, #28
 8012792:	46bd      	mov	sp, r7
 8012794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012798:	4770      	bx	lr

0801279a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801279a:	b480      	push	{r7}
 801279c:	b087      	sub	sp, #28
 801279e:	af00      	add	r7, sp, #0
 80127a0:	60f8      	str	r0, [r7, #12]
 80127a2:	60b9      	str	r1, [r7, #8]
 80127a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	1c5a      	adds	r2, r3, #1
 80127ae:	617a      	str	r2, [r7, #20]
 80127b0:	68ba      	ldr	r2, [r7, #8]
 80127b2:	b2d2      	uxtb	r2, r2
 80127b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	3b01      	subs	r3, #1
 80127ba:	607b      	str	r3, [r7, #4]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d1f3      	bne.n	80127aa <mem_set+0x10>
}
 80127c2:	bf00      	nop
 80127c4:	371c      	adds	r7, #28
 80127c6:	46bd      	mov	sp, r7
 80127c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127cc:	4770      	bx	lr

080127ce <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80127ce:	b480      	push	{r7}
 80127d0:	b089      	sub	sp, #36	; 0x24
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	60f8      	str	r0, [r7, #12]
 80127d6:	60b9      	str	r1, [r7, #8]
 80127d8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	61fb      	str	r3, [r7, #28]
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80127e2:	2300      	movs	r3, #0
 80127e4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	1c5a      	adds	r2, r3, #1
 80127ea:	61fa      	str	r2, [r7, #28]
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	4619      	mov	r1, r3
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	1c5a      	adds	r2, r3, #1
 80127f4:	61ba      	str	r2, [r7, #24]
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	1acb      	subs	r3, r1, r3
 80127fa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	3b01      	subs	r3, #1
 8012800:	607b      	str	r3, [r7, #4]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d002      	beq.n	801280e <mem_cmp+0x40>
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d0eb      	beq.n	80127e6 <mem_cmp+0x18>

	return r;
 801280e:	697b      	ldr	r3, [r7, #20]
}
 8012810:	4618      	mov	r0, r3
 8012812:	3724      	adds	r7, #36	; 0x24
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr

0801281c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012826:	e002      	b.n	801282e <chk_chr+0x12>
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	3301      	adds	r3, #1
 801282c:	607b      	str	r3, [r7, #4]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d005      	beq.n	8012842 <chk_chr+0x26>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	461a      	mov	r2, r3
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	4293      	cmp	r3, r2
 8012840:	d1f2      	bne.n	8012828 <chk_chr+0xc>
	return *str;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	781b      	ldrb	r3, [r3, #0]
}
 8012846:	4618      	mov	r0, r3
 8012848:	370c      	adds	r7, #12
 801284a:	46bd      	mov	sp, r7
 801284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012850:	4770      	bx	lr

08012852 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012852:	b580      	push	{r7, lr}
 8012854:	b082      	sub	sp, #8
 8012856:	af00      	add	r7, sp, #0
 8012858:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d009      	beq.n	8012874 <lock_fs+0x22>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	691b      	ldr	r3, [r3, #16]
 8012864:	4618      	mov	r0, r3
 8012866:	f002 f9bf 	bl	8014be8 <ff_req_grant>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d001      	beq.n	8012874 <lock_fs+0x22>
 8012870:	2301      	movs	r3, #1
 8012872:	e000      	b.n	8012876 <lock_fs+0x24>
 8012874:	2300      	movs	r3, #0
}
 8012876:	4618      	mov	r0, r3
 8012878:	3708      	adds	r7, #8
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}

0801287e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801287e:	b580      	push	{r7, lr}
 8012880:	b082      	sub	sp, #8
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
 8012886:	460b      	mov	r3, r1
 8012888:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d00d      	beq.n	80128ac <unlock_fs+0x2e>
 8012890:	78fb      	ldrb	r3, [r7, #3]
 8012892:	2b0c      	cmp	r3, #12
 8012894:	d00a      	beq.n	80128ac <unlock_fs+0x2e>
 8012896:	78fb      	ldrb	r3, [r7, #3]
 8012898:	2b0b      	cmp	r3, #11
 801289a:	d007      	beq.n	80128ac <unlock_fs+0x2e>
 801289c:	78fb      	ldrb	r3, [r7, #3]
 801289e:	2b0f      	cmp	r3, #15
 80128a0:	d004      	beq.n	80128ac <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	691b      	ldr	r3, [r3, #16]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f002 f9b3 	bl	8014c12 <ff_rel_grant>
	}
}
 80128ac:	bf00      	nop
 80128ae:	3708      	adds	r7, #8
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}

080128b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b085      	sub	sp, #20
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80128be:	2300      	movs	r3, #0
 80128c0:	60bb      	str	r3, [r7, #8]
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	60fb      	str	r3, [r7, #12]
 80128c6:	e029      	b.n	801291c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80128c8:	4a27      	ldr	r2, [pc, #156]	; (8012968 <chk_lock+0xb4>)
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	011b      	lsls	r3, r3, #4
 80128ce:	4413      	add	r3, r2
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d01d      	beq.n	8012912 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80128d6:	4a24      	ldr	r2, [pc, #144]	; (8012968 <chk_lock+0xb4>)
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	011b      	lsls	r3, r3, #4
 80128dc:	4413      	add	r3, r2
 80128de:	681a      	ldr	r2, [r3, #0]
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d116      	bne.n	8012916 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80128e8:	4a1f      	ldr	r2, [pc, #124]	; (8012968 <chk_lock+0xb4>)
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	011b      	lsls	r3, r3, #4
 80128ee:	4413      	add	r3, r2
 80128f0:	3304      	adds	r3, #4
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d10c      	bne.n	8012916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80128fc:	4a1a      	ldr	r2, [pc, #104]	; (8012968 <chk_lock+0xb4>)
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	011b      	lsls	r3, r3, #4
 8012902:	4413      	add	r3, r2
 8012904:	3308      	adds	r3, #8
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801290c:	429a      	cmp	r2, r3
 801290e:	d102      	bne.n	8012916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012910:	e007      	b.n	8012922 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012912:	2301      	movs	r3, #1
 8012914:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	3301      	adds	r3, #1
 801291a:	60fb      	str	r3, [r7, #12]
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2b01      	cmp	r3, #1
 8012920:	d9d2      	bls.n	80128c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2b02      	cmp	r3, #2
 8012926:	d109      	bne.n	801293c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d102      	bne.n	8012934 <chk_lock+0x80>
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	2b02      	cmp	r3, #2
 8012932:	d101      	bne.n	8012938 <chk_lock+0x84>
 8012934:	2300      	movs	r3, #0
 8012936:	e010      	b.n	801295a <chk_lock+0xa6>
 8012938:	2312      	movs	r3, #18
 801293a:	e00e      	b.n	801295a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d108      	bne.n	8012954 <chk_lock+0xa0>
 8012942:	4a09      	ldr	r2, [pc, #36]	; (8012968 <chk_lock+0xb4>)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	011b      	lsls	r3, r3, #4
 8012948:	4413      	add	r3, r2
 801294a:	330c      	adds	r3, #12
 801294c:	881b      	ldrh	r3, [r3, #0]
 801294e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012952:	d101      	bne.n	8012958 <chk_lock+0xa4>
 8012954:	2310      	movs	r3, #16
 8012956:	e000      	b.n	801295a <chk_lock+0xa6>
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3714      	adds	r7, #20
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr
 8012966:	bf00      	nop
 8012968:	20000a44 	.word	0x20000a44

0801296c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801296c:	b480      	push	{r7}
 801296e:	b083      	sub	sp, #12
 8012970:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012972:	2300      	movs	r3, #0
 8012974:	607b      	str	r3, [r7, #4]
 8012976:	e002      	b.n	801297e <enq_lock+0x12>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	3301      	adds	r3, #1
 801297c:	607b      	str	r3, [r7, #4]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2b01      	cmp	r3, #1
 8012982:	d806      	bhi.n	8012992 <enq_lock+0x26>
 8012984:	4a09      	ldr	r2, [pc, #36]	; (80129ac <enq_lock+0x40>)
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	011b      	lsls	r3, r3, #4
 801298a:	4413      	add	r3, r2
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d1f2      	bne.n	8012978 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2b02      	cmp	r3, #2
 8012996:	bf14      	ite	ne
 8012998:	2301      	movne	r3, #1
 801299a:	2300      	moveq	r3, #0
 801299c:	b2db      	uxtb	r3, r3
}
 801299e:	4618      	mov	r0, r3
 80129a0:	370c      	adds	r7, #12
 80129a2:	46bd      	mov	sp, r7
 80129a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a8:	4770      	bx	lr
 80129aa:	bf00      	nop
 80129ac:	20000a44 	.word	0x20000a44

080129b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b085      	sub	sp, #20
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80129ba:	2300      	movs	r3, #0
 80129bc:	60fb      	str	r3, [r7, #12]
 80129be:	e01f      	b.n	8012a00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80129c0:	4a41      	ldr	r2, [pc, #260]	; (8012ac8 <inc_lock+0x118>)
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	011b      	lsls	r3, r3, #4
 80129c6:	4413      	add	r3, r2
 80129c8:	681a      	ldr	r2, [r3, #0]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d113      	bne.n	80129fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80129d2:	4a3d      	ldr	r2, [pc, #244]	; (8012ac8 <inc_lock+0x118>)
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	011b      	lsls	r3, r3, #4
 80129d8:	4413      	add	r3, r2
 80129da:	3304      	adds	r3, #4
 80129dc:	681a      	ldr	r2, [r3, #0]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d109      	bne.n	80129fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80129e6:	4a38      	ldr	r2, [pc, #224]	; (8012ac8 <inc_lock+0x118>)
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	011b      	lsls	r3, r3, #4
 80129ec:	4413      	add	r3, r2
 80129ee:	3308      	adds	r3, #8
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d006      	beq.n	8012a08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	3301      	adds	r3, #1
 80129fe:	60fb      	str	r3, [r7, #12]
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d9dc      	bls.n	80129c0 <inc_lock+0x10>
 8012a06:	e000      	b.n	8012a0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012a08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	d132      	bne.n	8012a76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012a10:	2300      	movs	r3, #0
 8012a12:	60fb      	str	r3, [r7, #12]
 8012a14:	e002      	b.n	8012a1c <inc_lock+0x6c>
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	3301      	adds	r3, #1
 8012a1a:	60fb      	str	r3, [r7, #12]
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d806      	bhi.n	8012a30 <inc_lock+0x80>
 8012a22:	4a29      	ldr	r2, [pc, #164]	; (8012ac8 <inc_lock+0x118>)
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	011b      	lsls	r3, r3, #4
 8012a28:	4413      	add	r3, r2
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d1f2      	bne.n	8012a16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2b02      	cmp	r3, #2
 8012a34:	d101      	bne.n	8012a3a <inc_lock+0x8a>
 8012a36:	2300      	movs	r3, #0
 8012a38:	e040      	b.n	8012abc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	4922      	ldr	r1, [pc, #136]	; (8012ac8 <inc_lock+0x118>)
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	011b      	lsls	r3, r3, #4
 8012a44:	440b      	add	r3, r1
 8012a46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	689a      	ldr	r2, [r3, #8]
 8012a4c:	491e      	ldr	r1, [pc, #120]	; (8012ac8 <inc_lock+0x118>)
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	011b      	lsls	r3, r3, #4
 8012a52:	440b      	add	r3, r1
 8012a54:	3304      	adds	r3, #4
 8012a56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	695a      	ldr	r2, [r3, #20]
 8012a5c:	491a      	ldr	r1, [pc, #104]	; (8012ac8 <inc_lock+0x118>)
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	011b      	lsls	r3, r3, #4
 8012a62:	440b      	add	r3, r1
 8012a64:	3308      	adds	r3, #8
 8012a66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012a68:	4a17      	ldr	r2, [pc, #92]	; (8012ac8 <inc_lock+0x118>)
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	011b      	lsls	r3, r3, #4
 8012a6e:	4413      	add	r3, r2
 8012a70:	330c      	adds	r3, #12
 8012a72:	2200      	movs	r2, #0
 8012a74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d009      	beq.n	8012a90 <inc_lock+0xe0>
 8012a7c:	4a12      	ldr	r2, [pc, #72]	; (8012ac8 <inc_lock+0x118>)
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	011b      	lsls	r3, r3, #4
 8012a82:	4413      	add	r3, r2
 8012a84:	330c      	adds	r3, #12
 8012a86:	881b      	ldrh	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d001      	beq.n	8012a90 <inc_lock+0xe0>
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	e015      	b.n	8012abc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d108      	bne.n	8012aa8 <inc_lock+0xf8>
 8012a96:	4a0c      	ldr	r2, [pc, #48]	; (8012ac8 <inc_lock+0x118>)
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	011b      	lsls	r3, r3, #4
 8012a9c:	4413      	add	r3, r2
 8012a9e:	330c      	adds	r3, #12
 8012aa0:	881b      	ldrh	r3, [r3, #0]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	b29a      	uxth	r2, r3
 8012aa6:	e001      	b.n	8012aac <inc_lock+0xfc>
 8012aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012aac:	4906      	ldr	r1, [pc, #24]	; (8012ac8 <inc_lock+0x118>)
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	011b      	lsls	r3, r3, #4
 8012ab2:	440b      	add	r3, r1
 8012ab4:	330c      	adds	r3, #12
 8012ab6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	3301      	adds	r3, #1
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3714      	adds	r7, #20
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr
 8012ac8:	20000a44 	.word	0x20000a44

08012acc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b085      	sub	sp, #20
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	3b01      	subs	r3, #1
 8012ad8:	607b      	str	r3, [r7, #4]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d825      	bhi.n	8012b2c <dec_lock+0x60>
		n = Files[i].ctr;
 8012ae0:	4a17      	ldr	r2, [pc, #92]	; (8012b40 <dec_lock+0x74>)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	011b      	lsls	r3, r3, #4
 8012ae6:	4413      	add	r3, r2
 8012ae8:	330c      	adds	r3, #12
 8012aea:	881b      	ldrh	r3, [r3, #0]
 8012aec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012aee:	89fb      	ldrh	r3, [r7, #14]
 8012af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012af4:	d101      	bne.n	8012afa <dec_lock+0x2e>
 8012af6:	2300      	movs	r3, #0
 8012af8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012afa:	89fb      	ldrh	r3, [r7, #14]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d002      	beq.n	8012b06 <dec_lock+0x3a>
 8012b00:	89fb      	ldrh	r3, [r7, #14]
 8012b02:	3b01      	subs	r3, #1
 8012b04:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012b06:	4a0e      	ldr	r2, [pc, #56]	; (8012b40 <dec_lock+0x74>)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	011b      	lsls	r3, r3, #4
 8012b0c:	4413      	add	r3, r2
 8012b0e:	330c      	adds	r3, #12
 8012b10:	89fa      	ldrh	r2, [r7, #14]
 8012b12:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012b14:	89fb      	ldrh	r3, [r7, #14]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d105      	bne.n	8012b26 <dec_lock+0x5a>
 8012b1a:	4a09      	ldr	r2, [pc, #36]	; (8012b40 <dec_lock+0x74>)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	011b      	lsls	r3, r3, #4
 8012b20:	4413      	add	r3, r2
 8012b22:	2200      	movs	r2, #0
 8012b24:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012b26:	2300      	movs	r3, #0
 8012b28:	737b      	strb	r3, [r7, #13]
 8012b2a:	e001      	b.n	8012b30 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012b2c:	2302      	movs	r3, #2
 8012b2e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012b30:	7b7b      	ldrb	r3, [r7, #13]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3714      	adds	r7, #20
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr
 8012b3e:	bf00      	nop
 8012b40:	20000a44 	.word	0x20000a44

08012b44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b085      	sub	sp, #20
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	60fb      	str	r3, [r7, #12]
 8012b50:	e010      	b.n	8012b74 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012b52:	4a0d      	ldr	r2, [pc, #52]	; (8012b88 <clear_lock+0x44>)
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	011b      	lsls	r3, r3, #4
 8012b58:	4413      	add	r3, r2
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d105      	bne.n	8012b6e <clear_lock+0x2a>
 8012b62:	4a09      	ldr	r2, [pc, #36]	; (8012b88 <clear_lock+0x44>)
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	011b      	lsls	r3, r3, #4
 8012b68:	4413      	add	r3, r2
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	3301      	adds	r3, #1
 8012b72:	60fb      	str	r3, [r7, #12]
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	d9eb      	bls.n	8012b52 <clear_lock+0xe>
	}
}
 8012b7a:	bf00      	nop
 8012b7c:	3714      	adds	r7, #20
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	20000a44 	.word	0x20000a44

08012b8c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b086      	sub	sp, #24
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012b94:	2300      	movs	r3, #0
 8012b96:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	78db      	ldrb	r3, [r3, #3]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d034      	beq.n	8012c0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ba4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	7858      	ldrb	r0, [r3, #1]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	697a      	ldr	r2, [r7, #20]
 8012bb4:	f7ff fd10 	bl	80125d8 <disk_write>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d002      	beq.n	8012bc4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	73fb      	strb	r3, [r7, #15]
 8012bc2:	e022      	b.n	8012c0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bce:	697a      	ldr	r2, [r7, #20]
 8012bd0:	1ad2      	subs	r2, r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6a1b      	ldr	r3, [r3, #32]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d217      	bcs.n	8012c0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	789b      	ldrb	r3, [r3, #2]
 8012bde:	613b      	str	r3, [r7, #16]
 8012be0:	e010      	b.n	8012c04 <sync_window+0x78>
					wsect += fs->fsize;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6a1b      	ldr	r3, [r3, #32]
 8012be6:	697a      	ldr	r2, [r7, #20]
 8012be8:	4413      	add	r3, r2
 8012bea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	7858      	ldrb	r0, [r3, #1]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	697a      	ldr	r2, [r7, #20]
 8012bfa:	f7ff fced 	bl	80125d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	3b01      	subs	r3, #1
 8012c02:	613b      	str	r3, [r7, #16]
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	2b01      	cmp	r3, #1
 8012c08:	d8eb      	bhi.n	8012be2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3718      	adds	r7, #24
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
 8012c1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c26:	683a      	ldr	r2, [r7, #0]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d01b      	beq.n	8012c64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f7ff ffad 	bl	8012b8c <sync_window>
 8012c32:	4603      	mov	r3, r0
 8012c34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012c36:	7bfb      	ldrb	r3, [r7, #15]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d113      	bne.n	8012c64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	7858      	ldrb	r0, [r3, #1]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012c46:	2301      	movs	r3, #1
 8012c48:	683a      	ldr	r2, [r7, #0]
 8012c4a:	f7ff fca5 	bl	8012598 <disk_read>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d004      	beq.n	8012c5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012c54:	f04f 33ff 	mov.w	r3, #4294967295
 8012c58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	683a      	ldr	r2, [r7, #0]
 8012c62:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8012c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3710      	adds	r7, #16
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}
	...

08012c70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7ff ff87 	bl	8012b8c <sync_window>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012c82:	7bfb      	ldrb	r3, [r7, #15]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d159      	bne.n	8012d3c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	2b03      	cmp	r3, #3
 8012c8e:	d149      	bne.n	8012d24 <sync_fs+0xb4>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	791b      	ldrb	r3, [r3, #4]
 8012c94:	2b01      	cmp	r3, #1
 8012c96:	d145      	bne.n	8012d24 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	899b      	ldrh	r3, [r3, #12]
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	2100      	movs	r1, #0
 8012ca6:	f7ff fd78 	bl	801279a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	3338      	adds	r3, #56	; 0x38
 8012cae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012cb2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7ff fd07 	bl	80126ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	3338      	adds	r3, #56	; 0x38
 8012cc0:	4921      	ldr	r1, [pc, #132]	; (8012d48 <sync_fs+0xd8>)
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7ff fd1c 	bl	8012700 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	3338      	adds	r3, #56	; 0x38
 8012ccc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012cd0:	491e      	ldr	r1, [pc, #120]	; (8012d4c <sync_fs+0xdc>)
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7ff fd14 	bl	8012700 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	3338      	adds	r3, #56	; 0x38
 8012cdc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	699b      	ldr	r3, [r3, #24]
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	4610      	mov	r0, r2
 8012ce8:	f7ff fd0a 	bl	8012700 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	3338      	adds	r3, #56	; 0x38
 8012cf0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	695b      	ldr	r3, [r3, #20]
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	4610      	mov	r0, r2
 8012cfc:	f7ff fd00 	bl	8012700 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d04:	1c5a      	adds	r2, r3, #1
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	7858      	ldrb	r0, [r3, #1]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d18:	2301      	movs	r3, #1
 8012d1a:	f7ff fc5d 	bl	80125d8 <disk_write>
			fs->fsi_flag = 0;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2200      	movs	r2, #0
 8012d22:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	785b      	ldrb	r3, [r3, #1]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	2100      	movs	r1, #0
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7ff fc73 	bl	8012618 <disk_ioctl>
 8012d32:	4603      	mov	r3, r0
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d001      	beq.n	8012d3c <sync_fs+0xcc>
 8012d38:	2301      	movs	r3, #1
 8012d3a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3710      	adds	r7, #16
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	41615252 	.word	0x41615252
 8012d4c:	61417272 	.word	0x61417272

08012d50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	3b02      	subs	r3, #2
 8012d5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	69db      	ldr	r3, [r3, #28]
 8012d64:	3b02      	subs	r3, #2
 8012d66:	683a      	ldr	r2, [r7, #0]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d301      	bcc.n	8012d70 <clust2sect+0x20>
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	e008      	b.n	8012d82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	895b      	ldrh	r3, [r3, #10]
 8012d74:	461a      	mov	r2, r3
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	fb03 f202 	mul.w	r2, r3, r2
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d80:	4413      	add	r3, r2
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	370c      	adds	r7, #12
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr

08012d8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b086      	sub	sp, #24
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
 8012d96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	2b01      	cmp	r3, #1
 8012da2:	d904      	bls.n	8012dae <get_fat+0x20>
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	69db      	ldr	r3, [r3, #28]
 8012da8:	683a      	ldr	r2, [r7, #0]
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d302      	bcc.n	8012db4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012dae:	2301      	movs	r3, #1
 8012db0:	617b      	str	r3, [r7, #20]
 8012db2:	e0b7      	b.n	8012f24 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012db4:	f04f 33ff 	mov.w	r3, #4294967295
 8012db8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	2b02      	cmp	r3, #2
 8012dc0:	d05a      	beq.n	8012e78 <get_fat+0xea>
 8012dc2:	2b03      	cmp	r3, #3
 8012dc4:	d07d      	beq.n	8012ec2 <get_fat+0x134>
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	f040 80a2 	bne.w	8012f10 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	60fb      	str	r3, [r7, #12]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	085b      	lsrs	r3, r3, #1
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	4413      	add	r3, r2
 8012dd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	899b      	ldrh	r3, [r3, #12]
 8012de2:	4619      	mov	r1, r3
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8012dea:	4413      	add	r3, r2
 8012dec:	4619      	mov	r1, r3
 8012dee:	6938      	ldr	r0, [r7, #16]
 8012df0:	f7ff ff10 	bl	8012c14 <move_window>
 8012df4:	4603      	mov	r3, r0
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	f040 808d 	bne.w	8012f16 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	1c5a      	adds	r2, r3, #1
 8012e00:	60fa      	str	r2, [r7, #12]
 8012e02:	693a      	ldr	r2, [r7, #16]
 8012e04:	8992      	ldrh	r2, [r2, #12]
 8012e06:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e0a:	fb02 f201 	mul.w	r2, r2, r1
 8012e0e:	1a9b      	subs	r3, r3, r2
 8012e10:	693a      	ldr	r2, [r7, #16]
 8012e12:	4413      	add	r3, r2
 8012e14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	899b      	ldrh	r3, [r3, #12]
 8012e22:	4619      	mov	r1, r3
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e2a:	4413      	add	r3, r2
 8012e2c:	4619      	mov	r1, r3
 8012e2e:	6938      	ldr	r0, [r7, #16]
 8012e30:	f7ff fef0 	bl	8012c14 <move_window>
 8012e34:	4603      	mov	r3, r0
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d16f      	bne.n	8012f1a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	899b      	ldrh	r3, [r3, #12]
 8012e3e:	461a      	mov	r2, r3
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e46:	fb02 f201 	mul.w	r2, r2, r1
 8012e4a:	1a9b      	subs	r3, r3, r2
 8012e4c:	693a      	ldr	r2, [r7, #16]
 8012e4e:	4413      	add	r3, r2
 8012e50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e54:	021b      	lsls	r3, r3, #8
 8012e56:	461a      	mov	r2, r3
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	4313      	orrs	r3, r2
 8012e5c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	f003 0301 	and.w	r3, r3, #1
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d002      	beq.n	8012e6e <get_fat+0xe0>
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	091b      	lsrs	r3, r3, #4
 8012e6c:	e002      	b.n	8012e74 <get_fat+0xe6>
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e74:	617b      	str	r3, [r7, #20]
			break;
 8012e76:	e055      	b.n	8012f24 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	899b      	ldrh	r3, [r3, #12]
 8012e80:	085b      	lsrs	r3, r3, #1
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	4619      	mov	r1, r3
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e8c:	4413      	add	r3, r2
 8012e8e:	4619      	mov	r1, r3
 8012e90:	6938      	ldr	r0, [r7, #16]
 8012e92:	f7ff febf 	bl	8012c14 <move_window>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d140      	bne.n	8012f1e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	005b      	lsls	r3, r3, #1
 8012ea6:	693a      	ldr	r2, [r7, #16]
 8012ea8:	8992      	ldrh	r2, [r2, #12]
 8012eaa:	fbb3 f0f2 	udiv	r0, r3, r2
 8012eae:	fb02 f200 	mul.w	r2, r2, r0
 8012eb2:	1a9b      	subs	r3, r3, r2
 8012eb4:	440b      	add	r3, r1
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7ff fbcc 	bl	8012654 <ld_word>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	617b      	str	r3, [r7, #20]
			break;
 8012ec0:	e030      	b.n	8012f24 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	899b      	ldrh	r3, [r3, #12]
 8012eca:	089b      	lsrs	r3, r3, #2
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	4619      	mov	r1, r3
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ed6:	4413      	add	r3, r2
 8012ed8:	4619      	mov	r1, r3
 8012eda:	6938      	ldr	r0, [r7, #16]
 8012edc:	f7ff fe9a 	bl	8012c14 <move_window>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d11d      	bne.n	8012f22 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	693a      	ldr	r2, [r7, #16]
 8012ef2:	8992      	ldrh	r2, [r2, #12]
 8012ef4:	fbb3 f0f2 	udiv	r0, r3, r2
 8012ef8:	fb02 f200 	mul.w	r2, r2, r0
 8012efc:	1a9b      	subs	r3, r3, r2
 8012efe:	440b      	add	r3, r1
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7ff fbbf 	bl	8012684 <ld_dword>
 8012f06:	4603      	mov	r3, r0
 8012f08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012f0c:	617b      	str	r3, [r7, #20]
			break;
 8012f0e:	e009      	b.n	8012f24 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012f10:	2301      	movs	r3, #1
 8012f12:	617b      	str	r3, [r7, #20]
 8012f14:	e006      	b.n	8012f24 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f16:	bf00      	nop
 8012f18:	e004      	b.n	8012f24 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f1a:	bf00      	nop
 8012f1c:	e002      	b.n	8012f24 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012f1e:	bf00      	nop
 8012f20:	e000      	b.n	8012f24 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012f22:	bf00      	nop
		}
	}

	return val;
 8012f24:	697b      	ldr	r3, [r7, #20]
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3718      	adds	r7, #24
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}

08012f2e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012f2e:	b590      	push	{r4, r7, lr}
 8012f30:	b089      	sub	sp, #36	; 0x24
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	60f8      	str	r0, [r7, #12]
 8012f36:	60b9      	str	r1, [r7, #8]
 8012f38:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012f3a:	2302      	movs	r3, #2
 8012f3c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	2b01      	cmp	r3, #1
 8012f42:	f240 8106 	bls.w	8013152 <put_fat+0x224>
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	69db      	ldr	r3, [r3, #28]
 8012f4a:	68ba      	ldr	r2, [r7, #8]
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	f080 8100 	bcs.w	8013152 <put_fat+0x224>
		switch (fs->fs_type) {
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	2b02      	cmp	r3, #2
 8012f58:	f000 8088 	beq.w	801306c <put_fat+0x13e>
 8012f5c:	2b03      	cmp	r3, #3
 8012f5e:	f000 80b0 	beq.w	80130c2 <put_fat+0x194>
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	f040 80f5 	bne.w	8013152 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	61bb      	str	r3, [r7, #24]
 8012f6c:	69bb      	ldr	r3, [r7, #24]
 8012f6e:	085b      	lsrs	r3, r3, #1
 8012f70:	69ba      	ldr	r2, [r7, #24]
 8012f72:	4413      	add	r3, r2
 8012f74:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	899b      	ldrh	r3, [r3, #12]
 8012f7e:	4619      	mov	r1, r3
 8012f80:	69bb      	ldr	r3, [r7, #24]
 8012f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f86:	4413      	add	r3, r2
 8012f88:	4619      	mov	r1, r3
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f7ff fe42 	bl	8012c14 <move_window>
 8012f90:	4603      	mov	r3, r0
 8012f92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f94:	7ffb      	ldrb	r3, [r7, #31]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	f040 80d4 	bne.w	8013144 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	1c5a      	adds	r2, r3, #1
 8012fa6:	61ba      	str	r2, [r7, #24]
 8012fa8:	68fa      	ldr	r2, [r7, #12]
 8012faa:	8992      	ldrh	r2, [r2, #12]
 8012fac:	fbb3 f0f2 	udiv	r0, r3, r2
 8012fb0:	fb02 f200 	mul.w	r2, r2, r0
 8012fb4:	1a9b      	subs	r3, r3, r2
 8012fb6:	440b      	add	r3, r1
 8012fb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	f003 0301 	and.w	r3, r3, #1
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d00d      	beq.n	8012fe0 <put_fat+0xb2>
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	b25b      	sxtb	r3, r3
 8012fca:	f003 030f 	and.w	r3, r3, #15
 8012fce:	b25a      	sxtb	r2, r3
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	011b      	lsls	r3, r3, #4
 8012fd6:	b25b      	sxtb	r3, r3
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	b25b      	sxtb	r3, r3
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	e001      	b.n	8012fe4 <put_fat+0xb6>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	697a      	ldr	r2, [r7, #20]
 8012fe6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2201      	movs	r2, #1
 8012fec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	899b      	ldrh	r3, [r3, #12]
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	69bb      	ldr	r3, [r7, #24]
 8012ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ffe:	4413      	add	r3, r2
 8013000:	4619      	mov	r1, r3
 8013002:	68f8      	ldr	r0, [r7, #12]
 8013004:	f7ff fe06 	bl	8012c14 <move_window>
 8013008:	4603      	mov	r3, r0
 801300a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801300c:	7ffb      	ldrb	r3, [r7, #31]
 801300e:	2b00      	cmp	r3, #0
 8013010:	f040 809a 	bne.w	8013148 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	899b      	ldrh	r3, [r3, #12]
 801301e:	461a      	mov	r2, r3
 8013020:	69bb      	ldr	r3, [r7, #24]
 8013022:	fbb3 f0f2 	udiv	r0, r3, r2
 8013026:	fb02 f200 	mul.w	r2, r2, r0
 801302a:	1a9b      	subs	r3, r3, r2
 801302c:	440b      	add	r3, r1
 801302e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	f003 0301 	and.w	r3, r3, #1
 8013036:	2b00      	cmp	r3, #0
 8013038:	d003      	beq.n	8013042 <put_fat+0x114>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	091b      	lsrs	r3, r3, #4
 801303e:	b2db      	uxtb	r3, r3
 8013040:	e00e      	b.n	8013060 <put_fat+0x132>
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	b25b      	sxtb	r3, r3
 8013048:	f023 030f 	bic.w	r3, r3, #15
 801304c:	b25a      	sxtb	r2, r3
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	0a1b      	lsrs	r3, r3, #8
 8013052:	b25b      	sxtb	r3, r3
 8013054:	f003 030f 	and.w	r3, r3, #15
 8013058:	b25b      	sxtb	r3, r3
 801305a:	4313      	orrs	r3, r2
 801305c:	b25b      	sxtb	r3, r3
 801305e:	b2db      	uxtb	r3, r3
 8013060:	697a      	ldr	r2, [r7, #20]
 8013062:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	2201      	movs	r2, #1
 8013068:	70da      	strb	r2, [r3, #3]
			break;
 801306a:	e072      	b.n	8013152 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	899b      	ldrh	r3, [r3, #12]
 8013074:	085b      	lsrs	r3, r3, #1
 8013076:	b29b      	uxth	r3, r3
 8013078:	4619      	mov	r1, r3
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013080:	4413      	add	r3, r2
 8013082:	4619      	mov	r1, r3
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	f7ff fdc5 	bl	8012c14 <move_window>
 801308a:	4603      	mov	r3, r0
 801308c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801308e:	7ffb      	ldrb	r3, [r7, #31]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d15b      	bne.n	801314c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	005b      	lsls	r3, r3, #1
 801309e:	68fa      	ldr	r2, [r7, #12]
 80130a0:	8992      	ldrh	r2, [r2, #12]
 80130a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80130a6:	fb02 f200 	mul.w	r2, r2, r0
 80130aa:	1a9b      	subs	r3, r3, r2
 80130ac:	440b      	add	r3, r1
 80130ae:	687a      	ldr	r2, [r7, #4]
 80130b0:	b292      	uxth	r2, r2
 80130b2:	4611      	mov	r1, r2
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7ff fb08 	bl	80126ca <st_word>
			fs->wflag = 1;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2201      	movs	r2, #1
 80130be:	70da      	strb	r2, [r3, #3]
			break;
 80130c0:	e047      	b.n	8013152 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	899b      	ldrh	r3, [r3, #12]
 80130ca:	089b      	lsrs	r3, r3, #2
 80130cc:	b29b      	uxth	r3, r3
 80130ce:	4619      	mov	r1, r3
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80130d6:	4413      	add	r3, r2
 80130d8:	4619      	mov	r1, r3
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f7ff fd9a 	bl	8012c14 <move_window>
 80130e0:	4603      	mov	r3, r0
 80130e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80130e4:	7ffb      	ldrb	r3, [r7, #31]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d132      	bne.n	8013150 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	68fa      	ldr	r2, [r7, #12]
 80130fc:	8992      	ldrh	r2, [r2, #12]
 80130fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8013102:	fb02 f200 	mul.w	r2, r2, r0
 8013106:	1a9b      	subs	r3, r3, r2
 8013108:	440b      	add	r3, r1
 801310a:	4618      	mov	r0, r3
 801310c:	f7ff faba 	bl	8012684 <ld_dword>
 8013110:	4603      	mov	r3, r0
 8013112:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013116:	4323      	orrs	r3, r4
 8013118:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	009b      	lsls	r3, r3, #2
 8013124:	68fa      	ldr	r2, [r7, #12]
 8013126:	8992      	ldrh	r2, [r2, #12]
 8013128:	fbb3 f0f2 	udiv	r0, r3, r2
 801312c:	fb02 f200 	mul.w	r2, r2, r0
 8013130:	1a9b      	subs	r3, r3, r2
 8013132:	440b      	add	r3, r1
 8013134:	6879      	ldr	r1, [r7, #4]
 8013136:	4618      	mov	r0, r3
 8013138:	f7ff fae2 	bl	8012700 <st_dword>
			fs->wflag = 1;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	2201      	movs	r2, #1
 8013140:	70da      	strb	r2, [r3, #3]
			break;
 8013142:	e006      	b.n	8013152 <put_fat+0x224>
			if (res != FR_OK) break;
 8013144:	bf00      	nop
 8013146:	e004      	b.n	8013152 <put_fat+0x224>
			if (res != FR_OK) break;
 8013148:	bf00      	nop
 801314a:	e002      	b.n	8013152 <put_fat+0x224>
			if (res != FR_OK) break;
 801314c:	bf00      	nop
 801314e:	e000      	b.n	8013152 <put_fat+0x224>
			if (res != FR_OK) break;
 8013150:	bf00      	nop
		}
	}
	return res;
 8013152:	7ffb      	ldrb	r3, [r7, #31]
}
 8013154:	4618      	mov	r0, r3
 8013156:	3724      	adds	r7, #36	; 0x24
 8013158:	46bd      	mov	sp, r7
 801315a:	bd90      	pop	{r4, r7, pc}

0801315c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b088      	sub	sp, #32
 8013160:	af00      	add	r7, sp, #0
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013168:	2300      	movs	r3, #0
 801316a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	2b01      	cmp	r3, #1
 8013176:	d904      	bls.n	8013182 <remove_chain+0x26>
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	69db      	ldr	r3, [r3, #28]
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	429a      	cmp	r2, r3
 8013180:	d301      	bcc.n	8013186 <remove_chain+0x2a>
 8013182:	2302      	movs	r3, #2
 8013184:	e04b      	b.n	801321e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00c      	beq.n	80131a6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801318c:	f04f 32ff 	mov.w	r2, #4294967295
 8013190:	6879      	ldr	r1, [r7, #4]
 8013192:	69b8      	ldr	r0, [r7, #24]
 8013194:	f7ff fecb 	bl	8012f2e <put_fat>
 8013198:	4603      	mov	r3, r0
 801319a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801319c:	7ffb      	ldrb	r3, [r7, #31]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d001      	beq.n	80131a6 <remove_chain+0x4a>
 80131a2:	7ffb      	ldrb	r3, [r7, #31]
 80131a4:	e03b      	b.n	801321e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80131a6:	68b9      	ldr	r1, [r7, #8]
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f7ff fdf0 	bl	8012d8e <get_fat>
 80131ae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d031      	beq.n	801321a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	d101      	bne.n	80131c0 <remove_chain+0x64>
 80131bc:	2302      	movs	r3, #2
 80131be:	e02e      	b.n	801321e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131c6:	d101      	bne.n	80131cc <remove_chain+0x70>
 80131c8:	2301      	movs	r3, #1
 80131ca:	e028      	b.n	801321e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80131cc:	2200      	movs	r2, #0
 80131ce:	68b9      	ldr	r1, [r7, #8]
 80131d0:	69b8      	ldr	r0, [r7, #24]
 80131d2:	f7ff feac 	bl	8012f2e <put_fat>
 80131d6:	4603      	mov	r3, r0
 80131d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80131da:	7ffb      	ldrb	r3, [r7, #31]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d001      	beq.n	80131e4 <remove_chain+0x88>
 80131e0:	7ffb      	ldrb	r3, [r7, #31]
 80131e2:	e01c      	b.n	801321e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80131e4:	69bb      	ldr	r3, [r7, #24]
 80131e6:	699a      	ldr	r2, [r3, #24]
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	69db      	ldr	r3, [r3, #28]
 80131ec:	3b02      	subs	r3, #2
 80131ee:	429a      	cmp	r2, r3
 80131f0:	d20b      	bcs.n	801320a <remove_chain+0xae>
			fs->free_clst++;
 80131f2:	69bb      	ldr	r3, [r7, #24]
 80131f4:	699b      	ldr	r3, [r3, #24]
 80131f6:	1c5a      	adds	r2, r3, #1
 80131f8:	69bb      	ldr	r3, [r7, #24]
 80131fa:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80131fc:	69bb      	ldr	r3, [r7, #24]
 80131fe:	791b      	ldrb	r3, [r3, #4]
 8013200:	f043 0301 	orr.w	r3, r3, #1
 8013204:	b2da      	uxtb	r2, r3
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	69db      	ldr	r3, [r3, #28]
 8013212:	68ba      	ldr	r2, [r7, #8]
 8013214:	429a      	cmp	r2, r3
 8013216:	d3c6      	bcc.n	80131a6 <remove_chain+0x4a>
 8013218:	e000      	b.n	801321c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801321a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801321c:	2300      	movs	r3, #0
}
 801321e:	4618      	mov	r0, r3
 8013220:	3720      	adds	r7, #32
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013226:	b580      	push	{r7, lr}
 8013228:	b088      	sub	sp, #32
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
 801322e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d10d      	bne.n	8013258 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	695b      	ldr	r3, [r3, #20]
 8013240:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d004      	beq.n	8013252 <create_chain+0x2c>
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	69db      	ldr	r3, [r3, #28]
 801324c:	69ba      	ldr	r2, [r7, #24]
 801324e:	429a      	cmp	r2, r3
 8013250:	d31b      	bcc.n	801328a <create_chain+0x64>
 8013252:	2301      	movs	r3, #1
 8013254:	61bb      	str	r3, [r7, #24]
 8013256:	e018      	b.n	801328a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013258:	6839      	ldr	r1, [r7, #0]
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7ff fd97 	bl	8012d8e <get_fat>
 8013260:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2b01      	cmp	r3, #1
 8013266:	d801      	bhi.n	801326c <create_chain+0x46>
 8013268:	2301      	movs	r3, #1
 801326a:	e070      	b.n	801334e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013272:	d101      	bne.n	8013278 <create_chain+0x52>
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	e06a      	b.n	801334e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	69db      	ldr	r3, [r3, #28]
 801327c:	68fa      	ldr	r2, [r7, #12]
 801327e:	429a      	cmp	r2, r3
 8013280:	d201      	bcs.n	8013286 <create_chain+0x60>
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	e063      	b.n	801334e <create_chain+0x128>
		scl = clst;
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801328e:	69fb      	ldr	r3, [r7, #28]
 8013290:	3301      	adds	r3, #1
 8013292:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	69db      	ldr	r3, [r3, #28]
 8013298:	69fa      	ldr	r2, [r7, #28]
 801329a:	429a      	cmp	r2, r3
 801329c:	d307      	bcc.n	80132ae <create_chain+0x88>
				ncl = 2;
 801329e:	2302      	movs	r3, #2
 80132a0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80132a2:	69fa      	ldr	r2, [r7, #28]
 80132a4:	69bb      	ldr	r3, [r7, #24]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d901      	bls.n	80132ae <create_chain+0x88>
 80132aa:	2300      	movs	r3, #0
 80132ac:	e04f      	b.n	801334e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80132ae:	69f9      	ldr	r1, [r7, #28]
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f7ff fd6c 	bl	8012d8e <get_fat>
 80132b6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d00e      	beq.n	80132dc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d003      	beq.n	80132cc <create_chain+0xa6>
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ca:	d101      	bne.n	80132d0 <create_chain+0xaa>
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	e03e      	b.n	801334e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80132d0:	69fa      	ldr	r2, [r7, #28]
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d1da      	bne.n	801328e <create_chain+0x68>
 80132d8:	2300      	movs	r3, #0
 80132da:	e038      	b.n	801334e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80132dc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80132de:	f04f 32ff 	mov.w	r2, #4294967295
 80132e2:	69f9      	ldr	r1, [r7, #28]
 80132e4:	6938      	ldr	r0, [r7, #16]
 80132e6:	f7ff fe22 	bl	8012f2e <put_fat>
 80132ea:	4603      	mov	r3, r0
 80132ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80132ee:	7dfb      	ldrb	r3, [r7, #23]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d109      	bne.n	8013308 <create_chain+0xe2>
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d006      	beq.n	8013308 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80132fa:	69fa      	ldr	r2, [r7, #28]
 80132fc:	6839      	ldr	r1, [r7, #0]
 80132fe:	6938      	ldr	r0, [r7, #16]
 8013300:	f7ff fe15 	bl	8012f2e <put_fat>
 8013304:	4603      	mov	r3, r0
 8013306:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013308:	7dfb      	ldrb	r3, [r7, #23]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d116      	bne.n	801333c <create_chain+0x116>
		fs->last_clst = ncl;
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	69fa      	ldr	r2, [r7, #28]
 8013312:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	699a      	ldr	r2, [r3, #24]
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	69db      	ldr	r3, [r3, #28]
 801331c:	3b02      	subs	r3, #2
 801331e:	429a      	cmp	r2, r3
 8013320:	d804      	bhi.n	801332c <create_chain+0x106>
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	699b      	ldr	r3, [r3, #24]
 8013326:	1e5a      	subs	r2, r3, #1
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	791b      	ldrb	r3, [r3, #4]
 8013330:	f043 0301 	orr.w	r3, r3, #1
 8013334:	b2da      	uxtb	r2, r3
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	711a      	strb	r2, [r3, #4]
 801333a:	e007      	b.n	801334c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801333c:	7dfb      	ldrb	r3, [r7, #23]
 801333e:	2b01      	cmp	r3, #1
 8013340:	d102      	bne.n	8013348 <create_chain+0x122>
 8013342:	f04f 33ff 	mov.w	r3, #4294967295
 8013346:	e000      	b.n	801334a <create_chain+0x124>
 8013348:	2301      	movs	r3, #1
 801334a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801334c:	69fb      	ldr	r3, [r7, #28]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3720      	adds	r7, #32
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}

08013356 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013356:	b480      	push	{r7}
 8013358:	b087      	sub	sp, #28
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
 801335e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801336a:	3304      	adds	r3, #4
 801336c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	899b      	ldrh	r3, [r3, #12]
 8013372:	461a      	mov	r2, r3
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	fbb3 f3f2 	udiv	r3, r3, r2
 801337a:	68fa      	ldr	r2, [r7, #12]
 801337c:	8952      	ldrh	r2, [r2, #10]
 801337e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013382:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	1d1a      	adds	r2, r3, #4
 8013388:	613a      	str	r2, [r7, #16]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d101      	bne.n	8013398 <clmt_clust+0x42>
 8013394:	2300      	movs	r3, #0
 8013396:	e010      	b.n	80133ba <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8013398:	697a      	ldr	r2, [r7, #20]
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	429a      	cmp	r2, r3
 801339e:	d307      	bcc.n	80133b0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80133a0:	697a      	ldr	r2, [r7, #20]
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	1ad3      	subs	r3, r2, r3
 80133a6:	617b      	str	r3, [r7, #20]
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	3304      	adds	r3, #4
 80133ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80133ae:	e7e9      	b.n	8013384 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80133b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	681a      	ldr	r2, [r3, #0]
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	4413      	add	r3, r2
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	371c      	adds	r7, #28
 80133be:	46bd      	mov	sp, r7
 80133c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c4:	4770      	bx	lr

080133c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80133c6:	b580      	push	{r7, lr}
 80133c8:	b086      	sub	sp, #24
 80133ca:	af00      	add	r7, sp, #0
 80133cc:	6078      	str	r0, [r7, #4]
 80133ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80133dc:	d204      	bcs.n	80133e8 <dir_sdi+0x22>
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	f003 031f 	and.w	r3, r3, #31
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d001      	beq.n	80133ec <dir_sdi+0x26>
		return FR_INT_ERR;
 80133e8:	2302      	movs	r3, #2
 80133ea:	e071      	b.n	80134d0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	683a      	ldr	r2, [r7, #0]
 80133f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	689b      	ldr	r3, [r3, #8]
 80133f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d106      	bne.n	801340c <dir_sdi+0x46>
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	2b02      	cmp	r3, #2
 8013404:	d902      	bls.n	801340c <dir_sdi+0x46>
		clst = fs->dirbase;
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801340a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d10c      	bne.n	801342c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	095b      	lsrs	r3, r3, #5
 8013416:	693a      	ldr	r2, [r7, #16]
 8013418:	8912      	ldrh	r2, [r2, #8]
 801341a:	4293      	cmp	r3, r2
 801341c:	d301      	bcc.n	8013422 <dir_sdi+0x5c>
 801341e:	2302      	movs	r3, #2
 8013420:	e056      	b.n	80134d0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8013422:	693b      	ldr	r3, [r7, #16]
 8013424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	61da      	str	r2, [r3, #28]
 801342a:	e02d      	b.n	8013488 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	895b      	ldrh	r3, [r3, #10]
 8013430:	461a      	mov	r2, r3
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	899b      	ldrh	r3, [r3, #12]
 8013436:	fb03 f302 	mul.w	r3, r3, r2
 801343a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801343c:	e019      	b.n	8013472 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6979      	ldr	r1, [r7, #20]
 8013442:	4618      	mov	r0, r3
 8013444:	f7ff fca3 	bl	8012d8e <get_fat>
 8013448:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013450:	d101      	bne.n	8013456 <dir_sdi+0x90>
 8013452:	2301      	movs	r3, #1
 8013454:	e03c      	b.n	80134d0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	2b01      	cmp	r3, #1
 801345a:	d904      	bls.n	8013466 <dir_sdi+0xa0>
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	69db      	ldr	r3, [r3, #28]
 8013460:	697a      	ldr	r2, [r7, #20]
 8013462:	429a      	cmp	r2, r3
 8013464:	d301      	bcc.n	801346a <dir_sdi+0xa4>
 8013466:	2302      	movs	r3, #2
 8013468:	e032      	b.n	80134d0 <dir_sdi+0x10a>
			ofs -= csz;
 801346a:	683a      	ldr	r2, [r7, #0]
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	1ad3      	subs	r3, r2, r3
 8013470:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013472:	683a      	ldr	r2, [r7, #0]
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	429a      	cmp	r2, r3
 8013478:	d2e1      	bcs.n	801343e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801347a:	6979      	ldr	r1, [r7, #20]
 801347c:	6938      	ldr	r0, [r7, #16]
 801347e:	f7ff fc67 	bl	8012d50 <clust2sect>
 8013482:	4602      	mov	r2, r0
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	697a      	ldr	r2, [r7, #20]
 801348c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	69db      	ldr	r3, [r3, #28]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d101      	bne.n	801349a <dir_sdi+0xd4>
 8013496:	2302      	movs	r3, #2
 8013498:	e01a      	b.n	80134d0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	69da      	ldr	r2, [r3, #28]
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	899b      	ldrh	r3, [r3, #12]
 80134a2:	4619      	mov	r1, r3
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80134aa:	441a      	add	r2, r3
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	899b      	ldrh	r3, [r3, #12]
 80134ba:	461a      	mov	r2, r3
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	fbb3 f0f2 	udiv	r0, r3, r2
 80134c2:	fb02 f200 	mul.w	r2, r2, r0
 80134c6:	1a9b      	subs	r3, r3, r2
 80134c8:	18ca      	adds	r2, r1, r3
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80134ce:	2300      	movs	r3, #0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3718      	adds	r7, #24
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	695b      	ldr	r3, [r3, #20]
 80134ec:	3320      	adds	r3, #32
 80134ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	69db      	ldr	r3, [r3, #28]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d003      	beq.n	8013500 <dir_next+0x28>
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80134fe:	d301      	bcc.n	8013504 <dir_next+0x2c>
 8013500:	2304      	movs	r3, #4
 8013502:	e0bb      	b.n	801367c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	899b      	ldrh	r3, [r3, #12]
 8013508:	461a      	mov	r2, r3
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013510:	fb02 f201 	mul.w	r2, r2, r1
 8013514:	1a9b      	subs	r3, r3, r2
 8013516:	2b00      	cmp	r3, #0
 8013518:	f040 809d 	bne.w	8013656 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	69db      	ldr	r3, [r3, #28]
 8013520:	1c5a      	adds	r2, r3, #1
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	699b      	ldr	r3, [r3, #24]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d10b      	bne.n	8013546 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	095b      	lsrs	r3, r3, #5
 8013532:	68fa      	ldr	r2, [r7, #12]
 8013534:	8912      	ldrh	r2, [r2, #8]
 8013536:	4293      	cmp	r3, r2
 8013538:	f0c0 808d 	bcc.w	8013656 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2200      	movs	r2, #0
 8013540:	61da      	str	r2, [r3, #28]
 8013542:	2304      	movs	r3, #4
 8013544:	e09a      	b.n	801367c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	899b      	ldrh	r3, [r3, #12]
 801354a:	461a      	mov	r2, r3
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013552:	68fa      	ldr	r2, [r7, #12]
 8013554:	8952      	ldrh	r2, [r2, #10]
 8013556:	3a01      	subs	r2, #1
 8013558:	4013      	ands	r3, r2
 801355a:	2b00      	cmp	r3, #0
 801355c:	d17b      	bne.n	8013656 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	699b      	ldr	r3, [r3, #24]
 8013564:	4619      	mov	r1, r3
 8013566:	4610      	mov	r0, r2
 8013568:	f7ff fc11 	bl	8012d8e <get_fat>
 801356c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	2b01      	cmp	r3, #1
 8013572:	d801      	bhi.n	8013578 <dir_next+0xa0>
 8013574:	2302      	movs	r3, #2
 8013576:	e081      	b.n	801367c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801357e:	d101      	bne.n	8013584 <dir_next+0xac>
 8013580:	2301      	movs	r3, #1
 8013582:	e07b      	b.n	801367c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	69db      	ldr	r3, [r3, #28]
 8013588:	697a      	ldr	r2, [r7, #20]
 801358a:	429a      	cmp	r2, r3
 801358c:	d359      	bcc.n	8013642 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d104      	bne.n	801359e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2200      	movs	r2, #0
 8013598:	61da      	str	r2, [r3, #28]
 801359a:	2304      	movs	r3, #4
 801359c:	e06e      	b.n	801367c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801359e:	687a      	ldr	r2, [r7, #4]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	699b      	ldr	r3, [r3, #24]
 80135a4:	4619      	mov	r1, r3
 80135a6:	4610      	mov	r0, r2
 80135a8:	f7ff fe3d 	bl	8013226 <create_chain>
 80135ac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d101      	bne.n	80135b8 <dir_next+0xe0>
 80135b4:	2307      	movs	r3, #7
 80135b6:	e061      	b.n	801367c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d101      	bne.n	80135c2 <dir_next+0xea>
 80135be:	2302      	movs	r3, #2
 80135c0:	e05c      	b.n	801367c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135c8:	d101      	bne.n	80135ce <dir_next+0xf6>
 80135ca:	2301      	movs	r3, #1
 80135cc:	e056      	b.n	801367c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	f7ff fadc 	bl	8012b8c <sync_window>
 80135d4:	4603      	mov	r3, r0
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d001      	beq.n	80135de <dir_next+0x106>
 80135da:	2301      	movs	r3, #1
 80135dc:	e04e      	b.n	801367c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	899b      	ldrh	r3, [r3, #12]
 80135e8:	461a      	mov	r2, r3
 80135ea:	2100      	movs	r1, #0
 80135ec:	f7ff f8d5 	bl	801279a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80135f0:	2300      	movs	r3, #0
 80135f2:	613b      	str	r3, [r7, #16]
 80135f4:	6979      	ldr	r1, [r7, #20]
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	f7ff fbaa 	bl	8012d50 <clust2sect>
 80135fc:	4602      	mov	r2, r0
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	635a      	str	r2, [r3, #52]	; 0x34
 8013602:	e012      	b.n	801362a <dir_next+0x152>
						fs->wflag = 1;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2201      	movs	r2, #1
 8013608:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f7ff fabe 	bl	8012b8c <sync_window>
 8013610:	4603      	mov	r3, r0
 8013612:	2b00      	cmp	r3, #0
 8013614:	d001      	beq.n	801361a <dir_next+0x142>
 8013616:	2301      	movs	r3, #1
 8013618:	e030      	b.n	801367c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	3301      	adds	r3, #1
 801361e:	613b      	str	r3, [r7, #16]
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013624:	1c5a      	adds	r2, r3, #1
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	635a      	str	r2, [r3, #52]	; 0x34
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	895b      	ldrh	r3, [r3, #10]
 801362e:	461a      	mov	r2, r3
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	4293      	cmp	r3, r2
 8013634:	d3e6      	bcc.n	8013604 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	1ad2      	subs	r2, r2, r3
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	697a      	ldr	r2, [r7, #20]
 8013646:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013648:	6979      	ldr	r1, [r7, #20]
 801364a:	68f8      	ldr	r0, [r7, #12]
 801364c:	f7ff fb80 	bl	8012d50 <clust2sect>
 8013650:	4602      	mov	r2, r0
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	68ba      	ldr	r2, [r7, #8]
 801365a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	899b      	ldrh	r3, [r3, #12]
 8013666:	461a      	mov	r2, r3
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	fbb3 f0f2 	udiv	r0, r3, r2
 801366e:	fb02 f200 	mul.w	r2, r2, r0
 8013672:	1a9b      	subs	r3, r3, r2
 8013674:	18ca      	adds	r2, r1, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801367a:	2300      	movs	r3, #0
}
 801367c:	4618      	mov	r0, r3
 801367e:	3718      	adds	r7, #24
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b086      	sub	sp, #24
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013694:	2100      	movs	r1, #0
 8013696:	6878      	ldr	r0, [r7, #4]
 8013698:	f7ff fe95 	bl	80133c6 <dir_sdi>
 801369c:	4603      	mov	r3, r0
 801369e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80136a0:	7dfb      	ldrb	r3, [r7, #23]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d12b      	bne.n	80136fe <dir_alloc+0x7a>
		n = 0;
 80136a6:	2300      	movs	r3, #0
 80136a8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	69db      	ldr	r3, [r3, #28]
 80136ae:	4619      	mov	r1, r3
 80136b0:	68f8      	ldr	r0, [r7, #12]
 80136b2:	f7ff faaf 	bl	8012c14 <move_window>
 80136b6:	4603      	mov	r3, r0
 80136b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80136ba:	7dfb      	ldrb	r3, [r7, #23]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d11d      	bne.n	80136fc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6a1b      	ldr	r3, [r3, #32]
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	2be5      	cmp	r3, #229	; 0xe5
 80136c8:	d004      	beq.n	80136d4 <dir_alloc+0x50>
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6a1b      	ldr	r3, [r3, #32]
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d107      	bne.n	80136e4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	3301      	adds	r3, #1
 80136d8:	613b      	str	r3, [r7, #16]
 80136da:	693a      	ldr	r2, [r7, #16]
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	429a      	cmp	r2, r3
 80136e0:	d102      	bne.n	80136e8 <dir_alloc+0x64>
 80136e2:	e00c      	b.n	80136fe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80136e4:	2300      	movs	r3, #0
 80136e6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80136e8:	2101      	movs	r1, #1
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f7ff fef4 	bl	80134d8 <dir_next>
 80136f0:	4603      	mov	r3, r0
 80136f2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80136f4:	7dfb      	ldrb	r3, [r7, #23]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d0d7      	beq.n	80136aa <dir_alloc+0x26>
 80136fa:	e000      	b.n	80136fe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80136fc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80136fe:	7dfb      	ldrb	r3, [r7, #23]
 8013700:	2b04      	cmp	r3, #4
 8013702:	d101      	bne.n	8013708 <dir_alloc+0x84>
 8013704:	2307      	movs	r3, #7
 8013706:	75fb      	strb	r3, [r7, #23]
	return res;
 8013708:	7dfb      	ldrb	r3, [r7, #23]
}
 801370a:	4618      	mov	r0, r3
 801370c:	3718      	adds	r7, #24
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}

08013712 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013712:	b580      	push	{r7, lr}
 8013714:	b084      	sub	sp, #16
 8013716:	af00      	add	r7, sp, #0
 8013718:	6078      	str	r0, [r7, #4]
 801371a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	331a      	adds	r3, #26
 8013720:	4618      	mov	r0, r3
 8013722:	f7fe ff97 	bl	8012654 <ld_word>
 8013726:	4603      	mov	r3, r0
 8013728:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	2b03      	cmp	r3, #3
 8013730:	d109      	bne.n	8013746 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	3314      	adds	r3, #20
 8013736:	4618      	mov	r0, r3
 8013738:	f7fe ff8c 	bl	8012654 <ld_word>
 801373c:	4603      	mov	r3, r0
 801373e:	041b      	lsls	r3, r3, #16
 8013740:	68fa      	ldr	r2, [r7, #12]
 8013742:	4313      	orrs	r3, r2
 8013744:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013746:	68fb      	ldr	r3, [r7, #12]
}
 8013748:	4618      	mov	r0, r3
 801374a:	3710      	adds	r7, #16
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}

08013750 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	60f8      	str	r0, [r7, #12]
 8013758:	60b9      	str	r1, [r7, #8]
 801375a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	331a      	adds	r3, #26
 8013760:	687a      	ldr	r2, [r7, #4]
 8013762:	b292      	uxth	r2, r2
 8013764:	4611      	mov	r1, r2
 8013766:	4618      	mov	r0, r3
 8013768:	f7fe ffaf 	bl	80126ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	2b03      	cmp	r3, #3
 8013772:	d109      	bne.n	8013788 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	f103 0214 	add.w	r2, r3, #20
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	0c1b      	lsrs	r3, r3, #16
 801377e:	b29b      	uxth	r3, r3
 8013780:	4619      	mov	r1, r3
 8013782:	4610      	mov	r0, r2
 8013784:	f7fe ffa1 	bl	80126ca <st_word>
	}
}
 8013788:	bf00      	nop
 801378a:	3710      	adds	r7, #16
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b086      	sub	sp, #24
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801379e:	2100      	movs	r1, #0
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f7ff fe10 	bl	80133c6 <dir_sdi>
 80137a6:	4603      	mov	r3, r0
 80137a8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80137aa:	7dfb      	ldrb	r3, [r7, #23]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d001      	beq.n	80137b4 <dir_find+0x24>
 80137b0:	7dfb      	ldrb	r3, [r7, #23]
 80137b2:	e03e      	b.n	8013832 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	69db      	ldr	r3, [r3, #28]
 80137b8:	4619      	mov	r1, r3
 80137ba:	6938      	ldr	r0, [r7, #16]
 80137bc:	f7ff fa2a 	bl	8012c14 <move_window>
 80137c0:	4603      	mov	r3, r0
 80137c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80137c4:	7dfb      	ldrb	r3, [r7, #23]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d12f      	bne.n	801382a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6a1b      	ldr	r3, [r3, #32]
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80137d2:	7bfb      	ldrb	r3, [r7, #15]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d102      	bne.n	80137de <dir_find+0x4e>
 80137d8:	2304      	movs	r3, #4
 80137da:	75fb      	strb	r3, [r7, #23]
 80137dc:	e028      	b.n	8013830 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	6a1b      	ldr	r3, [r3, #32]
 80137e2:	330b      	adds	r3, #11
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137ea:	b2da      	uxtb	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6a1b      	ldr	r3, [r3, #32]
 80137f4:	330b      	adds	r3, #11
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	f003 0308 	and.w	r3, r3, #8
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d10a      	bne.n	8013816 <dir_find+0x86>
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6a18      	ldr	r0, [r3, #32]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	3324      	adds	r3, #36	; 0x24
 8013808:	220b      	movs	r2, #11
 801380a:	4619      	mov	r1, r3
 801380c:	f7fe ffdf 	bl	80127ce <mem_cmp>
 8013810:	4603      	mov	r3, r0
 8013812:	2b00      	cmp	r3, #0
 8013814:	d00b      	beq.n	801382e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013816:	2100      	movs	r1, #0
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	f7ff fe5d 	bl	80134d8 <dir_next>
 801381e:	4603      	mov	r3, r0
 8013820:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013822:	7dfb      	ldrb	r3, [r7, #23]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d0c5      	beq.n	80137b4 <dir_find+0x24>
 8013828:	e002      	b.n	8013830 <dir_find+0xa0>
		if (res != FR_OK) break;
 801382a:	bf00      	nop
 801382c:	e000      	b.n	8013830 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801382e:	bf00      	nop

	return res;
 8013830:	7dfb      	ldrb	r3, [r7, #23]
}
 8013832:	4618      	mov	r0, r3
 8013834:	3718      	adds	r7, #24
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}

0801383a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801383a:	b580      	push	{r7, lr}
 801383c:	b084      	sub	sp, #16
 801383e:	af00      	add	r7, sp, #0
 8013840:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013848:	2101      	movs	r1, #1
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f7ff ff1a 	bl	8013684 <dir_alloc>
 8013850:	4603      	mov	r3, r0
 8013852:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013854:	7bfb      	ldrb	r3, [r7, #15]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d11c      	bne.n	8013894 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	69db      	ldr	r3, [r3, #28]
 801385e:	4619      	mov	r1, r3
 8013860:	68b8      	ldr	r0, [r7, #8]
 8013862:	f7ff f9d7 	bl	8012c14 <move_window>
 8013866:	4603      	mov	r3, r0
 8013868:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801386a:	7bfb      	ldrb	r3, [r7, #15]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d111      	bne.n	8013894 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6a1b      	ldr	r3, [r3, #32]
 8013874:	2220      	movs	r2, #32
 8013876:	2100      	movs	r1, #0
 8013878:	4618      	mov	r0, r3
 801387a:	f7fe ff8e 	bl	801279a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6a18      	ldr	r0, [r3, #32]
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	3324      	adds	r3, #36	; 0x24
 8013886:	220b      	movs	r2, #11
 8013888:	4619      	mov	r1, r3
 801388a:	f7fe ff65 	bl	8012758 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	2201      	movs	r2, #1
 8013892:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013894:	7bfb      	ldrb	r3, [r7, #15]
}
 8013896:	4618      	mov	r0, r3
 8013898:	3710      	adds	r7, #16
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
	...

080138a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b088      	sub	sp, #32
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	60fb      	str	r3, [r7, #12]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	3324      	adds	r3, #36	; 0x24
 80138b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80138b6:	220b      	movs	r2, #11
 80138b8:	2120      	movs	r1, #32
 80138ba:	68b8      	ldr	r0, [r7, #8]
 80138bc:	f7fe ff6d 	bl	801279a <mem_set>
	si = i = 0; ni = 8;
 80138c0:	2300      	movs	r3, #0
 80138c2:	613b      	str	r3, [r7, #16]
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	617b      	str	r3, [r7, #20]
 80138c8:	2308      	movs	r3, #8
 80138ca:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80138cc:	697b      	ldr	r3, [r7, #20]
 80138ce:	1c5a      	adds	r2, r3, #1
 80138d0:	617a      	str	r2, [r7, #20]
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	4413      	add	r3, r2
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80138da:	7ffb      	ldrb	r3, [r7, #31]
 80138dc:	2b20      	cmp	r3, #32
 80138de:	d94b      	bls.n	8013978 <create_name+0xd8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80138e0:	7ffb      	ldrb	r3, [r7, #31]
 80138e2:	2b2f      	cmp	r3, #47	; 0x2f
 80138e4:	d006      	beq.n	80138f4 <create_name+0x54>
 80138e6:	7ffb      	ldrb	r3, [r7, #31]
 80138e8:	2b5c      	cmp	r3, #92	; 0x5c
 80138ea:	d110      	bne.n	801390e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80138ec:	e002      	b.n	80138f4 <create_name+0x54>
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	3301      	adds	r3, #1
 80138f2:	617b      	str	r3, [r7, #20]
 80138f4:	68fa      	ldr	r2, [r7, #12]
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	4413      	add	r3, r2
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	2b2f      	cmp	r3, #47	; 0x2f
 80138fe:	d0f6      	beq.n	80138ee <create_name+0x4e>
 8013900:	68fa      	ldr	r2, [r7, #12]
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	4413      	add	r3, r2
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	2b5c      	cmp	r3, #92	; 0x5c
 801390a:	d0f0      	beq.n	80138ee <create_name+0x4e>
			break;
 801390c:	e035      	b.n	801397a <create_name+0xda>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801390e:	7ffb      	ldrb	r3, [r7, #31]
 8013910:	2b2e      	cmp	r3, #46	; 0x2e
 8013912:	d003      	beq.n	801391c <create_name+0x7c>
 8013914:	693a      	ldr	r2, [r7, #16]
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	429a      	cmp	r2, r3
 801391a:	d30c      	bcc.n	8013936 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	2b0b      	cmp	r3, #11
 8013920:	d002      	beq.n	8013928 <create_name+0x88>
 8013922:	7ffb      	ldrb	r3, [r7, #31]
 8013924:	2b2e      	cmp	r3, #46	; 0x2e
 8013926:	d001      	beq.n	801392c <create_name+0x8c>
 8013928:	2306      	movs	r3, #6
 801392a:	e041      	b.n	80139b0 <create_name+0x110>
			i = 8; ni = 11;				/* Goto extension */
 801392c:	2308      	movs	r3, #8
 801392e:	613b      	str	r3, [r7, #16]
 8013930:	230b      	movs	r3, #11
 8013932:	61bb      	str	r3, [r7, #24]
			continue;
 8013934:	e01f      	b.n	8013976 <create_name+0xd6>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013936:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801393a:	2b00      	cmp	r3, #0
 801393c:	da01      	bge.n	8013942 <create_name+0xa2>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
#else
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
 801393e:	2306      	movs	r3, #6
 8013940:	e036      	b.n	80139b0 <create_name+0x110>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013942:	7ffb      	ldrb	r3, [r7, #31]
 8013944:	4619      	mov	r1, r3
 8013946:	481c      	ldr	r0, [pc, #112]	; (80139b8 <create_name+0x118>)
 8013948:	f7fe ff68 	bl	801281c <chk_chr>
 801394c:	4603      	mov	r3, r0
 801394e:	2b00      	cmp	r3, #0
 8013950:	d001      	beq.n	8013956 <create_name+0xb6>
 8013952:	2306      	movs	r3, #6
 8013954:	e02c      	b.n	80139b0 <create_name+0x110>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013956:	7ffb      	ldrb	r3, [r7, #31]
 8013958:	2b60      	cmp	r3, #96	; 0x60
 801395a:	d905      	bls.n	8013968 <create_name+0xc8>
 801395c:	7ffb      	ldrb	r3, [r7, #31]
 801395e:	2b7a      	cmp	r3, #122	; 0x7a
 8013960:	d802      	bhi.n	8013968 <create_name+0xc8>
 8013962:	7ffb      	ldrb	r3, [r7, #31]
 8013964:	3b20      	subs	r3, #32
 8013966:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	1c5a      	adds	r2, r3, #1
 801396c:	613a      	str	r2, [r7, #16]
 801396e:	68ba      	ldr	r2, [r7, #8]
 8013970:	4413      	add	r3, r2
 8013972:	7ffa      	ldrb	r2, [r7, #31]
 8013974:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013976:	e7a9      	b.n	80138cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013978:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801397a:	68fa      	ldr	r2, [r7, #12]
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	441a      	add	r2, r3
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d101      	bne.n	801398e <create_name+0xee>
 801398a:	2306      	movs	r3, #6
 801398c:	e010      	b.n	80139b0 <create_name+0x110>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	2be5      	cmp	r3, #229	; 0xe5
 8013994:	d102      	bne.n	801399c <create_name+0xfc>
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	2205      	movs	r2, #5
 801399a:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801399c:	7ffb      	ldrb	r3, [r7, #31]
 801399e:	2b20      	cmp	r3, #32
 80139a0:	d801      	bhi.n	80139a6 <create_name+0x106>
 80139a2:	2204      	movs	r2, #4
 80139a4:	e000      	b.n	80139a8 <create_name+0x108>
 80139a6:	2200      	movs	r2, #0
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	330b      	adds	r3, #11
 80139ac:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80139ae:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3720      	adds	r7, #32
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	0801dff4 	.word	0x0801dff4

080139bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b086      	sub	sp, #24
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80139d0:	e002      	b.n	80139d8 <follow_path+0x1c>
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	3301      	adds	r3, #1
 80139d6:	603b      	str	r3, [r7, #0]
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	2b2f      	cmp	r3, #47	; 0x2f
 80139de:	d0f8      	beq.n	80139d2 <follow_path+0x16>
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	2b5c      	cmp	r3, #92	; 0x5c
 80139e6:	d0f4      	beq.n	80139d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	2200      	movs	r2, #0
 80139ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	2b1f      	cmp	r3, #31
 80139f4:	d80a      	bhi.n	8013a0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2280      	movs	r2, #128	; 0x80
 80139fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80139fe:	2100      	movs	r1, #0
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f7ff fce0 	bl	80133c6 <dir_sdi>
 8013a06:	4603      	mov	r3, r0
 8013a08:	75fb      	strb	r3, [r7, #23]
 8013a0a:	e048      	b.n	8013a9e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013a0c:	463b      	mov	r3, r7
 8013a0e:	4619      	mov	r1, r3
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f7ff ff45 	bl	80138a0 <create_name>
 8013a16:	4603      	mov	r3, r0
 8013a18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013a1a:	7dfb      	ldrb	r3, [r7, #23]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d139      	bne.n	8013a94 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f7ff feb5 	bl	8013790 <dir_find>
 8013a26:	4603      	mov	r3, r0
 8013a28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013a30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013a32:	7dfb      	ldrb	r3, [r7, #23]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d00a      	beq.n	8013a4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013a38:	7dfb      	ldrb	r3, [r7, #23]
 8013a3a:	2b04      	cmp	r3, #4
 8013a3c:	d12c      	bne.n	8013a98 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013a3e:	7afb      	ldrb	r3, [r7, #11]
 8013a40:	f003 0304 	and.w	r3, r3, #4
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d127      	bne.n	8013a98 <follow_path+0xdc>
 8013a48:	2305      	movs	r3, #5
 8013a4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013a4c:	e024      	b.n	8013a98 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013a4e:	7afb      	ldrb	r3, [r7, #11]
 8013a50:	f003 0304 	and.w	r3, r3, #4
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d121      	bne.n	8013a9c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013a58:	693b      	ldr	r3, [r7, #16]
 8013a5a:	799b      	ldrb	r3, [r3, #6]
 8013a5c:	f003 0310 	and.w	r3, r3, #16
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d102      	bne.n	8013a6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013a64:	2305      	movs	r3, #5
 8013a66:	75fb      	strb	r3, [r7, #23]
 8013a68:	e019      	b.n	8013a9e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	695b      	ldr	r3, [r3, #20]
 8013a74:	68fa      	ldr	r2, [r7, #12]
 8013a76:	8992      	ldrh	r2, [r2, #12]
 8013a78:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a7c:	fb02 f200 	mul.w	r2, r2, r0
 8013a80:	1a9b      	subs	r3, r3, r2
 8013a82:	440b      	add	r3, r1
 8013a84:	4619      	mov	r1, r3
 8013a86:	68f8      	ldr	r0, [r7, #12]
 8013a88:	f7ff fe43 	bl	8013712 <ld_clust>
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013a92:	e7bb      	b.n	8013a0c <follow_path+0x50>
			if (res != FR_OK) break;
 8013a94:	bf00      	nop
 8013a96:	e002      	b.n	8013a9e <follow_path+0xe2>
				break;
 8013a98:	bf00      	nop
 8013a9a:	e000      	b.n	8013a9e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013a9c:	bf00      	nop
			}
		}
	}

	return res;
 8013a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	3718      	adds	r7, #24
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}

08013aa8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013aa8:	b480      	push	{r7}
 8013aaa:	b087      	sub	sp, #28
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ab4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d031      	beq.n	8013b22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	617b      	str	r3, [r7, #20]
 8013ac4:	e002      	b.n	8013acc <get_ldnumber+0x24>
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	3301      	adds	r3, #1
 8013aca:	617b      	str	r3, [r7, #20]
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	2b20      	cmp	r3, #32
 8013ad2:	d903      	bls.n	8013adc <get_ldnumber+0x34>
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	2b3a      	cmp	r3, #58	; 0x3a
 8013ada:	d1f4      	bne.n	8013ac6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	2b3a      	cmp	r3, #58	; 0x3a
 8013ae2:	d11c      	bne.n	8013b1e <get_ldnumber+0x76>
			tp = *path;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	1c5a      	adds	r2, r3, #1
 8013aee:	60fa      	str	r2, [r7, #12]
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	3b30      	subs	r3, #48	; 0x30
 8013af4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	2b09      	cmp	r3, #9
 8013afa:	d80e      	bhi.n	8013b1a <get_ldnumber+0x72>
 8013afc:	68fa      	ldr	r2, [r7, #12]
 8013afe:	697b      	ldr	r3, [r7, #20]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d10a      	bne.n	8013b1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d107      	bne.n	8013b1a <get_ldnumber+0x72>
					vol = (int)i;
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	3301      	adds	r3, #1
 8013b12:	617b      	str	r3, [r7, #20]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	697a      	ldr	r2, [r7, #20]
 8013b18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	e002      	b.n	8013b24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013b1e:	2300      	movs	r3, #0
 8013b20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013b22:	693b      	ldr	r3, [r7, #16]
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	371c      	adds	r7, #28
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr

08013b30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b082      	sub	sp, #8
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	70da      	strb	r2, [r3, #3]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f04f 32ff 	mov.w	r2, #4294967295
 8013b46:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013b48:	6839      	ldr	r1, [r7, #0]
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f7ff f862 	bl	8012c14 <move_window>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d001      	beq.n	8013b5a <check_fs+0x2a>
 8013b56:	2304      	movs	r3, #4
 8013b58:	e038      	b.n	8013bcc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	3338      	adds	r3, #56	; 0x38
 8013b5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7fe fd76 	bl	8012654 <ld_word>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	461a      	mov	r2, r3
 8013b6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d001      	beq.n	8013b78 <check_fs+0x48>
 8013b74:	2303      	movs	r3, #3
 8013b76:	e029      	b.n	8013bcc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b7e:	2be9      	cmp	r3, #233	; 0xe9
 8013b80:	d009      	beq.n	8013b96 <check_fs+0x66>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b88:	2beb      	cmp	r3, #235	; 0xeb
 8013b8a:	d11e      	bne.n	8013bca <check_fs+0x9a>
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013b92:	2b90      	cmp	r3, #144	; 0x90
 8013b94:	d119      	bne.n	8013bca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	3338      	adds	r3, #56	; 0x38
 8013b9a:	3336      	adds	r3, #54	; 0x36
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7fe fd71 	bl	8012684 <ld_dword>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013ba8:	4a0a      	ldr	r2, [pc, #40]	; (8013bd4 <check_fs+0xa4>)
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d101      	bne.n	8013bb2 <check_fs+0x82>
 8013bae:	2300      	movs	r3, #0
 8013bb0:	e00c      	b.n	8013bcc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	3338      	adds	r3, #56	; 0x38
 8013bb6:	3352      	adds	r3, #82	; 0x52
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fe fd63 	bl	8012684 <ld_dword>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	4b05      	ldr	r3, [pc, #20]	; (8013bd8 <check_fs+0xa8>)
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d101      	bne.n	8013bca <check_fs+0x9a>
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	e000      	b.n	8013bcc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013bca:	2302      	movs	r3, #2
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3708      	adds	r7, #8
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}
 8013bd4:	00544146 	.word	0x00544146
 8013bd8:	33544146 	.word	0x33544146

08013bdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b096      	sub	sp, #88	; 0x58
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	60f8      	str	r0, [r7, #12]
 8013be4:	60b9      	str	r1, [r7, #8]
 8013be6:	4613      	mov	r3, r2
 8013be8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	2200      	movs	r2, #0
 8013bee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013bf0:	68f8      	ldr	r0, [r7, #12]
 8013bf2:	f7ff ff59 	bl	8013aa8 <get_ldnumber>
 8013bf6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	da01      	bge.n	8013c02 <find_volume+0x26>
 8013bfe:	230b      	movs	r3, #11
 8013c00:	e26c      	b.n	80140dc <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013c02:	4aa4      	ldr	r2, [pc, #656]	; (8013e94 <find_volume+0x2b8>)
 8013c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <find_volume+0x3a>
 8013c12:	230c      	movs	r3, #12
 8013c14:	e262      	b.n	80140dc <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8013c16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c18:	f7fe fe1b 	bl	8012852 <lock_fs>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d101      	bne.n	8013c26 <find_volume+0x4a>
 8013c22:	230f      	movs	r3, #15
 8013c24:	e25a      	b.n	80140dc <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013c2c:	79fb      	ldrb	r3, [r7, #7]
 8013c2e:	f023 0301 	bic.w	r3, r3, #1
 8013c32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d01a      	beq.n	8013c72 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3e:	785b      	ldrb	r3, [r3, #1]
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7fe fc69 	bl	8012518 <disk_status>
 8013c46:	4603      	mov	r3, r0
 8013c48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c50:	f003 0301 	and.w	r3, r3, #1
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d10c      	bne.n	8013c72 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013c58:	79fb      	ldrb	r3, [r7, #7]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d007      	beq.n	8013c6e <find_volume+0x92>
 8013c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c62:	f003 0304 	and.w	r3, r3, #4
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d001      	beq.n	8013c6e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013c6a:	230a      	movs	r3, #10
 8013c6c:	e236      	b.n	80140dc <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8013c6e:	2300      	movs	r3, #0
 8013c70:	e234      	b.n	80140dc <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c74:	2200      	movs	r2, #0
 8013c76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c7a:	b2da      	uxtb	r2, r3
 8013c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c82:	785b      	ldrb	r3, [r3, #1]
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7fe fc61 	bl	801254c <disk_initialize>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013c90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c94:	f003 0301 	and.w	r3, r3, #1
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d001      	beq.n	8013ca0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013c9c:	2303      	movs	r3, #3
 8013c9e:	e21d      	b.n	80140dc <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013ca0:	79fb      	ldrb	r3, [r7, #7]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d007      	beq.n	8013cb6 <find_volume+0xda>
 8013ca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013caa:	f003 0304 	and.w	r3, r3, #4
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d001      	beq.n	8013cb6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8013cb2:	230a      	movs	r3, #10
 8013cb4:	e212      	b.n	80140dc <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8013cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb8:	7858      	ldrb	r0, [r3, #1]
 8013cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cbc:	330c      	adds	r3, #12
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	2102      	movs	r1, #2
 8013cc2:	f7fe fca9 	bl	8012618 <disk_ioctl>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d001      	beq.n	8013cd0 <find_volume+0xf4>
 8013ccc:	2301      	movs	r3, #1
 8013cce:	e205      	b.n	80140dc <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cd2:	899b      	ldrh	r3, [r3, #12]
 8013cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013cd8:	d80d      	bhi.n	8013cf6 <find_volume+0x11a>
 8013cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cdc:	899b      	ldrh	r3, [r3, #12]
 8013cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ce2:	d308      	bcc.n	8013cf6 <find_volume+0x11a>
 8013ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ce6:	899b      	ldrh	r3, [r3, #12]
 8013ce8:	461a      	mov	r2, r3
 8013cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cec:	899b      	ldrh	r3, [r3, #12]
 8013cee:	3b01      	subs	r3, #1
 8013cf0:	4013      	ands	r3, r2
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d001      	beq.n	8013cfa <find_volume+0x11e>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e1f0      	b.n	80140dc <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013cfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013d00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013d02:	f7ff ff15 	bl	8013b30 <check_fs>
 8013d06:	4603      	mov	r3, r0
 8013d08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d10:	2b02      	cmp	r3, #2
 8013d12:	d14b      	bne.n	8013dac <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013d14:	2300      	movs	r3, #0
 8013d16:	643b      	str	r3, [r7, #64]	; 0x40
 8013d18:	e01f      	b.n	8013d5a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d1c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d22:	011b      	lsls	r3, r3, #4
 8013d24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013d28:	4413      	add	r3, r2
 8013d2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2e:	3304      	adds	r3, #4
 8013d30:	781b      	ldrb	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d006      	beq.n	8013d44 <find_volume+0x168>
 8013d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d38:	3308      	adds	r3, #8
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fe fca2 	bl	8012684 <ld_dword>
 8013d40:	4602      	mov	r2, r0
 8013d42:	e000      	b.n	8013d46 <find_volume+0x16a>
 8013d44:	2200      	movs	r2, #0
 8013d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d48:	009b      	lsls	r3, r3, #2
 8013d4a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013d4e:	440b      	add	r3, r1
 8013d50:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d56:	3301      	adds	r3, #1
 8013d58:	643b      	str	r3, [r7, #64]	; 0x40
 8013d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d5c:	2b03      	cmp	r3, #3
 8013d5e:	d9dc      	bls.n	8013d1a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013d60:	2300      	movs	r3, #0
 8013d62:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d002      	beq.n	8013d70 <find_volume+0x194>
 8013d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d6c:	3b01      	subs	r3, #1
 8013d6e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d72:	009b      	lsls	r3, r3, #2
 8013d74:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013d78:	4413      	add	r3, r2
 8013d7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013d7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d005      	beq.n	8013d92 <find_volume+0x1b6>
 8013d86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013d88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013d8a:	f7ff fed1 	bl	8013b30 <check_fs>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	e000      	b.n	8013d94 <find_volume+0x1b8>
 8013d92:	2303      	movs	r3, #3
 8013d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d9c:	2b01      	cmp	r3, #1
 8013d9e:	d905      	bls.n	8013dac <find_volume+0x1d0>
 8013da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013da2:	3301      	adds	r3, #1
 8013da4:	643b      	str	r3, [r7, #64]	; 0x40
 8013da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013da8:	2b03      	cmp	r3, #3
 8013daa:	d9e1      	bls.n	8013d70 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013db0:	2b04      	cmp	r3, #4
 8013db2:	d101      	bne.n	8013db8 <find_volume+0x1dc>
 8013db4:	2301      	movs	r3, #1
 8013db6:	e191      	b.n	80140dc <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	d901      	bls.n	8013dc4 <find_volume+0x1e8>
 8013dc0:	230d      	movs	r3, #13
 8013dc2:	e18b      	b.n	80140dc <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dc6:	3338      	adds	r3, #56	; 0x38
 8013dc8:	330b      	adds	r3, #11
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fe fc42 	bl	8012654 <ld_word>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	461a      	mov	r2, r3
 8013dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd6:	899b      	ldrh	r3, [r3, #12]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d001      	beq.n	8013de0 <find_volume+0x204>
 8013ddc:	230d      	movs	r3, #13
 8013dde:	e17d      	b.n	80140dc <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de2:	3338      	adds	r3, #56	; 0x38
 8013de4:	3316      	adds	r3, #22
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7fe fc34 	bl	8012654 <ld_word>
 8013dec:	4603      	mov	r3, r0
 8013dee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d106      	bne.n	8013e04 <find_volume+0x228>
 8013df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df8:	3338      	adds	r3, #56	; 0x38
 8013dfa:	3324      	adds	r3, #36	; 0x24
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7fe fc41 	bl	8012684 <ld_dword>
 8013e02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e08:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e0c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e16:	789b      	ldrb	r3, [r3, #2]
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d005      	beq.n	8013e28 <find_volume+0x24c>
 8013e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e1e:	789b      	ldrb	r3, [r3, #2]
 8013e20:	2b02      	cmp	r3, #2
 8013e22:	d001      	beq.n	8013e28 <find_volume+0x24c>
 8013e24:	230d      	movs	r3, #13
 8013e26:	e159      	b.n	80140dc <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2a:	789b      	ldrb	r3, [r3, #2]
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e30:	fb02 f303 	mul.w	r3, r2, r3
 8013e34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e44:	895b      	ldrh	r3, [r3, #10]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d008      	beq.n	8013e5c <find_volume+0x280>
 8013e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e4c:	895b      	ldrh	r3, [r3, #10]
 8013e4e:	461a      	mov	r2, r3
 8013e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e52:	895b      	ldrh	r3, [r3, #10]
 8013e54:	3b01      	subs	r3, #1
 8013e56:	4013      	ands	r3, r2
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d001      	beq.n	8013e60 <find_volume+0x284>
 8013e5c:	230d      	movs	r3, #13
 8013e5e:	e13d      	b.n	80140dc <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e62:	3338      	adds	r3, #56	; 0x38
 8013e64:	3311      	adds	r3, #17
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7fe fbf4 	bl	8012654 <ld_word>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	461a      	mov	r2, r3
 8013e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e76:	891b      	ldrh	r3, [r3, #8]
 8013e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e7a:	8992      	ldrh	r2, [r2, #12]
 8013e7c:	0952      	lsrs	r2, r2, #5
 8013e7e:	b292      	uxth	r2, r2
 8013e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e84:	fb02 f201 	mul.w	r2, r2, r1
 8013e88:	1a9b      	subs	r3, r3, r2
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d003      	beq.n	8013e98 <find_volume+0x2bc>
 8013e90:	230d      	movs	r3, #13
 8013e92:	e123      	b.n	80140dc <find_volume+0x500>
 8013e94:	20000a3c 	.word	0x20000a3c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9a:	3338      	adds	r3, #56	; 0x38
 8013e9c:	3313      	adds	r3, #19
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fe fbd8 	bl	8012654 <ld_word>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d106      	bne.n	8013ebc <find_volume+0x2e0>
 8013eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eb0:	3338      	adds	r3, #56	; 0x38
 8013eb2:	3320      	adds	r3, #32
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fe fbe5 	bl	8012684 <ld_dword>
 8013eba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ebe:	3338      	adds	r3, #56	; 0x38
 8013ec0:	330e      	adds	r3, #14
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fe fbc6 	bl	8012654 <ld_word>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013ecc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d101      	bne.n	8013ed6 <find_volume+0x2fa>
 8013ed2:	230d      	movs	r3, #13
 8013ed4:	e102      	b.n	80140dc <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013ed6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013eda:	4413      	add	r3, r2
 8013edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ede:	8911      	ldrh	r1, [r2, #8]
 8013ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ee2:	8992      	ldrh	r2, [r2, #12]
 8013ee4:	0952      	lsrs	r2, r2, #5
 8013ee6:	b292      	uxth	r2, r2
 8013ee8:	fbb1 f2f2 	udiv	r2, r1, r2
 8013eec:	b292      	uxth	r2, r2
 8013eee:	4413      	add	r3, r2
 8013ef0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d201      	bcs.n	8013efe <find_volume+0x322>
 8013efa:	230d      	movs	r3, #13
 8013efc:	e0ee      	b.n	80140dc <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f02:	1ad3      	subs	r3, r2, r3
 8013f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f06:	8952      	ldrh	r2, [r2, #10]
 8013f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d101      	bne.n	8013f18 <find_volume+0x33c>
 8013f14:	230d      	movs	r3, #13
 8013f16:	e0e1      	b.n	80140dc <find_volume+0x500>
		fmt = FS_FAT32;
 8013f18:	2303      	movs	r3, #3
 8013f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013f24:	4293      	cmp	r3, r2
 8013f26:	d802      	bhi.n	8013f2e <find_volume+0x352>
 8013f28:	2302      	movs	r3, #2
 8013f2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f30:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013f34:	4293      	cmp	r3, r2
 8013f36:	d802      	bhi.n	8013f3e <find_volume+0x362>
 8013f38:	2301      	movs	r3, #1
 8013f3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f40:	1c9a      	adds	r2, r3, #2
 8013f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f44:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013f4a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013f4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f50:	441a      	add	r2, r3
 8013f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f54:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013f56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5a:	441a      	add	r2, r3
 8013f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f5e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8013f60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f64:	2b03      	cmp	r3, #3
 8013f66:	d11e      	bne.n	8013fa6 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f6a:	3338      	adds	r3, #56	; 0x38
 8013f6c:	332a      	adds	r3, #42	; 0x2a
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f7fe fb70 	bl	8012654 <ld_word>
 8013f74:	4603      	mov	r3, r0
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d001      	beq.n	8013f7e <find_volume+0x3a2>
 8013f7a:	230d      	movs	r3, #13
 8013f7c:	e0ae      	b.n	80140dc <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f80:	891b      	ldrh	r3, [r3, #8]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d001      	beq.n	8013f8a <find_volume+0x3ae>
 8013f86:	230d      	movs	r3, #13
 8013f88:	e0a8      	b.n	80140dc <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8c:	3338      	adds	r3, #56	; 0x38
 8013f8e:	332c      	adds	r3, #44	; 0x2c
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7fe fb77 	bl	8012684 <ld_dword>
 8013f96:	4602      	mov	r2, r0
 8013f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f9a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f9e:	69db      	ldr	r3, [r3, #28]
 8013fa0:	009b      	lsls	r3, r3, #2
 8013fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8013fa4:	e01f      	b.n	8013fe6 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa8:	891b      	ldrh	r3, [r3, #8]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d101      	bne.n	8013fb2 <find_volume+0x3d6>
 8013fae:	230d      	movs	r3, #13
 8013fb0:	e094      	b.n	80140dc <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fb8:	441a      	add	r2, r3
 8013fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fbc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013fbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013fc2:	2b02      	cmp	r3, #2
 8013fc4:	d103      	bne.n	8013fce <find_volume+0x3f2>
 8013fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc8:	69db      	ldr	r3, [r3, #28]
 8013fca:	005b      	lsls	r3, r3, #1
 8013fcc:	e00a      	b.n	8013fe4 <find_volume+0x408>
 8013fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd0:	69da      	ldr	r2, [r3, #28]
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	005b      	lsls	r3, r3, #1
 8013fd6:	4413      	add	r3, r2
 8013fd8:	085a      	lsrs	r2, r3, #1
 8013fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fdc:	69db      	ldr	r3, [r3, #28]
 8013fde:	f003 0301 	and.w	r3, r3, #1
 8013fe2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013fe4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe8:	6a1a      	ldr	r2, [r3, #32]
 8013fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fec:	899b      	ldrh	r3, [r3, #12]
 8013fee:	4619      	mov	r1, r3
 8013ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ff2:	440b      	add	r3, r1
 8013ff4:	3b01      	subs	r3, #1
 8013ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ff8:	8989      	ldrh	r1, [r1, #12]
 8013ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d201      	bcs.n	8014006 <find_volume+0x42a>
 8014002:	230d      	movs	r3, #13
 8014004:	e06a      	b.n	80140dc <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014008:	f04f 32ff 	mov.w	r2, #4294967295
 801400c:	619a      	str	r2, [r3, #24]
 801400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014010:	699a      	ldr	r2, [r3, #24]
 8014012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014014:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8014016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014018:	2280      	movs	r2, #128	; 0x80
 801401a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801401c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014020:	2b03      	cmp	r3, #3
 8014022:	d149      	bne.n	80140b8 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014026:	3338      	adds	r3, #56	; 0x38
 8014028:	3330      	adds	r3, #48	; 0x30
 801402a:	4618      	mov	r0, r3
 801402c:	f7fe fb12 	bl	8012654 <ld_word>
 8014030:	4603      	mov	r3, r0
 8014032:	2b01      	cmp	r3, #1
 8014034:	d140      	bne.n	80140b8 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014038:	3301      	adds	r3, #1
 801403a:	4619      	mov	r1, r3
 801403c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801403e:	f7fe fde9 	bl	8012c14 <move_window>
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d137      	bne.n	80140b8 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8014048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404a:	2200      	movs	r2, #0
 801404c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014050:	3338      	adds	r3, #56	; 0x38
 8014052:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014056:	4618      	mov	r0, r3
 8014058:	f7fe fafc 	bl	8012654 <ld_word>
 801405c:	4603      	mov	r3, r0
 801405e:	461a      	mov	r2, r3
 8014060:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014064:	429a      	cmp	r2, r3
 8014066:	d127      	bne.n	80140b8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801406a:	3338      	adds	r3, #56	; 0x38
 801406c:	4618      	mov	r0, r3
 801406e:	f7fe fb09 	bl	8012684 <ld_dword>
 8014072:	4602      	mov	r2, r0
 8014074:	4b1b      	ldr	r3, [pc, #108]	; (80140e4 <find_volume+0x508>)
 8014076:	429a      	cmp	r2, r3
 8014078:	d11e      	bne.n	80140b8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801407c:	3338      	adds	r3, #56	; 0x38
 801407e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014082:	4618      	mov	r0, r3
 8014084:	f7fe fafe 	bl	8012684 <ld_dword>
 8014088:	4602      	mov	r2, r0
 801408a:	4b17      	ldr	r3, [pc, #92]	; (80140e8 <find_volume+0x50c>)
 801408c:	429a      	cmp	r2, r3
 801408e:	d113      	bne.n	80140b8 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014092:	3338      	adds	r3, #56	; 0x38
 8014094:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014098:	4618      	mov	r0, r3
 801409a:	f7fe faf3 	bl	8012684 <ld_dword>
 801409e:	4602      	mov	r2, r0
 80140a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80140a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a6:	3338      	adds	r3, #56	; 0x38
 80140a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7fe fae9 	bl	8012684 <ld_dword>
 80140b2:	4602      	mov	r2, r0
 80140b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80140b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80140be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80140c0:	4b0a      	ldr	r3, [pc, #40]	; (80140ec <find_volume+0x510>)
 80140c2:	881b      	ldrh	r3, [r3, #0]
 80140c4:	3301      	adds	r3, #1
 80140c6:	b29a      	uxth	r2, r3
 80140c8:	4b08      	ldr	r3, [pc, #32]	; (80140ec <find_volume+0x510>)
 80140ca:	801a      	strh	r2, [r3, #0]
 80140cc:	4b07      	ldr	r3, [pc, #28]	; (80140ec <find_volume+0x510>)
 80140ce:	881a      	ldrh	r2, [r3, #0]
 80140d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80140d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80140d6:	f7fe fd35 	bl	8012b44 <clear_lock>
#endif
	return FR_OK;
 80140da:	2300      	movs	r3, #0
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3758      	adds	r7, #88	; 0x58
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	41615252 	.word	0x41615252
 80140e8:	61417272 	.word	0x61417272
 80140ec:	20000a40 	.word	0x20000a40

080140f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b084      	sub	sp, #16
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80140fa:	2309      	movs	r3, #9
 80140fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d02e      	beq.n	8014162 <validate+0x72>
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d02a      	beq.n	8014162 <validate+0x72>
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d025      	beq.n	8014162 <validate+0x72>
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	889a      	ldrh	r2, [r3, #4]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	88db      	ldrh	r3, [r3, #6]
 8014120:	429a      	cmp	r2, r3
 8014122:	d11e      	bne.n	8014162 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	4618      	mov	r0, r3
 801412a:	f7fe fb92 	bl	8012852 <lock_fs>
 801412e:	4603      	mov	r3, r0
 8014130:	2b00      	cmp	r3, #0
 8014132:	d014      	beq.n	801415e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	785b      	ldrb	r3, [r3, #1]
 801413a:	4618      	mov	r0, r3
 801413c:	f7fe f9ec 	bl	8012518 <disk_status>
 8014140:	4603      	mov	r3, r0
 8014142:	f003 0301 	and.w	r3, r3, #1
 8014146:	2b00      	cmp	r3, #0
 8014148:	d102      	bne.n	8014150 <validate+0x60>
				res = FR_OK;
 801414a:	2300      	movs	r3, #0
 801414c:	73fb      	strb	r3, [r7, #15]
 801414e:	e008      	b.n	8014162 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	2100      	movs	r1, #0
 8014156:	4618      	mov	r0, r3
 8014158:	f7fe fb91 	bl	801287e <unlock_fs>
 801415c:	e001      	b.n	8014162 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801415e:	230f      	movs	r3, #15
 8014160:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014162:	7bfb      	ldrb	r3, [r7, #15]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d102      	bne.n	801416e <validate+0x7e>
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	e000      	b.n	8014170 <validate+0x80>
 801416e:	2300      	movs	r3, #0
 8014170:	683a      	ldr	r2, [r7, #0]
 8014172:	6013      	str	r3, [r2, #0]
	return res;
 8014174:	7bfb      	ldrb	r3, [r7, #15]
}
 8014176:	4618      	mov	r0, r3
 8014178:	3710      	adds	r7, #16
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
	...

08014180 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b088      	sub	sp, #32
 8014184:	af00      	add	r7, sp, #0
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	4613      	mov	r3, r2
 801418c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014192:	f107 0310 	add.w	r3, r7, #16
 8014196:	4618      	mov	r0, r3
 8014198:	f7ff fc86 	bl	8013aa8 <get_ldnumber>
 801419c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801419e:	69fb      	ldr	r3, [r7, #28]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	da01      	bge.n	80141a8 <f_mount+0x28>
 80141a4:	230b      	movs	r3, #11
 80141a6:	e048      	b.n	801423a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80141a8:	4a26      	ldr	r2, [pc, #152]	; (8014244 <f_mount+0xc4>)
 80141aa:	69fb      	ldr	r3, [r7, #28]
 80141ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80141b2:	69bb      	ldr	r3, [r7, #24]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d00f      	beq.n	80141d8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80141b8:	69b8      	ldr	r0, [r7, #24]
 80141ba:	f7fe fcc3 	bl	8012b44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80141be:	69bb      	ldr	r3, [r7, #24]
 80141c0:	691b      	ldr	r3, [r3, #16]
 80141c2:	4618      	mov	r0, r3
 80141c4:	f000 fd04 	bl	8014bd0 <ff_del_syncobj>
 80141c8:	4603      	mov	r3, r0
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d101      	bne.n	80141d2 <f_mount+0x52>
 80141ce:	2302      	movs	r3, #2
 80141d0:	e033      	b.n	801423a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80141d2:	69bb      	ldr	r3, [r7, #24]
 80141d4:	2200      	movs	r2, #0
 80141d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d00f      	beq.n	80141fe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	2200      	movs	r2, #0
 80141e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80141e4:	69fb      	ldr	r3, [r7, #28]
 80141e6:	b2da      	uxtb	r2, r3
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	3310      	adds	r3, #16
 80141ec:	4619      	mov	r1, r3
 80141ee:	4610      	mov	r0, r2
 80141f0:	f000 fcd3 	bl	8014b9a <ff_cre_syncobj>
 80141f4:	4603      	mov	r3, r0
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d101      	bne.n	80141fe <f_mount+0x7e>
 80141fa:	2302      	movs	r3, #2
 80141fc:	e01d      	b.n	801423a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80141fe:	68fa      	ldr	r2, [r7, #12]
 8014200:	4910      	ldr	r1, [pc, #64]	; (8014244 <f_mount+0xc4>)
 8014202:	69fb      	ldr	r3, [r7, #28]
 8014204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d002      	beq.n	8014214 <f_mount+0x94>
 801420e:	79fb      	ldrb	r3, [r7, #7]
 8014210:	2b01      	cmp	r3, #1
 8014212:	d001      	beq.n	8014218 <f_mount+0x98>
 8014214:	2300      	movs	r3, #0
 8014216:	e010      	b.n	801423a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014218:	f107 010c 	add.w	r1, r7, #12
 801421c:	f107 0308 	add.w	r3, r7, #8
 8014220:	2200      	movs	r2, #0
 8014222:	4618      	mov	r0, r3
 8014224:	f7ff fcda 	bl	8013bdc <find_volume>
 8014228:	4603      	mov	r3, r0
 801422a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	7dfa      	ldrb	r2, [r7, #23]
 8014230:	4611      	mov	r1, r2
 8014232:	4618      	mov	r0, r3
 8014234:	f7fe fb23 	bl	801287e <unlock_fs>
 8014238:	7dfb      	ldrb	r3, [r7, #23]
}
 801423a:	4618      	mov	r0, r3
 801423c:	3720      	adds	r7, #32
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}
 8014242:	bf00      	nop
 8014244:	20000a3c 	.word	0x20000a3c

08014248 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b098      	sub	sp, #96	; 0x60
 801424c:	af00      	add	r7, sp, #0
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	4613      	mov	r3, r2
 8014254:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d101      	bne.n	8014260 <f_open+0x18>
 801425c:	2309      	movs	r3, #9
 801425e:	e1c2      	b.n	80145e6 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014260:	79fb      	ldrb	r3, [r7, #7]
 8014262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014266:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014268:	79fa      	ldrb	r2, [r7, #7]
 801426a:	f107 0110 	add.w	r1, r7, #16
 801426e:	f107 0308 	add.w	r3, r7, #8
 8014272:	4618      	mov	r0, r3
 8014274:	f7ff fcb2 	bl	8013bdc <find_volume>
 8014278:	4603      	mov	r3, r0
 801427a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801427e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014282:	2b00      	cmp	r3, #0
 8014284:	f040 819f 	bne.w	80145c6 <f_open+0x37e>
		dj.obj.fs = fs;
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801428c:	68ba      	ldr	r2, [r7, #8]
 801428e:	f107 0314 	add.w	r3, r7, #20
 8014292:	4611      	mov	r1, r2
 8014294:	4618      	mov	r0, r3
 8014296:	f7ff fb91 	bl	80139bc <follow_path>
 801429a:	4603      	mov	r3, r0
 801429c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80142a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d11a      	bne.n	80142de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80142a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80142ac:	b25b      	sxtb	r3, r3
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	da03      	bge.n	80142ba <f_open+0x72>
				res = FR_INVALID_NAME;
 80142b2:	2306      	movs	r3, #6
 80142b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80142b8:	e011      	b.n	80142de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80142ba:	79fb      	ldrb	r3, [r7, #7]
 80142bc:	f023 0301 	bic.w	r3, r3, #1
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	bf14      	ite	ne
 80142c4:	2301      	movne	r3, #1
 80142c6:	2300      	moveq	r3, #0
 80142c8:	b2db      	uxtb	r3, r3
 80142ca:	461a      	mov	r2, r3
 80142cc:	f107 0314 	add.w	r3, r7, #20
 80142d0:	4611      	mov	r1, r2
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7fe faee 	bl	80128b4 <chk_lock>
 80142d8:	4603      	mov	r3, r0
 80142da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80142de:	79fb      	ldrb	r3, [r7, #7]
 80142e0:	f003 031c 	and.w	r3, r3, #28
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d07f      	beq.n	80143e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80142e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d017      	beq.n	8014320 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80142f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142f4:	2b04      	cmp	r3, #4
 80142f6:	d10e      	bne.n	8014316 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80142f8:	f7fe fb38 	bl	801296c <enq_lock>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d006      	beq.n	8014310 <f_open+0xc8>
 8014302:	f107 0314 	add.w	r3, r7, #20
 8014306:	4618      	mov	r0, r3
 8014308:	f7ff fa97 	bl	801383a <dir_register>
 801430c:	4603      	mov	r3, r0
 801430e:	e000      	b.n	8014312 <f_open+0xca>
 8014310:	2312      	movs	r3, #18
 8014312:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014316:	79fb      	ldrb	r3, [r7, #7]
 8014318:	f043 0308 	orr.w	r3, r3, #8
 801431c:	71fb      	strb	r3, [r7, #7]
 801431e:	e010      	b.n	8014342 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014320:	7ebb      	ldrb	r3, [r7, #26]
 8014322:	f003 0311 	and.w	r3, r3, #17
 8014326:	2b00      	cmp	r3, #0
 8014328:	d003      	beq.n	8014332 <f_open+0xea>
					res = FR_DENIED;
 801432a:	2307      	movs	r3, #7
 801432c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014330:	e007      	b.n	8014342 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014332:	79fb      	ldrb	r3, [r7, #7]
 8014334:	f003 0304 	and.w	r3, r3, #4
 8014338:	2b00      	cmp	r3, #0
 801433a:	d002      	beq.n	8014342 <f_open+0xfa>
 801433c:	2308      	movs	r3, #8
 801433e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014346:	2b00      	cmp	r3, #0
 8014348:	d168      	bne.n	801441c <f_open+0x1d4>
 801434a:	79fb      	ldrb	r3, [r7, #7]
 801434c:	f003 0308 	and.w	r3, r3, #8
 8014350:	2b00      	cmp	r3, #0
 8014352:	d063      	beq.n	801441c <f_open+0x1d4>
				dw = GET_FATTIME();
 8014354:	f7fd fe78 	bl	8012048 <get_fattime>
 8014358:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801435c:	330e      	adds	r3, #14
 801435e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014360:	4618      	mov	r0, r3
 8014362:	f7fe f9cd 	bl	8012700 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014368:	3316      	adds	r3, #22
 801436a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801436c:	4618      	mov	r0, r3
 801436e:	f7fe f9c7 	bl	8012700 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014374:	330b      	adds	r3, #11
 8014376:	2220      	movs	r2, #32
 8014378:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801437e:	4611      	mov	r1, r2
 8014380:	4618      	mov	r0, r3
 8014382:	f7ff f9c6 	bl	8013712 <ld_clust>
 8014386:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801438c:	2200      	movs	r2, #0
 801438e:	4618      	mov	r0, r3
 8014390:	f7ff f9de 	bl	8013750 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014396:	331c      	adds	r3, #28
 8014398:	2100      	movs	r1, #0
 801439a:	4618      	mov	r0, r3
 801439c:	f7fe f9b0 	bl	8012700 <st_dword>
					fs->wflag = 1;
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	2201      	movs	r2, #1
 80143a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80143a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d037      	beq.n	801441c <f_open+0x1d4>
						dw = fs->winsect;
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80143b2:	f107 0314 	add.w	r3, r7, #20
 80143b6:	2200      	movs	r2, #0
 80143b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7fe fece 	bl	801315c <remove_chain>
 80143c0:	4603      	mov	r3, r0
 80143c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80143c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d126      	bne.n	801441c <f_open+0x1d4>
							res = move_window(fs, dw);
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fe fc1e 	bl	8012c14 <move_window>
 80143d8:	4603      	mov	r3, r0
 80143da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80143de:	693b      	ldr	r3, [r7, #16]
 80143e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80143e2:	3a01      	subs	r2, #1
 80143e4:	615a      	str	r2, [r3, #20]
 80143e6:	e019      	b.n	801441c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80143e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d115      	bne.n	801441c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80143f0:	7ebb      	ldrb	r3, [r7, #26]
 80143f2:	f003 0310 	and.w	r3, r3, #16
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d003      	beq.n	8014402 <f_open+0x1ba>
					res = FR_NO_FILE;
 80143fa:	2304      	movs	r3, #4
 80143fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014400:	e00c      	b.n	801441c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014402:	79fb      	ldrb	r3, [r7, #7]
 8014404:	f003 0302 	and.w	r3, r3, #2
 8014408:	2b00      	cmp	r3, #0
 801440a:	d007      	beq.n	801441c <f_open+0x1d4>
 801440c:	7ebb      	ldrb	r3, [r7, #26]
 801440e:	f003 0301 	and.w	r3, r3, #1
 8014412:	2b00      	cmp	r3, #0
 8014414:	d002      	beq.n	801441c <f_open+0x1d4>
						res = FR_DENIED;
 8014416:	2307      	movs	r3, #7
 8014418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801441c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014420:	2b00      	cmp	r3, #0
 8014422:	d128      	bne.n	8014476 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014424:	79fb      	ldrb	r3, [r7, #7]
 8014426:	f003 0308 	and.w	r3, r3, #8
 801442a:	2b00      	cmp	r3, #0
 801442c:	d003      	beq.n	8014436 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801442e:	79fb      	ldrb	r3, [r7, #7]
 8014430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014434:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801443e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014444:	79fb      	ldrb	r3, [r7, #7]
 8014446:	f023 0301 	bic.w	r3, r3, #1
 801444a:	2b00      	cmp	r3, #0
 801444c:	bf14      	ite	ne
 801444e:	2301      	movne	r3, #1
 8014450:	2300      	moveq	r3, #0
 8014452:	b2db      	uxtb	r3, r3
 8014454:	461a      	mov	r2, r3
 8014456:	f107 0314 	add.w	r3, r7, #20
 801445a:	4611      	mov	r1, r2
 801445c:	4618      	mov	r0, r3
 801445e:	f7fe faa7 	bl	80129b0 <inc_lock>
 8014462:	4602      	mov	r2, r0
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	691b      	ldr	r3, [r3, #16]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d102      	bne.n	8014476 <f_open+0x22e>
 8014470:	2302      	movs	r3, #2
 8014472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801447a:	2b00      	cmp	r3, #0
 801447c:	f040 80a3 	bne.w	80145c6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014484:	4611      	mov	r1, r2
 8014486:	4618      	mov	r0, r3
 8014488:	f7ff f943 	bl	8013712 <ld_clust>
 801448c:	4602      	mov	r2, r0
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014494:	331c      	adds	r3, #28
 8014496:	4618      	mov	r0, r3
 8014498:	f7fe f8f4 	bl	8012684 <ld_dword>
 801449c:	4602      	mov	r2, r0
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2200      	movs	r2, #0
 80144a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80144a8:	693a      	ldr	r2, [r7, #16]
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	88da      	ldrh	r2, [r3, #6]
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	79fa      	ldrb	r2, [r7, #7]
 80144ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2200      	movs	r2, #0
 80144c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2200      	movs	r2, #0
 80144c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	2200      	movs	r2, #0
 80144cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	3330      	adds	r3, #48	; 0x30
 80144d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80144d6:	2100      	movs	r1, #0
 80144d8:	4618      	mov	r0, r3
 80144da:	f7fe f95e 	bl	801279a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80144de:	79fb      	ldrb	r3, [r7, #7]
 80144e0:	f003 0320 	and.w	r3, r3, #32
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d06e      	beq.n	80145c6 <f_open+0x37e>
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d06a      	beq.n	80145c6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	68da      	ldr	r2, [r3, #12]
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	895b      	ldrh	r3, [r3, #10]
 80144fc:	461a      	mov	r2, r3
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	899b      	ldrh	r3, [r3, #12]
 8014502:	fb03 f302 	mul.w	r3, r3, r2
 8014506:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	689b      	ldr	r3, [r3, #8]
 801450c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	68db      	ldr	r3, [r3, #12]
 8014512:	657b      	str	r3, [r7, #84]	; 0x54
 8014514:	e016      	b.n	8014544 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801451a:	4618      	mov	r0, r3
 801451c:	f7fe fc37 	bl	8012d8e <get_fat>
 8014520:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014524:	2b01      	cmp	r3, #1
 8014526:	d802      	bhi.n	801452e <f_open+0x2e6>
 8014528:	2302      	movs	r3, #2
 801452a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801452e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014534:	d102      	bne.n	801453c <f_open+0x2f4>
 8014536:	2301      	movs	r3, #1
 8014538:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801453c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801453e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014540:	1ad3      	subs	r3, r2, r3
 8014542:	657b      	str	r3, [r7, #84]	; 0x54
 8014544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014548:	2b00      	cmp	r3, #0
 801454a:	d103      	bne.n	8014554 <f_open+0x30c>
 801454c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801454e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014550:	429a      	cmp	r2, r3
 8014552:	d8e0      	bhi.n	8014516 <f_open+0x2ce>
				}
				fp->clust = clst;
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014558:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801455a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801455e:	2b00      	cmp	r3, #0
 8014560:	d131      	bne.n	80145c6 <f_open+0x37e>
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	899b      	ldrh	r3, [r3, #12]
 8014566:	461a      	mov	r2, r3
 8014568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801456a:	fbb3 f1f2 	udiv	r1, r3, r2
 801456e:	fb02 f201 	mul.w	r2, r2, r1
 8014572:	1a9b      	subs	r3, r3, r2
 8014574:	2b00      	cmp	r3, #0
 8014576:	d026      	beq.n	80145c6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801457c:	4618      	mov	r0, r3
 801457e:	f7fe fbe7 	bl	8012d50 <clust2sect>
 8014582:	6478      	str	r0, [r7, #68]	; 0x44
 8014584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014586:	2b00      	cmp	r3, #0
 8014588:	d103      	bne.n	8014592 <f_open+0x34a>
						res = FR_INT_ERR;
 801458a:	2302      	movs	r3, #2
 801458c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014590:	e019      	b.n	80145c6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	899b      	ldrh	r3, [r3, #12]
 8014596:	461a      	mov	r2, r3
 8014598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801459a:	fbb3 f2f2 	udiv	r2, r3, r2
 801459e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145a0:	441a      	add	r2, r3
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	7858      	ldrb	r0, [r3, #1]
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	6a1a      	ldr	r2, [r3, #32]
 80145b4:	2301      	movs	r3, #1
 80145b6:	f7fd ffef 	bl	8012598 <disk_read>
 80145ba:	4603      	mov	r3, r0
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d002      	beq.n	80145c6 <f_open+0x37e>
 80145c0:	2301      	movs	r3, #1
 80145c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80145c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d002      	beq.n	80145d4 <f_open+0x38c>
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	2200      	movs	r2, #0
 80145d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80145d4:	693b      	ldr	r3, [r7, #16]
 80145d6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80145da:	4611      	mov	r1, r2
 80145dc:	4618      	mov	r0, r3
 80145de:	f7fe f94e 	bl	801287e <unlock_fs>
 80145e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3760      	adds	r7, #96	; 0x60
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}

080145ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80145ee:	b580      	push	{r7, lr}
 80145f0:	b08c      	sub	sp, #48	; 0x30
 80145f2:	af00      	add	r7, sp, #0
 80145f4:	60f8      	str	r0, [r7, #12]
 80145f6:	60b9      	str	r1, [r7, #8]
 80145f8:	607a      	str	r2, [r7, #4]
 80145fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	2200      	movs	r2, #0
 8014604:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	f107 0210 	add.w	r2, r7, #16
 801460c:	4611      	mov	r1, r2
 801460e:	4618      	mov	r0, r3
 8014610:	f7ff fd6e 	bl	80140f0 <validate>
 8014614:	4603      	mov	r3, r0
 8014616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801461a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801461e:	2b00      	cmp	r3, #0
 8014620:	d107      	bne.n	8014632 <f_write+0x44>
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	7d5b      	ldrb	r3, [r3, #21]
 8014626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801462a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801462e:	2b00      	cmp	r3, #0
 8014630:	d009      	beq.n	8014646 <f_write+0x58>
 8014632:	693b      	ldr	r3, [r7, #16]
 8014634:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014638:	4611      	mov	r1, r2
 801463a:	4618      	mov	r0, r3
 801463c:	f7fe f91f 	bl	801287e <unlock_fs>
 8014640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014644:	e192      	b.n	801496c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	7d1b      	ldrb	r3, [r3, #20]
 801464a:	f003 0302 	and.w	r3, r3, #2
 801464e:	2b00      	cmp	r3, #0
 8014650:	d106      	bne.n	8014660 <f_write+0x72>
 8014652:	693b      	ldr	r3, [r7, #16]
 8014654:	2107      	movs	r1, #7
 8014656:	4618      	mov	r0, r3
 8014658:	f7fe f911 	bl	801287e <unlock_fs>
 801465c:	2307      	movs	r3, #7
 801465e:	e185      	b.n	801496c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	699a      	ldr	r2, [r3, #24]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	441a      	add	r2, r3
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	699b      	ldr	r3, [r3, #24]
 801466c:	429a      	cmp	r2, r3
 801466e:	f080 816a 	bcs.w	8014946 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	699b      	ldr	r3, [r3, #24]
 8014676:	43db      	mvns	r3, r3
 8014678:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801467a:	e164      	b.n	8014946 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	699b      	ldr	r3, [r3, #24]
 8014680:	693a      	ldr	r2, [r7, #16]
 8014682:	8992      	ldrh	r2, [r2, #12]
 8014684:	fbb3 f1f2 	udiv	r1, r3, r2
 8014688:	fb02 f201 	mul.w	r2, r2, r1
 801468c:	1a9b      	subs	r3, r3, r2
 801468e:	2b00      	cmp	r3, #0
 8014690:	f040 810f 	bne.w	80148b2 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	699b      	ldr	r3, [r3, #24]
 8014698:	693a      	ldr	r2, [r7, #16]
 801469a:	8992      	ldrh	r2, [r2, #12]
 801469c:	fbb3 f3f2 	udiv	r3, r3, r2
 80146a0:	693a      	ldr	r2, [r7, #16]
 80146a2:	8952      	ldrh	r2, [r2, #10]
 80146a4:	3a01      	subs	r2, #1
 80146a6:	4013      	ands	r3, r2
 80146a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d14d      	bne.n	801474c <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	699b      	ldr	r3, [r3, #24]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d10c      	bne.n	80146d2 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	689b      	ldr	r3, [r3, #8]
 80146bc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80146be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d11a      	bne.n	80146fa <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	2100      	movs	r1, #0
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7fe fdac 	bl	8013226 <create_chain>
 80146ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80146d0:	e013      	b.n	80146fa <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d007      	beq.n	80146ea <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	699b      	ldr	r3, [r3, #24]
 80146de:	4619      	mov	r1, r3
 80146e0:	68f8      	ldr	r0, [r7, #12]
 80146e2:	f7fe fe38 	bl	8013356 <clmt_clust>
 80146e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80146e8:	e007      	b.n	80146fa <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80146ea:	68fa      	ldr	r2, [r7, #12]
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	69db      	ldr	r3, [r3, #28]
 80146f0:	4619      	mov	r1, r3
 80146f2:	4610      	mov	r0, r2
 80146f4:	f7fe fd97 	bl	8013226 <create_chain>
 80146f8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80146fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f000 8127 	beq.w	8014950 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014704:	2b01      	cmp	r3, #1
 8014706:	d109      	bne.n	801471c <f_write+0x12e>
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	2202      	movs	r2, #2
 801470c:	755a      	strb	r2, [r3, #21]
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	2102      	movs	r1, #2
 8014712:	4618      	mov	r0, r3
 8014714:	f7fe f8b3 	bl	801287e <unlock_fs>
 8014718:	2302      	movs	r3, #2
 801471a:	e127      	b.n	801496c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014722:	d109      	bne.n	8014738 <f_write+0x14a>
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2201      	movs	r2, #1
 8014728:	755a      	strb	r2, [r3, #21]
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	2101      	movs	r1, #1
 801472e:	4618      	mov	r0, r3
 8014730:	f7fe f8a5 	bl	801287e <unlock_fs>
 8014734:	2301      	movs	r3, #1
 8014736:	e119      	b.n	801496c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801473c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d102      	bne.n	801474c <f_write+0x15e>
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801474a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	7d1b      	ldrb	r3, [r3, #20]
 8014750:	b25b      	sxtb	r3, r3
 8014752:	2b00      	cmp	r3, #0
 8014754:	da1d      	bge.n	8014792 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	7858      	ldrb	r0, [r3, #1]
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	6a1a      	ldr	r2, [r3, #32]
 8014764:	2301      	movs	r3, #1
 8014766:	f7fd ff37 	bl	80125d8 <disk_write>
 801476a:	4603      	mov	r3, r0
 801476c:	2b00      	cmp	r3, #0
 801476e:	d009      	beq.n	8014784 <f_write+0x196>
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2201      	movs	r2, #1
 8014774:	755a      	strb	r2, [r3, #21]
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	2101      	movs	r1, #1
 801477a:	4618      	mov	r0, r3
 801477c:	f7fe f87f 	bl	801287e <unlock_fs>
 8014780:	2301      	movs	r3, #1
 8014782:	e0f3      	b.n	801496c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	7d1b      	ldrb	r3, [r3, #20]
 8014788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801478c:	b2da      	uxtb	r2, r3
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014792:	693a      	ldr	r2, [r7, #16]
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	69db      	ldr	r3, [r3, #28]
 8014798:	4619      	mov	r1, r3
 801479a:	4610      	mov	r0, r2
 801479c:	f7fe fad8 	bl	8012d50 <clust2sect>
 80147a0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d109      	bne.n	80147bc <f_write+0x1ce>
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	2202      	movs	r2, #2
 80147ac:	755a      	strb	r2, [r3, #21]
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	2102      	movs	r1, #2
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7fe f863 	bl	801287e <unlock_fs>
 80147b8:	2302      	movs	r3, #2
 80147ba:	e0d7      	b.n	801496c <f_write+0x37e>
			sect += csect;
 80147bc:	697a      	ldr	r2, [r7, #20]
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	4413      	add	r3, r2
 80147c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80147c4:	693b      	ldr	r3, [r7, #16]
 80147c6:	899b      	ldrh	r3, [r3, #12]
 80147c8:	461a      	mov	r2, r3
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80147d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80147d2:	6a3b      	ldr	r3, [r7, #32]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d048      	beq.n	801486a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80147d8:	69ba      	ldr	r2, [r7, #24]
 80147da:	6a3b      	ldr	r3, [r7, #32]
 80147dc:	4413      	add	r3, r2
 80147de:	693a      	ldr	r2, [r7, #16]
 80147e0:	8952      	ldrh	r2, [r2, #10]
 80147e2:	4293      	cmp	r3, r2
 80147e4:	d905      	bls.n	80147f2 <f_write+0x204>
					cc = fs->csize - csect;
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	895b      	ldrh	r3, [r3, #10]
 80147ea:	461a      	mov	r2, r3
 80147ec:	69bb      	ldr	r3, [r7, #24]
 80147ee:	1ad3      	subs	r3, r2, r3
 80147f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	7858      	ldrb	r0, [r3, #1]
 80147f6:	6a3b      	ldr	r3, [r7, #32]
 80147f8:	697a      	ldr	r2, [r7, #20]
 80147fa:	69f9      	ldr	r1, [r7, #28]
 80147fc:	f7fd feec 	bl	80125d8 <disk_write>
 8014800:	4603      	mov	r3, r0
 8014802:	2b00      	cmp	r3, #0
 8014804:	d009      	beq.n	801481a <f_write+0x22c>
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	2201      	movs	r2, #1
 801480a:	755a      	strb	r2, [r3, #21]
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	2101      	movs	r1, #1
 8014810:	4618      	mov	r0, r3
 8014812:	f7fe f834 	bl	801287e <unlock_fs>
 8014816:	2301      	movs	r3, #1
 8014818:	e0a8      	b.n	801496c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	6a1a      	ldr	r2, [r3, #32]
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	1ad3      	subs	r3, r2, r3
 8014822:	6a3a      	ldr	r2, [r7, #32]
 8014824:	429a      	cmp	r2, r3
 8014826:	d918      	bls.n	801485a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	6a1a      	ldr	r2, [r3, #32]
 8014832:	697b      	ldr	r3, [r7, #20]
 8014834:	1ad3      	subs	r3, r2, r3
 8014836:	693a      	ldr	r2, [r7, #16]
 8014838:	8992      	ldrh	r2, [r2, #12]
 801483a:	fb02 f303 	mul.w	r3, r2, r3
 801483e:	69fa      	ldr	r2, [r7, #28]
 8014840:	18d1      	adds	r1, r2, r3
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	899b      	ldrh	r3, [r3, #12]
 8014846:	461a      	mov	r2, r3
 8014848:	f7fd ff86 	bl	8012758 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	7d1b      	ldrb	r3, [r3, #20]
 8014850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014854:	b2da      	uxtb	r2, r3
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	899b      	ldrh	r3, [r3, #12]
 801485e:	461a      	mov	r2, r3
 8014860:	6a3b      	ldr	r3, [r7, #32]
 8014862:	fb02 f303 	mul.w	r3, r2, r3
 8014866:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014868:	e050      	b.n	801490c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	6a1b      	ldr	r3, [r3, #32]
 801486e:	697a      	ldr	r2, [r7, #20]
 8014870:	429a      	cmp	r2, r3
 8014872:	d01b      	beq.n	80148ac <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	699a      	ldr	r2, [r3, #24]
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801487c:	429a      	cmp	r2, r3
 801487e:	d215      	bcs.n	80148ac <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	7858      	ldrb	r0, [r3, #1]
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801488a:	2301      	movs	r3, #1
 801488c:	697a      	ldr	r2, [r7, #20]
 801488e:	f7fd fe83 	bl	8012598 <disk_read>
 8014892:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014894:	2b00      	cmp	r3, #0
 8014896:	d009      	beq.n	80148ac <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	2201      	movs	r2, #1
 801489c:	755a      	strb	r2, [r3, #21]
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	2101      	movs	r1, #1
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7fd ffeb 	bl	801287e <unlock_fs>
 80148a8:	2301      	movs	r3, #1
 80148aa:	e05f      	b.n	801496c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	697a      	ldr	r2, [r7, #20]
 80148b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	899b      	ldrh	r3, [r3, #12]
 80148b6:	4618      	mov	r0, r3
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	699b      	ldr	r3, [r3, #24]
 80148bc:	693a      	ldr	r2, [r7, #16]
 80148be:	8992      	ldrh	r2, [r2, #12]
 80148c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80148c4:	fb02 f201 	mul.w	r2, r2, r1
 80148c8:	1a9b      	subs	r3, r3, r2
 80148ca:	1ac3      	subs	r3, r0, r3
 80148cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80148ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d901      	bls.n	80148da <f_write+0x2ec>
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	699b      	ldr	r3, [r3, #24]
 80148e4:	693a      	ldr	r2, [r7, #16]
 80148e6:	8992      	ldrh	r2, [r2, #12]
 80148e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80148ec:	fb02 f200 	mul.w	r2, r2, r0
 80148f0:	1a9b      	subs	r3, r3, r2
 80148f2:	440b      	add	r3, r1
 80148f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148f6:	69f9      	ldr	r1, [r7, #28]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7fd ff2d 	bl	8012758 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	7d1b      	ldrb	r3, [r3, #20]
 8014902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014906:	b2da      	uxtb	r2, r3
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801490c:	69fa      	ldr	r2, [r7, #28]
 801490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014910:	4413      	add	r3, r2
 8014912:	61fb      	str	r3, [r7, #28]
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	699a      	ldr	r2, [r3, #24]
 8014918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801491a:	441a      	add	r2, r3
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	619a      	str	r2, [r3, #24]
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	68da      	ldr	r2, [r3, #12]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	699b      	ldr	r3, [r3, #24]
 8014928:	429a      	cmp	r2, r3
 801492a:	bf38      	it	cc
 801492c:	461a      	movcc	r2, r3
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	60da      	str	r2, [r3, #12]
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	681a      	ldr	r2, [r3, #0]
 8014936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014938:	441a      	add	r2, r3
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	601a      	str	r2, [r3, #0]
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014942:	1ad3      	subs	r3, r2, r3
 8014944:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2b00      	cmp	r3, #0
 801494a:	f47f ae97 	bne.w	801467c <f_write+0x8e>
 801494e:	e000      	b.n	8014952 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014950:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	7d1b      	ldrb	r3, [r3, #20]
 8014956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801495a:	b2da      	uxtb	r2, r3
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	2100      	movs	r1, #0
 8014964:	4618      	mov	r0, r3
 8014966:	f7fd ff8a 	bl	801287e <unlock_fs>
 801496a:	2300      	movs	r3, #0
}
 801496c:	4618      	mov	r0, r3
 801496e:	3730      	adds	r7, #48	; 0x30
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}

08014974 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b086      	sub	sp, #24
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f107 0208 	add.w	r2, r7, #8
 8014982:	4611      	mov	r1, r2
 8014984:	4618      	mov	r0, r3
 8014986:	f7ff fbb3 	bl	80140f0 <validate>
 801498a:	4603      	mov	r3, r0
 801498c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801498e:	7dfb      	ldrb	r3, [r7, #23]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d16d      	bne.n	8014a70 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	7d1b      	ldrb	r3, [r3, #20]
 8014998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801499c:	2b00      	cmp	r3, #0
 801499e:	d067      	beq.n	8014a70 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	7d1b      	ldrb	r3, [r3, #20]
 80149a4:	b25b      	sxtb	r3, r3
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	da1a      	bge.n	80149e0 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	7858      	ldrb	r0, [r3, #1]
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6a1a      	ldr	r2, [r3, #32]
 80149b8:	2301      	movs	r3, #1
 80149ba:	f7fd fe0d 	bl	80125d8 <disk_write>
 80149be:	4603      	mov	r3, r0
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d006      	beq.n	80149d2 <f_sync+0x5e>
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	2101      	movs	r1, #1
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7fd ff58 	bl	801287e <unlock_fs>
 80149ce:	2301      	movs	r3, #1
 80149d0:	e055      	b.n	8014a7e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	7d1b      	ldrb	r3, [r3, #20]
 80149d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149da:	b2da      	uxtb	r2, r3
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80149e0:	f7fd fb32 	bl	8012048 <get_fattime>
 80149e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80149e6:	68ba      	ldr	r2, [r7, #8]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ec:	4619      	mov	r1, r3
 80149ee:	4610      	mov	r0, r2
 80149f0:	f7fe f910 	bl	8012c14 <move_window>
 80149f4:	4603      	mov	r3, r0
 80149f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80149f8:	7dfb      	ldrb	r3, [r7, #23]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d138      	bne.n	8014a70 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a02:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	330b      	adds	r3, #11
 8014a08:	781a      	ldrb	r2, [r3, #0]
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	330b      	adds	r3, #11
 8014a0e:	f042 0220 	orr.w	r2, r2, #32
 8014a12:	b2d2      	uxtb	r2, r2
 8014a14:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6818      	ldr	r0, [r3, #0]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	689b      	ldr	r3, [r3, #8]
 8014a1e:	461a      	mov	r2, r3
 8014a20:	68f9      	ldr	r1, [r7, #12]
 8014a22:	f7fe fe95 	bl	8013750 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	f103 021c 	add.w	r2, r3, #28
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	68db      	ldr	r3, [r3, #12]
 8014a30:	4619      	mov	r1, r3
 8014a32:	4610      	mov	r0, r2
 8014a34:	f7fd fe64 	bl	8012700 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	3316      	adds	r3, #22
 8014a3c:	6939      	ldr	r1, [r7, #16]
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7fd fe5e 	bl	8012700 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	3312      	adds	r3, #18
 8014a48:	2100      	movs	r1, #0
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7fd fe3d 	bl	80126ca <st_word>
					fs->wflag = 1;
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	2201      	movs	r2, #1
 8014a54:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7fe f909 	bl	8012c70 <sync_fs>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	7d1b      	ldrb	r3, [r3, #20]
 8014a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a6a:	b2da      	uxtb	r2, r3
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	7dfa      	ldrb	r2, [r7, #23]
 8014a74:	4611      	mov	r1, r2
 8014a76:	4618      	mov	r0, r3
 8014a78:	f7fd ff01 	bl	801287e <unlock_fs>
 8014a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3718      	adds	r7, #24
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}

08014a86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014a86:	b580      	push	{r7, lr}
 8014a88:	b084      	sub	sp, #16
 8014a8a:	af00      	add	r7, sp, #0
 8014a8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7ff ff70 	bl	8014974 <f_sync>
 8014a94:	4603      	mov	r3, r0
 8014a96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014a98:	7bfb      	ldrb	r3, [r7, #15]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d11d      	bne.n	8014ada <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f107 0208 	add.w	r2, r7, #8
 8014aa4:	4611      	mov	r1, r2
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7ff fb22 	bl	80140f0 <validate>
 8014aac:	4603      	mov	r3, r0
 8014aae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014ab0:	7bfb      	ldrb	r3, [r7, #15]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d111      	bne.n	8014ada <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	691b      	ldr	r3, [r3, #16]
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7fe f806 	bl	8012acc <dec_lock>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014ac4:	7bfb      	ldrb	r3, [r7, #15]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d102      	bne.n	8014ad0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2200      	movs	r2, #0
 8014ace:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	2100      	movs	r1, #0
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7fd fed2 	bl	801287e <unlock_fs>
#endif
		}
	}
	return res;
 8014ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3710      	adds	r7, #16
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b087      	sub	sp, #28
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	60f8      	str	r0, [r7, #12]
 8014aec:	60b9      	str	r1, [r7, #8]
 8014aee:	4613      	mov	r3, r2
 8014af0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014af2:	2301      	movs	r3, #1
 8014af4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014af6:	2300      	movs	r3, #0
 8014af8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014afa:	4b1f      	ldr	r3, [pc, #124]	; (8014b78 <FATFS_LinkDriverEx+0x94>)
 8014afc:	7a5b      	ldrb	r3, [r3, #9]
 8014afe:	b2db      	uxtb	r3, r3
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d131      	bne.n	8014b68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014b04:	4b1c      	ldr	r3, [pc, #112]	; (8014b78 <FATFS_LinkDriverEx+0x94>)
 8014b06:	7a5b      	ldrb	r3, [r3, #9]
 8014b08:	b2db      	uxtb	r3, r3
 8014b0a:	461a      	mov	r2, r3
 8014b0c:	4b1a      	ldr	r3, [pc, #104]	; (8014b78 <FATFS_LinkDriverEx+0x94>)
 8014b0e:	2100      	movs	r1, #0
 8014b10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014b12:	4b19      	ldr	r3, [pc, #100]	; (8014b78 <FATFS_LinkDriverEx+0x94>)
 8014b14:	7a5b      	ldrb	r3, [r3, #9]
 8014b16:	b2db      	uxtb	r3, r3
 8014b18:	4a17      	ldr	r2, [pc, #92]	; (8014b78 <FATFS_LinkDriverEx+0x94>)
 8014b1a:	009b      	lsls	r3, r3, #2
 8014b1c:	4413      	add	r3, r2
 8014b1e:	68fa      	ldr	r2, [r7, #12]
 8014b20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014b22:	4b15      	ldr	r3, [pc, #84]	; (8014b78 <FATFS_LinkDriverEx+0x94>)
 8014b24:	7a5b      	ldrb	r3, [r3, #9]
 8014b26:	b2db      	uxtb	r3, r3
 8014b28:	461a      	mov	r2, r3
 8014b2a:	4b13      	ldr	r3, [pc, #76]	; (8014b78 <FATFS_LinkDriverEx+0x94>)
 8014b2c:	4413      	add	r3, r2
 8014b2e:	79fa      	ldrb	r2, [r7, #7]
 8014b30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014b32:	4b11      	ldr	r3, [pc, #68]	; (8014b78 <FATFS_LinkDriverEx+0x94>)
 8014b34:	7a5b      	ldrb	r3, [r3, #9]
 8014b36:	b2db      	uxtb	r3, r3
 8014b38:	1c5a      	adds	r2, r3, #1
 8014b3a:	b2d1      	uxtb	r1, r2
 8014b3c:	4a0e      	ldr	r2, [pc, #56]	; (8014b78 <FATFS_LinkDriverEx+0x94>)
 8014b3e:	7251      	strb	r1, [r2, #9]
 8014b40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014b42:	7dbb      	ldrb	r3, [r7, #22]
 8014b44:	3330      	adds	r3, #48	; 0x30
 8014b46:	b2da      	uxtb	r2, r3
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	223a      	movs	r2, #58	; 0x3a
 8014b52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	3302      	adds	r3, #2
 8014b58:	222f      	movs	r2, #47	; 0x2f
 8014b5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	3303      	adds	r3, #3
 8014b60:	2200      	movs	r2, #0
 8014b62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014b64:	2300      	movs	r3, #0
 8014b66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	371c      	adds	r7, #28
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b74:	4770      	bx	lr
 8014b76:	bf00      	nop
 8014b78:	20000a64 	.word	0x20000a64

08014b7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
 8014b84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014b86:	2200      	movs	r2, #0
 8014b88:	6839      	ldr	r1, [r7, #0]
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f7ff ffaa 	bl	8014ae4 <FATFS_LinkDriverEx>
 8014b90:	4603      	mov	r3, r0
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3708      	adds	r7, #8
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}

08014b9a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8014b9a:	b580      	push	{r7, lr}
 8014b9c:	b084      	sub	sp, #16
 8014b9e:	af00      	add	r7, sp, #0
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	6039      	str	r1, [r7, #0]
 8014ba4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	2101      	movs	r1, #1
 8014baa:	2001      	movs	r0, #1
 8014bac:	f000 f9cc 	bl	8014f48 <osSemaphoreNew>
 8014bb0:	4602      	mov	r2, r0
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	bf14      	ite	ne
 8014bbe:	2301      	movne	r3, #1
 8014bc0:	2300      	moveq	r3, #0
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	60fb      	str	r3, [r7, #12]

    return ret;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
}
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3710      	adds	r7, #16
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}

08014bd0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f000 fb11 	bl	8015200 <osSemaphoreDelete>
#endif
    return 1;
 8014bde:	2301      	movs	r3, #1
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3708      	adds	r7, #8
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b084      	sub	sp, #16
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8014bf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f000 fa43 	bl	8015084 <osSemaphoreAcquire>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d101      	bne.n	8014c08 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8014c04:	2301      	movs	r3, #1
 8014c06:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014c08:	68fb      	ldr	r3, [r7, #12]
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3710      	adds	r7, #16
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}

08014c12 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014c12:	b580      	push	{r7, lr}
 8014c14:	b082      	sub	sp, #8
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014c1a:	6878      	ldr	r0, [r7, #4]
 8014c1c:	f000 fa98 	bl	8015150 <osSemaphoreRelease>
#endif
}
 8014c20:	bf00      	nop
 8014c22:	3708      	adds	r7, #8
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}

08014c28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014c28:	b480      	push	{r7}
 8014c2a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8014c2c:	bf00      	nop
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c34:	4770      	bx	lr
	...

08014c38 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014c38:	b480      	push	{r7}
 8014c3a:	b085      	sub	sp, #20
 8014c3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c3e:	f3ef 8305 	mrs	r3, IPSR
 8014c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8014c44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d10f      	bne.n	8014c6a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8014c4e:	607b      	str	r3, [r7, #4]
  return(result);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d105      	bne.n	8014c62 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014c56:	f3ef 8311 	mrs	r3, BASEPRI
 8014c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d007      	beq.n	8014c72 <osKernelInitialize+0x3a>
 8014c62:	4b0e      	ldr	r3, [pc, #56]	; (8014c9c <osKernelInitialize+0x64>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	2b02      	cmp	r3, #2
 8014c68:	d103      	bne.n	8014c72 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8014c6a:	f06f 0305 	mvn.w	r3, #5
 8014c6e:	60fb      	str	r3, [r7, #12]
 8014c70:	e00c      	b.n	8014c8c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014c72:	4b0a      	ldr	r3, [pc, #40]	; (8014c9c <osKernelInitialize+0x64>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d105      	bne.n	8014c86 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014c7a:	4b08      	ldr	r3, [pc, #32]	; (8014c9c <osKernelInitialize+0x64>)
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014c80:	2300      	movs	r3, #0
 8014c82:	60fb      	str	r3, [r7, #12]
 8014c84:	e002      	b.n	8014c8c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8014c86:	f04f 33ff 	mov.w	r3, #4294967295
 8014c8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8014c8c:	68fb      	ldr	r3, [r7, #12]
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3714      	adds	r7, #20
 8014c92:	46bd      	mov	sp, r7
 8014c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c98:	4770      	bx	lr
 8014c9a:	bf00      	nop
 8014c9c:	20000a70 	.word	0x20000a70

08014ca0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8014ca6:	f002 fb3d 	bl	8017324 <xTaskGetSchedulerState>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d004      	beq.n	8014cba <osKernelGetState+0x1a>
 8014cb0:	2b02      	cmp	r3, #2
 8014cb2:	d105      	bne.n	8014cc0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8014cb4:	2302      	movs	r3, #2
 8014cb6:	607b      	str	r3, [r7, #4]
      break;
 8014cb8:	e00c      	b.n	8014cd4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8014cba:	2303      	movs	r3, #3
 8014cbc:	607b      	str	r3, [r7, #4]
      break;
 8014cbe:	e009      	b.n	8014cd4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8014cc0:	4b07      	ldr	r3, [pc, #28]	; (8014ce0 <osKernelGetState+0x40>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	d102      	bne.n	8014cce <osKernelGetState+0x2e>
        state = osKernelReady;
 8014cc8:	2301      	movs	r3, #1
 8014cca:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8014ccc:	e001      	b.n	8014cd2 <osKernelGetState+0x32>
        state = osKernelInactive;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	607b      	str	r3, [r7, #4]
      break;
 8014cd2:	bf00      	nop
  }

  return (state);
 8014cd4:	687b      	ldr	r3, [r7, #4]
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3708      	adds	r7, #8
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	20000a70 	.word	0x20000a70

08014ce4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014cea:	f3ef 8305 	mrs	r3, IPSR
 8014cee:	60bb      	str	r3, [r7, #8]
  return(result);
 8014cf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d10f      	bne.n	8014d16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8014cfa:	607b      	str	r3, [r7, #4]
  return(result);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d105      	bne.n	8014d0e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014d02:	f3ef 8311 	mrs	r3, BASEPRI
 8014d06:	603b      	str	r3, [r7, #0]
  return(result);
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d007      	beq.n	8014d1e <osKernelStart+0x3a>
 8014d0e:	4b0f      	ldr	r3, [pc, #60]	; (8014d4c <osKernelStart+0x68>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	2b02      	cmp	r3, #2
 8014d14:	d103      	bne.n	8014d1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8014d16:	f06f 0305 	mvn.w	r3, #5
 8014d1a:	60fb      	str	r3, [r7, #12]
 8014d1c:	e010      	b.n	8014d40 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014d1e:	4b0b      	ldr	r3, [pc, #44]	; (8014d4c <osKernelStart+0x68>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	d109      	bne.n	8014d3a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014d26:	f7ff ff7f 	bl	8014c28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014d2a:	4b08      	ldr	r3, [pc, #32]	; (8014d4c <osKernelStart+0x68>)
 8014d2c:	2202      	movs	r2, #2
 8014d2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014d30:	f001 feb0 	bl	8016a94 <vTaskStartScheduler>
      stat = osOK;
 8014d34:	2300      	movs	r3, #0
 8014d36:	60fb      	str	r3, [r7, #12]
 8014d38:	e002      	b.n	8014d40 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8014d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8014d40:	68fb      	ldr	r3, [r7, #12]
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	3710      	adds	r7, #16
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}
 8014d4a:	bf00      	nop
 8014d4c:	20000a70 	.word	0x20000a70

08014d50 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b084      	sub	sp, #16
 8014d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d56:	f3ef 8305 	mrs	r3, IPSR
 8014d5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8014d5c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d10f      	bne.n	8014d82 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d62:	f3ef 8310 	mrs	r3, PRIMASK
 8014d66:	607b      	str	r3, [r7, #4]
  return(result);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d105      	bne.n	8014d7a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8014d72:	603b      	str	r3, [r7, #0]
  return(result);
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d007      	beq.n	8014d8a <osKernelGetTickCount+0x3a>
 8014d7a:	4b08      	ldr	r3, [pc, #32]	; (8014d9c <osKernelGetTickCount+0x4c>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	2b02      	cmp	r3, #2
 8014d80:	d103      	bne.n	8014d8a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8014d82:	f001 ffa5 	bl	8016cd0 <xTaskGetTickCountFromISR>
 8014d86:	60f8      	str	r0, [r7, #12]
 8014d88:	e002      	b.n	8014d90 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8014d8a:	f001 ff91 	bl	8016cb0 <xTaskGetTickCount>
 8014d8e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8014d90:	68fb      	ldr	r3, [r7, #12]
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	20000a70 	.word	0x20000a70

08014da0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b090      	sub	sp, #64	; 0x40
 8014da4:	af04      	add	r7, sp, #16
 8014da6:	60f8      	str	r0, [r7, #12]
 8014da8:	60b9      	str	r1, [r7, #8]
 8014daa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014dac:	2300      	movs	r3, #0
 8014dae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014db0:	f3ef 8305 	mrs	r3, IPSR
 8014db4:	61fb      	str	r3, [r7, #28]
  return(result);
 8014db6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	f040 808f 	bne.w	8014edc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8014dc2:	61bb      	str	r3, [r7, #24]
  return(result);
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d105      	bne.n	8014dd6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014dca:	f3ef 8311 	mrs	r3, BASEPRI
 8014dce:	617b      	str	r3, [r7, #20]
  return(result);
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d003      	beq.n	8014dde <osThreadNew+0x3e>
 8014dd6:	4b44      	ldr	r3, [pc, #272]	; (8014ee8 <osThreadNew+0x148>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	2b02      	cmp	r3, #2
 8014ddc:	d07e      	beq.n	8014edc <osThreadNew+0x13c>
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d07b      	beq.n	8014edc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8014de4:	2380      	movs	r3, #128	; 0x80
 8014de6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8014de8:	2318      	movs	r3, #24
 8014dea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8014dec:	2300      	movs	r3, #0
 8014dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8014df0:	f04f 33ff 	mov.w	r3, #4294967295
 8014df4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d045      	beq.n	8014e88 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d002      	beq.n	8014e0a <osThreadNew+0x6a>
        name = attr->name;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	699b      	ldr	r3, [r3, #24]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d002      	beq.n	8014e18 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	699b      	ldr	r3, [r3, #24]
 8014e16:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d008      	beq.n	8014e30 <osThreadNew+0x90>
 8014e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e20:	2b38      	cmp	r3, #56	; 0x38
 8014e22:	d805      	bhi.n	8014e30 <osThreadNew+0x90>
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	685b      	ldr	r3, [r3, #4]
 8014e28:	f003 0301 	and.w	r3, r3, #1
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d001      	beq.n	8014e34 <osThreadNew+0x94>
        return (NULL);
 8014e30:	2300      	movs	r3, #0
 8014e32:	e054      	b.n	8014ede <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	695b      	ldr	r3, [r3, #20]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d003      	beq.n	8014e44 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	695b      	ldr	r3, [r3, #20]
 8014e40:	089b      	lsrs	r3, r3, #2
 8014e42:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	689b      	ldr	r3, [r3, #8]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d00e      	beq.n	8014e6a <osThreadNew+0xca>
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	68db      	ldr	r3, [r3, #12]
 8014e50:	2b5b      	cmp	r3, #91	; 0x5b
 8014e52:	d90a      	bls.n	8014e6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d006      	beq.n	8014e6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	695b      	ldr	r3, [r3, #20]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d002      	beq.n	8014e6a <osThreadNew+0xca>
        mem = 1;
 8014e64:	2301      	movs	r3, #1
 8014e66:	623b      	str	r3, [r7, #32]
 8014e68:	e010      	b.n	8014e8c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	689b      	ldr	r3, [r3, #8]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d10c      	bne.n	8014e8c <osThreadNew+0xec>
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	68db      	ldr	r3, [r3, #12]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d108      	bne.n	8014e8c <osThreadNew+0xec>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	691b      	ldr	r3, [r3, #16]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d104      	bne.n	8014e8c <osThreadNew+0xec>
          mem = 0;
 8014e82:	2300      	movs	r3, #0
 8014e84:	623b      	str	r3, [r7, #32]
 8014e86:	e001      	b.n	8014e8c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8014e8c:	6a3b      	ldr	r3, [r7, #32]
 8014e8e:	2b01      	cmp	r3, #1
 8014e90:	d110      	bne.n	8014eb4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014e9a:	9202      	str	r2, [sp, #8]
 8014e9c:	9301      	str	r3, [sp, #4]
 8014e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea0:	9300      	str	r3, [sp, #0]
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ea8:	68f8      	ldr	r0, [r7, #12]
 8014eaa:	f001 fc21 	bl	80166f0 <xTaskCreateStatic>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	613b      	str	r3, [r7, #16]
 8014eb2:	e013      	b.n	8014edc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8014eb4:	6a3b      	ldr	r3, [r7, #32]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d110      	bne.n	8014edc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ebc:	b29a      	uxth	r2, r3
 8014ebe:	f107 0310 	add.w	r3, r7, #16
 8014ec2:	9301      	str	r3, [sp, #4]
 8014ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ecc:	68f8      	ldr	r0, [r7, #12]
 8014ece:	f001 fc69 	bl	80167a4 <xTaskCreate>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	d001      	beq.n	8014edc <osThreadNew+0x13c>
          hTask = NULL;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014edc:	693b      	ldr	r3, [r7, #16]
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3730      	adds	r7, #48	; 0x30
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
 8014ee6:	bf00      	nop
 8014ee8:	20000a70 	.word	0x20000a70

08014eec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b086      	sub	sp, #24
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ef4:	f3ef 8305 	mrs	r3, IPSR
 8014ef8:	613b      	str	r3, [r7, #16]
  return(result);
 8014efa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d10f      	bne.n	8014f20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f00:	f3ef 8310 	mrs	r3, PRIMASK
 8014f04:	60fb      	str	r3, [r7, #12]
  return(result);
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d105      	bne.n	8014f18 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8014f10:	60bb      	str	r3, [r7, #8]
  return(result);
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d007      	beq.n	8014f28 <osDelay+0x3c>
 8014f18:	4b0a      	ldr	r3, [pc, #40]	; (8014f44 <osDelay+0x58>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	2b02      	cmp	r3, #2
 8014f1e:	d103      	bne.n	8014f28 <osDelay+0x3c>
    stat = osErrorISR;
 8014f20:	f06f 0305 	mvn.w	r3, #5
 8014f24:	617b      	str	r3, [r7, #20]
 8014f26:	e007      	b.n	8014f38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d002      	beq.n	8014f38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f001 fd7a 	bl	8016a2c <vTaskDelay>
    }
  }

  return (stat);
 8014f38:	697b      	ldr	r3, [r7, #20]
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3718      	adds	r7, #24
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	20000a70 	.word	0x20000a70

08014f48 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b08c      	sub	sp, #48	; 0x30
 8014f4c:	af02      	add	r7, sp, #8
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014f54:	2300      	movs	r3, #0
 8014f56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f58:	f3ef 8305 	mrs	r3, IPSR
 8014f5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8014f5e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	f040 8087 	bne.w	8015074 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f66:	f3ef 8310 	mrs	r3, PRIMASK
 8014f6a:	617b      	str	r3, [r7, #20]
  return(result);
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d105      	bne.n	8014f7e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014f72:	f3ef 8311 	mrs	r3, BASEPRI
 8014f76:	613b      	str	r3, [r7, #16]
  return(result);
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d003      	beq.n	8014f86 <osSemaphoreNew+0x3e>
 8014f7e:	4b40      	ldr	r3, [pc, #256]	; (8015080 <osSemaphoreNew+0x138>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2b02      	cmp	r3, #2
 8014f84:	d076      	beq.n	8015074 <osSemaphoreNew+0x12c>
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d073      	beq.n	8015074 <osSemaphoreNew+0x12c>
 8014f8c:	68ba      	ldr	r2, [r7, #8]
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d86f      	bhi.n	8015074 <osSemaphoreNew+0x12c>
    mem = -1;
 8014f94:	f04f 33ff 	mov.w	r3, #4294967295
 8014f98:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d015      	beq.n	8014fcc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	689b      	ldr	r3, [r3, #8]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d006      	beq.n	8014fb6 <osSemaphoreNew+0x6e>
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	68db      	ldr	r3, [r3, #12]
 8014fac:	2b4f      	cmp	r3, #79	; 0x4f
 8014fae:	d902      	bls.n	8014fb6 <osSemaphoreNew+0x6e>
        mem = 1;
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	623b      	str	r3, [r7, #32]
 8014fb4:	e00c      	b.n	8014fd0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	689b      	ldr	r3, [r3, #8]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d108      	bne.n	8014fd0 <osSemaphoreNew+0x88>
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	68db      	ldr	r3, [r3, #12]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d104      	bne.n	8014fd0 <osSemaphoreNew+0x88>
          mem = 0;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	623b      	str	r3, [r7, #32]
 8014fca:	e001      	b.n	8014fd0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8014fcc:	2300      	movs	r3, #0
 8014fce:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8014fd0:	6a3b      	ldr	r3, [r7, #32]
 8014fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fd6:	d04d      	beq.n	8015074 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2b01      	cmp	r3, #1
 8014fdc:	d129      	bne.n	8015032 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8014fde:	6a3b      	ldr	r3, [r7, #32]
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	d10b      	bne.n	8014ffc <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	689a      	ldr	r2, [r3, #8]
 8014fe8:	2303      	movs	r3, #3
 8014fea:	9300      	str	r3, [sp, #0]
 8014fec:	4613      	mov	r3, r2
 8014fee:	2200      	movs	r2, #0
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	2001      	movs	r0, #1
 8014ff4:	f000 fbf6 	bl	80157e4 <xQueueGenericCreateStatic>
 8014ff8:	6278      	str	r0, [r7, #36]	; 0x24
 8014ffa:	e005      	b.n	8015008 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8014ffc:	2203      	movs	r2, #3
 8014ffe:	2100      	movs	r1, #0
 8015000:	2001      	movs	r0, #1
 8015002:	f000 fc62 	bl	80158ca <xQueueGenericCreate>
 8015006:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801500a:	2b00      	cmp	r3, #0
 801500c:	d022      	beq.n	8015054 <osSemaphoreNew+0x10c>
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d01f      	beq.n	8015054 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015014:	2300      	movs	r3, #0
 8015016:	2200      	movs	r2, #0
 8015018:	2100      	movs	r1, #0
 801501a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801501c:	f000 fd1e 	bl	8015a5c <xQueueGenericSend>
 8015020:	4603      	mov	r3, r0
 8015022:	2b01      	cmp	r3, #1
 8015024:	d016      	beq.n	8015054 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8015026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015028:	f001 f991 	bl	801634e <vQueueDelete>
            hSemaphore = NULL;
 801502c:	2300      	movs	r3, #0
 801502e:	627b      	str	r3, [r7, #36]	; 0x24
 8015030:	e010      	b.n	8015054 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8015032:	6a3b      	ldr	r3, [r7, #32]
 8015034:	2b01      	cmp	r3, #1
 8015036:	d108      	bne.n	801504a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	689b      	ldr	r3, [r3, #8]
 801503c:	461a      	mov	r2, r3
 801503e:	68b9      	ldr	r1, [r7, #8]
 8015040:	68f8      	ldr	r0, [r7, #12]
 8015042:	f000 fca4 	bl	801598e <xQueueCreateCountingSemaphoreStatic>
 8015046:	6278      	str	r0, [r7, #36]	; 0x24
 8015048:	e004      	b.n	8015054 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801504a:	68b9      	ldr	r1, [r7, #8]
 801504c:	68f8      	ldr	r0, [r7, #12]
 801504e:	f000 fcd3 	bl	80159f8 <xQueueCreateCountingSemaphore>
 8015052:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015056:	2b00      	cmp	r3, #0
 8015058:	d00c      	beq.n	8015074 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d003      	beq.n	8015068 <osSemaphoreNew+0x120>
          name = attr->name;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	61fb      	str	r3, [r7, #28]
 8015066:	e001      	b.n	801506c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8015068:	2300      	movs	r3, #0
 801506a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801506c:	69f9      	ldr	r1, [r7, #28]
 801506e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015070:	f001 fab8 	bl	80165e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015076:	4618      	mov	r0, r3
 8015078:	3728      	adds	r7, #40	; 0x28
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
 801507e:	bf00      	nop
 8015080:	20000a70 	.word	0x20000a70

08015084 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015084:	b580      	push	{r7, lr}
 8015086:	b088      	sub	sp, #32
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015092:	2300      	movs	r3, #0
 8015094:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d103      	bne.n	80150a4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801509c:	f06f 0303 	mvn.w	r3, #3
 80150a0:	61fb      	str	r3, [r7, #28]
 80150a2:	e04b      	b.n	801513c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80150a4:	f3ef 8305 	mrs	r3, IPSR
 80150a8:	617b      	str	r3, [r7, #20]
  return(result);
 80150aa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d10f      	bne.n	80150d0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150b0:	f3ef 8310 	mrs	r3, PRIMASK
 80150b4:	613b      	str	r3, [r7, #16]
  return(result);
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d105      	bne.n	80150c8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80150bc:	f3ef 8311 	mrs	r3, BASEPRI
 80150c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d026      	beq.n	8015116 <osSemaphoreAcquire+0x92>
 80150c8:	4b1f      	ldr	r3, [pc, #124]	; (8015148 <osSemaphoreAcquire+0xc4>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	2b02      	cmp	r3, #2
 80150ce:	d122      	bne.n	8015116 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d003      	beq.n	80150de <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80150d6:	f06f 0303 	mvn.w	r3, #3
 80150da:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80150dc:	e02d      	b.n	801513a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80150de:	2300      	movs	r3, #0
 80150e0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80150e2:	f107 0308 	add.w	r3, r7, #8
 80150e6:	461a      	mov	r2, r3
 80150e8:	2100      	movs	r1, #0
 80150ea:	69b8      	ldr	r0, [r7, #24]
 80150ec:	f001 f8b2 	bl	8016254 <xQueueReceiveFromISR>
 80150f0:	4603      	mov	r3, r0
 80150f2:	2b01      	cmp	r3, #1
 80150f4:	d003      	beq.n	80150fe <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80150f6:	f06f 0302 	mvn.w	r3, #2
 80150fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80150fc:	e01d      	b.n	801513a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d01a      	beq.n	801513a <osSemaphoreAcquire+0xb6>
 8015104:	4b11      	ldr	r3, [pc, #68]	; (801514c <osSemaphoreAcquire+0xc8>)
 8015106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801510a:	601a      	str	r2, [r3, #0]
 801510c:	f3bf 8f4f 	dsb	sy
 8015110:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8015114:	e011      	b.n	801513a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015116:	6839      	ldr	r1, [r7, #0]
 8015118:	69b8      	ldr	r0, [r7, #24]
 801511a:	f000 ff93 	bl	8016044 <xQueueSemaphoreTake>
 801511e:	4603      	mov	r3, r0
 8015120:	2b01      	cmp	r3, #1
 8015122:	d00b      	beq.n	801513c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d003      	beq.n	8015132 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801512a:	f06f 0301 	mvn.w	r3, #1
 801512e:	61fb      	str	r3, [r7, #28]
 8015130:	e004      	b.n	801513c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8015132:	f06f 0302 	mvn.w	r3, #2
 8015136:	61fb      	str	r3, [r7, #28]
 8015138:	e000      	b.n	801513c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801513a:	bf00      	nop
      }
    }
  }

  return (stat);
 801513c:	69fb      	ldr	r3, [r7, #28]
}
 801513e:	4618      	mov	r0, r3
 8015140:	3720      	adds	r7, #32
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
 8015146:	bf00      	nop
 8015148:	20000a70 	.word	0x20000a70
 801514c:	e000ed04 	.word	0xe000ed04

08015150 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015150:	b580      	push	{r7, lr}
 8015152:	b088      	sub	sp, #32
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801515c:	2300      	movs	r3, #0
 801515e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8015160:	69bb      	ldr	r3, [r7, #24]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d103      	bne.n	801516e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015166:	f06f 0303 	mvn.w	r3, #3
 801516a:	61fb      	str	r3, [r7, #28]
 801516c:	e03e      	b.n	80151ec <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801516e:	f3ef 8305 	mrs	r3, IPSR
 8015172:	617b      	str	r3, [r7, #20]
  return(result);
 8015174:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8015176:	2b00      	cmp	r3, #0
 8015178:	d10f      	bne.n	801519a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801517a:	f3ef 8310 	mrs	r3, PRIMASK
 801517e:	613b      	str	r3, [r7, #16]
  return(result);
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d105      	bne.n	8015192 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015186:	f3ef 8311 	mrs	r3, BASEPRI
 801518a:	60fb      	str	r3, [r7, #12]
  return(result);
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d01e      	beq.n	80151d0 <osSemaphoreRelease+0x80>
 8015192:	4b19      	ldr	r3, [pc, #100]	; (80151f8 <osSemaphoreRelease+0xa8>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2b02      	cmp	r3, #2
 8015198:	d11a      	bne.n	80151d0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801519a:	2300      	movs	r3, #0
 801519c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801519e:	f107 0308 	add.w	r3, r7, #8
 80151a2:	4619      	mov	r1, r3
 80151a4:	69b8      	ldr	r0, [r7, #24]
 80151a6:	f000 fde7 	bl	8015d78 <xQueueGiveFromISR>
 80151aa:	4603      	mov	r3, r0
 80151ac:	2b01      	cmp	r3, #1
 80151ae:	d003      	beq.n	80151b8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80151b0:	f06f 0302 	mvn.w	r3, #2
 80151b4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80151b6:	e018      	b.n	80151ea <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d015      	beq.n	80151ea <osSemaphoreRelease+0x9a>
 80151be:	4b0f      	ldr	r3, [pc, #60]	; (80151fc <osSemaphoreRelease+0xac>)
 80151c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151c4:	601a      	str	r2, [r3, #0]
 80151c6:	f3bf 8f4f 	dsb	sy
 80151ca:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80151ce:	e00c      	b.n	80151ea <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80151d0:	2300      	movs	r3, #0
 80151d2:	2200      	movs	r2, #0
 80151d4:	2100      	movs	r1, #0
 80151d6:	69b8      	ldr	r0, [r7, #24]
 80151d8:	f000 fc40 	bl	8015a5c <xQueueGenericSend>
 80151dc:	4603      	mov	r3, r0
 80151de:	2b01      	cmp	r3, #1
 80151e0:	d004      	beq.n	80151ec <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80151e2:	f06f 0302 	mvn.w	r3, #2
 80151e6:	61fb      	str	r3, [r7, #28]
 80151e8:	e000      	b.n	80151ec <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80151ea:	bf00      	nop
    }
  }

  return (stat);
 80151ec:	69fb      	ldr	r3, [r7, #28]
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3720      	adds	r7, #32
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}
 80151f6:	bf00      	nop
 80151f8:	20000a70 	.word	0x20000a70
 80151fc:	e000ed04 	.word	0xe000ed04

08015200 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015200:	b580      	push	{r7, lr}
 8015202:	b088      	sub	sp, #32
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801520c:	f3ef 8305 	mrs	r3, IPSR
 8015210:	617b      	str	r3, [r7, #20]
  return(result);
 8015212:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8015214:	2b00      	cmp	r3, #0
 8015216:	d10f      	bne.n	8015238 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015218:	f3ef 8310 	mrs	r3, PRIMASK
 801521c:	613b      	str	r3, [r7, #16]
  return(result);
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d105      	bne.n	8015230 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015224:	f3ef 8311 	mrs	r3, BASEPRI
 8015228:	60fb      	str	r3, [r7, #12]
  return(result);
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d007      	beq.n	8015240 <osSemaphoreDelete+0x40>
 8015230:	4b0d      	ldr	r3, [pc, #52]	; (8015268 <osSemaphoreDelete+0x68>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	2b02      	cmp	r3, #2
 8015236:	d103      	bne.n	8015240 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8015238:	f06f 0305 	mvn.w	r3, #5
 801523c:	61fb      	str	r3, [r7, #28]
 801523e:	e00e      	b.n	801525e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8015240:	69bb      	ldr	r3, [r7, #24]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d103      	bne.n	801524e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8015246:	f06f 0303 	mvn.w	r3, #3
 801524a:	61fb      	str	r3, [r7, #28]
 801524c:	e007      	b.n	801525e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801524e:	69b8      	ldr	r0, [r7, #24]
 8015250:	f001 f9f0 	bl	8016634 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8015254:	2300      	movs	r3, #0
 8015256:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8015258:	69b8      	ldr	r0, [r7, #24]
 801525a:	f001 f878 	bl	801634e <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801525e:	69fb      	ldr	r3, [r7, #28]
}
 8015260:	4618      	mov	r0, r3
 8015262:	3720      	adds	r7, #32
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}
 8015268:	20000a70 	.word	0x20000a70

0801526c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801526c:	b580      	push	{r7, lr}
 801526e:	b08c      	sub	sp, #48	; 0x30
 8015270:	af02      	add	r7, sp, #8
 8015272:	60f8      	str	r0, [r7, #12]
 8015274:	60b9      	str	r1, [r7, #8]
 8015276:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015278:	2300      	movs	r3, #0
 801527a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801527c:	f3ef 8305 	mrs	r3, IPSR
 8015280:	61bb      	str	r3, [r7, #24]
  return(result);
 8015282:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8015284:	2b00      	cmp	r3, #0
 8015286:	d170      	bne.n	801536a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015288:	f3ef 8310 	mrs	r3, PRIMASK
 801528c:	617b      	str	r3, [r7, #20]
  return(result);
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d105      	bne.n	80152a0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015294:	f3ef 8311 	mrs	r3, BASEPRI
 8015298:	613b      	str	r3, [r7, #16]
  return(result);
 801529a:	693b      	ldr	r3, [r7, #16]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d003      	beq.n	80152a8 <osMessageQueueNew+0x3c>
 80152a0:	4b34      	ldr	r3, [pc, #208]	; (8015374 <osMessageQueueNew+0x108>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	2b02      	cmp	r3, #2
 80152a6:	d060      	beq.n	801536a <osMessageQueueNew+0xfe>
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d05d      	beq.n	801536a <osMessageQueueNew+0xfe>
 80152ae:	68bb      	ldr	r3, [r7, #8]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d05a      	beq.n	801536a <osMessageQueueNew+0xfe>
    mem = -1;
 80152b4:	f04f 33ff 	mov.w	r3, #4294967295
 80152b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d029      	beq.n	8015314 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	689b      	ldr	r3, [r3, #8]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d012      	beq.n	80152ee <osMessageQueueNew+0x82>
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	68db      	ldr	r3, [r3, #12]
 80152cc:	2b4f      	cmp	r3, #79	; 0x4f
 80152ce:	d90e      	bls.n	80152ee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d00a      	beq.n	80152ee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	695a      	ldr	r2, [r3, #20]
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	68b9      	ldr	r1, [r7, #8]
 80152e0:	fb01 f303 	mul.w	r3, r1, r3
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d302      	bcc.n	80152ee <osMessageQueueNew+0x82>
        mem = 1;
 80152e8:	2301      	movs	r3, #1
 80152ea:	623b      	str	r3, [r7, #32]
 80152ec:	e014      	b.n	8015318 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	689b      	ldr	r3, [r3, #8]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d110      	bne.n	8015318 <osMessageQueueNew+0xac>
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d10c      	bne.n	8015318 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015302:	2b00      	cmp	r3, #0
 8015304:	d108      	bne.n	8015318 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	695b      	ldr	r3, [r3, #20]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d104      	bne.n	8015318 <osMessageQueueNew+0xac>
          mem = 0;
 801530e:	2300      	movs	r3, #0
 8015310:	623b      	str	r3, [r7, #32]
 8015312:	e001      	b.n	8015318 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8015314:	2300      	movs	r3, #0
 8015316:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8015318:	6a3b      	ldr	r3, [r7, #32]
 801531a:	2b01      	cmp	r3, #1
 801531c:	d10c      	bne.n	8015338 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	691a      	ldr	r2, [r3, #16]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	6899      	ldr	r1, [r3, #8]
 8015326:	2300      	movs	r3, #0
 8015328:	9300      	str	r3, [sp, #0]
 801532a:	460b      	mov	r3, r1
 801532c:	68b9      	ldr	r1, [r7, #8]
 801532e:	68f8      	ldr	r0, [r7, #12]
 8015330:	f000 fa58 	bl	80157e4 <xQueueGenericCreateStatic>
 8015334:	6278      	str	r0, [r7, #36]	; 0x24
 8015336:	e008      	b.n	801534a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8015338:	6a3b      	ldr	r3, [r7, #32]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d105      	bne.n	801534a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801533e:	2200      	movs	r2, #0
 8015340:	68b9      	ldr	r1, [r7, #8]
 8015342:	68f8      	ldr	r0, [r7, #12]
 8015344:	f000 fac1 	bl	80158ca <xQueueGenericCreate>
 8015348:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534c:	2b00      	cmp	r3, #0
 801534e:	d00c      	beq.n	801536a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d003      	beq.n	801535e <osMessageQueueNew+0xf2>
        name = attr->name;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	61fb      	str	r3, [r7, #28]
 801535c:	e001      	b.n	8015362 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801535e:	2300      	movs	r3, #0
 8015360:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8015362:	69f9      	ldr	r1, [r7, #28]
 8015364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015366:	f001 f93d 	bl	80165e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801536c:	4618      	mov	r0, r3
 801536e:	3728      	adds	r7, #40	; 0x28
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	20000a70 	.word	0x20000a70

08015378 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015378:	b580      	push	{r7, lr}
 801537a:	b08a      	sub	sp, #40	; 0x28
 801537c:	af00      	add	r7, sp, #0
 801537e:	60f8      	str	r0, [r7, #12]
 8015380:	60b9      	str	r1, [r7, #8]
 8015382:	603b      	str	r3, [r7, #0]
 8015384:	4613      	mov	r3, r2
 8015386:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801538c:	2300      	movs	r3, #0
 801538e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015390:	f3ef 8305 	mrs	r3, IPSR
 8015394:	61fb      	str	r3, [r7, #28]
  return(result);
 8015396:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8015398:	2b00      	cmp	r3, #0
 801539a:	d10f      	bne.n	80153bc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801539c:	f3ef 8310 	mrs	r3, PRIMASK
 80153a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80153a2:	69bb      	ldr	r3, [r7, #24]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d105      	bne.n	80153b4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80153a8:	f3ef 8311 	mrs	r3, BASEPRI
 80153ac:	617b      	str	r3, [r7, #20]
  return(result);
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d02c      	beq.n	801540e <osMessageQueuePut+0x96>
 80153b4:	4b28      	ldr	r3, [pc, #160]	; (8015458 <osMessageQueuePut+0xe0>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	2b02      	cmp	r3, #2
 80153ba:	d128      	bne.n	801540e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80153bc:	6a3b      	ldr	r3, [r7, #32]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d005      	beq.n	80153ce <osMessageQueuePut+0x56>
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d002      	beq.n	80153ce <osMessageQueuePut+0x56>
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d003      	beq.n	80153d6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80153ce:	f06f 0303 	mvn.w	r3, #3
 80153d2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80153d4:	e039      	b.n	801544a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80153d6:	2300      	movs	r3, #0
 80153d8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80153da:	f107 0210 	add.w	r2, r7, #16
 80153de:	2300      	movs	r3, #0
 80153e0:	68b9      	ldr	r1, [r7, #8]
 80153e2:	6a38      	ldr	r0, [r7, #32]
 80153e4:	f000 fc34 	bl	8015c50 <xQueueGenericSendFromISR>
 80153e8:	4603      	mov	r3, r0
 80153ea:	2b01      	cmp	r3, #1
 80153ec:	d003      	beq.n	80153f6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80153ee:	f06f 0302 	mvn.w	r3, #2
 80153f2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80153f4:	e029      	b.n	801544a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80153f6:	693b      	ldr	r3, [r7, #16]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d026      	beq.n	801544a <osMessageQueuePut+0xd2>
 80153fc:	4b17      	ldr	r3, [pc, #92]	; (801545c <osMessageQueuePut+0xe4>)
 80153fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015402:	601a      	str	r2, [r3, #0]
 8015404:	f3bf 8f4f 	dsb	sy
 8015408:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801540c:	e01d      	b.n	801544a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801540e:	6a3b      	ldr	r3, [r7, #32]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d002      	beq.n	801541a <osMessageQueuePut+0xa2>
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d103      	bne.n	8015422 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801541a:	f06f 0303 	mvn.w	r3, #3
 801541e:	627b      	str	r3, [r7, #36]	; 0x24
 8015420:	e014      	b.n	801544c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015422:	2300      	movs	r3, #0
 8015424:	683a      	ldr	r2, [r7, #0]
 8015426:	68b9      	ldr	r1, [r7, #8]
 8015428:	6a38      	ldr	r0, [r7, #32]
 801542a:	f000 fb17 	bl	8015a5c <xQueueGenericSend>
 801542e:	4603      	mov	r3, r0
 8015430:	2b01      	cmp	r3, #1
 8015432:	d00b      	beq.n	801544c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d003      	beq.n	8015442 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801543a:	f06f 0301 	mvn.w	r3, #1
 801543e:	627b      	str	r3, [r7, #36]	; 0x24
 8015440:	e004      	b.n	801544c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8015442:	f06f 0302 	mvn.w	r3, #2
 8015446:	627b      	str	r3, [r7, #36]	; 0x24
 8015448:	e000      	b.n	801544c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801544a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801544e:	4618      	mov	r0, r3
 8015450:	3728      	adds	r7, #40	; 0x28
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}
 8015456:	bf00      	nop
 8015458:	20000a70 	.word	0x20000a70
 801545c:	e000ed04 	.word	0xe000ed04

08015460 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015460:	b580      	push	{r7, lr}
 8015462:	b08a      	sub	sp, #40	; 0x28
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	607a      	str	r2, [r7, #4]
 801546c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015472:	2300      	movs	r3, #0
 8015474:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015476:	f3ef 8305 	mrs	r3, IPSR
 801547a:	61fb      	str	r3, [r7, #28]
  return(result);
 801547c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801547e:	2b00      	cmp	r3, #0
 8015480:	d10f      	bne.n	80154a2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015482:	f3ef 8310 	mrs	r3, PRIMASK
 8015486:	61bb      	str	r3, [r7, #24]
  return(result);
 8015488:	69bb      	ldr	r3, [r7, #24]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d105      	bne.n	801549a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801548e:	f3ef 8311 	mrs	r3, BASEPRI
 8015492:	617b      	str	r3, [r7, #20]
  return(result);
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d02c      	beq.n	80154f4 <osMessageQueueGet+0x94>
 801549a:	4b28      	ldr	r3, [pc, #160]	; (801553c <osMessageQueueGet+0xdc>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	2b02      	cmp	r3, #2
 80154a0:	d128      	bne.n	80154f4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80154a2:	6a3b      	ldr	r3, [r7, #32]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d005      	beq.n	80154b4 <osMessageQueueGet+0x54>
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d002      	beq.n	80154b4 <osMessageQueueGet+0x54>
 80154ae:	683b      	ldr	r3, [r7, #0]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d003      	beq.n	80154bc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80154b4:	f06f 0303 	mvn.w	r3, #3
 80154b8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80154ba:	e038      	b.n	801552e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80154bc:	2300      	movs	r3, #0
 80154be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80154c0:	f107 0310 	add.w	r3, r7, #16
 80154c4:	461a      	mov	r2, r3
 80154c6:	68b9      	ldr	r1, [r7, #8]
 80154c8:	6a38      	ldr	r0, [r7, #32]
 80154ca:	f000 fec3 	bl	8016254 <xQueueReceiveFromISR>
 80154ce:	4603      	mov	r3, r0
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	d003      	beq.n	80154dc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80154d4:	f06f 0302 	mvn.w	r3, #2
 80154d8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80154da:	e028      	b.n	801552e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80154dc:	693b      	ldr	r3, [r7, #16]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d025      	beq.n	801552e <osMessageQueueGet+0xce>
 80154e2:	4b17      	ldr	r3, [pc, #92]	; (8015540 <osMessageQueueGet+0xe0>)
 80154e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154e8:	601a      	str	r2, [r3, #0]
 80154ea:	f3bf 8f4f 	dsb	sy
 80154ee:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80154f2:	e01c      	b.n	801552e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80154f4:	6a3b      	ldr	r3, [r7, #32]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d002      	beq.n	8015500 <osMessageQueueGet+0xa0>
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d103      	bne.n	8015508 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8015500:	f06f 0303 	mvn.w	r3, #3
 8015504:	627b      	str	r3, [r7, #36]	; 0x24
 8015506:	e013      	b.n	8015530 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015508:	683a      	ldr	r2, [r7, #0]
 801550a:	68b9      	ldr	r1, [r7, #8]
 801550c:	6a38      	ldr	r0, [r7, #32]
 801550e:	f000 fcbd 	bl	8015e8c <xQueueReceive>
 8015512:	4603      	mov	r3, r0
 8015514:	2b01      	cmp	r3, #1
 8015516:	d00b      	beq.n	8015530 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d003      	beq.n	8015526 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801551e:	f06f 0301 	mvn.w	r3, #1
 8015522:	627b      	str	r3, [r7, #36]	; 0x24
 8015524:	e004      	b.n	8015530 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8015526:	f06f 0302 	mvn.w	r3, #2
 801552a:	627b      	str	r3, [r7, #36]	; 0x24
 801552c:	e000      	b.n	8015530 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801552e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8015530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015532:	4618      	mov	r0, r3
 8015534:	3728      	adds	r7, #40	; 0x28
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
 801553a:	bf00      	nop
 801553c:	20000a70 	.word	0x20000a70
 8015540:	e000ed04 	.word	0xe000ed04

08015544 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015544:	b480      	push	{r7}
 8015546:	b085      	sub	sp, #20
 8015548:	af00      	add	r7, sp, #0
 801554a:	60f8      	str	r0, [r7, #12]
 801554c:	60b9      	str	r1, [r7, #8]
 801554e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	4a07      	ldr	r2, [pc, #28]	; (8015570 <vApplicationGetIdleTaskMemory+0x2c>)
 8015554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	4a06      	ldr	r2, [pc, #24]	; (8015574 <vApplicationGetIdleTaskMemory+0x30>)
 801555a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2280      	movs	r2, #128	; 0x80
 8015560:	601a      	str	r2, [r3, #0]
}
 8015562:	bf00      	nop
 8015564:	3714      	adds	r7, #20
 8015566:	46bd      	mov	sp, r7
 8015568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556c:	4770      	bx	lr
 801556e:	bf00      	nop
 8015570:	20000a74 	.word	0x20000a74
 8015574:	20000ad0 	.word	0x20000ad0

08015578 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015578:	b480      	push	{r7}
 801557a:	b085      	sub	sp, #20
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	4a07      	ldr	r2, [pc, #28]	; (80155a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8015588:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	4a06      	ldr	r2, [pc, #24]	; (80155a8 <vApplicationGetTimerTaskMemory+0x30>)
 801558e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015596:	601a      	str	r2, [r3, #0]
}
 8015598:	bf00      	nop
 801559a:	3714      	adds	r7, #20
 801559c:	46bd      	mov	sp, r7
 801559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a2:	4770      	bx	lr
 80155a4:	20000cd0 	.word	0x20000cd0
 80155a8:	20000d2c 	.word	0x20000d2c

080155ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80155ac:	b480      	push	{r7}
 80155ae:	b083      	sub	sp, #12
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f103 0208 	add.w	r2, r3, #8
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	f04f 32ff 	mov.w	r2, #4294967295
 80155c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f103 0208 	add.w	r2, r3, #8
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f103 0208 	add.w	r2, r3, #8
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2200      	movs	r2, #0
 80155de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80155e0:	bf00      	nop
 80155e2:	370c      	adds	r7, #12
 80155e4:	46bd      	mov	sp, r7
 80155e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ea:	4770      	bx	lr

080155ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80155ec:	b480      	push	{r7}
 80155ee:	b083      	sub	sp, #12
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	2200      	movs	r2, #0
 80155f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80155fa:	bf00      	nop
 80155fc:	370c      	adds	r7, #12
 80155fe:	46bd      	mov	sp, r7
 8015600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015604:	4770      	bx	lr

08015606 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015606:	b480      	push	{r7}
 8015608:	b085      	sub	sp, #20
 801560a:	af00      	add	r7, sp, #0
 801560c:	6078      	str	r0, [r7, #4]
 801560e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	68fa      	ldr	r2, [r7, #12]
 801561a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	689a      	ldr	r2, [r3, #8]
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	689b      	ldr	r3, [r3, #8]
 8015628:	683a      	ldr	r2, [r7, #0]
 801562a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	683a      	ldr	r2, [r7, #0]
 8015630:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	687a      	ldr	r2, [r7, #4]
 8015636:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	1c5a      	adds	r2, r3, #1
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	601a      	str	r2, [r3, #0]
}
 8015642:	bf00      	nop
 8015644:	3714      	adds	r7, #20
 8015646:	46bd      	mov	sp, r7
 8015648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564c:	4770      	bx	lr

0801564e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801564e:	b480      	push	{r7}
 8015650:	b085      	sub	sp, #20
 8015652:	af00      	add	r7, sp, #0
 8015654:	6078      	str	r0, [r7, #4]
 8015656:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015664:	d103      	bne.n	801566e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	691b      	ldr	r3, [r3, #16]
 801566a:	60fb      	str	r3, [r7, #12]
 801566c:	e00c      	b.n	8015688 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	3308      	adds	r3, #8
 8015672:	60fb      	str	r3, [r7, #12]
 8015674:	e002      	b.n	801567c <vListInsert+0x2e>
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	60fb      	str	r3, [r7, #12]
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	68ba      	ldr	r2, [r7, #8]
 8015684:	429a      	cmp	r2, r3
 8015686:	d2f6      	bcs.n	8015676 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	685a      	ldr	r2, [r3, #4]
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	685b      	ldr	r3, [r3, #4]
 8015694:	683a      	ldr	r2, [r7, #0]
 8015696:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	68fa      	ldr	r2, [r7, #12]
 801569c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	683a      	ldr	r2, [r7, #0]
 80156a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	687a      	ldr	r2, [r7, #4]
 80156a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	1c5a      	adds	r2, r3, #1
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	601a      	str	r2, [r3, #0]
}
 80156b4:	bf00      	nop
 80156b6:	3714      	adds	r7, #20
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr

080156c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80156c0:	b480      	push	{r7}
 80156c2:	b085      	sub	sp, #20
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	691b      	ldr	r3, [r3, #16]
 80156cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	685b      	ldr	r3, [r3, #4]
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	6892      	ldr	r2, [r2, #8]
 80156d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	689b      	ldr	r3, [r3, #8]
 80156dc:	687a      	ldr	r2, [r7, #4]
 80156de:	6852      	ldr	r2, [r2, #4]
 80156e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d103      	bne.n	80156f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	689a      	ldr	r2, [r3, #8]
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2200      	movs	r2, #0
 80156f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	1e5a      	subs	r2, r3, #1
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	681b      	ldr	r3, [r3, #0]
}
 8015708:	4618      	mov	r0, r3
 801570a:	3714      	adds	r7, #20
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr

08015714 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b084      	sub	sp, #16
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d109      	bne.n	801573c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801572c:	f383 8811 	msr	BASEPRI, r3
 8015730:	f3bf 8f6f 	isb	sy
 8015734:	f3bf 8f4f 	dsb	sy
 8015738:	60bb      	str	r3, [r7, #8]
 801573a:	e7fe      	b.n	801573a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801573c:	f002 fc96 	bl	801806c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	681a      	ldr	r2, [r3, #0]
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015748:	68f9      	ldr	r1, [r7, #12]
 801574a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801574c:	fb01 f303 	mul.w	r3, r1, r3
 8015750:	441a      	add	r2, r3
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	2200      	movs	r2, #0
 801575a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	681a      	ldr	r2, [r3, #0]
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	681a      	ldr	r2, [r3, #0]
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801576c:	3b01      	subs	r3, #1
 801576e:	68f9      	ldr	r1, [r7, #12]
 8015770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015772:	fb01 f303 	mul.w	r3, r1, r3
 8015776:	441a      	add	r2, r3
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	22ff      	movs	r2, #255	; 0xff
 8015780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	22ff      	movs	r2, #255	; 0xff
 8015788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d114      	bne.n	80157bc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	691b      	ldr	r3, [r3, #16]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d01a      	beq.n	80157d0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	3310      	adds	r3, #16
 801579e:	4618      	mov	r0, r3
 80157a0:	f001 fc0a 	bl	8016fb8 <xTaskRemoveFromEventList>
 80157a4:	4603      	mov	r3, r0
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d012      	beq.n	80157d0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80157aa:	4b0d      	ldr	r3, [pc, #52]	; (80157e0 <xQueueGenericReset+0xcc>)
 80157ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157b0:	601a      	str	r2, [r3, #0]
 80157b2:	f3bf 8f4f 	dsb	sy
 80157b6:	f3bf 8f6f 	isb	sy
 80157ba:	e009      	b.n	80157d0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	3310      	adds	r3, #16
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7ff fef3 	bl	80155ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	3324      	adds	r3, #36	; 0x24
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7ff feee 	bl	80155ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80157d0:	f002 fc7a 	bl	80180c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80157d4:	2301      	movs	r3, #1
}
 80157d6:	4618      	mov	r0, r3
 80157d8:	3710      	adds	r7, #16
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	bf00      	nop
 80157e0:	e000ed04 	.word	0xe000ed04

080157e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b08e      	sub	sp, #56	; 0x38
 80157e8:	af02      	add	r7, sp, #8
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	60b9      	str	r1, [r7, #8]
 80157ee:	607a      	str	r2, [r7, #4]
 80157f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d109      	bne.n	801580c <xQueueGenericCreateStatic+0x28>
 80157f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157fc:	f383 8811 	msr	BASEPRI, r3
 8015800:	f3bf 8f6f 	isb	sy
 8015804:	f3bf 8f4f 	dsb	sy
 8015808:	62bb      	str	r3, [r7, #40]	; 0x28
 801580a:	e7fe      	b.n	801580a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d109      	bne.n	8015826 <xQueueGenericCreateStatic+0x42>
 8015812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015816:	f383 8811 	msr	BASEPRI, r3
 801581a:	f3bf 8f6f 	isb	sy
 801581e:	f3bf 8f4f 	dsb	sy
 8015822:	627b      	str	r3, [r7, #36]	; 0x24
 8015824:	e7fe      	b.n	8015824 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d002      	beq.n	8015832 <xQueueGenericCreateStatic+0x4e>
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d001      	beq.n	8015836 <xQueueGenericCreateStatic+0x52>
 8015832:	2301      	movs	r3, #1
 8015834:	e000      	b.n	8015838 <xQueueGenericCreateStatic+0x54>
 8015836:	2300      	movs	r3, #0
 8015838:	2b00      	cmp	r3, #0
 801583a:	d109      	bne.n	8015850 <xQueueGenericCreateStatic+0x6c>
 801583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015840:	f383 8811 	msr	BASEPRI, r3
 8015844:	f3bf 8f6f 	isb	sy
 8015848:	f3bf 8f4f 	dsb	sy
 801584c:	623b      	str	r3, [r7, #32]
 801584e:	e7fe      	b.n	801584e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d102      	bne.n	801585c <xQueueGenericCreateStatic+0x78>
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d101      	bne.n	8015860 <xQueueGenericCreateStatic+0x7c>
 801585c:	2301      	movs	r3, #1
 801585e:	e000      	b.n	8015862 <xQueueGenericCreateStatic+0x7e>
 8015860:	2300      	movs	r3, #0
 8015862:	2b00      	cmp	r3, #0
 8015864:	d109      	bne.n	801587a <xQueueGenericCreateStatic+0x96>
 8015866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801586a:	f383 8811 	msr	BASEPRI, r3
 801586e:	f3bf 8f6f 	isb	sy
 8015872:	f3bf 8f4f 	dsb	sy
 8015876:	61fb      	str	r3, [r7, #28]
 8015878:	e7fe      	b.n	8015878 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801587a:	2350      	movs	r3, #80	; 0x50
 801587c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801587e:	697b      	ldr	r3, [r7, #20]
 8015880:	2b50      	cmp	r3, #80	; 0x50
 8015882:	d009      	beq.n	8015898 <xQueueGenericCreateStatic+0xb4>
 8015884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015888:	f383 8811 	msr	BASEPRI, r3
 801588c:	f3bf 8f6f 	isb	sy
 8015890:	f3bf 8f4f 	dsb	sy
 8015894:	61bb      	str	r3, [r7, #24]
 8015896:	e7fe      	b.n	8015896 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015898:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d00d      	beq.n	80158c0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80158a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a6:	2201      	movs	r2, #1
 80158a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80158ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80158b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b2:	9300      	str	r3, [sp, #0]
 80158b4:	4613      	mov	r3, r2
 80158b6:	687a      	ldr	r2, [r7, #4]
 80158b8:	68b9      	ldr	r1, [r7, #8]
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	f000 f844 	bl	8015948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80158c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3730      	adds	r7, #48	; 0x30
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}

080158ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80158ca:	b580      	push	{r7, lr}
 80158cc:	b08a      	sub	sp, #40	; 0x28
 80158ce:	af02      	add	r7, sp, #8
 80158d0:	60f8      	str	r0, [r7, #12]
 80158d2:	60b9      	str	r1, [r7, #8]
 80158d4:	4613      	mov	r3, r2
 80158d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d109      	bne.n	80158f2 <xQueueGenericCreate+0x28>
 80158de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e2:	f383 8811 	msr	BASEPRI, r3
 80158e6:	f3bf 8f6f 	isb	sy
 80158ea:	f3bf 8f4f 	dsb	sy
 80158ee:	613b      	str	r3, [r7, #16]
 80158f0:	e7fe      	b.n	80158f0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d102      	bne.n	80158fe <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80158f8:	2300      	movs	r3, #0
 80158fa:	61fb      	str	r3, [r7, #28]
 80158fc:	e004      	b.n	8015908 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	68ba      	ldr	r2, [r7, #8]
 8015902:	fb02 f303 	mul.w	r3, r2, r3
 8015906:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015908:	69fb      	ldr	r3, [r7, #28]
 801590a:	3350      	adds	r3, #80	; 0x50
 801590c:	4618      	mov	r0, r3
 801590e:	f002 fcc7 	bl	80182a0 <pvPortMalloc>
 8015912:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015914:	69bb      	ldr	r3, [r7, #24]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d011      	beq.n	801593e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	3350      	adds	r3, #80	; 0x50
 8015922:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015924:	69bb      	ldr	r3, [r7, #24]
 8015926:	2200      	movs	r2, #0
 8015928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801592c:	79fa      	ldrb	r2, [r7, #7]
 801592e:	69bb      	ldr	r3, [r7, #24]
 8015930:	9300      	str	r3, [sp, #0]
 8015932:	4613      	mov	r3, r2
 8015934:	697a      	ldr	r2, [r7, #20]
 8015936:	68b9      	ldr	r1, [r7, #8]
 8015938:	68f8      	ldr	r0, [r7, #12]
 801593a:	f000 f805 	bl	8015948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801593e:	69bb      	ldr	r3, [r7, #24]
	}
 8015940:	4618      	mov	r0, r3
 8015942:	3720      	adds	r7, #32
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}

08015948 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
 801594e:	60f8      	str	r0, [r7, #12]
 8015950:	60b9      	str	r1, [r7, #8]
 8015952:	607a      	str	r2, [r7, #4]
 8015954:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d103      	bne.n	8015964 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801595c:	69bb      	ldr	r3, [r7, #24]
 801595e:	69ba      	ldr	r2, [r7, #24]
 8015960:	601a      	str	r2, [r3, #0]
 8015962:	e002      	b.n	801596a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015964:	69bb      	ldr	r3, [r7, #24]
 8015966:	687a      	ldr	r2, [r7, #4]
 8015968:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	68fa      	ldr	r2, [r7, #12]
 801596e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015970:	69bb      	ldr	r3, [r7, #24]
 8015972:	68ba      	ldr	r2, [r7, #8]
 8015974:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015976:	2101      	movs	r1, #1
 8015978:	69b8      	ldr	r0, [r7, #24]
 801597a:	f7ff fecb 	bl	8015714 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801597e:	69bb      	ldr	r3, [r7, #24]
 8015980:	78fa      	ldrb	r2, [r7, #3]
 8015982:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015986:	bf00      	nop
 8015988:	3710      	adds	r7, #16
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}

0801598e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801598e:	b580      	push	{r7, lr}
 8015990:	b08a      	sub	sp, #40	; 0x28
 8015992:	af02      	add	r7, sp, #8
 8015994:	60f8      	str	r0, [r7, #12]
 8015996:	60b9      	str	r1, [r7, #8]
 8015998:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d109      	bne.n	80159b4 <xQueueCreateCountingSemaphoreStatic+0x26>
 80159a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a4:	f383 8811 	msr	BASEPRI, r3
 80159a8:	f3bf 8f6f 	isb	sy
 80159ac:	f3bf 8f4f 	dsb	sy
 80159b0:	61bb      	str	r3, [r7, #24]
 80159b2:	e7fe      	b.n	80159b2 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80159b4:	68ba      	ldr	r2, [r7, #8]
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	429a      	cmp	r2, r3
 80159ba:	d909      	bls.n	80159d0 <xQueueCreateCountingSemaphoreStatic+0x42>
 80159bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159c0:	f383 8811 	msr	BASEPRI, r3
 80159c4:	f3bf 8f6f 	isb	sy
 80159c8:	f3bf 8f4f 	dsb	sy
 80159cc:	617b      	str	r3, [r7, #20]
 80159ce:	e7fe      	b.n	80159ce <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80159d0:	2302      	movs	r3, #2
 80159d2:	9300      	str	r3, [sp, #0]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2200      	movs	r2, #0
 80159d8:	2100      	movs	r1, #0
 80159da:	68f8      	ldr	r0, [r7, #12]
 80159dc:	f7ff ff02 	bl	80157e4 <xQueueGenericCreateStatic>
 80159e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80159e2:	69fb      	ldr	r3, [r7, #28]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d002      	beq.n	80159ee <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80159e8:	69fb      	ldr	r3, [r7, #28]
 80159ea:	68ba      	ldr	r2, [r7, #8]
 80159ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80159ee:	69fb      	ldr	r3, [r7, #28]
	}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3720      	adds	r7, #32
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}

080159f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b086      	sub	sp, #24
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
 8015a00:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d109      	bne.n	8015a1c <xQueueCreateCountingSemaphore+0x24>
 8015a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a0c:	f383 8811 	msr	BASEPRI, r3
 8015a10:	f3bf 8f6f 	isb	sy
 8015a14:	f3bf 8f4f 	dsb	sy
 8015a18:	613b      	str	r3, [r7, #16]
 8015a1a:	e7fe      	b.n	8015a1a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015a1c:	683a      	ldr	r2, [r7, #0]
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d909      	bls.n	8015a38 <xQueueCreateCountingSemaphore+0x40>
 8015a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a28:	f383 8811 	msr	BASEPRI, r3
 8015a2c:	f3bf 8f6f 	isb	sy
 8015a30:	f3bf 8f4f 	dsb	sy
 8015a34:	60fb      	str	r3, [r7, #12]
 8015a36:	e7fe      	b.n	8015a36 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015a38:	2202      	movs	r2, #2
 8015a3a:	2100      	movs	r1, #0
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f7ff ff44 	bl	80158ca <xQueueGenericCreate>
 8015a42:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d002      	beq.n	8015a50 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	683a      	ldr	r2, [r7, #0]
 8015a4e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015a50:	697b      	ldr	r3, [r7, #20]
	}
 8015a52:	4618      	mov	r0, r3
 8015a54:	3718      	adds	r7, #24
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
	...

08015a5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b08e      	sub	sp, #56	; 0x38
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	607a      	str	r2, [r7, #4]
 8015a68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d109      	bne.n	8015a8c <xQueueGenericSend+0x30>
 8015a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a7c:	f383 8811 	msr	BASEPRI, r3
 8015a80:	f3bf 8f6f 	isb	sy
 8015a84:	f3bf 8f4f 	dsb	sy
 8015a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8015a8a:	e7fe      	b.n	8015a8a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a8c:	68bb      	ldr	r3, [r7, #8]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d103      	bne.n	8015a9a <xQueueGenericSend+0x3e>
 8015a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d101      	bne.n	8015a9e <xQueueGenericSend+0x42>
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	e000      	b.n	8015aa0 <xQueueGenericSend+0x44>
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d109      	bne.n	8015ab8 <xQueueGenericSend+0x5c>
 8015aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aa8:	f383 8811 	msr	BASEPRI, r3
 8015aac:	f3bf 8f6f 	isb	sy
 8015ab0:	f3bf 8f4f 	dsb	sy
 8015ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8015ab6:	e7fe      	b.n	8015ab6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	2b02      	cmp	r3, #2
 8015abc:	d103      	bne.n	8015ac6 <xQueueGenericSend+0x6a>
 8015abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ac2:	2b01      	cmp	r3, #1
 8015ac4:	d101      	bne.n	8015aca <xQueueGenericSend+0x6e>
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	e000      	b.n	8015acc <xQueueGenericSend+0x70>
 8015aca:	2300      	movs	r3, #0
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d109      	bne.n	8015ae4 <xQueueGenericSend+0x88>
 8015ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ad4:	f383 8811 	msr	BASEPRI, r3
 8015ad8:	f3bf 8f6f 	isb	sy
 8015adc:	f3bf 8f4f 	dsb	sy
 8015ae0:	623b      	str	r3, [r7, #32]
 8015ae2:	e7fe      	b.n	8015ae2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015ae4:	f001 fc1e 	bl	8017324 <xTaskGetSchedulerState>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d102      	bne.n	8015af4 <xQueueGenericSend+0x98>
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d101      	bne.n	8015af8 <xQueueGenericSend+0x9c>
 8015af4:	2301      	movs	r3, #1
 8015af6:	e000      	b.n	8015afa <xQueueGenericSend+0x9e>
 8015af8:	2300      	movs	r3, #0
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d109      	bne.n	8015b12 <xQueueGenericSend+0xb6>
 8015afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b02:	f383 8811 	msr	BASEPRI, r3
 8015b06:	f3bf 8f6f 	isb	sy
 8015b0a:	f3bf 8f4f 	dsb	sy
 8015b0e:	61fb      	str	r3, [r7, #28]
 8015b10:	e7fe      	b.n	8015b10 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b12:	f002 faab 	bl	801806c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d302      	bcc.n	8015b28 <xQueueGenericSend+0xcc>
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	2b02      	cmp	r3, #2
 8015b26:	d129      	bne.n	8015b7c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015b28:	683a      	ldr	r2, [r7, #0]
 8015b2a:	68b9      	ldr	r1, [r7, #8]
 8015b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b2e:	f000 fc48 	bl	80163c2 <prvCopyDataToQueue>
 8015b32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d010      	beq.n	8015b5e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b3e:	3324      	adds	r3, #36	; 0x24
 8015b40:	4618      	mov	r0, r3
 8015b42:	f001 fa39 	bl	8016fb8 <xTaskRemoveFromEventList>
 8015b46:	4603      	mov	r3, r0
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d013      	beq.n	8015b74 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015b4c:	4b3f      	ldr	r3, [pc, #252]	; (8015c4c <xQueueGenericSend+0x1f0>)
 8015b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b52:	601a      	str	r2, [r3, #0]
 8015b54:	f3bf 8f4f 	dsb	sy
 8015b58:	f3bf 8f6f 	isb	sy
 8015b5c:	e00a      	b.n	8015b74 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d007      	beq.n	8015b74 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015b64:	4b39      	ldr	r3, [pc, #228]	; (8015c4c <xQueueGenericSend+0x1f0>)
 8015b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b6a:	601a      	str	r2, [r3, #0]
 8015b6c:	f3bf 8f4f 	dsb	sy
 8015b70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015b74:	f002 faa8 	bl	80180c8 <vPortExitCritical>
				return pdPASS;
 8015b78:	2301      	movs	r3, #1
 8015b7a:	e063      	b.n	8015c44 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d103      	bne.n	8015b8a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015b82:	f002 faa1 	bl	80180c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015b86:	2300      	movs	r3, #0
 8015b88:	e05c      	b.n	8015c44 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d106      	bne.n	8015b9e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015b90:	f107 0314 	add.w	r3, r7, #20
 8015b94:	4618      	mov	r0, r3
 8015b96:	f001 fa71 	bl	801707c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b9e:	f002 fa93 	bl	80180c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015ba2:	f000 ffdb 	bl	8016b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015ba6:	f002 fa61 	bl	801806c <vPortEnterCritical>
 8015baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015bb0:	b25b      	sxtb	r3, r3
 8015bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bb6:	d103      	bne.n	8015bc0 <xQueueGenericSend+0x164>
 8015bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bba:	2200      	movs	r2, #0
 8015bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015bc6:	b25b      	sxtb	r3, r3
 8015bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bcc:	d103      	bne.n	8015bd6 <xQueueGenericSend+0x17a>
 8015bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015bd6:	f002 fa77 	bl	80180c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015bda:	1d3a      	adds	r2, r7, #4
 8015bdc:	f107 0314 	add.w	r3, r7, #20
 8015be0:	4611      	mov	r1, r2
 8015be2:	4618      	mov	r0, r3
 8015be4:	f001 fa60 	bl	80170a8 <xTaskCheckForTimeOut>
 8015be8:	4603      	mov	r3, r0
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d124      	bne.n	8015c38 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bf0:	f000 fcdf 	bl	80165b2 <prvIsQueueFull>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d018      	beq.n	8015c2c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfc:	3310      	adds	r3, #16
 8015bfe:	687a      	ldr	r2, [r7, #4]
 8015c00:	4611      	mov	r1, r2
 8015c02:	4618      	mov	r0, r3
 8015c04:	f001 f98a 	bl	8016f1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c0a:	f000 fc6a 	bl	80164e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015c0e:	f000 ffb3 	bl	8016b78 <xTaskResumeAll>
 8015c12:	4603      	mov	r3, r0
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	f47f af7c 	bne.w	8015b12 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8015c1a:	4b0c      	ldr	r3, [pc, #48]	; (8015c4c <xQueueGenericSend+0x1f0>)
 8015c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c20:	601a      	str	r2, [r3, #0]
 8015c22:	f3bf 8f4f 	dsb	sy
 8015c26:	f3bf 8f6f 	isb	sy
 8015c2a:	e772      	b.n	8015b12 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c2e:	f000 fc58 	bl	80164e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015c32:	f000 ffa1 	bl	8016b78 <xTaskResumeAll>
 8015c36:	e76c      	b.n	8015b12 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c3a:	f000 fc52 	bl	80164e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c3e:	f000 ff9b 	bl	8016b78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015c42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3738      	adds	r7, #56	; 0x38
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}
 8015c4c:	e000ed04 	.word	0xe000ed04

08015c50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b08e      	sub	sp, #56	; 0x38
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	607a      	str	r2, [r7, #4]
 8015c5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d109      	bne.n	8015c7c <xQueueGenericSendFromISR+0x2c>
 8015c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c6c:	f383 8811 	msr	BASEPRI, r3
 8015c70:	f3bf 8f6f 	isb	sy
 8015c74:	f3bf 8f4f 	dsb	sy
 8015c78:	627b      	str	r3, [r7, #36]	; 0x24
 8015c7a:	e7fe      	b.n	8015c7a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d103      	bne.n	8015c8a <xQueueGenericSendFromISR+0x3a>
 8015c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d101      	bne.n	8015c8e <xQueueGenericSendFromISR+0x3e>
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	e000      	b.n	8015c90 <xQueueGenericSendFromISR+0x40>
 8015c8e:	2300      	movs	r3, #0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d109      	bne.n	8015ca8 <xQueueGenericSendFromISR+0x58>
 8015c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c98:	f383 8811 	msr	BASEPRI, r3
 8015c9c:	f3bf 8f6f 	isb	sy
 8015ca0:	f3bf 8f4f 	dsb	sy
 8015ca4:	623b      	str	r3, [r7, #32]
 8015ca6:	e7fe      	b.n	8015ca6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	2b02      	cmp	r3, #2
 8015cac:	d103      	bne.n	8015cb6 <xQueueGenericSendFromISR+0x66>
 8015cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	d101      	bne.n	8015cba <xQueueGenericSendFromISR+0x6a>
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	e000      	b.n	8015cbc <xQueueGenericSendFromISR+0x6c>
 8015cba:	2300      	movs	r3, #0
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d109      	bne.n	8015cd4 <xQueueGenericSendFromISR+0x84>
 8015cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc4:	f383 8811 	msr	BASEPRI, r3
 8015cc8:	f3bf 8f6f 	isb	sy
 8015ccc:	f3bf 8f4f 	dsb	sy
 8015cd0:	61fb      	str	r3, [r7, #28]
 8015cd2:	e7fe      	b.n	8015cd2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015cd4:	f002 faa6 	bl	8018224 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015cd8:	f3ef 8211 	mrs	r2, BASEPRI
 8015cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce0:	f383 8811 	msr	BASEPRI, r3
 8015ce4:	f3bf 8f6f 	isb	sy
 8015ce8:	f3bf 8f4f 	dsb	sy
 8015cec:	61ba      	str	r2, [r7, #24]
 8015cee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015cf0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d302      	bcc.n	8015d06 <xQueueGenericSendFromISR+0xb6>
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	2b02      	cmp	r3, #2
 8015d04:	d12c      	bne.n	8015d60 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d10:	683a      	ldr	r2, [r7, #0]
 8015d12:	68b9      	ldr	r1, [r7, #8]
 8015d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d16:	f000 fb54 	bl	80163c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015d1a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d22:	d112      	bne.n	8015d4a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d016      	beq.n	8015d5a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d2e:	3324      	adds	r3, #36	; 0x24
 8015d30:	4618      	mov	r0, r3
 8015d32:	f001 f941 	bl	8016fb8 <xTaskRemoveFromEventList>
 8015d36:	4603      	mov	r3, r0
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d00e      	beq.n	8015d5a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d00b      	beq.n	8015d5a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2201      	movs	r2, #1
 8015d46:	601a      	str	r2, [r3, #0]
 8015d48:	e007      	b.n	8015d5a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015d4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015d4e:	3301      	adds	r3, #1
 8015d50:	b2db      	uxtb	r3, r3
 8015d52:	b25a      	sxtb	r2, r3
 8015d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015d5e:	e001      	b.n	8015d64 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015d60:	2300      	movs	r3, #0
 8015d62:	637b      	str	r3, [r7, #52]	; 0x34
 8015d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d66:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3738      	adds	r7, #56	; 0x38
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}

08015d78 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b08e      	sub	sp, #56	; 0x38
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d109      	bne.n	8015da0 <xQueueGiveFromISR+0x28>
	__asm volatile
 8015d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d90:	f383 8811 	msr	BASEPRI, r3
 8015d94:	f3bf 8f6f 	isb	sy
 8015d98:	f3bf 8f4f 	dsb	sy
 8015d9c:	623b      	str	r3, [r7, #32]
 8015d9e:	e7fe      	b.n	8015d9e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d009      	beq.n	8015dbc <xQueueGiveFromISR+0x44>
 8015da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dac:	f383 8811 	msr	BASEPRI, r3
 8015db0:	f3bf 8f6f 	isb	sy
 8015db4:	f3bf 8f4f 	dsb	sy
 8015db8:	61fb      	str	r3, [r7, #28]
 8015dba:	e7fe      	b.n	8015dba <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d103      	bne.n	8015dcc <xQueueGiveFromISR+0x54>
 8015dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc6:	689b      	ldr	r3, [r3, #8]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d101      	bne.n	8015dd0 <xQueueGiveFromISR+0x58>
 8015dcc:	2301      	movs	r3, #1
 8015dce:	e000      	b.n	8015dd2 <xQueueGiveFromISR+0x5a>
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d109      	bne.n	8015dea <xQueueGiveFromISR+0x72>
 8015dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dda:	f383 8811 	msr	BASEPRI, r3
 8015dde:	f3bf 8f6f 	isb	sy
 8015de2:	f3bf 8f4f 	dsb	sy
 8015de6:	61bb      	str	r3, [r7, #24]
 8015de8:	e7fe      	b.n	8015de8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015dea:	f002 fa1b 	bl	8018224 <vPortValidateInterruptPriority>
	__asm volatile
 8015dee:	f3ef 8211 	mrs	r2, BASEPRI
 8015df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df6:	f383 8811 	msr	BASEPRI, r3
 8015dfa:	f3bf 8f6f 	isb	sy
 8015dfe:	f3bf 8f4f 	dsb	sy
 8015e02:	617a      	str	r2, [r7, #20]
 8015e04:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015e06:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015e08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e16:	429a      	cmp	r2, r3
 8015e18:	d22b      	bcs.n	8015e72 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e26:	1c5a      	adds	r2, r3, #1
 8015e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e34:	d112      	bne.n	8015e5c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d016      	beq.n	8015e6c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e40:	3324      	adds	r3, #36	; 0x24
 8015e42:	4618      	mov	r0, r3
 8015e44:	f001 f8b8 	bl	8016fb8 <xTaskRemoveFromEventList>
 8015e48:	4603      	mov	r3, r0
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d00e      	beq.n	8015e6c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d00b      	beq.n	8015e6c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	2201      	movs	r2, #1
 8015e58:	601a      	str	r2, [r3, #0]
 8015e5a:	e007      	b.n	8015e6c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e60:	3301      	adds	r3, #1
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	b25a      	sxtb	r2, r3
 8015e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015e6c:	2301      	movs	r3, #1
 8015e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8015e70:	e001      	b.n	8015e76 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015e72:	2300      	movs	r3, #0
 8015e74:	637b      	str	r3, [r7, #52]	; 0x34
 8015e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e78:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	3738      	adds	r7, #56	; 0x38
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}
	...

08015e8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b08c      	sub	sp, #48	; 0x30
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	60f8      	str	r0, [r7, #12]
 8015e94:	60b9      	str	r1, [r7, #8]
 8015e96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d109      	bne.n	8015eba <xQueueReceive+0x2e>
	__asm volatile
 8015ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eaa:	f383 8811 	msr	BASEPRI, r3
 8015eae:	f3bf 8f6f 	isb	sy
 8015eb2:	f3bf 8f4f 	dsb	sy
 8015eb6:	623b      	str	r3, [r7, #32]
 8015eb8:	e7fe      	b.n	8015eb8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d103      	bne.n	8015ec8 <xQueueReceive+0x3c>
 8015ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d101      	bne.n	8015ecc <xQueueReceive+0x40>
 8015ec8:	2301      	movs	r3, #1
 8015eca:	e000      	b.n	8015ece <xQueueReceive+0x42>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d109      	bne.n	8015ee6 <xQueueReceive+0x5a>
 8015ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ed6:	f383 8811 	msr	BASEPRI, r3
 8015eda:	f3bf 8f6f 	isb	sy
 8015ede:	f3bf 8f4f 	dsb	sy
 8015ee2:	61fb      	str	r3, [r7, #28]
 8015ee4:	e7fe      	b.n	8015ee4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015ee6:	f001 fa1d 	bl	8017324 <xTaskGetSchedulerState>
 8015eea:	4603      	mov	r3, r0
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d102      	bne.n	8015ef6 <xQueueReceive+0x6a>
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d101      	bne.n	8015efa <xQueueReceive+0x6e>
 8015ef6:	2301      	movs	r3, #1
 8015ef8:	e000      	b.n	8015efc <xQueueReceive+0x70>
 8015efa:	2300      	movs	r3, #0
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d109      	bne.n	8015f14 <xQueueReceive+0x88>
 8015f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f04:	f383 8811 	msr	BASEPRI, r3
 8015f08:	f3bf 8f6f 	isb	sy
 8015f0c:	f3bf 8f4f 	dsb	sy
 8015f10:	61bb      	str	r3, [r7, #24]
 8015f12:	e7fe      	b.n	8015f12 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015f14:	f002 f8aa 	bl	801806c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f1c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d01f      	beq.n	8015f64 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015f24:	68b9      	ldr	r1, [r7, #8]
 8015f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f28:	f000 fab5 	bl	8016496 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f2e:	1e5a      	subs	r2, r3, #1
 8015f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f32:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f36:	691b      	ldr	r3, [r3, #16]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d00f      	beq.n	8015f5c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3e:	3310      	adds	r3, #16
 8015f40:	4618      	mov	r0, r3
 8015f42:	f001 f839 	bl	8016fb8 <xTaskRemoveFromEventList>
 8015f46:	4603      	mov	r3, r0
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d007      	beq.n	8015f5c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015f4c:	4b3c      	ldr	r3, [pc, #240]	; (8016040 <xQueueReceive+0x1b4>)
 8015f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f52:	601a      	str	r2, [r3, #0]
 8015f54:	f3bf 8f4f 	dsb	sy
 8015f58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015f5c:	f002 f8b4 	bl	80180c8 <vPortExitCritical>
				return pdPASS;
 8015f60:	2301      	movs	r3, #1
 8015f62:	e069      	b.n	8016038 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d103      	bne.n	8015f72 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015f6a:	f002 f8ad 	bl	80180c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	e062      	b.n	8016038 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d106      	bne.n	8015f86 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015f78:	f107 0310 	add.w	r3, r7, #16
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f001 f87d 	bl	801707c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015f82:	2301      	movs	r3, #1
 8015f84:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015f86:	f002 f89f 	bl	80180c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015f8a:	f000 fde7 	bl	8016b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015f8e:	f002 f86d 	bl	801806c <vPortEnterCritical>
 8015f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015f98:	b25b      	sxtb	r3, r3
 8015f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f9e:	d103      	bne.n	8015fa8 <xQueueReceive+0x11c>
 8015fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fae:	b25b      	sxtb	r3, r3
 8015fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fb4:	d103      	bne.n	8015fbe <xQueueReceive+0x132>
 8015fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb8:	2200      	movs	r2, #0
 8015fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015fbe:	f002 f883 	bl	80180c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015fc2:	1d3a      	adds	r2, r7, #4
 8015fc4:	f107 0310 	add.w	r3, r7, #16
 8015fc8:	4611      	mov	r1, r2
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f001 f86c 	bl	80170a8 <xTaskCheckForTimeOut>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d123      	bne.n	801601e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fd8:	f000 fad5 	bl	8016586 <prvIsQueueEmpty>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d017      	beq.n	8016012 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe4:	3324      	adds	r3, #36	; 0x24
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	4611      	mov	r1, r2
 8015fea:	4618      	mov	r0, r3
 8015fec:	f000 ff96 	bl	8016f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ff2:	f000 fa76 	bl	80164e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015ff6:	f000 fdbf 	bl	8016b78 <xTaskResumeAll>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d189      	bne.n	8015f14 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8016000:	4b0f      	ldr	r3, [pc, #60]	; (8016040 <xQueueReceive+0x1b4>)
 8016002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016006:	601a      	str	r2, [r3, #0]
 8016008:	f3bf 8f4f 	dsb	sy
 801600c:	f3bf 8f6f 	isb	sy
 8016010:	e780      	b.n	8015f14 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016014:	f000 fa65 	bl	80164e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016018:	f000 fdae 	bl	8016b78 <xTaskResumeAll>
 801601c:	e77a      	b.n	8015f14 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801601e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016020:	f000 fa5f 	bl	80164e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016024:	f000 fda8 	bl	8016b78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801602a:	f000 faac 	bl	8016586 <prvIsQueueEmpty>
 801602e:	4603      	mov	r3, r0
 8016030:	2b00      	cmp	r3, #0
 8016032:	f43f af6f 	beq.w	8015f14 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016036:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016038:	4618      	mov	r0, r3
 801603a:	3730      	adds	r7, #48	; 0x30
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}
 8016040:	e000ed04 	.word	0xe000ed04

08016044 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b08e      	sub	sp, #56	; 0x38
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801604e:	2300      	movs	r3, #0
 8016050:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016056:	2300      	movs	r3, #0
 8016058:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801605c:	2b00      	cmp	r3, #0
 801605e:	d109      	bne.n	8016074 <xQueueSemaphoreTake+0x30>
 8016060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016064:	f383 8811 	msr	BASEPRI, r3
 8016068:	f3bf 8f6f 	isb	sy
 801606c:	f3bf 8f4f 	dsb	sy
 8016070:	623b      	str	r3, [r7, #32]
 8016072:	e7fe      	b.n	8016072 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016078:	2b00      	cmp	r3, #0
 801607a:	d009      	beq.n	8016090 <xQueueSemaphoreTake+0x4c>
 801607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016080:	f383 8811 	msr	BASEPRI, r3
 8016084:	f3bf 8f6f 	isb	sy
 8016088:	f3bf 8f4f 	dsb	sy
 801608c:	61fb      	str	r3, [r7, #28]
 801608e:	e7fe      	b.n	801608e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016090:	f001 f948 	bl	8017324 <xTaskGetSchedulerState>
 8016094:	4603      	mov	r3, r0
 8016096:	2b00      	cmp	r3, #0
 8016098:	d102      	bne.n	80160a0 <xQueueSemaphoreTake+0x5c>
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d101      	bne.n	80160a4 <xQueueSemaphoreTake+0x60>
 80160a0:	2301      	movs	r3, #1
 80160a2:	e000      	b.n	80160a6 <xQueueSemaphoreTake+0x62>
 80160a4:	2300      	movs	r3, #0
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d109      	bne.n	80160be <xQueueSemaphoreTake+0x7a>
 80160aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ae:	f383 8811 	msr	BASEPRI, r3
 80160b2:	f3bf 8f6f 	isb	sy
 80160b6:	f3bf 8f4f 	dsb	sy
 80160ba:	61bb      	str	r3, [r7, #24]
 80160bc:	e7fe      	b.n	80160bc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80160be:	f001 ffd5 	bl	801806c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80160c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160c6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80160c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d024      	beq.n	8016118 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80160ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d0:	1e5a      	subs	r2, r3, #1
 80160d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80160d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d104      	bne.n	80160e8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80160de:	f001 fa93 	bl	8017608 <pvTaskIncrementMutexHeldCount>
 80160e2:	4602      	mov	r2, r0
 80160e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80160e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ea:	691b      	ldr	r3, [r3, #16]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d00f      	beq.n	8016110 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80160f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f2:	3310      	adds	r3, #16
 80160f4:	4618      	mov	r0, r3
 80160f6:	f000 ff5f 	bl	8016fb8 <xTaskRemoveFromEventList>
 80160fa:	4603      	mov	r3, r0
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d007      	beq.n	8016110 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016100:	4b53      	ldr	r3, [pc, #332]	; (8016250 <xQueueSemaphoreTake+0x20c>)
 8016102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016106:	601a      	str	r2, [r3, #0]
 8016108:	f3bf 8f4f 	dsb	sy
 801610c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016110:	f001 ffda 	bl	80180c8 <vPortExitCritical>
				return pdPASS;
 8016114:	2301      	movs	r3, #1
 8016116:	e096      	b.n	8016246 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d110      	bne.n	8016140 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016120:	2b00      	cmp	r3, #0
 8016122:	d009      	beq.n	8016138 <xQueueSemaphoreTake+0xf4>
 8016124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016128:	f383 8811 	msr	BASEPRI, r3
 801612c:	f3bf 8f6f 	isb	sy
 8016130:	f3bf 8f4f 	dsb	sy
 8016134:	617b      	str	r3, [r7, #20]
 8016136:	e7fe      	b.n	8016136 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016138:	f001 ffc6 	bl	80180c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801613c:	2300      	movs	r3, #0
 801613e:	e082      	b.n	8016246 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016142:	2b00      	cmp	r3, #0
 8016144:	d106      	bne.n	8016154 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016146:	f107 030c 	add.w	r3, r7, #12
 801614a:	4618      	mov	r0, r3
 801614c:	f000 ff96 	bl	801707c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016150:	2301      	movs	r3, #1
 8016152:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016154:	f001 ffb8 	bl	80180c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016158:	f000 fd00 	bl	8016b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801615c:	f001 ff86 	bl	801806c <vPortEnterCritical>
 8016160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016166:	b25b      	sxtb	r3, r3
 8016168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801616c:	d103      	bne.n	8016176 <xQueueSemaphoreTake+0x132>
 801616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016170:	2200      	movs	r2, #0
 8016172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801617c:	b25b      	sxtb	r3, r3
 801617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016182:	d103      	bne.n	801618c <xQueueSemaphoreTake+0x148>
 8016184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016186:	2200      	movs	r2, #0
 8016188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801618c:	f001 ff9c 	bl	80180c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016190:	463a      	mov	r2, r7
 8016192:	f107 030c 	add.w	r3, r7, #12
 8016196:	4611      	mov	r1, r2
 8016198:	4618      	mov	r0, r3
 801619a:	f000 ff85 	bl	80170a8 <xTaskCheckForTimeOut>
 801619e:	4603      	mov	r3, r0
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d132      	bne.n	801620a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80161a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80161a6:	f000 f9ee 	bl	8016586 <prvIsQueueEmpty>
 80161aa:	4603      	mov	r3, r0
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d026      	beq.n	80161fe <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80161b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d109      	bne.n	80161cc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80161b8:	f001 ff58 	bl	801806c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80161bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161be:	689b      	ldr	r3, [r3, #8]
 80161c0:	4618      	mov	r0, r3
 80161c2:	f001 f8cd 	bl	8017360 <xTaskPriorityInherit>
 80161c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80161c8:	f001 ff7e 	bl	80180c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80161cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ce:	3324      	adds	r3, #36	; 0x24
 80161d0:	683a      	ldr	r2, [r7, #0]
 80161d2:	4611      	mov	r1, r2
 80161d4:	4618      	mov	r0, r3
 80161d6:	f000 fea1 	bl	8016f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80161da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80161dc:	f000 f981 	bl	80164e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80161e0:	f000 fcca 	bl	8016b78 <xTaskResumeAll>
 80161e4:	4603      	mov	r3, r0
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	f47f af69 	bne.w	80160be <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80161ec:	4b18      	ldr	r3, [pc, #96]	; (8016250 <xQueueSemaphoreTake+0x20c>)
 80161ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161f2:	601a      	str	r2, [r3, #0]
 80161f4:	f3bf 8f4f 	dsb	sy
 80161f8:	f3bf 8f6f 	isb	sy
 80161fc:	e75f      	b.n	80160be <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80161fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016200:	f000 f96f 	bl	80164e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016204:	f000 fcb8 	bl	8016b78 <xTaskResumeAll>
 8016208:	e759      	b.n	80160be <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801620a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801620c:	f000 f969 	bl	80164e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016210:	f000 fcb2 	bl	8016b78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016216:	f000 f9b6 	bl	8016586 <prvIsQueueEmpty>
 801621a:	4603      	mov	r3, r0
 801621c:	2b00      	cmp	r3, #0
 801621e:	f43f af4e 	beq.w	80160be <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016224:	2b00      	cmp	r3, #0
 8016226:	d00d      	beq.n	8016244 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8016228:	f001 ff20 	bl	801806c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801622c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801622e:	f000 f8b0 	bl	8016392 <prvGetDisinheritPriorityAfterTimeout>
 8016232:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016236:	689b      	ldr	r3, [r3, #8]
 8016238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801623a:	4618      	mov	r0, r3
 801623c:	f001 f964 	bl	8017508 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016240:	f001 ff42 	bl	80180c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016246:	4618      	mov	r0, r3
 8016248:	3738      	adds	r7, #56	; 0x38
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	e000ed04 	.word	0xe000ed04

08016254 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b08e      	sub	sp, #56	; 0x38
 8016258:	af00      	add	r7, sp, #0
 801625a:	60f8      	str	r0, [r7, #12]
 801625c:	60b9      	str	r1, [r7, #8]
 801625e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016266:	2b00      	cmp	r3, #0
 8016268:	d109      	bne.n	801627e <xQueueReceiveFromISR+0x2a>
 801626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801626e:	f383 8811 	msr	BASEPRI, r3
 8016272:	f3bf 8f6f 	isb	sy
 8016276:	f3bf 8f4f 	dsb	sy
 801627a:	623b      	str	r3, [r7, #32]
 801627c:	e7fe      	b.n	801627c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d103      	bne.n	801628c <xQueueReceiveFromISR+0x38>
 8016284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016288:	2b00      	cmp	r3, #0
 801628a:	d101      	bne.n	8016290 <xQueueReceiveFromISR+0x3c>
 801628c:	2301      	movs	r3, #1
 801628e:	e000      	b.n	8016292 <xQueueReceiveFromISR+0x3e>
 8016290:	2300      	movs	r3, #0
 8016292:	2b00      	cmp	r3, #0
 8016294:	d109      	bne.n	80162aa <xQueueReceiveFromISR+0x56>
 8016296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801629a:	f383 8811 	msr	BASEPRI, r3
 801629e:	f3bf 8f6f 	isb	sy
 80162a2:	f3bf 8f4f 	dsb	sy
 80162a6:	61fb      	str	r3, [r7, #28]
 80162a8:	e7fe      	b.n	80162a8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80162aa:	f001 ffbb 	bl	8018224 <vPortValidateInterruptPriority>
	__asm volatile
 80162ae:	f3ef 8211 	mrs	r2, BASEPRI
 80162b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b6:	f383 8811 	msr	BASEPRI, r3
 80162ba:	f3bf 8f6f 	isb	sy
 80162be:	f3bf 8f4f 	dsb	sy
 80162c2:	61ba      	str	r2, [r7, #24]
 80162c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80162c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80162c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80162ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80162d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d02f      	beq.n	8016336 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80162d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80162dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80162e0:	68b9      	ldr	r1, [r7, #8]
 80162e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162e4:	f000 f8d7 	bl	8016496 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80162e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ea:	1e5a      	subs	r2, r3, #1
 80162ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80162f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80162f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162f8:	d112      	bne.n	8016320 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80162fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fc:	691b      	ldr	r3, [r3, #16]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d016      	beq.n	8016330 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016304:	3310      	adds	r3, #16
 8016306:	4618      	mov	r0, r3
 8016308:	f000 fe56 	bl	8016fb8 <xTaskRemoveFromEventList>
 801630c:	4603      	mov	r3, r0
 801630e:	2b00      	cmp	r3, #0
 8016310:	d00e      	beq.n	8016330 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d00b      	beq.n	8016330 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2201      	movs	r2, #1
 801631c:	601a      	str	r2, [r3, #0]
 801631e:	e007      	b.n	8016330 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016324:	3301      	adds	r3, #1
 8016326:	b2db      	uxtb	r3, r3
 8016328:	b25a      	sxtb	r2, r3
 801632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801632c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016330:	2301      	movs	r3, #1
 8016332:	637b      	str	r3, [r7, #52]	; 0x34
 8016334:	e001      	b.n	801633a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8016336:	2300      	movs	r3, #0
 8016338:	637b      	str	r3, [r7, #52]	; 0x34
 801633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801633e:	693b      	ldr	r3, [r7, #16]
 8016340:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016346:	4618      	mov	r0, r3
 8016348:	3738      	adds	r7, #56	; 0x38
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}

0801634e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801634e:	b580      	push	{r7, lr}
 8016350:	b084      	sub	sp, #16
 8016352:	af00      	add	r7, sp, #0
 8016354:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d109      	bne.n	8016374 <vQueueDelete+0x26>
	__asm volatile
 8016360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016364:	f383 8811 	msr	BASEPRI, r3
 8016368:	f3bf 8f6f 	isb	sy
 801636c:	f3bf 8f4f 	dsb	sy
 8016370:	60bb      	str	r3, [r7, #8]
 8016372:	e7fe      	b.n	8016372 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016374:	68f8      	ldr	r0, [r7, #12]
 8016376:	f000 f95d 	bl	8016634 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016380:	2b00      	cmp	r3, #0
 8016382:	d102      	bne.n	801638a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8016384:	68f8      	ldr	r0, [r7, #12]
 8016386:	f002 f84d 	bl	8018424 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801638a:	bf00      	nop
 801638c:	3710      	adds	r7, #16
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}

08016392 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016392:	b480      	push	{r7}
 8016394:	b085      	sub	sp, #20
 8016396:	af00      	add	r7, sp, #0
 8016398:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d006      	beq.n	80163b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80163ac:	60fb      	str	r3, [r7, #12]
 80163ae:	e001      	b.n	80163b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80163b0:	2300      	movs	r3, #0
 80163b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80163b4:	68fb      	ldr	r3, [r7, #12]
	}
 80163b6:	4618      	mov	r0, r3
 80163b8:	3714      	adds	r7, #20
 80163ba:	46bd      	mov	sp, r7
 80163bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c0:	4770      	bx	lr

080163c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80163c2:	b580      	push	{r7, lr}
 80163c4:	b086      	sub	sp, #24
 80163c6:	af00      	add	r7, sp, #0
 80163c8:	60f8      	str	r0, [r7, #12]
 80163ca:	60b9      	str	r1, [r7, #8]
 80163cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80163ce:	2300      	movs	r3, #0
 80163d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d10d      	bne.n	80163fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d14d      	bne.n	8016484 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	689b      	ldr	r3, [r3, #8]
 80163ec:	4618      	mov	r0, r3
 80163ee:	f001 f81f 	bl	8017430 <xTaskPriorityDisinherit>
 80163f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2200      	movs	r2, #0
 80163f8:	609a      	str	r2, [r3, #8]
 80163fa:	e043      	b.n	8016484 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d119      	bne.n	8016436 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	6858      	ldr	r0, [r3, #4]
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801640a:	461a      	mov	r2, r3
 801640c:	68b9      	ldr	r1, [r7, #8]
 801640e:	f003 fa27 	bl	8019860 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	685a      	ldr	r2, [r3, #4]
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801641a:	441a      	add	r2, r3
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	685a      	ldr	r2, [r3, #4]
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	689b      	ldr	r3, [r3, #8]
 8016428:	429a      	cmp	r2, r3
 801642a:	d32b      	bcc.n	8016484 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	681a      	ldr	r2, [r3, #0]
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	605a      	str	r2, [r3, #4]
 8016434:	e026      	b.n	8016484 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	68d8      	ldr	r0, [r3, #12]
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801643e:	461a      	mov	r2, r3
 8016440:	68b9      	ldr	r1, [r7, #8]
 8016442:	f003 fa0d 	bl	8019860 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	68da      	ldr	r2, [r3, #12]
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801644e:	425b      	negs	r3, r3
 8016450:	441a      	add	r2, r3
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	68da      	ldr	r2, [r3, #12]
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	429a      	cmp	r2, r3
 8016460:	d207      	bcs.n	8016472 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	689a      	ldr	r2, [r3, #8]
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801646a:	425b      	negs	r3, r3
 801646c:	441a      	add	r2, r3
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	2b02      	cmp	r3, #2
 8016476:	d105      	bne.n	8016484 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016478:	693b      	ldr	r3, [r7, #16]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d002      	beq.n	8016484 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	3b01      	subs	r3, #1
 8016482:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	1c5a      	adds	r2, r3, #1
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801648c:	697b      	ldr	r3, [r7, #20]
}
 801648e:	4618      	mov	r0, r3
 8016490:	3718      	adds	r7, #24
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}

08016496 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016496:	b580      	push	{r7, lr}
 8016498:	b082      	sub	sp, #8
 801649a:	af00      	add	r7, sp, #0
 801649c:	6078      	str	r0, [r7, #4]
 801649e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d018      	beq.n	80164da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	68da      	ldr	r2, [r3, #12]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164b0:	441a      	add	r2, r3
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	68da      	ldr	r2, [r3, #12]
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	689b      	ldr	r3, [r3, #8]
 80164be:	429a      	cmp	r2, r3
 80164c0:	d303      	bcc.n	80164ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681a      	ldr	r2, [r3, #0]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	68d9      	ldr	r1, [r3, #12]
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164d2:	461a      	mov	r2, r3
 80164d4:	6838      	ldr	r0, [r7, #0]
 80164d6:	f003 f9c3 	bl	8019860 <memcpy>
	}
}
 80164da:	bf00      	nop
 80164dc:	3708      	adds	r7, #8
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}

080164e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80164e2:	b580      	push	{r7, lr}
 80164e4:	b084      	sub	sp, #16
 80164e6:	af00      	add	r7, sp, #0
 80164e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80164ea:	f001 fdbf 	bl	801806c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80164f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80164f6:	e011      	b.n	801651c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d012      	beq.n	8016526 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	3324      	adds	r3, #36	; 0x24
 8016504:	4618      	mov	r0, r3
 8016506:	f000 fd57 	bl	8016fb8 <xTaskRemoveFromEventList>
 801650a:	4603      	mov	r3, r0
 801650c:	2b00      	cmp	r3, #0
 801650e:	d001      	beq.n	8016514 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016510:	f000 fe2a 	bl	8017168 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016514:	7bfb      	ldrb	r3, [r7, #15]
 8016516:	3b01      	subs	r3, #1
 8016518:	b2db      	uxtb	r3, r3
 801651a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801651c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016520:	2b00      	cmp	r3, #0
 8016522:	dce9      	bgt.n	80164f8 <prvUnlockQueue+0x16>
 8016524:	e000      	b.n	8016528 <prvUnlockQueue+0x46>
					break;
 8016526:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	22ff      	movs	r2, #255	; 0xff
 801652c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016530:	f001 fdca 	bl	80180c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016534:	f001 fd9a 	bl	801806c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801653e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016540:	e011      	b.n	8016566 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	691b      	ldr	r3, [r3, #16]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d012      	beq.n	8016570 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	3310      	adds	r3, #16
 801654e:	4618      	mov	r0, r3
 8016550:	f000 fd32 	bl	8016fb8 <xTaskRemoveFromEventList>
 8016554:	4603      	mov	r3, r0
 8016556:	2b00      	cmp	r3, #0
 8016558:	d001      	beq.n	801655e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801655a:	f000 fe05 	bl	8017168 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801655e:	7bbb      	ldrb	r3, [r7, #14]
 8016560:	3b01      	subs	r3, #1
 8016562:	b2db      	uxtb	r3, r3
 8016564:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801656a:	2b00      	cmp	r3, #0
 801656c:	dce9      	bgt.n	8016542 <prvUnlockQueue+0x60>
 801656e:	e000      	b.n	8016572 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016570:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	22ff      	movs	r2, #255	; 0xff
 8016576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801657a:	f001 fda5 	bl	80180c8 <vPortExitCritical>
}
 801657e:	bf00      	nop
 8016580:	3710      	adds	r7, #16
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}

08016586 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016586:	b580      	push	{r7, lr}
 8016588:	b084      	sub	sp, #16
 801658a:	af00      	add	r7, sp, #0
 801658c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801658e:	f001 fd6d 	bl	801806c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016596:	2b00      	cmp	r3, #0
 8016598:	d102      	bne.n	80165a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801659a:	2301      	movs	r3, #1
 801659c:	60fb      	str	r3, [r7, #12]
 801659e:	e001      	b.n	80165a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80165a0:	2300      	movs	r3, #0
 80165a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80165a4:	f001 fd90 	bl	80180c8 <vPortExitCritical>

	return xReturn;
 80165a8:	68fb      	ldr	r3, [r7, #12]
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3710      	adds	r7, #16
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}

080165b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80165b2:	b580      	push	{r7, lr}
 80165b4:	b084      	sub	sp, #16
 80165b6:	af00      	add	r7, sp, #0
 80165b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80165ba:	f001 fd57 	bl	801806c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d102      	bne.n	80165d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80165ca:	2301      	movs	r3, #1
 80165cc:	60fb      	str	r3, [r7, #12]
 80165ce:	e001      	b.n	80165d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80165d0:	2300      	movs	r3, #0
 80165d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80165d4:	f001 fd78 	bl	80180c8 <vPortExitCritical>

	return xReturn;
 80165d8:	68fb      	ldr	r3, [r7, #12]
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3710      	adds	r7, #16
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}
	...

080165e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80165e4:	b480      	push	{r7}
 80165e6:	b085      	sub	sp, #20
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80165ee:	2300      	movs	r3, #0
 80165f0:	60fb      	str	r3, [r7, #12]
 80165f2:	e014      	b.n	801661e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80165f4:	4a0e      	ldr	r2, [pc, #56]	; (8016630 <vQueueAddToRegistry+0x4c>)
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d10b      	bne.n	8016618 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016600:	490b      	ldr	r1, [pc, #44]	; (8016630 <vQueueAddToRegistry+0x4c>)
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	683a      	ldr	r2, [r7, #0]
 8016606:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801660a:	4a09      	ldr	r2, [pc, #36]	; (8016630 <vQueueAddToRegistry+0x4c>)
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	00db      	lsls	r3, r3, #3
 8016610:	4413      	add	r3, r2
 8016612:	687a      	ldr	r2, [r7, #4]
 8016614:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016616:	e005      	b.n	8016624 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	3301      	adds	r3, #1
 801661c:	60fb      	str	r3, [r7, #12]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2b07      	cmp	r3, #7
 8016622:	d9e7      	bls.n	80165f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016624:	bf00      	nop
 8016626:	3714      	adds	r7, #20
 8016628:	46bd      	mov	sp, r7
 801662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662e:	4770      	bx	lr
 8016630:	20007d8c 	.word	0x20007d8c

08016634 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016634:	b480      	push	{r7}
 8016636:	b085      	sub	sp, #20
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801663c:	2300      	movs	r3, #0
 801663e:	60fb      	str	r3, [r7, #12]
 8016640:	e016      	b.n	8016670 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016642:	4a10      	ldr	r2, [pc, #64]	; (8016684 <vQueueUnregisterQueue+0x50>)
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	00db      	lsls	r3, r3, #3
 8016648:	4413      	add	r3, r2
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	687a      	ldr	r2, [r7, #4]
 801664e:	429a      	cmp	r2, r3
 8016650:	d10b      	bne.n	801666a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016652:	4a0c      	ldr	r2, [pc, #48]	; (8016684 <vQueueUnregisterQueue+0x50>)
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	2100      	movs	r1, #0
 8016658:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801665c:	4a09      	ldr	r2, [pc, #36]	; (8016684 <vQueueUnregisterQueue+0x50>)
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	00db      	lsls	r3, r3, #3
 8016662:	4413      	add	r3, r2
 8016664:	2200      	movs	r2, #0
 8016666:	605a      	str	r2, [r3, #4]
				break;
 8016668:	e005      	b.n	8016676 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	3301      	adds	r3, #1
 801666e:	60fb      	str	r3, [r7, #12]
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	2b07      	cmp	r3, #7
 8016674:	d9e5      	bls.n	8016642 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016676:	bf00      	nop
 8016678:	3714      	adds	r7, #20
 801667a:	46bd      	mov	sp, r7
 801667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016680:	4770      	bx	lr
 8016682:	bf00      	nop
 8016684:	20007d8c 	.word	0x20007d8c

08016688 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016688:	b580      	push	{r7, lr}
 801668a:	b086      	sub	sp, #24
 801668c:	af00      	add	r7, sp, #0
 801668e:	60f8      	str	r0, [r7, #12]
 8016690:	60b9      	str	r1, [r7, #8]
 8016692:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016698:	f001 fce8 	bl	801806c <vPortEnterCritical>
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80166a2:	b25b      	sxtb	r3, r3
 80166a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166a8:	d103      	bne.n	80166b2 <vQueueWaitForMessageRestricted+0x2a>
 80166aa:	697b      	ldr	r3, [r7, #20]
 80166ac:	2200      	movs	r2, #0
 80166ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80166b8:	b25b      	sxtb	r3, r3
 80166ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166be:	d103      	bne.n	80166c8 <vQueueWaitForMessageRestricted+0x40>
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	2200      	movs	r2, #0
 80166c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80166c8:	f001 fcfe 	bl	80180c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d106      	bne.n	80166e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	3324      	adds	r3, #36	; 0x24
 80166d8:	687a      	ldr	r2, [r7, #4]
 80166da:	68b9      	ldr	r1, [r7, #8]
 80166dc:	4618      	mov	r0, r3
 80166de:	f000 fc41 	bl	8016f64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80166e2:	6978      	ldr	r0, [r7, #20]
 80166e4:	f7ff fefd 	bl	80164e2 <prvUnlockQueue>
	}
 80166e8:	bf00      	nop
 80166ea:	3718      	adds	r7, #24
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b08e      	sub	sp, #56	; 0x38
 80166f4:	af04      	add	r7, sp, #16
 80166f6:	60f8      	str	r0, [r7, #12]
 80166f8:	60b9      	str	r1, [r7, #8]
 80166fa:	607a      	str	r2, [r7, #4]
 80166fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80166fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016700:	2b00      	cmp	r3, #0
 8016702:	d109      	bne.n	8016718 <xTaskCreateStatic+0x28>
 8016704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016708:	f383 8811 	msr	BASEPRI, r3
 801670c:	f3bf 8f6f 	isb	sy
 8016710:	f3bf 8f4f 	dsb	sy
 8016714:	623b      	str	r3, [r7, #32]
 8016716:	e7fe      	b.n	8016716 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8016718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801671a:	2b00      	cmp	r3, #0
 801671c:	d109      	bne.n	8016732 <xTaskCreateStatic+0x42>
 801671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016722:	f383 8811 	msr	BASEPRI, r3
 8016726:	f3bf 8f6f 	isb	sy
 801672a:	f3bf 8f4f 	dsb	sy
 801672e:	61fb      	str	r3, [r7, #28]
 8016730:	e7fe      	b.n	8016730 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016732:	235c      	movs	r3, #92	; 0x5c
 8016734:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016736:	693b      	ldr	r3, [r7, #16]
 8016738:	2b5c      	cmp	r3, #92	; 0x5c
 801673a:	d009      	beq.n	8016750 <xTaskCreateStatic+0x60>
 801673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016740:	f383 8811 	msr	BASEPRI, r3
 8016744:	f3bf 8f6f 	isb	sy
 8016748:	f3bf 8f4f 	dsb	sy
 801674c:	61bb      	str	r3, [r7, #24]
 801674e:	e7fe      	b.n	801674e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016750:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016754:	2b00      	cmp	r3, #0
 8016756:	d01e      	beq.n	8016796 <xTaskCreateStatic+0xa6>
 8016758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801675a:	2b00      	cmp	r3, #0
 801675c:	d01b      	beq.n	8016796 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016760:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016766:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801676a:	2202      	movs	r2, #2
 801676c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016770:	2300      	movs	r3, #0
 8016772:	9303      	str	r3, [sp, #12]
 8016774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016776:	9302      	str	r3, [sp, #8]
 8016778:	f107 0314 	add.w	r3, r7, #20
 801677c:	9301      	str	r3, [sp, #4]
 801677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016780:	9300      	str	r3, [sp, #0]
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	687a      	ldr	r2, [r7, #4]
 8016786:	68b9      	ldr	r1, [r7, #8]
 8016788:	68f8      	ldr	r0, [r7, #12]
 801678a:	f000 f850 	bl	801682e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801678e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016790:	f000 f8dc 	bl	801694c <prvAddNewTaskToReadyList>
 8016794:	e001      	b.n	801679a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8016796:	2300      	movs	r3, #0
 8016798:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801679a:	697b      	ldr	r3, [r7, #20]
	}
 801679c:	4618      	mov	r0, r3
 801679e:	3728      	adds	r7, #40	; 0x28
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}

080167a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b08c      	sub	sp, #48	; 0x30
 80167a8:	af04      	add	r7, sp, #16
 80167aa:	60f8      	str	r0, [r7, #12]
 80167ac:	60b9      	str	r1, [r7, #8]
 80167ae:	603b      	str	r3, [r7, #0]
 80167b0:	4613      	mov	r3, r2
 80167b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80167b4:	88fb      	ldrh	r3, [r7, #6]
 80167b6:	009b      	lsls	r3, r3, #2
 80167b8:	4618      	mov	r0, r3
 80167ba:	f001 fd71 	bl	80182a0 <pvPortMalloc>
 80167be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00e      	beq.n	80167e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80167c6:	205c      	movs	r0, #92	; 0x5c
 80167c8:	f001 fd6a 	bl	80182a0 <pvPortMalloc>
 80167cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80167ce:	69fb      	ldr	r3, [r7, #28]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d003      	beq.n	80167dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80167d4:	69fb      	ldr	r3, [r7, #28]
 80167d6:	697a      	ldr	r2, [r7, #20]
 80167d8:	631a      	str	r2, [r3, #48]	; 0x30
 80167da:	e005      	b.n	80167e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80167dc:	6978      	ldr	r0, [r7, #20]
 80167de:	f001 fe21 	bl	8018424 <vPortFree>
 80167e2:	e001      	b.n	80167e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80167e4:	2300      	movs	r3, #0
 80167e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80167e8:	69fb      	ldr	r3, [r7, #28]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d017      	beq.n	801681e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	2200      	movs	r2, #0
 80167f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80167f6:	88fa      	ldrh	r2, [r7, #6]
 80167f8:	2300      	movs	r3, #0
 80167fa:	9303      	str	r3, [sp, #12]
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	9302      	str	r3, [sp, #8]
 8016800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016802:	9301      	str	r3, [sp, #4]
 8016804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016806:	9300      	str	r3, [sp, #0]
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	68b9      	ldr	r1, [r7, #8]
 801680c:	68f8      	ldr	r0, [r7, #12]
 801680e:	f000 f80e 	bl	801682e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016812:	69f8      	ldr	r0, [r7, #28]
 8016814:	f000 f89a 	bl	801694c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016818:	2301      	movs	r3, #1
 801681a:	61bb      	str	r3, [r7, #24]
 801681c:	e002      	b.n	8016824 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801681e:	f04f 33ff 	mov.w	r3, #4294967295
 8016822:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016824:	69bb      	ldr	r3, [r7, #24]
	}
 8016826:	4618      	mov	r0, r3
 8016828:	3720      	adds	r7, #32
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}

0801682e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801682e:	b580      	push	{r7, lr}
 8016830:	b088      	sub	sp, #32
 8016832:	af00      	add	r7, sp, #0
 8016834:	60f8      	str	r0, [r7, #12]
 8016836:	60b9      	str	r1, [r7, #8]
 8016838:	607a      	str	r2, [r7, #4]
 801683a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801683e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	009b      	lsls	r3, r3, #2
 8016844:	461a      	mov	r2, r3
 8016846:	21a5      	movs	r1, #165	; 0xa5
 8016848:	f003 f815 	bl	8019876 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801684e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016856:	3b01      	subs	r3, #1
 8016858:	009b      	lsls	r3, r3, #2
 801685a:	4413      	add	r3, r2
 801685c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801685e:	69bb      	ldr	r3, [r7, #24]
 8016860:	f023 0307 	bic.w	r3, r3, #7
 8016864:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016866:	69bb      	ldr	r3, [r7, #24]
 8016868:	f003 0307 	and.w	r3, r3, #7
 801686c:	2b00      	cmp	r3, #0
 801686e:	d009      	beq.n	8016884 <prvInitialiseNewTask+0x56>
 8016870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016874:	f383 8811 	msr	BASEPRI, r3
 8016878:	f3bf 8f6f 	isb	sy
 801687c:	f3bf 8f4f 	dsb	sy
 8016880:	617b      	str	r3, [r7, #20]
 8016882:	e7fe      	b.n	8016882 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016884:	68bb      	ldr	r3, [r7, #8]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d01f      	beq.n	80168ca <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801688a:	2300      	movs	r3, #0
 801688c:	61fb      	str	r3, [r7, #28]
 801688e:	e012      	b.n	80168b6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016890:	68ba      	ldr	r2, [r7, #8]
 8016892:	69fb      	ldr	r3, [r7, #28]
 8016894:	4413      	add	r3, r2
 8016896:	7819      	ldrb	r1, [r3, #0]
 8016898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801689a:	69fb      	ldr	r3, [r7, #28]
 801689c:	4413      	add	r3, r2
 801689e:	3334      	adds	r3, #52	; 0x34
 80168a0:	460a      	mov	r2, r1
 80168a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80168a4:	68ba      	ldr	r2, [r7, #8]
 80168a6:	69fb      	ldr	r3, [r7, #28]
 80168a8:	4413      	add	r3, r2
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d006      	beq.n	80168be <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	3301      	adds	r3, #1
 80168b4:	61fb      	str	r3, [r7, #28]
 80168b6:	69fb      	ldr	r3, [r7, #28]
 80168b8:	2b0f      	cmp	r3, #15
 80168ba:	d9e9      	bls.n	8016890 <prvInitialiseNewTask+0x62>
 80168bc:	e000      	b.n	80168c0 <prvInitialiseNewTask+0x92>
			{
				break;
 80168be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80168c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c2:	2200      	movs	r2, #0
 80168c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80168c8:	e003      	b.n	80168d2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80168ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168cc:	2200      	movs	r2, #0
 80168ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80168d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168d4:	2b37      	cmp	r3, #55	; 0x37
 80168d6:	d901      	bls.n	80168dc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80168d8:	2337      	movs	r3, #55	; 0x37
 80168da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80168dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80168e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80168e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ea:	2200      	movs	r2, #0
 80168ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80168ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f0:	3304      	adds	r3, #4
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7fe fe7a 	bl	80155ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80168f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fa:	3318      	adds	r3, #24
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7fe fe75 	bl	80155ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016906:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801690a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016910:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016916:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801691a:	2200      	movs	r2, #0
 801691c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016920:	2200      	movs	r2, #0
 8016922:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016926:	683a      	ldr	r2, [r7, #0]
 8016928:	68f9      	ldr	r1, [r7, #12]
 801692a:	69b8      	ldr	r0, [r7, #24]
 801692c:	f001 fa76 	bl	8017e1c <pxPortInitialiseStack>
 8016930:	4602      	mov	r2, r0
 8016932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016934:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016938:	2b00      	cmp	r3, #0
 801693a:	d002      	beq.n	8016942 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801693e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016942:	bf00      	nop
 8016944:	3720      	adds	r7, #32
 8016946:	46bd      	mov	sp, r7
 8016948:	bd80      	pop	{r7, pc}
	...

0801694c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016954:	f001 fb8a 	bl	801806c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016958:	4b2d      	ldr	r3, [pc, #180]	; (8016a10 <prvAddNewTaskToReadyList+0xc4>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	3301      	adds	r3, #1
 801695e:	4a2c      	ldr	r2, [pc, #176]	; (8016a10 <prvAddNewTaskToReadyList+0xc4>)
 8016960:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016962:	4b2c      	ldr	r3, [pc, #176]	; (8016a14 <prvAddNewTaskToReadyList+0xc8>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d109      	bne.n	801697e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801696a:	4a2a      	ldr	r2, [pc, #168]	; (8016a14 <prvAddNewTaskToReadyList+0xc8>)
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016970:	4b27      	ldr	r3, [pc, #156]	; (8016a10 <prvAddNewTaskToReadyList+0xc4>)
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	2b01      	cmp	r3, #1
 8016976:	d110      	bne.n	801699a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016978:	f000 fc1a 	bl	80171b0 <prvInitialiseTaskLists>
 801697c:	e00d      	b.n	801699a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801697e:	4b26      	ldr	r3, [pc, #152]	; (8016a18 <prvAddNewTaskToReadyList+0xcc>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d109      	bne.n	801699a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016986:	4b23      	ldr	r3, [pc, #140]	; (8016a14 <prvAddNewTaskToReadyList+0xc8>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016990:	429a      	cmp	r2, r3
 8016992:	d802      	bhi.n	801699a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016994:	4a1f      	ldr	r2, [pc, #124]	; (8016a14 <prvAddNewTaskToReadyList+0xc8>)
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801699a:	4b20      	ldr	r3, [pc, #128]	; (8016a1c <prvAddNewTaskToReadyList+0xd0>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	3301      	adds	r3, #1
 80169a0:	4a1e      	ldr	r2, [pc, #120]	; (8016a1c <prvAddNewTaskToReadyList+0xd0>)
 80169a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80169a4:	4b1d      	ldr	r3, [pc, #116]	; (8016a1c <prvAddNewTaskToReadyList+0xd0>)
 80169a6:	681a      	ldr	r2, [r3, #0]
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169b0:	4b1b      	ldr	r3, [pc, #108]	; (8016a20 <prvAddNewTaskToReadyList+0xd4>)
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d903      	bls.n	80169c0 <prvAddNewTaskToReadyList+0x74>
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169bc:	4a18      	ldr	r2, [pc, #96]	; (8016a20 <prvAddNewTaskToReadyList+0xd4>)
 80169be:	6013      	str	r3, [r2, #0]
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169c4:	4613      	mov	r3, r2
 80169c6:	009b      	lsls	r3, r3, #2
 80169c8:	4413      	add	r3, r2
 80169ca:	009b      	lsls	r3, r3, #2
 80169cc:	4a15      	ldr	r2, [pc, #84]	; (8016a24 <prvAddNewTaskToReadyList+0xd8>)
 80169ce:	441a      	add	r2, r3
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	3304      	adds	r3, #4
 80169d4:	4619      	mov	r1, r3
 80169d6:	4610      	mov	r0, r2
 80169d8:	f7fe fe15 	bl	8015606 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80169dc:	f001 fb74 	bl	80180c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80169e0:	4b0d      	ldr	r3, [pc, #52]	; (8016a18 <prvAddNewTaskToReadyList+0xcc>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d00e      	beq.n	8016a06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80169e8:	4b0a      	ldr	r3, [pc, #40]	; (8016a14 <prvAddNewTaskToReadyList+0xc8>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d207      	bcs.n	8016a06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80169f6:	4b0c      	ldr	r3, [pc, #48]	; (8016a28 <prvAddNewTaskToReadyList+0xdc>)
 80169f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169fc:	601a      	str	r2, [r3, #0]
 80169fe:	f3bf 8f4f 	dsb	sy
 8016a02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016a06:	bf00      	nop
 8016a08:	3708      	adds	r7, #8
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	bd80      	pop	{r7, pc}
 8016a0e:	bf00      	nop
 8016a10:	20001600 	.word	0x20001600
 8016a14:	2000112c 	.word	0x2000112c
 8016a18:	2000160c 	.word	0x2000160c
 8016a1c:	2000161c 	.word	0x2000161c
 8016a20:	20001608 	.word	0x20001608
 8016a24:	20001130 	.word	0x20001130
 8016a28:	e000ed04 	.word	0xe000ed04

08016a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b084      	sub	sp, #16
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016a34:	2300      	movs	r3, #0
 8016a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d016      	beq.n	8016a6c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016a3e:	4b13      	ldr	r3, [pc, #76]	; (8016a8c <vTaskDelay+0x60>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d009      	beq.n	8016a5a <vTaskDelay+0x2e>
 8016a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a4a:	f383 8811 	msr	BASEPRI, r3
 8016a4e:	f3bf 8f6f 	isb	sy
 8016a52:	f3bf 8f4f 	dsb	sy
 8016a56:	60bb      	str	r3, [r7, #8]
 8016a58:	e7fe      	b.n	8016a58 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8016a5a:	f000 f87f 	bl	8016b5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016a5e:	2100      	movs	r1, #0
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f000 fde5 	bl	8017630 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016a66:	f000 f887 	bl	8016b78 <xTaskResumeAll>
 8016a6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d107      	bne.n	8016a82 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8016a72:	4b07      	ldr	r3, [pc, #28]	; (8016a90 <vTaskDelay+0x64>)
 8016a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a78:	601a      	str	r2, [r3, #0]
 8016a7a:	f3bf 8f4f 	dsb	sy
 8016a7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016a82:	bf00      	nop
 8016a84:	3710      	adds	r7, #16
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}
 8016a8a:	bf00      	nop
 8016a8c:	20001628 	.word	0x20001628
 8016a90:	e000ed04 	.word	0xe000ed04

08016a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b08a      	sub	sp, #40	; 0x28
 8016a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016aa2:	463a      	mov	r2, r7
 8016aa4:	1d39      	adds	r1, r7, #4
 8016aa6:	f107 0308 	add.w	r3, r7, #8
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f7fe fd4a 	bl	8015544 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016ab0:	6839      	ldr	r1, [r7, #0]
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	68ba      	ldr	r2, [r7, #8]
 8016ab6:	9202      	str	r2, [sp, #8]
 8016ab8:	9301      	str	r3, [sp, #4]
 8016aba:	2300      	movs	r3, #0
 8016abc:	9300      	str	r3, [sp, #0]
 8016abe:	2300      	movs	r3, #0
 8016ac0:	460a      	mov	r2, r1
 8016ac2:	4920      	ldr	r1, [pc, #128]	; (8016b44 <vTaskStartScheduler+0xb0>)
 8016ac4:	4820      	ldr	r0, [pc, #128]	; (8016b48 <vTaskStartScheduler+0xb4>)
 8016ac6:	f7ff fe13 	bl	80166f0 <xTaskCreateStatic>
 8016aca:	4602      	mov	r2, r0
 8016acc:	4b1f      	ldr	r3, [pc, #124]	; (8016b4c <vTaskStartScheduler+0xb8>)
 8016ace:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016ad0:	4b1e      	ldr	r3, [pc, #120]	; (8016b4c <vTaskStartScheduler+0xb8>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d002      	beq.n	8016ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016ad8:	2301      	movs	r3, #1
 8016ada:	617b      	str	r3, [r7, #20]
 8016adc:	e001      	b.n	8016ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	2b01      	cmp	r3, #1
 8016ae6:	d102      	bne.n	8016aee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016ae8:	f000 fdf6 	bl	80176d8 <xTimerCreateTimerTask>
 8016aec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	2b01      	cmp	r3, #1
 8016af2:	d115      	bne.n	8016b20 <vTaskStartScheduler+0x8c>
 8016af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016af8:	f383 8811 	msr	BASEPRI, r3
 8016afc:	f3bf 8f6f 	isb	sy
 8016b00:	f3bf 8f4f 	dsb	sy
 8016b04:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016b06:	4b12      	ldr	r3, [pc, #72]	; (8016b50 <vTaskStartScheduler+0xbc>)
 8016b08:	f04f 32ff 	mov.w	r2, #4294967295
 8016b0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016b0e:	4b11      	ldr	r3, [pc, #68]	; (8016b54 <vTaskStartScheduler+0xc0>)
 8016b10:	2201      	movs	r2, #1
 8016b12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016b14:	4b10      	ldr	r3, [pc, #64]	; (8016b58 <vTaskStartScheduler+0xc4>)
 8016b16:	2200      	movs	r2, #0
 8016b18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016b1a:	f001 fa09 	bl	8017f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016b1e:	e00d      	b.n	8016b3c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b26:	d109      	bne.n	8016b3c <vTaskStartScheduler+0xa8>
 8016b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b2c:	f383 8811 	msr	BASEPRI, r3
 8016b30:	f3bf 8f6f 	isb	sy
 8016b34:	f3bf 8f4f 	dsb	sy
 8016b38:	60fb      	str	r3, [r7, #12]
 8016b3a:	e7fe      	b.n	8016b3a <vTaskStartScheduler+0xa6>
}
 8016b3c:	bf00      	nop
 8016b3e:	3718      	adds	r7, #24
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bd80      	pop	{r7, pc}
 8016b44:	0801e038 	.word	0x0801e038
 8016b48:	08017181 	.word	0x08017181
 8016b4c:	20001624 	.word	0x20001624
 8016b50:	20001620 	.word	0x20001620
 8016b54:	2000160c 	.word	0x2000160c
 8016b58:	20001604 	.word	0x20001604

08016b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016b60:	4b04      	ldr	r3, [pc, #16]	; (8016b74 <vTaskSuspendAll+0x18>)
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	3301      	adds	r3, #1
 8016b66:	4a03      	ldr	r2, [pc, #12]	; (8016b74 <vTaskSuspendAll+0x18>)
 8016b68:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8016b6a:	bf00      	nop
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b72:	4770      	bx	lr
 8016b74:	20001628 	.word	0x20001628

08016b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016b7e:	2300      	movs	r3, #0
 8016b80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016b82:	2300      	movs	r3, #0
 8016b84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016b86:	4b41      	ldr	r3, [pc, #260]	; (8016c8c <xTaskResumeAll+0x114>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d109      	bne.n	8016ba2 <xTaskResumeAll+0x2a>
 8016b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b92:	f383 8811 	msr	BASEPRI, r3
 8016b96:	f3bf 8f6f 	isb	sy
 8016b9a:	f3bf 8f4f 	dsb	sy
 8016b9e:	603b      	str	r3, [r7, #0]
 8016ba0:	e7fe      	b.n	8016ba0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016ba2:	f001 fa63 	bl	801806c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016ba6:	4b39      	ldr	r3, [pc, #228]	; (8016c8c <xTaskResumeAll+0x114>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	3b01      	subs	r3, #1
 8016bac:	4a37      	ldr	r2, [pc, #220]	; (8016c8c <xTaskResumeAll+0x114>)
 8016bae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016bb0:	4b36      	ldr	r3, [pc, #216]	; (8016c8c <xTaskResumeAll+0x114>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d162      	bne.n	8016c7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016bb8:	4b35      	ldr	r3, [pc, #212]	; (8016c90 <xTaskResumeAll+0x118>)
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d05e      	beq.n	8016c7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016bc0:	e02f      	b.n	8016c22 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bc2:	4b34      	ldr	r3, [pc, #208]	; (8016c94 <xTaskResumeAll+0x11c>)
 8016bc4:	68db      	ldr	r3, [r3, #12]
 8016bc6:	68db      	ldr	r3, [r3, #12]
 8016bc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	3318      	adds	r3, #24
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7fe fd76 	bl	80156c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	3304      	adds	r3, #4
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f7fe fd71 	bl	80156c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016be2:	4b2d      	ldr	r3, [pc, #180]	; (8016c98 <xTaskResumeAll+0x120>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	429a      	cmp	r2, r3
 8016be8:	d903      	bls.n	8016bf2 <xTaskResumeAll+0x7a>
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bee:	4a2a      	ldr	r2, [pc, #168]	; (8016c98 <xTaskResumeAll+0x120>)
 8016bf0:	6013      	str	r3, [r2, #0]
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bf6:	4613      	mov	r3, r2
 8016bf8:	009b      	lsls	r3, r3, #2
 8016bfa:	4413      	add	r3, r2
 8016bfc:	009b      	lsls	r3, r3, #2
 8016bfe:	4a27      	ldr	r2, [pc, #156]	; (8016c9c <xTaskResumeAll+0x124>)
 8016c00:	441a      	add	r2, r3
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	3304      	adds	r3, #4
 8016c06:	4619      	mov	r1, r3
 8016c08:	4610      	mov	r0, r2
 8016c0a:	f7fe fcfc 	bl	8015606 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c12:	4b23      	ldr	r3, [pc, #140]	; (8016ca0 <xTaskResumeAll+0x128>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d302      	bcc.n	8016c22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8016c1c:	4b21      	ldr	r3, [pc, #132]	; (8016ca4 <xTaskResumeAll+0x12c>)
 8016c1e:	2201      	movs	r2, #1
 8016c20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016c22:	4b1c      	ldr	r3, [pc, #112]	; (8016c94 <xTaskResumeAll+0x11c>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d1cb      	bne.n	8016bc2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d001      	beq.n	8016c34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016c30:	f000 fb58 	bl	80172e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016c34:	4b1c      	ldr	r3, [pc, #112]	; (8016ca8 <xTaskResumeAll+0x130>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d010      	beq.n	8016c62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016c40:	f000 f858 	bl	8016cf4 <xTaskIncrementTick>
 8016c44:	4603      	mov	r3, r0
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d002      	beq.n	8016c50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8016c4a:	4b16      	ldr	r3, [pc, #88]	; (8016ca4 <xTaskResumeAll+0x12c>)
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	3b01      	subs	r3, #1
 8016c54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d1f1      	bne.n	8016c40 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8016c5c:	4b12      	ldr	r3, [pc, #72]	; (8016ca8 <xTaskResumeAll+0x130>)
 8016c5e:	2200      	movs	r2, #0
 8016c60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016c62:	4b10      	ldr	r3, [pc, #64]	; (8016ca4 <xTaskResumeAll+0x12c>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d009      	beq.n	8016c7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016c6e:	4b0f      	ldr	r3, [pc, #60]	; (8016cac <xTaskResumeAll+0x134>)
 8016c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c74:	601a      	str	r2, [r3, #0]
 8016c76:	f3bf 8f4f 	dsb	sy
 8016c7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016c7e:	f001 fa23 	bl	80180c8 <vPortExitCritical>

	return xAlreadyYielded;
 8016c82:	68bb      	ldr	r3, [r7, #8]
}
 8016c84:	4618      	mov	r0, r3
 8016c86:	3710      	adds	r7, #16
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	bd80      	pop	{r7, pc}
 8016c8c:	20001628 	.word	0x20001628
 8016c90:	20001600 	.word	0x20001600
 8016c94:	200015c0 	.word	0x200015c0
 8016c98:	20001608 	.word	0x20001608
 8016c9c:	20001130 	.word	0x20001130
 8016ca0:	2000112c 	.word	0x2000112c
 8016ca4:	20001614 	.word	0x20001614
 8016ca8:	20001610 	.word	0x20001610
 8016cac:	e000ed04 	.word	0xe000ed04

08016cb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016cb0:	b480      	push	{r7}
 8016cb2:	b083      	sub	sp, #12
 8016cb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016cb6:	4b05      	ldr	r3, [pc, #20]	; (8016ccc <xTaskGetTickCount+0x1c>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016cbc:	687b      	ldr	r3, [r7, #4]
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	370c      	adds	r7, #12
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc8:	4770      	bx	lr
 8016cca:	bf00      	nop
 8016ccc:	20001604 	.word	0x20001604

08016cd0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016cd6:	f001 faa5 	bl	8018224 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016cda:	2300      	movs	r3, #0
 8016cdc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016cde:	4b04      	ldr	r3, [pc, #16]	; (8016cf0 <xTaskGetTickCountFromISR+0x20>)
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016ce4:	683b      	ldr	r3, [r7, #0]
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	3708      	adds	r7, #8
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd80      	pop	{r7, pc}
 8016cee:	bf00      	nop
 8016cf0:	20001604 	.word	0x20001604

08016cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b086      	sub	sp, #24
 8016cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016cfe:	4b4e      	ldr	r3, [pc, #312]	; (8016e38 <xTaskIncrementTick+0x144>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	f040 8088 	bne.w	8016e18 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016d08:	4b4c      	ldr	r3, [pc, #304]	; (8016e3c <xTaskIncrementTick+0x148>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016d10:	4a4a      	ldr	r2, [pc, #296]	; (8016e3c <xTaskIncrementTick+0x148>)
 8016d12:	693b      	ldr	r3, [r7, #16]
 8016d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d11f      	bne.n	8016d5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8016d1c:	4b48      	ldr	r3, [pc, #288]	; (8016e40 <xTaskIncrementTick+0x14c>)
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d009      	beq.n	8016d3a <xTaskIncrementTick+0x46>
 8016d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d2a:	f383 8811 	msr	BASEPRI, r3
 8016d2e:	f3bf 8f6f 	isb	sy
 8016d32:	f3bf 8f4f 	dsb	sy
 8016d36:	603b      	str	r3, [r7, #0]
 8016d38:	e7fe      	b.n	8016d38 <xTaskIncrementTick+0x44>
 8016d3a:	4b41      	ldr	r3, [pc, #260]	; (8016e40 <xTaskIncrementTick+0x14c>)
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	60fb      	str	r3, [r7, #12]
 8016d40:	4b40      	ldr	r3, [pc, #256]	; (8016e44 <xTaskIncrementTick+0x150>)
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	4a3e      	ldr	r2, [pc, #248]	; (8016e40 <xTaskIncrementTick+0x14c>)
 8016d46:	6013      	str	r3, [r2, #0]
 8016d48:	4a3e      	ldr	r2, [pc, #248]	; (8016e44 <xTaskIncrementTick+0x150>)
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	6013      	str	r3, [r2, #0]
 8016d4e:	4b3e      	ldr	r3, [pc, #248]	; (8016e48 <xTaskIncrementTick+0x154>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	3301      	adds	r3, #1
 8016d54:	4a3c      	ldr	r2, [pc, #240]	; (8016e48 <xTaskIncrementTick+0x154>)
 8016d56:	6013      	str	r3, [r2, #0]
 8016d58:	f000 fac4 	bl	80172e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016d5c:	4b3b      	ldr	r3, [pc, #236]	; (8016e4c <xTaskIncrementTick+0x158>)
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	693a      	ldr	r2, [r7, #16]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d349      	bcc.n	8016dfa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016d66:	4b36      	ldr	r3, [pc, #216]	; (8016e40 <xTaskIncrementTick+0x14c>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d104      	bne.n	8016d7a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d70:	4b36      	ldr	r3, [pc, #216]	; (8016e4c <xTaskIncrementTick+0x158>)
 8016d72:	f04f 32ff 	mov.w	r2, #4294967295
 8016d76:	601a      	str	r2, [r3, #0]
					break;
 8016d78:	e03f      	b.n	8016dfa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d7a:	4b31      	ldr	r3, [pc, #196]	; (8016e40 <xTaskIncrementTick+0x14c>)
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	68db      	ldr	r3, [r3, #12]
 8016d80:	68db      	ldr	r3, [r3, #12]
 8016d82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	685b      	ldr	r3, [r3, #4]
 8016d88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016d8a:	693a      	ldr	r2, [r7, #16]
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	d203      	bcs.n	8016d9a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016d92:	4a2e      	ldr	r2, [pc, #184]	; (8016e4c <xTaskIncrementTick+0x158>)
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016d98:	e02f      	b.n	8016dfa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d9a:	68bb      	ldr	r3, [r7, #8]
 8016d9c:	3304      	adds	r3, #4
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f7fe fc8e 	bl	80156c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d004      	beq.n	8016db6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016dac:	68bb      	ldr	r3, [r7, #8]
 8016dae:	3318      	adds	r3, #24
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7fe fc85 	bl	80156c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016db6:	68bb      	ldr	r3, [r7, #8]
 8016db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dba:	4b25      	ldr	r3, [pc, #148]	; (8016e50 <xTaskIncrementTick+0x15c>)
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d903      	bls.n	8016dca <xTaskIncrementTick+0xd6>
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dc6:	4a22      	ldr	r2, [pc, #136]	; (8016e50 <xTaskIncrementTick+0x15c>)
 8016dc8:	6013      	str	r3, [r2, #0]
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dce:	4613      	mov	r3, r2
 8016dd0:	009b      	lsls	r3, r3, #2
 8016dd2:	4413      	add	r3, r2
 8016dd4:	009b      	lsls	r3, r3, #2
 8016dd6:	4a1f      	ldr	r2, [pc, #124]	; (8016e54 <xTaskIncrementTick+0x160>)
 8016dd8:	441a      	add	r2, r3
 8016dda:	68bb      	ldr	r3, [r7, #8]
 8016ddc:	3304      	adds	r3, #4
 8016dde:	4619      	mov	r1, r3
 8016de0:	4610      	mov	r0, r2
 8016de2:	f7fe fc10 	bl	8015606 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016de6:	68bb      	ldr	r3, [r7, #8]
 8016de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dea:	4b1b      	ldr	r3, [pc, #108]	; (8016e58 <xTaskIncrementTick+0x164>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016df0:	429a      	cmp	r2, r3
 8016df2:	d3b8      	bcc.n	8016d66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8016df4:	2301      	movs	r3, #1
 8016df6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016df8:	e7b5      	b.n	8016d66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016dfa:	4b17      	ldr	r3, [pc, #92]	; (8016e58 <xTaskIncrementTick+0x164>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e00:	4914      	ldr	r1, [pc, #80]	; (8016e54 <xTaskIncrementTick+0x160>)
 8016e02:	4613      	mov	r3, r2
 8016e04:	009b      	lsls	r3, r3, #2
 8016e06:	4413      	add	r3, r2
 8016e08:	009b      	lsls	r3, r3, #2
 8016e0a:	440b      	add	r3, r1
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	2b01      	cmp	r3, #1
 8016e10:	d907      	bls.n	8016e22 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8016e12:	2301      	movs	r3, #1
 8016e14:	617b      	str	r3, [r7, #20]
 8016e16:	e004      	b.n	8016e22 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016e18:	4b10      	ldr	r3, [pc, #64]	; (8016e5c <xTaskIncrementTick+0x168>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	3301      	adds	r3, #1
 8016e1e:	4a0f      	ldr	r2, [pc, #60]	; (8016e5c <xTaskIncrementTick+0x168>)
 8016e20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016e22:	4b0f      	ldr	r3, [pc, #60]	; (8016e60 <xTaskIncrementTick+0x16c>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d001      	beq.n	8016e2e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016e2e:	697b      	ldr	r3, [r7, #20]
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3718      	adds	r7, #24
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}
 8016e38:	20001628 	.word	0x20001628
 8016e3c:	20001604 	.word	0x20001604
 8016e40:	200015b8 	.word	0x200015b8
 8016e44:	200015bc 	.word	0x200015bc
 8016e48:	20001618 	.word	0x20001618
 8016e4c:	20001620 	.word	0x20001620
 8016e50:	20001608 	.word	0x20001608
 8016e54:	20001130 	.word	0x20001130
 8016e58:	2000112c 	.word	0x2000112c
 8016e5c:	20001610 	.word	0x20001610
 8016e60:	20001614 	.word	0x20001614

08016e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016e64:	b480      	push	{r7}
 8016e66:	b085      	sub	sp, #20
 8016e68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016e6a:	4b27      	ldr	r3, [pc, #156]	; (8016f08 <vTaskSwitchContext+0xa4>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d003      	beq.n	8016e7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016e72:	4b26      	ldr	r3, [pc, #152]	; (8016f0c <vTaskSwitchContext+0xa8>)
 8016e74:	2201      	movs	r2, #1
 8016e76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016e78:	e040      	b.n	8016efc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8016e7a:	4b24      	ldr	r3, [pc, #144]	; (8016f0c <vTaskSwitchContext+0xa8>)
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e80:	4b23      	ldr	r3, [pc, #140]	; (8016f10 <vTaskSwitchContext+0xac>)
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	60fb      	str	r3, [r7, #12]
 8016e86:	e00f      	b.n	8016ea8 <vTaskSwitchContext+0x44>
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d109      	bne.n	8016ea2 <vTaskSwitchContext+0x3e>
 8016e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e92:	f383 8811 	msr	BASEPRI, r3
 8016e96:	f3bf 8f6f 	isb	sy
 8016e9a:	f3bf 8f4f 	dsb	sy
 8016e9e:	607b      	str	r3, [r7, #4]
 8016ea0:	e7fe      	b.n	8016ea0 <vTaskSwitchContext+0x3c>
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	3b01      	subs	r3, #1
 8016ea6:	60fb      	str	r3, [r7, #12]
 8016ea8:	491a      	ldr	r1, [pc, #104]	; (8016f14 <vTaskSwitchContext+0xb0>)
 8016eaa:	68fa      	ldr	r2, [r7, #12]
 8016eac:	4613      	mov	r3, r2
 8016eae:	009b      	lsls	r3, r3, #2
 8016eb0:	4413      	add	r3, r2
 8016eb2:	009b      	lsls	r3, r3, #2
 8016eb4:	440b      	add	r3, r1
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d0e5      	beq.n	8016e88 <vTaskSwitchContext+0x24>
 8016ebc:	68fa      	ldr	r2, [r7, #12]
 8016ebe:	4613      	mov	r3, r2
 8016ec0:	009b      	lsls	r3, r3, #2
 8016ec2:	4413      	add	r3, r2
 8016ec4:	009b      	lsls	r3, r3, #2
 8016ec6:	4a13      	ldr	r2, [pc, #76]	; (8016f14 <vTaskSwitchContext+0xb0>)
 8016ec8:	4413      	add	r3, r2
 8016eca:	60bb      	str	r3, [r7, #8]
 8016ecc:	68bb      	ldr	r3, [r7, #8]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	685a      	ldr	r2, [r3, #4]
 8016ed2:	68bb      	ldr	r3, [r7, #8]
 8016ed4:	605a      	str	r2, [r3, #4]
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	685a      	ldr	r2, [r3, #4]
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	3308      	adds	r3, #8
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	d104      	bne.n	8016eec <vTaskSwitchContext+0x88>
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	685b      	ldr	r3, [r3, #4]
 8016ee6:	685a      	ldr	r2, [r3, #4]
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	605a      	str	r2, [r3, #4]
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	685b      	ldr	r3, [r3, #4]
 8016ef0:	68db      	ldr	r3, [r3, #12]
 8016ef2:	4a09      	ldr	r2, [pc, #36]	; (8016f18 <vTaskSwitchContext+0xb4>)
 8016ef4:	6013      	str	r3, [r2, #0]
 8016ef6:	4a06      	ldr	r2, [pc, #24]	; (8016f10 <vTaskSwitchContext+0xac>)
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	6013      	str	r3, [r2, #0]
}
 8016efc:	bf00      	nop
 8016efe:	3714      	adds	r7, #20
 8016f00:	46bd      	mov	sp, r7
 8016f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f06:	4770      	bx	lr
 8016f08:	20001628 	.word	0x20001628
 8016f0c:	20001614 	.word	0x20001614
 8016f10:	20001608 	.word	0x20001608
 8016f14:	20001130 	.word	0x20001130
 8016f18:	2000112c 	.word	0x2000112c

08016f1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b084      	sub	sp, #16
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	6078      	str	r0, [r7, #4]
 8016f24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d109      	bne.n	8016f40 <vTaskPlaceOnEventList+0x24>
 8016f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f30:	f383 8811 	msr	BASEPRI, r3
 8016f34:	f3bf 8f6f 	isb	sy
 8016f38:	f3bf 8f4f 	dsb	sy
 8016f3c:	60fb      	str	r3, [r7, #12]
 8016f3e:	e7fe      	b.n	8016f3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016f40:	4b07      	ldr	r3, [pc, #28]	; (8016f60 <vTaskPlaceOnEventList+0x44>)
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	3318      	adds	r3, #24
 8016f46:	4619      	mov	r1, r3
 8016f48:	6878      	ldr	r0, [r7, #4]
 8016f4a:	f7fe fb80 	bl	801564e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016f4e:	2101      	movs	r1, #1
 8016f50:	6838      	ldr	r0, [r7, #0]
 8016f52:	f000 fb6d 	bl	8017630 <prvAddCurrentTaskToDelayedList>
}
 8016f56:	bf00      	nop
 8016f58:	3710      	adds	r7, #16
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	bd80      	pop	{r7, pc}
 8016f5e:	bf00      	nop
 8016f60:	2000112c 	.word	0x2000112c

08016f64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b086      	sub	sp, #24
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	60f8      	str	r0, [r7, #12]
 8016f6c:	60b9      	str	r1, [r7, #8]
 8016f6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d109      	bne.n	8016f8a <vTaskPlaceOnEventListRestricted+0x26>
 8016f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f7a:	f383 8811 	msr	BASEPRI, r3
 8016f7e:	f3bf 8f6f 	isb	sy
 8016f82:	f3bf 8f4f 	dsb	sy
 8016f86:	617b      	str	r3, [r7, #20]
 8016f88:	e7fe      	b.n	8016f88 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016f8a:	4b0a      	ldr	r3, [pc, #40]	; (8016fb4 <vTaskPlaceOnEventListRestricted+0x50>)
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	3318      	adds	r3, #24
 8016f90:	4619      	mov	r1, r3
 8016f92:	68f8      	ldr	r0, [r7, #12]
 8016f94:	f7fe fb37 	bl	8015606 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d002      	beq.n	8016fa4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8016f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8016fa2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016fa4:	6879      	ldr	r1, [r7, #4]
 8016fa6:	68b8      	ldr	r0, [r7, #8]
 8016fa8:	f000 fb42 	bl	8017630 <prvAddCurrentTaskToDelayedList>
	}
 8016fac:	bf00      	nop
 8016fae:	3718      	adds	r7, #24
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd80      	pop	{r7, pc}
 8016fb4:	2000112c 	.word	0x2000112c

08016fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b086      	sub	sp, #24
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	68db      	ldr	r3, [r3, #12]
 8016fc4:	68db      	ldr	r3, [r3, #12]
 8016fc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d109      	bne.n	8016fe2 <xTaskRemoveFromEventList+0x2a>
 8016fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fd2:	f383 8811 	msr	BASEPRI, r3
 8016fd6:	f3bf 8f6f 	isb	sy
 8016fda:	f3bf 8f4f 	dsb	sy
 8016fde:	60fb      	str	r3, [r7, #12]
 8016fe0:	e7fe      	b.n	8016fe0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016fe2:	693b      	ldr	r3, [r7, #16]
 8016fe4:	3318      	adds	r3, #24
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7fe fb6a 	bl	80156c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016fec:	4b1d      	ldr	r3, [pc, #116]	; (8017064 <xTaskRemoveFromEventList+0xac>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d11d      	bne.n	8017030 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	3304      	adds	r3, #4
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7fe fb61 	bl	80156c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016ffe:	693b      	ldr	r3, [r7, #16]
 8017000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017002:	4b19      	ldr	r3, [pc, #100]	; (8017068 <xTaskRemoveFromEventList+0xb0>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	429a      	cmp	r2, r3
 8017008:	d903      	bls.n	8017012 <xTaskRemoveFromEventList+0x5a>
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801700e:	4a16      	ldr	r2, [pc, #88]	; (8017068 <xTaskRemoveFromEventList+0xb0>)
 8017010:	6013      	str	r3, [r2, #0]
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017016:	4613      	mov	r3, r2
 8017018:	009b      	lsls	r3, r3, #2
 801701a:	4413      	add	r3, r2
 801701c:	009b      	lsls	r3, r3, #2
 801701e:	4a13      	ldr	r2, [pc, #76]	; (801706c <xTaskRemoveFromEventList+0xb4>)
 8017020:	441a      	add	r2, r3
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	3304      	adds	r3, #4
 8017026:	4619      	mov	r1, r3
 8017028:	4610      	mov	r0, r2
 801702a:	f7fe faec 	bl	8015606 <vListInsertEnd>
 801702e:	e005      	b.n	801703c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	3318      	adds	r3, #24
 8017034:	4619      	mov	r1, r3
 8017036:	480e      	ldr	r0, [pc, #56]	; (8017070 <xTaskRemoveFromEventList+0xb8>)
 8017038:	f7fe fae5 	bl	8015606 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017040:	4b0c      	ldr	r3, [pc, #48]	; (8017074 <xTaskRemoveFromEventList+0xbc>)
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017046:	429a      	cmp	r2, r3
 8017048:	d905      	bls.n	8017056 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801704a:	2301      	movs	r3, #1
 801704c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801704e:	4b0a      	ldr	r3, [pc, #40]	; (8017078 <xTaskRemoveFromEventList+0xc0>)
 8017050:	2201      	movs	r2, #1
 8017052:	601a      	str	r2, [r3, #0]
 8017054:	e001      	b.n	801705a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8017056:	2300      	movs	r3, #0
 8017058:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801705a:	697b      	ldr	r3, [r7, #20]
}
 801705c:	4618      	mov	r0, r3
 801705e:	3718      	adds	r7, #24
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}
 8017064:	20001628 	.word	0x20001628
 8017068:	20001608 	.word	0x20001608
 801706c:	20001130 	.word	0x20001130
 8017070:	200015c0 	.word	0x200015c0
 8017074:	2000112c 	.word	0x2000112c
 8017078:	20001614 	.word	0x20001614

0801707c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801707c:	b480      	push	{r7}
 801707e:	b083      	sub	sp, #12
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017084:	4b06      	ldr	r3, [pc, #24]	; (80170a0 <vTaskInternalSetTimeOutState+0x24>)
 8017086:	681a      	ldr	r2, [r3, #0]
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801708c:	4b05      	ldr	r3, [pc, #20]	; (80170a4 <vTaskInternalSetTimeOutState+0x28>)
 801708e:	681a      	ldr	r2, [r3, #0]
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	605a      	str	r2, [r3, #4]
}
 8017094:	bf00      	nop
 8017096:	370c      	adds	r7, #12
 8017098:	46bd      	mov	sp, r7
 801709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709e:	4770      	bx	lr
 80170a0:	20001618 	.word	0x20001618
 80170a4:	20001604 	.word	0x20001604

080170a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b088      	sub	sp, #32
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
 80170b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d109      	bne.n	80170cc <xTaskCheckForTimeOut+0x24>
 80170b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170bc:	f383 8811 	msr	BASEPRI, r3
 80170c0:	f3bf 8f6f 	isb	sy
 80170c4:	f3bf 8f4f 	dsb	sy
 80170c8:	613b      	str	r3, [r7, #16]
 80170ca:	e7fe      	b.n	80170ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80170cc:	683b      	ldr	r3, [r7, #0]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d109      	bne.n	80170e6 <xTaskCheckForTimeOut+0x3e>
 80170d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d6:	f383 8811 	msr	BASEPRI, r3
 80170da:	f3bf 8f6f 	isb	sy
 80170de:	f3bf 8f4f 	dsb	sy
 80170e2:	60fb      	str	r3, [r7, #12]
 80170e4:	e7fe      	b.n	80170e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80170e6:	f000 ffc1 	bl	801806c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80170ea:	4b1d      	ldr	r3, [pc, #116]	; (8017160 <xTaskCheckForTimeOut+0xb8>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	69ba      	ldr	r2, [r7, #24]
 80170f6:	1ad3      	subs	r3, r2, r3
 80170f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017102:	d102      	bne.n	801710a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017104:	2300      	movs	r3, #0
 8017106:	61fb      	str	r3, [r7, #28]
 8017108:	e023      	b.n	8017152 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	681a      	ldr	r2, [r3, #0]
 801710e:	4b15      	ldr	r3, [pc, #84]	; (8017164 <xTaskCheckForTimeOut+0xbc>)
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	429a      	cmp	r2, r3
 8017114:	d007      	beq.n	8017126 <xTaskCheckForTimeOut+0x7e>
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	685b      	ldr	r3, [r3, #4]
 801711a:	69ba      	ldr	r2, [r7, #24]
 801711c:	429a      	cmp	r2, r3
 801711e:	d302      	bcc.n	8017126 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017120:	2301      	movs	r3, #1
 8017122:	61fb      	str	r3, [r7, #28]
 8017124:	e015      	b.n	8017152 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017126:	683b      	ldr	r3, [r7, #0]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	697a      	ldr	r2, [r7, #20]
 801712c:	429a      	cmp	r2, r3
 801712e:	d20b      	bcs.n	8017148 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	681a      	ldr	r2, [r3, #0]
 8017134:	697b      	ldr	r3, [r7, #20]
 8017136:	1ad2      	subs	r2, r2, r3
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801713c:	6878      	ldr	r0, [r7, #4]
 801713e:	f7ff ff9d 	bl	801707c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017142:	2300      	movs	r3, #0
 8017144:	61fb      	str	r3, [r7, #28]
 8017146:	e004      	b.n	8017152 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	2200      	movs	r2, #0
 801714c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801714e:	2301      	movs	r3, #1
 8017150:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017152:	f000 ffb9 	bl	80180c8 <vPortExitCritical>

	return xReturn;
 8017156:	69fb      	ldr	r3, [r7, #28]
}
 8017158:	4618      	mov	r0, r3
 801715a:	3720      	adds	r7, #32
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}
 8017160:	20001604 	.word	0x20001604
 8017164:	20001618 	.word	0x20001618

08017168 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017168:	b480      	push	{r7}
 801716a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801716c:	4b03      	ldr	r3, [pc, #12]	; (801717c <vTaskMissedYield+0x14>)
 801716e:	2201      	movs	r2, #1
 8017170:	601a      	str	r2, [r3, #0]
}
 8017172:	bf00      	nop
 8017174:	46bd      	mov	sp, r7
 8017176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717a:	4770      	bx	lr
 801717c:	20001614 	.word	0x20001614

08017180 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017188:	f000 f852 	bl	8017230 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801718c:	4b06      	ldr	r3, [pc, #24]	; (80171a8 <prvIdleTask+0x28>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	2b01      	cmp	r3, #1
 8017192:	d9f9      	bls.n	8017188 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017194:	4b05      	ldr	r3, [pc, #20]	; (80171ac <prvIdleTask+0x2c>)
 8017196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801719a:	601a      	str	r2, [r3, #0]
 801719c:	f3bf 8f4f 	dsb	sy
 80171a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80171a4:	e7f0      	b.n	8017188 <prvIdleTask+0x8>
 80171a6:	bf00      	nop
 80171a8:	20001130 	.word	0x20001130
 80171ac:	e000ed04 	.word	0xe000ed04

080171b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b082      	sub	sp, #8
 80171b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80171b6:	2300      	movs	r3, #0
 80171b8:	607b      	str	r3, [r7, #4]
 80171ba:	e00c      	b.n	80171d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	4613      	mov	r3, r2
 80171c0:	009b      	lsls	r3, r3, #2
 80171c2:	4413      	add	r3, r2
 80171c4:	009b      	lsls	r3, r3, #2
 80171c6:	4a12      	ldr	r2, [pc, #72]	; (8017210 <prvInitialiseTaskLists+0x60>)
 80171c8:	4413      	add	r3, r2
 80171ca:	4618      	mov	r0, r3
 80171cc:	f7fe f9ee 	bl	80155ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	3301      	adds	r3, #1
 80171d4:	607b      	str	r3, [r7, #4]
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	2b37      	cmp	r3, #55	; 0x37
 80171da:	d9ef      	bls.n	80171bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80171dc:	480d      	ldr	r0, [pc, #52]	; (8017214 <prvInitialiseTaskLists+0x64>)
 80171de:	f7fe f9e5 	bl	80155ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80171e2:	480d      	ldr	r0, [pc, #52]	; (8017218 <prvInitialiseTaskLists+0x68>)
 80171e4:	f7fe f9e2 	bl	80155ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80171e8:	480c      	ldr	r0, [pc, #48]	; (801721c <prvInitialiseTaskLists+0x6c>)
 80171ea:	f7fe f9df 	bl	80155ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80171ee:	480c      	ldr	r0, [pc, #48]	; (8017220 <prvInitialiseTaskLists+0x70>)
 80171f0:	f7fe f9dc 	bl	80155ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80171f4:	480b      	ldr	r0, [pc, #44]	; (8017224 <prvInitialiseTaskLists+0x74>)
 80171f6:	f7fe f9d9 	bl	80155ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80171fa:	4b0b      	ldr	r3, [pc, #44]	; (8017228 <prvInitialiseTaskLists+0x78>)
 80171fc:	4a05      	ldr	r2, [pc, #20]	; (8017214 <prvInitialiseTaskLists+0x64>)
 80171fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017200:	4b0a      	ldr	r3, [pc, #40]	; (801722c <prvInitialiseTaskLists+0x7c>)
 8017202:	4a05      	ldr	r2, [pc, #20]	; (8017218 <prvInitialiseTaskLists+0x68>)
 8017204:	601a      	str	r2, [r3, #0]
}
 8017206:	bf00      	nop
 8017208:	3708      	adds	r7, #8
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}
 801720e:	bf00      	nop
 8017210:	20001130 	.word	0x20001130
 8017214:	20001590 	.word	0x20001590
 8017218:	200015a4 	.word	0x200015a4
 801721c:	200015c0 	.word	0x200015c0
 8017220:	200015d4 	.word	0x200015d4
 8017224:	200015ec 	.word	0x200015ec
 8017228:	200015b8 	.word	0x200015b8
 801722c:	200015bc 	.word	0x200015bc

08017230 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b082      	sub	sp, #8
 8017234:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017236:	e019      	b.n	801726c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017238:	f000 ff18 	bl	801806c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801723c:	4b0f      	ldr	r3, [pc, #60]	; (801727c <prvCheckTasksWaitingTermination+0x4c>)
 801723e:	68db      	ldr	r3, [r3, #12]
 8017240:	68db      	ldr	r3, [r3, #12]
 8017242:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	3304      	adds	r3, #4
 8017248:	4618      	mov	r0, r3
 801724a:	f7fe fa39 	bl	80156c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801724e:	4b0c      	ldr	r3, [pc, #48]	; (8017280 <prvCheckTasksWaitingTermination+0x50>)
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	3b01      	subs	r3, #1
 8017254:	4a0a      	ldr	r2, [pc, #40]	; (8017280 <prvCheckTasksWaitingTermination+0x50>)
 8017256:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017258:	4b0a      	ldr	r3, [pc, #40]	; (8017284 <prvCheckTasksWaitingTermination+0x54>)
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	3b01      	subs	r3, #1
 801725e:	4a09      	ldr	r2, [pc, #36]	; (8017284 <prvCheckTasksWaitingTermination+0x54>)
 8017260:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017262:	f000 ff31 	bl	80180c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017266:	6878      	ldr	r0, [r7, #4]
 8017268:	f000 f80e 	bl	8017288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801726c:	4b05      	ldr	r3, [pc, #20]	; (8017284 <prvCheckTasksWaitingTermination+0x54>)
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d1e1      	bne.n	8017238 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017274:	bf00      	nop
 8017276:	3708      	adds	r7, #8
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}
 801727c:	200015d4 	.word	0x200015d4
 8017280:	20001600 	.word	0x20001600
 8017284:	200015e8 	.word	0x200015e8

08017288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017288:	b580      	push	{r7, lr}
 801728a:	b084      	sub	sp, #16
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017296:	2b00      	cmp	r3, #0
 8017298:	d108      	bne.n	80172ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801729e:	4618      	mov	r0, r3
 80172a0:	f001 f8c0 	bl	8018424 <vPortFree>
				vPortFree( pxTCB );
 80172a4:	6878      	ldr	r0, [r7, #4]
 80172a6:	f001 f8bd 	bl	8018424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80172aa:	e017      	b.n	80172dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80172b2:	2b01      	cmp	r3, #1
 80172b4:	d103      	bne.n	80172be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80172b6:	6878      	ldr	r0, [r7, #4]
 80172b8:	f001 f8b4 	bl	8018424 <vPortFree>
	}
 80172bc:	e00e      	b.n	80172dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80172c4:	2b02      	cmp	r3, #2
 80172c6:	d009      	beq.n	80172dc <prvDeleteTCB+0x54>
 80172c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172cc:	f383 8811 	msr	BASEPRI, r3
 80172d0:	f3bf 8f6f 	isb	sy
 80172d4:	f3bf 8f4f 	dsb	sy
 80172d8:	60fb      	str	r3, [r7, #12]
 80172da:	e7fe      	b.n	80172da <prvDeleteTCB+0x52>
	}
 80172dc:	bf00      	nop
 80172de:	3710      	adds	r7, #16
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd80      	pop	{r7, pc}

080172e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80172e4:	b480      	push	{r7}
 80172e6:	b083      	sub	sp, #12
 80172e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80172ea:	4b0c      	ldr	r3, [pc, #48]	; (801731c <prvResetNextTaskUnblockTime+0x38>)
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d104      	bne.n	80172fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80172f4:	4b0a      	ldr	r3, [pc, #40]	; (8017320 <prvResetNextTaskUnblockTime+0x3c>)
 80172f6:	f04f 32ff 	mov.w	r2, #4294967295
 80172fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80172fc:	e008      	b.n	8017310 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80172fe:	4b07      	ldr	r3, [pc, #28]	; (801731c <prvResetNextTaskUnblockTime+0x38>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	68db      	ldr	r3, [r3, #12]
 8017304:	68db      	ldr	r3, [r3, #12]
 8017306:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	685b      	ldr	r3, [r3, #4]
 801730c:	4a04      	ldr	r2, [pc, #16]	; (8017320 <prvResetNextTaskUnblockTime+0x3c>)
 801730e:	6013      	str	r3, [r2, #0]
}
 8017310:	bf00      	nop
 8017312:	370c      	adds	r7, #12
 8017314:	46bd      	mov	sp, r7
 8017316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731a:	4770      	bx	lr
 801731c:	200015b8 	.word	0x200015b8
 8017320:	20001620 	.word	0x20001620

08017324 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017324:	b480      	push	{r7}
 8017326:	b083      	sub	sp, #12
 8017328:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801732a:	4b0b      	ldr	r3, [pc, #44]	; (8017358 <xTaskGetSchedulerState+0x34>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d102      	bne.n	8017338 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017332:	2301      	movs	r3, #1
 8017334:	607b      	str	r3, [r7, #4]
 8017336:	e008      	b.n	801734a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017338:	4b08      	ldr	r3, [pc, #32]	; (801735c <xTaskGetSchedulerState+0x38>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d102      	bne.n	8017346 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017340:	2302      	movs	r3, #2
 8017342:	607b      	str	r3, [r7, #4]
 8017344:	e001      	b.n	801734a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017346:	2300      	movs	r3, #0
 8017348:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801734a:	687b      	ldr	r3, [r7, #4]
	}
 801734c:	4618      	mov	r0, r3
 801734e:	370c      	adds	r7, #12
 8017350:	46bd      	mov	sp, r7
 8017352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017356:	4770      	bx	lr
 8017358:	2000160c 	.word	0x2000160c
 801735c:	20001628 	.word	0x20001628

08017360 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017360:	b580      	push	{r7, lr}
 8017362:	b084      	sub	sp, #16
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801736c:	2300      	movs	r3, #0
 801736e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d051      	beq.n	801741a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801737a:	4b2a      	ldr	r3, [pc, #168]	; (8017424 <xTaskPriorityInherit+0xc4>)
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017380:	429a      	cmp	r2, r3
 8017382:	d241      	bcs.n	8017408 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017384:	68bb      	ldr	r3, [r7, #8]
 8017386:	699b      	ldr	r3, [r3, #24]
 8017388:	2b00      	cmp	r3, #0
 801738a:	db06      	blt.n	801739a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801738c:	4b25      	ldr	r3, [pc, #148]	; (8017424 <xTaskPriorityInherit+0xc4>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017392:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801739a:	68bb      	ldr	r3, [r7, #8]
 801739c:	6959      	ldr	r1, [r3, #20]
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173a2:	4613      	mov	r3, r2
 80173a4:	009b      	lsls	r3, r3, #2
 80173a6:	4413      	add	r3, r2
 80173a8:	009b      	lsls	r3, r3, #2
 80173aa:	4a1f      	ldr	r2, [pc, #124]	; (8017428 <xTaskPriorityInherit+0xc8>)
 80173ac:	4413      	add	r3, r2
 80173ae:	4299      	cmp	r1, r3
 80173b0:	d122      	bne.n	80173f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	3304      	adds	r3, #4
 80173b6:	4618      	mov	r0, r3
 80173b8:	f7fe f982 	bl	80156c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80173bc:	4b19      	ldr	r3, [pc, #100]	; (8017424 <xTaskPriorityInherit+0xc4>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80173c6:	68bb      	ldr	r3, [r7, #8]
 80173c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173ca:	4b18      	ldr	r3, [pc, #96]	; (801742c <xTaskPriorityInherit+0xcc>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	429a      	cmp	r2, r3
 80173d0:	d903      	bls.n	80173da <xTaskPriorityInherit+0x7a>
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173d6:	4a15      	ldr	r2, [pc, #84]	; (801742c <xTaskPriorityInherit+0xcc>)
 80173d8:	6013      	str	r3, [r2, #0]
 80173da:	68bb      	ldr	r3, [r7, #8]
 80173dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173de:	4613      	mov	r3, r2
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	4413      	add	r3, r2
 80173e4:	009b      	lsls	r3, r3, #2
 80173e6:	4a10      	ldr	r2, [pc, #64]	; (8017428 <xTaskPriorityInherit+0xc8>)
 80173e8:	441a      	add	r2, r3
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	3304      	adds	r3, #4
 80173ee:	4619      	mov	r1, r3
 80173f0:	4610      	mov	r0, r2
 80173f2:	f7fe f908 	bl	8015606 <vListInsertEnd>
 80173f6:	e004      	b.n	8017402 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80173f8:	4b0a      	ldr	r3, [pc, #40]	; (8017424 <xTaskPriorityInherit+0xc4>)
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173fe:	68bb      	ldr	r3, [r7, #8]
 8017400:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017402:	2301      	movs	r3, #1
 8017404:	60fb      	str	r3, [r7, #12]
 8017406:	e008      	b.n	801741a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801740c:	4b05      	ldr	r3, [pc, #20]	; (8017424 <xTaskPriorityInherit+0xc4>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017412:	429a      	cmp	r2, r3
 8017414:	d201      	bcs.n	801741a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017416:	2301      	movs	r3, #1
 8017418:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801741a:	68fb      	ldr	r3, [r7, #12]
	}
 801741c:	4618      	mov	r0, r3
 801741e:	3710      	adds	r7, #16
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}
 8017424:	2000112c 	.word	0x2000112c
 8017428:	20001130 	.word	0x20001130
 801742c:	20001608 	.word	0x20001608

08017430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017430:	b580      	push	{r7, lr}
 8017432:	b086      	sub	sp, #24
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801743c:	2300      	movs	r3, #0
 801743e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d054      	beq.n	80174f0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017446:	4b2d      	ldr	r3, [pc, #180]	; (80174fc <xTaskPriorityDisinherit+0xcc>)
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	693a      	ldr	r2, [r7, #16]
 801744c:	429a      	cmp	r2, r3
 801744e:	d009      	beq.n	8017464 <xTaskPriorityDisinherit+0x34>
 8017450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017454:	f383 8811 	msr	BASEPRI, r3
 8017458:	f3bf 8f6f 	isb	sy
 801745c:	f3bf 8f4f 	dsb	sy
 8017460:	60fb      	str	r3, [r7, #12]
 8017462:	e7fe      	b.n	8017462 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017468:	2b00      	cmp	r3, #0
 801746a:	d109      	bne.n	8017480 <xTaskPriorityDisinherit+0x50>
 801746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017470:	f383 8811 	msr	BASEPRI, r3
 8017474:	f3bf 8f6f 	isb	sy
 8017478:	f3bf 8f4f 	dsb	sy
 801747c:	60bb      	str	r3, [r7, #8]
 801747e:	e7fe      	b.n	801747e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8017480:	693b      	ldr	r3, [r7, #16]
 8017482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017484:	1e5a      	subs	r2, r3, #1
 8017486:	693b      	ldr	r3, [r7, #16]
 8017488:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801748a:	693b      	ldr	r3, [r7, #16]
 801748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801748e:	693b      	ldr	r3, [r7, #16]
 8017490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017492:	429a      	cmp	r2, r3
 8017494:	d02c      	beq.n	80174f0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017496:	693b      	ldr	r3, [r7, #16]
 8017498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801749a:	2b00      	cmp	r3, #0
 801749c:	d128      	bne.n	80174f0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801749e:	693b      	ldr	r3, [r7, #16]
 80174a0:	3304      	adds	r3, #4
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7fe f90c 	bl	80156c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80174a8:	693b      	ldr	r3, [r7, #16]
 80174aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80174ac:	693b      	ldr	r3, [r7, #16]
 80174ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80174b8:	693b      	ldr	r3, [r7, #16]
 80174ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80174bc:	693b      	ldr	r3, [r7, #16]
 80174be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174c0:	4b0f      	ldr	r3, [pc, #60]	; (8017500 <xTaskPriorityDisinherit+0xd0>)
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	429a      	cmp	r2, r3
 80174c6:	d903      	bls.n	80174d0 <xTaskPriorityDisinherit+0xa0>
 80174c8:	693b      	ldr	r3, [r7, #16]
 80174ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174cc:	4a0c      	ldr	r2, [pc, #48]	; (8017500 <xTaskPriorityDisinherit+0xd0>)
 80174ce:	6013      	str	r3, [r2, #0]
 80174d0:	693b      	ldr	r3, [r7, #16]
 80174d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174d4:	4613      	mov	r3, r2
 80174d6:	009b      	lsls	r3, r3, #2
 80174d8:	4413      	add	r3, r2
 80174da:	009b      	lsls	r3, r3, #2
 80174dc:	4a09      	ldr	r2, [pc, #36]	; (8017504 <xTaskPriorityDisinherit+0xd4>)
 80174de:	441a      	add	r2, r3
 80174e0:	693b      	ldr	r3, [r7, #16]
 80174e2:	3304      	adds	r3, #4
 80174e4:	4619      	mov	r1, r3
 80174e6:	4610      	mov	r0, r2
 80174e8:	f7fe f88d 	bl	8015606 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80174ec:	2301      	movs	r3, #1
 80174ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80174f0:	697b      	ldr	r3, [r7, #20]
	}
 80174f2:	4618      	mov	r0, r3
 80174f4:	3718      	adds	r7, #24
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}
 80174fa:	bf00      	nop
 80174fc:	2000112c 	.word	0x2000112c
 8017500:	20001608 	.word	0x20001608
 8017504:	20001130 	.word	0x20001130

08017508 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017508:	b580      	push	{r7, lr}
 801750a:	b088      	sub	sp, #32
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
 8017510:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017516:	2301      	movs	r3, #1
 8017518:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d068      	beq.n	80175f2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017520:	69bb      	ldr	r3, [r7, #24]
 8017522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017524:	2b00      	cmp	r3, #0
 8017526:	d109      	bne.n	801753c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8017528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801752c:	f383 8811 	msr	BASEPRI, r3
 8017530:	f3bf 8f6f 	isb	sy
 8017534:	f3bf 8f4f 	dsb	sy
 8017538:	60fb      	str	r3, [r7, #12]
 801753a:	e7fe      	b.n	801753a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801753c:	69bb      	ldr	r3, [r7, #24]
 801753e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017540:	683a      	ldr	r2, [r7, #0]
 8017542:	429a      	cmp	r2, r3
 8017544:	d902      	bls.n	801754c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	61fb      	str	r3, [r7, #28]
 801754a:	e002      	b.n	8017552 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801754c:	69bb      	ldr	r3, [r7, #24]
 801754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017550:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017552:	69bb      	ldr	r3, [r7, #24]
 8017554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017556:	69fa      	ldr	r2, [r7, #28]
 8017558:	429a      	cmp	r2, r3
 801755a:	d04a      	beq.n	80175f2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801755c:	69bb      	ldr	r3, [r7, #24]
 801755e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017560:	697a      	ldr	r2, [r7, #20]
 8017562:	429a      	cmp	r2, r3
 8017564:	d145      	bne.n	80175f2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017566:	4b25      	ldr	r3, [pc, #148]	; (80175fc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	69ba      	ldr	r2, [r7, #24]
 801756c:	429a      	cmp	r2, r3
 801756e:	d109      	bne.n	8017584 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8017570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017574:	f383 8811 	msr	BASEPRI, r3
 8017578:	f3bf 8f6f 	isb	sy
 801757c:	f3bf 8f4f 	dsb	sy
 8017580:	60bb      	str	r3, [r7, #8]
 8017582:	e7fe      	b.n	8017582 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017584:	69bb      	ldr	r3, [r7, #24]
 8017586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017588:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801758a:	69bb      	ldr	r3, [r7, #24]
 801758c:	69fa      	ldr	r2, [r7, #28]
 801758e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017590:	69bb      	ldr	r3, [r7, #24]
 8017592:	699b      	ldr	r3, [r3, #24]
 8017594:	2b00      	cmp	r3, #0
 8017596:	db04      	blt.n	80175a2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017598:	69fb      	ldr	r3, [r7, #28]
 801759a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801759e:	69bb      	ldr	r3, [r7, #24]
 80175a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80175a2:	69bb      	ldr	r3, [r7, #24]
 80175a4:	6959      	ldr	r1, [r3, #20]
 80175a6:	693a      	ldr	r2, [r7, #16]
 80175a8:	4613      	mov	r3, r2
 80175aa:	009b      	lsls	r3, r3, #2
 80175ac:	4413      	add	r3, r2
 80175ae:	009b      	lsls	r3, r3, #2
 80175b0:	4a13      	ldr	r2, [pc, #76]	; (8017600 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80175b2:	4413      	add	r3, r2
 80175b4:	4299      	cmp	r1, r3
 80175b6:	d11c      	bne.n	80175f2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80175b8:	69bb      	ldr	r3, [r7, #24]
 80175ba:	3304      	adds	r3, #4
 80175bc:	4618      	mov	r0, r3
 80175be:	f7fe f87f 	bl	80156c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80175c2:	69bb      	ldr	r3, [r7, #24]
 80175c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175c6:	4b0f      	ldr	r3, [pc, #60]	; (8017604 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	429a      	cmp	r2, r3
 80175cc:	d903      	bls.n	80175d6 <vTaskPriorityDisinheritAfterTimeout+0xce>
 80175ce:	69bb      	ldr	r3, [r7, #24]
 80175d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175d2:	4a0c      	ldr	r2, [pc, #48]	; (8017604 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80175d4:	6013      	str	r3, [r2, #0]
 80175d6:	69bb      	ldr	r3, [r7, #24]
 80175d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175da:	4613      	mov	r3, r2
 80175dc:	009b      	lsls	r3, r3, #2
 80175de:	4413      	add	r3, r2
 80175e0:	009b      	lsls	r3, r3, #2
 80175e2:	4a07      	ldr	r2, [pc, #28]	; (8017600 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80175e4:	441a      	add	r2, r3
 80175e6:	69bb      	ldr	r3, [r7, #24]
 80175e8:	3304      	adds	r3, #4
 80175ea:	4619      	mov	r1, r3
 80175ec:	4610      	mov	r0, r2
 80175ee:	f7fe f80a 	bl	8015606 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80175f2:	bf00      	nop
 80175f4:	3720      	adds	r7, #32
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}
 80175fa:	bf00      	nop
 80175fc:	2000112c 	.word	0x2000112c
 8017600:	20001130 	.word	0x20001130
 8017604:	20001608 	.word	0x20001608

08017608 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017608:	b480      	push	{r7}
 801760a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801760c:	4b07      	ldr	r3, [pc, #28]	; (801762c <pvTaskIncrementMutexHeldCount+0x24>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d004      	beq.n	801761e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017614:	4b05      	ldr	r3, [pc, #20]	; (801762c <pvTaskIncrementMutexHeldCount+0x24>)
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801761a:	3201      	adds	r2, #1
 801761c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801761e:	4b03      	ldr	r3, [pc, #12]	; (801762c <pvTaskIncrementMutexHeldCount+0x24>)
 8017620:	681b      	ldr	r3, [r3, #0]
	}
 8017622:	4618      	mov	r0, r3
 8017624:	46bd      	mov	sp, r7
 8017626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762a:	4770      	bx	lr
 801762c:	2000112c 	.word	0x2000112c

08017630 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b084      	sub	sp, #16
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
 8017638:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801763a:	4b21      	ldr	r3, [pc, #132]	; (80176c0 <prvAddCurrentTaskToDelayedList+0x90>)
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017640:	4b20      	ldr	r3, [pc, #128]	; (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	3304      	adds	r3, #4
 8017646:	4618      	mov	r0, r3
 8017648:	f7fe f83a 	bl	80156c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017652:	d10a      	bne.n	801766a <prvAddCurrentTaskToDelayedList+0x3a>
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d007      	beq.n	801766a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801765a:	4b1a      	ldr	r3, [pc, #104]	; (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	3304      	adds	r3, #4
 8017660:	4619      	mov	r1, r3
 8017662:	4819      	ldr	r0, [pc, #100]	; (80176c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8017664:	f7fd ffcf 	bl	8015606 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017668:	e026      	b.n	80176b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801766a:	68fa      	ldr	r2, [r7, #12]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	4413      	add	r3, r2
 8017670:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017672:	4b14      	ldr	r3, [pc, #80]	; (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	68ba      	ldr	r2, [r7, #8]
 8017678:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801767a:	68ba      	ldr	r2, [r7, #8]
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	429a      	cmp	r2, r3
 8017680:	d209      	bcs.n	8017696 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017682:	4b12      	ldr	r3, [pc, #72]	; (80176cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	4b0f      	ldr	r3, [pc, #60]	; (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	3304      	adds	r3, #4
 801768c:	4619      	mov	r1, r3
 801768e:	4610      	mov	r0, r2
 8017690:	f7fd ffdd 	bl	801564e <vListInsert>
}
 8017694:	e010      	b.n	80176b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017696:	4b0e      	ldr	r3, [pc, #56]	; (80176d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017698:	681a      	ldr	r2, [r3, #0]
 801769a:	4b0a      	ldr	r3, [pc, #40]	; (80176c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	3304      	adds	r3, #4
 80176a0:	4619      	mov	r1, r3
 80176a2:	4610      	mov	r0, r2
 80176a4:	f7fd ffd3 	bl	801564e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80176a8:	4b0a      	ldr	r3, [pc, #40]	; (80176d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	68ba      	ldr	r2, [r7, #8]
 80176ae:	429a      	cmp	r2, r3
 80176b0:	d202      	bcs.n	80176b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80176b2:	4a08      	ldr	r2, [pc, #32]	; (80176d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	6013      	str	r3, [r2, #0]
}
 80176b8:	bf00      	nop
 80176ba:	3710      	adds	r7, #16
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd80      	pop	{r7, pc}
 80176c0:	20001604 	.word	0x20001604
 80176c4:	2000112c 	.word	0x2000112c
 80176c8:	200015ec 	.word	0x200015ec
 80176cc:	200015bc 	.word	0x200015bc
 80176d0:	200015b8 	.word	0x200015b8
 80176d4:	20001620 	.word	0x20001620

080176d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b08a      	sub	sp, #40	; 0x28
 80176dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80176de:	2300      	movs	r3, #0
 80176e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80176e2:	f000 fb5b 	bl	8017d9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80176e6:	4b1c      	ldr	r3, [pc, #112]	; (8017758 <xTimerCreateTimerTask+0x80>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d021      	beq.n	8017732 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80176ee:	2300      	movs	r3, #0
 80176f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80176f2:	2300      	movs	r3, #0
 80176f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80176f6:	1d3a      	adds	r2, r7, #4
 80176f8:	f107 0108 	add.w	r1, r7, #8
 80176fc:	f107 030c 	add.w	r3, r7, #12
 8017700:	4618      	mov	r0, r3
 8017702:	f7fd ff39 	bl	8015578 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017706:	6879      	ldr	r1, [r7, #4]
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	68fa      	ldr	r2, [r7, #12]
 801770c:	9202      	str	r2, [sp, #8]
 801770e:	9301      	str	r3, [sp, #4]
 8017710:	2302      	movs	r3, #2
 8017712:	9300      	str	r3, [sp, #0]
 8017714:	2300      	movs	r3, #0
 8017716:	460a      	mov	r2, r1
 8017718:	4910      	ldr	r1, [pc, #64]	; (801775c <xTimerCreateTimerTask+0x84>)
 801771a:	4811      	ldr	r0, [pc, #68]	; (8017760 <xTimerCreateTimerTask+0x88>)
 801771c:	f7fe ffe8 	bl	80166f0 <xTaskCreateStatic>
 8017720:	4602      	mov	r2, r0
 8017722:	4b10      	ldr	r3, [pc, #64]	; (8017764 <xTimerCreateTimerTask+0x8c>)
 8017724:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017726:	4b0f      	ldr	r3, [pc, #60]	; (8017764 <xTimerCreateTimerTask+0x8c>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d001      	beq.n	8017732 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801772e:	2301      	movs	r3, #1
 8017730:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017732:	697b      	ldr	r3, [r7, #20]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d109      	bne.n	801774c <xTimerCreateTimerTask+0x74>
 8017738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801773c:	f383 8811 	msr	BASEPRI, r3
 8017740:	f3bf 8f6f 	isb	sy
 8017744:	f3bf 8f4f 	dsb	sy
 8017748:	613b      	str	r3, [r7, #16]
 801774a:	e7fe      	b.n	801774a <xTimerCreateTimerTask+0x72>
	return xReturn;
 801774c:	697b      	ldr	r3, [r7, #20]
}
 801774e:	4618      	mov	r0, r3
 8017750:	3718      	adds	r7, #24
 8017752:	46bd      	mov	sp, r7
 8017754:	bd80      	pop	{r7, pc}
 8017756:	bf00      	nop
 8017758:	2000165c 	.word	0x2000165c
 801775c:	0801e040 	.word	0x0801e040
 8017760:	08017951 	.word	0x08017951
 8017764:	20001660 	.word	0x20001660

08017768 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8017768:	b580      	push	{r7, lr}
 801776a:	b088      	sub	sp, #32
 801776c:	af02      	add	r7, sp, #8
 801776e:	60f8      	str	r0, [r7, #12]
 8017770:	60b9      	str	r1, [r7, #8]
 8017772:	607a      	str	r2, [r7, #4]
 8017774:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8017776:	202c      	movs	r0, #44	; 0x2c
 8017778:	f000 fd92 	bl	80182a0 <pvPortMalloc>
 801777c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801777e:	697b      	ldr	r3, [r7, #20]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d00d      	beq.n	80177a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8017784:	697b      	ldr	r3, [r7, #20]
 8017786:	2200      	movs	r2, #0
 8017788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	9301      	str	r3, [sp, #4]
 8017790:	6a3b      	ldr	r3, [r7, #32]
 8017792:	9300      	str	r3, [sp, #0]
 8017794:	683b      	ldr	r3, [r7, #0]
 8017796:	687a      	ldr	r2, [r7, #4]
 8017798:	68b9      	ldr	r1, [r7, #8]
 801779a:	68f8      	ldr	r0, [r7, #12]
 801779c:	f000 f805 	bl	80177aa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80177a0:	697b      	ldr	r3, [r7, #20]
	}
 80177a2:	4618      	mov	r0, r3
 80177a4:	3718      	adds	r7, #24
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}

080177aa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80177aa:	b580      	push	{r7, lr}
 80177ac:	b086      	sub	sp, #24
 80177ae:	af00      	add	r7, sp, #0
 80177b0:	60f8      	str	r0, [r7, #12]
 80177b2:	60b9      	str	r1, [r7, #8]
 80177b4:	607a      	str	r2, [r7, #4]
 80177b6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80177b8:	68bb      	ldr	r3, [r7, #8]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d109      	bne.n	80177d2 <prvInitialiseNewTimer+0x28>
 80177be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177c2:	f383 8811 	msr	BASEPRI, r3
 80177c6:	f3bf 8f6f 	isb	sy
 80177ca:	f3bf 8f4f 	dsb	sy
 80177ce:	617b      	str	r3, [r7, #20]
 80177d0:	e7fe      	b.n	80177d0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80177d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d01e      	beq.n	8017816 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80177d8:	f000 fae0 	bl	8017d9c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80177dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177de:	68fa      	ldr	r2, [r7, #12]
 80177e0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80177e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e4:	68ba      	ldr	r2, [r7, #8]
 80177e6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80177e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ea:	683a      	ldr	r2, [r7, #0]
 80177ec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80177ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f0:	6a3a      	ldr	r2, [r7, #32]
 80177f2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80177f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f6:	3304      	adds	r3, #4
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fd fef7 	bl	80155ec <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d008      	beq.n	8017816 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8017804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801780a:	f043 0304 	orr.w	r3, r3, #4
 801780e:	b2da      	uxtb	r2, r3
 8017810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8017816:	bf00      	nop
 8017818:	3718      	adds	r7, #24
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}
	...

08017820 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b08a      	sub	sp, #40	; 0x28
 8017824:	af00      	add	r7, sp, #0
 8017826:	60f8      	str	r0, [r7, #12]
 8017828:	60b9      	str	r1, [r7, #8]
 801782a:	607a      	str	r2, [r7, #4]
 801782c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801782e:	2300      	movs	r3, #0
 8017830:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d109      	bne.n	801784c <xTimerGenericCommand+0x2c>
 8017838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801783c:	f383 8811 	msr	BASEPRI, r3
 8017840:	f3bf 8f6f 	isb	sy
 8017844:	f3bf 8f4f 	dsb	sy
 8017848:	623b      	str	r3, [r7, #32]
 801784a:	e7fe      	b.n	801784a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801784c:	4b19      	ldr	r3, [pc, #100]	; (80178b4 <xTimerGenericCommand+0x94>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d02a      	beq.n	80178aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017854:	68bb      	ldr	r3, [r7, #8]
 8017856:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017860:	68bb      	ldr	r3, [r7, #8]
 8017862:	2b05      	cmp	r3, #5
 8017864:	dc18      	bgt.n	8017898 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017866:	f7ff fd5d 	bl	8017324 <xTaskGetSchedulerState>
 801786a:	4603      	mov	r3, r0
 801786c:	2b02      	cmp	r3, #2
 801786e:	d109      	bne.n	8017884 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017870:	4b10      	ldr	r3, [pc, #64]	; (80178b4 <xTimerGenericCommand+0x94>)
 8017872:	6818      	ldr	r0, [r3, #0]
 8017874:	f107 0110 	add.w	r1, r7, #16
 8017878:	2300      	movs	r3, #0
 801787a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801787c:	f7fe f8ee 	bl	8015a5c <xQueueGenericSend>
 8017880:	6278      	str	r0, [r7, #36]	; 0x24
 8017882:	e012      	b.n	80178aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017884:	4b0b      	ldr	r3, [pc, #44]	; (80178b4 <xTimerGenericCommand+0x94>)
 8017886:	6818      	ldr	r0, [r3, #0]
 8017888:	f107 0110 	add.w	r1, r7, #16
 801788c:	2300      	movs	r3, #0
 801788e:	2200      	movs	r2, #0
 8017890:	f7fe f8e4 	bl	8015a5c <xQueueGenericSend>
 8017894:	6278      	str	r0, [r7, #36]	; 0x24
 8017896:	e008      	b.n	80178aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017898:	4b06      	ldr	r3, [pc, #24]	; (80178b4 <xTimerGenericCommand+0x94>)
 801789a:	6818      	ldr	r0, [r3, #0]
 801789c:	f107 0110 	add.w	r1, r7, #16
 80178a0:	2300      	movs	r3, #0
 80178a2:	683a      	ldr	r2, [r7, #0]
 80178a4:	f7fe f9d4 	bl	8015c50 <xQueueGenericSendFromISR>
 80178a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80178aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80178ac:	4618      	mov	r0, r3
 80178ae:	3728      	adds	r7, #40	; 0x28
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}
 80178b4:	2000165c 	.word	0x2000165c

080178b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b088      	sub	sp, #32
 80178bc:	af02      	add	r7, sp, #8
 80178be:	6078      	str	r0, [r7, #4]
 80178c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80178c2:	4b22      	ldr	r3, [pc, #136]	; (801794c <prvProcessExpiredTimer+0x94>)
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	68db      	ldr	r3, [r3, #12]
 80178c8:	68db      	ldr	r3, [r3, #12]
 80178ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80178cc:	697b      	ldr	r3, [r7, #20]
 80178ce:	3304      	adds	r3, #4
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7fd fef5 	bl	80156c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80178d6:	697b      	ldr	r3, [r7, #20]
 80178d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80178dc:	f003 0304 	and.w	r3, r3, #4
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d021      	beq.n	8017928 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	699a      	ldr	r2, [r3, #24]
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	18d1      	adds	r1, r2, r3
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	683a      	ldr	r2, [r7, #0]
 80178f0:	6978      	ldr	r0, [r7, #20]
 80178f2:	f000 f8d1 	bl	8017a98 <prvInsertTimerInActiveList>
 80178f6:	4603      	mov	r3, r0
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d01e      	beq.n	801793a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80178fc:	2300      	movs	r3, #0
 80178fe:	9300      	str	r3, [sp, #0]
 8017900:	2300      	movs	r3, #0
 8017902:	687a      	ldr	r2, [r7, #4]
 8017904:	2100      	movs	r1, #0
 8017906:	6978      	ldr	r0, [r7, #20]
 8017908:	f7ff ff8a 	bl	8017820 <xTimerGenericCommand>
 801790c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801790e:	693b      	ldr	r3, [r7, #16]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d112      	bne.n	801793a <prvProcessExpiredTimer+0x82>
 8017914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017918:	f383 8811 	msr	BASEPRI, r3
 801791c:	f3bf 8f6f 	isb	sy
 8017920:	f3bf 8f4f 	dsb	sy
 8017924:	60fb      	str	r3, [r7, #12]
 8017926:	e7fe      	b.n	8017926 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017928:	697b      	ldr	r3, [r7, #20]
 801792a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801792e:	f023 0301 	bic.w	r3, r3, #1
 8017932:	b2da      	uxtb	r2, r3
 8017934:	697b      	ldr	r3, [r7, #20]
 8017936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801793a:	697b      	ldr	r3, [r7, #20]
 801793c:	6a1b      	ldr	r3, [r3, #32]
 801793e:	6978      	ldr	r0, [r7, #20]
 8017940:	4798      	blx	r3
}
 8017942:	bf00      	nop
 8017944:	3718      	adds	r7, #24
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}
 801794a:	bf00      	nop
 801794c:	20001654 	.word	0x20001654

08017950 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b084      	sub	sp, #16
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017958:	f107 0308 	add.w	r3, r7, #8
 801795c:	4618      	mov	r0, r3
 801795e:	f000 f857 	bl	8017a10 <prvGetNextExpireTime>
 8017962:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	4619      	mov	r1, r3
 8017968:	68f8      	ldr	r0, [r7, #12]
 801796a:	f000 f803 	bl	8017974 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801796e:	f000 f8d5 	bl	8017b1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017972:	e7f1      	b.n	8017958 <prvTimerTask+0x8>

08017974 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b084      	sub	sp, #16
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
 801797c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801797e:	f7ff f8ed 	bl	8016b5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017982:	f107 0308 	add.w	r3, r7, #8
 8017986:	4618      	mov	r0, r3
 8017988:	f000 f866 	bl	8017a58 <prvSampleTimeNow>
 801798c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d130      	bne.n	80179f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d10a      	bne.n	80179b0 <prvProcessTimerOrBlockTask+0x3c>
 801799a:	687a      	ldr	r2, [r7, #4]
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	429a      	cmp	r2, r3
 80179a0:	d806      	bhi.n	80179b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80179a2:	f7ff f8e9 	bl	8016b78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80179a6:	68f9      	ldr	r1, [r7, #12]
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	f7ff ff85 	bl	80178b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80179ae:	e024      	b.n	80179fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d008      	beq.n	80179c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80179b6:	4b13      	ldr	r3, [pc, #76]	; (8017a04 <prvProcessTimerOrBlockTask+0x90>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d101      	bne.n	80179c4 <prvProcessTimerOrBlockTask+0x50>
 80179c0:	2301      	movs	r3, #1
 80179c2:	e000      	b.n	80179c6 <prvProcessTimerOrBlockTask+0x52>
 80179c4:	2300      	movs	r3, #0
 80179c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80179c8:	4b0f      	ldr	r3, [pc, #60]	; (8017a08 <prvProcessTimerOrBlockTask+0x94>)
 80179ca:	6818      	ldr	r0, [r3, #0]
 80179cc:	687a      	ldr	r2, [r7, #4]
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	1ad3      	subs	r3, r2, r3
 80179d2:	683a      	ldr	r2, [r7, #0]
 80179d4:	4619      	mov	r1, r3
 80179d6:	f7fe fe57 	bl	8016688 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80179da:	f7ff f8cd 	bl	8016b78 <xTaskResumeAll>
 80179de:	4603      	mov	r3, r0
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d10a      	bne.n	80179fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80179e4:	4b09      	ldr	r3, [pc, #36]	; (8017a0c <prvProcessTimerOrBlockTask+0x98>)
 80179e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179ea:	601a      	str	r2, [r3, #0]
 80179ec:	f3bf 8f4f 	dsb	sy
 80179f0:	f3bf 8f6f 	isb	sy
}
 80179f4:	e001      	b.n	80179fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80179f6:	f7ff f8bf 	bl	8016b78 <xTaskResumeAll>
}
 80179fa:	bf00      	nop
 80179fc:	3710      	adds	r7, #16
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}
 8017a02:	bf00      	nop
 8017a04:	20001658 	.word	0x20001658
 8017a08:	2000165c 	.word	0x2000165c
 8017a0c:	e000ed04 	.word	0xe000ed04

08017a10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017a10:	b480      	push	{r7}
 8017a12:	b085      	sub	sp, #20
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017a18:	4b0e      	ldr	r3, [pc, #56]	; (8017a54 <prvGetNextExpireTime+0x44>)
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d101      	bne.n	8017a26 <prvGetNextExpireTime+0x16>
 8017a22:	2201      	movs	r2, #1
 8017a24:	e000      	b.n	8017a28 <prvGetNextExpireTime+0x18>
 8017a26:	2200      	movs	r2, #0
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d105      	bne.n	8017a40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017a34:	4b07      	ldr	r3, [pc, #28]	; (8017a54 <prvGetNextExpireTime+0x44>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	68db      	ldr	r3, [r3, #12]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	60fb      	str	r3, [r7, #12]
 8017a3e:	e001      	b.n	8017a44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017a40:	2300      	movs	r3, #0
 8017a42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017a44:	68fb      	ldr	r3, [r7, #12]
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3714      	adds	r7, #20
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a50:	4770      	bx	lr
 8017a52:	bf00      	nop
 8017a54:	20001654 	.word	0x20001654

08017a58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b084      	sub	sp, #16
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017a60:	f7ff f926 	bl	8016cb0 <xTaskGetTickCount>
 8017a64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017a66:	4b0b      	ldr	r3, [pc, #44]	; (8017a94 <prvSampleTimeNow+0x3c>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	68fa      	ldr	r2, [r7, #12]
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	d205      	bcs.n	8017a7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017a70:	f000 f930 	bl	8017cd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2201      	movs	r2, #1
 8017a78:	601a      	str	r2, [r3, #0]
 8017a7a:	e002      	b.n	8017a82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2200      	movs	r2, #0
 8017a80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017a82:	4a04      	ldr	r2, [pc, #16]	; (8017a94 <prvSampleTimeNow+0x3c>)
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017a88:	68fb      	ldr	r3, [r7, #12]
}
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	3710      	adds	r7, #16
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	bd80      	pop	{r7, pc}
 8017a92:	bf00      	nop
 8017a94:	20001664 	.word	0x20001664

08017a98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b086      	sub	sp, #24
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	60f8      	str	r0, [r7, #12]
 8017aa0:	60b9      	str	r1, [r7, #8]
 8017aa2:	607a      	str	r2, [r7, #4]
 8017aa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	68ba      	ldr	r2, [r7, #8]
 8017aae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	68fa      	ldr	r2, [r7, #12]
 8017ab4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017ab6:	68ba      	ldr	r2, [r7, #8]
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	429a      	cmp	r2, r3
 8017abc:	d812      	bhi.n	8017ae4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017abe:	687a      	ldr	r2, [r7, #4]
 8017ac0:	683b      	ldr	r3, [r7, #0]
 8017ac2:	1ad2      	subs	r2, r2, r3
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	699b      	ldr	r3, [r3, #24]
 8017ac8:	429a      	cmp	r2, r3
 8017aca:	d302      	bcc.n	8017ad2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017acc:	2301      	movs	r3, #1
 8017ace:	617b      	str	r3, [r7, #20]
 8017ad0:	e01b      	b.n	8017b0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017ad2:	4b10      	ldr	r3, [pc, #64]	; (8017b14 <prvInsertTimerInActiveList+0x7c>)
 8017ad4:	681a      	ldr	r2, [r3, #0]
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	3304      	adds	r3, #4
 8017ada:	4619      	mov	r1, r3
 8017adc:	4610      	mov	r0, r2
 8017ade:	f7fd fdb6 	bl	801564e <vListInsert>
 8017ae2:	e012      	b.n	8017b0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017ae4:	687a      	ldr	r2, [r7, #4]
 8017ae6:	683b      	ldr	r3, [r7, #0]
 8017ae8:	429a      	cmp	r2, r3
 8017aea:	d206      	bcs.n	8017afa <prvInsertTimerInActiveList+0x62>
 8017aec:	68ba      	ldr	r2, [r7, #8]
 8017aee:	683b      	ldr	r3, [r7, #0]
 8017af0:	429a      	cmp	r2, r3
 8017af2:	d302      	bcc.n	8017afa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017af4:	2301      	movs	r3, #1
 8017af6:	617b      	str	r3, [r7, #20]
 8017af8:	e007      	b.n	8017b0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017afa:	4b07      	ldr	r3, [pc, #28]	; (8017b18 <prvInsertTimerInActiveList+0x80>)
 8017afc:	681a      	ldr	r2, [r3, #0]
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	3304      	adds	r3, #4
 8017b02:	4619      	mov	r1, r3
 8017b04:	4610      	mov	r0, r2
 8017b06:	f7fd fda2 	bl	801564e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017b0a:	697b      	ldr	r3, [r7, #20]
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3718      	adds	r7, #24
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}
 8017b14:	20001658 	.word	0x20001658
 8017b18:	20001654 	.word	0x20001654

08017b1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b08e      	sub	sp, #56	; 0x38
 8017b20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017b22:	e0c6      	b.n	8017cb2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	da17      	bge.n	8017b5a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017b2a:	1d3b      	adds	r3, r7, #4
 8017b2c:	3304      	adds	r3, #4
 8017b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d109      	bne.n	8017b4a <prvProcessReceivedCommands+0x2e>
 8017b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b3a:	f383 8811 	msr	BASEPRI, r3
 8017b3e:	f3bf 8f6f 	isb	sy
 8017b42:	f3bf 8f4f 	dsb	sy
 8017b46:	61fb      	str	r3, [r7, #28]
 8017b48:	e7fe      	b.n	8017b48 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b50:	6850      	ldr	r0, [r2, #4]
 8017b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b54:	6892      	ldr	r2, [r2, #8]
 8017b56:	4611      	mov	r1, r2
 8017b58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	f2c0 80a7 	blt.w	8017cb0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b68:	695b      	ldr	r3, [r3, #20]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d004      	beq.n	8017b78 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b70:	3304      	adds	r3, #4
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7fd fda4 	bl	80156c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017b78:	463b      	mov	r3, r7
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f7ff ff6c 	bl	8017a58 <prvSampleTimeNow>
 8017b80:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	2b09      	cmp	r3, #9
 8017b86:	f200 8094 	bhi.w	8017cb2 <prvProcessReceivedCommands+0x196>
 8017b8a:	a201      	add	r2, pc, #4	; (adr r2, 8017b90 <prvProcessReceivedCommands+0x74>)
 8017b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b90:	08017bb9 	.word	0x08017bb9
 8017b94:	08017bb9 	.word	0x08017bb9
 8017b98:	08017bb9 	.word	0x08017bb9
 8017b9c:	08017c2b 	.word	0x08017c2b
 8017ba0:	08017c3f 	.word	0x08017c3f
 8017ba4:	08017c87 	.word	0x08017c87
 8017ba8:	08017bb9 	.word	0x08017bb9
 8017bac:	08017bb9 	.word	0x08017bb9
 8017bb0:	08017c2b 	.word	0x08017c2b
 8017bb4:	08017c3f 	.word	0x08017c3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017bbe:	f043 0301 	orr.w	r3, r3, #1
 8017bc2:	b2da      	uxtb	r2, r3
 8017bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017bca:	68ba      	ldr	r2, [r7, #8]
 8017bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bce:	699b      	ldr	r3, [r3, #24]
 8017bd0:	18d1      	adds	r1, r2, r3
 8017bd2:	68bb      	ldr	r3, [r7, #8]
 8017bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017bd8:	f7ff ff5e 	bl	8017a98 <prvInsertTimerInActiveList>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d067      	beq.n	8017cb2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be4:	6a1b      	ldr	r3, [r3, #32]
 8017be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017be8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017bf0:	f003 0304 	and.w	r3, r3, #4
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d05c      	beq.n	8017cb2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017bf8:	68ba      	ldr	r2, [r7, #8]
 8017bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bfc:	699b      	ldr	r3, [r3, #24]
 8017bfe:	441a      	add	r2, r3
 8017c00:	2300      	movs	r3, #0
 8017c02:	9300      	str	r3, [sp, #0]
 8017c04:	2300      	movs	r3, #0
 8017c06:	2100      	movs	r1, #0
 8017c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c0a:	f7ff fe09 	bl	8017820 <xTimerGenericCommand>
 8017c0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017c10:	6a3b      	ldr	r3, [r7, #32]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d14d      	bne.n	8017cb2 <prvProcessReceivedCommands+0x196>
 8017c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c1a:	f383 8811 	msr	BASEPRI, r3
 8017c1e:	f3bf 8f6f 	isb	sy
 8017c22:	f3bf 8f4f 	dsb	sy
 8017c26:	61bb      	str	r3, [r7, #24]
 8017c28:	e7fe      	b.n	8017c28 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c30:	f023 0301 	bic.w	r3, r3, #1
 8017c34:	b2da      	uxtb	r2, r3
 8017c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017c3c:	e039      	b.n	8017cb2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c44:	f043 0301 	orr.w	r3, r3, #1
 8017c48:	b2da      	uxtb	r2, r3
 8017c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017c50:	68ba      	ldr	r2, [r7, #8]
 8017c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c58:	699b      	ldr	r3, [r3, #24]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d109      	bne.n	8017c72 <prvProcessReceivedCommands+0x156>
 8017c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c62:	f383 8811 	msr	BASEPRI, r3
 8017c66:	f3bf 8f6f 	isb	sy
 8017c6a:	f3bf 8f4f 	dsb	sy
 8017c6e:	617b      	str	r3, [r7, #20]
 8017c70:	e7fe      	b.n	8017c70 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c74:	699a      	ldr	r2, [r3, #24]
 8017c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c78:	18d1      	adds	r1, r2, r3
 8017c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c80:	f7ff ff0a 	bl	8017a98 <prvInsertTimerInActiveList>
					break;
 8017c84:	e015      	b.n	8017cb2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c8c:	f003 0302 	and.w	r3, r3, #2
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d103      	bne.n	8017c9c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8017c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c96:	f000 fbc5 	bl	8018424 <vPortFree>
 8017c9a:	e00a      	b.n	8017cb2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ca2:	f023 0301 	bic.w	r3, r3, #1
 8017ca6:	b2da      	uxtb	r2, r3
 8017ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017cae:	e000      	b.n	8017cb2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017cb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017cb2:	4b07      	ldr	r3, [pc, #28]	; (8017cd0 <prvProcessReceivedCommands+0x1b4>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	1d39      	adds	r1, r7, #4
 8017cb8:	2200      	movs	r2, #0
 8017cba:	4618      	mov	r0, r3
 8017cbc:	f7fe f8e6 	bl	8015e8c <xQueueReceive>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	f47f af2e 	bne.w	8017b24 <prvProcessReceivedCommands+0x8>
	}
}
 8017cc8:	bf00      	nop
 8017cca:	3730      	adds	r7, #48	; 0x30
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}
 8017cd0:	2000165c 	.word	0x2000165c

08017cd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b088      	sub	sp, #32
 8017cd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017cda:	e047      	b.n	8017d6c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017cdc:	4b2d      	ldr	r3, [pc, #180]	; (8017d94 <prvSwitchTimerLists+0xc0>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	68db      	ldr	r3, [r3, #12]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ce6:	4b2b      	ldr	r3, [pc, #172]	; (8017d94 <prvSwitchTimerLists+0xc0>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	68db      	ldr	r3, [r3, #12]
 8017cec:	68db      	ldr	r3, [r3, #12]
 8017cee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	3304      	adds	r3, #4
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f7fd fce3 	bl	80156c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	6a1b      	ldr	r3, [r3, #32]
 8017cfe:	68f8      	ldr	r0, [r7, #12]
 8017d00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d08:	f003 0304 	and.w	r3, r3, #4
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d02d      	beq.n	8017d6c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	699b      	ldr	r3, [r3, #24]
 8017d14:	693a      	ldr	r2, [r7, #16]
 8017d16:	4413      	add	r3, r2
 8017d18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017d1a:	68ba      	ldr	r2, [r7, #8]
 8017d1c:	693b      	ldr	r3, [r7, #16]
 8017d1e:	429a      	cmp	r2, r3
 8017d20:	d90e      	bls.n	8017d40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	68ba      	ldr	r2, [r7, #8]
 8017d26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	68fa      	ldr	r2, [r7, #12]
 8017d2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017d2e:	4b19      	ldr	r3, [pc, #100]	; (8017d94 <prvSwitchTimerLists+0xc0>)
 8017d30:	681a      	ldr	r2, [r3, #0]
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	3304      	adds	r3, #4
 8017d36:	4619      	mov	r1, r3
 8017d38:	4610      	mov	r0, r2
 8017d3a:	f7fd fc88 	bl	801564e <vListInsert>
 8017d3e:	e015      	b.n	8017d6c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017d40:	2300      	movs	r3, #0
 8017d42:	9300      	str	r3, [sp, #0]
 8017d44:	2300      	movs	r3, #0
 8017d46:	693a      	ldr	r2, [r7, #16]
 8017d48:	2100      	movs	r1, #0
 8017d4a:	68f8      	ldr	r0, [r7, #12]
 8017d4c:	f7ff fd68 	bl	8017820 <xTimerGenericCommand>
 8017d50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d109      	bne.n	8017d6c <prvSwitchTimerLists+0x98>
 8017d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d5c:	f383 8811 	msr	BASEPRI, r3
 8017d60:	f3bf 8f6f 	isb	sy
 8017d64:	f3bf 8f4f 	dsb	sy
 8017d68:	603b      	str	r3, [r7, #0]
 8017d6a:	e7fe      	b.n	8017d6a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017d6c:	4b09      	ldr	r3, [pc, #36]	; (8017d94 <prvSwitchTimerLists+0xc0>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d1b2      	bne.n	8017cdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017d76:	4b07      	ldr	r3, [pc, #28]	; (8017d94 <prvSwitchTimerLists+0xc0>)
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017d7c:	4b06      	ldr	r3, [pc, #24]	; (8017d98 <prvSwitchTimerLists+0xc4>)
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	4a04      	ldr	r2, [pc, #16]	; (8017d94 <prvSwitchTimerLists+0xc0>)
 8017d82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017d84:	4a04      	ldr	r2, [pc, #16]	; (8017d98 <prvSwitchTimerLists+0xc4>)
 8017d86:	697b      	ldr	r3, [r7, #20]
 8017d88:	6013      	str	r3, [r2, #0]
}
 8017d8a:	bf00      	nop
 8017d8c:	3718      	adds	r7, #24
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
 8017d92:	bf00      	nop
 8017d94:	20001654 	.word	0x20001654
 8017d98:	20001658 	.word	0x20001658

08017d9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017da2:	f000 f963 	bl	801806c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017da6:	4b15      	ldr	r3, [pc, #84]	; (8017dfc <prvCheckForValidListAndQueue+0x60>)
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d120      	bne.n	8017df0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017dae:	4814      	ldr	r0, [pc, #80]	; (8017e00 <prvCheckForValidListAndQueue+0x64>)
 8017db0:	f7fd fbfc 	bl	80155ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017db4:	4813      	ldr	r0, [pc, #76]	; (8017e04 <prvCheckForValidListAndQueue+0x68>)
 8017db6:	f7fd fbf9 	bl	80155ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017dba:	4b13      	ldr	r3, [pc, #76]	; (8017e08 <prvCheckForValidListAndQueue+0x6c>)
 8017dbc:	4a10      	ldr	r2, [pc, #64]	; (8017e00 <prvCheckForValidListAndQueue+0x64>)
 8017dbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017dc0:	4b12      	ldr	r3, [pc, #72]	; (8017e0c <prvCheckForValidListAndQueue+0x70>)
 8017dc2:	4a10      	ldr	r2, [pc, #64]	; (8017e04 <prvCheckForValidListAndQueue+0x68>)
 8017dc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	9300      	str	r3, [sp, #0]
 8017dca:	4b11      	ldr	r3, [pc, #68]	; (8017e10 <prvCheckForValidListAndQueue+0x74>)
 8017dcc:	4a11      	ldr	r2, [pc, #68]	; (8017e14 <prvCheckForValidListAndQueue+0x78>)
 8017dce:	2110      	movs	r1, #16
 8017dd0:	200a      	movs	r0, #10
 8017dd2:	f7fd fd07 	bl	80157e4 <xQueueGenericCreateStatic>
 8017dd6:	4602      	mov	r2, r0
 8017dd8:	4b08      	ldr	r3, [pc, #32]	; (8017dfc <prvCheckForValidListAndQueue+0x60>)
 8017dda:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017ddc:	4b07      	ldr	r3, [pc, #28]	; (8017dfc <prvCheckForValidListAndQueue+0x60>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d005      	beq.n	8017df0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017de4:	4b05      	ldr	r3, [pc, #20]	; (8017dfc <prvCheckForValidListAndQueue+0x60>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	490b      	ldr	r1, [pc, #44]	; (8017e18 <prvCheckForValidListAndQueue+0x7c>)
 8017dea:	4618      	mov	r0, r3
 8017dec:	f7fe fbfa 	bl	80165e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017df0:	f000 f96a 	bl	80180c8 <vPortExitCritical>
}
 8017df4:	bf00      	nop
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	2000165c 	.word	0x2000165c
 8017e00:	2000162c 	.word	0x2000162c
 8017e04:	20001640 	.word	0x20001640
 8017e08:	20001654 	.word	0x20001654
 8017e0c:	20001658 	.word	0x20001658
 8017e10:	20001708 	.word	0x20001708
 8017e14:	20001668 	.word	0x20001668
 8017e18:	0801e048 	.word	0x0801e048

08017e1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017e1c:	b480      	push	{r7}
 8017e1e:	b085      	sub	sp, #20
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	60f8      	str	r0, [r7, #12]
 8017e24:	60b9      	str	r1, [r7, #8]
 8017e26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	3b04      	subs	r3, #4
 8017e2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	3b04      	subs	r3, #4
 8017e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017e3c:	68bb      	ldr	r3, [r7, #8]
 8017e3e:	f023 0201 	bic.w	r2, r3, #1
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	3b04      	subs	r3, #4
 8017e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017e4c:	4a0c      	ldr	r2, [pc, #48]	; (8017e80 <pxPortInitialiseStack+0x64>)
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	3b14      	subs	r3, #20
 8017e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017e58:	687a      	ldr	r2, [r7, #4]
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	3b04      	subs	r3, #4
 8017e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	f06f 0202 	mvn.w	r2, #2
 8017e6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	3b20      	subs	r3, #32
 8017e70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017e72:	68fb      	ldr	r3, [r7, #12]
}
 8017e74:	4618      	mov	r0, r3
 8017e76:	3714      	adds	r7, #20
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7e:	4770      	bx	lr
 8017e80:	08017e85 	.word	0x08017e85

08017e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017e84:	b480      	push	{r7}
 8017e86:	b085      	sub	sp, #20
 8017e88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017e8e:	4b11      	ldr	r3, [pc, #68]	; (8017ed4 <prvTaskExitError+0x50>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e96:	d009      	beq.n	8017eac <prvTaskExitError+0x28>
 8017e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e9c:	f383 8811 	msr	BASEPRI, r3
 8017ea0:	f3bf 8f6f 	isb	sy
 8017ea4:	f3bf 8f4f 	dsb	sy
 8017ea8:	60fb      	str	r3, [r7, #12]
 8017eaa:	e7fe      	b.n	8017eaa <prvTaskExitError+0x26>
 8017eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eb0:	f383 8811 	msr	BASEPRI, r3
 8017eb4:	f3bf 8f6f 	isb	sy
 8017eb8:	f3bf 8f4f 	dsb	sy
 8017ebc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017ebe:	bf00      	nop
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d0fc      	beq.n	8017ec0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017ec6:	bf00      	nop
 8017ec8:	3714      	adds	r7, #20
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed0:	4770      	bx	lr
 8017ed2:	bf00      	nop
 8017ed4:	200001bc 	.word	0x200001bc
	...

08017ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017ee0:	4b07      	ldr	r3, [pc, #28]	; (8017f00 <pxCurrentTCBConst2>)
 8017ee2:	6819      	ldr	r1, [r3, #0]
 8017ee4:	6808      	ldr	r0, [r1, #0]
 8017ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eea:	f380 8809 	msr	PSP, r0
 8017eee:	f3bf 8f6f 	isb	sy
 8017ef2:	f04f 0000 	mov.w	r0, #0
 8017ef6:	f380 8811 	msr	BASEPRI, r0
 8017efa:	4770      	bx	lr
 8017efc:	f3af 8000 	nop.w

08017f00 <pxCurrentTCBConst2>:
 8017f00:	2000112c 	.word	0x2000112c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017f04:	bf00      	nop
 8017f06:	bf00      	nop

08017f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017f08:	4808      	ldr	r0, [pc, #32]	; (8017f2c <prvPortStartFirstTask+0x24>)
 8017f0a:	6800      	ldr	r0, [r0, #0]
 8017f0c:	6800      	ldr	r0, [r0, #0]
 8017f0e:	f380 8808 	msr	MSP, r0
 8017f12:	f04f 0000 	mov.w	r0, #0
 8017f16:	f380 8814 	msr	CONTROL, r0
 8017f1a:	b662      	cpsie	i
 8017f1c:	b661      	cpsie	f
 8017f1e:	f3bf 8f4f 	dsb	sy
 8017f22:	f3bf 8f6f 	isb	sy
 8017f26:	df00      	svc	0
 8017f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017f2a:	bf00      	nop
 8017f2c:	e000ed08 	.word	0xe000ed08

08017f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b086      	sub	sp, #24
 8017f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017f36:	4b44      	ldr	r3, [pc, #272]	; (8018048 <xPortStartScheduler+0x118>)
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	4a44      	ldr	r2, [pc, #272]	; (801804c <xPortStartScheduler+0x11c>)
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	d109      	bne.n	8017f54 <xPortStartScheduler+0x24>
 8017f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f44:	f383 8811 	msr	BASEPRI, r3
 8017f48:	f3bf 8f6f 	isb	sy
 8017f4c:	f3bf 8f4f 	dsb	sy
 8017f50:	613b      	str	r3, [r7, #16]
 8017f52:	e7fe      	b.n	8017f52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017f54:	4b3c      	ldr	r3, [pc, #240]	; (8018048 <xPortStartScheduler+0x118>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	4a3d      	ldr	r2, [pc, #244]	; (8018050 <xPortStartScheduler+0x120>)
 8017f5a:	4293      	cmp	r3, r2
 8017f5c:	d109      	bne.n	8017f72 <xPortStartScheduler+0x42>
 8017f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f62:	f383 8811 	msr	BASEPRI, r3
 8017f66:	f3bf 8f6f 	isb	sy
 8017f6a:	f3bf 8f4f 	dsb	sy
 8017f6e:	60fb      	str	r3, [r7, #12]
 8017f70:	e7fe      	b.n	8017f70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017f72:	4b38      	ldr	r3, [pc, #224]	; (8018054 <xPortStartScheduler+0x124>)
 8017f74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017f76:	697b      	ldr	r3, [r7, #20]
 8017f78:	781b      	ldrb	r3, [r3, #0]
 8017f7a:	b2db      	uxtb	r3, r3
 8017f7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017f7e:	697b      	ldr	r3, [r7, #20]
 8017f80:	22ff      	movs	r2, #255	; 0xff
 8017f82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	781b      	ldrb	r3, [r3, #0]
 8017f88:	b2db      	uxtb	r3, r3
 8017f8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017f8c:	78fb      	ldrb	r3, [r7, #3]
 8017f8e:	b2db      	uxtb	r3, r3
 8017f90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017f94:	b2da      	uxtb	r2, r3
 8017f96:	4b30      	ldr	r3, [pc, #192]	; (8018058 <xPortStartScheduler+0x128>)
 8017f98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017f9a:	4b30      	ldr	r3, [pc, #192]	; (801805c <xPortStartScheduler+0x12c>)
 8017f9c:	2207      	movs	r2, #7
 8017f9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017fa0:	e009      	b.n	8017fb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8017fa2:	4b2e      	ldr	r3, [pc, #184]	; (801805c <xPortStartScheduler+0x12c>)
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	3b01      	subs	r3, #1
 8017fa8:	4a2c      	ldr	r2, [pc, #176]	; (801805c <xPortStartScheduler+0x12c>)
 8017faa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017fac:	78fb      	ldrb	r3, [r7, #3]
 8017fae:	b2db      	uxtb	r3, r3
 8017fb0:	005b      	lsls	r3, r3, #1
 8017fb2:	b2db      	uxtb	r3, r3
 8017fb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017fb6:	78fb      	ldrb	r3, [r7, #3]
 8017fb8:	b2db      	uxtb	r3, r3
 8017fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017fbe:	2b80      	cmp	r3, #128	; 0x80
 8017fc0:	d0ef      	beq.n	8017fa2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017fc2:	4b26      	ldr	r3, [pc, #152]	; (801805c <xPortStartScheduler+0x12c>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	f1c3 0307 	rsb	r3, r3, #7
 8017fca:	2b04      	cmp	r3, #4
 8017fcc:	d009      	beq.n	8017fe2 <xPortStartScheduler+0xb2>
 8017fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd2:	f383 8811 	msr	BASEPRI, r3
 8017fd6:	f3bf 8f6f 	isb	sy
 8017fda:	f3bf 8f4f 	dsb	sy
 8017fde:	60bb      	str	r3, [r7, #8]
 8017fe0:	e7fe      	b.n	8017fe0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017fe2:	4b1e      	ldr	r3, [pc, #120]	; (801805c <xPortStartScheduler+0x12c>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	021b      	lsls	r3, r3, #8
 8017fe8:	4a1c      	ldr	r2, [pc, #112]	; (801805c <xPortStartScheduler+0x12c>)
 8017fea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017fec:	4b1b      	ldr	r3, [pc, #108]	; (801805c <xPortStartScheduler+0x12c>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017ff4:	4a19      	ldr	r2, [pc, #100]	; (801805c <xPortStartScheduler+0x12c>)
 8017ff6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	b2da      	uxtb	r2, r3
 8017ffc:	697b      	ldr	r3, [r7, #20]
 8017ffe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018000:	4b17      	ldr	r3, [pc, #92]	; (8018060 <xPortStartScheduler+0x130>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	4a16      	ldr	r2, [pc, #88]	; (8018060 <xPortStartScheduler+0x130>)
 8018006:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801800a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801800c:	4b14      	ldr	r3, [pc, #80]	; (8018060 <xPortStartScheduler+0x130>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	4a13      	ldr	r2, [pc, #76]	; (8018060 <xPortStartScheduler+0x130>)
 8018012:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018016:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018018:	f000 f8d6 	bl	80181c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801801c:	4b11      	ldr	r3, [pc, #68]	; (8018064 <xPortStartScheduler+0x134>)
 801801e:	2200      	movs	r2, #0
 8018020:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018022:	f000 f8f5 	bl	8018210 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018026:	4b10      	ldr	r3, [pc, #64]	; (8018068 <xPortStartScheduler+0x138>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	4a0f      	ldr	r2, [pc, #60]	; (8018068 <xPortStartScheduler+0x138>)
 801802c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018030:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018032:	f7ff ff69 	bl	8017f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018036:	f7fe ff15 	bl	8016e64 <vTaskSwitchContext>
	prvTaskExitError();
 801803a:	f7ff ff23 	bl	8017e84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801803e:	2300      	movs	r3, #0
}
 8018040:	4618      	mov	r0, r3
 8018042:	3718      	adds	r7, #24
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}
 8018048:	e000ed00 	.word	0xe000ed00
 801804c:	410fc271 	.word	0x410fc271
 8018050:	410fc270 	.word	0x410fc270
 8018054:	e000e400 	.word	0xe000e400
 8018058:	20001758 	.word	0x20001758
 801805c:	2000175c 	.word	0x2000175c
 8018060:	e000ed20 	.word	0xe000ed20
 8018064:	200001bc 	.word	0x200001bc
 8018068:	e000ef34 	.word	0xe000ef34

0801806c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801806c:	b480      	push	{r7}
 801806e:	b083      	sub	sp, #12
 8018070:	af00      	add	r7, sp, #0
 8018072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018076:	f383 8811 	msr	BASEPRI, r3
 801807a:	f3bf 8f6f 	isb	sy
 801807e:	f3bf 8f4f 	dsb	sy
 8018082:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018084:	4b0e      	ldr	r3, [pc, #56]	; (80180c0 <vPortEnterCritical+0x54>)
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	3301      	adds	r3, #1
 801808a:	4a0d      	ldr	r2, [pc, #52]	; (80180c0 <vPortEnterCritical+0x54>)
 801808c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801808e:	4b0c      	ldr	r3, [pc, #48]	; (80180c0 <vPortEnterCritical+0x54>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	2b01      	cmp	r3, #1
 8018094:	d10e      	bne.n	80180b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018096:	4b0b      	ldr	r3, [pc, #44]	; (80180c4 <vPortEnterCritical+0x58>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	b2db      	uxtb	r3, r3
 801809c:	2b00      	cmp	r3, #0
 801809e:	d009      	beq.n	80180b4 <vPortEnterCritical+0x48>
 80180a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180a4:	f383 8811 	msr	BASEPRI, r3
 80180a8:	f3bf 8f6f 	isb	sy
 80180ac:	f3bf 8f4f 	dsb	sy
 80180b0:	603b      	str	r3, [r7, #0]
 80180b2:	e7fe      	b.n	80180b2 <vPortEnterCritical+0x46>
	}
}
 80180b4:	bf00      	nop
 80180b6:	370c      	adds	r7, #12
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr
 80180c0:	200001bc 	.word	0x200001bc
 80180c4:	e000ed04 	.word	0xe000ed04

080180c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80180c8:	b480      	push	{r7}
 80180ca:	b083      	sub	sp, #12
 80180cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80180ce:	4b11      	ldr	r3, [pc, #68]	; (8018114 <vPortExitCritical+0x4c>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d109      	bne.n	80180ea <vPortExitCritical+0x22>
 80180d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180da:	f383 8811 	msr	BASEPRI, r3
 80180de:	f3bf 8f6f 	isb	sy
 80180e2:	f3bf 8f4f 	dsb	sy
 80180e6:	607b      	str	r3, [r7, #4]
 80180e8:	e7fe      	b.n	80180e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80180ea:	4b0a      	ldr	r3, [pc, #40]	; (8018114 <vPortExitCritical+0x4c>)
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	3b01      	subs	r3, #1
 80180f0:	4a08      	ldr	r2, [pc, #32]	; (8018114 <vPortExitCritical+0x4c>)
 80180f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80180f4:	4b07      	ldr	r3, [pc, #28]	; (8018114 <vPortExitCritical+0x4c>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d104      	bne.n	8018106 <vPortExitCritical+0x3e>
 80180fc:	2300      	movs	r3, #0
 80180fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8018106:	bf00      	nop
 8018108:	370c      	adds	r7, #12
 801810a:	46bd      	mov	sp, r7
 801810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018110:	4770      	bx	lr
 8018112:	bf00      	nop
 8018114:	200001bc 	.word	0x200001bc
	...

08018120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018120:	f3ef 8009 	mrs	r0, PSP
 8018124:	f3bf 8f6f 	isb	sy
 8018128:	4b15      	ldr	r3, [pc, #84]	; (8018180 <pxCurrentTCBConst>)
 801812a:	681a      	ldr	r2, [r3, #0]
 801812c:	f01e 0f10 	tst.w	lr, #16
 8018130:	bf08      	it	eq
 8018132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801813a:	6010      	str	r0, [r2, #0]
 801813c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018144:	f380 8811 	msr	BASEPRI, r0
 8018148:	f3bf 8f4f 	dsb	sy
 801814c:	f3bf 8f6f 	isb	sy
 8018150:	f7fe fe88 	bl	8016e64 <vTaskSwitchContext>
 8018154:	f04f 0000 	mov.w	r0, #0
 8018158:	f380 8811 	msr	BASEPRI, r0
 801815c:	bc09      	pop	{r0, r3}
 801815e:	6819      	ldr	r1, [r3, #0]
 8018160:	6808      	ldr	r0, [r1, #0]
 8018162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018166:	f01e 0f10 	tst.w	lr, #16
 801816a:	bf08      	it	eq
 801816c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018170:	f380 8809 	msr	PSP, r0
 8018174:	f3bf 8f6f 	isb	sy
 8018178:	4770      	bx	lr
 801817a:	bf00      	nop
 801817c:	f3af 8000 	nop.w

08018180 <pxCurrentTCBConst>:
 8018180:	2000112c 	.word	0x2000112c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018184:	bf00      	nop
 8018186:	bf00      	nop

08018188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b082      	sub	sp, #8
 801818c:	af00      	add	r7, sp, #0
	__asm volatile
 801818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018192:	f383 8811 	msr	BASEPRI, r3
 8018196:	f3bf 8f6f 	isb	sy
 801819a:	f3bf 8f4f 	dsb	sy
 801819e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80181a0:	f7fe fda8 	bl	8016cf4 <xTaskIncrementTick>
 80181a4:	4603      	mov	r3, r0
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d003      	beq.n	80181b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80181aa:	4b06      	ldr	r3, [pc, #24]	; (80181c4 <SysTick_Handler+0x3c>)
 80181ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181b0:	601a      	str	r2, [r3, #0]
 80181b2:	2300      	movs	r3, #0
 80181b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80181b6:	683b      	ldr	r3, [r7, #0]
 80181b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80181bc:	bf00      	nop
 80181be:	3708      	adds	r7, #8
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd80      	pop	{r7, pc}
 80181c4:	e000ed04 	.word	0xe000ed04

080181c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80181c8:	b480      	push	{r7}
 80181ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80181cc:	4b0b      	ldr	r3, [pc, #44]	; (80181fc <vPortSetupTimerInterrupt+0x34>)
 80181ce:	2200      	movs	r2, #0
 80181d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80181d2:	4b0b      	ldr	r3, [pc, #44]	; (8018200 <vPortSetupTimerInterrupt+0x38>)
 80181d4:	2200      	movs	r2, #0
 80181d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80181d8:	4b0a      	ldr	r3, [pc, #40]	; (8018204 <vPortSetupTimerInterrupt+0x3c>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	4a0a      	ldr	r2, [pc, #40]	; (8018208 <vPortSetupTimerInterrupt+0x40>)
 80181de:	fba2 2303 	umull	r2, r3, r2, r3
 80181e2:	099b      	lsrs	r3, r3, #6
 80181e4:	4a09      	ldr	r2, [pc, #36]	; (801820c <vPortSetupTimerInterrupt+0x44>)
 80181e6:	3b01      	subs	r3, #1
 80181e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80181ea:	4b04      	ldr	r3, [pc, #16]	; (80181fc <vPortSetupTimerInterrupt+0x34>)
 80181ec:	2207      	movs	r2, #7
 80181ee:	601a      	str	r2, [r3, #0]
}
 80181f0:	bf00      	nop
 80181f2:	46bd      	mov	sp, r7
 80181f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f8:	4770      	bx	lr
 80181fa:	bf00      	nop
 80181fc:	e000e010 	.word	0xe000e010
 8018200:	e000e018 	.word	0xe000e018
 8018204:	200001b0 	.word	0x200001b0
 8018208:	10624dd3 	.word	0x10624dd3
 801820c:	e000e014 	.word	0xe000e014

08018210 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018210:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018220 <vPortEnableVFP+0x10>
 8018214:	6801      	ldr	r1, [r0, #0]
 8018216:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801821a:	6001      	str	r1, [r0, #0]
 801821c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801821e:	bf00      	nop
 8018220:	e000ed88 	.word	0xe000ed88

08018224 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018224:	b480      	push	{r7}
 8018226:	b085      	sub	sp, #20
 8018228:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801822a:	f3ef 8305 	mrs	r3, IPSR
 801822e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	2b0f      	cmp	r3, #15
 8018234:	d913      	bls.n	801825e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018236:	4a16      	ldr	r2, [pc, #88]	; (8018290 <vPortValidateInterruptPriority+0x6c>)
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	4413      	add	r3, r2
 801823c:	781b      	ldrb	r3, [r3, #0]
 801823e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018240:	4b14      	ldr	r3, [pc, #80]	; (8018294 <vPortValidateInterruptPriority+0x70>)
 8018242:	781b      	ldrb	r3, [r3, #0]
 8018244:	7afa      	ldrb	r2, [r7, #11]
 8018246:	429a      	cmp	r2, r3
 8018248:	d209      	bcs.n	801825e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801824e:	f383 8811 	msr	BASEPRI, r3
 8018252:	f3bf 8f6f 	isb	sy
 8018256:	f3bf 8f4f 	dsb	sy
 801825a:	607b      	str	r3, [r7, #4]
 801825c:	e7fe      	b.n	801825c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801825e:	4b0e      	ldr	r3, [pc, #56]	; (8018298 <vPortValidateInterruptPriority+0x74>)
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018266:	4b0d      	ldr	r3, [pc, #52]	; (801829c <vPortValidateInterruptPriority+0x78>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	429a      	cmp	r2, r3
 801826c:	d909      	bls.n	8018282 <vPortValidateInterruptPriority+0x5e>
 801826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018272:	f383 8811 	msr	BASEPRI, r3
 8018276:	f3bf 8f6f 	isb	sy
 801827a:	f3bf 8f4f 	dsb	sy
 801827e:	603b      	str	r3, [r7, #0]
 8018280:	e7fe      	b.n	8018280 <vPortValidateInterruptPriority+0x5c>
	}
 8018282:	bf00      	nop
 8018284:	3714      	adds	r7, #20
 8018286:	46bd      	mov	sp, r7
 8018288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828c:	4770      	bx	lr
 801828e:	bf00      	nop
 8018290:	e000e3f0 	.word	0xe000e3f0
 8018294:	20001758 	.word	0x20001758
 8018298:	e000ed0c 	.word	0xe000ed0c
 801829c:	2000175c 	.word	0x2000175c

080182a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b08a      	sub	sp, #40	; 0x28
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80182a8:	2300      	movs	r3, #0
 80182aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80182ac:	f7fe fc56 	bl	8016b5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80182b0:	4b57      	ldr	r3, [pc, #348]	; (8018410 <pvPortMalloc+0x170>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d101      	bne.n	80182bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80182b8:	f000 f90c 	bl	80184d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80182bc:	4b55      	ldr	r3, [pc, #340]	; (8018414 <pvPortMalloc+0x174>)
 80182be:	681a      	ldr	r2, [r3, #0]
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	4013      	ands	r3, r2
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	f040 808c 	bne.w	80183e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d01c      	beq.n	801830a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80182d0:	2208      	movs	r2, #8
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	4413      	add	r3, r2
 80182d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f003 0307 	and.w	r3, r3, #7
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d013      	beq.n	801830a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	f023 0307 	bic.w	r3, r3, #7
 80182e8:	3308      	adds	r3, #8
 80182ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	f003 0307 	and.w	r3, r3, #7
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d009      	beq.n	801830a <pvPortMalloc+0x6a>
 80182f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182fa:	f383 8811 	msr	BASEPRI, r3
 80182fe:	f3bf 8f6f 	isb	sy
 8018302:	f3bf 8f4f 	dsb	sy
 8018306:	617b      	str	r3, [r7, #20]
 8018308:	e7fe      	b.n	8018308 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d068      	beq.n	80183e2 <pvPortMalloc+0x142>
 8018310:	4b41      	ldr	r3, [pc, #260]	; (8018418 <pvPortMalloc+0x178>)
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	687a      	ldr	r2, [r7, #4]
 8018316:	429a      	cmp	r2, r3
 8018318:	d863      	bhi.n	80183e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801831a:	4b40      	ldr	r3, [pc, #256]	; (801841c <pvPortMalloc+0x17c>)
 801831c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801831e:	4b3f      	ldr	r3, [pc, #252]	; (801841c <pvPortMalloc+0x17c>)
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018324:	e004      	b.n	8018330 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8018326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018328:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018332:	685b      	ldr	r3, [r3, #4]
 8018334:	687a      	ldr	r2, [r7, #4]
 8018336:	429a      	cmp	r2, r3
 8018338:	d903      	bls.n	8018342 <pvPortMalloc+0xa2>
 801833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d1f1      	bne.n	8018326 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018342:	4b33      	ldr	r3, [pc, #204]	; (8018410 <pvPortMalloc+0x170>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018348:	429a      	cmp	r2, r3
 801834a:	d04a      	beq.n	80183e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801834c:	6a3b      	ldr	r3, [r7, #32]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	2208      	movs	r2, #8
 8018352:	4413      	add	r3, r2
 8018354:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018358:	681a      	ldr	r2, [r3, #0]
 801835a:	6a3b      	ldr	r3, [r7, #32]
 801835c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018360:	685a      	ldr	r2, [r3, #4]
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	1ad2      	subs	r2, r2, r3
 8018366:	2308      	movs	r3, #8
 8018368:	005b      	lsls	r3, r3, #1
 801836a:	429a      	cmp	r2, r3
 801836c:	d91e      	bls.n	80183ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801836e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	4413      	add	r3, r2
 8018374:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018376:	69bb      	ldr	r3, [r7, #24]
 8018378:	f003 0307 	and.w	r3, r3, #7
 801837c:	2b00      	cmp	r3, #0
 801837e:	d009      	beq.n	8018394 <pvPortMalloc+0xf4>
 8018380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018384:	f383 8811 	msr	BASEPRI, r3
 8018388:	f3bf 8f6f 	isb	sy
 801838c:	f3bf 8f4f 	dsb	sy
 8018390:	613b      	str	r3, [r7, #16]
 8018392:	e7fe      	b.n	8018392 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018396:	685a      	ldr	r2, [r3, #4]
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	1ad2      	subs	r2, r2, r3
 801839c:	69bb      	ldr	r3, [r7, #24]
 801839e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80183a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183a2:	687a      	ldr	r2, [r7, #4]
 80183a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80183a6:	69b8      	ldr	r0, [r7, #24]
 80183a8:	f000 f8f6 	bl	8018598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80183ac:	4b1a      	ldr	r3, [pc, #104]	; (8018418 <pvPortMalloc+0x178>)
 80183ae:	681a      	ldr	r2, [r3, #0]
 80183b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183b2:	685b      	ldr	r3, [r3, #4]
 80183b4:	1ad3      	subs	r3, r2, r3
 80183b6:	4a18      	ldr	r2, [pc, #96]	; (8018418 <pvPortMalloc+0x178>)
 80183b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80183ba:	4b17      	ldr	r3, [pc, #92]	; (8018418 <pvPortMalloc+0x178>)
 80183bc:	681a      	ldr	r2, [r3, #0]
 80183be:	4b18      	ldr	r3, [pc, #96]	; (8018420 <pvPortMalloc+0x180>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d203      	bcs.n	80183ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80183c6:	4b14      	ldr	r3, [pc, #80]	; (8018418 <pvPortMalloc+0x178>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	4a15      	ldr	r2, [pc, #84]	; (8018420 <pvPortMalloc+0x180>)
 80183cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80183ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d0:	685a      	ldr	r2, [r3, #4]
 80183d2:	4b10      	ldr	r3, [pc, #64]	; (8018414 <pvPortMalloc+0x174>)
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	431a      	orrs	r2, r3
 80183d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80183dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183de:	2200      	movs	r2, #0
 80183e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80183e2:	f7fe fbc9 	bl	8016b78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80183e6:	69fb      	ldr	r3, [r7, #28]
 80183e8:	f003 0307 	and.w	r3, r3, #7
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d009      	beq.n	8018404 <pvPortMalloc+0x164>
 80183f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183f4:	f383 8811 	msr	BASEPRI, r3
 80183f8:	f3bf 8f6f 	isb	sy
 80183fc:	f3bf 8f4f 	dsb	sy
 8018400:	60fb      	str	r3, [r7, #12]
 8018402:	e7fe      	b.n	8018402 <pvPortMalloc+0x162>
	return pvReturn;
 8018404:	69fb      	ldr	r3, [r7, #28]
}
 8018406:	4618      	mov	r0, r3
 8018408:	3728      	adds	r7, #40	; 0x28
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}
 801840e:	bf00      	nop
 8018410:	20005368 	.word	0x20005368
 8018414:	20005374 	.word	0x20005374
 8018418:	2000536c 	.word	0x2000536c
 801841c:	20005360 	.word	0x20005360
 8018420:	20005370 	.word	0x20005370

08018424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b086      	sub	sp, #24
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d046      	beq.n	80184c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018436:	2308      	movs	r3, #8
 8018438:	425b      	negs	r3, r3
 801843a:	697a      	ldr	r2, [r7, #20]
 801843c:	4413      	add	r3, r2
 801843e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018440:	697b      	ldr	r3, [r7, #20]
 8018442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018444:	693b      	ldr	r3, [r7, #16]
 8018446:	685a      	ldr	r2, [r3, #4]
 8018448:	4b20      	ldr	r3, [pc, #128]	; (80184cc <vPortFree+0xa8>)
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	4013      	ands	r3, r2
 801844e:	2b00      	cmp	r3, #0
 8018450:	d109      	bne.n	8018466 <vPortFree+0x42>
 8018452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018456:	f383 8811 	msr	BASEPRI, r3
 801845a:	f3bf 8f6f 	isb	sy
 801845e:	f3bf 8f4f 	dsb	sy
 8018462:	60fb      	str	r3, [r7, #12]
 8018464:	e7fe      	b.n	8018464 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018466:	693b      	ldr	r3, [r7, #16]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d009      	beq.n	8018482 <vPortFree+0x5e>
 801846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018472:	f383 8811 	msr	BASEPRI, r3
 8018476:	f3bf 8f6f 	isb	sy
 801847a:	f3bf 8f4f 	dsb	sy
 801847e:	60bb      	str	r3, [r7, #8]
 8018480:	e7fe      	b.n	8018480 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018482:	693b      	ldr	r3, [r7, #16]
 8018484:	685a      	ldr	r2, [r3, #4]
 8018486:	4b11      	ldr	r3, [pc, #68]	; (80184cc <vPortFree+0xa8>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	4013      	ands	r3, r2
 801848c:	2b00      	cmp	r3, #0
 801848e:	d019      	beq.n	80184c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018490:	693b      	ldr	r3, [r7, #16]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d115      	bne.n	80184c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018498:	693b      	ldr	r3, [r7, #16]
 801849a:	685a      	ldr	r2, [r3, #4]
 801849c:	4b0b      	ldr	r3, [pc, #44]	; (80184cc <vPortFree+0xa8>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	43db      	mvns	r3, r3
 80184a2:	401a      	ands	r2, r3
 80184a4:	693b      	ldr	r3, [r7, #16]
 80184a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80184a8:	f7fe fb58 	bl	8016b5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80184ac:	693b      	ldr	r3, [r7, #16]
 80184ae:	685a      	ldr	r2, [r3, #4]
 80184b0:	4b07      	ldr	r3, [pc, #28]	; (80184d0 <vPortFree+0xac>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	4413      	add	r3, r2
 80184b6:	4a06      	ldr	r2, [pc, #24]	; (80184d0 <vPortFree+0xac>)
 80184b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80184ba:	6938      	ldr	r0, [r7, #16]
 80184bc:	f000 f86c 	bl	8018598 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80184c0:	f7fe fb5a 	bl	8016b78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80184c4:	bf00      	nop
 80184c6:	3718      	adds	r7, #24
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}
 80184cc:	20005374 	.word	0x20005374
 80184d0:	2000536c 	.word	0x2000536c

080184d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80184d4:	b480      	push	{r7}
 80184d6:	b085      	sub	sp, #20
 80184d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80184da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80184de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80184e0:	4b27      	ldr	r3, [pc, #156]	; (8018580 <prvHeapInit+0xac>)
 80184e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	f003 0307 	and.w	r3, r3, #7
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d00c      	beq.n	8018508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	3307      	adds	r3, #7
 80184f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	f023 0307 	bic.w	r3, r3, #7
 80184fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80184fc:	68ba      	ldr	r2, [r7, #8]
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	1ad3      	subs	r3, r2, r3
 8018502:	4a1f      	ldr	r2, [pc, #124]	; (8018580 <prvHeapInit+0xac>)
 8018504:	4413      	add	r3, r2
 8018506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801850c:	4a1d      	ldr	r2, [pc, #116]	; (8018584 <prvHeapInit+0xb0>)
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018512:	4b1c      	ldr	r3, [pc, #112]	; (8018584 <prvHeapInit+0xb0>)
 8018514:	2200      	movs	r2, #0
 8018516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	68ba      	ldr	r2, [r7, #8]
 801851c:	4413      	add	r3, r2
 801851e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018520:	2208      	movs	r2, #8
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	1a9b      	subs	r3, r3, r2
 8018526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	f023 0307 	bic.w	r3, r3, #7
 801852e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	4a15      	ldr	r2, [pc, #84]	; (8018588 <prvHeapInit+0xb4>)
 8018534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018536:	4b14      	ldr	r3, [pc, #80]	; (8018588 <prvHeapInit+0xb4>)
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	2200      	movs	r2, #0
 801853c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801853e:	4b12      	ldr	r3, [pc, #72]	; (8018588 <prvHeapInit+0xb4>)
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	2200      	movs	r2, #0
 8018544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	68fa      	ldr	r2, [r7, #12]
 801854e:	1ad2      	subs	r2, r2, r3
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018554:	4b0c      	ldr	r3, [pc, #48]	; (8018588 <prvHeapInit+0xb4>)
 8018556:	681a      	ldr	r2, [r3, #0]
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801855c:	683b      	ldr	r3, [r7, #0]
 801855e:	685b      	ldr	r3, [r3, #4]
 8018560:	4a0a      	ldr	r2, [pc, #40]	; (801858c <prvHeapInit+0xb8>)
 8018562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	685b      	ldr	r3, [r3, #4]
 8018568:	4a09      	ldr	r2, [pc, #36]	; (8018590 <prvHeapInit+0xbc>)
 801856a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801856c:	4b09      	ldr	r3, [pc, #36]	; (8018594 <prvHeapInit+0xc0>)
 801856e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018572:	601a      	str	r2, [r3, #0]
}
 8018574:	bf00      	nop
 8018576:	3714      	adds	r7, #20
 8018578:	46bd      	mov	sp, r7
 801857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857e:	4770      	bx	lr
 8018580:	20001760 	.word	0x20001760
 8018584:	20005360 	.word	0x20005360
 8018588:	20005368 	.word	0x20005368
 801858c:	20005370 	.word	0x20005370
 8018590:	2000536c 	.word	0x2000536c
 8018594:	20005374 	.word	0x20005374

08018598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018598:	b480      	push	{r7}
 801859a:	b085      	sub	sp, #20
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80185a0:	4b28      	ldr	r3, [pc, #160]	; (8018644 <prvInsertBlockIntoFreeList+0xac>)
 80185a2:	60fb      	str	r3, [r7, #12]
 80185a4:	e002      	b.n	80185ac <prvInsertBlockIntoFreeList+0x14>
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	60fb      	str	r3, [r7, #12]
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	687a      	ldr	r2, [r7, #4]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d8f7      	bhi.n	80185a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	685b      	ldr	r3, [r3, #4]
 80185be:	68ba      	ldr	r2, [r7, #8]
 80185c0:	4413      	add	r3, r2
 80185c2:	687a      	ldr	r2, [r7, #4]
 80185c4:	429a      	cmp	r2, r3
 80185c6:	d108      	bne.n	80185da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	685a      	ldr	r2, [r3, #4]
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	685b      	ldr	r3, [r3, #4]
 80185d0:	441a      	add	r2, r3
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	685b      	ldr	r3, [r3, #4]
 80185e2:	68ba      	ldr	r2, [r7, #8]
 80185e4:	441a      	add	r2, r3
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	429a      	cmp	r2, r3
 80185ec:	d118      	bne.n	8018620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	681a      	ldr	r2, [r3, #0]
 80185f2:	4b15      	ldr	r3, [pc, #84]	; (8018648 <prvInsertBlockIntoFreeList+0xb0>)
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	429a      	cmp	r2, r3
 80185f8:	d00d      	beq.n	8018616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	685a      	ldr	r2, [r3, #4]
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	441a      	add	r2, r3
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	681a      	ldr	r2, [r3, #0]
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	601a      	str	r2, [r3, #0]
 8018614:	e008      	b.n	8018628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018616:	4b0c      	ldr	r3, [pc, #48]	; (8018648 <prvInsertBlockIntoFreeList+0xb0>)
 8018618:	681a      	ldr	r2, [r3, #0]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	601a      	str	r2, [r3, #0]
 801861e:	e003      	b.n	8018628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	681a      	ldr	r2, [r3, #0]
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018628:	68fa      	ldr	r2, [r7, #12]
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	429a      	cmp	r2, r3
 801862e:	d002      	beq.n	8018636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	687a      	ldr	r2, [r7, #4]
 8018634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018636:	bf00      	nop
 8018638:	3714      	adds	r7, #20
 801863a:	46bd      	mov	sp, r7
 801863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018640:	4770      	bx	lr
 8018642:	bf00      	nop
 8018644:	20005360 	.word	0x20005360
 8018648:	20005368 	.word	0x20005368

0801864c <cosf>:
 801864c:	ee10 3a10 	vmov	r3, s0
 8018650:	b507      	push	{r0, r1, r2, lr}
 8018652:	4a1c      	ldr	r2, [pc, #112]	; (80186c4 <cosf+0x78>)
 8018654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018658:	4293      	cmp	r3, r2
 801865a:	dc04      	bgt.n	8018666 <cosf+0x1a>
 801865c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80186c8 <cosf+0x7c>
 8018660:	f000 fbe6 	bl	8018e30 <__kernel_cosf>
 8018664:	e004      	b.n	8018670 <cosf+0x24>
 8018666:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801866a:	db04      	blt.n	8018676 <cosf+0x2a>
 801866c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018670:	b003      	add	sp, #12
 8018672:	f85d fb04 	ldr.w	pc, [sp], #4
 8018676:	4668      	mov	r0, sp
 8018678:	f000 faaa 	bl	8018bd0 <__ieee754_rem_pio2f>
 801867c:	f000 0003 	and.w	r0, r0, #3
 8018680:	2801      	cmp	r0, #1
 8018682:	d007      	beq.n	8018694 <cosf+0x48>
 8018684:	2802      	cmp	r0, #2
 8018686:	d00e      	beq.n	80186a6 <cosf+0x5a>
 8018688:	b9a0      	cbnz	r0, 80186b4 <cosf+0x68>
 801868a:	eddd 0a01 	vldr	s1, [sp, #4]
 801868e:	ed9d 0a00 	vldr	s0, [sp]
 8018692:	e7e5      	b.n	8018660 <cosf+0x14>
 8018694:	eddd 0a01 	vldr	s1, [sp, #4]
 8018698:	ed9d 0a00 	vldr	s0, [sp]
 801869c:	f000 fea8 	bl	80193f0 <__kernel_sinf>
 80186a0:	eeb1 0a40 	vneg.f32	s0, s0
 80186a4:	e7e4      	b.n	8018670 <cosf+0x24>
 80186a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80186aa:	ed9d 0a00 	vldr	s0, [sp]
 80186ae:	f000 fbbf 	bl	8018e30 <__kernel_cosf>
 80186b2:	e7f5      	b.n	80186a0 <cosf+0x54>
 80186b4:	2001      	movs	r0, #1
 80186b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80186ba:	ed9d 0a00 	vldr	s0, [sp]
 80186be:	f000 fe97 	bl	80193f0 <__kernel_sinf>
 80186c2:	e7d5      	b.n	8018670 <cosf+0x24>
 80186c4:	3f490fd8 	.word	0x3f490fd8
 80186c8:	00000000 	.word	0x00000000

080186cc <sinf>:
 80186cc:	ee10 3a10 	vmov	r3, s0
 80186d0:	b507      	push	{r0, r1, r2, lr}
 80186d2:	4a1d      	ldr	r2, [pc, #116]	; (8018748 <sinf+0x7c>)
 80186d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80186d8:	4293      	cmp	r3, r2
 80186da:	dc05      	bgt.n	80186e8 <sinf+0x1c>
 80186dc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801874c <sinf+0x80>
 80186e0:	2000      	movs	r0, #0
 80186e2:	f000 fe85 	bl	80193f0 <__kernel_sinf>
 80186e6:	e004      	b.n	80186f2 <sinf+0x26>
 80186e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80186ec:	db04      	blt.n	80186f8 <sinf+0x2c>
 80186ee:	ee30 0a40 	vsub.f32	s0, s0, s0
 80186f2:	b003      	add	sp, #12
 80186f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80186f8:	4668      	mov	r0, sp
 80186fa:	f000 fa69 	bl	8018bd0 <__ieee754_rem_pio2f>
 80186fe:	f000 0003 	and.w	r0, r0, #3
 8018702:	2801      	cmp	r0, #1
 8018704:	d008      	beq.n	8018718 <sinf+0x4c>
 8018706:	2802      	cmp	r0, #2
 8018708:	d00d      	beq.n	8018726 <sinf+0x5a>
 801870a:	b9b0      	cbnz	r0, 801873a <sinf+0x6e>
 801870c:	2001      	movs	r0, #1
 801870e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018712:	ed9d 0a00 	vldr	s0, [sp]
 8018716:	e7e4      	b.n	80186e2 <sinf+0x16>
 8018718:	eddd 0a01 	vldr	s1, [sp, #4]
 801871c:	ed9d 0a00 	vldr	s0, [sp]
 8018720:	f000 fb86 	bl	8018e30 <__kernel_cosf>
 8018724:	e7e5      	b.n	80186f2 <sinf+0x26>
 8018726:	2001      	movs	r0, #1
 8018728:	eddd 0a01 	vldr	s1, [sp, #4]
 801872c:	ed9d 0a00 	vldr	s0, [sp]
 8018730:	f000 fe5e 	bl	80193f0 <__kernel_sinf>
 8018734:	eeb1 0a40 	vneg.f32	s0, s0
 8018738:	e7db      	b.n	80186f2 <sinf+0x26>
 801873a:	eddd 0a01 	vldr	s1, [sp, #4]
 801873e:	ed9d 0a00 	vldr	s0, [sp]
 8018742:	f000 fb75 	bl	8018e30 <__kernel_cosf>
 8018746:	e7f5      	b.n	8018734 <sinf+0x68>
 8018748:	3f490fd8 	.word	0x3f490fd8
 801874c:	00000000 	.word	0x00000000

08018750 <asinf>:
 8018750:	b510      	push	{r4, lr}
 8018752:	ed2d 8b02 	vpush	{d8}
 8018756:	4c27      	ldr	r4, [pc, #156]	; (80187f4 <asinf+0xa4>)
 8018758:	b08a      	sub	sp, #40	; 0x28
 801875a:	eeb0 8a40 	vmov.f32	s16, s0
 801875e:	f000 f8a1 	bl	80188a4 <__ieee754_asinf>
 8018762:	f994 3000 	ldrsb.w	r3, [r4]
 8018766:	3301      	adds	r3, #1
 8018768:	eef0 8a40 	vmov.f32	s17, s0
 801876c:	d03c      	beq.n	80187e8 <asinf+0x98>
 801876e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018776:	d637      	bvs.n	80187e8 <asinf+0x98>
 8018778:	eeb0 0a48 	vmov.f32	s0, s16
 801877c:	f000 ff60 	bl	8019640 <fabsf>
 8018780:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018784:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801878c:	dd2c      	ble.n	80187e8 <asinf+0x98>
 801878e:	2301      	movs	r3, #1
 8018790:	9300      	str	r3, [sp, #0]
 8018792:	4b19      	ldr	r3, [pc, #100]	; (80187f8 <asinf+0xa8>)
 8018794:	9301      	str	r3, [sp, #4]
 8018796:	ee18 0a10 	vmov	r0, s16
 801879a:	2300      	movs	r3, #0
 801879c:	9308      	str	r3, [sp, #32]
 801879e:	f7e7 fee3 	bl	8000568 <__aeabi_f2d>
 80187a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80187a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80187aa:	4814      	ldr	r0, [pc, #80]	; (80187fc <asinf+0xac>)
 80187ac:	f000 fe6c 	bl	8019488 <nan>
 80187b0:	f994 3000 	ldrsb.w	r3, [r4]
 80187b4:	2b02      	cmp	r3, #2
 80187b6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80187ba:	d104      	bne.n	80187c6 <asinf+0x76>
 80187bc:	f001 f814 	bl	80197e8 <__errno>
 80187c0:	2321      	movs	r3, #33	; 0x21
 80187c2:	6003      	str	r3, [r0, #0]
 80187c4:	e004      	b.n	80187d0 <asinf+0x80>
 80187c6:	4668      	mov	r0, sp
 80187c8:	f000 fe5a 	bl	8019480 <matherr>
 80187cc:	2800      	cmp	r0, #0
 80187ce:	d0f5      	beq.n	80187bc <asinf+0x6c>
 80187d0:	9b08      	ldr	r3, [sp, #32]
 80187d2:	b11b      	cbz	r3, 80187dc <asinf+0x8c>
 80187d4:	f001 f808 	bl	80197e8 <__errno>
 80187d8:	9b08      	ldr	r3, [sp, #32]
 80187da:	6003      	str	r3, [r0, #0]
 80187dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80187e0:	f7e8 fa12 	bl	8000c08 <__aeabi_d2f>
 80187e4:	ee08 0a90 	vmov	s17, r0
 80187e8:	eeb0 0a68 	vmov.f32	s0, s17
 80187ec:	b00a      	add	sp, #40	; 0x28
 80187ee:	ecbd 8b02 	vpop	{d8}
 80187f2:	bd10      	pop	{r4, pc}
 80187f4:	200001c0 	.word	0x200001c0
 80187f8:	0801e580 	.word	0x0801e580
 80187fc:	0801e9b7 	.word	0x0801e9b7

08018800 <atan2f>:
 8018800:	f000 b938 	b.w	8018a74 <__ieee754_atan2f>

08018804 <sqrtf>:
 8018804:	b510      	push	{r4, lr}
 8018806:	ed2d 8b02 	vpush	{d8}
 801880a:	b08a      	sub	sp, #40	; 0x28
 801880c:	eeb0 8a40 	vmov.f32	s16, s0
 8018810:	f000 fb0a 	bl	8018e28 <__ieee754_sqrtf>
 8018814:	4b21      	ldr	r3, [pc, #132]	; (801889c <sqrtf+0x98>)
 8018816:	f993 4000 	ldrsb.w	r4, [r3]
 801881a:	1c63      	adds	r3, r4, #1
 801881c:	d02c      	beq.n	8018878 <sqrtf+0x74>
 801881e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018826:	d627      	bvs.n	8018878 <sqrtf+0x74>
 8018828:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801882c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018830:	d522      	bpl.n	8018878 <sqrtf+0x74>
 8018832:	2301      	movs	r3, #1
 8018834:	9300      	str	r3, [sp, #0]
 8018836:	4b1a      	ldr	r3, [pc, #104]	; (80188a0 <sqrtf+0x9c>)
 8018838:	9301      	str	r3, [sp, #4]
 801883a:	ee18 0a10 	vmov	r0, s16
 801883e:	2300      	movs	r3, #0
 8018840:	9308      	str	r3, [sp, #32]
 8018842:	f7e7 fe91 	bl	8000568 <__aeabi_f2d>
 8018846:	2200      	movs	r2, #0
 8018848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801884c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018850:	2300      	movs	r3, #0
 8018852:	b9ac      	cbnz	r4, 8018880 <sqrtf+0x7c>
 8018854:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018858:	4668      	mov	r0, sp
 801885a:	f000 fe11 	bl	8019480 <matherr>
 801885e:	b1b8      	cbz	r0, 8018890 <sqrtf+0x8c>
 8018860:	9b08      	ldr	r3, [sp, #32]
 8018862:	b11b      	cbz	r3, 801886c <sqrtf+0x68>
 8018864:	f000 ffc0 	bl	80197e8 <__errno>
 8018868:	9b08      	ldr	r3, [sp, #32]
 801886a:	6003      	str	r3, [r0, #0]
 801886c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018870:	f7e8 f9ca 	bl	8000c08 <__aeabi_d2f>
 8018874:	ee00 0a10 	vmov	s0, r0
 8018878:	b00a      	add	sp, #40	; 0x28
 801887a:	ecbd 8b02 	vpop	{d8}
 801887e:	bd10      	pop	{r4, pc}
 8018880:	4610      	mov	r0, r2
 8018882:	4619      	mov	r1, r3
 8018884:	f7e7 fff2 	bl	800086c <__aeabi_ddiv>
 8018888:	2c02      	cmp	r4, #2
 801888a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801888e:	d1e3      	bne.n	8018858 <sqrtf+0x54>
 8018890:	f000 ffaa 	bl	80197e8 <__errno>
 8018894:	2321      	movs	r3, #33	; 0x21
 8018896:	6003      	str	r3, [r0, #0]
 8018898:	e7e2      	b.n	8018860 <sqrtf+0x5c>
 801889a:	bf00      	nop
 801889c:	200001c0 	.word	0x200001c0
 80188a0:	0801e586 	.word	0x0801e586

080188a4 <__ieee754_asinf>:
 80188a4:	b538      	push	{r3, r4, r5, lr}
 80188a6:	ee10 5a10 	vmov	r5, s0
 80188aa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80188ae:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80188b2:	ed2d 8b04 	vpush	{d8-d9}
 80188b6:	d10c      	bne.n	80188d2 <__ieee754_asinf+0x2e>
 80188b8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8018a34 <__ieee754_asinf+0x190>
 80188bc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8018a38 <__ieee754_asinf+0x194>
 80188c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80188c4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80188c8:	eeb0 0a67 	vmov.f32	s0, s15
 80188cc:	ecbd 8b04 	vpop	{d8-d9}
 80188d0:	bd38      	pop	{r3, r4, r5, pc}
 80188d2:	dd04      	ble.n	80188de <__ieee754_asinf+0x3a>
 80188d4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80188d8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80188dc:	e7f6      	b.n	80188cc <__ieee754_asinf+0x28>
 80188de:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80188e2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80188e6:	da0b      	bge.n	8018900 <__ieee754_asinf+0x5c>
 80188e8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80188ec:	da52      	bge.n	8018994 <__ieee754_asinf+0xf0>
 80188ee:	eddf 7a53 	vldr	s15, [pc, #332]	; 8018a3c <__ieee754_asinf+0x198>
 80188f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80188f6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80188fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188fe:	dce5      	bgt.n	80188cc <__ieee754_asinf+0x28>
 8018900:	f000 fe9e 	bl	8019640 <fabsf>
 8018904:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8018908:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801890c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8018910:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8018a40 <__ieee754_asinf+0x19c>
 8018914:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018a44 <__ieee754_asinf+0x1a0>
 8018918:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8018a48 <__ieee754_asinf+0x1a4>
 801891c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8018920:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8018a4c <__ieee754_asinf+0x1a8>
 8018924:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018928:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8018a50 <__ieee754_asinf+0x1ac>
 801892c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018930:	eddf 7a48 	vldr	s15, [pc, #288]	; 8018a54 <__ieee754_asinf+0x1b0>
 8018934:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018938:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8018a58 <__ieee754_asinf+0x1b4>
 801893c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8018940:	eddf 7a46 	vldr	s15, [pc, #280]	; 8018a5c <__ieee754_asinf+0x1b8>
 8018944:	eee8 7a07 	vfma.f32	s15, s16, s14
 8018948:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8018a60 <__ieee754_asinf+0x1bc>
 801894c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018950:	eddf 7a44 	vldr	s15, [pc, #272]	; 8018a64 <__ieee754_asinf+0x1c0>
 8018954:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018958:	eeb0 0a48 	vmov.f32	s0, s16
 801895c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8018960:	f000 fa62 	bl	8018e28 <__ieee754_sqrtf>
 8018964:	4b40      	ldr	r3, [pc, #256]	; (8018a68 <__ieee754_asinf+0x1c4>)
 8018966:	ee29 9a08 	vmul.f32	s18, s18, s16
 801896a:	429c      	cmp	r4, r3
 801896c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8018970:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8018974:	dd3d      	ble.n	80189f2 <__ieee754_asinf+0x14e>
 8018976:	eea0 0a06 	vfma.f32	s0, s0, s12
 801897a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8018a6c <__ieee754_asinf+0x1c8>
 801897e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018982:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8018a38 <__ieee754_asinf+0x194>
 8018986:	ee30 0a67 	vsub.f32	s0, s0, s15
 801898a:	2d00      	cmp	r5, #0
 801898c:	bfd8      	it	le
 801898e:	eeb1 0a40 	vnegle.f32	s0, s0
 8018992:	e79b      	b.n	80188cc <__ieee754_asinf+0x28>
 8018994:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018998:	eddf 6a29 	vldr	s13, [pc, #164]	; 8018a40 <__ieee754_asinf+0x19c>
 801899c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8018a44 <__ieee754_asinf+0x1a0>
 80189a0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8018a58 <__ieee754_asinf+0x1b4>
 80189a4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80189a8:	eddf 6a28 	vldr	s13, [pc, #160]	; 8018a4c <__ieee754_asinf+0x1a8>
 80189ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80189b0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8018a50 <__ieee754_asinf+0x1ac>
 80189b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80189b8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8018a54 <__ieee754_asinf+0x1b0>
 80189bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80189c0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8018a48 <__ieee754_asinf+0x1a4>
 80189c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80189c8:	eddf 6a24 	vldr	s13, [pc, #144]	; 8018a5c <__ieee754_asinf+0x1b8>
 80189cc:	eee7 6a86 	vfma.f32	s13, s15, s12
 80189d0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8018a60 <__ieee754_asinf+0x1bc>
 80189d4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80189d8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8018a64 <__ieee754_asinf+0x1c0>
 80189dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80189e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189e4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80189e8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80189ec:	eea0 0a27 	vfma.f32	s0, s0, s15
 80189f0:	e76c      	b.n	80188cc <__ieee754_asinf+0x28>
 80189f2:	ee10 3a10 	vmov	r3, s0
 80189f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80189fa:	f023 030f 	bic.w	r3, r3, #15
 80189fe:	ee07 3a90 	vmov	s15, r3
 8018a02:	eef1 6a67 	vneg.f32	s13, s15
 8018a06:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8018a0a:	ee70 5a00 	vadd.f32	s11, s0, s0
 8018a0e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018a12:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018a34 <__ieee754_asinf+0x190>
 8018a16:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8018a1a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8018a70 <__ieee754_asinf+0x1cc>
 8018a1e:	eee5 7a47 	vfms.f32	s15, s10, s14
 8018a22:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8018a26:	eeb0 6a40 	vmov.f32	s12, s0
 8018a2a:	eea6 6a87 	vfma.f32	s12, s13, s14
 8018a2e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018a32:	e7a8      	b.n	8018986 <__ieee754_asinf+0xe2>
 8018a34:	b33bbd2e 	.word	0xb33bbd2e
 8018a38:	3fc90fdb 	.word	0x3fc90fdb
 8018a3c:	7149f2ca 	.word	0x7149f2ca
 8018a40:	3811ef08 	.word	0x3811ef08
 8018a44:	3a4f7f04 	.word	0x3a4f7f04
 8018a48:	3e2aaaab 	.word	0x3e2aaaab
 8018a4c:	bd241146 	.word	0xbd241146
 8018a50:	3e4e0aa8 	.word	0x3e4e0aa8
 8018a54:	bea6b090 	.word	0xbea6b090
 8018a58:	3d9dc62e 	.word	0x3d9dc62e
 8018a5c:	bf303361 	.word	0xbf303361
 8018a60:	4001572d 	.word	0x4001572d
 8018a64:	c019d139 	.word	0xc019d139
 8018a68:	3f799999 	.word	0x3f799999
 8018a6c:	333bbd2e 	.word	0x333bbd2e
 8018a70:	3f490fdb 	.word	0x3f490fdb

08018a74 <__ieee754_atan2f>:
 8018a74:	ee10 2a90 	vmov	r2, s1
 8018a78:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8018a7c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018a80:	b510      	push	{r4, lr}
 8018a82:	eef0 7a40 	vmov.f32	s15, s0
 8018a86:	dc06      	bgt.n	8018a96 <__ieee754_atan2f+0x22>
 8018a88:	ee10 0a10 	vmov	r0, s0
 8018a8c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8018a90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018a94:	dd04      	ble.n	8018aa0 <__ieee754_atan2f+0x2c>
 8018a96:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8018a9e:	bd10      	pop	{r4, pc}
 8018aa0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018aa4:	d103      	bne.n	8018aae <__ieee754_atan2f+0x3a>
 8018aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018aaa:	f000 bcf5 	b.w	8019498 <atanf>
 8018aae:	1794      	asrs	r4, r2, #30
 8018ab0:	f004 0402 	and.w	r4, r4, #2
 8018ab4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8018ab8:	b943      	cbnz	r3, 8018acc <__ieee754_atan2f+0x58>
 8018aba:	2c02      	cmp	r4, #2
 8018abc:	d06e      	beq.n	8018b9c <__ieee754_atan2f+0x128>
 8018abe:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8018ba4 <__ieee754_atan2f+0x130>
 8018ac2:	2c03      	cmp	r4, #3
 8018ac4:	bf08      	it	eq
 8018ac6:	eef0 7a47 	vmoveq.f32	s15, s14
 8018aca:	e7e6      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018acc:	b941      	cbnz	r1, 8018ae0 <__ieee754_atan2f+0x6c>
 8018ace:	eddf 7a36 	vldr	s15, [pc, #216]	; 8018ba8 <__ieee754_atan2f+0x134>
 8018ad2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8018bac <__ieee754_atan2f+0x138>
 8018ad6:	2800      	cmp	r0, #0
 8018ad8:	bfb8      	it	lt
 8018ada:	eef0 7a47 	vmovlt.f32	s15, s14
 8018ade:	e7dc      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018ae0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018ae4:	d122      	bne.n	8018b2c <__ieee754_atan2f+0xb8>
 8018ae6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018aea:	d112      	bne.n	8018b12 <__ieee754_atan2f+0x9e>
 8018aec:	2c02      	cmp	r4, #2
 8018aee:	d00a      	beq.n	8018b06 <__ieee754_atan2f+0x92>
 8018af0:	2c03      	cmp	r4, #3
 8018af2:	d00b      	beq.n	8018b0c <__ieee754_atan2f+0x98>
 8018af4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8018bb0 <__ieee754_atan2f+0x13c>
 8018af8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8018bb4 <__ieee754_atan2f+0x140>
 8018afc:	2c01      	cmp	r4, #1
 8018afe:	bf18      	it	ne
 8018b00:	eef0 7a47 	vmovne.f32	s15, s14
 8018b04:	e7c9      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018b06:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8018bb8 <__ieee754_atan2f+0x144>
 8018b0a:	e7c6      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018b0c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8018bbc <__ieee754_atan2f+0x148>
 8018b10:	e7c3      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018b12:	2c02      	cmp	r4, #2
 8018b14:	d042      	beq.n	8018b9c <__ieee754_atan2f+0x128>
 8018b16:	2c03      	cmp	r4, #3
 8018b18:	d005      	beq.n	8018b26 <__ieee754_atan2f+0xb2>
 8018b1a:	2c01      	cmp	r4, #1
 8018b1c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8018bc0 <__ieee754_atan2f+0x14c>
 8018b20:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8018bc4 <__ieee754_atan2f+0x150>
 8018b24:	e7eb      	b.n	8018afe <__ieee754_atan2f+0x8a>
 8018b26:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8018ba4 <__ieee754_atan2f+0x130>
 8018b2a:	e7b6      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018b2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018b30:	d0cd      	beq.n	8018ace <__ieee754_atan2f+0x5a>
 8018b32:	1a5b      	subs	r3, r3, r1
 8018b34:	15db      	asrs	r3, r3, #23
 8018b36:	2b3c      	cmp	r3, #60	; 0x3c
 8018b38:	dc1a      	bgt.n	8018b70 <__ieee754_atan2f+0xfc>
 8018b3a:	2a00      	cmp	r2, #0
 8018b3c:	da01      	bge.n	8018b42 <__ieee754_atan2f+0xce>
 8018b3e:	333c      	adds	r3, #60	; 0x3c
 8018b40:	db19      	blt.n	8018b76 <__ieee754_atan2f+0x102>
 8018b42:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8018b46:	f000 fd7b 	bl	8019640 <fabsf>
 8018b4a:	f000 fca5 	bl	8019498 <atanf>
 8018b4e:	eef0 7a40 	vmov.f32	s15, s0
 8018b52:	2c01      	cmp	r4, #1
 8018b54:	d012      	beq.n	8018b7c <__ieee754_atan2f+0x108>
 8018b56:	2c02      	cmp	r4, #2
 8018b58:	d017      	beq.n	8018b8a <__ieee754_atan2f+0x116>
 8018b5a:	2c00      	cmp	r4, #0
 8018b5c:	d09d      	beq.n	8018a9a <__ieee754_atan2f+0x26>
 8018b5e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8018bc8 <__ieee754_atan2f+0x154>
 8018b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018b66:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8018bcc <__ieee754_atan2f+0x158>
 8018b6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b6e:	e794      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018b70:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018ba8 <__ieee754_atan2f+0x134>
 8018b74:	e7ed      	b.n	8018b52 <__ieee754_atan2f+0xde>
 8018b76:	eddf 7a13 	vldr	s15, [pc, #76]	; 8018bc4 <__ieee754_atan2f+0x150>
 8018b7a:	e7ea      	b.n	8018b52 <__ieee754_atan2f+0xde>
 8018b7c:	ee17 3a90 	vmov	r3, s15
 8018b80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018b84:	ee07 3a90 	vmov	s15, r3
 8018b88:	e787      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018b8a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8018bc8 <__ieee754_atan2f+0x154>
 8018b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018b92:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8018bcc <__ieee754_atan2f+0x158>
 8018b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b9a:	e77e      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018b9c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8018bcc <__ieee754_atan2f+0x158>
 8018ba0:	e77b      	b.n	8018a9a <__ieee754_atan2f+0x26>
 8018ba2:	bf00      	nop
 8018ba4:	c0490fdb 	.word	0xc0490fdb
 8018ba8:	3fc90fdb 	.word	0x3fc90fdb
 8018bac:	bfc90fdb 	.word	0xbfc90fdb
 8018bb0:	bf490fdb 	.word	0xbf490fdb
 8018bb4:	3f490fdb 	.word	0x3f490fdb
 8018bb8:	4016cbe4 	.word	0x4016cbe4
 8018bbc:	c016cbe4 	.word	0xc016cbe4
 8018bc0:	80000000 	.word	0x80000000
 8018bc4:	00000000 	.word	0x00000000
 8018bc8:	33bbbd2e 	.word	0x33bbbd2e
 8018bcc:	40490fdb 	.word	0x40490fdb

08018bd0 <__ieee754_rem_pio2f>:
 8018bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bd2:	ee10 6a10 	vmov	r6, s0
 8018bd6:	4b86      	ldr	r3, [pc, #536]	; (8018df0 <__ieee754_rem_pio2f+0x220>)
 8018bd8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8018bdc:	429c      	cmp	r4, r3
 8018bde:	b087      	sub	sp, #28
 8018be0:	4605      	mov	r5, r0
 8018be2:	dc05      	bgt.n	8018bf0 <__ieee754_rem_pio2f+0x20>
 8018be4:	2300      	movs	r3, #0
 8018be6:	ed85 0a00 	vstr	s0, [r5]
 8018bea:	6043      	str	r3, [r0, #4]
 8018bec:	2000      	movs	r0, #0
 8018bee:	e020      	b.n	8018c32 <__ieee754_rem_pio2f+0x62>
 8018bf0:	4b80      	ldr	r3, [pc, #512]	; (8018df4 <__ieee754_rem_pio2f+0x224>)
 8018bf2:	429c      	cmp	r4, r3
 8018bf4:	dc38      	bgt.n	8018c68 <__ieee754_rem_pio2f+0x98>
 8018bf6:	2e00      	cmp	r6, #0
 8018bf8:	f024 040f 	bic.w	r4, r4, #15
 8018bfc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8018df8 <__ieee754_rem_pio2f+0x228>
 8018c00:	4b7e      	ldr	r3, [pc, #504]	; (8018dfc <__ieee754_rem_pio2f+0x22c>)
 8018c02:	dd18      	ble.n	8018c36 <__ieee754_rem_pio2f+0x66>
 8018c04:	429c      	cmp	r4, r3
 8018c06:	ee70 7a47 	vsub.f32	s15, s0, s14
 8018c0a:	bf09      	itett	eq
 8018c0c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8018e00 <__ieee754_rem_pio2f+0x230>
 8018c10:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8018e04 <__ieee754_rem_pio2f+0x234>
 8018c14:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8018c18:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8018e08 <__ieee754_rem_pio2f+0x238>
 8018c1c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8018c20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018c24:	edc0 6a00 	vstr	s13, [r0]
 8018c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c2c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018c30:	2001      	movs	r0, #1
 8018c32:	b007      	add	sp, #28
 8018c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c36:	429c      	cmp	r4, r3
 8018c38:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018c3c:	bf09      	itett	eq
 8018c3e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8018e00 <__ieee754_rem_pio2f+0x230>
 8018c42:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8018e04 <__ieee754_rem_pio2f+0x234>
 8018c46:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8018c4a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8018e08 <__ieee754_rem_pio2f+0x238>
 8018c4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8018c52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018c56:	edc0 6a00 	vstr	s13, [r0]
 8018c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018c5e:	edc0 7a01 	vstr	s15, [r0, #4]
 8018c62:	f04f 30ff 	mov.w	r0, #4294967295
 8018c66:	e7e4      	b.n	8018c32 <__ieee754_rem_pio2f+0x62>
 8018c68:	4b68      	ldr	r3, [pc, #416]	; (8018e0c <__ieee754_rem_pio2f+0x23c>)
 8018c6a:	429c      	cmp	r4, r3
 8018c6c:	dc71      	bgt.n	8018d52 <__ieee754_rem_pio2f+0x182>
 8018c6e:	f000 fce7 	bl	8019640 <fabsf>
 8018c72:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8018e10 <__ieee754_rem_pio2f+0x240>
 8018c76:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018c7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018c82:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018c86:	ee17 0a90 	vmov	r0, s15
 8018c8a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8018df8 <__ieee754_rem_pio2f+0x228>
 8018c8e:	eeb1 7a46 	vneg.f32	s14, s12
 8018c92:	eea7 0a27 	vfma.f32	s0, s14, s15
 8018c96:	281f      	cmp	r0, #31
 8018c98:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8018e04 <__ieee754_rem_pio2f+0x234>
 8018c9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018ca0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018ca4:	ee16 3a90 	vmov	r3, s13
 8018ca8:	dc1c      	bgt.n	8018ce4 <__ieee754_rem_pio2f+0x114>
 8018caa:	1e47      	subs	r7, r0, #1
 8018cac:	4959      	ldr	r1, [pc, #356]	; (8018e14 <__ieee754_rem_pio2f+0x244>)
 8018cae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8018cb2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8018cb6:	428a      	cmp	r2, r1
 8018cb8:	d014      	beq.n	8018ce4 <__ieee754_rem_pio2f+0x114>
 8018cba:	602b      	str	r3, [r5, #0]
 8018cbc:	ed95 7a00 	vldr	s14, [r5]
 8018cc0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018cc4:	2e00      	cmp	r6, #0
 8018cc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018cca:	ed85 0a01 	vstr	s0, [r5, #4]
 8018cce:	dab0      	bge.n	8018c32 <__ieee754_rem_pio2f+0x62>
 8018cd0:	eeb1 7a47 	vneg.f32	s14, s14
 8018cd4:	eeb1 0a40 	vneg.f32	s0, s0
 8018cd8:	ed85 7a00 	vstr	s14, [r5]
 8018cdc:	ed85 0a01 	vstr	s0, [r5, #4]
 8018ce0:	4240      	negs	r0, r0
 8018ce2:	e7a6      	b.n	8018c32 <__ieee754_rem_pio2f+0x62>
 8018ce4:	15e4      	asrs	r4, r4, #23
 8018ce6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018cea:	1aa2      	subs	r2, r4, r2
 8018cec:	2a08      	cmp	r2, #8
 8018cee:	dde4      	ble.n	8018cba <__ieee754_rem_pio2f+0xea>
 8018cf0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8018e00 <__ieee754_rem_pio2f+0x230>
 8018cf4:	eef0 6a40 	vmov.f32	s13, s0
 8018cf8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018cfc:	ee30 0a66 	vsub.f32	s0, s0, s13
 8018d00:	eea7 0a27 	vfma.f32	s0, s14, s15
 8018d04:	eddf 7a40 	vldr	s15, [pc, #256]	; 8018e08 <__ieee754_rem_pio2f+0x238>
 8018d08:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8018d0c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8018d10:	eef0 7a40 	vmov.f32	s15, s0
 8018d14:	ee15 3a90 	vmov	r3, s11
 8018d18:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018d1c:	1aa4      	subs	r4, r4, r2
 8018d1e:	2c19      	cmp	r4, #25
 8018d20:	dc04      	bgt.n	8018d2c <__ieee754_rem_pio2f+0x15c>
 8018d22:	edc5 5a00 	vstr	s11, [r5]
 8018d26:	eeb0 0a66 	vmov.f32	s0, s13
 8018d2a:	e7c7      	b.n	8018cbc <__ieee754_rem_pio2f+0xec>
 8018d2c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8018e18 <__ieee754_rem_pio2f+0x248>
 8018d30:	eeb0 0a66 	vmov.f32	s0, s13
 8018d34:	eea7 0a25 	vfma.f32	s0, s14, s11
 8018d38:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018d3c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018d40:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8018e1c <__ieee754_rem_pio2f+0x24c>
 8018d44:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8018d48:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018d4c:	ed85 7a00 	vstr	s14, [r5]
 8018d50:	e7b4      	b.n	8018cbc <__ieee754_rem_pio2f+0xec>
 8018d52:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8018d56:	db06      	blt.n	8018d66 <__ieee754_rem_pio2f+0x196>
 8018d58:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018d5c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018d60:	edc0 7a00 	vstr	s15, [r0]
 8018d64:	e742      	b.n	8018bec <__ieee754_rem_pio2f+0x1c>
 8018d66:	15e2      	asrs	r2, r4, #23
 8018d68:	3a86      	subs	r2, #134	; 0x86
 8018d6a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8018d6e:	ee07 3a90 	vmov	s15, r3
 8018d72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018d76:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8018e20 <__ieee754_rem_pio2f+0x250>
 8018d7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018d82:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018d86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018d8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018d8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018d96:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018d9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018d9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018da6:	edcd 7a05 	vstr	s15, [sp, #20]
 8018daa:	d11e      	bne.n	8018dea <__ieee754_rem_pio2f+0x21a>
 8018dac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018db4:	bf0c      	ite	eq
 8018db6:	2301      	moveq	r3, #1
 8018db8:	2302      	movne	r3, #2
 8018dba:	491a      	ldr	r1, [pc, #104]	; (8018e24 <__ieee754_rem_pio2f+0x254>)
 8018dbc:	9101      	str	r1, [sp, #4]
 8018dbe:	2102      	movs	r1, #2
 8018dc0:	9100      	str	r1, [sp, #0]
 8018dc2:	a803      	add	r0, sp, #12
 8018dc4:	4629      	mov	r1, r5
 8018dc6:	f000 f891 	bl	8018eec <__kernel_rem_pio2f>
 8018dca:	2e00      	cmp	r6, #0
 8018dcc:	f6bf af31 	bge.w	8018c32 <__ieee754_rem_pio2f+0x62>
 8018dd0:	edd5 7a00 	vldr	s15, [r5]
 8018dd4:	eef1 7a67 	vneg.f32	s15, s15
 8018dd8:	edc5 7a00 	vstr	s15, [r5]
 8018ddc:	edd5 7a01 	vldr	s15, [r5, #4]
 8018de0:	eef1 7a67 	vneg.f32	s15, s15
 8018de4:	edc5 7a01 	vstr	s15, [r5, #4]
 8018de8:	e77a      	b.n	8018ce0 <__ieee754_rem_pio2f+0x110>
 8018dea:	2303      	movs	r3, #3
 8018dec:	e7e5      	b.n	8018dba <__ieee754_rem_pio2f+0x1ea>
 8018dee:	bf00      	nop
 8018df0:	3f490fd8 	.word	0x3f490fd8
 8018df4:	4016cbe3 	.word	0x4016cbe3
 8018df8:	3fc90f80 	.word	0x3fc90f80
 8018dfc:	3fc90fd0 	.word	0x3fc90fd0
 8018e00:	37354400 	.word	0x37354400
 8018e04:	37354443 	.word	0x37354443
 8018e08:	2e85a308 	.word	0x2e85a308
 8018e0c:	43490f80 	.word	0x43490f80
 8018e10:	3f22f984 	.word	0x3f22f984
 8018e14:	0801e58c 	.word	0x0801e58c
 8018e18:	2e85a300 	.word	0x2e85a300
 8018e1c:	248d3132 	.word	0x248d3132
 8018e20:	43800000 	.word	0x43800000
 8018e24:	0801e60c 	.word	0x0801e60c

08018e28 <__ieee754_sqrtf>:
 8018e28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018e2c:	4770      	bx	lr
	...

08018e30 <__kernel_cosf>:
 8018e30:	ee10 3a10 	vmov	r3, s0
 8018e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e38:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8018e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018e40:	da05      	bge.n	8018e4e <__kernel_cosf+0x1e>
 8018e42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018e46:	ee17 2a90 	vmov	r2, s15
 8018e4a:	2a00      	cmp	r2, #0
 8018e4c:	d03b      	beq.n	8018ec6 <__kernel_cosf+0x96>
 8018e4e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8018e52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018e56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8018ecc <__kernel_cosf+0x9c>
 8018e5a:	4a1d      	ldr	r2, [pc, #116]	; (8018ed0 <__kernel_cosf+0xa0>)
 8018e5c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8018e60:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8018ed4 <__kernel_cosf+0xa4>
 8018e64:	eea6 7a25 	vfma.f32	s14, s12, s11
 8018e68:	4293      	cmp	r3, r2
 8018e6a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8018ed8 <__kernel_cosf+0xa8>
 8018e6e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8018e72:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8018edc <__kernel_cosf+0xac>
 8018e76:	eea5 7a86 	vfma.f32	s14, s11, s12
 8018e7a:	eddf 5a19 	vldr	s11, [pc, #100]	; 8018ee0 <__kernel_cosf+0xb0>
 8018e7e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8018e82:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8018ee4 <__kernel_cosf+0xb4>
 8018e86:	eea5 7a86 	vfma.f32	s14, s11, s12
 8018e8a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8018e8e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018e92:	eee6 0a07 	vfma.f32	s1, s12, s14
 8018e96:	dc04      	bgt.n	8018ea2 <__kernel_cosf+0x72>
 8018e98:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8018e9c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8018ea0:	4770      	bx	lr
 8018ea2:	4a11      	ldr	r2, [pc, #68]	; (8018ee8 <__kernel_cosf+0xb8>)
 8018ea4:	4293      	cmp	r3, r2
 8018ea6:	bfda      	itte	le
 8018ea8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8018eac:	ee07 3a10 	vmovle	s14, r3
 8018eb0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8018eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018eb8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8018ebc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018ec0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018ec4:	4770      	bx	lr
 8018ec6:	eeb0 0a66 	vmov.f32	s0, s13
 8018eca:	4770      	bx	lr
 8018ecc:	ad47d74e 	.word	0xad47d74e
 8018ed0:	3e999999 	.word	0x3e999999
 8018ed4:	310f74f6 	.word	0x310f74f6
 8018ed8:	b493f27c 	.word	0xb493f27c
 8018edc:	37d00d01 	.word	0x37d00d01
 8018ee0:	bab60b61 	.word	0xbab60b61
 8018ee4:	3d2aaaab 	.word	0x3d2aaaab
 8018ee8:	3f480000 	.word	0x3f480000

08018eec <__kernel_rem_pio2f>:
 8018eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ef0:	ed2d 8b04 	vpush	{d8-d9}
 8018ef4:	b0d7      	sub	sp, #348	; 0x15c
 8018ef6:	469b      	mov	fp, r3
 8018ef8:	460e      	mov	r6, r1
 8018efa:	4bbe      	ldr	r3, [pc, #760]	; (80191f4 <__kernel_rem_pio2f+0x308>)
 8018efc:	9964      	ldr	r1, [sp, #400]	; 0x190
 8018efe:	9002      	str	r0, [sp, #8]
 8018f00:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8018f04:	9865      	ldr	r0, [sp, #404]	; 0x194
 8018f06:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8019204 <__kernel_rem_pio2f+0x318>
 8018f0a:	1ed1      	subs	r1, r2, #3
 8018f0c:	2308      	movs	r3, #8
 8018f0e:	fb91 f1f3 	sdiv	r1, r1, r3
 8018f12:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8018f16:	f10b 3aff 	add.w	sl, fp, #4294967295
 8018f1a:	1c4c      	adds	r4, r1, #1
 8018f1c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8018f20:	eba1 050a 	sub.w	r5, r1, sl
 8018f24:	aa1a      	add	r2, sp, #104	; 0x68
 8018f26:	eb09 070a 	add.w	r7, r9, sl
 8018f2a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8018f2e:	4696      	mov	lr, r2
 8018f30:	2300      	movs	r3, #0
 8018f32:	42bb      	cmp	r3, r7
 8018f34:	dd0f      	ble.n	8018f56 <__kernel_rem_pio2f+0x6a>
 8018f36:	af42      	add	r7, sp, #264	; 0x108
 8018f38:	2200      	movs	r2, #0
 8018f3a:	454a      	cmp	r2, r9
 8018f3c:	dc27      	bgt.n	8018f8e <__kernel_rem_pio2f+0xa2>
 8018f3e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8018f42:	eb0b 0302 	add.w	r3, fp, r2
 8018f46:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8018f4a:	9d02      	ldr	r5, [sp, #8]
 8018f4c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8019204 <__kernel_rem_pio2f+0x318>
 8018f50:	f04f 0c00 	mov.w	ip, #0
 8018f54:	e015      	b.n	8018f82 <__kernel_rem_pio2f+0x96>
 8018f56:	42dd      	cmn	r5, r3
 8018f58:	bf5d      	ittte	pl
 8018f5a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8018f5e:	ee07 2a90 	vmovpl	s15, r2
 8018f62:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018f66:	eef0 7a47 	vmovmi.f32	s15, s14
 8018f6a:	ecee 7a01 	vstmia	lr!, {s15}
 8018f6e:	3301      	adds	r3, #1
 8018f70:	e7df      	b.n	8018f32 <__kernel_rem_pio2f+0x46>
 8018f72:	ecf5 6a01 	vldmia	r5!, {s13}
 8018f76:	ed33 7a01 	vldmdb	r3!, {s14}
 8018f7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018f7e:	f10c 0c01 	add.w	ip, ip, #1
 8018f82:	45d4      	cmp	ip, sl
 8018f84:	ddf5      	ble.n	8018f72 <__kernel_rem_pio2f+0x86>
 8018f86:	ece7 7a01 	vstmia	r7!, {s15}
 8018f8a:	3201      	adds	r2, #1
 8018f8c:	e7d5      	b.n	8018f3a <__kernel_rem_pio2f+0x4e>
 8018f8e:	ab06      	add	r3, sp, #24
 8018f90:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8018f94:	9304      	str	r3, [sp, #16]
 8018f96:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8019200 <__kernel_rem_pio2f+0x314>
 8018f9a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80191fc <__kernel_rem_pio2f+0x310>
 8018f9e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8018fa2:	9303      	str	r3, [sp, #12]
 8018fa4:	464d      	mov	r5, r9
 8018fa6:	ab56      	add	r3, sp, #344	; 0x158
 8018fa8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8018fac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8018fb0:	3f01      	subs	r7, #1
 8018fb2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8018fb6:	00bf      	lsls	r7, r7, #2
 8018fb8:	ab56      	add	r3, sp, #344	; 0x158
 8018fba:	19da      	adds	r2, r3, r7
 8018fbc:	3a4c      	subs	r2, #76	; 0x4c
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	1ae9      	subs	r1, r5, r3
 8018fc2:	2900      	cmp	r1, #0
 8018fc4:	dc4c      	bgt.n	8019060 <__kernel_rem_pio2f+0x174>
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	f000 fb84 	bl	80196d4 <scalbnf>
 8018fcc:	eeb0 8a40 	vmov.f32	s16, s0
 8018fd0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8018fd4:	ee28 0a00 	vmul.f32	s0, s16, s0
 8018fd8:	f000 fb3a 	bl	8019650 <floorf>
 8018fdc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8018fe0:	eea0 8a67 	vfms.f32	s16, s0, s15
 8018fe4:	2c00      	cmp	r4, #0
 8018fe6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8018fea:	edcd 7a01 	vstr	s15, [sp, #4]
 8018fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ff2:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018ff6:	dd48      	ble.n	801908a <__kernel_rem_pio2f+0x19e>
 8018ff8:	1e69      	subs	r1, r5, #1
 8018ffa:	ab06      	add	r3, sp, #24
 8018ffc:	f1c4 0008 	rsb	r0, r4, #8
 8019000:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8019004:	9a01      	ldr	r2, [sp, #4]
 8019006:	fa4c f300 	asr.w	r3, ip, r0
 801900a:	441a      	add	r2, r3
 801900c:	4083      	lsls	r3, r0
 801900e:	9201      	str	r2, [sp, #4]
 8019010:	ebac 0203 	sub.w	r2, ip, r3
 8019014:	ab06      	add	r3, sp, #24
 8019016:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801901a:	f1c4 0307 	rsb	r3, r4, #7
 801901e:	fa42 f803 	asr.w	r8, r2, r3
 8019022:	f1b8 0f00 	cmp.w	r8, #0
 8019026:	dd41      	ble.n	80190ac <__kernel_rem_pio2f+0x1c0>
 8019028:	9b01      	ldr	r3, [sp, #4]
 801902a:	2000      	movs	r0, #0
 801902c:	3301      	adds	r3, #1
 801902e:	9301      	str	r3, [sp, #4]
 8019030:	4601      	mov	r1, r0
 8019032:	4285      	cmp	r5, r0
 8019034:	dc6d      	bgt.n	8019112 <__kernel_rem_pio2f+0x226>
 8019036:	2c00      	cmp	r4, #0
 8019038:	dd04      	ble.n	8019044 <__kernel_rem_pio2f+0x158>
 801903a:	2c01      	cmp	r4, #1
 801903c:	d07e      	beq.n	801913c <__kernel_rem_pio2f+0x250>
 801903e:	2c02      	cmp	r4, #2
 8019040:	f000 8086 	beq.w	8019150 <__kernel_rem_pio2f+0x264>
 8019044:	f1b8 0f02 	cmp.w	r8, #2
 8019048:	d130      	bne.n	80190ac <__kernel_rem_pio2f+0x1c0>
 801904a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801904e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019052:	b359      	cbz	r1, 80190ac <__kernel_rem_pio2f+0x1c0>
 8019054:	4620      	mov	r0, r4
 8019056:	f000 fb3d 	bl	80196d4 <scalbnf>
 801905a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801905e:	e025      	b.n	80190ac <__kernel_rem_pio2f+0x1c0>
 8019060:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019064:	a806      	add	r0, sp, #24
 8019066:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801906a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801906e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019072:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019076:	ee10 1a10 	vmov	r1, s0
 801907a:	ed32 0a01 	vldmdb	r2!, {s0}
 801907e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8019082:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019086:	3301      	adds	r3, #1
 8019088:	e79a      	b.n	8018fc0 <__kernel_rem_pio2f+0xd4>
 801908a:	d106      	bne.n	801909a <__kernel_rem_pio2f+0x1ae>
 801908c:	1e6b      	subs	r3, r5, #1
 801908e:	aa06      	add	r2, sp, #24
 8019090:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8019094:	ea4f 2822 	mov.w	r8, r2, asr #8
 8019098:	e7c3      	b.n	8019022 <__kernel_rem_pio2f+0x136>
 801909a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801909e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80190a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190a6:	da31      	bge.n	801910c <__kernel_rem_pio2f+0x220>
 80190a8:	f04f 0800 	mov.w	r8, #0
 80190ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80190b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190b4:	f040 80a8 	bne.w	8019208 <__kernel_rem_pio2f+0x31c>
 80190b8:	1e6b      	subs	r3, r5, #1
 80190ba:	4618      	mov	r0, r3
 80190bc:	2200      	movs	r2, #0
 80190be:	4548      	cmp	r0, r9
 80190c0:	da4d      	bge.n	801915e <__kernel_rem_pio2f+0x272>
 80190c2:	2a00      	cmp	r2, #0
 80190c4:	f000 8087 	beq.w	80191d6 <__kernel_rem_pio2f+0x2ea>
 80190c8:	aa06      	add	r2, sp, #24
 80190ca:	3c08      	subs	r4, #8
 80190cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80190d0:	2900      	cmp	r1, #0
 80190d2:	f000 808d 	beq.w	80191f0 <__kernel_rem_pio2f+0x304>
 80190d6:	4620      	mov	r0, r4
 80190d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80190dc:	9302      	str	r3, [sp, #8]
 80190de:	f000 faf9 	bl	80196d4 <scalbnf>
 80190e2:	9b02      	ldr	r3, [sp, #8]
 80190e4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8019200 <__kernel_rem_pio2f+0x314>
 80190e8:	0099      	lsls	r1, r3, #2
 80190ea:	aa42      	add	r2, sp, #264	; 0x108
 80190ec:	1850      	adds	r0, r2, r1
 80190ee:	1d05      	adds	r5, r0, #4
 80190f0:	461c      	mov	r4, r3
 80190f2:	2c00      	cmp	r4, #0
 80190f4:	f280 80b8 	bge.w	8019268 <__kernel_rem_pio2f+0x37c>
 80190f8:	2500      	movs	r5, #0
 80190fa:	1b5c      	subs	r4, r3, r5
 80190fc:	2c00      	cmp	r4, #0
 80190fe:	f2c0 80d8 	blt.w	80192b2 <__kernel_rem_pio2f+0x3c6>
 8019102:	4f3d      	ldr	r7, [pc, #244]	; (80191f8 <__kernel_rem_pio2f+0x30c>)
 8019104:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8019204 <__kernel_rem_pio2f+0x318>
 8019108:	2400      	movs	r4, #0
 801910a:	e0c6      	b.n	801929a <__kernel_rem_pio2f+0x3ae>
 801910c:	f04f 0802 	mov.w	r8, #2
 8019110:	e78a      	b.n	8019028 <__kernel_rem_pio2f+0x13c>
 8019112:	ab06      	add	r3, sp, #24
 8019114:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019118:	b949      	cbnz	r1, 801912e <__kernel_rem_pio2f+0x242>
 801911a:	b12b      	cbz	r3, 8019128 <__kernel_rem_pio2f+0x23c>
 801911c:	aa06      	add	r2, sp, #24
 801911e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8019122:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8019126:	2301      	movs	r3, #1
 8019128:	3001      	adds	r0, #1
 801912a:	4619      	mov	r1, r3
 801912c:	e781      	b.n	8019032 <__kernel_rem_pio2f+0x146>
 801912e:	aa06      	add	r2, sp, #24
 8019130:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8019134:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8019138:	460b      	mov	r3, r1
 801913a:	e7f5      	b.n	8019128 <__kernel_rem_pio2f+0x23c>
 801913c:	1e68      	subs	r0, r5, #1
 801913e:	ab06      	add	r3, sp, #24
 8019140:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019148:	aa06      	add	r2, sp, #24
 801914a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801914e:	e779      	b.n	8019044 <__kernel_rem_pio2f+0x158>
 8019150:	1e68      	subs	r0, r5, #1
 8019152:	ab06      	add	r3, sp, #24
 8019154:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801915c:	e7f4      	b.n	8019148 <__kernel_rem_pio2f+0x25c>
 801915e:	a906      	add	r1, sp, #24
 8019160:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019164:	3801      	subs	r0, #1
 8019166:	430a      	orrs	r2, r1
 8019168:	e7a9      	b.n	80190be <__kernel_rem_pio2f+0x1d2>
 801916a:	f10c 0c01 	add.w	ip, ip, #1
 801916e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019172:	2a00      	cmp	r2, #0
 8019174:	d0f9      	beq.n	801916a <__kernel_rem_pio2f+0x27e>
 8019176:	eb0b 0305 	add.w	r3, fp, r5
 801917a:	aa1a      	add	r2, sp, #104	; 0x68
 801917c:	009b      	lsls	r3, r3, #2
 801917e:	1898      	adds	r0, r3, r2
 8019180:	3004      	adds	r0, #4
 8019182:	1c69      	adds	r1, r5, #1
 8019184:	3704      	adds	r7, #4
 8019186:	2200      	movs	r2, #0
 8019188:	4465      	add	r5, ip
 801918a:	9005      	str	r0, [sp, #20]
 801918c:	428d      	cmp	r5, r1
 801918e:	f6ff af0a 	blt.w	8018fa6 <__kernel_rem_pio2f+0xba>
 8019192:	a81a      	add	r0, sp, #104	; 0x68
 8019194:	eb02 0c03 	add.w	ip, r2, r3
 8019198:	4484      	add	ip, r0
 801919a:	9803      	ldr	r0, [sp, #12]
 801919c:	f8dd e008 	ldr.w	lr, [sp, #8]
 80191a0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80191a4:	9001      	str	r0, [sp, #4]
 80191a6:	ee07 0a90 	vmov	s15, r0
 80191aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191ae:	9805      	ldr	r0, [sp, #20]
 80191b0:	edcc 7a00 	vstr	s15, [ip]
 80191b4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8019204 <__kernel_rem_pio2f+0x318>
 80191b8:	eb00 0802 	add.w	r8, r0, r2
 80191bc:	f04f 0c00 	mov.w	ip, #0
 80191c0:	45d4      	cmp	ip, sl
 80191c2:	dd0c      	ble.n	80191de <__kernel_rem_pio2f+0x2f2>
 80191c4:	eb02 0c07 	add.w	ip, r2, r7
 80191c8:	a842      	add	r0, sp, #264	; 0x108
 80191ca:	4484      	add	ip, r0
 80191cc:	edcc 7a01 	vstr	s15, [ip, #4]
 80191d0:	3101      	adds	r1, #1
 80191d2:	3204      	adds	r2, #4
 80191d4:	e7da      	b.n	801918c <__kernel_rem_pio2f+0x2a0>
 80191d6:	9b04      	ldr	r3, [sp, #16]
 80191d8:	f04f 0c01 	mov.w	ip, #1
 80191dc:	e7c7      	b.n	801916e <__kernel_rem_pio2f+0x282>
 80191de:	ecfe 6a01 	vldmia	lr!, {s13}
 80191e2:	ed38 7a01 	vldmdb	r8!, {s14}
 80191e6:	f10c 0c01 	add.w	ip, ip, #1
 80191ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80191ee:	e7e7      	b.n	80191c0 <__kernel_rem_pio2f+0x2d4>
 80191f0:	3b01      	subs	r3, #1
 80191f2:	e769      	b.n	80190c8 <__kernel_rem_pio2f+0x1dc>
 80191f4:	0801e950 	.word	0x0801e950
 80191f8:	0801e924 	.word	0x0801e924
 80191fc:	43800000 	.word	0x43800000
 8019200:	3b800000 	.word	0x3b800000
 8019204:	00000000 	.word	0x00000000
 8019208:	4260      	negs	r0, r4
 801920a:	eeb0 0a48 	vmov.f32	s0, s16
 801920e:	f000 fa61 	bl	80196d4 <scalbnf>
 8019212:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80191fc <__kernel_rem_pio2f+0x310>
 8019216:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801921a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801921e:	db1a      	blt.n	8019256 <__kernel_rem_pio2f+0x36a>
 8019220:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8019200 <__kernel_rem_pio2f+0x314>
 8019224:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019228:	aa06      	add	r2, sp, #24
 801922a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801922e:	a906      	add	r1, sp, #24
 8019230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019234:	3408      	adds	r4, #8
 8019236:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801923a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801923e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019242:	ee10 3a10 	vmov	r3, s0
 8019246:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801924a:	1c6b      	adds	r3, r5, #1
 801924c:	ee17 2a90 	vmov	r2, s15
 8019250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019254:	e73f      	b.n	80190d6 <__kernel_rem_pio2f+0x1ea>
 8019256:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801925a:	aa06      	add	r2, sp, #24
 801925c:	ee10 3a10 	vmov	r3, s0
 8019260:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8019264:	462b      	mov	r3, r5
 8019266:	e736      	b.n	80190d6 <__kernel_rem_pio2f+0x1ea>
 8019268:	aa06      	add	r2, sp, #24
 801926a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801926e:	9202      	str	r2, [sp, #8]
 8019270:	ee07 2a90 	vmov	s15, r2
 8019274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019278:	3c01      	subs	r4, #1
 801927a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801927e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019282:	ed65 7a01 	vstmdb	r5!, {s15}
 8019286:	e734      	b.n	80190f2 <__kernel_rem_pio2f+0x206>
 8019288:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801928c:	ecf7 6a01 	vldmia	r7!, {s13}
 8019290:	ed9c 7a00 	vldr	s14, [ip]
 8019294:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019298:	3401      	adds	r4, #1
 801929a:	454c      	cmp	r4, r9
 801929c:	dc01      	bgt.n	80192a2 <__kernel_rem_pio2f+0x3b6>
 801929e:	42a5      	cmp	r5, r4
 80192a0:	daf2      	bge.n	8019288 <__kernel_rem_pio2f+0x39c>
 80192a2:	aa56      	add	r2, sp, #344	; 0x158
 80192a4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80192a8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80192ac:	3501      	adds	r5, #1
 80192ae:	3804      	subs	r0, #4
 80192b0:	e723      	b.n	80190fa <__kernel_rem_pio2f+0x20e>
 80192b2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80192b4:	2a03      	cmp	r2, #3
 80192b6:	d84d      	bhi.n	8019354 <__kernel_rem_pio2f+0x468>
 80192b8:	e8df f002 	tbb	[pc, r2]
 80192bc:	021f1f3e 	.word	0x021f1f3e
 80192c0:	aa56      	add	r2, sp, #344	; 0x158
 80192c2:	4411      	add	r1, r2
 80192c4:	399c      	subs	r1, #156	; 0x9c
 80192c6:	4608      	mov	r0, r1
 80192c8:	461c      	mov	r4, r3
 80192ca:	2c00      	cmp	r4, #0
 80192cc:	dc5f      	bgt.n	801938e <__kernel_rem_pio2f+0x4a2>
 80192ce:	4608      	mov	r0, r1
 80192d0:	461c      	mov	r4, r3
 80192d2:	2c01      	cmp	r4, #1
 80192d4:	dc6b      	bgt.n	80193ae <__kernel_rem_pio2f+0x4c2>
 80192d6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8019204 <__kernel_rem_pio2f+0x318>
 80192da:	2b01      	cmp	r3, #1
 80192dc:	dc77      	bgt.n	80193ce <__kernel_rem_pio2f+0x4e2>
 80192de:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80192e2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80192e6:	f1b8 0f00 	cmp.w	r8, #0
 80192ea:	d176      	bne.n	80193da <__kernel_rem_pio2f+0x4ee>
 80192ec:	edc6 6a00 	vstr	s13, [r6]
 80192f0:	ed86 7a01 	vstr	s14, [r6, #4]
 80192f4:	edc6 7a02 	vstr	s15, [r6, #8]
 80192f8:	e02c      	b.n	8019354 <__kernel_rem_pio2f+0x468>
 80192fa:	aa56      	add	r2, sp, #344	; 0x158
 80192fc:	4411      	add	r1, r2
 80192fe:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8019204 <__kernel_rem_pio2f+0x318>
 8019302:	399c      	subs	r1, #156	; 0x9c
 8019304:	4618      	mov	r0, r3
 8019306:	2800      	cmp	r0, #0
 8019308:	da32      	bge.n	8019370 <__kernel_rem_pio2f+0x484>
 801930a:	f1b8 0f00 	cmp.w	r8, #0
 801930e:	d035      	beq.n	801937c <__kernel_rem_pio2f+0x490>
 8019310:	eef1 7a47 	vneg.f32	s15, s14
 8019314:	edc6 7a00 	vstr	s15, [r6]
 8019318:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801931c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019320:	a82f      	add	r0, sp, #188	; 0xbc
 8019322:	2101      	movs	r1, #1
 8019324:	428b      	cmp	r3, r1
 8019326:	da2c      	bge.n	8019382 <__kernel_rem_pio2f+0x496>
 8019328:	f1b8 0f00 	cmp.w	r8, #0
 801932c:	d001      	beq.n	8019332 <__kernel_rem_pio2f+0x446>
 801932e:	eef1 7a67 	vneg.f32	s15, s15
 8019332:	edc6 7a01 	vstr	s15, [r6, #4]
 8019336:	e00d      	b.n	8019354 <__kernel_rem_pio2f+0x468>
 8019338:	aa56      	add	r2, sp, #344	; 0x158
 801933a:	4411      	add	r1, r2
 801933c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8019204 <__kernel_rem_pio2f+0x318>
 8019340:	399c      	subs	r1, #156	; 0x9c
 8019342:	2b00      	cmp	r3, #0
 8019344:	da0e      	bge.n	8019364 <__kernel_rem_pio2f+0x478>
 8019346:	f1b8 0f00 	cmp.w	r8, #0
 801934a:	d001      	beq.n	8019350 <__kernel_rem_pio2f+0x464>
 801934c:	eef1 7a67 	vneg.f32	s15, s15
 8019350:	edc6 7a00 	vstr	s15, [r6]
 8019354:	9b01      	ldr	r3, [sp, #4]
 8019356:	f003 0007 	and.w	r0, r3, #7
 801935a:	b057      	add	sp, #348	; 0x15c
 801935c:	ecbd 8b04 	vpop	{d8-d9}
 8019360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019364:	ed31 7a01 	vldmdb	r1!, {s14}
 8019368:	3b01      	subs	r3, #1
 801936a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801936e:	e7e8      	b.n	8019342 <__kernel_rem_pio2f+0x456>
 8019370:	ed71 7a01 	vldmdb	r1!, {s15}
 8019374:	3801      	subs	r0, #1
 8019376:	ee37 7a27 	vadd.f32	s14, s14, s15
 801937a:	e7c4      	b.n	8019306 <__kernel_rem_pio2f+0x41a>
 801937c:	eef0 7a47 	vmov.f32	s15, s14
 8019380:	e7c8      	b.n	8019314 <__kernel_rem_pio2f+0x428>
 8019382:	ecb0 7a01 	vldmia	r0!, {s14}
 8019386:	3101      	adds	r1, #1
 8019388:	ee77 7a87 	vadd.f32	s15, s15, s14
 801938c:	e7ca      	b.n	8019324 <__kernel_rem_pio2f+0x438>
 801938e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8019392:	ed70 6a01 	vldmdb	r0!, {s13}
 8019396:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801939a:	3c01      	subs	r4, #1
 801939c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80193a0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80193a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80193a8:	edc0 7a00 	vstr	s15, [r0]
 80193ac:	e78d      	b.n	80192ca <__kernel_rem_pio2f+0x3de>
 80193ae:	ed50 7a02 	vldr	s15, [r0, #-8]
 80193b2:	ed70 6a01 	vldmdb	r0!, {s13}
 80193b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80193ba:	3c01      	subs	r4, #1
 80193bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80193c0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80193c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80193c8:	edc0 7a00 	vstr	s15, [r0]
 80193cc:	e781      	b.n	80192d2 <__kernel_rem_pio2f+0x3e6>
 80193ce:	ed31 7a01 	vldmdb	r1!, {s14}
 80193d2:	3b01      	subs	r3, #1
 80193d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193d8:	e77f      	b.n	80192da <__kernel_rem_pio2f+0x3ee>
 80193da:	eef1 6a66 	vneg.f32	s13, s13
 80193de:	eeb1 7a47 	vneg.f32	s14, s14
 80193e2:	edc6 6a00 	vstr	s13, [r6]
 80193e6:	ed86 7a01 	vstr	s14, [r6, #4]
 80193ea:	eef1 7a67 	vneg.f32	s15, s15
 80193ee:	e781      	b.n	80192f4 <__kernel_rem_pio2f+0x408>

080193f0 <__kernel_sinf>:
 80193f0:	ee10 3a10 	vmov	r3, s0
 80193f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80193f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80193fc:	da04      	bge.n	8019408 <__kernel_sinf+0x18>
 80193fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019402:	ee17 3a90 	vmov	r3, s15
 8019406:	b35b      	cbz	r3, 8019460 <__kernel_sinf+0x70>
 8019408:	ee20 7a00 	vmul.f32	s14, s0, s0
 801940c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019464 <__kernel_sinf+0x74>
 8019410:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8019468 <__kernel_sinf+0x78>
 8019414:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019418:	eddf 7a14 	vldr	s15, [pc, #80]	; 801946c <__kernel_sinf+0x7c>
 801941c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019420:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8019470 <__kernel_sinf+0x80>
 8019424:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019428:	eddf 7a12 	vldr	s15, [pc, #72]	; 8019474 <__kernel_sinf+0x84>
 801942c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019430:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019434:	b930      	cbnz	r0, 8019444 <__kernel_sinf+0x54>
 8019436:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8019478 <__kernel_sinf+0x88>
 801943a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801943e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8019442:	4770      	bx	lr
 8019444:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019448:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801944c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019450:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019454:	eddf 7a09 	vldr	s15, [pc, #36]	; 801947c <__kernel_sinf+0x8c>
 8019458:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801945c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019460:	4770      	bx	lr
 8019462:	bf00      	nop
 8019464:	2f2ec9d3 	.word	0x2f2ec9d3
 8019468:	b2d72f34 	.word	0xb2d72f34
 801946c:	3638ef1b 	.word	0x3638ef1b
 8019470:	b9500d01 	.word	0xb9500d01
 8019474:	3c088889 	.word	0x3c088889
 8019478:	be2aaaab 	.word	0xbe2aaaab
 801947c:	3e2aaaab 	.word	0x3e2aaaab

08019480 <matherr>:
 8019480:	2000      	movs	r0, #0
 8019482:	4770      	bx	lr
 8019484:	0000      	movs	r0, r0
	...

08019488 <nan>:
 8019488:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019490 <nan+0x8>
 801948c:	4770      	bx	lr
 801948e:	bf00      	nop
 8019490:	00000000 	.word	0x00000000
 8019494:	7ff80000 	.word	0x7ff80000

08019498 <atanf>:
 8019498:	b538      	push	{r3, r4, r5, lr}
 801949a:	ee10 5a10 	vmov	r5, s0
 801949e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80194a2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80194a6:	eef0 7a40 	vmov.f32	s15, s0
 80194aa:	db10      	blt.n	80194ce <atanf+0x36>
 80194ac:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80194b0:	dd04      	ble.n	80194bc <atanf+0x24>
 80194b2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80194b6:	eeb0 0a67 	vmov.f32	s0, s15
 80194ba:	bd38      	pop	{r3, r4, r5, pc}
 80194bc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80195f4 <atanf+0x15c>
 80194c0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80195f8 <atanf+0x160>
 80194c4:	2d00      	cmp	r5, #0
 80194c6:	bfd8      	it	le
 80194c8:	eef0 7a47 	vmovle.f32	s15, s14
 80194cc:	e7f3      	b.n	80194b6 <atanf+0x1e>
 80194ce:	4b4b      	ldr	r3, [pc, #300]	; (80195fc <atanf+0x164>)
 80194d0:	429c      	cmp	r4, r3
 80194d2:	dc10      	bgt.n	80194f6 <atanf+0x5e>
 80194d4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80194d8:	da0a      	bge.n	80194f0 <atanf+0x58>
 80194da:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8019600 <atanf+0x168>
 80194de:	ee30 7a07 	vadd.f32	s14, s0, s14
 80194e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80194e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80194ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194ee:	dce2      	bgt.n	80194b6 <atanf+0x1e>
 80194f0:	f04f 33ff 	mov.w	r3, #4294967295
 80194f4:	e013      	b.n	801951e <atanf+0x86>
 80194f6:	f000 f8a3 	bl	8019640 <fabsf>
 80194fa:	4b42      	ldr	r3, [pc, #264]	; (8019604 <atanf+0x16c>)
 80194fc:	429c      	cmp	r4, r3
 80194fe:	dc4f      	bgt.n	80195a0 <atanf+0x108>
 8019500:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8019504:	429c      	cmp	r4, r3
 8019506:	dc41      	bgt.n	801958c <atanf+0xf4>
 8019508:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801950c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019510:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019514:	2300      	movs	r3, #0
 8019516:	ee30 0a27 	vadd.f32	s0, s0, s15
 801951a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801951e:	1c5a      	adds	r2, r3, #1
 8019520:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019524:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019608 <atanf+0x170>
 8019528:	eddf 5a38 	vldr	s11, [pc, #224]	; 801960c <atanf+0x174>
 801952c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8019610 <atanf+0x178>
 8019530:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019534:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019538:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8019614 <atanf+0x17c>
 801953c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019540:	eddf 5a35 	vldr	s11, [pc, #212]	; 8019618 <atanf+0x180>
 8019544:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019548:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801961c <atanf+0x184>
 801954c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019550:	eddf 5a33 	vldr	s11, [pc, #204]	; 8019620 <atanf+0x188>
 8019554:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019558:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8019624 <atanf+0x18c>
 801955c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019560:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8019628 <atanf+0x190>
 8019564:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019568:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801962c <atanf+0x194>
 801956c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8019570:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8019630 <atanf+0x198>
 8019574:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019578:	ee27 7a26 	vmul.f32	s14, s14, s13
 801957c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019584:	d121      	bne.n	80195ca <atanf+0x132>
 8019586:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801958a:	e794      	b.n	80194b6 <atanf+0x1e>
 801958c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019590:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019594:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019598:	2301      	movs	r3, #1
 801959a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801959e:	e7be      	b.n	801951e <atanf+0x86>
 80195a0:	4b24      	ldr	r3, [pc, #144]	; (8019634 <atanf+0x19c>)
 80195a2:	429c      	cmp	r4, r3
 80195a4:	dc0b      	bgt.n	80195be <atanf+0x126>
 80195a6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80195aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80195ae:	eea0 7a27 	vfma.f32	s14, s0, s15
 80195b2:	2302      	movs	r3, #2
 80195b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80195b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80195bc:	e7af      	b.n	801951e <atanf+0x86>
 80195be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80195c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80195c6:	2303      	movs	r3, #3
 80195c8:	e7a9      	b.n	801951e <atanf+0x86>
 80195ca:	4a1b      	ldr	r2, [pc, #108]	; (8019638 <atanf+0x1a0>)
 80195cc:	491b      	ldr	r1, [pc, #108]	; (801963c <atanf+0x1a4>)
 80195ce:	009b      	lsls	r3, r3, #2
 80195d0:	441a      	add	r2, r3
 80195d2:	440b      	add	r3, r1
 80195d4:	edd3 6a00 	vldr	s13, [r3]
 80195d8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80195dc:	2d00      	cmp	r5, #0
 80195de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80195e2:	ed92 7a00 	vldr	s14, [r2]
 80195e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80195ea:	bfb8      	it	lt
 80195ec:	eef1 7a67 	vneglt.f32	s15, s15
 80195f0:	e761      	b.n	80194b6 <atanf+0x1e>
 80195f2:	bf00      	nop
 80195f4:	bfc90fdb 	.word	0xbfc90fdb
 80195f8:	3fc90fdb 	.word	0x3fc90fdb
 80195fc:	3edfffff 	.word	0x3edfffff
 8019600:	7149f2ca 	.word	0x7149f2ca
 8019604:	3f97ffff 	.word	0x3f97ffff
 8019608:	3c8569d7 	.word	0x3c8569d7
 801960c:	3d4bda59 	.word	0x3d4bda59
 8019610:	bd6ef16b 	.word	0xbd6ef16b
 8019614:	3d886b35 	.word	0x3d886b35
 8019618:	3dba2e6e 	.word	0x3dba2e6e
 801961c:	3e124925 	.word	0x3e124925
 8019620:	3eaaaaab 	.word	0x3eaaaaab
 8019624:	bd15a221 	.word	0xbd15a221
 8019628:	bd9d8795 	.word	0xbd9d8795
 801962c:	bde38e38 	.word	0xbde38e38
 8019630:	be4ccccd 	.word	0xbe4ccccd
 8019634:	401bffff 	.word	0x401bffff
 8019638:	0801e95c 	.word	0x0801e95c
 801963c:	0801e96c 	.word	0x0801e96c

08019640 <fabsf>:
 8019640:	ee10 3a10 	vmov	r3, s0
 8019644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019648:	ee00 3a10 	vmov	s0, r3
 801964c:	4770      	bx	lr
	...

08019650 <floorf>:
 8019650:	ee10 3a10 	vmov	r3, s0
 8019654:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019658:	0dca      	lsrs	r2, r1, #23
 801965a:	3a7f      	subs	r2, #127	; 0x7f
 801965c:	2a16      	cmp	r2, #22
 801965e:	dc2a      	bgt.n	80196b6 <floorf+0x66>
 8019660:	2a00      	cmp	r2, #0
 8019662:	da11      	bge.n	8019688 <floorf+0x38>
 8019664:	eddf 7a18 	vldr	s15, [pc, #96]	; 80196c8 <floorf+0x78>
 8019668:	ee30 0a27 	vadd.f32	s0, s0, s15
 801966c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019674:	dd05      	ble.n	8019682 <floorf+0x32>
 8019676:	2b00      	cmp	r3, #0
 8019678:	da23      	bge.n	80196c2 <floorf+0x72>
 801967a:	4a14      	ldr	r2, [pc, #80]	; (80196cc <floorf+0x7c>)
 801967c:	2900      	cmp	r1, #0
 801967e:	bf18      	it	ne
 8019680:	4613      	movne	r3, r2
 8019682:	ee00 3a10 	vmov	s0, r3
 8019686:	4770      	bx	lr
 8019688:	4911      	ldr	r1, [pc, #68]	; (80196d0 <floorf+0x80>)
 801968a:	4111      	asrs	r1, r2
 801968c:	420b      	tst	r3, r1
 801968e:	d0fa      	beq.n	8019686 <floorf+0x36>
 8019690:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80196c8 <floorf+0x78>
 8019694:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019698:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801969c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196a0:	ddef      	ble.n	8019682 <floorf+0x32>
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	bfbe      	ittt	lt
 80196a6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80196aa:	fa40 f202 	asrlt.w	r2, r0, r2
 80196ae:	189b      	addlt	r3, r3, r2
 80196b0:	ea23 0301 	bic.w	r3, r3, r1
 80196b4:	e7e5      	b.n	8019682 <floorf+0x32>
 80196b6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80196ba:	d3e4      	bcc.n	8019686 <floorf+0x36>
 80196bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80196c0:	4770      	bx	lr
 80196c2:	2300      	movs	r3, #0
 80196c4:	e7dd      	b.n	8019682 <floorf+0x32>
 80196c6:	bf00      	nop
 80196c8:	7149f2ca 	.word	0x7149f2ca
 80196cc:	bf800000 	.word	0xbf800000
 80196d0:	007fffff 	.word	0x007fffff

080196d4 <scalbnf>:
 80196d4:	b508      	push	{r3, lr}
 80196d6:	ee10 2a10 	vmov	r2, s0
 80196da:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80196de:	ed2d 8b02 	vpush	{d8}
 80196e2:	eef0 0a40 	vmov.f32	s1, s0
 80196e6:	d004      	beq.n	80196f2 <scalbnf+0x1e>
 80196e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80196ec:	d306      	bcc.n	80196fc <scalbnf+0x28>
 80196ee:	ee70 0a00 	vadd.f32	s1, s0, s0
 80196f2:	ecbd 8b02 	vpop	{d8}
 80196f6:	eeb0 0a60 	vmov.f32	s0, s1
 80196fa:	bd08      	pop	{r3, pc}
 80196fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019700:	d21c      	bcs.n	801973c <scalbnf+0x68>
 8019702:	4b1f      	ldr	r3, [pc, #124]	; (8019780 <scalbnf+0xac>)
 8019704:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019784 <scalbnf+0xb0>
 8019708:	4298      	cmp	r0, r3
 801970a:	ee60 0a27 	vmul.f32	s1, s0, s15
 801970e:	db10      	blt.n	8019732 <scalbnf+0x5e>
 8019710:	ee10 2a90 	vmov	r2, s1
 8019714:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8019718:	3b19      	subs	r3, #25
 801971a:	4403      	add	r3, r0
 801971c:	2bfe      	cmp	r3, #254	; 0xfe
 801971e:	dd0f      	ble.n	8019740 <scalbnf+0x6c>
 8019720:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8019788 <scalbnf+0xb4>
 8019724:	eeb0 0a48 	vmov.f32	s0, s16
 8019728:	f000 f834 	bl	8019794 <copysignf>
 801972c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8019730:	e7df      	b.n	80196f2 <scalbnf+0x1e>
 8019732:	eddf 7a16 	vldr	s15, [pc, #88]	; 801978c <scalbnf+0xb8>
 8019736:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801973a:	e7da      	b.n	80196f2 <scalbnf+0x1e>
 801973c:	0ddb      	lsrs	r3, r3, #23
 801973e:	e7ec      	b.n	801971a <scalbnf+0x46>
 8019740:	2b00      	cmp	r3, #0
 8019742:	dd06      	ble.n	8019752 <scalbnf+0x7e>
 8019744:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019748:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801974c:	ee00 3a90 	vmov	s1, r3
 8019750:	e7cf      	b.n	80196f2 <scalbnf+0x1e>
 8019752:	f113 0f16 	cmn.w	r3, #22
 8019756:	da06      	bge.n	8019766 <scalbnf+0x92>
 8019758:	f24c 3350 	movw	r3, #50000	; 0xc350
 801975c:	4298      	cmp	r0, r3
 801975e:	dcdf      	bgt.n	8019720 <scalbnf+0x4c>
 8019760:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801978c <scalbnf+0xb8>
 8019764:	e7de      	b.n	8019724 <scalbnf+0x50>
 8019766:	3319      	adds	r3, #25
 8019768:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801976c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019770:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019790 <scalbnf+0xbc>
 8019774:	ee07 3a10 	vmov	s14, r3
 8019778:	ee67 0a27 	vmul.f32	s1, s14, s15
 801977c:	e7b9      	b.n	80196f2 <scalbnf+0x1e>
 801977e:	bf00      	nop
 8019780:	ffff3cb0 	.word	0xffff3cb0
 8019784:	4c000000 	.word	0x4c000000
 8019788:	7149f2ca 	.word	0x7149f2ca
 801978c:	0da24260 	.word	0x0da24260
 8019790:	33000000 	.word	0x33000000

08019794 <copysignf>:
 8019794:	ee10 3a10 	vmov	r3, s0
 8019798:	ee10 2a90 	vmov	r2, s1
 801979c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80197a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80197a4:	4313      	orrs	r3, r2
 80197a6:	ee00 3a10 	vmov	s0, r3
 80197aa:	4770      	bx	lr

080197ac <__assert_func>:
 80197ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80197ae:	461c      	mov	r4, r3
 80197b0:	4b09      	ldr	r3, [pc, #36]	; (80197d8 <__assert_func+0x2c>)
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	4605      	mov	r5, r0
 80197b6:	68d8      	ldr	r0, [r3, #12]
 80197b8:	b152      	cbz	r2, 80197d0 <__assert_func+0x24>
 80197ba:	4b08      	ldr	r3, [pc, #32]	; (80197dc <__assert_func+0x30>)
 80197bc:	9100      	str	r1, [sp, #0]
 80197be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80197c2:	4907      	ldr	r1, [pc, #28]	; (80197e0 <__assert_func+0x34>)
 80197c4:	462b      	mov	r3, r5
 80197c6:	4622      	mov	r2, r4
 80197c8:	f000 f814 	bl	80197f4 <fiprintf>
 80197cc:	f002 f886 	bl	801b8dc <abort>
 80197d0:	4b04      	ldr	r3, [pc, #16]	; (80197e4 <__assert_func+0x38>)
 80197d2:	461a      	mov	r2, r3
 80197d4:	e7f2      	b.n	80197bc <__assert_func+0x10>
 80197d6:	bf00      	nop
 80197d8:	200001c4 	.word	0x200001c4
 80197dc:	0801e97c 	.word	0x0801e97c
 80197e0:	0801e989 	.word	0x0801e989
 80197e4:	0801e9b7 	.word	0x0801e9b7

080197e8 <__errno>:
 80197e8:	4b01      	ldr	r3, [pc, #4]	; (80197f0 <__errno+0x8>)
 80197ea:	6818      	ldr	r0, [r3, #0]
 80197ec:	4770      	bx	lr
 80197ee:	bf00      	nop
 80197f0:	200001c4 	.word	0x200001c4

080197f4 <fiprintf>:
 80197f4:	b40e      	push	{r1, r2, r3}
 80197f6:	b503      	push	{r0, r1, lr}
 80197f8:	4601      	mov	r1, r0
 80197fa:	ab03      	add	r3, sp, #12
 80197fc:	4805      	ldr	r0, [pc, #20]	; (8019814 <fiprintf+0x20>)
 80197fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019802:	6800      	ldr	r0, [r0, #0]
 8019804:	9301      	str	r3, [sp, #4]
 8019806:	f000 f867 	bl	80198d8 <_vfiprintf_r>
 801980a:	b002      	add	sp, #8
 801980c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019810:	b003      	add	sp, #12
 8019812:	4770      	bx	lr
 8019814:	200001c4 	.word	0x200001c4

08019818 <__libc_init_array>:
 8019818:	b570      	push	{r4, r5, r6, lr}
 801981a:	4e0d      	ldr	r6, [pc, #52]	; (8019850 <__libc_init_array+0x38>)
 801981c:	4c0d      	ldr	r4, [pc, #52]	; (8019854 <__libc_init_array+0x3c>)
 801981e:	1ba4      	subs	r4, r4, r6
 8019820:	10a4      	asrs	r4, r4, #2
 8019822:	2500      	movs	r5, #0
 8019824:	42a5      	cmp	r5, r4
 8019826:	d109      	bne.n	801983c <__libc_init_array+0x24>
 8019828:	4e0b      	ldr	r6, [pc, #44]	; (8019858 <__libc_init_array+0x40>)
 801982a:	4c0c      	ldr	r4, [pc, #48]	; (801985c <__libc_init_array+0x44>)
 801982c:	f004 fb44 	bl	801deb8 <_init>
 8019830:	1ba4      	subs	r4, r4, r6
 8019832:	10a4      	asrs	r4, r4, #2
 8019834:	2500      	movs	r5, #0
 8019836:	42a5      	cmp	r5, r4
 8019838:	d105      	bne.n	8019846 <__libc_init_array+0x2e>
 801983a:	bd70      	pop	{r4, r5, r6, pc}
 801983c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019840:	4798      	blx	r3
 8019842:	3501      	adds	r5, #1
 8019844:	e7ee      	b.n	8019824 <__libc_init_array+0xc>
 8019846:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801984a:	4798      	blx	r3
 801984c:	3501      	adds	r5, #1
 801984e:	e7f2      	b.n	8019836 <__libc_init_array+0x1e>
 8019850:	0801ece0 	.word	0x0801ece0
 8019854:	0801ece0 	.word	0x0801ece0
 8019858:	0801ece0 	.word	0x0801ece0
 801985c:	0801ece8 	.word	0x0801ece8

08019860 <memcpy>:
 8019860:	b510      	push	{r4, lr}
 8019862:	1e43      	subs	r3, r0, #1
 8019864:	440a      	add	r2, r1
 8019866:	4291      	cmp	r1, r2
 8019868:	d100      	bne.n	801986c <memcpy+0xc>
 801986a:	bd10      	pop	{r4, pc}
 801986c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019874:	e7f7      	b.n	8019866 <memcpy+0x6>

08019876 <memset>:
 8019876:	4402      	add	r2, r0
 8019878:	4603      	mov	r3, r0
 801987a:	4293      	cmp	r3, r2
 801987c:	d100      	bne.n	8019880 <memset+0xa>
 801987e:	4770      	bx	lr
 8019880:	f803 1b01 	strb.w	r1, [r3], #1
 8019884:	e7f9      	b.n	801987a <memset+0x4>

08019886 <__sfputc_r>:
 8019886:	6893      	ldr	r3, [r2, #8]
 8019888:	3b01      	subs	r3, #1
 801988a:	2b00      	cmp	r3, #0
 801988c:	b410      	push	{r4}
 801988e:	6093      	str	r3, [r2, #8]
 8019890:	da08      	bge.n	80198a4 <__sfputc_r+0x1e>
 8019892:	6994      	ldr	r4, [r2, #24]
 8019894:	42a3      	cmp	r3, r4
 8019896:	db01      	blt.n	801989c <__sfputc_r+0x16>
 8019898:	290a      	cmp	r1, #10
 801989a:	d103      	bne.n	80198a4 <__sfputc_r+0x1e>
 801989c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198a0:	f001 bf5c 	b.w	801b75c <__swbuf_r>
 80198a4:	6813      	ldr	r3, [r2, #0]
 80198a6:	1c58      	adds	r0, r3, #1
 80198a8:	6010      	str	r0, [r2, #0]
 80198aa:	7019      	strb	r1, [r3, #0]
 80198ac:	4608      	mov	r0, r1
 80198ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198b2:	4770      	bx	lr

080198b4 <__sfputs_r>:
 80198b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198b6:	4606      	mov	r6, r0
 80198b8:	460f      	mov	r7, r1
 80198ba:	4614      	mov	r4, r2
 80198bc:	18d5      	adds	r5, r2, r3
 80198be:	42ac      	cmp	r4, r5
 80198c0:	d101      	bne.n	80198c6 <__sfputs_r+0x12>
 80198c2:	2000      	movs	r0, #0
 80198c4:	e007      	b.n	80198d6 <__sfputs_r+0x22>
 80198c6:	463a      	mov	r2, r7
 80198c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198cc:	4630      	mov	r0, r6
 80198ce:	f7ff ffda 	bl	8019886 <__sfputc_r>
 80198d2:	1c43      	adds	r3, r0, #1
 80198d4:	d1f3      	bne.n	80198be <__sfputs_r+0xa>
 80198d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080198d8 <_vfiprintf_r>:
 80198d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198dc:	460c      	mov	r4, r1
 80198de:	b09d      	sub	sp, #116	; 0x74
 80198e0:	4617      	mov	r7, r2
 80198e2:	461d      	mov	r5, r3
 80198e4:	4606      	mov	r6, r0
 80198e6:	b118      	cbz	r0, 80198f0 <_vfiprintf_r+0x18>
 80198e8:	6983      	ldr	r3, [r0, #24]
 80198ea:	b90b      	cbnz	r3, 80198f0 <_vfiprintf_r+0x18>
 80198ec:	f002 ff34 	bl	801c758 <__sinit>
 80198f0:	4b7c      	ldr	r3, [pc, #496]	; (8019ae4 <_vfiprintf_r+0x20c>)
 80198f2:	429c      	cmp	r4, r3
 80198f4:	d158      	bne.n	80199a8 <_vfiprintf_r+0xd0>
 80198f6:	6874      	ldr	r4, [r6, #4]
 80198f8:	89a3      	ldrh	r3, [r4, #12]
 80198fa:	0718      	lsls	r0, r3, #28
 80198fc:	d55e      	bpl.n	80199bc <_vfiprintf_r+0xe4>
 80198fe:	6923      	ldr	r3, [r4, #16]
 8019900:	2b00      	cmp	r3, #0
 8019902:	d05b      	beq.n	80199bc <_vfiprintf_r+0xe4>
 8019904:	2300      	movs	r3, #0
 8019906:	9309      	str	r3, [sp, #36]	; 0x24
 8019908:	2320      	movs	r3, #32
 801990a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801990e:	2330      	movs	r3, #48	; 0x30
 8019910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019914:	9503      	str	r5, [sp, #12]
 8019916:	f04f 0b01 	mov.w	fp, #1
 801991a:	46b8      	mov	r8, r7
 801991c:	4645      	mov	r5, r8
 801991e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019922:	b10b      	cbz	r3, 8019928 <_vfiprintf_r+0x50>
 8019924:	2b25      	cmp	r3, #37	; 0x25
 8019926:	d154      	bne.n	80199d2 <_vfiprintf_r+0xfa>
 8019928:	ebb8 0a07 	subs.w	sl, r8, r7
 801992c:	d00b      	beq.n	8019946 <_vfiprintf_r+0x6e>
 801992e:	4653      	mov	r3, sl
 8019930:	463a      	mov	r2, r7
 8019932:	4621      	mov	r1, r4
 8019934:	4630      	mov	r0, r6
 8019936:	f7ff ffbd 	bl	80198b4 <__sfputs_r>
 801993a:	3001      	adds	r0, #1
 801993c:	f000 80c2 	beq.w	8019ac4 <_vfiprintf_r+0x1ec>
 8019940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019942:	4453      	add	r3, sl
 8019944:	9309      	str	r3, [sp, #36]	; 0x24
 8019946:	f898 3000 	ldrb.w	r3, [r8]
 801994a:	2b00      	cmp	r3, #0
 801994c:	f000 80ba 	beq.w	8019ac4 <_vfiprintf_r+0x1ec>
 8019950:	2300      	movs	r3, #0
 8019952:	f04f 32ff 	mov.w	r2, #4294967295
 8019956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801995a:	9304      	str	r3, [sp, #16]
 801995c:	9307      	str	r3, [sp, #28]
 801995e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019962:	931a      	str	r3, [sp, #104]	; 0x68
 8019964:	46a8      	mov	r8, r5
 8019966:	2205      	movs	r2, #5
 8019968:	f818 1b01 	ldrb.w	r1, [r8], #1
 801996c:	485e      	ldr	r0, [pc, #376]	; (8019ae8 <_vfiprintf_r+0x210>)
 801996e:	f7e6 fc47 	bl	8000200 <memchr>
 8019972:	9b04      	ldr	r3, [sp, #16]
 8019974:	bb78      	cbnz	r0, 80199d6 <_vfiprintf_r+0xfe>
 8019976:	06d9      	lsls	r1, r3, #27
 8019978:	bf44      	itt	mi
 801997a:	2220      	movmi	r2, #32
 801997c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019980:	071a      	lsls	r2, r3, #28
 8019982:	bf44      	itt	mi
 8019984:	222b      	movmi	r2, #43	; 0x2b
 8019986:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801998a:	782a      	ldrb	r2, [r5, #0]
 801998c:	2a2a      	cmp	r2, #42	; 0x2a
 801998e:	d02a      	beq.n	80199e6 <_vfiprintf_r+0x10e>
 8019990:	9a07      	ldr	r2, [sp, #28]
 8019992:	46a8      	mov	r8, r5
 8019994:	2000      	movs	r0, #0
 8019996:	250a      	movs	r5, #10
 8019998:	4641      	mov	r1, r8
 801999a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801999e:	3b30      	subs	r3, #48	; 0x30
 80199a0:	2b09      	cmp	r3, #9
 80199a2:	d969      	bls.n	8019a78 <_vfiprintf_r+0x1a0>
 80199a4:	b360      	cbz	r0, 8019a00 <_vfiprintf_r+0x128>
 80199a6:	e024      	b.n	80199f2 <_vfiprintf_r+0x11a>
 80199a8:	4b50      	ldr	r3, [pc, #320]	; (8019aec <_vfiprintf_r+0x214>)
 80199aa:	429c      	cmp	r4, r3
 80199ac:	d101      	bne.n	80199b2 <_vfiprintf_r+0xda>
 80199ae:	68b4      	ldr	r4, [r6, #8]
 80199b0:	e7a2      	b.n	80198f8 <_vfiprintf_r+0x20>
 80199b2:	4b4f      	ldr	r3, [pc, #316]	; (8019af0 <_vfiprintf_r+0x218>)
 80199b4:	429c      	cmp	r4, r3
 80199b6:	bf08      	it	eq
 80199b8:	68f4      	ldreq	r4, [r6, #12]
 80199ba:	e79d      	b.n	80198f8 <_vfiprintf_r+0x20>
 80199bc:	4621      	mov	r1, r4
 80199be:	4630      	mov	r0, r6
 80199c0:	f001 ff1e 	bl	801b800 <__swsetup_r>
 80199c4:	2800      	cmp	r0, #0
 80199c6:	d09d      	beq.n	8019904 <_vfiprintf_r+0x2c>
 80199c8:	f04f 30ff 	mov.w	r0, #4294967295
 80199cc:	b01d      	add	sp, #116	; 0x74
 80199ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199d2:	46a8      	mov	r8, r5
 80199d4:	e7a2      	b.n	801991c <_vfiprintf_r+0x44>
 80199d6:	4a44      	ldr	r2, [pc, #272]	; (8019ae8 <_vfiprintf_r+0x210>)
 80199d8:	1a80      	subs	r0, r0, r2
 80199da:	fa0b f000 	lsl.w	r0, fp, r0
 80199de:	4318      	orrs	r0, r3
 80199e0:	9004      	str	r0, [sp, #16]
 80199e2:	4645      	mov	r5, r8
 80199e4:	e7be      	b.n	8019964 <_vfiprintf_r+0x8c>
 80199e6:	9a03      	ldr	r2, [sp, #12]
 80199e8:	1d11      	adds	r1, r2, #4
 80199ea:	6812      	ldr	r2, [r2, #0]
 80199ec:	9103      	str	r1, [sp, #12]
 80199ee:	2a00      	cmp	r2, #0
 80199f0:	db01      	blt.n	80199f6 <_vfiprintf_r+0x11e>
 80199f2:	9207      	str	r2, [sp, #28]
 80199f4:	e004      	b.n	8019a00 <_vfiprintf_r+0x128>
 80199f6:	4252      	negs	r2, r2
 80199f8:	f043 0302 	orr.w	r3, r3, #2
 80199fc:	9207      	str	r2, [sp, #28]
 80199fe:	9304      	str	r3, [sp, #16]
 8019a00:	f898 3000 	ldrb.w	r3, [r8]
 8019a04:	2b2e      	cmp	r3, #46	; 0x2e
 8019a06:	d10e      	bne.n	8019a26 <_vfiprintf_r+0x14e>
 8019a08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8019a0e:	d138      	bne.n	8019a82 <_vfiprintf_r+0x1aa>
 8019a10:	9b03      	ldr	r3, [sp, #12]
 8019a12:	1d1a      	adds	r2, r3, #4
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	9203      	str	r2, [sp, #12]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	bfb8      	it	lt
 8019a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019a20:	f108 0802 	add.w	r8, r8, #2
 8019a24:	9305      	str	r3, [sp, #20]
 8019a26:	4d33      	ldr	r5, [pc, #204]	; (8019af4 <_vfiprintf_r+0x21c>)
 8019a28:	f898 1000 	ldrb.w	r1, [r8]
 8019a2c:	2203      	movs	r2, #3
 8019a2e:	4628      	mov	r0, r5
 8019a30:	f7e6 fbe6 	bl	8000200 <memchr>
 8019a34:	b140      	cbz	r0, 8019a48 <_vfiprintf_r+0x170>
 8019a36:	2340      	movs	r3, #64	; 0x40
 8019a38:	1b40      	subs	r0, r0, r5
 8019a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8019a3e:	9b04      	ldr	r3, [sp, #16]
 8019a40:	4303      	orrs	r3, r0
 8019a42:	f108 0801 	add.w	r8, r8, #1
 8019a46:	9304      	str	r3, [sp, #16]
 8019a48:	f898 1000 	ldrb.w	r1, [r8]
 8019a4c:	482a      	ldr	r0, [pc, #168]	; (8019af8 <_vfiprintf_r+0x220>)
 8019a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019a52:	2206      	movs	r2, #6
 8019a54:	f108 0701 	add.w	r7, r8, #1
 8019a58:	f7e6 fbd2 	bl	8000200 <memchr>
 8019a5c:	2800      	cmp	r0, #0
 8019a5e:	d037      	beq.n	8019ad0 <_vfiprintf_r+0x1f8>
 8019a60:	4b26      	ldr	r3, [pc, #152]	; (8019afc <_vfiprintf_r+0x224>)
 8019a62:	bb1b      	cbnz	r3, 8019aac <_vfiprintf_r+0x1d4>
 8019a64:	9b03      	ldr	r3, [sp, #12]
 8019a66:	3307      	adds	r3, #7
 8019a68:	f023 0307 	bic.w	r3, r3, #7
 8019a6c:	3308      	adds	r3, #8
 8019a6e:	9303      	str	r3, [sp, #12]
 8019a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a72:	444b      	add	r3, r9
 8019a74:	9309      	str	r3, [sp, #36]	; 0x24
 8019a76:	e750      	b.n	801991a <_vfiprintf_r+0x42>
 8019a78:	fb05 3202 	mla	r2, r5, r2, r3
 8019a7c:	2001      	movs	r0, #1
 8019a7e:	4688      	mov	r8, r1
 8019a80:	e78a      	b.n	8019998 <_vfiprintf_r+0xc0>
 8019a82:	2300      	movs	r3, #0
 8019a84:	f108 0801 	add.w	r8, r8, #1
 8019a88:	9305      	str	r3, [sp, #20]
 8019a8a:	4619      	mov	r1, r3
 8019a8c:	250a      	movs	r5, #10
 8019a8e:	4640      	mov	r0, r8
 8019a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a94:	3a30      	subs	r2, #48	; 0x30
 8019a96:	2a09      	cmp	r2, #9
 8019a98:	d903      	bls.n	8019aa2 <_vfiprintf_r+0x1ca>
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d0c3      	beq.n	8019a26 <_vfiprintf_r+0x14e>
 8019a9e:	9105      	str	r1, [sp, #20]
 8019aa0:	e7c1      	b.n	8019a26 <_vfiprintf_r+0x14e>
 8019aa2:	fb05 2101 	mla	r1, r5, r1, r2
 8019aa6:	2301      	movs	r3, #1
 8019aa8:	4680      	mov	r8, r0
 8019aaa:	e7f0      	b.n	8019a8e <_vfiprintf_r+0x1b6>
 8019aac:	ab03      	add	r3, sp, #12
 8019aae:	9300      	str	r3, [sp, #0]
 8019ab0:	4622      	mov	r2, r4
 8019ab2:	4b13      	ldr	r3, [pc, #76]	; (8019b00 <_vfiprintf_r+0x228>)
 8019ab4:	a904      	add	r1, sp, #16
 8019ab6:	4630      	mov	r0, r6
 8019ab8:	f000 f8b8 	bl	8019c2c <_printf_float>
 8019abc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019ac0:	4681      	mov	r9, r0
 8019ac2:	d1d5      	bne.n	8019a70 <_vfiprintf_r+0x198>
 8019ac4:	89a3      	ldrh	r3, [r4, #12]
 8019ac6:	065b      	lsls	r3, r3, #25
 8019ac8:	f53f af7e 	bmi.w	80199c8 <_vfiprintf_r+0xf0>
 8019acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ace:	e77d      	b.n	80199cc <_vfiprintf_r+0xf4>
 8019ad0:	ab03      	add	r3, sp, #12
 8019ad2:	9300      	str	r3, [sp, #0]
 8019ad4:	4622      	mov	r2, r4
 8019ad6:	4b0a      	ldr	r3, [pc, #40]	; (8019b00 <_vfiprintf_r+0x228>)
 8019ad8:	a904      	add	r1, sp, #16
 8019ada:	4630      	mov	r0, r6
 8019adc:	f000 fb5c 	bl	801a198 <_printf_i>
 8019ae0:	e7ec      	b.n	8019abc <_vfiprintf_r+0x1e4>
 8019ae2:	bf00      	nop
 8019ae4:	0801ea88 	.word	0x0801ea88
 8019ae8:	0801e9bc 	.word	0x0801e9bc
 8019aec:	0801eaa8 	.word	0x0801eaa8
 8019af0:	0801ea68 	.word	0x0801ea68
 8019af4:	0801e9c2 	.word	0x0801e9c2
 8019af8:	0801e9c6 	.word	0x0801e9c6
 8019afc:	08019c2d 	.word	0x08019c2d
 8019b00:	080198b5 	.word	0x080198b5

08019b04 <__cvt>:
 8019b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b08:	ec55 4b10 	vmov	r4, r5, d0
 8019b0c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019b0e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019b12:	2d00      	cmp	r5, #0
 8019b14:	460e      	mov	r6, r1
 8019b16:	4691      	mov	r9, r2
 8019b18:	4619      	mov	r1, r3
 8019b1a:	bfb8      	it	lt
 8019b1c:	4622      	movlt	r2, r4
 8019b1e:	462b      	mov	r3, r5
 8019b20:	f027 0720 	bic.w	r7, r7, #32
 8019b24:	bfbb      	ittet	lt
 8019b26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019b2a:	461d      	movlt	r5, r3
 8019b2c:	2300      	movge	r3, #0
 8019b2e:	232d      	movlt	r3, #45	; 0x2d
 8019b30:	bfb8      	it	lt
 8019b32:	4614      	movlt	r4, r2
 8019b34:	2f46      	cmp	r7, #70	; 0x46
 8019b36:	700b      	strb	r3, [r1, #0]
 8019b38:	d004      	beq.n	8019b44 <__cvt+0x40>
 8019b3a:	2f45      	cmp	r7, #69	; 0x45
 8019b3c:	d100      	bne.n	8019b40 <__cvt+0x3c>
 8019b3e:	3601      	adds	r6, #1
 8019b40:	2102      	movs	r1, #2
 8019b42:	e000      	b.n	8019b46 <__cvt+0x42>
 8019b44:	2103      	movs	r1, #3
 8019b46:	ab03      	add	r3, sp, #12
 8019b48:	9301      	str	r3, [sp, #4]
 8019b4a:	ab02      	add	r3, sp, #8
 8019b4c:	9300      	str	r3, [sp, #0]
 8019b4e:	4632      	mov	r2, r6
 8019b50:	4653      	mov	r3, sl
 8019b52:	ec45 4b10 	vmov	d0, r4, r5
 8019b56:	f001 ff57 	bl	801ba08 <_dtoa_r>
 8019b5a:	2f47      	cmp	r7, #71	; 0x47
 8019b5c:	4680      	mov	r8, r0
 8019b5e:	d102      	bne.n	8019b66 <__cvt+0x62>
 8019b60:	f019 0f01 	tst.w	r9, #1
 8019b64:	d026      	beq.n	8019bb4 <__cvt+0xb0>
 8019b66:	2f46      	cmp	r7, #70	; 0x46
 8019b68:	eb08 0906 	add.w	r9, r8, r6
 8019b6c:	d111      	bne.n	8019b92 <__cvt+0x8e>
 8019b6e:	f898 3000 	ldrb.w	r3, [r8]
 8019b72:	2b30      	cmp	r3, #48	; 0x30
 8019b74:	d10a      	bne.n	8019b8c <__cvt+0x88>
 8019b76:	2200      	movs	r2, #0
 8019b78:	2300      	movs	r3, #0
 8019b7a:	4620      	mov	r0, r4
 8019b7c:	4629      	mov	r1, r5
 8019b7e:	f7e6 ffb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8019b82:	b918      	cbnz	r0, 8019b8c <__cvt+0x88>
 8019b84:	f1c6 0601 	rsb	r6, r6, #1
 8019b88:	f8ca 6000 	str.w	r6, [sl]
 8019b8c:	f8da 3000 	ldr.w	r3, [sl]
 8019b90:	4499      	add	r9, r3
 8019b92:	2200      	movs	r2, #0
 8019b94:	2300      	movs	r3, #0
 8019b96:	4620      	mov	r0, r4
 8019b98:	4629      	mov	r1, r5
 8019b9a:	f7e6 ffa5 	bl	8000ae8 <__aeabi_dcmpeq>
 8019b9e:	b938      	cbnz	r0, 8019bb0 <__cvt+0xac>
 8019ba0:	2230      	movs	r2, #48	; 0x30
 8019ba2:	9b03      	ldr	r3, [sp, #12]
 8019ba4:	454b      	cmp	r3, r9
 8019ba6:	d205      	bcs.n	8019bb4 <__cvt+0xb0>
 8019ba8:	1c59      	adds	r1, r3, #1
 8019baa:	9103      	str	r1, [sp, #12]
 8019bac:	701a      	strb	r2, [r3, #0]
 8019bae:	e7f8      	b.n	8019ba2 <__cvt+0x9e>
 8019bb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8019bb4:	9b03      	ldr	r3, [sp, #12]
 8019bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019bb8:	eba3 0308 	sub.w	r3, r3, r8
 8019bbc:	4640      	mov	r0, r8
 8019bbe:	6013      	str	r3, [r2, #0]
 8019bc0:	b004      	add	sp, #16
 8019bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019bc6 <__exponent>:
 8019bc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019bc8:	2900      	cmp	r1, #0
 8019bca:	4604      	mov	r4, r0
 8019bcc:	bfba      	itte	lt
 8019bce:	4249      	neglt	r1, r1
 8019bd0:	232d      	movlt	r3, #45	; 0x2d
 8019bd2:	232b      	movge	r3, #43	; 0x2b
 8019bd4:	2909      	cmp	r1, #9
 8019bd6:	f804 2b02 	strb.w	r2, [r4], #2
 8019bda:	7043      	strb	r3, [r0, #1]
 8019bdc:	dd20      	ble.n	8019c20 <__exponent+0x5a>
 8019bde:	f10d 0307 	add.w	r3, sp, #7
 8019be2:	461f      	mov	r7, r3
 8019be4:	260a      	movs	r6, #10
 8019be6:	fb91 f5f6 	sdiv	r5, r1, r6
 8019bea:	fb06 1115 	mls	r1, r6, r5, r1
 8019bee:	3130      	adds	r1, #48	; 0x30
 8019bf0:	2d09      	cmp	r5, #9
 8019bf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019bf6:	f103 32ff 	add.w	r2, r3, #4294967295
 8019bfa:	4629      	mov	r1, r5
 8019bfc:	dc09      	bgt.n	8019c12 <__exponent+0x4c>
 8019bfe:	3130      	adds	r1, #48	; 0x30
 8019c00:	3b02      	subs	r3, #2
 8019c02:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019c06:	42bb      	cmp	r3, r7
 8019c08:	4622      	mov	r2, r4
 8019c0a:	d304      	bcc.n	8019c16 <__exponent+0x50>
 8019c0c:	1a10      	subs	r0, r2, r0
 8019c0e:	b003      	add	sp, #12
 8019c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c12:	4613      	mov	r3, r2
 8019c14:	e7e7      	b.n	8019be6 <__exponent+0x20>
 8019c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c1a:	f804 2b01 	strb.w	r2, [r4], #1
 8019c1e:	e7f2      	b.n	8019c06 <__exponent+0x40>
 8019c20:	2330      	movs	r3, #48	; 0x30
 8019c22:	4419      	add	r1, r3
 8019c24:	7083      	strb	r3, [r0, #2]
 8019c26:	1d02      	adds	r2, r0, #4
 8019c28:	70c1      	strb	r1, [r0, #3]
 8019c2a:	e7ef      	b.n	8019c0c <__exponent+0x46>

08019c2c <_printf_float>:
 8019c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c30:	b08d      	sub	sp, #52	; 0x34
 8019c32:	460c      	mov	r4, r1
 8019c34:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8019c38:	4616      	mov	r6, r2
 8019c3a:	461f      	mov	r7, r3
 8019c3c:	4605      	mov	r5, r0
 8019c3e:	f003 f941 	bl	801cec4 <_localeconv_r>
 8019c42:	6803      	ldr	r3, [r0, #0]
 8019c44:	9304      	str	r3, [sp, #16]
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7e6 fad2 	bl	80001f0 <strlen>
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8019c50:	f8d8 3000 	ldr.w	r3, [r8]
 8019c54:	9005      	str	r0, [sp, #20]
 8019c56:	3307      	adds	r3, #7
 8019c58:	f023 0307 	bic.w	r3, r3, #7
 8019c5c:	f103 0208 	add.w	r2, r3, #8
 8019c60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019c64:	f8d4 b000 	ldr.w	fp, [r4]
 8019c68:	f8c8 2000 	str.w	r2, [r8]
 8019c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c70:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019c74:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019c78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019c7c:	9307      	str	r3, [sp, #28]
 8019c7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8019c82:	f04f 32ff 	mov.w	r2, #4294967295
 8019c86:	4ba7      	ldr	r3, [pc, #668]	; (8019f24 <_printf_float+0x2f8>)
 8019c88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019c8c:	f7e6 ff5e 	bl	8000b4c <__aeabi_dcmpun>
 8019c90:	bb70      	cbnz	r0, 8019cf0 <_printf_float+0xc4>
 8019c92:	f04f 32ff 	mov.w	r2, #4294967295
 8019c96:	4ba3      	ldr	r3, [pc, #652]	; (8019f24 <_printf_float+0x2f8>)
 8019c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019c9c:	f7e6 ff38 	bl	8000b10 <__aeabi_dcmple>
 8019ca0:	bb30      	cbnz	r0, 8019cf0 <_printf_float+0xc4>
 8019ca2:	2200      	movs	r2, #0
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	4640      	mov	r0, r8
 8019ca8:	4649      	mov	r1, r9
 8019caa:	f7e6 ff27 	bl	8000afc <__aeabi_dcmplt>
 8019cae:	b110      	cbz	r0, 8019cb6 <_printf_float+0x8a>
 8019cb0:	232d      	movs	r3, #45	; 0x2d
 8019cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019cb6:	4a9c      	ldr	r2, [pc, #624]	; (8019f28 <_printf_float+0x2fc>)
 8019cb8:	4b9c      	ldr	r3, [pc, #624]	; (8019f2c <_printf_float+0x300>)
 8019cba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8019cbe:	bf8c      	ite	hi
 8019cc0:	4690      	movhi	r8, r2
 8019cc2:	4698      	movls	r8, r3
 8019cc4:	2303      	movs	r3, #3
 8019cc6:	f02b 0204 	bic.w	r2, fp, #4
 8019cca:	6123      	str	r3, [r4, #16]
 8019ccc:	6022      	str	r2, [r4, #0]
 8019cce:	f04f 0900 	mov.w	r9, #0
 8019cd2:	9700      	str	r7, [sp, #0]
 8019cd4:	4633      	mov	r3, r6
 8019cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8019cd8:	4621      	mov	r1, r4
 8019cda:	4628      	mov	r0, r5
 8019cdc:	f000 f9e6 	bl	801a0ac <_printf_common>
 8019ce0:	3001      	adds	r0, #1
 8019ce2:	f040 808d 	bne.w	8019e00 <_printf_float+0x1d4>
 8019ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8019cea:	b00d      	add	sp, #52	; 0x34
 8019cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cf0:	4642      	mov	r2, r8
 8019cf2:	464b      	mov	r3, r9
 8019cf4:	4640      	mov	r0, r8
 8019cf6:	4649      	mov	r1, r9
 8019cf8:	f7e6 ff28 	bl	8000b4c <__aeabi_dcmpun>
 8019cfc:	b110      	cbz	r0, 8019d04 <_printf_float+0xd8>
 8019cfe:	4a8c      	ldr	r2, [pc, #560]	; (8019f30 <_printf_float+0x304>)
 8019d00:	4b8c      	ldr	r3, [pc, #560]	; (8019f34 <_printf_float+0x308>)
 8019d02:	e7da      	b.n	8019cba <_printf_float+0x8e>
 8019d04:	6861      	ldr	r1, [r4, #4]
 8019d06:	1c4b      	adds	r3, r1, #1
 8019d08:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8019d0c:	a80a      	add	r0, sp, #40	; 0x28
 8019d0e:	d13e      	bne.n	8019d8e <_printf_float+0x162>
 8019d10:	2306      	movs	r3, #6
 8019d12:	6063      	str	r3, [r4, #4]
 8019d14:	2300      	movs	r3, #0
 8019d16:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8019d1a:	ab09      	add	r3, sp, #36	; 0x24
 8019d1c:	9300      	str	r3, [sp, #0]
 8019d1e:	ec49 8b10 	vmov	d0, r8, r9
 8019d22:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019d26:	6022      	str	r2, [r4, #0]
 8019d28:	f8cd a004 	str.w	sl, [sp, #4]
 8019d2c:	6861      	ldr	r1, [r4, #4]
 8019d2e:	4628      	mov	r0, r5
 8019d30:	f7ff fee8 	bl	8019b04 <__cvt>
 8019d34:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8019d38:	2b47      	cmp	r3, #71	; 0x47
 8019d3a:	4680      	mov	r8, r0
 8019d3c:	d109      	bne.n	8019d52 <_printf_float+0x126>
 8019d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d40:	1cd8      	adds	r0, r3, #3
 8019d42:	db02      	blt.n	8019d4a <_printf_float+0x11e>
 8019d44:	6862      	ldr	r2, [r4, #4]
 8019d46:	4293      	cmp	r3, r2
 8019d48:	dd47      	ble.n	8019dda <_printf_float+0x1ae>
 8019d4a:	f1aa 0a02 	sub.w	sl, sl, #2
 8019d4e:	fa5f fa8a 	uxtb.w	sl, sl
 8019d52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8019d56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d58:	d824      	bhi.n	8019da4 <_printf_float+0x178>
 8019d5a:	3901      	subs	r1, #1
 8019d5c:	4652      	mov	r2, sl
 8019d5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019d62:	9109      	str	r1, [sp, #36]	; 0x24
 8019d64:	f7ff ff2f 	bl	8019bc6 <__exponent>
 8019d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d6a:	1813      	adds	r3, r2, r0
 8019d6c:	2a01      	cmp	r2, #1
 8019d6e:	4681      	mov	r9, r0
 8019d70:	6123      	str	r3, [r4, #16]
 8019d72:	dc02      	bgt.n	8019d7a <_printf_float+0x14e>
 8019d74:	6822      	ldr	r2, [r4, #0]
 8019d76:	07d1      	lsls	r1, r2, #31
 8019d78:	d501      	bpl.n	8019d7e <_printf_float+0x152>
 8019d7a:	3301      	adds	r3, #1
 8019d7c:	6123      	str	r3, [r4, #16]
 8019d7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d0a5      	beq.n	8019cd2 <_printf_float+0xa6>
 8019d86:	232d      	movs	r3, #45	; 0x2d
 8019d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d8c:	e7a1      	b.n	8019cd2 <_printf_float+0xa6>
 8019d8e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8019d92:	f000 8177 	beq.w	801a084 <_printf_float+0x458>
 8019d96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8019d9a:	d1bb      	bne.n	8019d14 <_printf_float+0xe8>
 8019d9c:	2900      	cmp	r1, #0
 8019d9e:	d1b9      	bne.n	8019d14 <_printf_float+0xe8>
 8019da0:	2301      	movs	r3, #1
 8019da2:	e7b6      	b.n	8019d12 <_printf_float+0xe6>
 8019da4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8019da8:	d119      	bne.n	8019dde <_printf_float+0x1b2>
 8019daa:	2900      	cmp	r1, #0
 8019dac:	6863      	ldr	r3, [r4, #4]
 8019dae:	dd0c      	ble.n	8019dca <_printf_float+0x19e>
 8019db0:	6121      	str	r1, [r4, #16]
 8019db2:	b913      	cbnz	r3, 8019dba <_printf_float+0x18e>
 8019db4:	6822      	ldr	r2, [r4, #0]
 8019db6:	07d2      	lsls	r2, r2, #31
 8019db8:	d502      	bpl.n	8019dc0 <_printf_float+0x194>
 8019dba:	3301      	adds	r3, #1
 8019dbc:	440b      	add	r3, r1
 8019dbe:	6123      	str	r3, [r4, #16]
 8019dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019dc2:	65a3      	str	r3, [r4, #88]	; 0x58
 8019dc4:	f04f 0900 	mov.w	r9, #0
 8019dc8:	e7d9      	b.n	8019d7e <_printf_float+0x152>
 8019dca:	b913      	cbnz	r3, 8019dd2 <_printf_float+0x1a6>
 8019dcc:	6822      	ldr	r2, [r4, #0]
 8019dce:	07d0      	lsls	r0, r2, #31
 8019dd0:	d501      	bpl.n	8019dd6 <_printf_float+0x1aa>
 8019dd2:	3302      	adds	r3, #2
 8019dd4:	e7f3      	b.n	8019dbe <_printf_float+0x192>
 8019dd6:	2301      	movs	r3, #1
 8019dd8:	e7f1      	b.n	8019dbe <_printf_float+0x192>
 8019dda:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8019dde:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8019de2:	4293      	cmp	r3, r2
 8019de4:	db05      	blt.n	8019df2 <_printf_float+0x1c6>
 8019de6:	6822      	ldr	r2, [r4, #0]
 8019de8:	6123      	str	r3, [r4, #16]
 8019dea:	07d1      	lsls	r1, r2, #31
 8019dec:	d5e8      	bpl.n	8019dc0 <_printf_float+0x194>
 8019dee:	3301      	adds	r3, #1
 8019df0:	e7e5      	b.n	8019dbe <_printf_float+0x192>
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	bfd4      	ite	le
 8019df6:	f1c3 0302 	rsble	r3, r3, #2
 8019dfa:	2301      	movgt	r3, #1
 8019dfc:	4413      	add	r3, r2
 8019dfe:	e7de      	b.n	8019dbe <_printf_float+0x192>
 8019e00:	6823      	ldr	r3, [r4, #0]
 8019e02:	055a      	lsls	r2, r3, #21
 8019e04:	d407      	bmi.n	8019e16 <_printf_float+0x1ea>
 8019e06:	6923      	ldr	r3, [r4, #16]
 8019e08:	4642      	mov	r2, r8
 8019e0a:	4631      	mov	r1, r6
 8019e0c:	4628      	mov	r0, r5
 8019e0e:	47b8      	blx	r7
 8019e10:	3001      	adds	r0, #1
 8019e12:	d12b      	bne.n	8019e6c <_printf_float+0x240>
 8019e14:	e767      	b.n	8019ce6 <_printf_float+0xba>
 8019e16:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8019e1a:	f240 80dc 	bls.w	8019fd6 <_printf_float+0x3aa>
 8019e1e:	2200      	movs	r2, #0
 8019e20:	2300      	movs	r3, #0
 8019e22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019e26:	f7e6 fe5f 	bl	8000ae8 <__aeabi_dcmpeq>
 8019e2a:	2800      	cmp	r0, #0
 8019e2c:	d033      	beq.n	8019e96 <_printf_float+0x26a>
 8019e2e:	2301      	movs	r3, #1
 8019e30:	4a41      	ldr	r2, [pc, #260]	; (8019f38 <_printf_float+0x30c>)
 8019e32:	4631      	mov	r1, r6
 8019e34:	4628      	mov	r0, r5
 8019e36:	47b8      	blx	r7
 8019e38:	3001      	adds	r0, #1
 8019e3a:	f43f af54 	beq.w	8019ce6 <_printf_float+0xba>
 8019e3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019e42:	429a      	cmp	r2, r3
 8019e44:	db02      	blt.n	8019e4c <_printf_float+0x220>
 8019e46:	6823      	ldr	r3, [r4, #0]
 8019e48:	07d8      	lsls	r0, r3, #31
 8019e4a:	d50f      	bpl.n	8019e6c <_printf_float+0x240>
 8019e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019e50:	4631      	mov	r1, r6
 8019e52:	4628      	mov	r0, r5
 8019e54:	47b8      	blx	r7
 8019e56:	3001      	adds	r0, #1
 8019e58:	f43f af45 	beq.w	8019ce6 <_printf_float+0xba>
 8019e5c:	f04f 0800 	mov.w	r8, #0
 8019e60:	f104 091a 	add.w	r9, r4, #26
 8019e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e66:	3b01      	subs	r3, #1
 8019e68:	4543      	cmp	r3, r8
 8019e6a:	dc09      	bgt.n	8019e80 <_printf_float+0x254>
 8019e6c:	6823      	ldr	r3, [r4, #0]
 8019e6e:	079b      	lsls	r3, r3, #30
 8019e70:	f100 8103 	bmi.w	801a07a <_printf_float+0x44e>
 8019e74:	68e0      	ldr	r0, [r4, #12]
 8019e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e78:	4298      	cmp	r0, r3
 8019e7a:	bfb8      	it	lt
 8019e7c:	4618      	movlt	r0, r3
 8019e7e:	e734      	b.n	8019cea <_printf_float+0xbe>
 8019e80:	2301      	movs	r3, #1
 8019e82:	464a      	mov	r2, r9
 8019e84:	4631      	mov	r1, r6
 8019e86:	4628      	mov	r0, r5
 8019e88:	47b8      	blx	r7
 8019e8a:	3001      	adds	r0, #1
 8019e8c:	f43f af2b 	beq.w	8019ce6 <_printf_float+0xba>
 8019e90:	f108 0801 	add.w	r8, r8, #1
 8019e94:	e7e6      	b.n	8019e64 <_printf_float+0x238>
 8019e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	dc2b      	bgt.n	8019ef4 <_printf_float+0x2c8>
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	4a26      	ldr	r2, [pc, #152]	; (8019f38 <_printf_float+0x30c>)
 8019ea0:	4631      	mov	r1, r6
 8019ea2:	4628      	mov	r0, r5
 8019ea4:	47b8      	blx	r7
 8019ea6:	3001      	adds	r0, #1
 8019ea8:	f43f af1d 	beq.w	8019ce6 <_printf_float+0xba>
 8019eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019eae:	b923      	cbnz	r3, 8019eba <_printf_float+0x28e>
 8019eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019eb2:	b913      	cbnz	r3, 8019eba <_printf_float+0x28e>
 8019eb4:	6823      	ldr	r3, [r4, #0]
 8019eb6:	07d9      	lsls	r1, r3, #31
 8019eb8:	d5d8      	bpl.n	8019e6c <_printf_float+0x240>
 8019eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019ebe:	4631      	mov	r1, r6
 8019ec0:	4628      	mov	r0, r5
 8019ec2:	47b8      	blx	r7
 8019ec4:	3001      	adds	r0, #1
 8019ec6:	f43f af0e 	beq.w	8019ce6 <_printf_float+0xba>
 8019eca:	f04f 0900 	mov.w	r9, #0
 8019ece:	f104 0a1a 	add.w	sl, r4, #26
 8019ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ed4:	425b      	negs	r3, r3
 8019ed6:	454b      	cmp	r3, r9
 8019ed8:	dc01      	bgt.n	8019ede <_printf_float+0x2b2>
 8019eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019edc:	e794      	b.n	8019e08 <_printf_float+0x1dc>
 8019ede:	2301      	movs	r3, #1
 8019ee0:	4652      	mov	r2, sl
 8019ee2:	4631      	mov	r1, r6
 8019ee4:	4628      	mov	r0, r5
 8019ee6:	47b8      	blx	r7
 8019ee8:	3001      	adds	r0, #1
 8019eea:	f43f aefc 	beq.w	8019ce6 <_printf_float+0xba>
 8019eee:	f109 0901 	add.w	r9, r9, #1
 8019ef2:	e7ee      	b.n	8019ed2 <_printf_float+0x2a6>
 8019ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019ef8:	429a      	cmp	r2, r3
 8019efa:	bfa8      	it	ge
 8019efc:	461a      	movge	r2, r3
 8019efe:	2a00      	cmp	r2, #0
 8019f00:	4691      	mov	r9, r2
 8019f02:	dd07      	ble.n	8019f14 <_printf_float+0x2e8>
 8019f04:	4613      	mov	r3, r2
 8019f06:	4631      	mov	r1, r6
 8019f08:	4642      	mov	r2, r8
 8019f0a:	4628      	mov	r0, r5
 8019f0c:	47b8      	blx	r7
 8019f0e:	3001      	adds	r0, #1
 8019f10:	f43f aee9 	beq.w	8019ce6 <_printf_float+0xba>
 8019f14:	f104 031a 	add.w	r3, r4, #26
 8019f18:	f04f 0b00 	mov.w	fp, #0
 8019f1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019f20:	9306      	str	r3, [sp, #24]
 8019f22:	e015      	b.n	8019f50 <_printf_float+0x324>
 8019f24:	7fefffff 	.word	0x7fefffff
 8019f28:	0801e582 	.word	0x0801e582
 8019f2c:	0801e9cd 	.word	0x0801e9cd
 8019f30:	0801e9d5 	.word	0x0801e9d5
 8019f34:	0801e9d1 	.word	0x0801e9d1
 8019f38:	0801e9d9 	.word	0x0801e9d9
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	9a06      	ldr	r2, [sp, #24]
 8019f40:	4631      	mov	r1, r6
 8019f42:	4628      	mov	r0, r5
 8019f44:	47b8      	blx	r7
 8019f46:	3001      	adds	r0, #1
 8019f48:	f43f aecd 	beq.w	8019ce6 <_printf_float+0xba>
 8019f4c:	f10b 0b01 	add.w	fp, fp, #1
 8019f50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8019f54:	ebaa 0309 	sub.w	r3, sl, r9
 8019f58:	455b      	cmp	r3, fp
 8019f5a:	dcef      	bgt.n	8019f3c <_printf_float+0x310>
 8019f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019f60:	429a      	cmp	r2, r3
 8019f62:	44d0      	add	r8, sl
 8019f64:	db15      	blt.n	8019f92 <_printf_float+0x366>
 8019f66:	6823      	ldr	r3, [r4, #0]
 8019f68:	07da      	lsls	r2, r3, #31
 8019f6a:	d412      	bmi.n	8019f92 <_printf_float+0x366>
 8019f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019f70:	eba3 020a 	sub.w	r2, r3, sl
 8019f74:	eba3 0a01 	sub.w	sl, r3, r1
 8019f78:	4592      	cmp	sl, r2
 8019f7a:	bfa8      	it	ge
 8019f7c:	4692      	movge	sl, r2
 8019f7e:	f1ba 0f00 	cmp.w	sl, #0
 8019f82:	dc0e      	bgt.n	8019fa2 <_printf_float+0x376>
 8019f84:	f04f 0800 	mov.w	r8, #0
 8019f88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019f8c:	f104 091a 	add.w	r9, r4, #26
 8019f90:	e019      	b.n	8019fc6 <_printf_float+0x39a>
 8019f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019f96:	4631      	mov	r1, r6
 8019f98:	4628      	mov	r0, r5
 8019f9a:	47b8      	blx	r7
 8019f9c:	3001      	adds	r0, #1
 8019f9e:	d1e5      	bne.n	8019f6c <_printf_float+0x340>
 8019fa0:	e6a1      	b.n	8019ce6 <_printf_float+0xba>
 8019fa2:	4653      	mov	r3, sl
 8019fa4:	4642      	mov	r2, r8
 8019fa6:	4631      	mov	r1, r6
 8019fa8:	4628      	mov	r0, r5
 8019faa:	47b8      	blx	r7
 8019fac:	3001      	adds	r0, #1
 8019fae:	d1e9      	bne.n	8019f84 <_printf_float+0x358>
 8019fb0:	e699      	b.n	8019ce6 <_printf_float+0xba>
 8019fb2:	2301      	movs	r3, #1
 8019fb4:	464a      	mov	r2, r9
 8019fb6:	4631      	mov	r1, r6
 8019fb8:	4628      	mov	r0, r5
 8019fba:	47b8      	blx	r7
 8019fbc:	3001      	adds	r0, #1
 8019fbe:	f43f ae92 	beq.w	8019ce6 <_printf_float+0xba>
 8019fc2:	f108 0801 	add.w	r8, r8, #1
 8019fc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019fca:	1a9b      	subs	r3, r3, r2
 8019fcc:	eba3 030a 	sub.w	r3, r3, sl
 8019fd0:	4543      	cmp	r3, r8
 8019fd2:	dcee      	bgt.n	8019fb2 <_printf_float+0x386>
 8019fd4:	e74a      	b.n	8019e6c <_printf_float+0x240>
 8019fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019fd8:	2a01      	cmp	r2, #1
 8019fda:	dc01      	bgt.n	8019fe0 <_printf_float+0x3b4>
 8019fdc:	07db      	lsls	r3, r3, #31
 8019fde:	d53a      	bpl.n	801a056 <_printf_float+0x42a>
 8019fe0:	2301      	movs	r3, #1
 8019fe2:	4642      	mov	r2, r8
 8019fe4:	4631      	mov	r1, r6
 8019fe6:	4628      	mov	r0, r5
 8019fe8:	47b8      	blx	r7
 8019fea:	3001      	adds	r0, #1
 8019fec:	f43f ae7b 	beq.w	8019ce6 <_printf_float+0xba>
 8019ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019ff4:	4631      	mov	r1, r6
 8019ff6:	4628      	mov	r0, r5
 8019ff8:	47b8      	blx	r7
 8019ffa:	3001      	adds	r0, #1
 8019ffc:	f108 0801 	add.w	r8, r8, #1
 801a000:	f43f ae71 	beq.w	8019ce6 <_printf_float+0xba>
 801a004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a006:	2200      	movs	r2, #0
 801a008:	f103 3aff 	add.w	sl, r3, #4294967295
 801a00c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a010:	2300      	movs	r3, #0
 801a012:	f7e6 fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 801a016:	b9c8      	cbnz	r0, 801a04c <_printf_float+0x420>
 801a018:	4653      	mov	r3, sl
 801a01a:	4642      	mov	r2, r8
 801a01c:	4631      	mov	r1, r6
 801a01e:	4628      	mov	r0, r5
 801a020:	47b8      	blx	r7
 801a022:	3001      	adds	r0, #1
 801a024:	d10e      	bne.n	801a044 <_printf_float+0x418>
 801a026:	e65e      	b.n	8019ce6 <_printf_float+0xba>
 801a028:	2301      	movs	r3, #1
 801a02a:	4652      	mov	r2, sl
 801a02c:	4631      	mov	r1, r6
 801a02e:	4628      	mov	r0, r5
 801a030:	47b8      	blx	r7
 801a032:	3001      	adds	r0, #1
 801a034:	f43f ae57 	beq.w	8019ce6 <_printf_float+0xba>
 801a038:	f108 0801 	add.w	r8, r8, #1
 801a03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a03e:	3b01      	subs	r3, #1
 801a040:	4543      	cmp	r3, r8
 801a042:	dcf1      	bgt.n	801a028 <_printf_float+0x3fc>
 801a044:	464b      	mov	r3, r9
 801a046:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a04a:	e6de      	b.n	8019e0a <_printf_float+0x1de>
 801a04c:	f04f 0800 	mov.w	r8, #0
 801a050:	f104 0a1a 	add.w	sl, r4, #26
 801a054:	e7f2      	b.n	801a03c <_printf_float+0x410>
 801a056:	2301      	movs	r3, #1
 801a058:	e7df      	b.n	801a01a <_printf_float+0x3ee>
 801a05a:	2301      	movs	r3, #1
 801a05c:	464a      	mov	r2, r9
 801a05e:	4631      	mov	r1, r6
 801a060:	4628      	mov	r0, r5
 801a062:	47b8      	blx	r7
 801a064:	3001      	adds	r0, #1
 801a066:	f43f ae3e 	beq.w	8019ce6 <_printf_float+0xba>
 801a06a:	f108 0801 	add.w	r8, r8, #1
 801a06e:	68e3      	ldr	r3, [r4, #12]
 801a070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a072:	1a9b      	subs	r3, r3, r2
 801a074:	4543      	cmp	r3, r8
 801a076:	dcf0      	bgt.n	801a05a <_printf_float+0x42e>
 801a078:	e6fc      	b.n	8019e74 <_printf_float+0x248>
 801a07a:	f04f 0800 	mov.w	r8, #0
 801a07e:	f104 0919 	add.w	r9, r4, #25
 801a082:	e7f4      	b.n	801a06e <_printf_float+0x442>
 801a084:	2900      	cmp	r1, #0
 801a086:	f43f ae8b 	beq.w	8019da0 <_printf_float+0x174>
 801a08a:	2300      	movs	r3, #0
 801a08c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801a090:	ab09      	add	r3, sp, #36	; 0x24
 801a092:	9300      	str	r3, [sp, #0]
 801a094:	ec49 8b10 	vmov	d0, r8, r9
 801a098:	6022      	str	r2, [r4, #0]
 801a09a:	f8cd a004 	str.w	sl, [sp, #4]
 801a09e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a0a2:	4628      	mov	r0, r5
 801a0a4:	f7ff fd2e 	bl	8019b04 <__cvt>
 801a0a8:	4680      	mov	r8, r0
 801a0aa:	e648      	b.n	8019d3e <_printf_float+0x112>

0801a0ac <_printf_common>:
 801a0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0b0:	4691      	mov	r9, r2
 801a0b2:	461f      	mov	r7, r3
 801a0b4:	688a      	ldr	r2, [r1, #8]
 801a0b6:	690b      	ldr	r3, [r1, #16]
 801a0b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a0bc:	4293      	cmp	r3, r2
 801a0be:	bfb8      	it	lt
 801a0c0:	4613      	movlt	r3, r2
 801a0c2:	f8c9 3000 	str.w	r3, [r9]
 801a0c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a0ca:	4606      	mov	r6, r0
 801a0cc:	460c      	mov	r4, r1
 801a0ce:	b112      	cbz	r2, 801a0d6 <_printf_common+0x2a>
 801a0d0:	3301      	adds	r3, #1
 801a0d2:	f8c9 3000 	str.w	r3, [r9]
 801a0d6:	6823      	ldr	r3, [r4, #0]
 801a0d8:	0699      	lsls	r1, r3, #26
 801a0da:	bf42      	ittt	mi
 801a0dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a0e0:	3302      	addmi	r3, #2
 801a0e2:	f8c9 3000 	strmi.w	r3, [r9]
 801a0e6:	6825      	ldr	r5, [r4, #0]
 801a0e8:	f015 0506 	ands.w	r5, r5, #6
 801a0ec:	d107      	bne.n	801a0fe <_printf_common+0x52>
 801a0ee:	f104 0a19 	add.w	sl, r4, #25
 801a0f2:	68e3      	ldr	r3, [r4, #12]
 801a0f4:	f8d9 2000 	ldr.w	r2, [r9]
 801a0f8:	1a9b      	subs	r3, r3, r2
 801a0fa:	42ab      	cmp	r3, r5
 801a0fc:	dc28      	bgt.n	801a150 <_printf_common+0xa4>
 801a0fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a102:	6822      	ldr	r2, [r4, #0]
 801a104:	3300      	adds	r3, #0
 801a106:	bf18      	it	ne
 801a108:	2301      	movne	r3, #1
 801a10a:	0692      	lsls	r2, r2, #26
 801a10c:	d42d      	bmi.n	801a16a <_printf_common+0xbe>
 801a10e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a112:	4639      	mov	r1, r7
 801a114:	4630      	mov	r0, r6
 801a116:	47c0      	blx	r8
 801a118:	3001      	adds	r0, #1
 801a11a:	d020      	beq.n	801a15e <_printf_common+0xb2>
 801a11c:	6823      	ldr	r3, [r4, #0]
 801a11e:	68e5      	ldr	r5, [r4, #12]
 801a120:	f8d9 2000 	ldr.w	r2, [r9]
 801a124:	f003 0306 	and.w	r3, r3, #6
 801a128:	2b04      	cmp	r3, #4
 801a12a:	bf08      	it	eq
 801a12c:	1aad      	subeq	r5, r5, r2
 801a12e:	68a3      	ldr	r3, [r4, #8]
 801a130:	6922      	ldr	r2, [r4, #16]
 801a132:	bf0c      	ite	eq
 801a134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a138:	2500      	movne	r5, #0
 801a13a:	4293      	cmp	r3, r2
 801a13c:	bfc4      	itt	gt
 801a13e:	1a9b      	subgt	r3, r3, r2
 801a140:	18ed      	addgt	r5, r5, r3
 801a142:	f04f 0900 	mov.w	r9, #0
 801a146:	341a      	adds	r4, #26
 801a148:	454d      	cmp	r5, r9
 801a14a:	d11a      	bne.n	801a182 <_printf_common+0xd6>
 801a14c:	2000      	movs	r0, #0
 801a14e:	e008      	b.n	801a162 <_printf_common+0xb6>
 801a150:	2301      	movs	r3, #1
 801a152:	4652      	mov	r2, sl
 801a154:	4639      	mov	r1, r7
 801a156:	4630      	mov	r0, r6
 801a158:	47c0      	blx	r8
 801a15a:	3001      	adds	r0, #1
 801a15c:	d103      	bne.n	801a166 <_printf_common+0xba>
 801a15e:	f04f 30ff 	mov.w	r0, #4294967295
 801a162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a166:	3501      	adds	r5, #1
 801a168:	e7c3      	b.n	801a0f2 <_printf_common+0x46>
 801a16a:	18e1      	adds	r1, r4, r3
 801a16c:	1c5a      	adds	r2, r3, #1
 801a16e:	2030      	movs	r0, #48	; 0x30
 801a170:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a174:	4422      	add	r2, r4
 801a176:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a17a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a17e:	3302      	adds	r3, #2
 801a180:	e7c5      	b.n	801a10e <_printf_common+0x62>
 801a182:	2301      	movs	r3, #1
 801a184:	4622      	mov	r2, r4
 801a186:	4639      	mov	r1, r7
 801a188:	4630      	mov	r0, r6
 801a18a:	47c0      	blx	r8
 801a18c:	3001      	adds	r0, #1
 801a18e:	d0e6      	beq.n	801a15e <_printf_common+0xb2>
 801a190:	f109 0901 	add.w	r9, r9, #1
 801a194:	e7d8      	b.n	801a148 <_printf_common+0x9c>
	...

0801a198 <_printf_i>:
 801a198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a19c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a1a0:	460c      	mov	r4, r1
 801a1a2:	7e09      	ldrb	r1, [r1, #24]
 801a1a4:	b085      	sub	sp, #20
 801a1a6:	296e      	cmp	r1, #110	; 0x6e
 801a1a8:	4617      	mov	r7, r2
 801a1aa:	4606      	mov	r6, r0
 801a1ac:	4698      	mov	r8, r3
 801a1ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a1b0:	f000 80b3 	beq.w	801a31a <_printf_i+0x182>
 801a1b4:	d822      	bhi.n	801a1fc <_printf_i+0x64>
 801a1b6:	2963      	cmp	r1, #99	; 0x63
 801a1b8:	d036      	beq.n	801a228 <_printf_i+0x90>
 801a1ba:	d80a      	bhi.n	801a1d2 <_printf_i+0x3a>
 801a1bc:	2900      	cmp	r1, #0
 801a1be:	f000 80b9 	beq.w	801a334 <_printf_i+0x19c>
 801a1c2:	2958      	cmp	r1, #88	; 0x58
 801a1c4:	f000 8083 	beq.w	801a2ce <_printf_i+0x136>
 801a1c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a1cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a1d0:	e032      	b.n	801a238 <_printf_i+0xa0>
 801a1d2:	2964      	cmp	r1, #100	; 0x64
 801a1d4:	d001      	beq.n	801a1da <_printf_i+0x42>
 801a1d6:	2969      	cmp	r1, #105	; 0x69
 801a1d8:	d1f6      	bne.n	801a1c8 <_printf_i+0x30>
 801a1da:	6820      	ldr	r0, [r4, #0]
 801a1dc:	6813      	ldr	r3, [r2, #0]
 801a1de:	0605      	lsls	r5, r0, #24
 801a1e0:	f103 0104 	add.w	r1, r3, #4
 801a1e4:	d52a      	bpl.n	801a23c <_printf_i+0xa4>
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	6011      	str	r1, [r2, #0]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	da03      	bge.n	801a1f6 <_printf_i+0x5e>
 801a1ee:	222d      	movs	r2, #45	; 0x2d
 801a1f0:	425b      	negs	r3, r3
 801a1f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a1f6:	486f      	ldr	r0, [pc, #444]	; (801a3b4 <_printf_i+0x21c>)
 801a1f8:	220a      	movs	r2, #10
 801a1fa:	e039      	b.n	801a270 <_printf_i+0xd8>
 801a1fc:	2973      	cmp	r1, #115	; 0x73
 801a1fe:	f000 809d 	beq.w	801a33c <_printf_i+0x1a4>
 801a202:	d808      	bhi.n	801a216 <_printf_i+0x7e>
 801a204:	296f      	cmp	r1, #111	; 0x6f
 801a206:	d020      	beq.n	801a24a <_printf_i+0xb2>
 801a208:	2970      	cmp	r1, #112	; 0x70
 801a20a:	d1dd      	bne.n	801a1c8 <_printf_i+0x30>
 801a20c:	6823      	ldr	r3, [r4, #0]
 801a20e:	f043 0320 	orr.w	r3, r3, #32
 801a212:	6023      	str	r3, [r4, #0]
 801a214:	e003      	b.n	801a21e <_printf_i+0x86>
 801a216:	2975      	cmp	r1, #117	; 0x75
 801a218:	d017      	beq.n	801a24a <_printf_i+0xb2>
 801a21a:	2978      	cmp	r1, #120	; 0x78
 801a21c:	d1d4      	bne.n	801a1c8 <_printf_i+0x30>
 801a21e:	2378      	movs	r3, #120	; 0x78
 801a220:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a224:	4864      	ldr	r0, [pc, #400]	; (801a3b8 <_printf_i+0x220>)
 801a226:	e055      	b.n	801a2d4 <_printf_i+0x13c>
 801a228:	6813      	ldr	r3, [r2, #0]
 801a22a:	1d19      	adds	r1, r3, #4
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	6011      	str	r1, [r2, #0]
 801a230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a238:	2301      	movs	r3, #1
 801a23a:	e08c      	b.n	801a356 <_printf_i+0x1be>
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	6011      	str	r1, [r2, #0]
 801a240:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a244:	bf18      	it	ne
 801a246:	b21b      	sxthne	r3, r3
 801a248:	e7cf      	b.n	801a1ea <_printf_i+0x52>
 801a24a:	6813      	ldr	r3, [r2, #0]
 801a24c:	6825      	ldr	r5, [r4, #0]
 801a24e:	1d18      	adds	r0, r3, #4
 801a250:	6010      	str	r0, [r2, #0]
 801a252:	0628      	lsls	r0, r5, #24
 801a254:	d501      	bpl.n	801a25a <_printf_i+0xc2>
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	e002      	b.n	801a260 <_printf_i+0xc8>
 801a25a:	0668      	lsls	r0, r5, #25
 801a25c:	d5fb      	bpl.n	801a256 <_printf_i+0xbe>
 801a25e:	881b      	ldrh	r3, [r3, #0]
 801a260:	4854      	ldr	r0, [pc, #336]	; (801a3b4 <_printf_i+0x21c>)
 801a262:	296f      	cmp	r1, #111	; 0x6f
 801a264:	bf14      	ite	ne
 801a266:	220a      	movne	r2, #10
 801a268:	2208      	moveq	r2, #8
 801a26a:	2100      	movs	r1, #0
 801a26c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a270:	6865      	ldr	r5, [r4, #4]
 801a272:	60a5      	str	r5, [r4, #8]
 801a274:	2d00      	cmp	r5, #0
 801a276:	f2c0 8095 	blt.w	801a3a4 <_printf_i+0x20c>
 801a27a:	6821      	ldr	r1, [r4, #0]
 801a27c:	f021 0104 	bic.w	r1, r1, #4
 801a280:	6021      	str	r1, [r4, #0]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d13d      	bne.n	801a302 <_printf_i+0x16a>
 801a286:	2d00      	cmp	r5, #0
 801a288:	f040 808e 	bne.w	801a3a8 <_printf_i+0x210>
 801a28c:	4665      	mov	r5, ip
 801a28e:	2a08      	cmp	r2, #8
 801a290:	d10b      	bne.n	801a2aa <_printf_i+0x112>
 801a292:	6823      	ldr	r3, [r4, #0]
 801a294:	07db      	lsls	r3, r3, #31
 801a296:	d508      	bpl.n	801a2aa <_printf_i+0x112>
 801a298:	6923      	ldr	r3, [r4, #16]
 801a29a:	6862      	ldr	r2, [r4, #4]
 801a29c:	429a      	cmp	r2, r3
 801a29e:	bfde      	ittt	le
 801a2a0:	2330      	movle	r3, #48	; 0x30
 801a2a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a2a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a2aa:	ebac 0305 	sub.w	r3, ip, r5
 801a2ae:	6123      	str	r3, [r4, #16]
 801a2b0:	f8cd 8000 	str.w	r8, [sp]
 801a2b4:	463b      	mov	r3, r7
 801a2b6:	aa03      	add	r2, sp, #12
 801a2b8:	4621      	mov	r1, r4
 801a2ba:	4630      	mov	r0, r6
 801a2bc:	f7ff fef6 	bl	801a0ac <_printf_common>
 801a2c0:	3001      	adds	r0, #1
 801a2c2:	d14d      	bne.n	801a360 <_printf_i+0x1c8>
 801a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a2c8:	b005      	add	sp, #20
 801a2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a2ce:	4839      	ldr	r0, [pc, #228]	; (801a3b4 <_printf_i+0x21c>)
 801a2d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a2d4:	6813      	ldr	r3, [r2, #0]
 801a2d6:	6821      	ldr	r1, [r4, #0]
 801a2d8:	1d1d      	adds	r5, r3, #4
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	6015      	str	r5, [r2, #0]
 801a2de:	060a      	lsls	r2, r1, #24
 801a2e0:	d50b      	bpl.n	801a2fa <_printf_i+0x162>
 801a2e2:	07ca      	lsls	r2, r1, #31
 801a2e4:	bf44      	itt	mi
 801a2e6:	f041 0120 	orrmi.w	r1, r1, #32
 801a2ea:	6021      	strmi	r1, [r4, #0]
 801a2ec:	b91b      	cbnz	r3, 801a2f6 <_printf_i+0x15e>
 801a2ee:	6822      	ldr	r2, [r4, #0]
 801a2f0:	f022 0220 	bic.w	r2, r2, #32
 801a2f4:	6022      	str	r2, [r4, #0]
 801a2f6:	2210      	movs	r2, #16
 801a2f8:	e7b7      	b.n	801a26a <_printf_i+0xd2>
 801a2fa:	064d      	lsls	r5, r1, #25
 801a2fc:	bf48      	it	mi
 801a2fe:	b29b      	uxthmi	r3, r3
 801a300:	e7ef      	b.n	801a2e2 <_printf_i+0x14a>
 801a302:	4665      	mov	r5, ip
 801a304:	fbb3 f1f2 	udiv	r1, r3, r2
 801a308:	fb02 3311 	mls	r3, r2, r1, r3
 801a30c:	5cc3      	ldrb	r3, [r0, r3]
 801a30e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a312:	460b      	mov	r3, r1
 801a314:	2900      	cmp	r1, #0
 801a316:	d1f5      	bne.n	801a304 <_printf_i+0x16c>
 801a318:	e7b9      	b.n	801a28e <_printf_i+0xf6>
 801a31a:	6813      	ldr	r3, [r2, #0]
 801a31c:	6825      	ldr	r5, [r4, #0]
 801a31e:	6961      	ldr	r1, [r4, #20]
 801a320:	1d18      	adds	r0, r3, #4
 801a322:	6010      	str	r0, [r2, #0]
 801a324:	0628      	lsls	r0, r5, #24
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	d501      	bpl.n	801a32e <_printf_i+0x196>
 801a32a:	6019      	str	r1, [r3, #0]
 801a32c:	e002      	b.n	801a334 <_printf_i+0x19c>
 801a32e:	066a      	lsls	r2, r5, #25
 801a330:	d5fb      	bpl.n	801a32a <_printf_i+0x192>
 801a332:	8019      	strh	r1, [r3, #0]
 801a334:	2300      	movs	r3, #0
 801a336:	6123      	str	r3, [r4, #16]
 801a338:	4665      	mov	r5, ip
 801a33a:	e7b9      	b.n	801a2b0 <_printf_i+0x118>
 801a33c:	6813      	ldr	r3, [r2, #0]
 801a33e:	1d19      	adds	r1, r3, #4
 801a340:	6011      	str	r1, [r2, #0]
 801a342:	681d      	ldr	r5, [r3, #0]
 801a344:	6862      	ldr	r2, [r4, #4]
 801a346:	2100      	movs	r1, #0
 801a348:	4628      	mov	r0, r5
 801a34a:	f7e5 ff59 	bl	8000200 <memchr>
 801a34e:	b108      	cbz	r0, 801a354 <_printf_i+0x1bc>
 801a350:	1b40      	subs	r0, r0, r5
 801a352:	6060      	str	r0, [r4, #4]
 801a354:	6863      	ldr	r3, [r4, #4]
 801a356:	6123      	str	r3, [r4, #16]
 801a358:	2300      	movs	r3, #0
 801a35a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a35e:	e7a7      	b.n	801a2b0 <_printf_i+0x118>
 801a360:	6923      	ldr	r3, [r4, #16]
 801a362:	462a      	mov	r2, r5
 801a364:	4639      	mov	r1, r7
 801a366:	4630      	mov	r0, r6
 801a368:	47c0      	blx	r8
 801a36a:	3001      	adds	r0, #1
 801a36c:	d0aa      	beq.n	801a2c4 <_printf_i+0x12c>
 801a36e:	6823      	ldr	r3, [r4, #0]
 801a370:	079b      	lsls	r3, r3, #30
 801a372:	d413      	bmi.n	801a39c <_printf_i+0x204>
 801a374:	68e0      	ldr	r0, [r4, #12]
 801a376:	9b03      	ldr	r3, [sp, #12]
 801a378:	4298      	cmp	r0, r3
 801a37a:	bfb8      	it	lt
 801a37c:	4618      	movlt	r0, r3
 801a37e:	e7a3      	b.n	801a2c8 <_printf_i+0x130>
 801a380:	2301      	movs	r3, #1
 801a382:	464a      	mov	r2, r9
 801a384:	4639      	mov	r1, r7
 801a386:	4630      	mov	r0, r6
 801a388:	47c0      	blx	r8
 801a38a:	3001      	adds	r0, #1
 801a38c:	d09a      	beq.n	801a2c4 <_printf_i+0x12c>
 801a38e:	3501      	adds	r5, #1
 801a390:	68e3      	ldr	r3, [r4, #12]
 801a392:	9a03      	ldr	r2, [sp, #12]
 801a394:	1a9b      	subs	r3, r3, r2
 801a396:	42ab      	cmp	r3, r5
 801a398:	dcf2      	bgt.n	801a380 <_printf_i+0x1e8>
 801a39a:	e7eb      	b.n	801a374 <_printf_i+0x1dc>
 801a39c:	2500      	movs	r5, #0
 801a39e:	f104 0919 	add.w	r9, r4, #25
 801a3a2:	e7f5      	b.n	801a390 <_printf_i+0x1f8>
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d1ac      	bne.n	801a302 <_printf_i+0x16a>
 801a3a8:	7803      	ldrb	r3, [r0, #0]
 801a3aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a3ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a3b2:	e76c      	b.n	801a28e <_printf_i+0xf6>
 801a3b4:	0801e9db 	.word	0x0801e9db
 801a3b8:	0801e9ec 	.word	0x0801e9ec

0801a3bc <_scanf_float>:
 801a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c0:	469a      	mov	sl, r3
 801a3c2:	688b      	ldr	r3, [r1, #8]
 801a3c4:	4616      	mov	r6, r2
 801a3c6:	1e5a      	subs	r2, r3, #1
 801a3c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a3cc:	b087      	sub	sp, #28
 801a3ce:	bf83      	ittte	hi
 801a3d0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801a3d4:	189b      	addhi	r3, r3, r2
 801a3d6:	9301      	strhi	r3, [sp, #4]
 801a3d8:	2300      	movls	r3, #0
 801a3da:	bf86      	itte	hi
 801a3dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a3e0:	608b      	strhi	r3, [r1, #8]
 801a3e2:	9301      	strls	r3, [sp, #4]
 801a3e4:	680b      	ldr	r3, [r1, #0]
 801a3e6:	4688      	mov	r8, r1
 801a3e8:	f04f 0b00 	mov.w	fp, #0
 801a3ec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a3f0:	f848 3b1c 	str.w	r3, [r8], #28
 801a3f4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801a3f8:	4607      	mov	r7, r0
 801a3fa:	460c      	mov	r4, r1
 801a3fc:	4645      	mov	r5, r8
 801a3fe:	465a      	mov	r2, fp
 801a400:	46d9      	mov	r9, fp
 801a402:	f8cd b008 	str.w	fp, [sp, #8]
 801a406:	68a1      	ldr	r1, [r4, #8]
 801a408:	b181      	cbz	r1, 801a42c <_scanf_float+0x70>
 801a40a:	6833      	ldr	r3, [r6, #0]
 801a40c:	781b      	ldrb	r3, [r3, #0]
 801a40e:	2b49      	cmp	r3, #73	; 0x49
 801a410:	d071      	beq.n	801a4f6 <_scanf_float+0x13a>
 801a412:	d84d      	bhi.n	801a4b0 <_scanf_float+0xf4>
 801a414:	2b39      	cmp	r3, #57	; 0x39
 801a416:	d840      	bhi.n	801a49a <_scanf_float+0xde>
 801a418:	2b31      	cmp	r3, #49	; 0x31
 801a41a:	f080 8088 	bcs.w	801a52e <_scanf_float+0x172>
 801a41e:	2b2d      	cmp	r3, #45	; 0x2d
 801a420:	f000 8090 	beq.w	801a544 <_scanf_float+0x188>
 801a424:	d815      	bhi.n	801a452 <_scanf_float+0x96>
 801a426:	2b2b      	cmp	r3, #43	; 0x2b
 801a428:	f000 808c 	beq.w	801a544 <_scanf_float+0x188>
 801a42c:	f1b9 0f00 	cmp.w	r9, #0
 801a430:	d003      	beq.n	801a43a <_scanf_float+0x7e>
 801a432:	6823      	ldr	r3, [r4, #0]
 801a434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a438:	6023      	str	r3, [r4, #0]
 801a43a:	3a01      	subs	r2, #1
 801a43c:	2a01      	cmp	r2, #1
 801a43e:	f200 80ea 	bhi.w	801a616 <_scanf_float+0x25a>
 801a442:	4545      	cmp	r5, r8
 801a444:	f200 80dc 	bhi.w	801a600 <_scanf_float+0x244>
 801a448:	2601      	movs	r6, #1
 801a44a:	4630      	mov	r0, r6
 801a44c:	b007      	add	sp, #28
 801a44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a452:	2b2e      	cmp	r3, #46	; 0x2e
 801a454:	f000 809f 	beq.w	801a596 <_scanf_float+0x1da>
 801a458:	2b30      	cmp	r3, #48	; 0x30
 801a45a:	d1e7      	bne.n	801a42c <_scanf_float+0x70>
 801a45c:	6820      	ldr	r0, [r4, #0]
 801a45e:	f410 7f80 	tst.w	r0, #256	; 0x100
 801a462:	d064      	beq.n	801a52e <_scanf_float+0x172>
 801a464:	9b01      	ldr	r3, [sp, #4]
 801a466:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801a46a:	6020      	str	r0, [r4, #0]
 801a46c:	f109 0901 	add.w	r9, r9, #1
 801a470:	b11b      	cbz	r3, 801a47a <_scanf_float+0xbe>
 801a472:	3b01      	subs	r3, #1
 801a474:	3101      	adds	r1, #1
 801a476:	9301      	str	r3, [sp, #4]
 801a478:	60a1      	str	r1, [r4, #8]
 801a47a:	68a3      	ldr	r3, [r4, #8]
 801a47c:	3b01      	subs	r3, #1
 801a47e:	60a3      	str	r3, [r4, #8]
 801a480:	6923      	ldr	r3, [r4, #16]
 801a482:	3301      	adds	r3, #1
 801a484:	6123      	str	r3, [r4, #16]
 801a486:	6873      	ldr	r3, [r6, #4]
 801a488:	3b01      	subs	r3, #1
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	6073      	str	r3, [r6, #4]
 801a48e:	f340 80ac 	ble.w	801a5ea <_scanf_float+0x22e>
 801a492:	6833      	ldr	r3, [r6, #0]
 801a494:	3301      	adds	r3, #1
 801a496:	6033      	str	r3, [r6, #0]
 801a498:	e7b5      	b.n	801a406 <_scanf_float+0x4a>
 801a49a:	2b45      	cmp	r3, #69	; 0x45
 801a49c:	f000 8085 	beq.w	801a5aa <_scanf_float+0x1ee>
 801a4a0:	2b46      	cmp	r3, #70	; 0x46
 801a4a2:	d06a      	beq.n	801a57a <_scanf_float+0x1be>
 801a4a4:	2b41      	cmp	r3, #65	; 0x41
 801a4a6:	d1c1      	bne.n	801a42c <_scanf_float+0x70>
 801a4a8:	2a01      	cmp	r2, #1
 801a4aa:	d1bf      	bne.n	801a42c <_scanf_float+0x70>
 801a4ac:	2202      	movs	r2, #2
 801a4ae:	e046      	b.n	801a53e <_scanf_float+0x182>
 801a4b0:	2b65      	cmp	r3, #101	; 0x65
 801a4b2:	d07a      	beq.n	801a5aa <_scanf_float+0x1ee>
 801a4b4:	d818      	bhi.n	801a4e8 <_scanf_float+0x12c>
 801a4b6:	2b54      	cmp	r3, #84	; 0x54
 801a4b8:	d066      	beq.n	801a588 <_scanf_float+0x1cc>
 801a4ba:	d811      	bhi.n	801a4e0 <_scanf_float+0x124>
 801a4bc:	2b4e      	cmp	r3, #78	; 0x4e
 801a4be:	d1b5      	bne.n	801a42c <_scanf_float+0x70>
 801a4c0:	2a00      	cmp	r2, #0
 801a4c2:	d146      	bne.n	801a552 <_scanf_float+0x196>
 801a4c4:	f1b9 0f00 	cmp.w	r9, #0
 801a4c8:	d145      	bne.n	801a556 <_scanf_float+0x19a>
 801a4ca:	6821      	ldr	r1, [r4, #0]
 801a4cc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801a4d0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801a4d4:	d13f      	bne.n	801a556 <_scanf_float+0x19a>
 801a4d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801a4da:	6021      	str	r1, [r4, #0]
 801a4dc:	2201      	movs	r2, #1
 801a4de:	e02e      	b.n	801a53e <_scanf_float+0x182>
 801a4e0:	2b59      	cmp	r3, #89	; 0x59
 801a4e2:	d01e      	beq.n	801a522 <_scanf_float+0x166>
 801a4e4:	2b61      	cmp	r3, #97	; 0x61
 801a4e6:	e7de      	b.n	801a4a6 <_scanf_float+0xea>
 801a4e8:	2b6e      	cmp	r3, #110	; 0x6e
 801a4ea:	d0e9      	beq.n	801a4c0 <_scanf_float+0x104>
 801a4ec:	d815      	bhi.n	801a51a <_scanf_float+0x15e>
 801a4ee:	2b66      	cmp	r3, #102	; 0x66
 801a4f0:	d043      	beq.n	801a57a <_scanf_float+0x1be>
 801a4f2:	2b69      	cmp	r3, #105	; 0x69
 801a4f4:	d19a      	bne.n	801a42c <_scanf_float+0x70>
 801a4f6:	f1bb 0f00 	cmp.w	fp, #0
 801a4fa:	d138      	bne.n	801a56e <_scanf_float+0x1b2>
 801a4fc:	f1b9 0f00 	cmp.w	r9, #0
 801a500:	d197      	bne.n	801a432 <_scanf_float+0x76>
 801a502:	6821      	ldr	r1, [r4, #0]
 801a504:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801a508:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801a50c:	d195      	bne.n	801a43a <_scanf_float+0x7e>
 801a50e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801a512:	6021      	str	r1, [r4, #0]
 801a514:	f04f 0b01 	mov.w	fp, #1
 801a518:	e011      	b.n	801a53e <_scanf_float+0x182>
 801a51a:	2b74      	cmp	r3, #116	; 0x74
 801a51c:	d034      	beq.n	801a588 <_scanf_float+0x1cc>
 801a51e:	2b79      	cmp	r3, #121	; 0x79
 801a520:	d184      	bne.n	801a42c <_scanf_float+0x70>
 801a522:	f1bb 0f07 	cmp.w	fp, #7
 801a526:	d181      	bne.n	801a42c <_scanf_float+0x70>
 801a528:	f04f 0b08 	mov.w	fp, #8
 801a52c:	e007      	b.n	801a53e <_scanf_float+0x182>
 801a52e:	eb12 0f0b 	cmn.w	r2, fp
 801a532:	f47f af7b 	bne.w	801a42c <_scanf_float+0x70>
 801a536:	6821      	ldr	r1, [r4, #0]
 801a538:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801a53c:	6021      	str	r1, [r4, #0]
 801a53e:	702b      	strb	r3, [r5, #0]
 801a540:	3501      	adds	r5, #1
 801a542:	e79a      	b.n	801a47a <_scanf_float+0xbe>
 801a544:	6821      	ldr	r1, [r4, #0]
 801a546:	0608      	lsls	r0, r1, #24
 801a548:	f57f af70 	bpl.w	801a42c <_scanf_float+0x70>
 801a54c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a550:	e7f4      	b.n	801a53c <_scanf_float+0x180>
 801a552:	2a02      	cmp	r2, #2
 801a554:	d047      	beq.n	801a5e6 <_scanf_float+0x22a>
 801a556:	f1bb 0f01 	cmp.w	fp, #1
 801a55a:	d003      	beq.n	801a564 <_scanf_float+0x1a8>
 801a55c:	f1bb 0f04 	cmp.w	fp, #4
 801a560:	f47f af64 	bne.w	801a42c <_scanf_float+0x70>
 801a564:	f10b 0b01 	add.w	fp, fp, #1
 801a568:	fa5f fb8b 	uxtb.w	fp, fp
 801a56c:	e7e7      	b.n	801a53e <_scanf_float+0x182>
 801a56e:	f1bb 0f03 	cmp.w	fp, #3
 801a572:	d0f7      	beq.n	801a564 <_scanf_float+0x1a8>
 801a574:	f1bb 0f05 	cmp.w	fp, #5
 801a578:	e7f2      	b.n	801a560 <_scanf_float+0x1a4>
 801a57a:	f1bb 0f02 	cmp.w	fp, #2
 801a57e:	f47f af55 	bne.w	801a42c <_scanf_float+0x70>
 801a582:	f04f 0b03 	mov.w	fp, #3
 801a586:	e7da      	b.n	801a53e <_scanf_float+0x182>
 801a588:	f1bb 0f06 	cmp.w	fp, #6
 801a58c:	f47f af4e 	bne.w	801a42c <_scanf_float+0x70>
 801a590:	f04f 0b07 	mov.w	fp, #7
 801a594:	e7d3      	b.n	801a53e <_scanf_float+0x182>
 801a596:	6821      	ldr	r1, [r4, #0]
 801a598:	0588      	lsls	r0, r1, #22
 801a59a:	f57f af47 	bpl.w	801a42c <_scanf_float+0x70>
 801a59e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801a5a2:	6021      	str	r1, [r4, #0]
 801a5a4:	f8cd 9008 	str.w	r9, [sp, #8]
 801a5a8:	e7c9      	b.n	801a53e <_scanf_float+0x182>
 801a5aa:	6821      	ldr	r1, [r4, #0]
 801a5ac:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801a5b0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a5b4:	d006      	beq.n	801a5c4 <_scanf_float+0x208>
 801a5b6:	0548      	lsls	r0, r1, #21
 801a5b8:	f57f af38 	bpl.w	801a42c <_scanf_float+0x70>
 801a5bc:	f1b9 0f00 	cmp.w	r9, #0
 801a5c0:	f43f af3b 	beq.w	801a43a <_scanf_float+0x7e>
 801a5c4:	0588      	lsls	r0, r1, #22
 801a5c6:	bf58      	it	pl
 801a5c8:	9802      	ldrpl	r0, [sp, #8]
 801a5ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801a5ce:	bf58      	it	pl
 801a5d0:	eba9 0000 	subpl.w	r0, r9, r0
 801a5d4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801a5d8:	bf58      	it	pl
 801a5da:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801a5de:	6021      	str	r1, [r4, #0]
 801a5e0:	f04f 0900 	mov.w	r9, #0
 801a5e4:	e7ab      	b.n	801a53e <_scanf_float+0x182>
 801a5e6:	2203      	movs	r2, #3
 801a5e8:	e7a9      	b.n	801a53e <_scanf_float+0x182>
 801a5ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a5ee:	9205      	str	r2, [sp, #20]
 801a5f0:	4631      	mov	r1, r6
 801a5f2:	4638      	mov	r0, r7
 801a5f4:	4798      	blx	r3
 801a5f6:	9a05      	ldr	r2, [sp, #20]
 801a5f8:	2800      	cmp	r0, #0
 801a5fa:	f43f af04 	beq.w	801a406 <_scanf_float+0x4a>
 801a5fe:	e715      	b.n	801a42c <_scanf_float+0x70>
 801a600:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a604:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801a608:	4632      	mov	r2, r6
 801a60a:	4638      	mov	r0, r7
 801a60c:	4798      	blx	r3
 801a60e:	6923      	ldr	r3, [r4, #16]
 801a610:	3b01      	subs	r3, #1
 801a612:	6123      	str	r3, [r4, #16]
 801a614:	e715      	b.n	801a442 <_scanf_float+0x86>
 801a616:	f10b 33ff 	add.w	r3, fp, #4294967295
 801a61a:	2b06      	cmp	r3, #6
 801a61c:	d80a      	bhi.n	801a634 <_scanf_float+0x278>
 801a61e:	f1bb 0f02 	cmp.w	fp, #2
 801a622:	d968      	bls.n	801a6f6 <_scanf_float+0x33a>
 801a624:	f1ab 0b03 	sub.w	fp, fp, #3
 801a628:	fa5f fb8b 	uxtb.w	fp, fp
 801a62c:	eba5 0b0b 	sub.w	fp, r5, fp
 801a630:	455d      	cmp	r5, fp
 801a632:	d14b      	bne.n	801a6cc <_scanf_float+0x310>
 801a634:	6823      	ldr	r3, [r4, #0]
 801a636:	05da      	lsls	r2, r3, #23
 801a638:	d51f      	bpl.n	801a67a <_scanf_float+0x2be>
 801a63a:	055b      	lsls	r3, r3, #21
 801a63c:	d468      	bmi.n	801a710 <_scanf_float+0x354>
 801a63e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a642:	6923      	ldr	r3, [r4, #16]
 801a644:	2965      	cmp	r1, #101	; 0x65
 801a646:	f103 33ff 	add.w	r3, r3, #4294967295
 801a64a:	f105 3bff 	add.w	fp, r5, #4294967295
 801a64e:	6123      	str	r3, [r4, #16]
 801a650:	d00d      	beq.n	801a66e <_scanf_float+0x2b2>
 801a652:	2945      	cmp	r1, #69	; 0x45
 801a654:	d00b      	beq.n	801a66e <_scanf_float+0x2b2>
 801a656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a65a:	4632      	mov	r2, r6
 801a65c:	4638      	mov	r0, r7
 801a65e:	4798      	blx	r3
 801a660:	6923      	ldr	r3, [r4, #16]
 801a662:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801a666:	3b01      	subs	r3, #1
 801a668:	f1a5 0b02 	sub.w	fp, r5, #2
 801a66c:	6123      	str	r3, [r4, #16]
 801a66e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a672:	4632      	mov	r2, r6
 801a674:	4638      	mov	r0, r7
 801a676:	4798      	blx	r3
 801a678:	465d      	mov	r5, fp
 801a67a:	6826      	ldr	r6, [r4, #0]
 801a67c:	f016 0610 	ands.w	r6, r6, #16
 801a680:	d17a      	bne.n	801a778 <_scanf_float+0x3bc>
 801a682:	702e      	strb	r6, [r5, #0]
 801a684:	6823      	ldr	r3, [r4, #0]
 801a686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a68a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a68e:	d142      	bne.n	801a716 <_scanf_float+0x35a>
 801a690:	9b02      	ldr	r3, [sp, #8]
 801a692:	eba9 0303 	sub.w	r3, r9, r3
 801a696:	425a      	negs	r2, r3
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d149      	bne.n	801a730 <_scanf_float+0x374>
 801a69c:	2200      	movs	r2, #0
 801a69e:	4641      	mov	r1, r8
 801a6a0:	4638      	mov	r0, r7
 801a6a2:	f000 ffbd 	bl	801b620 <_strtod_r>
 801a6a6:	6825      	ldr	r5, [r4, #0]
 801a6a8:	f8da 3000 	ldr.w	r3, [sl]
 801a6ac:	f015 0f02 	tst.w	r5, #2
 801a6b0:	f103 0204 	add.w	r2, r3, #4
 801a6b4:	ec59 8b10 	vmov	r8, r9, d0
 801a6b8:	f8ca 2000 	str.w	r2, [sl]
 801a6bc:	d043      	beq.n	801a746 <_scanf_float+0x38a>
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	e9c3 8900 	strd	r8, r9, [r3]
 801a6c4:	68e3      	ldr	r3, [r4, #12]
 801a6c6:	3301      	adds	r3, #1
 801a6c8:	60e3      	str	r3, [r4, #12]
 801a6ca:	e6be      	b.n	801a44a <_scanf_float+0x8e>
 801a6cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a6d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801a6d4:	4632      	mov	r2, r6
 801a6d6:	4638      	mov	r0, r7
 801a6d8:	4798      	blx	r3
 801a6da:	6923      	ldr	r3, [r4, #16]
 801a6dc:	3b01      	subs	r3, #1
 801a6de:	6123      	str	r3, [r4, #16]
 801a6e0:	e7a6      	b.n	801a630 <_scanf_float+0x274>
 801a6e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a6e6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801a6ea:	4632      	mov	r2, r6
 801a6ec:	4638      	mov	r0, r7
 801a6ee:	4798      	blx	r3
 801a6f0:	6923      	ldr	r3, [r4, #16]
 801a6f2:	3b01      	subs	r3, #1
 801a6f4:	6123      	str	r3, [r4, #16]
 801a6f6:	4545      	cmp	r5, r8
 801a6f8:	d8f3      	bhi.n	801a6e2 <_scanf_float+0x326>
 801a6fa:	e6a5      	b.n	801a448 <_scanf_float+0x8c>
 801a6fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a700:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801a704:	4632      	mov	r2, r6
 801a706:	4638      	mov	r0, r7
 801a708:	4798      	blx	r3
 801a70a:	6923      	ldr	r3, [r4, #16]
 801a70c:	3b01      	subs	r3, #1
 801a70e:	6123      	str	r3, [r4, #16]
 801a710:	4545      	cmp	r5, r8
 801a712:	d8f3      	bhi.n	801a6fc <_scanf_float+0x340>
 801a714:	e698      	b.n	801a448 <_scanf_float+0x8c>
 801a716:	9b03      	ldr	r3, [sp, #12]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d0bf      	beq.n	801a69c <_scanf_float+0x2e0>
 801a71c:	9904      	ldr	r1, [sp, #16]
 801a71e:	230a      	movs	r3, #10
 801a720:	4632      	mov	r2, r6
 801a722:	3101      	adds	r1, #1
 801a724:	4638      	mov	r0, r7
 801a726:	f001 f807 	bl	801b738 <_strtol_r>
 801a72a:	9b03      	ldr	r3, [sp, #12]
 801a72c:	9d04      	ldr	r5, [sp, #16]
 801a72e:	1ac2      	subs	r2, r0, r3
 801a730:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a734:	429d      	cmp	r5, r3
 801a736:	bf28      	it	cs
 801a738:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801a73c:	490f      	ldr	r1, [pc, #60]	; (801a77c <_scanf_float+0x3c0>)
 801a73e:	4628      	mov	r0, r5
 801a740:	f000 f936 	bl	801a9b0 <siprintf>
 801a744:	e7aa      	b.n	801a69c <_scanf_float+0x2e0>
 801a746:	f015 0504 	ands.w	r5, r5, #4
 801a74a:	d1b8      	bne.n	801a6be <_scanf_float+0x302>
 801a74c:	681f      	ldr	r7, [r3, #0]
 801a74e:	ee10 2a10 	vmov	r2, s0
 801a752:	464b      	mov	r3, r9
 801a754:	ee10 0a10 	vmov	r0, s0
 801a758:	4649      	mov	r1, r9
 801a75a:	f7e6 f9f7 	bl	8000b4c <__aeabi_dcmpun>
 801a75e:	b128      	cbz	r0, 801a76c <_scanf_float+0x3b0>
 801a760:	4628      	mov	r0, r5
 801a762:	f000 f91f 	bl	801a9a4 <nanf>
 801a766:	ed87 0a00 	vstr	s0, [r7]
 801a76a:	e7ab      	b.n	801a6c4 <_scanf_float+0x308>
 801a76c:	4640      	mov	r0, r8
 801a76e:	4649      	mov	r1, r9
 801a770:	f7e6 fa4a 	bl	8000c08 <__aeabi_d2f>
 801a774:	6038      	str	r0, [r7, #0]
 801a776:	e7a5      	b.n	801a6c4 <_scanf_float+0x308>
 801a778:	2600      	movs	r6, #0
 801a77a:	e666      	b.n	801a44a <_scanf_float+0x8e>
 801a77c:	0801e9fd 	.word	0x0801e9fd

0801a780 <_puts_r>:
 801a780:	b570      	push	{r4, r5, r6, lr}
 801a782:	460e      	mov	r6, r1
 801a784:	4605      	mov	r5, r0
 801a786:	b118      	cbz	r0, 801a790 <_puts_r+0x10>
 801a788:	6983      	ldr	r3, [r0, #24]
 801a78a:	b90b      	cbnz	r3, 801a790 <_puts_r+0x10>
 801a78c:	f001 ffe4 	bl	801c758 <__sinit>
 801a790:	69ab      	ldr	r3, [r5, #24]
 801a792:	68ac      	ldr	r4, [r5, #8]
 801a794:	b913      	cbnz	r3, 801a79c <_puts_r+0x1c>
 801a796:	4628      	mov	r0, r5
 801a798:	f001 ffde 	bl	801c758 <__sinit>
 801a79c:	4b23      	ldr	r3, [pc, #140]	; (801a82c <_puts_r+0xac>)
 801a79e:	429c      	cmp	r4, r3
 801a7a0:	d117      	bne.n	801a7d2 <_puts_r+0x52>
 801a7a2:	686c      	ldr	r4, [r5, #4]
 801a7a4:	89a3      	ldrh	r3, [r4, #12]
 801a7a6:	071b      	lsls	r3, r3, #28
 801a7a8:	d51d      	bpl.n	801a7e6 <_puts_r+0x66>
 801a7aa:	6923      	ldr	r3, [r4, #16]
 801a7ac:	b1db      	cbz	r3, 801a7e6 <_puts_r+0x66>
 801a7ae:	3e01      	subs	r6, #1
 801a7b0:	68a3      	ldr	r3, [r4, #8]
 801a7b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a7b6:	3b01      	subs	r3, #1
 801a7b8:	60a3      	str	r3, [r4, #8]
 801a7ba:	b9e9      	cbnz	r1, 801a7f8 <_puts_r+0x78>
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	da2e      	bge.n	801a81e <_puts_r+0x9e>
 801a7c0:	4622      	mov	r2, r4
 801a7c2:	210a      	movs	r1, #10
 801a7c4:	4628      	mov	r0, r5
 801a7c6:	f000 ffc9 	bl	801b75c <__swbuf_r>
 801a7ca:	3001      	adds	r0, #1
 801a7cc:	d011      	beq.n	801a7f2 <_puts_r+0x72>
 801a7ce:	200a      	movs	r0, #10
 801a7d0:	e011      	b.n	801a7f6 <_puts_r+0x76>
 801a7d2:	4b17      	ldr	r3, [pc, #92]	; (801a830 <_puts_r+0xb0>)
 801a7d4:	429c      	cmp	r4, r3
 801a7d6:	d101      	bne.n	801a7dc <_puts_r+0x5c>
 801a7d8:	68ac      	ldr	r4, [r5, #8]
 801a7da:	e7e3      	b.n	801a7a4 <_puts_r+0x24>
 801a7dc:	4b15      	ldr	r3, [pc, #84]	; (801a834 <_puts_r+0xb4>)
 801a7de:	429c      	cmp	r4, r3
 801a7e0:	bf08      	it	eq
 801a7e2:	68ec      	ldreq	r4, [r5, #12]
 801a7e4:	e7de      	b.n	801a7a4 <_puts_r+0x24>
 801a7e6:	4621      	mov	r1, r4
 801a7e8:	4628      	mov	r0, r5
 801a7ea:	f001 f809 	bl	801b800 <__swsetup_r>
 801a7ee:	2800      	cmp	r0, #0
 801a7f0:	d0dd      	beq.n	801a7ae <_puts_r+0x2e>
 801a7f2:	f04f 30ff 	mov.w	r0, #4294967295
 801a7f6:	bd70      	pop	{r4, r5, r6, pc}
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	da04      	bge.n	801a806 <_puts_r+0x86>
 801a7fc:	69a2      	ldr	r2, [r4, #24]
 801a7fe:	429a      	cmp	r2, r3
 801a800:	dc06      	bgt.n	801a810 <_puts_r+0x90>
 801a802:	290a      	cmp	r1, #10
 801a804:	d004      	beq.n	801a810 <_puts_r+0x90>
 801a806:	6823      	ldr	r3, [r4, #0]
 801a808:	1c5a      	adds	r2, r3, #1
 801a80a:	6022      	str	r2, [r4, #0]
 801a80c:	7019      	strb	r1, [r3, #0]
 801a80e:	e7cf      	b.n	801a7b0 <_puts_r+0x30>
 801a810:	4622      	mov	r2, r4
 801a812:	4628      	mov	r0, r5
 801a814:	f000 ffa2 	bl	801b75c <__swbuf_r>
 801a818:	3001      	adds	r0, #1
 801a81a:	d1c9      	bne.n	801a7b0 <_puts_r+0x30>
 801a81c:	e7e9      	b.n	801a7f2 <_puts_r+0x72>
 801a81e:	6823      	ldr	r3, [r4, #0]
 801a820:	200a      	movs	r0, #10
 801a822:	1c5a      	adds	r2, r3, #1
 801a824:	6022      	str	r2, [r4, #0]
 801a826:	7018      	strb	r0, [r3, #0]
 801a828:	e7e5      	b.n	801a7f6 <_puts_r+0x76>
 801a82a:	bf00      	nop
 801a82c:	0801ea88 	.word	0x0801ea88
 801a830:	0801eaa8 	.word	0x0801eaa8
 801a834:	0801ea68 	.word	0x0801ea68

0801a838 <puts>:
 801a838:	4b02      	ldr	r3, [pc, #8]	; (801a844 <puts+0xc>)
 801a83a:	4601      	mov	r1, r0
 801a83c:	6818      	ldr	r0, [r3, #0]
 801a83e:	f7ff bf9f 	b.w	801a780 <_puts_r>
 801a842:	bf00      	nop
 801a844:	200001c4 	.word	0x200001c4

0801a848 <setvbuf>:
 801a848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a84c:	461d      	mov	r5, r3
 801a84e:	4b51      	ldr	r3, [pc, #324]	; (801a994 <setvbuf+0x14c>)
 801a850:	681e      	ldr	r6, [r3, #0]
 801a852:	4604      	mov	r4, r0
 801a854:	460f      	mov	r7, r1
 801a856:	4690      	mov	r8, r2
 801a858:	b126      	cbz	r6, 801a864 <setvbuf+0x1c>
 801a85a:	69b3      	ldr	r3, [r6, #24]
 801a85c:	b913      	cbnz	r3, 801a864 <setvbuf+0x1c>
 801a85e:	4630      	mov	r0, r6
 801a860:	f001 ff7a 	bl	801c758 <__sinit>
 801a864:	4b4c      	ldr	r3, [pc, #304]	; (801a998 <setvbuf+0x150>)
 801a866:	429c      	cmp	r4, r3
 801a868:	d152      	bne.n	801a910 <setvbuf+0xc8>
 801a86a:	6874      	ldr	r4, [r6, #4]
 801a86c:	f1b8 0f02 	cmp.w	r8, #2
 801a870:	d006      	beq.n	801a880 <setvbuf+0x38>
 801a872:	f1b8 0f01 	cmp.w	r8, #1
 801a876:	f200 8089 	bhi.w	801a98c <setvbuf+0x144>
 801a87a:	2d00      	cmp	r5, #0
 801a87c:	f2c0 8086 	blt.w	801a98c <setvbuf+0x144>
 801a880:	4621      	mov	r1, r4
 801a882:	4630      	mov	r0, r6
 801a884:	f001 fefe 	bl	801c684 <_fflush_r>
 801a888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a88a:	b141      	cbz	r1, 801a89e <setvbuf+0x56>
 801a88c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a890:	4299      	cmp	r1, r3
 801a892:	d002      	beq.n	801a89a <setvbuf+0x52>
 801a894:	4630      	mov	r0, r6
 801a896:	f002 ffc7 	bl	801d828 <_free_r>
 801a89a:	2300      	movs	r3, #0
 801a89c:	6363      	str	r3, [r4, #52]	; 0x34
 801a89e:	2300      	movs	r3, #0
 801a8a0:	61a3      	str	r3, [r4, #24]
 801a8a2:	6063      	str	r3, [r4, #4]
 801a8a4:	89a3      	ldrh	r3, [r4, #12]
 801a8a6:	061b      	lsls	r3, r3, #24
 801a8a8:	d503      	bpl.n	801a8b2 <setvbuf+0x6a>
 801a8aa:	6921      	ldr	r1, [r4, #16]
 801a8ac:	4630      	mov	r0, r6
 801a8ae:	f002 ffbb 	bl	801d828 <_free_r>
 801a8b2:	89a3      	ldrh	r3, [r4, #12]
 801a8b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801a8b8:	f023 0303 	bic.w	r3, r3, #3
 801a8bc:	f1b8 0f02 	cmp.w	r8, #2
 801a8c0:	81a3      	strh	r3, [r4, #12]
 801a8c2:	d05d      	beq.n	801a980 <setvbuf+0x138>
 801a8c4:	ab01      	add	r3, sp, #4
 801a8c6:	466a      	mov	r2, sp
 801a8c8:	4621      	mov	r1, r4
 801a8ca:	4630      	mov	r0, r6
 801a8cc:	f002 fb08 	bl	801cee0 <__swhatbuf_r>
 801a8d0:	89a3      	ldrh	r3, [r4, #12]
 801a8d2:	4318      	orrs	r0, r3
 801a8d4:	81a0      	strh	r0, [r4, #12]
 801a8d6:	bb2d      	cbnz	r5, 801a924 <setvbuf+0xdc>
 801a8d8:	9d00      	ldr	r5, [sp, #0]
 801a8da:	4628      	mov	r0, r5
 801a8dc:	f002 fb64 	bl	801cfa8 <malloc>
 801a8e0:	4607      	mov	r7, r0
 801a8e2:	2800      	cmp	r0, #0
 801a8e4:	d14e      	bne.n	801a984 <setvbuf+0x13c>
 801a8e6:	f8dd 9000 	ldr.w	r9, [sp]
 801a8ea:	45a9      	cmp	r9, r5
 801a8ec:	d13c      	bne.n	801a968 <setvbuf+0x120>
 801a8ee:	f04f 30ff 	mov.w	r0, #4294967295
 801a8f2:	89a3      	ldrh	r3, [r4, #12]
 801a8f4:	f043 0302 	orr.w	r3, r3, #2
 801a8f8:	81a3      	strh	r3, [r4, #12]
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	60a3      	str	r3, [r4, #8]
 801a8fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a902:	6023      	str	r3, [r4, #0]
 801a904:	6123      	str	r3, [r4, #16]
 801a906:	2301      	movs	r3, #1
 801a908:	6163      	str	r3, [r4, #20]
 801a90a:	b003      	add	sp, #12
 801a90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a910:	4b22      	ldr	r3, [pc, #136]	; (801a99c <setvbuf+0x154>)
 801a912:	429c      	cmp	r4, r3
 801a914:	d101      	bne.n	801a91a <setvbuf+0xd2>
 801a916:	68b4      	ldr	r4, [r6, #8]
 801a918:	e7a8      	b.n	801a86c <setvbuf+0x24>
 801a91a:	4b21      	ldr	r3, [pc, #132]	; (801a9a0 <setvbuf+0x158>)
 801a91c:	429c      	cmp	r4, r3
 801a91e:	bf08      	it	eq
 801a920:	68f4      	ldreq	r4, [r6, #12]
 801a922:	e7a3      	b.n	801a86c <setvbuf+0x24>
 801a924:	2f00      	cmp	r7, #0
 801a926:	d0d8      	beq.n	801a8da <setvbuf+0x92>
 801a928:	69b3      	ldr	r3, [r6, #24]
 801a92a:	b913      	cbnz	r3, 801a932 <setvbuf+0xea>
 801a92c:	4630      	mov	r0, r6
 801a92e:	f001 ff13 	bl	801c758 <__sinit>
 801a932:	f1b8 0f01 	cmp.w	r8, #1
 801a936:	bf08      	it	eq
 801a938:	89a3      	ldrheq	r3, [r4, #12]
 801a93a:	6027      	str	r7, [r4, #0]
 801a93c:	bf04      	itt	eq
 801a93e:	f043 0301 	orreq.w	r3, r3, #1
 801a942:	81a3      	strheq	r3, [r4, #12]
 801a944:	89a3      	ldrh	r3, [r4, #12]
 801a946:	f013 0008 	ands.w	r0, r3, #8
 801a94a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801a94e:	d01b      	beq.n	801a988 <setvbuf+0x140>
 801a950:	f013 0001 	ands.w	r0, r3, #1
 801a954:	bf18      	it	ne
 801a956:	426d      	negne	r5, r5
 801a958:	f04f 0300 	mov.w	r3, #0
 801a95c:	bf1d      	ittte	ne
 801a95e:	60a3      	strne	r3, [r4, #8]
 801a960:	61a5      	strne	r5, [r4, #24]
 801a962:	4618      	movne	r0, r3
 801a964:	60a5      	streq	r5, [r4, #8]
 801a966:	e7d0      	b.n	801a90a <setvbuf+0xc2>
 801a968:	4648      	mov	r0, r9
 801a96a:	f002 fb1d 	bl	801cfa8 <malloc>
 801a96e:	4607      	mov	r7, r0
 801a970:	2800      	cmp	r0, #0
 801a972:	d0bc      	beq.n	801a8ee <setvbuf+0xa6>
 801a974:	89a3      	ldrh	r3, [r4, #12]
 801a976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a97a:	81a3      	strh	r3, [r4, #12]
 801a97c:	464d      	mov	r5, r9
 801a97e:	e7d3      	b.n	801a928 <setvbuf+0xe0>
 801a980:	2000      	movs	r0, #0
 801a982:	e7b6      	b.n	801a8f2 <setvbuf+0xaa>
 801a984:	46a9      	mov	r9, r5
 801a986:	e7f5      	b.n	801a974 <setvbuf+0x12c>
 801a988:	60a0      	str	r0, [r4, #8]
 801a98a:	e7be      	b.n	801a90a <setvbuf+0xc2>
 801a98c:	f04f 30ff 	mov.w	r0, #4294967295
 801a990:	e7bb      	b.n	801a90a <setvbuf+0xc2>
 801a992:	bf00      	nop
 801a994:	200001c4 	.word	0x200001c4
 801a998:	0801ea88 	.word	0x0801ea88
 801a99c:	0801eaa8 	.word	0x0801eaa8
 801a9a0:	0801ea68 	.word	0x0801ea68

0801a9a4 <nanf>:
 801a9a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a9ac <nanf+0x8>
 801a9a8:	4770      	bx	lr
 801a9aa:	bf00      	nop
 801a9ac:	7fc00000 	.word	0x7fc00000

0801a9b0 <siprintf>:
 801a9b0:	b40e      	push	{r1, r2, r3}
 801a9b2:	b500      	push	{lr}
 801a9b4:	b09c      	sub	sp, #112	; 0x70
 801a9b6:	ab1d      	add	r3, sp, #116	; 0x74
 801a9b8:	9002      	str	r0, [sp, #8]
 801a9ba:	9006      	str	r0, [sp, #24]
 801a9bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a9c0:	4809      	ldr	r0, [pc, #36]	; (801a9e8 <siprintf+0x38>)
 801a9c2:	9107      	str	r1, [sp, #28]
 801a9c4:	9104      	str	r1, [sp, #16]
 801a9c6:	4909      	ldr	r1, [pc, #36]	; (801a9ec <siprintf+0x3c>)
 801a9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9cc:	9105      	str	r1, [sp, #20]
 801a9ce:	6800      	ldr	r0, [r0, #0]
 801a9d0:	9301      	str	r3, [sp, #4]
 801a9d2:	a902      	add	r1, sp, #8
 801a9d4:	f003 f850 	bl	801da78 <_svfiprintf_r>
 801a9d8:	9b02      	ldr	r3, [sp, #8]
 801a9da:	2200      	movs	r2, #0
 801a9dc:	701a      	strb	r2, [r3, #0]
 801a9de:	b01c      	add	sp, #112	; 0x70
 801a9e0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9e4:	b003      	add	sp, #12
 801a9e6:	4770      	bx	lr
 801a9e8:	200001c4 	.word	0x200001c4
 801a9ec:	ffff0208 	.word	0xffff0208

0801a9f0 <strcpy>:
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a9f6:	f803 2b01 	strb.w	r2, [r3], #1
 801a9fa:	2a00      	cmp	r2, #0
 801a9fc:	d1f9      	bne.n	801a9f2 <strcpy+0x2>
 801a9fe:	4770      	bx	lr

0801aa00 <sulp>:
 801aa00:	b570      	push	{r4, r5, r6, lr}
 801aa02:	4604      	mov	r4, r0
 801aa04:	460d      	mov	r5, r1
 801aa06:	ec45 4b10 	vmov	d0, r4, r5
 801aa0a:	4616      	mov	r6, r2
 801aa0c:	f002 fdca 	bl	801d5a4 <__ulp>
 801aa10:	ec51 0b10 	vmov	r0, r1, d0
 801aa14:	b17e      	cbz	r6, 801aa36 <sulp+0x36>
 801aa16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801aa1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	dd09      	ble.n	801aa36 <sulp+0x36>
 801aa22:	051b      	lsls	r3, r3, #20
 801aa24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801aa28:	2400      	movs	r4, #0
 801aa2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801aa2e:	4622      	mov	r2, r4
 801aa30:	462b      	mov	r3, r5
 801aa32:	f7e5 fdf1 	bl	8000618 <__aeabi_dmul>
 801aa36:	bd70      	pop	{r4, r5, r6, pc}

0801aa38 <_strtod_l>:
 801aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa3c:	461f      	mov	r7, r3
 801aa3e:	b0a1      	sub	sp, #132	; 0x84
 801aa40:	2300      	movs	r3, #0
 801aa42:	4681      	mov	r9, r0
 801aa44:	4638      	mov	r0, r7
 801aa46:	460e      	mov	r6, r1
 801aa48:	9217      	str	r2, [sp, #92]	; 0x5c
 801aa4a:	931c      	str	r3, [sp, #112]	; 0x70
 801aa4c:	f002 fa37 	bl	801cebe <__localeconv_l>
 801aa50:	4680      	mov	r8, r0
 801aa52:	6800      	ldr	r0, [r0, #0]
 801aa54:	f7e5 fbcc 	bl	80001f0 <strlen>
 801aa58:	f04f 0a00 	mov.w	sl, #0
 801aa5c:	4604      	mov	r4, r0
 801aa5e:	f04f 0b00 	mov.w	fp, #0
 801aa62:	961b      	str	r6, [sp, #108]	; 0x6c
 801aa64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aa66:	781a      	ldrb	r2, [r3, #0]
 801aa68:	2a0d      	cmp	r2, #13
 801aa6a:	d832      	bhi.n	801aad2 <_strtod_l+0x9a>
 801aa6c:	2a09      	cmp	r2, #9
 801aa6e:	d236      	bcs.n	801aade <_strtod_l+0xa6>
 801aa70:	2a00      	cmp	r2, #0
 801aa72:	d03e      	beq.n	801aaf2 <_strtod_l+0xba>
 801aa74:	2300      	movs	r3, #0
 801aa76:	930d      	str	r3, [sp, #52]	; 0x34
 801aa78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801aa7a:	782b      	ldrb	r3, [r5, #0]
 801aa7c:	2b30      	cmp	r3, #48	; 0x30
 801aa7e:	f040 80ac 	bne.w	801abda <_strtod_l+0x1a2>
 801aa82:	786b      	ldrb	r3, [r5, #1]
 801aa84:	2b58      	cmp	r3, #88	; 0x58
 801aa86:	d001      	beq.n	801aa8c <_strtod_l+0x54>
 801aa88:	2b78      	cmp	r3, #120	; 0x78
 801aa8a:	d167      	bne.n	801ab5c <_strtod_l+0x124>
 801aa8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa8e:	9301      	str	r3, [sp, #4]
 801aa90:	ab1c      	add	r3, sp, #112	; 0x70
 801aa92:	9300      	str	r3, [sp, #0]
 801aa94:	9702      	str	r7, [sp, #8]
 801aa96:	ab1d      	add	r3, sp, #116	; 0x74
 801aa98:	4a88      	ldr	r2, [pc, #544]	; (801acbc <_strtod_l+0x284>)
 801aa9a:	a91b      	add	r1, sp, #108	; 0x6c
 801aa9c:	4648      	mov	r0, r9
 801aa9e:	f001 ff34 	bl	801c90a <__gethex>
 801aaa2:	f010 0407 	ands.w	r4, r0, #7
 801aaa6:	4606      	mov	r6, r0
 801aaa8:	d005      	beq.n	801aab6 <_strtod_l+0x7e>
 801aaaa:	2c06      	cmp	r4, #6
 801aaac:	d12b      	bne.n	801ab06 <_strtod_l+0xce>
 801aaae:	3501      	adds	r5, #1
 801aab0:	2300      	movs	r3, #0
 801aab2:	951b      	str	r5, [sp, #108]	; 0x6c
 801aab4:	930d      	str	r3, [sp, #52]	; 0x34
 801aab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	f040 859a 	bne.w	801b5f2 <_strtod_l+0xbba>
 801aabe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aac0:	b1e3      	cbz	r3, 801aafc <_strtod_l+0xc4>
 801aac2:	4652      	mov	r2, sl
 801aac4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801aac8:	ec43 2b10 	vmov	d0, r2, r3
 801aacc:	b021      	add	sp, #132	; 0x84
 801aace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aad2:	2a2b      	cmp	r2, #43	; 0x2b
 801aad4:	d015      	beq.n	801ab02 <_strtod_l+0xca>
 801aad6:	2a2d      	cmp	r2, #45	; 0x2d
 801aad8:	d004      	beq.n	801aae4 <_strtod_l+0xac>
 801aada:	2a20      	cmp	r2, #32
 801aadc:	d1ca      	bne.n	801aa74 <_strtod_l+0x3c>
 801aade:	3301      	adds	r3, #1
 801aae0:	931b      	str	r3, [sp, #108]	; 0x6c
 801aae2:	e7bf      	b.n	801aa64 <_strtod_l+0x2c>
 801aae4:	2201      	movs	r2, #1
 801aae6:	920d      	str	r2, [sp, #52]	; 0x34
 801aae8:	1c5a      	adds	r2, r3, #1
 801aaea:	921b      	str	r2, [sp, #108]	; 0x6c
 801aaec:	785b      	ldrb	r3, [r3, #1]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d1c2      	bne.n	801aa78 <_strtod_l+0x40>
 801aaf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aaf4:	961b      	str	r6, [sp, #108]	; 0x6c
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	f040 8579 	bne.w	801b5ee <_strtod_l+0xbb6>
 801aafc:	4652      	mov	r2, sl
 801aafe:	465b      	mov	r3, fp
 801ab00:	e7e2      	b.n	801aac8 <_strtod_l+0x90>
 801ab02:	2200      	movs	r2, #0
 801ab04:	e7ef      	b.n	801aae6 <_strtod_l+0xae>
 801ab06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801ab08:	b13a      	cbz	r2, 801ab1a <_strtod_l+0xe2>
 801ab0a:	2135      	movs	r1, #53	; 0x35
 801ab0c:	a81e      	add	r0, sp, #120	; 0x78
 801ab0e:	f002 fe41 	bl	801d794 <__copybits>
 801ab12:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ab14:	4648      	mov	r0, r9
 801ab16:	f002 faae 	bl	801d076 <_Bfree>
 801ab1a:	3c01      	subs	r4, #1
 801ab1c:	2c04      	cmp	r4, #4
 801ab1e:	d806      	bhi.n	801ab2e <_strtod_l+0xf6>
 801ab20:	e8df f004 	tbb	[pc, r4]
 801ab24:	1714030a 	.word	0x1714030a
 801ab28:	0a          	.byte	0x0a
 801ab29:	00          	.byte	0x00
 801ab2a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801ab2e:	0730      	lsls	r0, r6, #28
 801ab30:	d5c1      	bpl.n	801aab6 <_strtod_l+0x7e>
 801ab32:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ab36:	e7be      	b.n	801aab6 <_strtod_l+0x7e>
 801ab38:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801ab3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ab3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ab42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ab46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ab4a:	e7f0      	b.n	801ab2e <_strtod_l+0xf6>
 801ab4c:	f8df b170 	ldr.w	fp, [pc, #368]	; 801acc0 <_strtod_l+0x288>
 801ab50:	e7ed      	b.n	801ab2e <_strtod_l+0xf6>
 801ab52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ab56:	f04f 3aff 	mov.w	sl, #4294967295
 801ab5a:	e7e8      	b.n	801ab2e <_strtod_l+0xf6>
 801ab5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ab5e:	1c5a      	adds	r2, r3, #1
 801ab60:	921b      	str	r2, [sp, #108]	; 0x6c
 801ab62:	785b      	ldrb	r3, [r3, #1]
 801ab64:	2b30      	cmp	r3, #48	; 0x30
 801ab66:	d0f9      	beq.n	801ab5c <_strtod_l+0x124>
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d0a4      	beq.n	801aab6 <_strtod_l+0x7e>
 801ab6c:	2301      	movs	r3, #1
 801ab6e:	2500      	movs	r5, #0
 801ab70:	9306      	str	r3, [sp, #24]
 801ab72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ab74:	9308      	str	r3, [sp, #32]
 801ab76:	9507      	str	r5, [sp, #28]
 801ab78:	9505      	str	r5, [sp, #20]
 801ab7a:	220a      	movs	r2, #10
 801ab7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ab7e:	7807      	ldrb	r7, [r0, #0]
 801ab80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801ab84:	b2d9      	uxtb	r1, r3
 801ab86:	2909      	cmp	r1, #9
 801ab88:	d929      	bls.n	801abde <_strtod_l+0x1a6>
 801ab8a:	4622      	mov	r2, r4
 801ab8c:	f8d8 1000 	ldr.w	r1, [r8]
 801ab90:	f003 f901 	bl	801dd96 <strncmp>
 801ab94:	2800      	cmp	r0, #0
 801ab96:	d031      	beq.n	801abfc <_strtod_l+0x1c4>
 801ab98:	2000      	movs	r0, #0
 801ab9a:	9c05      	ldr	r4, [sp, #20]
 801ab9c:	9004      	str	r0, [sp, #16]
 801ab9e:	463b      	mov	r3, r7
 801aba0:	4602      	mov	r2, r0
 801aba2:	2b65      	cmp	r3, #101	; 0x65
 801aba4:	d001      	beq.n	801abaa <_strtod_l+0x172>
 801aba6:	2b45      	cmp	r3, #69	; 0x45
 801aba8:	d114      	bne.n	801abd4 <_strtod_l+0x19c>
 801abaa:	b924      	cbnz	r4, 801abb6 <_strtod_l+0x17e>
 801abac:	b910      	cbnz	r0, 801abb4 <_strtod_l+0x17c>
 801abae:	9b06      	ldr	r3, [sp, #24]
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d09e      	beq.n	801aaf2 <_strtod_l+0xba>
 801abb4:	2400      	movs	r4, #0
 801abb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801abb8:	1c73      	adds	r3, r6, #1
 801abba:	931b      	str	r3, [sp, #108]	; 0x6c
 801abbc:	7873      	ldrb	r3, [r6, #1]
 801abbe:	2b2b      	cmp	r3, #43	; 0x2b
 801abc0:	d078      	beq.n	801acb4 <_strtod_l+0x27c>
 801abc2:	2b2d      	cmp	r3, #45	; 0x2d
 801abc4:	d070      	beq.n	801aca8 <_strtod_l+0x270>
 801abc6:	f04f 0c00 	mov.w	ip, #0
 801abca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801abce:	2f09      	cmp	r7, #9
 801abd0:	d97c      	bls.n	801accc <_strtod_l+0x294>
 801abd2:	961b      	str	r6, [sp, #108]	; 0x6c
 801abd4:	f04f 0e00 	mov.w	lr, #0
 801abd8:	e09a      	b.n	801ad10 <_strtod_l+0x2d8>
 801abda:	2300      	movs	r3, #0
 801abdc:	e7c7      	b.n	801ab6e <_strtod_l+0x136>
 801abde:	9905      	ldr	r1, [sp, #20]
 801abe0:	2908      	cmp	r1, #8
 801abe2:	bfdd      	ittte	le
 801abe4:	9907      	ldrle	r1, [sp, #28]
 801abe6:	fb02 3301 	mlale	r3, r2, r1, r3
 801abea:	9307      	strle	r3, [sp, #28]
 801abec:	fb02 3505 	mlagt	r5, r2, r5, r3
 801abf0:	9b05      	ldr	r3, [sp, #20]
 801abf2:	3001      	adds	r0, #1
 801abf4:	3301      	adds	r3, #1
 801abf6:	9305      	str	r3, [sp, #20]
 801abf8:	901b      	str	r0, [sp, #108]	; 0x6c
 801abfa:	e7bf      	b.n	801ab7c <_strtod_l+0x144>
 801abfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801abfe:	191a      	adds	r2, r3, r4
 801ac00:	921b      	str	r2, [sp, #108]	; 0x6c
 801ac02:	9a05      	ldr	r2, [sp, #20]
 801ac04:	5d1b      	ldrb	r3, [r3, r4]
 801ac06:	2a00      	cmp	r2, #0
 801ac08:	d037      	beq.n	801ac7a <_strtod_l+0x242>
 801ac0a:	9c05      	ldr	r4, [sp, #20]
 801ac0c:	4602      	mov	r2, r0
 801ac0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ac12:	2909      	cmp	r1, #9
 801ac14:	d913      	bls.n	801ac3e <_strtod_l+0x206>
 801ac16:	2101      	movs	r1, #1
 801ac18:	9104      	str	r1, [sp, #16]
 801ac1a:	e7c2      	b.n	801aba2 <_strtod_l+0x16a>
 801ac1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ac1e:	1c5a      	adds	r2, r3, #1
 801ac20:	921b      	str	r2, [sp, #108]	; 0x6c
 801ac22:	785b      	ldrb	r3, [r3, #1]
 801ac24:	3001      	adds	r0, #1
 801ac26:	2b30      	cmp	r3, #48	; 0x30
 801ac28:	d0f8      	beq.n	801ac1c <_strtod_l+0x1e4>
 801ac2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801ac2e:	2a08      	cmp	r2, #8
 801ac30:	f200 84e4 	bhi.w	801b5fc <_strtod_l+0xbc4>
 801ac34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ac36:	9208      	str	r2, [sp, #32]
 801ac38:	4602      	mov	r2, r0
 801ac3a:	2000      	movs	r0, #0
 801ac3c:	4604      	mov	r4, r0
 801ac3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801ac42:	f100 0101 	add.w	r1, r0, #1
 801ac46:	d012      	beq.n	801ac6e <_strtod_l+0x236>
 801ac48:	440a      	add	r2, r1
 801ac4a:	eb00 0c04 	add.w	ip, r0, r4
 801ac4e:	4621      	mov	r1, r4
 801ac50:	270a      	movs	r7, #10
 801ac52:	458c      	cmp	ip, r1
 801ac54:	d113      	bne.n	801ac7e <_strtod_l+0x246>
 801ac56:	1821      	adds	r1, r4, r0
 801ac58:	2908      	cmp	r1, #8
 801ac5a:	f104 0401 	add.w	r4, r4, #1
 801ac5e:	4404      	add	r4, r0
 801ac60:	dc19      	bgt.n	801ac96 <_strtod_l+0x25e>
 801ac62:	9b07      	ldr	r3, [sp, #28]
 801ac64:	210a      	movs	r1, #10
 801ac66:	fb01 e303 	mla	r3, r1, r3, lr
 801ac6a:	9307      	str	r3, [sp, #28]
 801ac6c:	2100      	movs	r1, #0
 801ac6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ac70:	1c58      	adds	r0, r3, #1
 801ac72:	901b      	str	r0, [sp, #108]	; 0x6c
 801ac74:	785b      	ldrb	r3, [r3, #1]
 801ac76:	4608      	mov	r0, r1
 801ac78:	e7c9      	b.n	801ac0e <_strtod_l+0x1d6>
 801ac7a:	9805      	ldr	r0, [sp, #20]
 801ac7c:	e7d3      	b.n	801ac26 <_strtod_l+0x1ee>
 801ac7e:	2908      	cmp	r1, #8
 801ac80:	f101 0101 	add.w	r1, r1, #1
 801ac84:	dc03      	bgt.n	801ac8e <_strtod_l+0x256>
 801ac86:	9b07      	ldr	r3, [sp, #28]
 801ac88:	437b      	muls	r3, r7
 801ac8a:	9307      	str	r3, [sp, #28]
 801ac8c:	e7e1      	b.n	801ac52 <_strtod_l+0x21a>
 801ac8e:	2910      	cmp	r1, #16
 801ac90:	bfd8      	it	le
 801ac92:	437d      	mulle	r5, r7
 801ac94:	e7dd      	b.n	801ac52 <_strtod_l+0x21a>
 801ac96:	2c10      	cmp	r4, #16
 801ac98:	bfdc      	itt	le
 801ac9a:	210a      	movle	r1, #10
 801ac9c:	fb01 e505 	mlale	r5, r1, r5, lr
 801aca0:	e7e4      	b.n	801ac6c <_strtod_l+0x234>
 801aca2:	2301      	movs	r3, #1
 801aca4:	9304      	str	r3, [sp, #16]
 801aca6:	e781      	b.n	801abac <_strtod_l+0x174>
 801aca8:	f04f 0c01 	mov.w	ip, #1
 801acac:	1cb3      	adds	r3, r6, #2
 801acae:	931b      	str	r3, [sp, #108]	; 0x6c
 801acb0:	78b3      	ldrb	r3, [r6, #2]
 801acb2:	e78a      	b.n	801abca <_strtod_l+0x192>
 801acb4:	f04f 0c00 	mov.w	ip, #0
 801acb8:	e7f8      	b.n	801acac <_strtod_l+0x274>
 801acba:	bf00      	nop
 801acbc:	0801ea04 	.word	0x0801ea04
 801acc0:	7ff00000 	.word	0x7ff00000
 801acc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801acc6:	1c5f      	adds	r7, r3, #1
 801acc8:	971b      	str	r7, [sp, #108]	; 0x6c
 801acca:	785b      	ldrb	r3, [r3, #1]
 801accc:	2b30      	cmp	r3, #48	; 0x30
 801acce:	d0f9      	beq.n	801acc4 <_strtod_l+0x28c>
 801acd0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801acd4:	2f08      	cmp	r7, #8
 801acd6:	f63f af7d 	bhi.w	801abd4 <_strtod_l+0x19c>
 801acda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801acde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ace0:	930a      	str	r3, [sp, #40]	; 0x28
 801ace2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ace4:	1c5f      	adds	r7, r3, #1
 801ace6:	971b      	str	r7, [sp, #108]	; 0x6c
 801ace8:	785b      	ldrb	r3, [r3, #1]
 801acea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801acee:	f1b8 0f09 	cmp.w	r8, #9
 801acf2:	d937      	bls.n	801ad64 <_strtod_l+0x32c>
 801acf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801acf6:	1a7f      	subs	r7, r7, r1
 801acf8:	2f08      	cmp	r7, #8
 801acfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801acfe:	dc37      	bgt.n	801ad70 <_strtod_l+0x338>
 801ad00:	45be      	cmp	lr, r7
 801ad02:	bfa8      	it	ge
 801ad04:	46be      	movge	lr, r7
 801ad06:	f1bc 0f00 	cmp.w	ip, #0
 801ad0a:	d001      	beq.n	801ad10 <_strtod_l+0x2d8>
 801ad0c:	f1ce 0e00 	rsb	lr, lr, #0
 801ad10:	2c00      	cmp	r4, #0
 801ad12:	d151      	bne.n	801adb8 <_strtod_l+0x380>
 801ad14:	2800      	cmp	r0, #0
 801ad16:	f47f aece 	bne.w	801aab6 <_strtod_l+0x7e>
 801ad1a:	9a06      	ldr	r2, [sp, #24]
 801ad1c:	2a00      	cmp	r2, #0
 801ad1e:	f47f aeca 	bne.w	801aab6 <_strtod_l+0x7e>
 801ad22:	9a04      	ldr	r2, [sp, #16]
 801ad24:	2a00      	cmp	r2, #0
 801ad26:	f47f aee4 	bne.w	801aaf2 <_strtod_l+0xba>
 801ad2a:	2b4e      	cmp	r3, #78	; 0x4e
 801ad2c:	d027      	beq.n	801ad7e <_strtod_l+0x346>
 801ad2e:	dc21      	bgt.n	801ad74 <_strtod_l+0x33c>
 801ad30:	2b49      	cmp	r3, #73	; 0x49
 801ad32:	f47f aede 	bne.w	801aaf2 <_strtod_l+0xba>
 801ad36:	49a0      	ldr	r1, [pc, #640]	; (801afb8 <_strtod_l+0x580>)
 801ad38:	a81b      	add	r0, sp, #108	; 0x6c
 801ad3a:	f002 f819 	bl	801cd70 <__match>
 801ad3e:	2800      	cmp	r0, #0
 801ad40:	f43f aed7 	beq.w	801aaf2 <_strtod_l+0xba>
 801ad44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ad46:	499d      	ldr	r1, [pc, #628]	; (801afbc <_strtod_l+0x584>)
 801ad48:	3b01      	subs	r3, #1
 801ad4a:	a81b      	add	r0, sp, #108	; 0x6c
 801ad4c:	931b      	str	r3, [sp, #108]	; 0x6c
 801ad4e:	f002 f80f 	bl	801cd70 <__match>
 801ad52:	b910      	cbnz	r0, 801ad5a <_strtod_l+0x322>
 801ad54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ad56:	3301      	adds	r3, #1
 801ad58:	931b      	str	r3, [sp, #108]	; 0x6c
 801ad5a:	f8df b274 	ldr.w	fp, [pc, #628]	; 801afd0 <_strtod_l+0x598>
 801ad5e:	f04f 0a00 	mov.w	sl, #0
 801ad62:	e6a8      	b.n	801aab6 <_strtod_l+0x7e>
 801ad64:	210a      	movs	r1, #10
 801ad66:	fb01 3e0e 	mla	lr, r1, lr, r3
 801ad6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ad6e:	e7b8      	b.n	801ace2 <_strtod_l+0x2aa>
 801ad70:	46be      	mov	lr, r7
 801ad72:	e7c8      	b.n	801ad06 <_strtod_l+0x2ce>
 801ad74:	2b69      	cmp	r3, #105	; 0x69
 801ad76:	d0de      	beq.n	801ad36 <_strtod_l+0x2fe>
 801ad78:	2b6e      	cmp	r3, #110	; 0x6e
 801ad7a:	f47f aeba 	bne.w	801aaf2 <_strtod_l+0xba>
 801ad7e:	4990      	ldr	r1, [pc, #576]	; (801afc0 <_strtod_l+0x588>)
 801ad80:	a81b      	add	r0, sp, #108	; 0x6c
 801ad82:	f001 fff5 	bl	801cd70 <__match>
 801ad86:	2800      	cmp	r0, #0
 801ad88:	f43f aeb3 	beq.w	801aaf2 <_strtod_l+0xba>
 801ad8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ad8e:	781b      	ldrb	r3, [r3, #0]
 801ad90:	2b28      	cmp	r3, #40	; 0x28
 801ad92:	d10e      	bne.n	801adb2 <_strtod_l+0x37a>
 801ad94:	aa1e      	add	r2, sp, #120	; 0x78
 801ad96:	498b      	ldr	r1, [pc, #556]	; (801afc4 <_strtod_l+0x58c>)
 801ad98:	a81b      	add	r0, sp, #108	; 0x6c
 801ad9a:	f001 fffd 	bl	801cd98 <__hexnan>
 801ad9e:	2805      	cmp	r0, #5
 801ada0:	d107      	bne.n	801adb2 <_strtod_l+0x37a>
 801ada2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ada4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801ada8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801adac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801adb0:	e681      	b.n	801aab6 <_strtod_l+0x7e>
 801adb2:	f8df b224 	ldr.w	fp, [pc, #548]	; 801afd8 <_strtod_l+0x5a0>
 801adb6:	e7d2      	b.n	801ad5e <_strtod_l+0x326>
 801adb8:	ebae 0302 	sub.w	r3, lr, r2
 801adbc:	9306      	str	r3, [sp, #24]
 801adbe:	9b05      	ldr	r3, [sp, #20]
 801adc0:	9807      	ldr	r0, [sp, #28]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	bf08      	it	eq
 801adc6:	4623      	moveq	r3, r4
 801adc8:	2c10      	cmp	r4, #16
 801adca:	9305      	str	r3, [sp, #20]
 801adcc:	46a0      	mov	r8, r4
 801adce:	bfa8      	it	ge
 801add0:	f04f 0810 	movge.w	r8, #16
 801add4:	f7e5 fba6 	bl	8000524 <__aeabi_ui2d>
 801add8:	2c09      	cmp	r4, #9
 801adda:	4682      	mov	sl, r0
 801addc:	468b      	mov	fp, r1
 801adde:	dc13      	bgt.n	801ae08 <_strtod_l+0x3d0>
 801ade0:	9b06      	ldr	r3, [sp, #24]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	f43f ae67 	beq.w	801aab6 <_strtod_l+0x7e>
 801ade8:	9b06      	ldr	r3, [sp, #24]
 801adea:	dd7a      	ble.n	801aee2 <_strtod_l+0x4aa>
 801adec:	2b16      	cmp	r3, #22
 801adee:	dc61      	bgt.n	801aeb4 <_strtod_l+0x47c>
 801adf0:	4a75      	ldr	r2, [pc, #468]	; (801afc8 <_strtod_l+0x590>)
 801adf2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801adf6:	e9de 0100 	ldrd	r0, r1, [lr]
 801adfa:	4652      	mov	r2, sl
 801adfc:	465b      	mov	r3, fp
 801adfe:	f7e5 fc0b 	bl	8000618 <__aeabi_dmul>
 801ae02:	4682      	mov	sl, r0
 801ae04:	468b      	mov	fp, r1
 801ae06:	e656      	b.n	801aab6 <_strtod_l+0x7e>
 801ae08:	4b6f      	ldr	r3, [pc, #444]	; (801afc8 <_strtod_l+0x590>)
 801ae0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ae0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ae12:	f7e5 fc01 	bl	8000618 <__aeabi_dmul>
 801ae16:	4606      	mov	r6, r0
 801ae18:	4628      	mov	r0, r5
 801ae1a:	460f      	mov	r7, r1
 801ae1c:	f7e5 fb82 	bl	8000524 <__aeabi_ui2d>
 801ae20:	4602      	mov	r2, r0
 801ae22:	460b      	mov	r3, r1
 801ae24:	4630      	mov	r0, r6
 801ae26:	4639      	mov	r1, r7
 801ae28:	f7e5 fa40 	bl	80002ac <__adddf3>
 801ae2c:	2c0f      	cmp	r4, #15
 801ae2e:	4682      	mov	sl, r0
 801ae30:	468b      	mov	fp, r1
 801ae32:	ddd5      	ble.n	801ade0 <_strtod_l+0x3a8>
 801ae34:	9b06      	ldr	r3, [sp, #24]
 801ae36:	eba4 0808 	sub.w	r8, r4, r8
 801ae3a:	4498      	add	r8, r3
 801ae3c:	f1b8 0f00 	cmp.w	r8, #0
 801ae40:	f340 8096 	ble.w	801af70 <_strtod_l+0x538>
 801ae44:	f018 030f 	ands.w	r3, r8, #15
 801ae48:	d00a      	beq.n	801ae60 <_strtod_l+0x428>
 801ae4a:	495f      	ldr	r1, [pc, #380]	; (801afc8 <_strtod_l+0x590>)
 801ae4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ae50:	4652      	mov	r2, sl
 801ae52:	465b      	mov	r3, fp
 801ae54:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae58:	f7e5 fbde 	bl	8000618 <__aeabi_dmul>
 801ae5c:	4682      	mov	sl, r0
 801ae5e:	468b      	mov	fp, r1
 801ae60:	f038 080f 	bics.w	r8, r8, #15
 801ae64:	d073      	beq.n	801af4e <_strtod_l+0x516>
 801ae66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ae6a:	dd47      	ble.n	801aefc <_strtod_l+0x4c4>
 801ae6c:	2400      	movs	r4, #0
 801ae6e:	46a0      	mov	r8, r4
 801ae70:	9407      	str	r4, [sp, #28]
 801ae72:	9405      	str	r4, [sp, #20]
 801ae74:	2322      	movs	r3, #34	; 0x22
 801ae76:	f8df b158 	ldr.w	fp, [pc, #344]	; 801afd0 <_strtod_l+0x598>
 801ae7a:	f8c9 3000 	str.w	r3, [r9]
 801ae7e:	f04f 0a00 	mov.w	sl, #0
 801ae82:	9b07      	ldr	r3, [sp, #28]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	f43f ae16 	beq.w	801aab6 <_strtod_l+0x7e>
 801ae8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ae8c:	4648      	mov	r0, r9
 801ae8e:	f002 f8f2 	bl	801d076 <_Bfree>
 801ae92:	9905      	ldr	r1, [sp, #20]
 801ae94:	4648      	mov	r0, r9
 801ae96:	f002 f8ee 	bl	801d076 <_Bfree>
 801ae9a:	4641      	mov	r1, r8
 801ae9c:	4648      	mov	r0, r9
 801ae9e:	f002 f8ea 	bl	801d076 <_Bfree>
 801aea2:	9907      	ldr	r1, [sp, #28]
 801aea4:	4648      	mov	r0, r9
 801aea6:	f002 f8e6 	bl	801d076 <_Bfree>
 801aeaa:	4621      	mov	r1, r4
 801aeac:	4648      	mov	r0, r9
 801aeae:	f002 f8e2 	bl	801d076 <_Bfree>
 801aeb2:	e600      	b.n	801aab6 <_strtod_l+0x7e>
 801aeb4:	9a06      	ldr	r2, [sp, #24]
 801aeb6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801aeba:	4293      	cmp	r3, r2
 801aebc:	dbba      	blt.n	801ae34 <_strtod_l+0x3fc>
 801aebe:	4d42      	ldr	r5, [pc, #264]	; (801afc8 <_strtod_l+0x590>)
 801aec0:	f1c4 040f 	rsb	r4, r4, #15
 801aec4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 801aec8:	4652      	mov	r2, sl
 801aeca:	465b      	mov	r3, fp
 801aecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aed0:	f7e5 fba2 	bl	8000618 <__aeabi_dmul>
 801aed4:	9b06      	ldr	r3, [sp, #24]
 801aed6:	1b1c      	subs	r4, r3, r4
 801aed8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801aedc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aee0:	e78d      	b.n	801adfe <_strtod_l+0x3c6>
 801aee2:	f113 0f16 	cmn.w	r3, #22
 801aee6:	dba5      	blt.n	801ae34 <_strtod_l+0x3fc>
 801aee8:	4a37      	ldr	r2, [pc, #220]	; (801afc8 <_strtod_l+0x590>)
 801aeea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801aeee:	e9d2 2300 	ldrd	r2, r3, [r2]
 801aef2:	4650      	mov	r0, sl
 801aef4:	4659      	mov	r1, fp
 801aef6:	f7e5 fcb9 	bl	800086c <__aeabi_ddiv>
 801aefa:	e782      	b.n	801ae02 <_strtod_l+0x3ca>
 801aefc:	2300      	movs	r3, #0
 801aefe:	4e33      	ldr	r6, [pc, #204]	; (801afcc <_strtod_l+0x594>)
 801af00:	ea4f 1828 	mov.w	r8, r8, asr #4
 801af04:	4650      	mov	r0, sl
 801af06:	4659      	mov	r1, fp
 801af08:	461d      	mov	r5, r3
 801af0a:	f1b8 0f01 	cmp.w	r8, #1
 801af0e:	dc21      	bgt.n	801af54 <_strtod_l+0x51c>
 801af10:	b10b      	cbz	r3, 801af16 <_strtod_l+0x4de>
 801af12:	4682      	mov	sl, r0
 801af14:	468b      	mov	fp, r1
 801af16:	4b2d      	ldr	r3, [pc, #180]	; (801afcc <_strtod_l+0x594>)
 801af18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801af1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801af20:	4652      	mov	r2, sl
 801af22:	465b      	mov	r3, fp
 801af24:	e9d5 0100 	ldrd	r0, r1, [r5]
 801af28:	f7e5 fb76 	bl	8000618 <__aeabi_dmul>
 801af2c:	4b28      	ldr	r3, [pc, #160]	; (801afd0 <_strtod_l+0x598>)
 801af2e:	460a      	mov	r2, r1
 801af30:	400b      	ands	r3, r1
 801af32:	4928      	ldr	r1, [pc, #160]	; (801afd4 <_strtod_l+0x59c>)
 801af34:	428b      	cmp	r3, r1
 801af36:	4682      	mov	sl, r0
 801af38:	d898      	bhi.n	801ae6c <_strtod_l+0x434>
 801af3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801af3e:	428b      	cmp	r3, r1
 801af40:	bf86      	itte	hi
 801af42:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801afdc <_strtod_l+0x5a4>
 801af46:	f04f 3aff 	movhi.w	sl, #4294967295
 801af4a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801af4e:	2300      	movs	r3, #0
 801af50:	9304      	str	r3, [sp, #16]
 801af52:	e077      	b.n	801b044 <_strtod_l+0x60c>
 801af54:	f018 0f01 	tst.w	r8, #1
 801af58:	d006      	beq.n	801af68 <_strtod_l+0x530>
 801af5a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af62:	f7e5 fb59 	bl	8000618 <__aeabi_dmul>
 801af66:	2301      	movs	r3, #1
 801af68:	3501      	adds	r5, #1
 801af6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801af6e:	e7cc      	b.n	801af0a <_strtod_l+0x4d2>
 801af70:	d0ed      	beq.n	801af4e <_strtod_l+0x516>
 801af72:	f1c8 0800 	rsb	r8, r8, #0
 801af76:	f018 020f 	ands.w	r2, r8, #15
 801af7a:	d00a      	beq.n	801af92 <_strtod_l+0x55a>
 801af7c:	4b12      	ldr	r3, [pc, #72]	; (801afc8 <_strtod_l+0x590>)
 801af7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801af82:	4650      	mov	r0, sl
 801af84:	4659      	mov	r1, fp
 801af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af8a:	f7e5 fc6f 	bl	800086c <__aeabi_ddiv>
 801af8e:	4682      	mov	sl, r0
 801af90:	468b      	mov	fp, r1
 801af92:	ea5f 1828 	movs.w	r8, r8, asr #4
 801af96:	d0da      	beq.n	801af4e <_strtod_l+0x516>
 801af98:	f1b8 0f1f 	cmp.w	r8, #31
 801af9c:	dd20      	ble.n	801afe0 <_strtod_l+0x5a8>
 801af9e:	2400      	movs	r4, #0
 801afa0:	46a0      	mov	r8, r4
 801afa2:	9407      	str	r4, [sp, #28]
 801afa4:	9405      	str	r4, [sp, #20]
 801afa6:	2322      	movs	r3, #34	; 0x22
 801afa8:	f04f 0a00 	mov.w	sl, #0
 801afac:	f04f 0b00 	mov.w	fp, #0
 801afb0:	f8c9 3000 	str.w	r3, [r9]
 801afb4:	e765      	b.n	801ae82 <_strtod_l+0x44a>
 801afb6:	bf00      	nop
 801afb8:	0801e583 	.word	0x0801e583
 801afbc:	0801ea5b 	.word	0x0801ea5b
 801afc0:	0801e9d6 	.word	0x0801e9d6
 801afc4:	0801ea18 	.word	0x0801ea18
 801afc8:	0801eb00 	.word	0x0801eb00
 801afcc:	0801ead8 	.word	0x0801ead8
 801afd0:	7ff00000 	.word	0x7ff00000
 801afd4:	7ca00000 	.word	0x7ca00000
 801afd8:	fff80000 	.word	0xfff80000
 801afdc:	7fefffff 	.word	0x7fefffff
 801afe0:	f018 0310 	ands.w	r3, r8, #16
 801afe4:	bf18      	it	ne
 801afe6:	236a      	movne	r3, #106	; 0x6a
 801afe8:	4da0      	ldr	r5, [pc, #640]	; (801b26c <_strtod_l+0x834>)
 801afea:	9304      	str	r3, [sp, #16]
 801afec:	4650      	mov	r0, sl
 801afee:	4659      	mov	r1, fp
 801aff0:	2300      	movs	r3, #0
 801aff2:	f1b8 0f00 	cmp.w	r8, #0
 801aff6:	f300 810a 	bgt.w	801b20e <_strtod_l+0x7d6>
 801affa:	b10b      	cbz	r3, 801b000 <_strtod_l+0x5c8>
 801affc:	4682      	mov	sl, r0
 801affe:	468b      	mov	fp, r1
 801b000:	9b04      	ldr	r3, [sp, #16]
 801b002:	b1bb      	cbz	r3, 801b034 <_strtod_l+0x5fc>
 801b004:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b008:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	4659      	mov	r1, fp
 801b010:	dd10      	ble.n	801b034 <_strtod_l+0x5fc>
 801b012:	2b1f      	cmp	r3, #31
 801b014:	f340 8107 	ble.w	801b226 <_strtod_l+0x7ee>
 801b018:	2b34      	cmp	r3, #52	; 0x34
 801b01a:	bfde      	ittt	le
 801b01c:	3b20      	suble	r3, #32
 801b01e:	f04f 32ff 	movle.w	r2, #4294967295
 801b022:	fa02 f303 	lslle.w	r3, r2, r3
 801b026:	f04f 0a00 	mov.w	sl, #0
 801b02a:	bfcc      	ite	gt
 801b02c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b030:	ea03 0b01 	andle.w	fp, r3, r1
 801b034:	2200      	movs	r2, #0
 801b036:	2300      	movs	r3, #0
 801b038:	4650      	mov	r0, sl
 801b03a:	4659      	mov	r1, fp
 801b03c:	f7e5 fd54 	bl	8000ae8 <__aeabi_dcmpeq>
 801b040:	2800      	cmp	r0, #0
 801b042:	d1ac      	bne.n	801af9e <_strtod_l+0x566>
 801b044:	9b07      	ldr	r3, [sp, #28]
 801b046:	9300      	str	r3, [sp, #0]
 801b048:	9a05      	ldr	r2, [sp, #20]
 801b04a:	9908      	ldr	r1, [sp, #32]
 801b04c:	4623      	mov	r3, r4
 801b04e:	4648      	mov	r0, r9
 801b050:	f002 f863 	bl	801d11a <__s2b>
 801b054:	9007      	str	r0, [sp, #28]
 801b056:	2800      	cmp	r0, #0
 801b058:	f43f af08 	beq.w	801ae6c <_strtod_l+0x434>
 801b05c:	9a06      	ldr	r2, [sp, #24]
 801b05e:	9b06      	ldr	r3, [sp, #24]
 801b060:	2a00      	cmp	r2, #0
 801b062:	f1c3 0300 	rsb	r3, r3, #0
 801b066:	bfa8      	it	ge
 801b068:	2300      	movge	r3, #0
 801b06a:	930e      	str	r3, [sp, #56]	; 0x38
 801b06c:	2400      	movs	r4, #0
 801b06e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801b072:	9316      	str	r3, [sp, #88]	; 0x58
 801b074:	46a0      	mov	r8, r4
 801b076:	9b07      	ldr	r3, [sp, #28]
 801b078:	4648      	mov	r0, r9
 801b07a:	6859      	ldr	r1, [r3, #4]
 801b07c:	f001 ffc7 	bl	801d00e <_Balloc>
 801b080:	9005      	str	r0, [sp, #20]
 801b082:	2800      	cmp	r0, #0
 801b084:	f43f aef6 	beq.w	801ae74 <_strtod_l+0x43c>
 801b088:	9b07      	ldr	r3, [sp, #28]
 801b08a:	691a      	ldr	r2, [r3, #16]
 801b08c:	3202      	adds	r2, #2
 801b08e:	f103 010c 	add.w	r1, r3, #12
 801b092:	0092      	lsls	r2, r2, #2
 801b094:	300c      	adds	r0, #12
 801b096:	f7fe fbe3 	bl	8019860 <memcpy>
 801b09a:	aa1e      	add	r2, sp, #120	; 0x78
 801b09c:	a91d      	add	r1, sp, #116	; 0x74
 801b09e:	ec4b ab10 	vmov	d0, sl, fp
 801b0a2:	4648      	mov	r0, r9
 801b0a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b0a8:	f002 faf2 	bl	801d690 <__d2b>
 801b0ac:	901c      	str	r0, [sp, #112]	; 0x70
 801b0ae:	2800      	cmp	r0, #0
 801b0b0:	f43f aee0 	beq.w	801ae74 <_strtod_l+0x43c>
 801b0b4:	2101      	movs	r1, #1
 801b0b6:	4648      	mov	r0, r9
 801b0b8:	f002 f8bb 	bl	801d232 <__i2b>
 801b0bc:	4680      	mov	r8, r0
 801b0be:	2800      	cmp	r0, #0
 801b0c0:	f43f aed8 	beq.w	801ae74 <_strtod_l+0x43c>
 801b0c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b0c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b0c8:	2e00      	cmp	r6, #0
 801b0ca:	bfab      	itete	ge
 801b0cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801b0ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801b0d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801b0d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801b0d4:	bfac      	ite	ge
 801b0d6:	18f7      	addge	r7, r6, r3
 801b0d8:	1b9d      	sublt	r5, r3, r6
 801b0da:	9b04      	ldr	r3, [sp, #16]
 801b0dc:	1af6      	subs	r6, r6, r3
 801b0de:	4416      	add	r6, r2
 801b0e0:	4b63      	ldr	r3, [pc, #396]	; (801b270 <_strtod_l+0x838>)
 801b0e2:	3e01      	subs	r6, #1
 801b0e4:	429e      	cmp	r6, r3
 801b0e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b0ea:	f280 80af 	bge.w	801b24c <_strtod_l+0x814>
 801b0ee:	1b9b      	subs	r3, r3, r6
 801b0f0:	2b1f      	cmp	r3, #31
 801b0f2:	eba2 0203 	sub.w	r2, r2, r3
 801b0f6:	f04f 0101 	mov.w	r1, #1
 801b0fa:	f300 809b 	bgt.w	801b234 <_strtod_l+0x7fc>
 801b0fe:	fa01 f303 	lsl.w	r3, r1, r3
 801b102:	930f      	str	r3, [sp, #60]	; 0x3c
 801b104:	2300      	movs	r3, #0
 801b106:	930a      	str	r3, [sp, #40]	; 0x28
 801b108:	18be      	adds	r6, r7, r2
 801b10a:	9b04      	ldr	r3, [sp, #16]
 801b10c:	42b7      	cmp	r7, r6
 801b10e:	4415      	add	r5, r2
 801b110:	441d      	add	r5, r3
 801b112:	463b      	mov	r3, r7
 801b114:	bfa8      	it	ge
 801b116:	4633      	movge	r3, r6
 801b118:	42ab      	cmp	r3, r5
 801b11a:	bfa8      	it	ge
 801b11c:	462b      	movge	r3, r5
 801b11e:	2b00      	cmp	r3, #0
 801b120:	bfc2      	ittt	gt
 801b122:	1af6      	subgt	r6, r6, r3
 801b124:	1aed      	subgt	r5, r5, r3
 801b126:	1aff      	subgt	r7, r7, r3
 801b128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b12a:	b1bb      	cbz	r3, 801b15c <_strtod_l+0x724>
 801b12c:	4641      	mov	r1, r8
 801b12e:	461a      	mov	r2, r3
 801b130:	4648      	mov	r0, r9
 801b132:	f002 f91d 	bl	801d370 <__pow5mult>
 801b136:	4680      	mov	r8, r0
 801b138:	2800      	cmp	r0, #0
 801b13a:	f43f ae9b 	beq.w	801ae74 <_strtod_l+0x43c>
 801b13e:	4601      	mov	r1, r0
 801b140:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b142:	4648      	mov	r0, r9
 801b144:	f002 f87e 	bl	801d244 <__multiply>
 801b148:	900c      	str	r0, [sp, #48]	; 0x30
 801b14a:	2800      	cmp	r0, #0
 801b14c:	f43f ae92 	beq.w	801ae74 <_strtod_l+0x43c>
 801b150:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b152:	4648      	mov	r0, r9
 801b154:	f001 ff8f 	bl	801d076 <_Bfree>
 801b158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b15a:	931c      	str	r3, [sp, #112]	; 0x70
 801b15c:	2e00      	cmp	r6, #0
 801b15e:	dc7a      	bgt.n	801b256 <_strtod_l+0x81e>
 801b160:	9b06      	ldr	r3, [sp, #24]
 801b162:	2b00      	cmp	r3, #0
 801b164:	dd08      	ble.n	801b178 <_strtod_l+0x740>
 801b166:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b168:	9905      	ldr	r1, [sp, #20]
 801b16a:	4648      	mov	r0, r9
 801b16c:	f002 f900 	bl	801d370 <__pow5mult>
 801b170:	9005      	str	r0, [sp, #20]
 801b172:	2800      	cmp	r0, #0
 801b174:	f43f ae7e 	beq.w	801ae74 <_strtod_l+0x43c>
 801b178:	2d00      	cmp	r5, #0
 801b17a:	dd08      	ble.n	801b18e <_strtod_l+0x756>
 801b17c:	462a      	mov	r2, r5
 801b17e:	9905      	ldr	r1, [sp, #20]
 801b180:	4648      	mov	r0, r9
 801b182:	f002 f943 	bl	801d40c <__lshift>
 801b186:	9005      	str	r0, [sp, #20]
 801b188:	2800      	cmp	r0, #0
 801b18a:	f43f ae73 	beq.w	801ae74 <_strtod_l+0x43c>
 801b18e:	2f00      	cmp	r7, #0
 801b190:	dd08      	ble.n	801b1a4 <_strtod_l+0x76c>
 801b192:	4641      	mov	r1, r8
 801b194:	463a      	mov	r2, r7
 801b196:	4648      	mov	r0, r9
 801b198:	f002 f938 	bl	801d40c <__lshift>
 801b19c:	4680      	mov	r8, r0
 801b19e:	2800      	cmp	r0, #0
 801b1a0:	f43f ae68 	beq.w	801ae74 <_strtod_l+0x43c>
 801b1a4:	9a05      	ldr	r2, [sp, #20]
 801b1a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b1a8:	4648      	mov	r0, r9
 801b1aa:	f002 f99d 	bl	801d4e8 <__mdiff>
 801b1ae:	4604      	mov	r4, r0
 801b1b0:	2800      	cmp	r0, #0
 801b1b2:	f43f ae5f 	beq.w	801ae74 <_strtod_l+0x43c>
 801b1b6:	68c3      	ldr	r3, [r0, #12]
 801b1b8:	930c      	str	r3, [sp, #48]	; 0x30
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	60c3      	str	r3, [r0, #12]
 801b1be:	4641      	mov	r1, r8
 801b1c0:	f002 f978 	bl	801d4b4 <__mcmp>
 801b1c4:	2800      	cmp	r0, #0
 801b1c6:	da55      	bge.n	801b274 <_strtod_l+0x83c>
 801b1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b1ca:	b9e3      	cbnz	r3, 801b206 <_strtod_l+0x7ce>
 801b1cc:	f1ba 0f00 	cmp.w	sl, #0
 801b1d0:	d119      	bne.n	801b206 <_strtod_l+0x7ce>
 801b1d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b1d6:	b9b3      	cbnz	r3, 801b206 <_strtod_l+0x7ce>
 801b1d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b1dc:	0d1b      	lsrs	r3, r3, #20
 801b1de:	051b      	lsls	r3, r3, #20
 801b1e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b1e4:	d90f      	bls.n	801b206 <_strtod_l+0x7ce>
 801b1e6:	6963      	ldr	r3, [r4, #20]
 801b1e8:	b913      	cbnz	r3, 801b1f0 <_strtod_l+0x7b8>
 801b1ea:	6923      	ldr	r3, [r4, #16]
 801b1ec:	2b01      	cmp	r3, #1
 801b1ee:	dd0a      	ble.n	801b206 <_strtod_l+0x7ce>
 801b1f0:	4621      	mov	r1, r4
 801b1f2:	2201      	movs	r2, #1
 801b1f4:	4648      	mov	r0, r9
 801b1f6:	f002 f909 	bl	801d40c <__lshift>
 801b1fa:	4641      	mov	r1, r8
 801b1fc:	4604      	mov	r4, r0
 801b1fe:	f002 f959 	bl	801d4b4 <__mcmp>
 801b202:	2800      	cmp	r0, #0
 801b204:	dc67      	bgt.n	801b2d6 <_strtod_l+0x89e>
 801b206:	9b04      	ldr	r3, [sp, #16]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d171      	bne.n	801b2f0 <_strtod_l+0x8b8>
 801b20c:	e63d      	b.n	801ae8a <_strtod_l+0x452>
 801b20e:	f018 0f01 	tst.w	r8, #1
 801b212:	d004      	beq.n	801b21e <_strtod_l+0x7e6>
 801b214:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b218:	f7e5 f9fe 	bl	8000618 <__aeabi_dmul>
 801b21c:	2301      	movs	r3, #1
 801b21e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b222:	3508      	adds	r5, #8
 801b224:	e6e5      	b.n	801aff2 <_strtod_l+0x5ba>
 801b226:	f04f 32ff 	mov.w	r2, #4294967295
 801b22a:	fa02 f303 	lsl.w	r3, r2, r3
 801b22e:	ea03 0a0a 	and.w	sl, r3, sl
 801b232:	e6ff      	b.n	801b034 <_strtod_l+0x5fc>
 801b234:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801b238:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801b23c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801b240:	36e2      	adds	r6, #226	; 0xe2
 801b242:	fa01 f306 	lsl.w	r3, r1, r6
 801b246:	930a      	str	r3, [sp, #40]	; 0x28
 801b248:	910f      	str	r1, [sp, #60]	; 0x3c
 801b24a:	e75d      	b.n	801b108 <_strtod_l+0x6d0>
 801b24c:	2300      	movs	r3, #0
 801b24e:	930a      	str	r3, [sp, #40]	; 0x28
 801b250:	2301      	movs	r3, #1
 801b252:	930f      	str	r3, [sp, #60]	; 0x3c
 801b254:	e758      	b.n	801b108 <_strtod_l+0x6d0>
 801b256:	4632      	mov	r2, r6
 801b258:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b25a:	4648      	mov	r0, r9
 801b25c:	f002 f8d6 	bl	801d40c <__lshift>
 801b260:	901c      	str	r0, [sp, #112]	; 0x70
 801b262:	2800      	cmp	r0, #0
 801b264:	f47f af7c 	bne.w	801b160 <_strtod_l+0x728>
 801b268:	e604      	b.n	801ae74 <_strtod_l+0x43c>
 801b26a:	bf00      	nop
 801b26c:	0801ea30 	.word	0x0801ea30
 801b270:	fffffc02 	.word	0xfffffc02
 801b274:	465d      	mov	r5, fp
 801b276:	f040 8086 	bne.w	801b386 <_strtod_l+0x94e>
 801b27a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b27c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b280:	b32a      	cbz	r2, 801b2ce <_strtod_l+0x896>
 801b282:	4aaf      	ldr	r2, [pc, #700]	; (801b540 <_strtod_l+0xb08>)
 801b284:	4293      	cmp	r3, r2
 801b286:	d153      	bne.n	801b330 <_strtod_l+0x8f8>
 801b288:	9b04      	ldr	r3, [sp, #16]
 801b28a:	4650      	mov	r0, sl
 801b28c:	b1d3      	cbz	r3, 801b2c4 <_strtod_l+0x88c>
 801b28e:	4aad      	ldr	r2, [pc, #692]	; (801b544 <_strtod_l+0xb0c>)
 801b290:	402a      	ands	r2, r5
 801b292:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b296:	f04f 31ff 	mov.w	r1, #4294967295
 801b29a:	d816      	bhi.n	801b2ca <_strtod_l+0x892>
 801b29c:	0d12      	lsrs	r2, r2, #20
 801b29e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b2a2:	fa01 f303 	lsl.w	r3, r1, r3
 801b2a6:	4298      	cmp	r0, r3
 801b2a8:	d142      	bne.n	801b330 <_strtod_l+0x8f8>
 801b2aa:	4ba7      	ldr	r3, [pc, #668]	; (801b548 <_strtod_l+0xb10>)
 801b2ac:	429d      	cmp	r5, r3
 801b2ae:	d102      	bne.n	801b2b6 <_strtod_l+0x87e>
 801b2b0:	3001      	adds	r0, #1
 801b2b2:	f43f addf 	beq.w	801ae74 <_strtod_l+0x43c>
 801b2b6:	4ba3      	ldr	r3, [pc, #652]	; (801b544 <_strtod_l+0xb0c>)
 801b2b8:	402b      	ands	r3, r5
 801b2ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b2be:	f04f 0a00 	mov.w	sl, #0
 801b2c2:	e7a0      	b.n	801b206 <_strtod_l+0x7ce>
 801b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 801b2c8:	e7ed      	b.n	801b2a6 <_strtod_l+0x86e>
 801b2ca:	460b      	mov	r3, r1
 801b2cc:	e7eb      	b.n	801b2a6 <_strtod_l+0x86e>
 801b2ce:	bb7b      	cbnz	r3, 801b330 <_strtod_l+0x8f8>
 801b2d0:	f1ba 0f00 	cmp.w	sl, #0
 801b2d4:	d12c      	bne.n	801b330 <_strtod_l+0x8f8>
 801b2d6:	9904      	ldr	r1, [sp, #16]
 801b2d8:	4a9a      	ldr	r2, [pc, #616]	; (801b544 <_strtod_l+0xb0c>)
 801b2da:	465b      	mov	r3, fp
 801b2dc:	b1f1      	cbz	r1, 801b31c <_strtod_l+0x8e4>
 801b2de:	ea02 010b 	and.w	r1, r2, fp
 801b2e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b2e6:	dc19      	bgt.n	801b31c <_strtod_l+0x8e4>
 801b2e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b2ec:	f77f ae5b 	ble.w	801afa6 <_strtod_l+0x56e>
 801b2f0:	4a96      	ldr	r2, [pc, #600]	; (801b54c <_strtod_l+0xb14>)
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801b2f8:	4650      	mov	r0, sl
 801b2fa:	4659      	mov	r1, fp
 801b2fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b300:	f7e5 f98a 	bl	8000618 <__aeabi_dmul>
 801b304:	4682      	mov	sl, r0
 801b306:	468b      	mov	fp, r1
 801b308:	2900      	cmp	r1, #0
 801b30a:	f47f adbe 	bne.w	801ae8a <_strtod_l+0x452>
 801b30e:	2800      	cmp	r0, #0
 801b310:	f47f adbb 	bne.w	801ae8a <_strtod_l+0x452>
 801b314:	2322      	movs	r3, #34	; 0x22
 801b316:	f8c9 3000 	str.w	r3, [r9]
 801b31a:	e5b6      	b.n	801ae8a <_strtod_l+0x452>
 801b31c:	4013      	ands	r3, r2
 801b31e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b322:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b326:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b32a:	f04f 3aff 	mov.w	sl, #4294967295
 801b32e:	e76a      	b.n	801b206 <_strtod_l+0x7ce>
 801b330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b332:	b193      	cbz	r3, 801b35a <_strtod_l+0x922>
 801b334:	422b      	tst	r3, r5
 801b336:	f43f af66 	beq.w	801b206 <_strtod_l+0x7ce>
 801b33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b33c:	9a04      	ldr	r2, [sp, #16]
 801b33e:	4650      	mov	r0, sl
 801b340:	4659      	mov	r1, fp
 801b342:	b173      	cbz	r3, 801b362 <_strtod_l+0x92a>
 801b344:	f7ff fb5c 	bl	801aa00 <sulp>
 801b348:	4602      	mov	r2, r0
 801b34a:	460b      	mov	r3, r1
 801b34c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b350:	f7e4 ffac 	bl	80002ac <__adddf3>
 801b354:	4682      	mov	sl, r0
 801b356:	468b      	mov	fp, r1
 801b358:	e755      	b.n	801b206 <_strtod_l+0x7ce>
 801b35a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b35c:	ea13 0f0a 	tst.w	r3, sl
 801b360:	e7e9      	b.n	801b336 <_strtod_l+0x8fe>
 801b362:	f7ff fb4d 	bl	801aa00 <sulp>
 801b366:	4602      	mov	r2, r0
 801b368:	460b      	mov	r3, r1
 801b36a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b36e:	f7e4 ff9b 	bl	80002a8 <__aeabi_dsub>
 801b372:	2200      	movs	r2, #0
 801b374:	2300      	movs	r3, #0
 801b376:	4682      	mov	sl, r0
 801b378:	468b      	mov	fp, r1
 801b37a:	f7e5 fbb5 	bl	8000ae8 <__aeabi_dcmpeq>
 801b37e:	2800      	cmp	r0, #0
 801b380:	f47f ae11 	bne.w	801afa6 <_strtod_l+0x56e>
 801b384:	e73f      	b.n	801b206 <_strtod_l+0x7ce>
 801b386:	4641      	mov	r1, r8
 801b388:	4620      	mov	r0, r4
 801b38a:	f002 f9d0 	bl	801d72e <__ratio>
 801b38e:	ec57 6b10 	vmov	r6, r7, d0
 801b392:	2200      	movs	r2, #0
 801b394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b398:	ee10 0a10 	vmov	r0, s0
 801b39c:	4639      	mov	r1, r7
 801b39e:	f7e5 fbb7 	bl	8000b10 <__aeabi_dcmple>
 801b3a2:	2800      	cmp	r0, #0
 801b3a4:	d077      	beq.n	801b496 <_strtod_l+0xa5e>
 801b3a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d04a      	beq.n	801b442 <_strtod_l+0xa0a>
 801b3ac:	4b68      	ldr	r3, [pc, #416]	; (801b550 <_strtod_l+0xb18>)
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801b3b4:	4f66      	ldr	r7, [pc, #408]	; (801b550 <_strtod_l+0xb18>)
 801b3b6:	2600      	movs	r6, #0
 801b3b8:	4b62      	ldr	r3, [pc, #392]	; (801b544 <_strtod_l+0xb0c>)
 801b3ba:	402b      	ands	r3, r5
 801b3bc:	930f      	str	r3, [sp, #60]	; 0x3c
 801b3be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b3c0:	4b64      	ldr	r3, [pc, #400]	; (801b554 <_strtod_l+0xb1c>)
 801b3c2:	429a      	cmp	r2, r3
 801b3c4:	f040 80ce 	bne.w	801b564 <_strtod_l+0xb2c>
 801b3c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b3cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b3d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801b3d4:	ec4b ab10 	vmov	d0, sl, fp
 801b3d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801b3dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801b3e0:	f002 f8e0 	bl	801d5a4 <__ulp>
 801b3e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b3e8:	ec53 2b10 	vmov	r2, r3, d0
 801b3ec:	f7e5 f914 	bl	8000618 <__aeabi_dmul>
 801b3f0:	4652      	mov	r2, sl
 801b3f2:	465b      	mov	r3, fp
 801b3f4:	f7e4 ff5a 	bl	80002ac <__adddf3>
 801b3f8:	460b      	mov	r3, r1
 801b3fa:	4952      	ldr	r1, [pc, #328]	; (801b544 <_strtod_l+0xb0c>)
 801b3fc:	4a56      	ldr	r2, [pc, #344]	; (801b558 <_strtod_l+0xb20>)
 801b3fe:	4019      	ands	r1, r3
 801b400:	4291      	cmp	r1, r2
 801b402:	4682      	mov	sl, r0
 801b404:	d95b      	bls.n	801b4be <_strtod_l+0xa86>
 801b406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b408:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b40c:	4293      	cmp	r3, r2
 801b40e:	d103      	bne.n	801b418 <_strtod_l+0x9e0>
 801b410:	9b08      	ldr	r3, [sp, #32]
 801b412:	3301      	adds	r3, #1
 801b414:	f43f ad2e 	beq.w	801ae74 <_strtod_l+0x43c>
 801b418:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801b548 <_strtod_l+0xb10>
 801b41c:	f04f 3aff 	mov.w	sl, #4294967295
 801b420:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b422:	4648      	mov	r0, r9
 801b424:	f001 fe27 	bl	801d076 <_Bfree>
 801b428:	9905      	ldr	r1, [sp, #20]
 801b42a:	4648      	mov	r0, r9
 801b42c:	f001 fe23 	bl	801d076 <_Bfree>
 801b430:	4641      	mov	r1, r8
 801b432:	4648      	mov	r0, r9
 801b434:	f001 fe1f 	bl	801d076 <_Bfree>
 801b438:	4621      	mov	r1, r4
 801b43a:	4648      	mov	r0, r9
 801b43c:	f001 fe1b 	bl	801d076 <_Bfree>
 801b440:	e619      	b.n	801b076 <_strtod_l+0x63e>
 801b442:	f1ba 0f00 	cmp.w	sl, #0
 801b446:	d11a      	bne.n	801b47e <_strtod_l+0xa46>
 801b448:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b44c:	b9eb      	cbnz	r3, 801b48a <_strtod_l+0xa52>
 801b44e:	2200      	movs	r2, #0
 801b450:	4b3f      	ldr	r3, [pc, #252]	; (801b550 <_strtod_l+0xb18>)
 801b452:	4630      	mov	r0, r6
 801b454:	4639      	mov	r1, r7
 801b456:	f7e5 fb51 	bl	8000afc <__aeabi_dcmplt>
 801b45a:	b9c8      	cbnz	r0, 801b490 <_strtod_l+0xa58>
 801b45c:	4630      	mov	r0, r6
 801b45e:	4639      	mov	r1, r7
 801b460:	2200      	movs	r2, #0
 801b462:	4b3e      	ldr	r3, [pc, #248]	; (801b55c <_strtod_l+0xb24>)
 801b464:	f7e5 f8d8 	bl	8000618 <__aeabi_dmul>
 801b468:	4606      	mov	r6, r0
 801b46a:	460f      	mov	r7, r1
 801b46c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801b470:	9618      	str	r6, [sp, #96]	; 0x60
 801b472:	9319      	str	r3, [sp, #100]	; 0x64
 801b474:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801b478:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801b47c:	e79c      	b.n	801b3b8 <_strtod_l+0x980>
 801b47e:	f1ba 0f01 	cmp.w	sl, #1
 801b482:	d102      	bne.n	801b48a <_strtod_l+0xa52>
 801b484:	2d00      	cmp	r5, #0
 801b486:	f43f ad8e 	beq.w	801afa6 <_strtod_l+0x56e>
 801b48a:	2200      	movs	r2, #0
 801b48c:	4b34      	ldr	r3, [pc, #208]	; (801b560 <_strtod_l+0xb28>)
 801b48e:	e78f      	b.n	801b3b0 <_strtod_l+0x978>
 801b490:	2600      	movs	r6, #0
 801b492:	4f32      	ldr	r7, [pc, #200]	; (801b55c <_strtod_l+0xb24>)
 801b494:	e7ea      	b.n	801b46c <_strtod_l+0xa34>
 801b496:	4b31      	ldr	r3, [pc, #196]	; (801b55c <_strtod_l+0xb24>)
 801b498:	4630      	mov	r0, r6
 801b49a:	4639      	mov	r1, r7
 801b49c:	2200      	movs	r2, #0
 801b49e:	f7e5 f8bb 	bl	8000618 <__aeabi_dmul>
 801b4a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4a4:	4606      	mov	r6, r0
 801b4a6:	460f      	mov	r7, r1
 801b4a8:	b933      	cbnz	r3, 801b4b8 <_strtod_l+0xa80>
 801b4aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b4ae:	9010      	str	r0, [sp, #64]	; 0x40
 801b4b0:	9311      	str	r3, [sp, #68]	; 0x44
 801b4b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b4b6:	e7df      	b.n	801b478 <_strtod_l+0xa40>
 801b4b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801b4bc:	e7f9      	b.n	801b4b2 <_strtod_l+0xa7a>
 801b4be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b4c2:	9b04      	ldr	r3, [sp, #16]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d1ab      	bne.n	801b420 <_strtod_l+0x9e8>
 801b4c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b4cc:	0d1b      	lsrs	r3, r3, #20
 801b4ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b4d0:	051b      	lsls	r3, r3, #20
 801b4d2:	429a      	cmp	r2, r3
 801b4d4:	465d      	mov	r5, fp
 801b4d6:	d1a3      	bne.n	801b420 <_strtod_l+0x9e8>
 801b4d8:	4639      	mov	r1, r7
 801b4da:	4630      	mov	r0, r6
 801b4dc:	f7e5 fb4c 	bl	8000b78 <__aeabi_d2iz>
 801b4e0:	f7e5 f830 	bl	8000544 <__aeabi_i2d>
 801b4e4:	460b      	mov	r3, r1
 801b4e6:	4602      	mov	r2, r0
 801b4e8:	4639      	mov	r1, r7
 801b4ea:	4630      	mov	r0, r6
 801b4ec:	f7e4 fedc 	bl	80002a8 <__aeabi_dsub>
 801b4f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4f2:	4606      	mov	r6, r0
 801b4f4:	460f      	mov	r7, r1
 801b4f6:	b933      	cbnz	r3, 801b506 <_strtod_l+0xace>
 801b4f8:	f1ba 0f00 	cmp.w	sl, #0
 801b4fc:	d103      	bne.n	801b506 <_strtod_l+0xace>
 801b4fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801b502:	2d00      	cmp	r5, #0
 801b504:	d06d      	beq.n	801b5e2 <_strtod_l+0xbaa>
 801b506:	a30a      	add	r3, pc, #40	; (adr r3, 801b530 <_strtod_l+0xaf8>)
 801b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b50c:	4630      	mov	r0, r6
 801b50e:	4639      	mov	r1, r7
 801b510:	f7e5 faf4 	bl	8000afc <__aeabi_dcmplt>
 801b514:	2800      	cmp	r0, #0
 801b516:	f47f acb8 	bne.w	801ae8a <_strtod_l+0x452>
 801b51a:	a307      	add	r3, pc, #28	; (adr r3, 801b538 <_strtod_l+0xb00>)
 801b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b520:	4630      	mov	r0, r6
 801b522:	4639      	mov	r1, r7
 801b524:	f7e5 fb08 	bl	8000b38 <__aeabi_dcmpgt>
 801b528:	2800      	cmp	r0, #0
 801b52a:	f43f af79 	beq.w	801b420 <_strtod_l+0x9e8>
 801b52e:	e4ac      	b.n	801ae8a <_strtod_l+0x452>
 801b530:	94a03595 	.word	0x94a03595
 801b534:	3fdfffff 	.word	0x3fdfffff
 801b538:	35afe535 	.word	0x35afe535
 801b53c:	3fe00000 	.word	0x3fe00000
 801b540:	000fffff 	.word	0x000fffff
 801b544:	7ff00000 	.word	0x7ff00000
 801b548:	7fefffff 	.word	0x7fefffff
 801b54c:	39500000 	.word	0x39500000
 801b550:	3ff00000 	.word	0x3ff00000
 801b554:	7fe00000 	.word	0x7fe00000
 801b558:	7c9fffff 	.word	0x7c9fffff
 801b55c:	3fe00000 	.word	0x3fe00000
 801b560:	bff00000 	.word	0xbff00000
 801b564:	9b04      	ldr	r3, [sp, #16]
 801b566:	b333      	cbz	r3, 801b5b6 <_strtod_l+0xb7e>
 801b568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b56a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b56e:	d822      	bhi.n	801b5b6 <_strtod_l+0xb7e>
 801b570:	a327      	add	r3, pc, #156	; (adr r3, 801b610 <_strtod_l+0xbd8>)
 801b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b576:	4630      	mov	r0, r6
 801b578:	4639      	mov	r1, r7
 801b57a:	f7e5 fac9 	bl	8000b10 <__aeabi_dcmple>
 801b57e:	b1a0      	cbz	r0, 801b5aa <_strtod_l+0xb72>
 801b580:	4639      	mov	r1, r7
 801b582:	4630      	mov	r0, r6
 801b584:	f7e5 fb20 	bl	8000bc8 <__aeabi_d2uiz>
 801b588:	2800      	cmp	r0, #0
 801b58a:	bf08      	it	eq
 801b58c:	2001      	moveq	r0, #1
 801b58e:	f7e4 ffc9 	bl	8000524 <__aeabi_ui2d>
 801b592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b594:	4606      	mov	r6, r0
 801b596:	460f      	mov	r7, r1
 801b598:	bb03      	cbnz	r3, 801b5dc <_strtod_l+0xba4>
 801b59a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b59e:	9012      	str	r0, [sp, #72]	; 0x48
 801b5a0:	9313      	str	r3, [sp, #76]	; 0x4c
 801b5a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801b5a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801b5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b5ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b5ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b5b2:	1a9b      	subs	r3, r3, r2
 801b5b4:	930b      	str	r3, [sp, #44]	; 0x2c
 801b5b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 801b5ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801b5be:	f001 fff1 	bl	801d5a4 <__ulp>
 801b5c2:	4650      	mov	r0, sl
 801b5c4:	ec53 2b10 	vmov	r2, r3, d0
 801b5c8:	4659      	mov	r1, fp
 801b5ca:	f7e5 f825 	bl	8000618 <__aeabi_dmul>
 801b5ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b5d2:	f7e4 fe6b 	bl	80002ac <__adddf3>
 801b5d6:	4682      	mov	sl, r0
 801b5d8:	468b      	mov	fp, r1
 801b5da:	e772      	b.n	801b4c2 <_strtod_l+0xa8a>
 801b5dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801b5e0:	e7df      	b.n	801b5a2 <_strtod_l+0xb6a>
 801b5e2:	a30d      	add	r3, pc, #52	; (adr r3, 801b618 <_strtod_l+0xbe0>)
 801b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e8:	f7e5 fa88 	bl	8000afc <__aeabi_dcmplt>
 801b5ec:	e79c      	b.n	801b528 <_strtod_l+0xaf0>
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	930d      	str	r3, [sp, #52]	; 0x34
 801b5f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b5f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b5f6:	6013      	str	r3, [r2, #0]
 801b5f8:	f7ff ba61 	b.w	801aabe <_strtod_l+0x86>
 801b5fc:	2b65      	cmp	r3, #101	; 0x65
 801b5fe:	f04f 0200 	mov.w	r2, #0
 801b602:	f43f ab4e 	beq.w	801aca2 <_strtod_l+0x26a>
 801b606:	2101      	movs	r1, #1
 801b608:	4614      	mov	r4, r2
 801b60a:	9104      	str	r1, [sp, #16]
 801b60c:	f7ff bacb 	b.w	801aba6 <_strtod_l+0x16e>
 801b610:	ffc00000 	.word	0xffc00000
 801b614:	41dfffff 	.word	0x41dfffff
 801b618:	94a03595 	.word	0x94a03595
 801b61c:	3fcfffff 	.word	0x3fcfffff

0801b620 <_strtod_r>:
 801b620:	4b05      	ldr	r3, [pc, #20]	; (801b638 <_strtod_r+0x18>)
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	b410      	push	{r4}
 801b626:	6a1b      	ldr	r3, [r3, #32]
 801b628:	4c04      	ldr	r4, [pc, #16]	; (801b63c <_strtod_r+0x1c>)
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	bf08      	it	eq
 801b62e:	4623      	moveq	r3, r4
 801b630:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b634:	f7ff ba00 	b.w	801aa38 <_strtod_l>
 801b638:	200001c4 	.word	0x200001c4
 801b63c:	20000228 	.word	0x20000228

0801b640 <_strtol_l.isra.0>:
 801b640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b644:	4680      	mov	r8, r0
 801b646:	4689      	mov	r9, r1
 801b648:	4692      	mov	sl, r2
 801b64a:	461e      	mov	r6, r3
 801b64c:	460f      	mov	r7, r1
 801b64e:	463d      	mov	r5, r7
 801b650:	9808      	ldr	r0, [sp, #32]
 801b652:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b656:	f001 fc2f 	bl	801ceb8 <__locale_ctype_ptr_l>
 801b65a:	4420      	add	r0, r4
 801b65c:	7843      	ldrb	r3, [r0, #1]
 801b65e:	f013 0308 	ands.w	r3, r3, #8
 801b662:	d132      	bne.n	801b6ca <_strtol_l.isra.0+0x8a>
 801b664:	2c2d      	cmp	r4, #45	; 0x2d
 801b666:	d132      	bne.n	801b6ce <_strtol_l.isra.0+0x8e>
 801b668:	787c      	ldrb	r4, [r7, #1]
 801b66a:	1cbd      	adds	r5, r7, #2
 801b66c:	2201      	movs	r2, #1
 801b66e:	2e00      	cmp	r6, #0
 801b670:	d05d      	beq.n	801b72e <_strtol_l.isra.0+0xee>
 801b672:	2e10      	cmp	r6, #16
 801b674:	d109      	bne.n	801b68a <_strtol_l.isra.0+0x4a>
 801b676:	2c30      	cmp	r4, #48	; 0x30
 801b678:	d107      	bne.n	801b68a <_strtol_l.isra.0+0x4a>
 801b67a:	782b      	ldrb	r3, [r5, #0]
 801b67c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b680:	2b58      	cmp	r3, #88	; 0x58
 801b682:	d14f      	bne.n	801b724 <_strtol_l.isra.0+0xe4>
 801b684:	786c      	ldrb	r4, [r5, #1]
 801b686:	2610      	movs	r6, #16
 801b688:	3502      	adds	r5, #2
 801b68a:	2a00      	cmp	r2, #0
 801b68c:	bf14      	ite	ne
 801b68e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801b692:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801b696:	2700      	movs	r7, #0
 801b698:	fbb1 fcf6 	udiv	ip, r1, r6
 801b69c:	4638      	mov	r0, r7
 801b69e:	fb06 1e1c 	mls	lr, r6, ip, r1
 801b6a2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b6a6:	2b09      	cmp	r3, #9
 801b6a8:	d817      	bhi.n	801b6da <_strtol_l.isra.0+0x9a>
 801b6aa:	461c      	mov	r4, r3
 801b6ac:	42a6      	cmp	r6, r4
 801b6ae:	dd23      	ble.n	801b6f8 <_strtol_l.isra.0+0xb8>
 801b6b0:	1c7b      	adds	r3, r7, #1
 801b6b2:	d007      	beq.n	801b6c4 <_strtol_l.isra.0+0x84>
 801b6b4:	4584      	cmp	ip, r0
 801b6b6:	d31c      	bcc.n	801b6f2 <_strtol_l.isra.0+0xb2>
 801b6b8:	d101      	bne.n	801b6be <_strtol_l.isra.0+0x7e>
 801b6ba:	45a6      	cmp	lr, r4
 801b6bc:	db19      	blt.n	801b6f2 <_strtol_l.isra.0+0xb2>
 801b6be:	fb00 4006 	mla	r0, r0, r6, r4
 801b6c2:	2701      	movs	r7, #1
 801b6c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b6c8:	e7eb      	b.n	801b6a2 <_strtol_l.isra.0+0x62>
 801b6ca:	462f      	mov	r7, r5
 801b6cc:	e7bf      	b.n	801b64e <_strtol_l.isra.0+0xe>
 801b6ce:	2c2b      	cmp	r4, #43	; 0x2b
 801b6d0:	bf04      	itt	eq
 801b6d2:	1cbd      	addeq	r5, r7, #2
 801b6d4:	787c      	ldrbeq	r4, [r7, #1]
 801b6d6:	461a      	mov	r2, r3
 801b6d8:	e7c9      	b.n	801b66e <_strtol_l.isra.0+0x2e>
 801b6da:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801b6de:	2b19      	cmp	r3, #25
 801b6e0:	d801      	bhi.n	801b6e6 <_strtol_l.isra.0+0xa6>
 801b6e2:	3c37      	subs	r4, #55	; 0x37
 801b6e4:	e7e2      	b.n	801b6ac <_strtol_l.isra.0+0x6c>
 801b6e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801b6ea:	2b19      	cmp	r3, #25
 801b6ec:	d804      	bhi.n	801b6f8 <_strtol_l.isra.0+0xb8>
 801b6ee:	3c57      	subs	r4, #87	; 0x57
 801b6f0:	e7dc      	b.n	801b6ac <_strtol_l.isra.0+0x6c>
 801b6f2:	f04f 37ff 	mov.w	r7, #4294967295
 801b6f6:	e7e5      	b.n	801b6c4 <_strtol_l.isra.0+0x84>
 801b6f8:	1c7b      	adds	r3, r7, #1
 801b6fa:	d108      	bne.n	801b70e <_strtol_l.isra.0+0xce>
 801b6fc:	2322      	movs	r3, #34	; 0x22
 801b6fe:	f8c8 3000 	str.w	r3, [r8]
 801b702:	4608      	mov	r0, r1
 801b704:	f1ba 0f00 	cmp.w	sl, #0
 801b708:	d107      	bne.n	801b71a <_strtol_l.isra.0+0xda>
 801b70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b70e:	b102      	cbz	r2, 801b712 <_strtol_l.isra.0+0xd2>
 801b710:	4240      	negs	r0, r0
 801b712:	f1ba 0f00 	cmp.w	sl, #0
 801b716:	d0f8      	beq.n	801b70a <_strtol_l.isra.0+0xca>
 801b718:	b10f      	cbz	r7, 801b71e <_strtol_l.isra.0+0xde>
 801b71a:	f105 39ff 	add.w	r9, r5, #4294967295
 801b71e:	f8ca 9000 	str.w	r9, [sl]
 801b722:	e7f2      	b.n	801b70a <_strtol_l.isra.0+0xca>
 801b724:	2430      	movs	r4, #48	; 0x30
 801b726:	2e00      	cmp	r6, #0
 801b728:	d1af      	bne.n	801b68a <_strtol_l.isra.0+0x4a>
 801b72a:	2608      	movs	r6, #8
 801b72c:	e7ad      	b.n	801b68a <_strtol_l.isra.0+0x4a>
 801b72e:	2c30      	cmp	r4, #48	; 0x30
 801b730:	d0a3      	beq.n	801b67a <_strtol_l.isra.0+0x3a>
 801b732:	260a      	movs	r6, #10
 801b734:	e7a9      	b.n	801b68a <_strtol_l.isra.0+0x4a>
	...

0801b738 <_strtol_r>:
 801b738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b73a:	4c06      	ldr	r4, [pc, #24]	; (801b754 <_strtol_r+0x1c>)
 801b73c:	4d06      	ldr	r5, [pc, #24]	; (801b758 <_strtol_r+0x20>)
 801b73e:	6824      	ldr	r4, [r4, #0]
 801b740:	6a24      	ldr	r4, [r4, #32]
 801b742:	2c00      	cmp	r4, #0
 801b744:	bf08      	it	eq
 801b746:	462c      	moveq	r4, r5
 801b748:	9400      	str	r4, [sp, #0]
 801b74a:	f7ff ff79 	bl	801b640 <_strtol_l.isra.0>
 801b74e:	b003      	add	sp, #12
 801b750:	bd30      	pop	{r4, r5, pc}
 801b752:	bf00      	nop
 801b754:	200001c4 	.word	0x200001c4
 801b758:	20000228 	.word	0x20000228

0801b75c <__swbuf_r>:
 801b75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b75e:	460e      	mov	r6, r1
 801b760:	4614      	mov	r4, r2
 801b762:	4605      	mov	r5, r0
 801b764:	b118      	cbz	r0, 801b76e <__swbuf_r+0x12>
 801b766:	6983      	ldr	r3, [r0, #24]
 801b768:	b90b      	cbnz	r3, 801b76e <__swbuf_r+0x12>
 801b76a:	f000 fff5 	bl	801c758 <__sinit>
 801b76e:	4b21      	ldr	r3, [pc, #132]	; (801b7f4 <__swbuf_r+0x98>)
 801b770:	429c      	cmp	r4, r3
 801b772:	d12a      	bne.n	801b7ca <__swbuf_r+0x6e>
 801b774:	686c      	ldr	r4, [r5, #4]
 801b776:	69a3      	ldr	r3, [r4, #24]
 801b778:	60a3      	str	r3, [r4, #8]
 801b77a:	89a3      	ldrh	r3, [r4, #12]
 801b77c:	071a      	lsls	r2, r3, #28
 801b77e:	d52e      	bpl.n	801b7de <__swbuf_r+0x82>
 801b780:	6923      	ldr	r3, [r4, #16]
 801b782:	b363      	cbz	r3, 801b7de <__swbuf_r+0x82>
 801b784:	6923      	ldr	r3, [r4, #16]
 801b786:	6820      	ldr	r0, [r4, #0]
 801b788:	1ac0      	subs	r0, r0, r3
 801b78a:	6963      	ldr	r3, [r4, #20]
 801b78c:	b2f6      	uxtb	r6, r6
 801b78e:	4283      	cmp	r3, r0
 801b790:	4637      	mov	r7, r6
 801b792:	dc04      	bgt.n	801b79e <__swbuf_r+0x42>
 801b794:	4621      	mov	r1, r4
 801b796:	4628      	mov	r0, r5
 801b798:	f000 ff74 	bl	801c684 <_fflush_r>
 801b79c:	bb28      	cbnz	r0, 801b7ea <__swbuf_r+0x8e>
 801b79e:	68a3      	ldr	r3, [r4, #8]
 801b7a0:	3b01      	subs	r3, #1
 801b7a2:	60a3      	str	r3, [r4, #8]
 801b7a4:	6823      	ldr	r3, [r4, #0]
 801b7a6:	1c5a      	adds	r2, r3, #1
 801b7a8:	6022      	str	r2, [r4, #0]
 801b7aa:	701e      	strb	r6, [r3, #0]
 801b7ac:	6963      	ldr	r3, [r4, #20]
 801b7ae:	3001      	adds	r0, #1
 801b7b0:	4283      	cmp	r3, r0
 801b7b2:	d004      	beq.n	801b7be <__swbuf_r+0x62>
 801b7b4:	89a3      	ldrh	r3, [r4, #12]
 801b7b6:	07db      	lsls	r3, r3, #31
 801b7b8:	d519      	bpl.n	801b7ee <__swbuf_r+0x92>
 801b7ba:	2e0a      	cmp	r6, #10
 801b7bc:	d117      	bne.n	801b7ee <__swbuf_r+0x92>
 801b7be:	4621      	mov	r1, r4
 801b7c0:	4628      	mov	r0, r5
 801b7c2:	f000 ff5f 	bl	801c684 <_fflush_r>
 801b7c6:	b190      	cbz	r0, 801b7ee <__swbuf_r+0x92>
 801b7c8:	e00f      	b.n	801b7ea <__swbuf_r+0x8e>
 801b7ca:	4b0b      	ldr	r3, [pc, #44]	; (801b7f8 <__swbuf_r+0x9c>)
 801b7cc:	429c      	cmp	r4, r3
 801b7ce:	d101      	bne.n	801b7d4 <__swbuf_r+0x78>
 801b7d0:	68ac      	ldr	r4, [r5, #8]
 801b7d2:	e7d0      	b.n	801b776 <__swbuf_r+0x1a>
 801b7d4:	4b09      	ldr	r3, [pc, #36]	; (801b7fc <__swbuf_r+0xa0>)
 801b7d6:	429c      	cmp	r4, r3
 801b7d8:	bf08      	it	eq
 801b7da:	68ec      	ldreq	r4, [r5, #12]
 801b7dc:	e7cb      	b.n	801b776 <__swbuf_r+0x1a>
 801b7de:	4621      	mov	r1, r4
 801b7e0:	4628      	mov	r0, r5
 801b7e2:	f000 f80d 	bl	801b800 <__swsetup_r>
 801b7e6:	2800      	cmp	r0, #0
 801b7e8:	d0cc      	beq.n	801b784 <__swbuf_r+0x28>
 801b7ea:	f04f 37ff 	mov.w	r7, #4294967295
 801b7ee:	4638      	mov	r0, r7
 801b7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b7f2:	bf00      	nop
 801b7f4:	0801ea88 	.word	0x0801ea88
 801b7f8:	0801eaa8 	.word	0x0801eaa8
 801b7fc:	0801ea68 	.word	0x0801ea68

0801b800 <__swsetup_r>:
 801b800:	4b32      	ldr	r3, [pc, #200]	; (801b8cc <__swsetup_r+0xcc>)
 801b802:	b570      	push	{r4, r5, r6, lr}
 801b804:	681d      	ldr	r5, [r3, #0]
 801b806:	4606      	mov	r6, r0
 801b808:	460c      	mov	r4, r1
 801b80a:	b125      	cbz	r5, 801b816 <__swsetup_r+0x16>
 801b80c:	69ab      	ldr	r3, [r5, #24]
 801b80e:	b913      	cbnz	r3, 801b816 <__swsetup_r+0x16>
 801b810:	4628      	mov	r0, r5
 801b812:	f000 ffa1 	bl	801c758 <__sinit>
 801b816:	4b2e      	ldr	r3, [pc, #184]	; (801b8d0 <__swsetup_r+0xd0>)
 801b818:	429c      	cmp	r4, r3
 801b81a:	d10f      	bne.n	801b83c <__swsetup_r+0x3c>
 801b81c:	686c      	ldr	r4, [r5, #4]
 801b81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b822:	b29a      	uxth	r2, r3
 801b824:	0715      	lsls	r5, r2, #28
 801b826:	d42c      	bmi.n	801b882 <__swsetup_r+0x82>
 801b828:	06d0      	lsls	r0, r2, #27
 801b82a:	d411      	bmi.n	801b850 <__swsetup_r+0x50>
 801b82c:	2209      	movs	r2, #9
 801b82e:	6032      	str	r2, [r6, #0]
 801b830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b834:	81a3      	strh	r3, [r4, #12]
 801b836:	f04f 30ff 	mov.w	r0, #4294967295
 801b83a:	e03e      	b.n	801b8ba <__swsetup_r+0xba>
 801b83c:	4b25      	ldr	r3, [pc, #148]	; (801b8d4 <__swsetup_r+0xd4>)
 801b83e:	429c      	cmp	r4, r3
 801b840:	d101      	bne.n	801b846 <__swsetup_r+0x46>
 801b842:	68ac      	ldr	r4, [r5, #8]
 801b844:	e7eb      	b.n	801b81e <__swsetup_r+0x1e>
 801b846:	4b24      	ldr	r3, [pc, #144]	; (801b8d8 <__swsetup_r+0xd8>)
 801b848:	429c      	cmp	r4, r3
 801b84a:	bf08      	it	eq
 801b84c:	68ec      	ldreq	r4, [r5, #12]
 801b84e:	e7e6      	b.n	801b81e <__swsetup_r+0x1e>
 801b850:	0751      	lsls	r1, r2, #29
 801b852:	d512      	bpl.n	801b87a <__swsetup_r+0x7a>
 801b854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b856:	b141      	cbz	r1, 801b86a <__swsetup_r+0x6a>
 801b858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b85c:	4299      	cmp	r1, r3
 801b85e:	d002      	beq.n	801b866 <__swsetup_r+0x66>
 801b860:	4630      	mov	r0, r6
 801b862:	f001 ffe1 	bl	801d828 <_free_r>
 801b866:	2300      	movs	r3, #0
 801b868:	6363      	str	r3, [r4, #52]	; 0x34
 801b86a:	89a3      	ldrh	r3, [r4, #12]
 801b86c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b870:	81a3      	strh	r3, [r4, #12]
 801b872:	2300      	movs	r3, #0
 801b874:	6063      	str	r3, [r4, #4]
 801b876:	6923      	ldr	r3, [r4, #16]
 801b878:	6023      	str	r3, [r4, #0]
 801b87a:	89a3      	ldrh	r3, [r4, #12]
 801b87c:	f043 0308 	orr.w	r3, r3, #8
 801b880:	81a3      	strh	r3, [r4, #12]
 801b882:	6923      	ldr	r3, [r4, #16]
 801b884:	b94b      	cbnz	r3, 801b89a <__swsetup_r+0x9a>
 801b886:	89a3      	ldrh	r3, [r4, #12]
 801b888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b88c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b890:	d003      	beq.n	801b89a <__swsetup_r+0x9a>
 801b892:	4621      	mov	r1, r4
 801b894:	4630      	mov	r0, r6
 801b896:	f001 fb47 	bl	801cf28 <__smakebuf_r>
 801b89a:	89a2      	ldrh	r2, [r4, #12]
 801b89c:	f012 0301 	ands.w	r3, r2, #1
 801b8a0:	d00c      	beq.n	801b8bc <__swsetup_r+0xbc>
 801b8a2:	2300      	movs	r3, #0
 801b8a4:	60a3      	str	r3, [r4, #8]
 801b8a6:	6963      	ldr	r3, [r4, #20]
 801b8a8:	425b      	negs	r3, r3
 801b8aa:	61a3      	str	r3, [r4, #24]
 801b8ac:	6923      	ldr	r3, [r4, #16]
 801b8ae:	b953      	cbnz	r3, 801b8c6 <__swsetup_r+0xc6>
 801b8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b8b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b8b8:	d1ba      	bne.n	801b830 <__swsetup_r+0x30>
 801b8ba:	bd70      	pop	{r4, r5, r6, pc}
 801b8bc:	0792      	lsls	r2, r2, #30
 801b8be:	bf58      	it	pl
 801b8c0:	6963      	ldrpl	r3, [r4, #20]
 801b8c2:	60a3      	str	r3, [r4, #8]
 801b8c4:	e7f2      	b.n	801b8ac <__swsetup_r+0xac>
 801b8c6:	2000      	movs	r0, #0
 801b8c8:	e7f7      	b.n	801b8ba <__swsetup_r+0xba>
 801b8ca:	bf00      	nop
 801b8cc:	200001c4 	.word	0x200001c4
 801b8d0:	0801ea88 	.word	0x0801ea88
 801b8d4:	0801eaa8 	.word	0x0801eaa8
 801b8d8:	0801ea68 	.word	0x0801ea68

0801b8dc <abort>:
 801b8dc:	b508      	push	{r3, lr}
 801b8de:	2006      	movs	r0, #6
 801b8e0:	f002 f9fa 	bl	801dcd8 <raise>
 801b8e4:	2001      	movs	r0, #1
 801b8e6:	f7ec fd2d 	bl	8008344 <_exit>

0801b8ea <quorem>:
 801b8ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ee:	6903      	ldr	r3, [r0, #16]
 801b8f0:	690c      	ldr	r4, [r1, #16]
 801b8f2:	42a3      	cmp	r3, r4
 801b8f4:	4680      	mov	r8, r0
 801b8f6:	f2c0 8082 	blt.w	801b9fe <quorem+0x114>
 801b8fa:	3c01      	subs	r4, #1
 801b8fc:	f101 0714 	add.w	r7, r1, #20
 801b900:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801b904:	f100 0614 	add.w	r6, r0, #20
 801b908:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801b90c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801b910:	eb06 030c 	add.w	r3, r6, ip
 801b914:	3501      	adds	r5, #1
 801b916:	eb07 090c 	add.w	r9, r7, ip
 801b91a:	9301      	str	r3, [sp, #4]
 801b91c:	fbb0 f5f5 	udiv	r5, r0, r5
 801b920:	b395      	cbz	r5, 801b988 <quorem+0x9e>
 801b922:	f04f 0a00 	mov.w	sl, #0
 801b926:	4638      	mov	r0, r7
 801b928:	46b6      	mov	lr, r6
 801b92a:	46d3      	mov	fp, sl
 801b92c:	f850 2b04 	ldr.w	r2, [r0], #4
 801b930:	b293      	uxth	r3, r2
 801b932:	fb05 a303 	mla	r3, r5, r3, sl
 801b936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b93a:	b29b      	uxth	r3, r3
 801b93c:	ebab 0303 	sub.w	r3, fp, r3
 801b940:	0c12      	lsrs	r2, r2, #16
 801b942:	f8de b000 	ldr.w	fp, [lr]
 801b946:	fb05 a202 	mla	r2, r5, r2, sl
 801b94a:	fa13 f38b 	uxtah	r3, r3, fp
 801b94e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801b952:	fa1f fb82 	uxth.w	fp, r2
 801b956:	f8de 2000 	ldr.w	r2, [lr]
 801b95a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801b95e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b962:	b29b      	uxth	r3, r3
 801b964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b968:	4581      	cmp	r9, r0
 801b96a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801b96e:	f84e 3b04 	str.w	r3, [lr], #4
 801b972:	d2db      	bcs.n	801b92c <quorem+0x42>
 801b974:	f856 300c 	ldr.w	r3, [r6, ip]
 801b978:	b933      	cbnz	r3, 801b988 <quorem+0x9e>
 801b97a:	9b01      	ldr	r3, [sp, #4]
 801b97c:	3b04      	subs	r3, #4
 801b97e:	429e      	cmp	r6, r3
 801b980:	461a      	mov	r2, r3
 801b982:	d330      	bcc.n	801b9e6 <quorem+0xfc>
 801b984:	f8c8 4010 	str.w	r4, [r8, #16]
 801b988:	4640      	mov	r0, r8
 801b98a:	f001 fd93 	bl	801d4b4 <__mcmp>
 801b98e:	2800      	cmp	r0, #0
 801b990:	db25      	blt.n	801b9de <quorem+0xf4>
 801b992:	3501      	adds	r5, #1
 801b994:	4630      	mov	r0, r6
 801b996:	f04f 0c00 	mov.w	ip, #0
 801b99a:	f857 2b04 	ldr.w	r2, [r7], #4
 801b99e:	f8d0 e000 	ldr.w	lr, [r0]
 801b9a2:	b293      	uxth	r3, r2
 801b9a4:	ebac 0303 	sub.w	r3, ip, r3
 801b9a8:	0c12      	lsrs	r2, r2, #16
 801b9aa:	fa13 f38e 	uxtah	r3, r3, lr
 801b9ae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b9b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b9b6:	b29b      	uxth	r3, r3
 801b9b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b9bc:	45b9      	cmp	r9, r7
 801b9be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b9c2:	f840 3b04 	str.w	r3, [r0], #4
 801b9c6:	d2e8      	bcs.n	801b99a <quorem+0xb0>
 801b9c8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801b9cc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b9d0:	b92a      	cbnz	r2, 801b9de <quorem+0xf4>
 801b9d2:	3b04      	subs	r3, #4
 801b9d4:	429e      	cmp	r6, r3
 801b9d6:	461a      	mov	r2, r3
 801b9d8:	d30b      	bcc.n	801b9f2 <quorem+0x108>
 801b9da:	f8c8 4010 	str.w	r4, [r8, #16]
 801b9de:	4628      	mov	r0, r5
 801b9e0:	b003      	add	sp, #12
 801b9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9e6:	6812      	ldr	r2, [r2, #0]
 801b9e8:	3b04      	subs	r3, #4
 801b9ea:	2a00      	cmp	r2, #0
 801b9ec:	d1ca      	bne.n	801b984 <quorem+0x9a>
 801b9ee:	3c01      	subs	r4, #1
 801b9f0:	e7c5      	b.n	801b97e <quorem+0x94>
 801b9f2:	6812      	ldr	r2, [r2, #0]
 801b9f4:	3b04      	subs	r3, #4
 801b9f6:	2a00      	cmp	r2, #0
 801b9f8:	d1ef      	bne.n	801b9da <quorem+0xf0>
 801b9fa:	3c01      	subs	r4, #1
 801b9fc:	e7ea      	b.n	801b9d4 <quorem+0xea>
 801b9fe:	2000      	movs	r0, #0
 801ba00:	e7ee      	b.n	801b9e0 <quorem+0xf6>
 801ba02:	0000      	movs	r0, r0
 801ba04:	0000      	movs	r0, r0
	...

0801ba08 <_dtoa_r>:
 801ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba0c:	ec57 6b10 	vmov	r6, r7, d0
 801ba10:	b097      	sub	sp, #92	; 0x5c
 801ba12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ba14:	9106      	str	r1, [sp, #24]
 801ba16:	4604      	mov	r4, r0
 801ba18:	920b      	str	r2, [sp, #44]	; 0x2c
 801ba1a:	9312      	str	r3, [sp, #72]	; 0x48
 801ba1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ba20:	e9cd 6700 	strd	r6, r7, [sp]
 801ba24:	b93d      	cbnz	r5, 801ba36 <_dtoa_r+0x2e>
 801ba26:	2010      	movs	r0, #16
 801ba28:	f001 fabe 	bl	801cfa8 <malloc>
 801ba2c:	6260      	str	r0, [r4, #36]	; 0x24
 801ba2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ba32:	6005      	str	r5, [r0, #0]
 801ba34:	60c5      	str	r5, [r0, #12]
 801ba36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ba38:	6819      	ldr	r1, [r3, #0]
 801ba3a:	b151      	cbz	r1, 801ba52 <_dtoa_r+0x4a>
 801ba3c:	685a      	ldr	r2, [r3, #4]
 801ba3e:	604a      	str	r2, [r1, #4]
 801ba40:	2301      	movs	r3, #1
 801ba42:	4093      	lsls	r3, r2
 801ba44:	608b      	str	r3, [r1, #8]
 801ba46:	4620      	mov	r0, r4
 801ba48:	f001 fb15 	bl	801d076 <_Bfree>
 801ba4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ba4e:	2200      	movs	r2, #0
 801ba50:	601a      	str	r2, [r3, #0]
 801ba52:	1e3b      	subs	r3, r7, #0
 801ba54:	bfbb      	ittet	lt
 801ba56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ba5a:	9301      	strlt	r3, [sp, #4]
 801ba5c:	2300      	movge	r3, #0
 801ba5e:	2201      	movlt	r2, #1
 801ba60:	bfac      	ite	ge
 801ba62:	f8c8 3000 	strge.w	r3, [r8]
 801ba66:	f8c8 2000 	strlt.w	r2, [r8]
 801ba6a:	4baf      	ldr	r3, [pc, #700]	; (801bd28 <_dtoa_r+0x320>)
 801ba6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ba70:	ea33 0308 	bics.w	r3, r3, r8
 801ba74:	d114      	bne.n	801baa0 <_dtoa_r+0x98>
 801ba76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ba78:	f242 730f 	movw	r3, #9999	; 0x270f
 801ba7c:	6013      	str	r3, [r2, #0]
 801ba7e:	9b00      	ldr	r3, [sp, #0]
 801ba80:	b923      	cbnz	r3, 801ba8c <_dtoa_r+0x84>
 801ba82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801ba86:	2800      	cmp	r0, #0
 801ba88:	f000 8542 	beq.w	801c510 <_dtoa_r+0xb08>
 801ba8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801bd3c <_dtoa_r+0x334>
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	f000 8544 	beq.w	801c520 <_dtoa_r+0xb18>
 801ba98:	f10b 0303 	add.w	r3, fp, #3
 801ba9c:	f000 bd3e 	b.w	801c51c <_dtoa_r+0xb14>
 801baa0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801baa4:	2200      	movs	r2, #0
 801baa6:	2300      	movs	r3, #0
 801baa8:	4630      	mov	r0, r6
 801baaa:	4639      	mov	r1, r7
 801baac:	f7e5 f81c 	bl	8000ae8 <__aeabi_dcmpeq>
 801bab0:	4681      	mov	r9, r0
 801bab2:	b168      	cbz	r0, 801bad0 <_dtoa_r+0xc8>
 801bab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bab6:	2301      	movs	r3, #1
 801bab8:	6013      	str	r3, [r2, #0]
 801baba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801babc:	2b00      	cmp	r3, #0
 801babe:	f000 8524 	beq.w	801c50a <_dtoa_r+0xb02>
 801bac2:	4b9a      	ldr	r3, [pc, #616]	; (801bd2c <_dtoa_r+0x324>)
 801bac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bac6:	f103 3bff 	add.w	fp, r3, #4294967295
 801baca:	6013      	str	r3, [r2, #0]
 801bacc:	f000 bd28 	b.w	801c520 <_dtoa_r+0xb18>
 801bad0:	aa14      	add	r2, sp, #80	; 0x50
 801bad2:	a915      	add	r1, sp, #84	; 0x54
 801bad4:	ec47 6b10 	vmov	d0, r6, r7
 801bad8:	4620      	mov	r0, r4
 801bada:	f001 fdd9 	bl	801d690 <__d2b>
 801bade:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801bae2:	9004      	str	r0, [sp, #16]
 801bae4:	2d00      	cmp	r5, #0
 801bae6:	d07c      	beq.n	801bbe2 <_dtoa_r+0x1da>
 801bae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801baec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801baf0:	46b2      	mov	sl, r6
 801baf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801baf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bafa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801bafe:	2200      	movs	r2, #0
 801bb00:	4b8b      	ldr	r3, [pc, #556]	; (801bd30 <_dtoa_r+0x328>)
 801bb02:	4650      	mov	r0, sl
 801bb04:	4659      	mov	r1, fp
 801bb06:	f7e4 fbcf 	bl	80002a8 <__aeabi_dsub>
 801bb0a:	a381      	add	r3, pc, #516	; (adr r3, 801bd10 <_dtoa_r+0x308>)
 801bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb10:	f7e4 fd82 	bl	8000618 <__aeabi_dmul>
 801bb14:	a380      	add	r3, pc, #512	; (adr r3, 801bd18 <_dtoa_r+0x310>)
 801bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb1a:	f7e4 fbc7 	bl	80002ac <__adddf3>
 801bb1e:	4606      	mov	r6, r0
 801bb20:	4628      	mov	r0, r5
 801bb22:	460f      	mov	r7, r1
 801bb24:	f7e4 fd0e 	bl	8000544 <__aeabi_i2d>
 801bb28:	a37d      	add	r3, pc, #500	; (adr r3, 801bd20 <_dtoa_r+0x318>)
 801bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb2e:	f7e4 fd73 	bl	8000618 <__aeabi_dmul>
 801bb32:	4602      	mov	r2, r0
 801bb34:	460b      	mov	r3, r1
 801bb36:	4630      	mov	r0, r6
 801bb38:	4639      	mov	r1, r7
 801bb3a:	f7e4 fbb7 	bl	80002ac <__adddf3>
 801bb3e:	4606      	mov	r6, r0
 801bb40:	460f      	mov	r7, r1
 801bb42:	f7e5 f819 	bl	8000b78 <__aeabi_d2iz>
 801bb46:	2200      	movs	r2, #0
 801bb48:	4682      	mov	sl, r0
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	4630      	mov	r0, r6
 801bb4e:	4639      	mov	r1, r7
 801bb50:	f7e4 ffd4 	bl	8000afc <__aeabi_dcmplt>
 801bb54:	b148      	cbz	r0, 801bb6a <_dtoa_r+0x162>
 801bb56:	4650      	mov	r0, sl
 801bb58:	f7e4 fcf4 	bl	8000544 <__aeabi_i2d>
 801bb5c:	4632      	mov	r2, r6
 801bb5e:	463b      	mov	r3, r7
 801bb60:	f7e4 ffc2 	bl	8000ae8 <__aeabi_dcmpeq>
 801bb64:	b908      	cbnz	r0, 801bb6a <_dtoa_r+0x162>
 801bb66:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb6a:	f1ba 0f16 	cmp.w	sl, #22
 801bb6e:	d859      	bhi.n	801bc24 <_dtoa_r+0x21c>
 801bb70:	4970      	ldr	r1, [pc, #448]	; (801bd34 <_dtoa_r+0x32c>)
 801bb72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801bb76:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb7e:	f7e4 ffdb 	bl	8000b38 <__aeabi_dcmpgt>
 801bb82:	2800      	cmp	r0, #0
 801bb84:	d050      	beq.n	801bc28 <_dtoa_r+0x220>
 801bb86:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bb90:	1b5d      	subs	r5, r3, r5
 801bb92:	f1b5 0801 	subs.w	r8, r5, #1
 801bb96:	bf49      	itett	mi
 801bb98:	f1c5 0301 	rsbmi	r3, r5, #1
 801bb9c:	2300      	movpl	r3, #0
 801bb9e:	9305      	strmi	r3, [sp, #20]
 801bba0:	f04f 0800 	movmi.w	r8, #0
 801bba4:	bf58      	it	pl
 801bba6:	9305      	strpl	r3, [sp, #20]
 801bba8:	f1ba 0f00 	cmp.w	sl, #0
 801bbac:	db3e      	blt.n	801bc2c <_dtoa_r+0x224>
 801bbae:	2300      	movs	r3, #0
 801bbb0:	44d0      	add	r8, sl
 801bbb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801bbb6:	9307      	str	r3, [sp, #28]
 801bbb8:	9b06      	ldr	r3, [sp, #24]
 801bbba:	2b09      	cmp	r3, #9
 801bbbc:	f200 8090 	bhi.w	801bce0 <_dtoa_r+0x2d8>
 801bbc0:	2b05      	cmp	r3, #5
 801bbc2:	bfc4      	itt	gt
 801bbc4:	3b04      	subgt	r3, #4
 801bbc6:	9306      	strgt	r3, [sp, #24]
 801bbc8:	9b06      	ldr	r3, [sp, #24]
 801bbca:	f1a3 0302 	sub.w	r3, r3, #2
 801bbce:	bfcc      	ite	gt
 801bbd0:	2500      	movgt	r5, #0
 801bbd2:	2501      	movle	r5, #1
 801bbd4:	2b03      	cmp	r3, #3
 801bbd6:	f200 808f 	bhi.w	801bcf8 <_dtoa_r+0x2f0>
 801bbda:	e8df f003 	tbb	[pc, r3]
 801bbde:	7f7d      	.short	0x7f7d
 801bbe0:	7131      	.short	0x7131
 801bbe2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801bbe6:	441d      	add	r5, r3
 801bbe8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801bbec:	2820      	cmp	r0, #32
 801bbee:	dd13      	ble.n	801bc18 <_dtoa_r+0x210>
 801bbf0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801bbf4:	9b00      	ldr	r3, [sp, #0]
 801bbf6:	fa08 f800 	lsl.w	r8, r8, r0
 801bbfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801bbfe:	fa23 f000 	lsr.w	r0, r3, r0
 801bc02:	ea48 0000 	orr.w	r0, r8, r0
 801bc06:	f7e4 fc8d 	bl	8000524 <__aeabi_ui2d>
 801bc0a:	2301      	movs	r3, #1
 801bc0c:	4682      	mov	sl, r0
 801bc0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801bc12:	3d01      	subs	r5, #1
 801bc14:	9313      	str	r3, [sp, #76]	; 0x4c
 801bc16:	e772      	b.n	801bafe <_dtoa_r+0xf6>
 801bc18:	9b00      	ldr	r3, [sp, #0]
 801bc1a:	f1c0 0020 	rsb	r0, r0, #32
 801bc1e:	fa03 f000 	lsl.w	r0, r3, r0
 801bc22:	e7f0      	b.n	801bc06 <_dtoa_r+0x1fe>
 801bc24:	2301      	movs	r3, #1
 801bc26:	e7b1      	b.n	801bb8c <_dtoa_r+0x184>
 801bc28:	900f      	str	r0, [sp, #60]	; 0x3c
 801bc2a:	e7b0      	b.n	801bb8e <_dtoa_r+0x186>
 801bc2c:	9b05      	ldr	r3, [sp, #20]
 801bc2e:	eba3 030a 	sub.w	r3, r3, sl
 801bc32:	9305      	str	r3, [sp, #20]
 801bc34:	f1ca 0300 	rsb	r3, sl, #0
 801bc38:	9307      	str	r3, [sp, #28]
 801bc3a:	2300      	movs	r3, #0
 801bc3c:	930e      	str	r3, [sp, #56]	; 0x38
 801bc3e:	e7bb      	b.n	801bbb8 <_dtoa_r+0x1b0>
 801bc40:	2301      	movs	r3, #1
 801bc42:	930a      	str	r3, [sp, #40]	; 0x28
 801bc44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	dd59      	ble.n	801bcfe <_dtoa_r+0x2f6>
 801bc4a:	9302      	str	r3, [sp, #8]
 801bc4c:	4699      	mov	r9, r3
 801bc4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801bc50:	2200      	movs	r2, #0
 801bc52:	6072      	str	r2, [r6, #4]
 801bc54:	2204      	movs	r2, #4
 801bc56:	f102 0014 	add.w	r0, r2, #20
 801bc5a:	4298      	cmp	r0, r3
 801bc5c:	6871      	ldr	r1, [r6, #4]
 801bc5e:	d953      	bls.n	801bd08 <_dtoa_r+0x300>
 801bc60:	4620      	mov	r0, r4
 801bc62:	f001 f9d4 	bl	801d00e <_Balloc>
 801bc66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bc68:	6030      	str	r0, [r6, #0]
 801bc6a:	f1b9 0f0e 	cmp.w	r9, #14
 801bc6e:	f8d3 b000 	ldr.w	fp, [r3]
 801bc72:	f200 80e6 	bhi.w	801be42 <_dtoa_r+0x43a>
 801bc76:	2d00      	cmp	r5, #0
 801bc78:	f000 80e3 	beq.w	801be42 <_dtoa_r+0x43a>
 801bc7c:	ed9d 7b00 	vldr	d7, [sp]
 801bc80:	f1ba 0f00 	cmp.w	sl, #0
 801bc84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801bc88:	dd74      	ble.n	801bd74 <_dtoa_r+0x36c>
 801bc8a:	4a2a      	ldr	r2, [pc, #168]	; (801bd34 <_dtoa_r+0x32c>)
 801bc8c:	f00a 030f 	and.w	r3, sl, #15
 801bc90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bc94:	ed93 7b00 	vldr	d7, [r3]
 801bc98:	ea4f 162a 	mov.w	r6, sl, asr #4
 801bc9c:	06f0      	lsls	r0, r6, #27
 801bc9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 801bca2:	d565      	bpl.n	801bd70 <_dtoa_r+0x368>
 801bca4:	4b24      	ldr	r3, [pc, #144]	; (801bd38 <_dtoa_r+0x330>)
 801bca6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801bcaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bcae:	f7e4 fddd 	bl	800086c <__aeabi_ddiv>
 801bcb2:	e9cd 0100 	strd	r0, r1, [sp]
 801bcb6:	f006 060f 	and.w	r6, r6, #15
 801bcba:	2503      	movs	r5, #3
 801bcbc:	4f1e      	ldr	r7, [pc, #120]	; (801bd38 <_dtoa_r+0x330>)
 801bcbe:	e04c      	b.n	801bd5a <_dtoa_r+0x352>
 801bcc0:	2301      	movs	r3, #1
 801bcc2:	930a      	str	r3, [sp, #40]	; 0x28
 801bcc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bcc6:	4453      	add	r3, sl
 801bcc8:	f103 0901 	add.w	r9, r3, #1
 801bccc:	9302      	str	r3, [sp, #8]
 801bcce:	464b      	mov	r3, r9
 801bcd0:	2b01      	cmp	r3, #1
 801bcd2:	bfb8      	it	lt
 801bcd4:	2301      	movlt	r3, #1
 801bcd6:	e7ba      	b.n	801bc4e <_dtoa_r+0x246>
 801bcd8:	2300      	movs	r3, #0
 801bcda:	e7b2      	b.n	801bc42 <_dtoa_r+0x23a>
 801bcdc:	2300      	movs	r3, #0
 801bcde:	e7f0      	b.n	801bcc2 <_dtoa_r+0x2ba>
 801bce0:	2501      	movs	r5, #1
 801bce2:	2300      	movs	r3, #0
 801bce4:	9306      	str	r3, [sp, #24]
 801bce6:	950a      	str	r5, [sp, #40]	; 0x28
 801bce8:	f04f 33ff 	mov.w	r3, #4294967295
 801bcec:	9302      	str	r3, [sp, #8]
 801bcee:	4699      	mov	r9, r3
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	2312      	movs	r3, #18
 801bcf4:	920b      	str	r2, [sp, #44]	; 0x2c
 801bcf6:	e7aa      	b.n	801bc4e <_dtoa_r+0x246>
 801bcf8:	2301      	movs	r3, #1
 801bcfa:	930a      	str	r3, [sp, #40]	; 0x28
 801bcfc:	e7f4      	b.n	801bce8 <_dtoa_r+0x2e0>
 801bcfe:	2301      	movs	r3, #1
 801bd00:	9302      	str	r3, [sp, #8]
 801bd02:	4699      	mov	r9, r3
 801bd04:	461a      	mov	r2, r3
 801bd06:	e7f5      	b.n	801bcf4 <_dtoa_r+0x2ec>
 801bd08:	3101      	adds	r1, #1
 801bd0a:	6071      	str	r1, [r6, #4]
 801bd0c:	0052      	lsls	r2, r2, #1
 801bd0e:	e7a2      	b.n	801bc56 <_dtoa_r+0x24e>
 801bd10:	636f4361 	.word	0x636f4361
 801bd14:	3fd287a7 	.word	0x3fd287a7
 801bd18:	8b60c8b3 	.word	0x8b60c8b3
 801bd1c:	3fc68a28 	.word	0x3fc68a28
 801bd20:	509f79fb 	.word	0x509f79fb
 801bd24:	3fd34413 	.word	0x3fd34413
 801bd28:	7ff00000 	.word	0x7ff00000
 801bd2c:	0801e9da 	.word	0x0801e9da
 801bd30:	3ff80000 	.word	0x3ff80000
 801bd34:	0801eb00 	.word	0x0801eb00
 801bd38:	0801ead8 	.word	0x0801ead8
 801bd3c:	0801ea61 	.word	0x0801ea61
 801bd40:	07f1      	lsls	r1, r6, #31
 801bd42:	d508      	bpl.n	801bd56 <_dtoa_r+0x34e>
 801bd44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bd4c:	f7e4 fc64 	bl	8000618 <__aeabi_dmul>
 801bd50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bd54:	3501      	adds	r5, #1
 801bd56:	1076      	asrs	r6, r6, #1
 801bd58:	3708      	adds	r7, #8
 801bd5a:	2e00      	cmp	r6, #0
 801bd5c:	d1f0      	bne.n	801bd40 <_dtoa_r+0x338>
 801bd5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bd62:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bd66:	f7e4 fd81 	bl	800086c <__aeabi_ddiv>
 801bd6a:	e9cd 0100 	strd	r0, r1, [sp]
 801bd6e:	e01a      	b.n	801bda6 <_dtoa_r+0x39e>
 801bd70:	2502      	movs	r5, #2
 801bd72:	e7a3      	b.n	801bcbc <_dtoa_r+0x2b4>
 801bd74:	f000 80a0 	beq.w	801beb8 <_dtoa_r+0x4b0>
 801bd78:	f1ca 0600 	rsb	r6, sl, #0
 801bd7c:	4b9f      	ldr	r3, [pc, #636]	; (801bffc <_dtoa_r+0x5f4>)
 801bd7e:	4fa0      	ldr	r7, [pc, #640]	; (801c000 <_dtoa_r+0x5f8>)
 801bd80:	f006 020f 	and.w	r2, r6, #15
 801bd84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801bd90:	f7e4 fc42 	bl	8000618 <__aeabi_dmul>
 801bd94:	e9cd 0100 	strd	r0, r1, [sp]
 801bd98:	1136      	asrs	r6, r6, #4
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	2502      	movs	r5, #2
 801bd9e:	2e00      	cmp	r6, #0
 801bda0:	d17f      	bne.n	801bea2 <_dtoa_r+0x49a>
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d1e1      	bne.n	801bd6a <_dtoa_r+0x362>
 801bda6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	f000 8087 	beq.w	801bebc <_dtoa_r+0x4b4>
 801bdae:	e9dd 6700 	ldrd	r6, r7, [sp]
 801bdb2:	2200      	movs	r2, #0
 801bdb4:	4b93      	ldr	r3, [pc, #588]	; (801c004 <_dtoa_r+0x5fc>)
 801bdb6:	4630      	mov	r0, r6
 801bdb8:	4639      	mov	r1, r7
 801bdba:	f7e4 fe9f 	bl	8000afc <__aeabi_dcmplt>
 801bdbe:	2800      	cmp	r0, #0
 801bdc0:	d07c      	beq.n	801bebc <_dtoa_r+0x4b4>
 801bdc2:	f1b9 0f00 	cmp.w	r9, #0
 801bdc6:	d079      	beq.n	801bebc <_dtoa_r+0x4b4>
 801bdc8:	9b02      	ldr	r3, [sp, #8]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	dd35      	ble.n	801be3a <_dtoa_r+0x432>
 801bdce:	f10a 33ff 	add.w	r3, sl, #4294967295
 801bdd2:	9308      	str	r3, [sp, #32]
 801bdd4:	4639      	mov	r1, r7
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	4b8b      	ldr	r3, [pc, #556]	; (801c008 <_dtoa_r+0x600>)
 801bdda:	4630      	mov	r0, r6
 801bddc:	f7e4 fc1c 	bl	8000618 <__aeabi_dmul>
 801bde0:	e9cd 0100 	strd	r0, r1, [sp]
 801bde4:	9f02      	ldr	r7, [sp, #8]
 801bde6:	3501      	adds	r5, #1
 801bde8:	4628      	mov	r0, r5
 801bdea:	f7e4 fbab 	bl	8000544 <__aeabi_i2d>
 801bdee:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bdf2:	f7e4 fc11 	bl	8000618 <__aeabi_dmul>
 801bdf6:	2200      	movs	r2, #0
 801bdf8:	4b84      	ldr	r3, [pc, #528]	; (801c00c <_dtoa_r+0x604>)
 801bdfa:	f7e4 fa57 	bl	80002ac <__adddf3>
 801bdfe:	4605      	mov	r5, r0
 801be00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801be04:	2f00      	cmp	r7, #0
 801be06:	d15d      	bne.n	801bec4 <_dtoa_r+0x4bc>
 801be08:	2200      	movs	r2, #0
 801be0a:	4b81      	ldr	r3, [pc, #516]	; (801c010 <_dtoa_r+0x608>)
 801be0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801be10:	f7e4 fa4a 	bl	80002a8 <__aeabi_dsub>
 801be14:	462a      	mov	r2, r5
 801be16:	4633      	mov	r3, r6
 801be18:	e9cd 0100 	strd	r0, r1, [sp]
 801be1c:	f7e4 fe8c 	bl	8000b38 <__aeabi_dcmpgt>
 801be20:	2800      	cmp	r0, #0
 801be22:	f040 8288 	bne.w	801c336 <_dtoa_r+0x92e>
 801be26:	462a      	mov	r2, r5
 801be28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801be2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801be30:	f7e4 fe64 	bl	8000afc <__aeabi_dcmplt>
 801be34:	2800      	cmp	r0, #0
 801be36:	f040 827c 	bne.w	801c332 <_dtoa_r+0x92a>
 801be3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801be3e:	e9cd 2300 	strd	r2, r3, [sp]
 801be42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801be44:	2b00      	cmp	r3, #0
 801be46:	f2c0 8150 	blt.w	801c0ea <_dtoa_r+0x6e2>
 801be4a:	f1ba 0f0e 	cmp.w	sl, #14
 801be4e:	f300 814c 	bgt.w	801c0ea <_dtoa_r+0x6e2>
 801be52:	4b6a      	ldr	r3, [pc, #424]	; (801bffc <_dtoa_r+0x5f4>)
 801be54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801be58:	ed93 7b00 	vldr	d7, [r3]
 801be5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be5e:	2b00      	cmp	r3, #0
 801be60:	ed8d 7b02 	vstr	d7, [sp, #8]
 801be64:	f280 80d8 	bge.w	801c018 <_dtoa_r+0x610>
 801be68:	f1b9 0f00 	cmp.w	r9, #0
 801be6c:	f300 80d4 	bgt.w	801c018 <_dtoa_r+0x610>
 801be70:	f040 825e 	bne.w	801c330 <_dtoa_r+0x928>
 801be74:	2200      	movs	r2, #0
 801be76:	4b66      	ldr	r3, [pc, #408]	; (801c010 <_dtoa_r+0x608>)
 801be78:	ec51 0b17 	vmov	r0, r1, d7
 801be7c:	f7e4 fbcc 	bl	8000618 <__aeabi_dmul>
 801be80:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be84:	f7e4 fe4e 	bl	8000b24 <__aeabi_dcmpge>
 801be88:	464f      	mov	r7, r9
 801be8a:	464e      	mov	r6, r9
 801be8c:	2800      	cmp	r0, #0
 801be8e:	f040 8234 	bne.w	801c2fa <_dtoa_r+0x8f2>
 801be92:	2331      	movs	r3, #49	; 0x31
 801be94:	f10b 0501 	add.w	r5, fp, #1
 801be98:	f88b 3000 	strb.w	r3, [fp]
 801be9c:	f10a 0a01 	add.w	sl, sl, #1
 801bea0:	e22f      	b.n	801c302 <_dtoa_r+0x8fa>
 801bea2:	07f2      	lsls	r2, r6, #31
 801bea4:	d505      	bpl.n	801beb2 <_dtoa_r+0x4aa>
 801bea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801beaa:	f7e4 fbb5 	bl	8000618 <__aeabi_dmul>
 801beae:	3501      	adds	r5, #1
 801beb0:	2301      	movs	r3, #1
 801beb2:	1076      	asrs	r6, r6, #1
 801beb4:	3708      	adds	r7, #8
 801beb6:	e772      	b.n	801bd9e <_dtoa_r+0x396>
 801beb8:	2502      	movs	r5, #2
 801beba:	e774      	b.n	801bda6 <_dtoa_r+0x39e>
 801bebc:	f8cd a020 	str.w	sl, [sp, #32]
 801bec0:	464f      	mov	r7, r9
 801bec2:	e791      	b.n	801bde8 <_dtoa_r+0x3e0>
 801bec4:	4b4d      	ldr	r3, [pc, #308]	; (801bffc <_dtoa_r+0x5f4>)
 801bec6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801beca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801bece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d047      	beq.n	801bf64 <_dtoa_r+0x55c>
 801bed4:	4602      	mov	r2, r0
 801bed6:	460b      	mov	r3, r1
 801bed8:	2000      	movs	r0, #0
 801beda:	494e      	ldr	r1, [pc, #312]	; (801c014 <_dtoa_r+0x60c>)
 801bedc:	f7e4 fcc6 	bl	800086c <__aeabi_ddiv>
 801bee0:	462a      	mov	r2, r5
 801bee2:	4633      	mov	r3, r6
 801bee4:	f7e4 f9e0 	bl	80002a8 <__aeabi_dsub>
 801bee8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801beec:	465d      	mov	r5, fp
 801beee:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bef2:	f7e4 fe41 	bl	8000b78 <__aeabi_d2iz>
 801bef6:	4606      	mov	r6, r0
 801bef8:	f7e4 fb24 	bl	8000544 <__aeabi_i2d>
 801befc:	4602      	mov	r2, r0
 801befe:	460b      	mov	r3, r1
 801bf00:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf04:	f7e4 f9d0 	bl	80002a8 <__aeabi_dsub>
 801bf08:	3630      	adds	r6, #48	; 0x30
 801bf0a:	f805 6b01 	strb.w	r6, [r5], #1
 801bf0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801bf12:	e9cd 0100 	strd	r0, r1, [sp]
 801bf16:	f7e4 fdf1 	bl	8000afc <__aeabi_dcmplt>
 801bf1a:	2800      	cmp	r0, #0
 801bf1c:	d163      	bne.n	801bfe6 <_dtoa_r+0x5de>
 801bf1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bf22:	2000      	movs	r0, #0
 801bf24:	4937      	ldr	r1, [pc, #220]	; (801c004 <_dtoa_r+0x5fc>)
 801bf26:	f7e4 f9bf 	bl	80002a8 <__aeabi_dsub>
 801bf2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801bf2e:	f7e4 fde5 	bl	8000afc <__aeabi_dcmplt>
 801bf32:	2800      	cmp	r0, #0
 801bf34:	f040 80b7 	bne.w	801c0a6 <_dtoa_r+0x69e>
 801bf38:	eba5 030b 	sub.w	r3, r5, fp
 801bf3c:	429f      	cmp	r7, r3
 801bf3e:	f77f af7c 	ble.w	801be3a <_dtoa_r+0x432>
 801bf42:	2200      	movs	r2, #0
 801bf44:	4b30      	ldr	r3, [pc, #192]	; (801c008 <_dtoa_r+0x600>)
 801bf46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bf4a:	f7e4 fb65 	bl	8000618 <__aeabi_dmul>
 801bf4e:	2200      	movs	r2, #0
 801bf50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801bf54:	4b2c      	ldr	r3, [pc, #176]	; (801c008 <_dtoa_r+0x600>)
 801bf56:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf5a:	f7e4 fb5d 	bl	8000618 <__aeabi_dmul>
 801bf5e:	e9cd 0100 	strd	r0, r1, [sp]
 801bf62:	e7c4      	b.n	801beee <_dtoa_r+0x4e6>
 801bf64:	462a      	mov	r2, r5
 801bf66:	4633      	mov	r3, r6
 801bf68:	f7e4 fb56 	bl	8000618 <__aeabi_dmul>
 801bf6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801bf70:	eb0b 0507 	add.w	r5, fp, r7
 801bf74:	465e      	mov	r6, fp
 801bf76:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf7a:	f7e4 fdfd 	bl	8000b78 <__aeabi_d2iz>
 801bf7e:	4607      	mov	r7, r0
 801bf80:	f7e4 fae0 	bl	8000544 <__aeabi_i2d>
 801bf84:	3730      	adds	r7, #48	; 0x30
 801bf86:	4602      	mov	r2, r0
 801bf88:	460b      	mov	r3, r1
 801bf8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf8e:	f7e4 f98b 	bl	80002a8 <__aeabi_dsub>
 801bf92:	f806 7b01 	strb.w	r7, [r6], #1
 801bf96:	42ae      	cmp	r6, r5
 801bf98:	e9cd 0100 	strd	r0, r1, [sp]
 801bf9c:	f04f 0200 	mov.w	r2, #0
 801bfa0:	d126      	bne.n	801bff0 <_dtoa_r+0x5e8>
 801bfa2:	4b1c      	ldr	r3, [pc, #112]	; (801c014 <_dtoa_r+0x60c>)
 801bfa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bfa8:	f7e4 f980 	bl	80002ac <__adddf3>
 801bfac:	4602      	mov	r2, r0
 801bfae:	460b      	mov	r3, r1
 801bfb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bfb4:	f7e4 fdc0 	bl	8000b38 <__aeabi_dcmpgt>
 801bfb8:	2800      	cmp	r0, #0
 801bfba:	d174      	bne.n	801c0a6 <_dtoa_r+0x69e>
 801bfbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801bfc0:	2000      	movs	r0, #0
 801bfc2:	4914      	ldr	r1, [pc, #80]	; (801c014 <_dtoa_r+0x60c>)
 801bfc4:	f7e4 f970 	bl	80002a8 <__aeabi_dsub>
 801bfc8:	4602      	mov	r2, r0
 801bfca:	460b      	mov	r3, r1
 801bfcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bfd0:	f7e4 fd94 	bl	8000afc <__aeabi_dcmplt>
 801bfd4:	2800      	cmp	r0, #0
 801bfd6:	f43f af30 	beq.w	801be3a <_dtoa_r+0x432>
 801bfda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bfde:	2b30      	cmp	r3, #48	; 0x30
 801bfe0:	f105 32ff 	add.w	r2, r5, #4294967295
 801bfe4:	d002      	beq.n	801bfec <_dtoa_r+0x5e4>
 801bfe6:	f8dd a020 	ldr.w	sl, [sp, #32]
 801bfea:	e04a      	b.n	801c082 <_dtoa_r+0x67a>
 801bfec:	4615      	mov	r5, r2
 801bfee:	e7f4      	b.n	801bfda <_dtoa_r+0x5d2>
 801bff0:	4b05      	ldr	r3, [pc, #20]	; (801c008 <_dtoa_r+0x600>)
 801bff2:	f7e4 fb11 	bl	8000618 <__aeabi_dmul>
 801bff6:	e9cd 0100 	strd	r0, r1, [sp]
 801bffa:	e7bc      	b.n	801bf76 <_dtoa_r+0x56e>
 801bffc:	0801eb00 	.word	0x0801eb00
 801c000:	0801ead8 	.word	0x0801ead8
 801c004:	3ff00000 	.word	0x3ff00000
 801c008:	40240000 	.word	0x40240000
 801c00c:	401c0000 	.word	0x401c0000
 801c010:	40140000 	.word	0x40140000
 801c014:	3fe00000 	.word	0x3fe00000
 801c018:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c01c:	465d      	mov	r5, fp
 801c01e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c022:	4630      	mov	r0, r6
 801c024:	4639      	mov	r1, r7
 801c026:	f7e4 fc21 	bl	800086c <__aeabi_ddiv>
 801c02a:	f7e4 fda5 	bl	8000b78 <__aeabi_d2iz>
 801c02e:	4680      	mov	r8, r0
 801c030:	f7e4 fa88 	bl	8000544 <__aeabi_i2d>
 801c034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c038:	f7e4 faee 	bl	8000618 <__aeabi_dmul>
 801c03c:	4602      	mov	r2, r0
 801c03e:	460b      	mov	r3, r1
 801c040:	4630      	mov	r0, r6
 801c042:	4639      	mov	r1, r7
 801c044:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801c048:	f7e4 f92e 	bl	80002a8 <__aeabi_dsub>
 801c04c:	f805 6b01 	strb.w	r6, [r5], #1
 801c050:	eba5 060b 	sub.w	r6, r5, fp
 801c054:	45b1      	cmp	r9, r6
 801c056:	4602      	mov	r2, r0
 801c058:	460b      	mov	r3, r1
 801c05a:	d139      	bne.n	801c0d0 <_dtoa_r+0x6c8>
 801c05c:	f7e4 f926 	bl	80002ac <__adddf3>
 801c060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c064:	4606      	mov	r6, r0
 801c066:	460f      	mov	r7, r1
 801c068:	f7e4 fd66 	bl	8000b38 <__aeabi_dcmpgt>
 801c06c:	b9c8      	cbnz	r0, 801c0a2 <_dtoa_r+0x69a>
 801c06e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c072:	4630      	mov	r0, r6
 801c074:	4639      	mov	r1, r7
 801c076:	f7e4 fd37 	bl	8000ae8 <__aeabi_dcmpeq>
 801c07a:	b110      	cbz	r0, 801c082 <_dtoa_r+0x67a>
 801c07c:	f018 0f01 	tst.w	r8, #1
 801c080:	d10f      	bne.n	801c0a2 <_dtoa_r+0x69a>
 801c082:	9904      	ldr	r1, [sp, #16]
 801c084:	4620      	mov	r0, r4
 801c086:	f000 fff6 	bl	801d076 <_Bfree>
 801c08a:	2300      	movs	r3, #0
 801c08c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c08e:	702b      	strb	r3, [r5, #0]
 801c090:	f10a 0301 	add.w	r3, sl, #1
 801c094:	6013      	str	r3, [r2, #0]
 801c096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c098:	2b00      	cmp	r3, #0
 801c09a:	f000 8241 	beq.w	801c520 <_dtoa_r+0xb18>
 801c09e:	601d      	str	r5, [r3, #0]
 801c0a0:	e23e      	b.n	801c520 <_dtoa_r+0xb18>
 801c0a2:	f8cd a020 	str.w	sl, [sp, #32]
 801c0a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c0aa:	2a39      	cmp	r2, #57	; 0x39
 801c0ac:	f105 33ff 	add.w	r3, r5, #4294967295
 801c0b0:	d108      	bne.n	801c0c4 <_dtoa_r+0x6bc>
 801c0b2:	459b      	cmp	fp, r3
 801c0b4:	d10a      	bne.n	801c0cc <_dtoa_r+0x6c4>
 801c0b6:	9b08      	ldr	r3, [sp, #32]
 801c0b8:	3301      	adds	r3, #1
 801c0ba:	9308      	str	r3, [sp, #32]
 801c0bc:	2330      	movs	r3, #48	; 0x30
 801c0be:	f88b 3000 	strb.w	r3, [fp]
 801c0c2:	465b      	mov	r3, fp
 801c0c4:	781a      	ldrb	r2, [r3, #0]
 801c0c6:	3201      	adds	r2, #1
 801c0c8:	701a      	strb	r2, [r3, #0]
 801c0ca:	e78c      	b.n	801bfe6 <_dtoa_r+0x5de>
 801c0cc:	461d      	mov	r5, r3
 801c0ce:	e7ea      	b.n	801c0a6 <_dtoa_r+0x69e>
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	4b9b      	ldr	r3, [pc, #620]	; (801c340 <_dtoa_r+0x938>)
 801c0d4:	f7e4 faa0 	bl	8000618 <__aeabi_dmul>
 801c0d8:	2200      	movs	r2, #0
 801c0da:	2300      	movs	r3, #0
 801c0dc:	4606      	mov	r6, r0
 801c0de:	460f      	mov	r7, r1
 801c0e0:	f7e4 fd02 	bl	8000ae8 <__aeabi_dcmpeq>
 801c0e4:	2800      	cmp	r0, #0
 801c0e6:	d09a      	beq.n	801c01e <_dtoa_r+0x616>
 801c0e8:	e7cb      	b.n	801c082 <_dtoa_r+0x67a>
 801c0ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c0ec:	2a00      	cmp	r2, #0
 801c0ee:	f000 808b 	beq.w	801c208 <_dtoa_r+0x800>
 801c0f2:	9a06      	ldr	r2, [sp, #24]
 801c0f4:	2a01      	cmp	r2, #1
 801c0f6:	dc6e      	bgt.n	801c1d6 <_dtoa_r+0x7ce>
 801c0f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c0fa:	2a00      	cmp	r2, #0
 801c0fc:	d067      	beq.n	801c1ce <_dtoa_r+0x7c6>
 801c0fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c102:	9f07      	ldr	r7, [sp, #28]
 801c104:	9d05      	ldr	r5, [sp, #20]
 801c106:	9a05      	ldr	r2, [sp, #20]
 801c108:	2101      	movs	r1, #1
 801c10a:	441a      	add	r2, r3
 801c10c:	4620      	mov	r0, r4
 801c10e:	9205      	str	r2, [sp, #20]
 801c110:	4498      	add	r8, r3
 801c112:	f001 f88e 	bl	801d232 <__i2b>
 801c116:	4606      	mov	r6, r0
 801c118:	2d00      	cmp	r5, #0
 801c11a:	dd0c      	ble.n	801c136 <_dtoa_r+0x72e>
 801c11c:	f1b8 0f00 	cmp.w	r8, #0
 801c120:	dd09      	ble.n	801c136 <_dtoa_r+0x72e>
 801c122:	4545      	cmp	r5, r8
 801c124:	9a05      	ldr	r2, [sp, #20]
 801c126:	462b      	mov	r3, r5
 801c128:	bfa8      	it	ge
 801c12a:	4643      	movge	r3, r8
 801c12c:	1ad2      	subs	r2, r2, r3
 801c12e:	9205      	str	r2, [sp, #20]
 801c130:	1aed      	subs	r5, r5, r3
 801c132:	eba8 0803 	sub.w	r8, r8, r3
 801c136:	9b07      	ldr	r3, [sp, #28]
 801c138:	b1eb      	cbz	r3, 801c176 <_dtoa_r+0x76e>
 801c13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d067      	beq.n	801c210 <_dtoa_r+0x808>
 801c140:	b18f      	cbz	r7, 801c166 <_dtoa_r+0x75e>
 801c142:	4631      	mov	r1, r6
 801c144:	463a      	mov	r2, r7
 801c146:	4620      	mov	r0, r4
 801c148:	f001 f912 	bl	801d370 <__pow5mult>
 801c14c:	9a04      	ldr	r2, [sp, #16]
 801c14e:	4601      	mov	r1, r0
 801c150:	4606      	mov	r6, r0
 801c152:	4620      	mov	r0, r4
 801c154:	f001 f876 	bl	801d244 <__multiply>
 801c158:	9904      	ldr	r1, [sp, #16]
 801c15a:	9008      	str	r0, [sp, #32]
 801c15c:	4620      	mov	r0, r4
 801c15e:	f000 ff8a 	bl	801d076 <_Bfree>
 801c162:	9b08      	ldr	r3, [sp, #32]
 801c164:	9304      	str	r3, [sp, #16]
 801c166:	9b07      	ldr	r3, [sp, #28]
 801c168:	1bda      	subs	r2, r3, r7
 801c16a:	d004      	beq.n	801c176 <_dtoa_r+0x76e>
 801c16c:	9904      	ldr	r1, [sp, #16]
 801c16e:	4620      	mov	r0, r4
 801c170:	f001 f8fe 	bl	801d370 <__pow5mult>
 801c174:	9004      	str	r0, [sp, #16]
 801c176:	2101      	movs	r1, #1
 801c178:	4620      	mov	r0, r4
 801c17a:	f001 f85a 	bl	801d232 <__i2b>
 801c17e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c180:	4607      	mov	r7, r0
 801c182:	2b00      	cmp	r3, #0
 801c184:	f000 81d0 	beq.w	801c528 <_dtoa_r+0xb20>
 801c188:	461a      	mov	r2, r3
 801c18a:	4601      	mov	r1, r0
 801c18c:	4620      	mov	r0, r4
 801c18e:	f001 f8ef 	bl	801d370 <__pow5mult>
 801c192:	9b06      	ldr	r3, [sp, #24]
 801c194:	2b01      	cmp	r3, #1
 801c196:	4607      	mov	r7, r0
 801c198:	dc40      	bgt.n	801c21c <_dtoa_r+0x814>
 801c19a:	9b00      	ldr	r3, [sp, #0]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d139      	bne.n	801c214 <_dtoa_r+0x80c>
 801c1a0:	9b01      	ldr	r3, [sp, #4]
 801c1a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d136      	bne.n	801c218 <_dtoa_r+0x810>
 801c1aa:	9b01      	ldr	r3, [sp, #4]
 801c1ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c1b0:	0d1b      	lsrs	r3, r3, #20
 801c1b2:	051b      	lsls	r3, r3, #20
 801c1b4:	b12b      	cbz	r3, 801c1c2 <_dtoa_r+0x7ba>
 801c1b6:	9b05      	ldr	r3, [sp, #20]
 801c1b8:	3301      	adds	r3, #1
 801c1ba:	9305      	str	r3, [sp, #20]
 801c1bc:	f108 0801 	add.w	r8, r8, #1
 801c1c0:	2301      	movs	r3, #1
 801c1c2:	9307      	str	r3, [sp, #28]
 801c1c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d12a      	bne.n	801c220 <_dtoa_r+0x818>
 801c1ca:	2001      	movs	r0, #1
 801c1cc:	e030      	b.n	801c230 <_dtoa_r+0x828>
 801c1ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c1d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c1d4:	e795      	b.n	801c102 <_dtoa_r+0x6fa>
 801c1d6:	9b07      	ldr	r3, [sp, #28]
 801c1d8:	f109 37ff 	add.w	r7, r9, #4294967295
 801c1dc:	42bb      	cmp	r3, r7
 801c1de:	bfbf      	itttt	lt
 801c1e0:	9b07      	ldrlt	r3, [sp, #28]
 801c1e2:	9707      	strlt	r7, [sp, #28]
 801c1e4:	1afa      	sublt	r2, r7, r3
 801c1e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801c1e8:	bfbb      	ittet	lt
 801c1ea:	189b      	addlt	r3, r3, r2
 801c1ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c1ee:	1bdf      	subge	r7, r3, r7
 801c1f0:	2700      	movlt	r7, #0
 801c1f2:	f1b9 0f00 	cmp.w	r9, #0
 801c1f6:	bfb5      	itete	lt
 801c1f8:	9b05      	ldrlt	r3, [sp, #20]
 801c1fa:	9d05      	ldrge	r5, [sp, #20]
 801c1fc:	eba3 0509 	sublt.w	r5, r3, r9
 801c200:	464b      	movge	r3, r9
 801c202:	bfb8      	it	lt
 801c204:	2300      	movlt	r3, #0
 801c206:	e77e      	b.n	801c106 <_dtoa_r+0x6fe>
 801c208:	9f07      	ldr	r7, [sp, #28]
 801c20a:	9d05      	ldr	r5, [sp, #20]
 801c20c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801c20e:	e783      	b.n	801c118 <_dtoa_r+0x710>
 801c210:	9a07      	ldr	r2, [sp, #28]
 801c212:	e7ab      	b.n	801c16c <_dtoa_r+0x764>
 801c214:	2300      	movs	r3, #0
 801c216:	e7d4      	b.n	801c1c2 <_dtoa_r+0x7ba>
 801c218:	9b00      	ldr	r3, [sp, #0]
 801c21a:	e7d2      	b.n	801c1c2 <_dtoa_r+0x7ba>
 801c21c:	2300      	movs	r3, #0
 801c21e:	9307      	str	r3, [sp, #28]
 801c220:	693b      	ldr	r3, [r7, #16]
 801c222:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801c226:	6918      	ldr	r0, [r3, #16]
 801c228:	f000 ffb5 	bl	801d196 <__hi0bits>
 801c22c:	f1c0 0020 	rsb	r0, r0, #32
 801c230:	4440      	add	r0, r8
 801c232:	f010 001f 	ands.w	r0, r0, #31
 801c236:	d047      	beq.n	801c2c8 <_dtoa_r+0x8c0>
 801c238:	f1c0 0320 	rsb	r3, r0, #32
 801c23c:	2b04      	cmp	r3, #4
 801c23e:	dd3b      	ble.n	801c2b8 <_dtoa_r+0x8b0>
 801c240:	9b05      	ldr	r3, [sp, #20]
 801c242:	f1c0 001c 	rsb	r0, r0, #28
 801c246:	4403      	add	r3, r0
 801c248:	9305      	str	r3, [sp, #20]
 801c24a:	4405      	add	r5, r0
 801c24c:	4480      	add	r8, r0
 801c24e:	9b05      	ldr	r3, [sp, #20]
 801c250:	2b00      	cmp	r3, #0
 801c252:	dd05      	ble.n	801c260 <_dtoa_r+0x858>
 801c254:	461a      	mov	r2, r3
 801c256:	9904      	ldr	r1, [sp, #16]
 801c258:	4620      	mov	r0, r4
 801c25a:	f001 f8d7 	bl	801d40c <__lshift>
 801c25e:	9004      	str	r0, [sp, #16]
 801c260:	f1b8 0f00 	cmp.w	r8, #0
 801c264:	dd05      	ble.n	801c272 <_dtoa_r+0x86a>
 801c266:	4639      	mov	r1, r7
 801c268:	4642      	mov	r2, r8
 801c26a:	4620      	mov	r0, r4
 801c26c:	f001 f8ce 	bl	801d40c <__lshift>
 801c270:	4607      	mov	r7, r0
 801c272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c274:	b353      	cbz	r3, 801c2cc <_dtoa_r+0x8c4>
 801c276:	4639      	mov	r1, r7
 801c278:	9804      	ldr	r0, [sp, #16]
 801c27a:	f001 f91b 	bl	801d4b4 <__mcmp>
 801c27e:	2800      	cmp	r0, #0
 801c280:	da24      	bge.n	801c2cc <_dtoa_r+0x8c4>
 801c282:	2300      	movs	r3, #0
 801c284:	220a      	movs	r2, #10
 801c286:	9904      	ldr	r1, [sp, #16]
 801c288:	4620      	mov	r0, r4
 801c28a:	f000 ff0b 	bl	801d0a4 <__multadd>
 801c28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c290:	9004      	str	r0, [sp, #16]
 801c292:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c296:	2b00      	cmp	r3, #0
 801c298:	f000 814d 	beq.w	801c536 <_dtoa_r+0xb2e>
 801c29c:	2300      	movs	r3, #0
 801c29e:	4631      	mov	r1, r6
 801c2a0:	220a      	movs	r2, #10
 801c2a2:	4620      	mov	r0, r4
 801c2a4:	f000 fefe 	bl	801d0a4 <__multadd>
 801c2a8:	9b02      	ldr	r3, [sp, #8]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	4606      	mov	r6, r0
 801c2ae:	dc4f      	bgt.n	801c350 <_dtoa_r+0x948>
 801c2b0:	9b06      	ldr	r3, [sp, #24]
 801c2b2:	2b02      	cmp	r3, #2
 801c2b4:	dd4c      	ble.n	801c350 <_dtoa_r+0x948>
 801c2b6:	e011      	b.n	801c2dc <_dtoa_r+0x8d4>
 801c2b8:	d0c9      	beq.n	801c24e <_dtoa_r+0x846>
 801c2ba:	9a05      	ldr	r2, [sp, #20]
 801c2bc:	331c      	adds	r3, #28
 801c2be:	441a      	add	r2, r3
 801c2c0:	9205      	str	r2, [sp, #20]
 801c2c2:	441d      	add	r5, r3
 801c2c4:	4498      	add	r8, r3
 801c2c6:	e7c2      	b.n	801c24e <_dtoa_r+0x846>
 801c2c8:	4603      	mov	r3, r0
 801c2ca:	e7f6      	b.n	801c2ba <_dtoa_r+0x8b2>
 801c2cc:	f1b9 0f00 	cmp.w	r9, #0
 801c2d0:	dc38      	bgt.n	801c344 <_dtoa_r+0x93c>
 801c2d2:	9b06      	ldr	r3, [sp, #24]
 801c2d4:	2b02      	cmp	r3, #2
 801c2d6:	dd35      	ble.n	801c344 <_dtoa_r+0x93c>
 801c2d8:	f8cd 9008 	str.w	r9, [sp, #8]
 801c2dc:	9b02      	ldr	r3, [sp, #8]
 801c2de:	b963      	cbnz	r3, 801c2fa <_dtoa_r+0x8f2>
 801c2e0:	4639      	mov	r1, r7
 801c2e2:	2205      	movs	r2, #5
 801c2e4:	4620      	mov	r0, r4
 801c2e6:	f000 fedd 	bl	801d0a4 <__multadd>
 801c2ea:	4601      	mov	r1, r0
 801c2ec:	4607      	mov	r7, r0
 801c2ee:	9804      	ldr	r0, [sp, #16]
 801c2f0:	f001 f8e0 	bl	801d4b4 <__mcmp>
 801c2f4:	2800      	cmp	r0, #0
 801c2f6:	f73f adcc 	bgt.w	801be92 <_dtoa_r+0x48a>
 801c2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2fc:	465d      	mov	r5, fp
 801c2fe:	ea6f 0a03 	mvn.w	sl, r3
 801c302:	f04f 0900 	mov.w	r9, #0
 801c306:	4639      	mov	r1, r7
 801c308:	4620      	mov	r0, r4
 801c30a:	f000 feb4 	bl	801d076 <_Bfree>
 801c30e:	2e00      	cmp	r6, #0
 801c310:	f43f aeb7 	beq.w	801c082 <_dtoa_r+0x67a>
 801c314:	f1b9 0f00 	cmp.w	r9, #0
 801c318:	d005      	beq.n	801c326 <_dtoa_r+0x91e>
 801c31a:	45b1      	cmp	r9, r6
 801c31c:	d003      	beq.n	801c326 <_dtoa_r+0x91e>
 801c31e:	4649      	mov	r1, r9
 801c320:	4620      	mov	r0, r4
 801c322:	f000 fea8 	bl	801d076 <_Bfree>
 801c326:	4631      	mov	r1, r6
 801c328:	4620      	mov	r0, r4
 801c32a:	f000 fea4 	bl	801d076 <_Bfree>
 801c32e:	e6a8      	b.n	801c082 <_dtoa_r+0x67a>
 801c330:	2700      	movs	r7, #0
 801c332:	463e      	mov	r6, r7
 801c334:	e7e1      	b.n	801c2fa <_dtoa_r+0x8f2>
 801c336:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c33a:	463e      	mov	r6, r7
 801c33c:	e5a9      	b.n	801be92 <_dtoa_r+0x48a>
 801c33e:	bf00      	nop
 801c340:	40240000 	.word	0x40240000
 801c344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c346:	f8cd 9008 	str.w	r9, [sp, #8]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	f000 80fa 	beq.w	801c544 <_dtoa_r+0xb3c>
 801c350:	2d00      	cmp	r5, #0
 801c352:	dd05      	ble.n	801c360 <_dtoa_r+0x958>
 801c354:	4631      	mov	r1, r6
 801c356:	462a      	mov	r2, r5
 801c358:	4620      	mov	r0, r4
 801c35a:	f001 f857 	bl	801d40c <__lshift>
 801c35e:	4606      	mov	r6, r0
 801c360:	9b07      	ldr	r3, [sp, #28]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d04c      	beq.n	801c400 <_dtoa_r+0x9f8>
 801c366:	6871      	ldr	r1, [r6, #4]
 801c368:	4620      	mov	r0, r4
 801c36a:	f000 fe50 	bl	801d00e <_Balloc>
 801c36e:	6932      	ldr	r2, [r6, #16]
 801c370:	3202      	adds	r2, #2
 801c372:	4605      	mov	r5, r0
 801c374:	0092      	lsls	r2, r2, #2
 801c376:	f106 010c 	add.w	r1, r6, #12
 801c37a:	300c      	adds	r0, #12
 801c37c:	f7fd fa70 	bl	8019860 <memcpy>
 801c380:	2201      	movs	r2, #1
 801c382:	4629      	mov	r1, r5
 801c384:	4620      	mov	r0, r4
 801c386:	f001 f841 	bl	801d40c <__lshift>
 801c38a:	9b00      	ldr	r3, [sp, #0]
 801c38c:	f8cd b014 	str.w	fp, [sp, #20]
 801c390:	f003 0301 	and.w	r3, r3, #1
 801c394:	46b1      	mov	r9, r6
 801c396:	9307      	str	r3, [sp, #28]
 801c398:	4606      	mov	r6, r0
 801c39a:	4639      	mov	r1, r7
 801c39c:	9804      	ldr	r0, [sp, #16]
 801c39e:	f7ff faa4 	bl	801b8ea <quorem>
 801c3a2:	4649      	mov	r1, r9
 801c3a4:	4605      	mov	r5, r0
 801c3a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801c3aa:	9804      	ldr	r0, [sp, #16]
 801c3ac:	f001 f882 	bl	801d4b4 <__mcmp>
 801c3b0:	4632      	mov	r2, r6
 801c3b2:	9000      	str	r0, [sp, #0]
 801c3b4:	4639      	mov	r1, r7
 801c3b6:	4620      	mov	r0, r4
 801c3b8:	f001 f896 	bl	801d4e8 <__mdiff>
 801c3bc:	68c3      	ldr	r3, [r0, #12]
 801c3be:	4602      	mov	r2, r0
 801c3c0:	bb03      	cbnz	r3, 801c404 <_dtoa_r+0x9fc>
 801c3c2:	4601      	mov	r1, r0
 801c3c4:	9008      	str	r0, [sp, #32]
 801c3c6:	9804      	ldr	r0, [sp, #16]
 801c3c8:	f001 f874 	bl	801d4b4 <__mcmp>
 801c3cc:	9a08      	ldr	r2, [sp, #32]
 801c3ce:	4603      	mov	r3, r0
 801c3d0:	4611      	mov	r1, r2
 801c3d2:	4620      	mov	r0, r4
 801c3d4:	9308      	str	r3, [sp, #32]
 801c3d6:	f000 fe4e 	bl	801d076 <_Bfree>
 801c3da:	9b08      	ldr	r3, [sp, #32]
 801c3dc:	b9a3      	cbnz	r3, 801c408 <_dtoa_r+0xa00>
 801c3de:	9a06      	ldr	r2, [sp, #24]
 801c3e0:	b992      	cbnz	r2, 801c408 <_dtoa_r+0xa00>
 801c3e2:	9a07      	ldr	r2, [sp, #28]
 801c3e4:	b982      	cbnz	r2, 801c408 <_dtoa_r+0xa00>
 801c3e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801c3ea:	d029      	beq.n	801c440 <_dtoa_r+0xa38>
 801c3ec:	9b00      	ldr	r3, [sp, #0]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	dd01      	ble.n	801c3f6 <_dtoa_r+0x9ee>
 801c3f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801c3f6:	9b05      	ldr	r3, [sp, #20]
 801c3f8:	1c5d      	adds	r5, r3, #1
 801c3fa:	f883 8000 	strb.w	r8, [r3]
 801c3fe:	e782      	b.n	801c306 <_dtoa_r+0x8fe>
 801c400:	4630      	mov	r0, r6
 801c402:	e7c2      	b.n	801c38a <_dtoa_r+0x982>
 801c404:	2301      	movs	r3, #1
 801c406:	e7e3      	b.n	801c3d0 <_dtoa_r+0x9c8>
 801c408:	9a00      	ldr	r2, [sp, #0]
 801c40a:	2a00      	cmp	r2, #0
 801c40c:	db04      	blt.n	801c418 <_dtoa_r+0xa10>
 801c40e:	d125      	bne.n	801c45c <_dtoa_r+0xa54>
 801c410:	9a06      	ldr	r2, [sp, #24]
 801c412:	bb1a      	cbnz	r2, 801c45c <_dtoa_r+0xa54>
 801c414:	9a07      	ldr	r2, [sp, #28]
 801c416:	bb0a      	cbnz	r2, 801c45c <_dtoa_r+0xa54>
 801c418:	2b00      	cmp	r3, #0
 801c41a:	ddec      	ble.n	801c3f6 <_dtoa_r+0x9ee>
 801c41c:	2201      	movs	r2, #1
 801c41e:	9904      	ldr	r1, [sp, #16]
 801c420:	4620      	mov	r0, r4
 801c422:	f000 fff3 	bl	801d40c <__lshift>
 801c426:	4639      	mov	r1, r7
 801c428:	9004      	str	r0, [sp, #16]
 801c42a:	f001 f843 	bl	801d4b4 <__mcmp>
 801c42e:	2800      	cmp	r0, #0
 801c430:	dc03      	bgt.n	801c43a <_dtoa_r+0xa32>
 801c432:	d1e0      	bne.n	801c3f6 <_dtoa_r+0x9ee>
 801c434:	f018 0f01 	tst.w	r8, #1
 801c438:	d0dd      	beq.n	801c3f6 <_dtoa_r+0x9ee>
 801c43a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801c43e:	d1d8      	bne.n	801c3f2 <_dtoa_r+0x9ea>
 801c440:	9b05      	ldr	r3, [sp, #20]
 801c442:	9a05      	ldr	r2, [sp, #20]
 801c444:	1c5d      	adds	r5, r3, #1
 801c446:	2339      	movs	r3, #57	; 0x39
 801c448:	7013      	strb	r3, [r2, #0]
 801c44a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c44e:	2b39      	cmp	r3, #57	; 0x39
 801c450:	f105 32ff 	add.w	r2, r5, #4294967295
 801c454:	d04f      	beq.n	801c4f6 <_dtoa_r+0xaee>
 801c456:	3301      	adds	r3, #1
 801c458:	7013      	strb	r3, [r2, #0]
 801c45a:	e754      	b.n	801c306 <_dtoa_r+0x8fe>
 801c45c:	9a05      	ldr	r2, [sp, #20]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	f102 0501 	add.w	r5, r2, #1
 801c464:	dd06      	ble.n	801c474 <_dtoa_r+0xa6c>
 801c466:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801c46a:	d0e9      	beq.n	801c440 <_dtoa_r+0xa38>
 801c46c:	f108 0801 	add.w	r8, r8, #1
 801c470:	9b05      	ldr	r3, [sp, #20]
 801c472:	e7c2      	b.n	801c3fa <_dtoa_r+0x9f2>
 801c474:	9a02      	ldr	r2, [sp, #8]
 801c476:	f805 8c01 	strb.w	r8, [r5, #-1]
 801c47a:	eba5 030b 	sub.w	r3, r5, fp
 801c47e:	4293      	cmp	r3, r2
 801c480:	d021      	beq.n	801c4c6 <_dtoa_r+0xabe>
 801c482:	2300      	movs	r3, #0
 801c484:	220a      	movs	r2, #10
 801c486:	9904      	ldr	r1, [sp, #16]
 801c488:	4620      	mov	r0, r4
 801c48a:	f000 fe0b 	bl	801d0a4 <__multadd>
 801c48e:	45b1      	cmp	r9, r6
 801c490:	9004      	str	r0, [sp, #16]
 801c492:	f04f 0300 	mov.w	r3, #0
 801c496:	f04f 020a 	mov.w	r2, #10
 801c49a:	4649      	mov	r1, r9
 801c49c:	4620      	mov	r0, r4
 801c49e:	d105      	bne.n	801c4ac <_dtoa_r+0xaa4>
 801c4a0:	f000 fe00 	bl	801d0a4 <__multadd>
 801c4a4:	4681      	mov	r9, r0
 801c4a6:	4606      	mov	r6, r0
 801c4a8:	9505      	str	r5, [sp, #20]
 801c4aa:	e776      	b.n	801c39a <_dtoa_r+0x992>
 801c4ac:	f000 fdfa 	bl	801d0a4 <__multadd>
 801c4b0:	4631      	mov	r1, r6
 801c4b2:	4681      	mov	r9, r0
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	220a      	movs	r2, #10
 801c4b8:	4620      	mov	r0, r4
 801c4ba:	f000 fdf3 	bl	801d0a4 <__multadd>
 801c4be:	4606      	mov	r6, r0
 801c4c0:	e7f2      	b.n	801c4a8 <_dtoa_r+0xaa0>
 801c4c2:	f04f 0900 	mov.w	r9, #0
 801c4c6:	2201      	movs	r2, #1
 801c4c8:	9904      	ldr	r1, [sp, #16]
 801c4ca:	4620      	mov	r0, r4
 801c4cc:	f000 ff9e 	bl	801d40c <__lshift>
 801c4d0:	4639      	mov	r1, r7
 801c4d2:	9004      	str	r0, [sp, #16]
 801c4d4:	f000 ffee 	bl	801d4b4 <__mcmp>
 801c4d8:	2800      	cmp	r0, #0
 801c4da:	dcb6      	bgt.n	801c44a <_dtoa_r+0xa42>
 801c4dc:	d102      	bne.n	801c4e4 <_dtoa_r+0xadc>
 801c4de:	f018 0f01 	tst.w	r8, #1
 801c4e2:	d1b2      	bne.n	801c44a <_dtoa_r+0xa42>
 801c4e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c4e8:	2b30      	cmp	r3, #48	; 0x30
 801c4ea:	f105 32ff 	add.w	r2, r5, #4294967295
 801c4ee:	f47f af0a 	bne.w	801c306 <_dtoa_r+0x8fe>
 801c4f2:	4615      	mov	r5, r2
 801c4f4:	e7f6      	b.n	801c4e4 <_dtoa_r+0xadc>
 801c4f6:	4593      	cmp	fp, r2
 801c4f8:	d105      	bne.n	801c506 <_dtoa_r+0xafe>
 801c4fa:	2331      	movs	r3, #49	; 0x31
 801c4fc:	f10a 0a01 	add.w	sl, sl, #1
 801c500:	f88b 3000 	strb.w	r3, [fp]
 801c504:	e6ff      	b.n	801c306 <_dtoa_r+0x8fe>
 801c506:	4615      	mov	r5, r2
 801c508:	e79f      	b.n	801c44a <_dtoa_r+0xa42>
 801c50a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801c570 <_dtoa_r+0xb68>
 801c50e:	e007      	b.n	801c520 <_dtoa_r+0xb18>
 801c510:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c512:	f8df b060 	ldr.w	fp, [pc, #96]	; 801c574 <_dtoa_r+0xb6c>
 801c516:	b11b      	cbz	r3, 801c520 <_dtoa_r+0xb18>
 801c518:	f10b 0308 	add.w	r3, fp, #8
 801c51c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c51e:	6013      	str	r3, [r2, #0]
 801c520:	4658      	mov	r0, fp
 801c522:	b017      	add	sp, #92	; 0x5c
 801c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c528:	9b06      	ldr	r3, [sp, #24]
 801c52a:	2b01      	cmp	r3, #1
 801c52c:	f77f ae35 	ble.w	801c19a <_dtoa_r+0x792>
 801c530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c532:	9307      	str	r3, [sp, #28]
 801c534:	e649      	b.n	801c1ca <_dtoa_r+0x7c2>
 801c536:	9b02      	ldr	r3, [sp, #8]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	dc03      	bgt.n	801c544 <_dtoa_r+0xb3c>
 801c53c:	9b06      	ldr	r3, [sp, #24]
 801c53e:	2b02      	cmp	r3, #2
 801c540:	f73f aecc 	bgt.w	801c2dc <_dtoa_r+0x8d4>
 801c544:	465d      	mov	r5, fp
 801c546:	4639      	mov	r1, r7
 801c548:	9804      	ldr	r0, [sp, #16]
 801c54a:	f7ff f9ce 	bl	801b8ea <quorem>
 801c54e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801c552:	f805 8b01 	strb.w	r8, [r5], #1
 801c556:	9a02      	ldr	r2, [sp, #8]
 801c558:	eba5 030b 	sub.w	r3, r5, fp
 801c55c:	429a      	cmp	r2, r3
 801c55e:	ddb0      	ble.n	801c4c2 <_dtoa_r+0xaba>
 801c560:	2300      	movs	r3, #0
 801c562:	220a      	movs	r2, #10
 801c564:	9904      	ldr	r1, [sp, #16]
 801c566:	4620      	mov	r0, r4
 801c568:	f000 fd9c 	bl	801d0a4 <__multadd>
 801c56c:	9004      	str	r0, [sp, #16]
 801c56e:	e7ea      	b.n	801c546 <_dtoa_r+0xb3e>
 801c570:	0801e9d9 	.word	0x0801e9d9
 801c574:	0801ea58 	.word	0x0801ea58

0801c578 <__sflush_r>:
 801c578:	898a      	ldrh	r2, [r1, #12]
 801c57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c57e:	4605      	mov	r5, r0
 801c580:	0710      	lsls	r0, r2, #28
 801c582:	460c      	mov	r4, r1
 801c584:	d458      	bmi.n	801c638 <__sflush_r+0xc0>
 801c586:	684b      	ldr	r3, [r1, #4]
 801c588:	2b00      	cmp	r3, #0
 801c58a:	dc05      	bgt.n	801c598 <__sflush_r+0x20>
 801c58c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c58e:	2b00      	cmp	r3, #0
 801c590:	dc02      	bgt.n	801c598 <__sflush_r+0x20>
 801c592:	2000      	movs	r0, #0
 801c594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c59a:	2e00      	cmp	r6, #0
 801c59c:	d0f9      	beq.n	801c592 <__sflush_r+0x1a>
 801c59e:	2300      	movs	r3, #0
 801c5a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c5a4:	682f      	ldr	r7, [r5, #0]
 801c5a6:	6a21      	ldr	r1, [r4, #32]
 801c5a8:	602b      	str	r3, [r5, #0]
 801c5aa:	d032      	beq.n	801c612 <__sflush_r+0x9a>
 801c5ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c5ae:	89a3      	ldrh	r3, [r4, #12]
 801c5b0:	075a      	lsls	r2, r3, #29
 801c5b2:	d505      	bpl.n	801c5c0 <__sflush_r+0x48>
 801c5b4:	6863      	ldr	r3, [r4, #4]
 801c5b6:	1ac0      	subs	r0, r0, r3
 801c5b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c5ba:	b10b      	cbz	r3, 801c5c0 <__sflush_r+0x48>
 801c5bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c5be:	1ac0      	subs	r0, r0, r3
 801c5c0:	2300      	movs	r3, #0
 801c5c2:	4602      	mov	r2, r0
 801c5c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c5c6:	6a21      	ldr	r1, [r4, #32]
 801c5c8:	4628      	mov	r0, r5
 801c5ca:	47b0      	blx	r6
 801c5cc:	1c43      	adds	r3, r0, #1
 801c5ce:	89a3      	ldrh	r3, [r4, #12]
 801c5d0:	d106      	bne.n	801c5e0 <__sflush_r+0x68>
 801c5d2:	6829      	ldr	r1, [r5, #0]
 801c5d4:	291d      	cmp	r1, #29
 801c5d6:	d848      	bhi.n	801c66a <__sflush_r+0xf2>
 801c5d8:	4a29      	ldr	r2, [pc, #164]	; (801c680 <__sflush_r+0x108>)
 801c5da:	40ca      	lsrs	r2, r1
 801c5dc:	07d6      	lsls	r6, r2, #31
 801c5de:	d544      	bpl.n	801c66a <__sflush_r+0xf2>
 801c5e0:	2200      	movs	r2, #0
 801c5e2:	6062      	str	r2, [r4, #4]
 801c5e4:	04d9      	lsls	r1, r3, #19
 801c5e6:	6922      	ldr	r2, [r4, #16]
 801c5e8:	6022      	str	r2, [r4, #0]
 801c5ea:	d504      	bpl.n	801c5f6 <__sflush_r+0x7e>
 801c5ec:	1c42      	adds	r2, r0, #1
 801c5ee:	d101      	bne.n	801c5f4 <__sflush_r+0x7c>
 801c5f0:	682b      	ldr	r3, [r5, #0]
 801c5f2:	b903      	cbnz	r3, 801c5f6 <__sflush_r+0x7e>
 801c5f4:	6560      	str	r0, [r4, #84]	; 0x54
 801c5f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c5f8:	602f      	str	r7, [r5, #0]
 801c5fa:	2900      	cmp	r1, #0
 801c5fc:	d0c9      	beq.n	801c592 <__sflush_r+0x1a>
 801c5fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c602:	4299      	cmp	r1, r3
 801c604:	d002      	beq.n	801c60c <__sflush_r+0x94>
 801c606:	4628      	mov	r0, r5
 801c608:	f001 f90e 	bl	801d828 <_free_r>
 801c60c:	2000      	movs	r0, #0
 801c60e:	6360      	str	r0, [r4, #52]	; 0x34
 801c610:	e7c0      	b.n	801c594 <__sflush_r+0x1c>
 801c612:	2301      	movs	r3, #1
 801c614:	4628      	mov	r0, r5
 801c616:	47b0      	blx	r6
 801c618:	1c41      	adds	r1, r0, #1
 801c61a:	d1c8      	bne.n	801c5ae <__sflush_r+0x36>
 801c61c:	682b      	ldr	r3, [r5, #0]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d0c5      	beq.n	801c5ae <__sflush_r+0x36>
 801c622:	2b1d      	cmp	r3, #29
 801c624:	d001      	beq.n	801c62a <__sflush_r+0xb2>
 801c626:	2b16      	cmp	r3, #22
 801c628:	d101      	bne.n	801c62e <__sflush_r+0xb6>
 801c62a:	602f      	str	r7, [r5, #0]
 801c62c:	e7b1      	b.n	801c592 <__sflush_r+0x1a>
 801c62e:	89a3      	ldrh	r3, [r4, #12]
 801c630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c634:	81a3      	strh	r3, [r4, #12]
 801c636:	e7ad      	b.n	801c594 <__sflush_r+0x1c>
 801c638:	690f      	ldr	r7, [r1, #16]
 801c63a:	2f00      	cmp	r7, #0
 801c63c:	d0a9      	beq.n	801c592 <__sflush_r+0x1a>
 801c63e:	0793      	lsls	r3, r2, #30
 801c640:	680e      	ldr	r6, [r1, #0]
 801c642:	bf08      	it	eq
 801c644:	694b      	ldreq	r3, [r1, #20]
 801c646:	600f      	str	r7, [r1, #0]
 801c648:	bf18      	it	ne
 801c64a:	2300      	movne	r3, #0
 801c64c:	eba6 0807 	sub.w	r8, r6, r7
 801c650:	608b      	str	r3, [r1, #8]
 801c652:	f1b8 0f00 	cmp.w	r8, #0
 801c656:	dd9c      	ble.n	801c592 <__sflush_r+0x1a>
 801c658:	4643      	mov	r3, r8
 801c65a:	463a      	mov	r2, r7
 801c65c:	6a21      	ldr	r1, [r4, #32]
 801c65e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c660:	4628      	mov	r0, r5
 801c662:	47b0      	blx	r6
 801c664:	2800      	cmp	r0, #0
 801c666:	dc06      	bgt.n	801c676 <__sflush_r+0xfe>
 801c668:	89a3      	ldrh	r3, [r4, #12]
 801c66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c66e:	81a3      	strh	r3, [r4, #12]
 801c670:	f04f 30ff 	mov.w	r0, #4294967295
 801c674:	e78e      	b.n	801c594 <__sflush_r+0x1c>
 801c676:	4407      	add	r7, r0
 801c678:	eba8 0800 	sub.w	r8, r8, r0
 801c67c:	e7e9      	b.n	801c652 <__sflush_r+0xda>
 801c67e:	bf00      	nop
 801c680:	20400001 	.word	0x20400001

0801c684 <_fflush_r>:
 801c684:	b538      	push	{r3, r4, r5, lr}
 801c686:	690b      	ldr	r3, [r1, #16]
 801c688:	4605      	mov	r5, r0
 801c68a:	460c      	mov	r4, r1
 801c68c:	b1db      	cbz	r3, 801c6c6 <_fflush_r+0x42>
 801c68e:	b118      	cbz	r0, 801c698 <_fflush_r+0x14>
 801c690:	6983      	ldr	r3, [r0, #24]
 801c692:	b90b      	cbnz	r3, 801c698 <_fflush_r+0x14>
 801c694:	f000 f860 	bl	801c758 <__sinit>
 801c698:	4b0c      	ldr	r3, [pc, #48]	; (801c6cc <_fflush_r+0x48>)
 801c69a:	429c      	cmp	r4, r3
 801c69c:	d109      	bne.n	801c6b2 <_fflush_r+0x2e>
 801c69e:	686c      	ldr	r4, [r5, #4]
 801c6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6a4:	b17b      	cbz	r3, 801c6c6 <_fflush_r+0x42>
 801c6a6:	4621      	mov	r1, r4
 801c6a8:	4628      	mov	r0, r5
 801c6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c6ae:	f7ff bf63 	b.w	801c578 <__sflush_r>
 801c6b2:	4b07      	ldr	r3, [pc, #28]	; (801c6d0 <_fflush_r+0x4c>)
 801c6b4:	429c      	cmp	r4, r3
 801c6b6:	d101      	bne.n	801c6bc <_fflush_r+0x38>
 801c6b8:	68ac      	ldr	r4, [r5, #8]
 801c6ba:	e7f1      	b.n	801c6a0 <_fflush_r+0x1c>
 801c6bc:	4b05      	ldr	r3, [pc, #20]	; (801c6d4 <_fflush_r+0x50>)
 801c6be:	429c      	cmp	r4, r3
 801c6c0:	bf08      	it	eq
 801c6c2:	68ec      	ldreq	r4, [r5, #12]
 801c6c4:	e7ec      	b.n	801c6a0 <_fflush_r+0x1c>
 801c6c6:	2000      	movs	r0, #0
 801c6c8:	bd38      	pop	{r3, r4, r5, pc}
 801c6ca:	bf00      	nop
 801c6cc:	0801ea88 	.word	0x0801ea88
 801c6d0:	0801eaa8 	.word	0x0801eaa8
 801c6d4:	0801ea68 	.word	0x0801ea68

0801c6d8 <std>:
 801c6d8:	2300      	movs	r3, #0
 801c6da:	b510      	push	{r4, lr}
 801c6dc:	4604      	mov	r4, r0
 801c6de:	e9c0 3300 	strd	r3, r3, [r0]
 801c6e2:	6083      	str	r3, [r0, #8]
 801c6e4:	8181      	strh	r1, [r0, #12]
 801c6e6:	6643      	str	r3, [r0, #100]	; 0x64
 801c6e8:	81c2      	strh	r2, [r0, #14]
 801c6ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c6ee:	6183      	str	r3, [r0, #24]
 801c6f0:	4619      	mov	r1, r3
 801c6f2:	2208      	movs	r2, #8
 801c6f4:	305c      	adds	r0, #92	; 0x5c
 801c6f6:	f7fd f8be 	bl	8019876 <memset>
 801c6fa:	4b05      	ldr	r3, [pc, #20]	; (801c710 <std+0x38>)
 801c6fc:	6263      	str	r3, [r4, #36]	; 0x24
 801c6fe:	4b05      	ldr	r3, [pc, #20]	; (801c714 <std+0x3c>)
 801c700:	62a3      	str	r3, [r4, #40]	; 0x28
 801c702:	4b05      	ldr	r3, [pc, #20]	; (801c718 <std+0x40>)
 801c704:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c706:	4b05      	ldr	r3, [pc, #20]	; (801c71c <std+0x44>)
 801c708:	6224      	str	r4, [r4, #32]
 801c70a:	6323      	str	r3, [r4, #48]	; 0x30
 801c70c:	bd10      	pop	{r4, pc}
 801c70e:	bf00      	nop
 801c710:	0801dd11 	.word	0x0801dd11
 801c714:	0801dd33 	.word	0x0801dd33
 801c718:	0801dd6b 	.word	0x0801dd6b
 801c71c:	0801dd8f 	.word	0x0801dd8f

0801c720 <_cleanup_r>:
 801c720:	4901      	ldr	r1, [pc, #4]	; (801c728 <_cleanup_r+0x8>)
 801c722:	f000 b885 	b.w	801c830 <_fwalk_reent>
 801c726:	bf00      	nop
 801c728:	0801c685 	.word	0x0801c685

0801c72c <__sfmoreglue>:
 801c72c:	b570      	push	{r4, r5, r6, lr}
 801c72e:	1e4a      	subs	r2, r1, #1
 801c730:	2568      	movs	r5, #104	; 0x68
 801c732:	4355      	muls	r5, r2
 801c734:	460e      	mov	r6, r1
 801c736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c73a:	f001 f8c3 	bl	801d8c4 <_malloc_r>
 801c73e:	4604      	mov	r4, r0
 801c740:	b140      	cbz	r0, 801c754 <__sfmoreglue+0x28>
 801c742:	2100      	movs	r1, #0
 801c744:	e9c0 1600 	strd	r1, r6, [r0]
 801c748:	300c      	adds	r0, #12
 801c74a:	60a0      	str	r0, [r4, #8]
 801c74c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c750:	f7fd f891 	bl	8019876 <memset>
 801c754:	4620      	mov	r0, r4
 801c756:	bd70      	pop	{r4, r5, r6, pc}

0801c758 <__sinit>:
 801c758:	6983      	ldr	r3, [r0, #24]
 801c75a:	b510      	push	{r4, lr}
 801c75c:	4604      	mov	r4, r0
 801c75e:	bb33      	cbnz	r3, 801c7ae <__sinit+0x56>
 801c760:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801c764:	6503      	str	r3, [r0, #80]	; 0x50
 801c766:	4b12      	ldr	r3, [pc, #72]	; (801c7b0 <__sinit+0x58>)
 801c768:	4a12      	ldr	r2, [pc, #72]	; (801c7b4 <__sinit+0x5c>)
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	6282      	str	r2, [r0, #40]	; 0x28
 801c76e:	4298      	cmp	r0, r3
 801c770:	bf04      	itt	eq
 801c772:	2301      	moveq	r3, #1
 801c774:	6183      	streq	r3, [r0, #24]
 801c776:	f000 f81f 	bl	801c7b8 <__sfp>
 801c77a:	6060      	str	r0, [r4, #4]
 801c77c:	4620      	mov	r0, r4
 801c77e:	f000 f81b 	bl	801c7b8 <__sfp>
 801c782:	60a0      	str	r0, [r4, #8]
 801c784:	4620      	mov	r0, r4
 801c786:	f000 f817 	bl	801c7b8 <__sfp>
 801c78a:	2200      	movs	r2, #0
 801c78c:	60e0      	str	r0, [r4, #12]
 801c78e:	2104      	movs	r1, #4
 801c790:	6860      	ldr	r0, [r4, #4]
 801c792:	f7ff ffa1 	bl	801c6d8 <std>
 801c796:	2201      	movs	r2, #1
 801c798:	2109      	movs	r1, #9
 801c79a:	68a0      	ldr	r0, [r4, #8]
 801c79c:	f7ff ff9c 	bl	801c6d8 <std>
 801c7a0:	2202      	movs	r2, #2
 801c7a2:	2112      	movs	r1, #18
 801c7a4:	68e0      	ldr	r0, [r4, #12]
 801c7a6:	f7ff ff97 	bl	801c6d8 <std>
 801c7aa:	2301      	movs	r3, #1
 801c7ac:	61a3      	str	r3, [r4, #24]
 801c7ae:	bd10      	pop	{r4, pc}
 801c7b0:	0801e9b8 	.word	0x0801e9b8
 801c7b4:	0801c721 	.word	0x0801c721

0801c7b8 <__sfp>:
 801c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7ba:	4b1b      	ldr	r3, [pc, #108]	; (801c828 <__sfp+0x70>)
 801c7bc:	681e      	ldr	r6, [r3, #0]
 801c7be:	69b3      	ldr	r3, [r6, #24]
 801c7c0:	4607      	mov	r7, r0
 801c7c2:	b913      	cbnz	r3, 801c7ca <__sfp+0x12>
 801c7c4:	4630      	mov	r0, r6
 801c7c6:	f7ff ffc7 	bl	801c758 <__sinit>
 801c7ca:	3648      	adds	r6, #72	; 0x48
 801c7cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c7d0:	3b01      	subs	r3, #1
 801c7d2:	d503      	bpl.n	801c7dc <__sfp+0x24>
 801c7d4:	6833      	ldr	r3, [r6, #0]
 801c7d6:	b133      	cbz	r3, 801c7e6 <__sfp+0x2e>
 801c7d8:	6836      	ldr	r6, [r6, #0]
 801c7da:	e7f7      	b.n	801c7cc <__sfp+0x14>
 801c7dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c7e0:	b16d      	cbz	r5, 801c7fe <__sfp+0x46>
 801c7e2:	3468      	adds	r4, #104	; 0x68
 801c7e4:	e7f4      	b.n	801c7d0 <__sfp+0x18>
 801c7e6:	2104      	movs	r1, #4
 801c7e8:	4638      	mov	r0, r7
 801c7ea:	f7ff ff9f 	bl	801c72c <__sfmoreglue>
 801c7ee:	6030      	str	r0, [r6, #0]
 801c7f0:	2800      	cmp	r0, #0
 801c7f2:	d1f1      	bne.n	801c7d8 <__sfp+0x20>
 801c7f4:	230c      	movs	r3, #12
 801c7f6:	603b      	str	r3, [r7, #0]
 801c7f8:	4604      	mov	r4, r0
 801c7fa:	4620      	mov	r0, r4
 801c7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7fe:	4b0b      	ldr	r3, [pc, #44]	; (801c82c <__sfp+0x74>)
 801c800:	6665      	str	r5, [r4, #100]	; 0x64
 801c802:	e9c4 5500 	strd	r5, r5, [r4]
 801c806:	60a5      	str	r5, [r4, #8]
 801c808:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801c80c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c810:	2208      	movs	r2, #8
 801c812:	4629      	mov	r1, r5
 801c814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c818:	f7fd f82d 	bl	8019876 <memset>
 801c81c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c824:	e7e9      	b.n	801c7fa <__sfp+0x42>
 801c826:	bf00      	nop
 801c828:	0801e9b8 	.word	0x0801e9b8
 801c82c:	ffff0001 	.word	0xffff0001

0801c830 <_fwalk_reent>:
 801c830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c834:	4680      	mov	r8, r0
 801c836:	4689      	mov	r9, r1
 801c838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c83c:	2600      	movs	r6, #0
 801c83e:	b914      	cbnz	r4, 801c846 <_fwalk_reent+0x16>
 801c840:	4630      	mov	r0, r6
 801c842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c846:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c84a:	3f01      	subs	r7, #1
 801c84c:	d501      	bpl.n	801c852 <_fwalk_reent+0x22>
 801c84e:	6824      	ldr	r4, [r4, #0]
 801c850:	e7f5      	b.n	801c83e <_fwalk_reent+0xe>
 801c852:	89ab      	ldrh	r3, [r5, #12]
 801c854:	2b01      	cmp	r3, #1
 801c856:	d907      	bls.n	801c868 <_fwalk_reent+0x38>
 801c858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c85c:	3301      	adds	r3, #1
 801c85e:	d003      	beq.n	801c868 <_fwalk_reent+0x38>
 801c860:	4629      	mov	r1, r5
 801c862:	4640      	mov	r0, r8
 801c864:	47c8      	blx	r9
 801c866:	4306      	orrs	r6, r0
 801c868:	3568      	adds	r5, #104	; 0x68
 801c86a:	e7ee      	b.n	801c84a <_fwalk_reent+0x1a>

0801c86c <rshift>:
 801c86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c86e:	6906      	ldr	r6, [r0, #16]
 801c870:	114b      	asrs	r3, r1, #5
 801c872:	429e      	cmp	r6, r3
 801c874:	f100 0414 	add.w	r4, r0, #20
 801c878:	dd30      	ble.n	801c8dc <rshift+0x70>
 801c87a:	f011 011f 	ands.w	r1, r1, #31
 801c87e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801c882:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801c886:	d108      	bne.n	801c89a <rshift+0x2e>
 801c888:	4621      	mov	r1, r4
 801c88a:	42b2      	cmp	r2, r6
 801c88c:	460b      	mov	r3, r1
 801c88e:	d211      	bcs.n	801c8b4 <rshift+0x48>
 801c890:	f852 3b04 	ldr.w	r3, [r2], #4
 801c894:	f841 3b04 	str.w	r3, [r1], #4
 801c898:	e7f7      	b.n	801c88a <rshift+0x1e>
 801c89a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801c89e:	f1c1 0c20 	rsb	ip, r1, #32
 801c8a2:	40cd      	lsrs	r5, r1
 801c8a4:	3204      	adds	r2, #4
 801c8a6:	4623      	mov	r3, r4
 801c8a8:	42b2      	cmp	r2, r6
 801c8aa:	4617      	mov	r7, r2
 801c8ac:	d30c      	bcc.n	801c8c8 <rshift+0x5c>
 801c8ae:	601d      	str	r5, [r3, #0]
 801c8b0:	b105      	cbz	r5, 801c8b4 <rshift+0x48>
 801c8b2:	3304      	adds	r3, #4
 801c8b4:	1b1a      	subs	r2, r3, r4
 801c8b6:	42a3      	cmp	r3, r4
 801c8b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c8bc:	bf08      	it	eq
 801c8be:	2300      	moveq	r3, #0
 801c8c0:	6102      	str	r2, [r0, #16]
 801c8c2:	bf08      	it	eq
 801c8c4:	6143      	streq	r3, [r0, #20]
 801c8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8c8:	683f      	ldr	r7, [r7, #0]
 801c8ca:	fa07 f70c 	lsl.w	r7, r7, ip
 801c8ce:	433d      	orrs	r5, r7
 801c8d0:	f843 5b04 	str.w	r5, [r3], #4
 801c8d4:	f852 5b04 	ldr.w	r5, [r2], #4
 801c8d8:	40cd      	lsrs	r5, r1
 801c8da:	e7e5      	b.n	801c8a8 <rshift+0x3c>
 801c8dc:	4623      	mov	r3, r4
 801c8de:	e7e9      	b.n	801c8b4 <rshift+0x48>

0801c8e0 <__hexdig_fun>:
 801c8e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c8e4:	2b09      	cmp	r3, #9
 801c8e6:	d802      	bhi.n	801c8ee <__hexdig_fun+0xe>
 801c8e8:	3820      	subs	r0, #32
 801c8ea:	b2c0      	uxtb	r0, r0
 801c8ec:	4770      	bx	lr
 801c8ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c8f2:	2b05      	cmp	r3, #5
 801c8f4:	d801      	bhi.n	801c8fa <__hexdig_fun+0x1a>
 801c8f6:	3847      	subs	r0, #71	; 0x47
 801c8f8:	e7f7      	b.n	801c8ea <__hexdig_fun+0xa>
 801c8fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c8fe:	2b05      	cmp	r3, #5
 801c900:	d801      	bhi.n	801c906 <__hexdig_fun+0x26>
 801c902:	3827      	subs	r0, #39	; 0x27
 801c904:	e7f1      	b.n	801c8ea <__hexdig_fun+0xa>
 801c906:	2000      	movs	r0, #0
 801c908:	4770      	bx	lr

0801c90a <__gethex>:
 801c90a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c90e:	b08b      	sub	sp, #44	; 0x2c
 801c910:	468a      	mov	sl, r1
 801c912:	9002      	str	r0, [sp, #8]
 801c914:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c916:	9306      	str	r3, [sp, #24]
 801c918:	4690      	mov	r8, r2
 801c91a:	f000 fad0 	bl	801cebe <__localeconv_l>
 801c91e:	6803      	ldr	r3, [r0, #0]
 801c920:	9303      	str	r3, [sp, #12]
 801c922:	4618      	mov	r0, r3
 801c924:	f7e3 fc64 	bl	80001f0 <strlen>
 801c928:	9b03      	ldr	r3, [sp, #12]
 801c92a:	9001      	str	r0, [sp, #4]
 801c92c:	4403      	add	r3, r0
 801c92e:	f04f 0b00 	mov.w	fp, #0
 801c932:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c936:	9307      	str	r3, [sp, #28]
 801c938:	f8da 3000 	ldr.w	r3, [sl]
 801c93c:	3302      	adds	r3, #2
 801c93e:	461f      	mov	r7, r3
 801c940:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c944:	2830      	cmp	r0, #48	; 0x30
 801c946:	d06c      	beq.n	801ca22 <__gethex+0x118>
 801c948:	f7ff ffca 	bl	801c8e0 <__hexdig_fun>
 801c94c:	4604      	mov	r4, r0
 801c94e:	2800      	cmp	r0, #0
 801c950:	d16a      	bne.n	801ca28 <__gethex+0x11e>
 801c952:	9a01      	ldr	r2, [sp, #4]
 801c954:	9903      	ldr	r1, [sp, #12]
 801c956:	4638      	mov	r0, r7
 801c958:	f001 fa1d 	bl	801dd96 <strncmp>
 801c95c:	2800      	cmp	r0, #0
 801c95e:	d166      	bne.n	801ca2e <__gethex+0x124>
 801c960:	9b01      	ldr	r3, [sp, #4]
 801c962:	5cf8      	ldrb	r0, [r7, r3]
 801c964:	18fe      	adds	r6, r7, r3
 801c966:	f7ff ffbb 	bl	801c8e0 <__hexdig_fun>
 801c96a:	2800      	cmp	r0, #0
 801c96c:	d062      	beq.n	801ca34 <__gethex+0x12a>
 801c96e:	4633      	mov	r3, r6
 801c970:	7818      	ldrb	r0, [r3, #0]
 801c972:	2830      	cmp	r0, #48	; 0x30
 801c974:	461f      	mov	r7, r3
 801c976:	f103 0301 	add.w	r3, r3, #1
 801c97a:	d0f9      	beq.n	801c970 <__gethex+0x66>
 801c97c:	f7ff ffb0 	bl	801c8e0 <__hexdig_fun>
 801c980:	fab0 f580 	clz	r5, r0
 801c984:	096d      	lsrs	r5, r5, #5
 801c986:	4634      	mov	r4, r6
 801c988:	f04f 0b01 	mov.w	fp, #1
 801c98c:	463a      	mov	r2, r7
 801c98e:	4616      	mov	r6, r2
 801c990:	3201      	adds	r2, #1
 801c992:	7830      	ldrb	r0, [r6, #0]
 801c994:	f7ff ffa4 	bl	801c8e0 <__hexdig_fun>
 801c998:	2800      	cmp	r0, #0
 801c99a:	d1f8      	bne.n	801c98e <__gethex+0x84>
 801c99c:	9a01      	ldr	r2, [sp, #4]
 801c99e:	9903      	ldr	r1, [sp, #12]
 801c9a0:	4630      	mov	r0, r6
 801c9a2:	f001 f9f8 	bl	801dd96 <strncmp>
 801c9a6:	b950      	cbnz	r0, 801c9be <__gethex+0xb4>
 801c9a8:	b954      	cbnz	r4, 801c9c0 <__gethex+0xb6>
 801c9aa:	9b01      	ldr	r3, [sp, #4]
 801c9ac:	18f4      	adds	r4, r6, r3
 801c9ae:	4622      	mov	r2, r4
 801c9b0:	4616      	mov	r6, r2
 801c9b2:	3201      	adds	r2, #1
 801c9b4:	7830      	ldrb	r0, [r6, #0]
 801c9b6:	f7ff ff93 	bl	801c8e0 <__hexdig_fun>
 801c9ba:	2800      	cmp	r0, #0
 801c9bc:	d1f8      	bne.n	801c9b0 <__gethex+0xa6>
 801c9be:	b10c      	cbz	r4, 801c9c4 <__gethex+0xba>
 801c9c0:	1ba4      	subs	r4, r4, r6
 801c9c2:	00a4      	lsls	r4, r4, #2
 801c9c4:	7833      	ldrb	r3, [r6, #0]
 801c9c6:	2b50      	cmp	r3, #80	; 0x50
 801c9c8:	d001      	beq.n	801c9ce <__gethex+0xc4>
 801c9ca:	2b70      	cmp	r3, #112	; 0x70
 801c9cc:	d140      	bne.n	801ca50 <__gethex+0x146>
 801c9ce:	7873      	ldrb	r3, [r6, #1]
 801c9d0:	2b2b      	cmp	r3, #43	; 0x2b
 801c9d2:	d031      	beq.n	801ca38 <__gethex+0x12e>
 801c9d4:	2b2d      	cmp	r3, #45	; 0x2d
 801c9d6:	d033      	beq.n	801ca40 <__gethex+0x136>
 801c9d8:	1c71      	adds	r1, r6, #1
 801c9da:	f04f 0900 	mov.w	r9, #0
 801c9de:	7808      	ldrb	r0, [r1, #0]
 801c9e0:	f7ff ff7e 	bl	801c8e0 <__hexdig_fun>
 801c9e4:	1e43      	subs	r3, r0, #1
 801c9e6:	b2db      	uxtb	r3, r3
 801c9e8:	2b18      	cmp	r3, #24
 801c9ea:	d831      	bhi.n	801ca50 <__gethex+0x146>
 801c9ec:	f1a0 0210 	sub.w	r2, r0, #16
 801c9f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c9f4:	f7ff ff74 	bl	801c8e0 <__hexdig_fun>
 801c9f8:	1e43      	subs	r3, r0, #1
 801c9fa:	b2db      	uxtb	r3, r3
 801c9fc:	2b18      	cmp	r3, #24
 801c9fe:	d922      	bls.n	801ca46 <__gethex+0x13c>
 801ca00:	f1b9 0f00 	cmp.w	r9, #0
 801ca04:	d000      	beq.n	801ca08 <__gethex+0xfe>
 801ca06:	4252      	negs	r2, r2
 801ca08:	4414      	add	r4, r2
 801ca0a:	f8ca 1000 	str.w	r1, [sl]
 801ca0e:	b30d      	cbz	r5, 801ca54 <__gethex+0x14a>
 801ca10:	f1bb 0f00 	cmp.w	fp, #0
 801ca14:	bf0c      	ite	eq
 801ca16:	2706      	moveq	r7, #6
 801ca18:	2700      	movne	r7, #0
 801ca1a:	4638      	mov	r0, r7
 801ca1c:	b00b      	add	sp, #44	; 0x2c
 801ca1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca22:	f10b 0b01 	add.w	fp, fp, #1
 801ca26:	e78a      	b.n	801c93e <__gethex+0x34>
 801ca28:	2500      	movs	r5, #0
 801ca2a:	462c      	mov	r4, r5
 801ca2c:	e7ae      	b.n	801c98c <__gethex+0x82>
 801ca2e:	463e      	mov	r6, r7
 801ca30:	2501      	movs	r5, #1
 801ca32:	e7c7      	b.n	801c9c4 <__gethex+0xba>
 801ca34:	4604      	mov	r4, r0
 801ca36:	e7fb      	b.n	801ca30 <__gethex+0x126>
 801ca38:	f04f 0900 	mov.w	r9, #0
 801ca3c:	1cb1      	adds	r1, r6, #2
 801ca3e:	e7ce      	b.n	801c9de <__gethex+0xd4>
 801ca40:	f04f 0901 	mov.w	r9, #1
 801ca44:	e7fa      	b.n	801ca3c <__gethex+0x132>
 801ca46:	230a      	movs	r3, #10
 801ca48:	fb03 0202 	mla	r2, r3, r2, r0
 801ca4c:	3a10      	subs	r2, #16
 801ca4e:	e7cf      	b.n	801c9f0 <__gethex+0xe6>
 801ca50:	4631      	mov	r1, r6
 801ca52:	e7da      	b.n	801ca0a <__gethex+0x100>
 801ca54:	1bf3      	subs	r3, r6, r7
 801ca56:	3b01      	subs	r3, #1
 801ca58:	4629      	mov	r1, r5
 801ca5a:	2b07      	cmp	r3, #7
 801ca5c:	dc49      	bgt.n	801caf2 <__gethex+0x1e8>
 801ca5e:	9802      	ldr	r0, [sp, #8]
 801ca60:	f000 fad5 	bl	801d00e <_Balloc>
 801ca64:	9b01      	ldr	r3, [sp, #4]
 801ca66:	f100 0914 	add.w	r9, r0, #20
 801ca6a:	f04f 0b00 	mov.w	fp, #0
 801ca6e:	f1c3 0301 	rsb	r3, r3, #1
 801ca72:	4605      	mov	r5, r0
 801ca74:	f8cd 9010 	str.w	r9, [sp, #16]
 801ca78:	46da      	mov	sl, fp
 801ca7a:	9308      	str	r3, [sp, #32]
 801ca7c:	42b7      	cmp	r7, r6
 801ca7e:	d33b      	bcc.n	801caf8 <__gethex+0x1ee>
 801ca80:	9804      	ldr	r0, [sp, #16]
 801ca82:	f840 ab04 	str.w	sl, [r0], #4
 801ca86:	eba0 0009 	sub.w	r0, r0, r9
 801ca8a:	1080      	asrs	r0, r0, #2
 801ca8c:	6128      	str	r0, [r5, #16]
 801ca8e:	0147      	lsls	r7, r0, #5
 801ca90:	4650      	mov	r0, sl
 801ca92:	f000 fb80 	bl	801d196 <__hi0bits>
 801ca96:	f8d8 6000 	ldr.w	r6, [r8]
 801ca9a:	1a3f      	subs	r7, r7, r0
 801ca9c:	42b7      	cmp	r7, r6
 801ca9e:	dd64      	ble.n	801cb6a <__gethex+0x260>
 801caa0:	1bbf      	subs	r7, r7, r6
 801caa2:	4639      	mov	r1, r7
 801caa4:	4628      	mov	r0, r5
 801caa6:	f000 fe8f 	bl	801d7c8 <__any_on>
 801caaa:	4682      	mov	sl, r0
 801caac:	b178      	cbz	r0, 801cace <__gethex+0x1c4>
 801caae:	1e7b      	subs	r3, r7, #1
 801cab0:	1159      	asrs	r1, r3, #5
 801cab2:	f003 021f 	and.w	r2, r3, #31
 801cab6:	f04f 0a01 	mov.w	sl, #1
 801caba:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801cabe:	fa0a f202 	lsl.w	r2, sl, r2
 801cac2:	420a      	tst	r2, r1
 801cac4:	d003      	beq.n	801cace <__gethex+0x1c4>
 801cac6:	4553      	cmp	r3, sl
 801cac8:	dc46      	bgt.n	801cb58 <__gethex+0x24e>
 801caca:	f04f 0a02 	mov.w	sl, #2
 801cace:	4639      	mov	r1, r7
 801cad0:	4628      	mov	r0, r5
 801cad2:	f7ff fecb 	bl	801c86c <rshift>
 801cad6:	443c      	add	r4, r7
 801cad8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cadc:	42a3      	cmp	r3, r4
 801cade:	da52      	bge.n	801cb86 <__gethex+0x27c>
 801cae0:	4629      	mov	r1, r5
 801cae2:	9802      	ldr	r0, [sp, #8]
 801cae4:	f000 fac7 	bl	801d076 <_Bfree>
 801cae8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801caea:	2300      	movs	r3, #0
 801caec:	6013      	str	r3, [r2, #0]
 801caee:	27a3      	movs	r7, #163	; 0xa3
 801caf0:	e793      	b.n	801ca1a <__gethex+0x110>
 801caf2:	3101      	adds	r1, #1
 801caf4:	105b      	asrs	r3, r3, #1
 801caf6:	e7b0      	b.n	801ca5a <__gethex+0x150>
 801caf8:	1e73      	subs	r3, r6, #1
 801cafa:	9305      	str	r3, [sp, #20]
 801cafc:	9a07      	ldr	r2, [sp, #28]
 801cafe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cb02:	4293      	cmp	r3, r2
 801cb04:	d018      	beq.n	801cb38 <__gethex+0x22e>
 801cb06:	f1bb 0f20 	cmp.w	fp, #32
 801cb0a:	d107      	bne.n	801cb1c <__gethex+0x212>
 801cb0c:	9b04      	ldr	r3, [sp, #16]
 801cb0e:	f8c3 a000 	str.w	sl, [r3]
 801cb12:	3304      	adds	r3, #4
 801cb14:	f04f 0a00 	mov.w	sl, #0
 801cb18:	9304      	str	r3, [sp, #16]
 801cb1a:	46d3      	mov	fp, sl
 801cb1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801cb20:	f7ff fede 	bl	801c8e0 <__hexdig_fun>
 801cb24:	f000 000f 	and.w	r0, r0, #15
 801cb28:	fa00 f00b 	lsl.w	r0, r0, fp
 801cb2c:	ea4a 0a00 	orr.w	sl, sl, r0
 801cb30:	f10b 0b04 	add.w	fp, fp, #4
 801cb34:	9b05      	ldr	r3, [sp, #20]
 801cb36:	e00d      	b.n	801cb54 <__gethex+0x24a>
 801cb38:	9b05      	ldr	r3, [sp, #20]
 801cb3a:	9a08      	ldr	r2, [sp, #32]
 801cb3c:	4413      	add	r3, r2
 801cb3e:	42bb      	cmp	r3, r7
 801cb40:	d3e1      	bcc.n	801cb06 <__gethex+0x1fc>
 801cb42:	4618      	mov	r0, r3
 801cb44:	9a01      	ldr	r2, [sp, #4]
 801cb46:	9903      	ldr	r1, [sp, #12]
 801cb48:	9309      	str	r3, [sp, #36]	; 0x24
 801cb4a:	f001 f924 	bl	801dd96 <strncmp>
 801cb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb50:	2800      	cmp	r0, #0
 801cb52:	d1d8      	bne.n	801cb06 <__gethex+0x1fc>
 801cb54:	461e      	mov	r6, r3
 801cb56:	e791      	b.n	801ca7c <__gethex+0x172>
 801cb58:	1eb9      	subs	r1, r7, #2
 801cb5a:	4628      	mov	r0, r5
 801cb5c:	f000 fe34 	bl	801d7c8 <__any_on>
 801cb60:	2800      	cmp	r0, #0
 801cb62:	d0b2      	beq.n	801caca <__gethex+0x1c0>
 801cb64:	f04f 0a03 	mov.w	sl, #3
 801cb68:	e7b1      	b.n	801cace <__gethex+0x1c4>
 801cb6a:	da09      	bge.n	801cb80 <__gethex+0x276>
 801cb6c:	1bf7      	subs	r7, r6, r7
 801cb6e:	4629      	mov	r1, r5
 801cb70:	463a      	mov	r2, r7
 801cb72:	9802      	ldr	r0, [sp, #8]
 801cb74:	f000 fc4a 	bl	801d40c <__lshift>
 801cb78:	1be4      	subs	r4, r4, r7
 801cb7a:	4605      	mov	r5, r0
 801cb7c:	f100 0914 	add.w	r9, r0, #20
 801cb80:	f04f 0a00 	mov.w	sl, #0
 801cb84:	e7a8      	b.n	801cad8 <__gethex+0x1ce>
 801cb86:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cb8a:	42a0      	cmp	r0, r4
 801cb8c:	dd6a      	ble.n	801cc64 <__gethex+0x35a>
 801cb8e:	1b04      	subs	r4, r0, r4
 801cb90:	42a6      	cmp	r6, r4
 801cb92:	dc2e      	bgt.n	801cbf2 <__gethex+0x2e8>
 801cb94:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cb98:	2b02      	cmp	r3, #2
 801cb9a:	d022      	beq.n	801cbe2 <__gethex+0x2d8>
 801cb9c:	2b03      	cmp	r3, #3
 801cb9e:	d024      	beq.n	801cbea <__gethex+0x2e0>
 801cba0:	2b01      	cmp	r3, #1
 801cba2:	d115      	bne.n	801cbd0 <__gethex+0x2c6>
 801cba4:	42a6      	cmp	r6, r4
 801cba6:	d113      	bne.n	801cbd0 <__gethex+0x2c6>
 801cba8:	2e01      	cmp	r6, #1
 801cbaa:	dc0b      	bgt.n	801cbc4 <__gethex+0x2ba>
 801cbac:	9a06      	ldr	r2, [sp, #24]
 801cbae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cbb2:	6013      	str	r3, [r2, #0]
 801cbb4:	2301      	movs	r3, #1
 801cbb6:	612b      	str	r3, [r5, #16]
 801cbb8:	f8c9 3000 	str.w	r3, [r9]
 801cbbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cbbe:	2762      	movs	r7, #98	; 0x62
 801cbc0:	601d      	str	r5, [r3, #0]
 801cbc2:	e72a      	b.n	801ca1a <__gethex+0x110>
 801cbc4:	1e71      	subs	r1, r6, #1
 801cbc6:	4628      	mov	r0, r5
 801cbc8:	f000 fdfe 	bl	801d7c8 <__any_on>
 801cbcc:	2800      	cmp	r0, #0
 801cbce:	d1ed      	bne.n	801cbac <__gethex+0x2a2>
 801cbd0:	4629      	mov	r1, r5
 801cbd2:	9802      	ldr	r0, [sp, #8]
 801cbd4:	f000 fa4f 	bl	801d076 <_Bfree>
 801cbd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cbda:	2300      	movs	r3, #0
 801cbdc:	6013      	str	r3, [r2, #0]
 801cbde:	2750      	movs	r7, #80	; 0x50
 801cbe0:	e71b      	b.n	801ca1a <__gethex+0x110>
 801cbe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d0e1      	beq.n	801cbac <__gethex+0x2a2>
 801cbe8:	e7f2      	b.n	801cbd0 <__gethex+0x2c6>
 801cbea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d1dd      	bne.n	801cbac <__gethex+0x2a2>
 801cbf0:	e7ee      	b.n	801cbd0 <__gethex+0x2c6>
 801cbf2:	1e67      	subs	r7, r4, #1
 801cbf4:	f1ba 0f00 	cmp.w	sl, #0
 801cbf8:	d131      	bne.n	801cc5e <__gethex+0x354>
 801cbfa:	b127      	cbz	r7, 801cc06 <__gethex+0x2fc>
 801cbfc:	4639      	mov	r1, r7
 801cbfe:	4628      	mov	r0, r5
 801cc00:	f000 fde2 	bl	801d7c8 <__any_on>
 801cc04:	4682      	mov	sl, r0
 801cc06:	117a      	asrs	r2, r7, #5
 801cc08:	2301      	movs	r3, #1
 801cc0a:	f007 071f 	and.w	r7, r7, #31
 801cc0e:	fa03 f707 	lsl.w	r7, r3, r7
 801cc12:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801cc16:	4621      	mov	r1, r4
 801cc18:	421f      	tst	r7, r3
 801cc1a:	4628      	mov	r0, r5
 801cc1c:	bf18      	it	ne
 801cc1e:	f04a 0a02 	orrne.w	sl, sl, #2
 801cc22:	1b36      	subs	r6, r6, r4
 801cc24:	f7ff fe22 	bl	801c86c <rshift>
 801cc28:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801cc2c:	2702      	movs	r7, #2
 801cc2e:	f1ba 0f00 	cmp.w	sl, #0
 801cc32:	d048      	beq.n	801ccc6 <__gethex+0x3bc>
 801cc34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cc38:	2b02      	cmp	r3, #2
 801cc3a:	d015      	beq.n	801cc68 <__gethex+0x35e>
 801cc3c:	2b03      	cmp	r3, #3
 801cc3e:	d017      	beq.n	801cc70 <__gethex+0x366>
 801cc40:	2b01      	cmp	r3, #1
 801cc42:	d109      	bne.n	801cc58 <__gethex+0x34e>
 801cc44:	f01a 0f02 	tst.w	sl, #2
 801cc48:	d006      	beq.n	801cc58 <__gethex+0x34e>
 801cc4a:	f8d9 3000 	ldr.w	r3, [r9]
 801cc4e:	ea4a 0a03 	orr.w	sl, sl, r3
 801cc52:	f01a 0f01 	tst.w	sl, #1
 801cc56:	d10e      	bne.n	801cc76 <__gethex+0x36c>
 801cc58:	f047 0710 	orr.w	r7, r7, #16
 801cc5c:	e033      	b.n	801ccc6 <__gethex+0x3bc>
 801cc5e:	f04f 0a01 	mov.w	sl, #1
 801cc62:	e7d0      	b.n	801cc06 <__gethex+0x2fc>
 801cc64:	2701      	movs	r7, #1
 801cc66:	e7e2      	b.n	801cc2e <__gethex+0x324>
 801cc68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc6a:	f1c3 0301 	rsb	r3, r3, #1
 801cc6e:	9315      	str	r3, [sp, #84]	; 0x54
 801cc70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d0f0      	beq.n	801cc58 <__gethex+0x34e>
 801cc76:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801cc7a:	f105 0314 	add.w	r3, r5, #20
 801cc7e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801cc82:	eb03 010a 	add.w	r1, r3, sl
 801cc86:	f04f 0c00 	mov.w	ip, #0
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc90:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cc94:	d01c      	beq.n	801ccd0 <__gethex+0x3c6>
 801cc96:	3201      	adds	r2, #1
 801cc98:	6002      	str	r2, [r0, #0]
 801cc9a:	2f02      	cmp	r7, #2
 801cc9c:	f105 0314 	add.w	r3, r5, #20
 801cca0:	d138      	bne.n	801cd14 <__gethex+0x40a>
 801cca2:	f8d8 2000 	ldr.w	r2, [r8]
 801cca6:	3a01      	subs	r2, #1
 801cca8:	42b2      	cmp	r2, r6
 801ccaa:	d10a      	bne.n	801ccc2 <__gethex+0x3b8>
 801ccac:	1171      	asrs	r1, r6, #5
 801ccae:	2201      	movs	r2, #1
 801ccb0:	f006 061f 	and.w	r6, r6, #31
 801ccb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ccb8:	fa02 f606 	lsl.w	r6, r2, r6
 801ccbc:	421e      	tst	r6, r3
 801ccbe:	bf18      	it	ne
 801ccc0:	4617      	movne	r7, r2
 801ccc2:	f047 0720 	orr.w	r7, r7, #32
 801ccc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ccc8:	601d      	str	r5, [r3, #0]
 801ccca:	9b06      	ldr	r3, [sp, #24]
 801cccc:	601c      	str	r4, [r3, #0]
 801ccce:	e6a4      	b.n	801ca1a <__gethex+0x110>
 801ccd0:	4299      	cmp	r1, r3
 801ccd2:	f843 cc04 	str.w	ip, [r3, #-4]
 801ccd6:	d8d8      	bhi.n	801cc8a <__gethex+0x380>
 801ccd8:	68ab      	ldr	r3, [r5, #8]
 801ccda:	4599      	cmp	r9, r3
 801ccdc:	db12      	blt.n	801cd04 <__gethex+0x3fa>
 801ccde:	6869      	ldr	r1, [r5, #4]
 801cce0:	9802      	ldr	r0, [sp, #8]
 801cce2:	3101      	adds	r1, #1
 801cce4:	f000 f993 	bl	801d00e <_Balloc>
 801cce8:	692a      	ldr	r2, [r5, #16]
 801ccea:	3202      	adds	r2, #2
 801ccec:	f105 010c 	add.w	r1, r5, #12
 801ccf0:	4683      	mov	fp, r0
 801ccf2:	0092      	lsls	r2, r2, #2
 801ccf4:	300c      	adds	r0, #12
 801ccf6:	f7fc fdb3 	bl	8019860 <memcpy>
 801ccfa:	4629      	mov	r1, r5
 801ccfc:	9802      	ldr	r0, [sp, #8]
 801ccfe:	f000 f9ba 	bl	801d076 <_Bfree>
 801cd02:	465d      	mov	r5, fp
 801cd04:	692b      	ldr	r3, [r5, #16]
 801cd06:	1c5a      	adds	r2, r3, #1
 801cd08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801cd0c:	612a      	str	r2, [r5, #16]
 801cd0e:	2201      	movs	r2, #1
 801cd10:	615a      	str	r2, [r3, #20]
 801cd12:	e7c2      	b.n	801cc9a <__gethex+0x390>
 801cd14:	692a      	ldr	r2, [r5, #16]
 801cd16:	454a      	cmp	r2, r9
 801cd18:	dd0b      	ble.n	801cd32 <__gethex+0x428>
 801cd1a:	2101      	movs	r1, #1
 801cd1c:	4628      	mov	r0, r5
 801cd1e:	f7ff fda5 	bl	801c86c <rshift>
 801cd22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cd26:	3401      	adds	r4, #1
 801cd28:	42a3      	cmp	r3, r4
 801cd2a:	f6ff aed9 	blt.w	801cae0 <__gethex+0x1d6>
 801cd2e:	2701      	movs	r7, #1
 801cd30:	e7c7      	b.n	801ccc2 <__gethex+0x3b8>
 801cd32:	f016 061f 	ands.w	r6, r6, #31
 801cd36:	d0fa      	beq.n	801cd2e <__gethex+0x424>
 801cd38:	449a      	add	sl, r3
 801cd3a:	f1c6 0620 	rsb	r6, r6, #32
 801cd3e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801cd42:	f000 fa28 	bl	801d196 <__hi0bits>
 801cd46:	42b0      	cmp	r0, r6
 801cd48:	dbe7      	blt.n	801cd1a <__gethex+0x410>
 801cd4a:	e7f0      	b.n	801cd2e <__gethex+0x424>

0801cd4c <L_shift>:
 801cd4c:	f1c2 0208 	rsb	r2, r2, #8
 801cd50:	0092      	lsls	r2, r2, #2
 801cd52:	b570      	push	{r4, r5, r6, lr}
 801cd54:	f1c2 0620 	rsb	r6, r2, #32
 801cd58:	6843      	ldr	r3, [r0, #4]
 801cd5a:	6804      	ldr	r4, [r0, #0]
 801cd5c:	fa03 f506 	lsl.w	r5, r3, r6
 801cd60:	432c      	orrs	r4, r5
 801cd62:	40d3      	lsrs	r3, r2
 801cd64:	6004      	str	r4, [r0, #0]
 801cd66:	f840 3f04 	str.w	r3, [r0, #4]!
 801cd6a:	4288      	cmp	r0, r1
 801cd6c:	d3f4      	bcc.n	801cd58 <L_shift+0xc>
 801cd6e:	bd70      	pop	{r4, r5, r6, pc}

0801cd70 <__match>:
 801cd70:	b530      	push	{r4, r5, lr}
 801cd72:	6803      	ldr	r3, [r0, #0]
 801cd74:	3301      	adds	r3, #1
 801cd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cd7a:	b914      	cbnz	r4, 801cd82 <__match+0x12>
 801cd7c:	6003      	str	r3, [r0, #0]
 801cd7e:	2001      	movs	r0, #1
 801cd80:	bd30      	pop	{r4, r5, pc}
 801cd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801cd8a:	2d19      	cmp	r5, #25
 801cd8c:	bf98      	it	ls
 801cd8e:	3220      	addls	r2, #32
 801cd90:	42a2      	cmp	r2, r4
 801cd92:	d0f0      	beq.n	801cd76 <__match+0x6>
 801cd94:	2000      	movs	r0, #0
 801cd96:	e7f3      	b.n	801cd80 <__match+0x10>

0801cd98 <__hexnan>:
 801cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd9c:	680b      	ldr	r3, [r1, #0]
 801cd9e:	6801      	ldr	r1, [r0, #0]
 801cda0:	115f      	asrs	r7, r3, #5
 801cda2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801cda6:	f013 031f 	ands.w	r3, r3, #31
 801cdaa:	b087      	sub	sp, #28
 801cdac:	bf18      	it	ne
 801cdae:	3704      	addne	r7, #4
 801cdb0:	2500      	movs	r5, #0
 801cdb2:	1f3e      	subs	r6, r7, #4
 801cdb4:	4682      	mov	sl, r0
 801cdb6:	4690      	mov	r8, r2
 801cdb8:	9301      	str	r3, [sp, #4]
 801cdba:	f847 5c04 	str.w	r5, [r7, #-4]
 801cdbe:	46b1      	mov	r9, r6
 801cdc0:	4634      	mov	r4, r6
 801cdc2:	9502      	str	r5, [sp, #8]
 801cdc4:	46ab      	mov	fp, r5
 801cdc6:	784a      	ldrb	r2, [r1, #1]
 801cdc8:	1c4b      	adds	r3, r1, #1
 801cdca:	9303      	str	r3, [sp, #12]
 801cdcc:	b342      	cbz	r2, 801ce20 <__hexnan+0x88>
 801cdce:	4610      	mov	r0, r2
 801cdd0:	9105      	str	r1, [sp, #20]
 801cdd2:	9204      	str	r2, [sp, #16]
 801cdd4:	f7ff fd84 	bl	801c8e0 <__hexdig_fun>
 801cdd8:	2800      	cmp	r0, #0
 801cdda:	d143      	bne.n	801ce64 <__hexnan+0xcc>
 801cddc:	9a04      	ldr	r2, [sp, #16]
 801cdde:	9905      	ldr	r1, [sp, #20]
 801cde0:	2a20      	cmp	r2, #32
 801cde2:	d818      	bhi.n	801ce16 <__hexnan+0x7e>
 801cde4:	9b02      	ldr	r3, [sp, #8]
 801cde6:	459b      	cmp	fp, r3
 801cde8:	dd13      	ble.n	801ce12 <__hexnan+0x7a>
 801cdea:	454c      	cmp	r4, r9
 801cdec:	d206      	bcs.n	801cdfc <__hexnan+0x64>
 801cdee:	2d07      	cmp	r5, #7
 801cdf0:	dc04      	bgt.n	801cdfc <__hexnan+0x64>
 801cdf2:	462a      	mov	r2, r5
 801cdf4:	4649      	mov	r1, r9
 801cdf6:	4620      	mov	r0, r4
 801cdf8:	f7ff ffa8 	bl	801cd4c <L_shift>
 801cdfc:	4544      	cmp	r4, r8
 801cdfe:	d944      	bls.n	801ce8a <__hexnan+0xf2>
 801ce00:	2300      	movs	r3, #0
 801ce02:	f1a4 0904 	sub.w	r9, r4, #4
 801ce06:	f844 3c04 	str.w	r3, [r4, #-4]
 801ce0a:	f8cd b008 	str.w	fp, [sp, #8]
 801ce0e:	464c      	mov	r4, r9
 801ce10:	461d      	mov	r5, r3
 801ce12:	9903      	ldr	r1, [sp, #12]
 801ce14:	e7d7      	b.n	801cdc6 <__hexnan+0x2e>
 801ce16:	2a29      	cmp	r2, #41	; 0x29
 801ce18:	d14a      	bne.n	801ceb0 <__hexnan+0x118>
 801ce1a:	3102      	adds	r1, #2
 801ce1c:	f8ca 1000 	str.w	r1, [sl]
 801ce20:	f1bb 0f00 	cmp.w	fp, #0
 801ce24:	d044      	beq.n	801ceb0 <__hexnan+0x118>
 801ce26:	454c      	cmp	r4, r9
 801ce28:	d206      	bcs.n	801ce38 <__hexnan+0xa0>
 801ce2a:	2d07      	cmp	r5, #7
 801ce2c:	dc04      	bgt.n	801ce38 <__hexnan+0xa0>
 801ce2e:	462a      	mov	r2, r5
 801ce30:	4649      	mov	r1, r9
 801ce32:	4620      	mov	r0, r4
 801ce34:	f7ff ff8a 	bl	801cd4c <L_shift>
 801ce38:	4544      	cmp	r4, r8
 801ce3a:	d928      	bls.n	801ce8e <__hexnan+0xf6>
 801ce3c:	4643      	mov	r3, r8
 801ce3e:	f854 2b04 	ldr.w	r2, [r4], #4
 801ce42:	f843 2b04 	str.w	r2, [r3], #4
 801ce46:	42a6      	cmp	r6, r4
 801ce48:	d2f9      	bcs.n	801ce3e <__hexnan+0xa6>
 801ce4a:	2200      	movs	r2, #0
 801ce4c:	f843 2b04 	str.w	r2, [r3], #4
 801ce50:	429e      	cmp	r6, r3
 801ce52:	d2fb      	bcs.n	801ce4c <__hexnan+0xb4>
 801ce54:	6833      	ldr	r3, [r6, #0]
 801ce56:	b91b      	cbnz	r3, 801ce60 <__hexnan+0xc8>
 801ce58:	4546      	cmp	r6, r8
 801ce5a:	d127      	bne.n	801ceac <__hexnan+0x114>
 801ce5c:	2301      	movs	r3, #1
 801ce5e:	6033      	str	r3, [r6, #0]
 801ce60:	2005      	movs	r0, #5
 801ce62:	e026      	b.n	801ceb2 <__hexnan+0x11a>
 801ce64:	3501      	adds	r5, #1
 801ce66:	2d08      	cmp	r5, #8
 801ce68:	f10b 0b01 	add.w	fp, fp, #1
 801ce6c:	dd06      	ble.n	801ce7c <__hexnan+0xe4>
 801ce6e:	4544      	cmp	r4, r8
 801ce70:	d9cf      	bls.n	801ce12 <__hexnan+0x7a>
 801ce72:	2300      	movs	r3, #0
 801ce74:	f844 3c04 	str.w	r3, [r4, #-4]
 801ce78:	2501      	movs	r5, #1
 801ce7a:	3c04      	subs	r4, #4
 801ce7c:	6822      	ldr	r2, [r4, #0]
 801ce7e:	f000 000f 	and.w	r0, r0, #15
 801ce82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ce86:	6020      	str	r0, [r4, #0]
 801ce88:	e7c3      	b.n	801ce12 <__hexnan+0x7a>
 801ce8a:	2508      	movs	r5, #8
 801ce8c:	e7c1      	b.n	801ce12 <__hexnan+0x7a>
 801ce8e:	9b01      	ldr	r3, [sp, #4]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d0df      	beq.n	801ce54 <__hexnan+0xbc>
 801ce94:	f04f 32ff 	mov.w	r2, #4294967295
 801ce98:	f1c3 0320 	rsb	r3, r3, #32
 801ce9c:	fa22 f303 	lsr.w	r3, r2, r3
 801cea0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801cea4:	401a      	ands	r2, r3
 801cea6:	f847 2c04 	str.w	r2, [r7, #-4]
 801ceaa:	e7d3      	b.n	801ce54 <__hexnan+0xbc>
 801ceac:	3e04      	subs	r6, #4
 801ceae:	e7d1      	b.n	801ce54 <__hexnan+0xbc>
 801ceb0:	2004      	movs	r0, #4
 801ceb2:	b007      	add	sp, #28
 801ceb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ceb8 <__locale_ctype_ptr_l>:
 801ceb8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801cebc:	4770      	bx	lr

0801cebe <__localeconv_l>:
 801cebe:	30f0      	adds	r0, #240	; 0xf0
 801cec0:	4770      	bx	lr
	...

0801cec4 <_localeconv_r>:
 801cec4:	4b04      	ldr	r3, [pc, #16]	; (801ced8 <_localeconv_r+0x14>)
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	6a18      	ldr	r0, [r3, #32]
 801ceca:	4b04      	ldr	r3, [pc, #16]	; (801cedc <_localeconv_r+0x18>)
 801cecc:	2800      	cmp	r0, #0
 801cece:	bf08      	it	eq
 801ced0:	4618      	moveq	r0, r3
 801ced2:	30f0      	adds	r0, #240	; 0xf0
 801ced4:	4770      	bx	lr
 801ced6:	bf00      	nop
 801ced8:	200001c4 	.word	0x200001c4
 801cedc:	20000228 	.word	0x20000228

0801cee0 <__swhatbuf_r>:
 801cee0:	b570      	push	{r4, r5, r6, lr}
 801cee2:	460e      	mov	r6, r1
 801cee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cee8:	2900      	cmp	r1, #0
 801ceea:	b096      	sub	sp, #88	; 0x58
 801ceec:	4614      	mov	r4, r2
 801ceee:	461d      	mov	r5, r3
 801cef0:	da07      	bge.n	801cf02 <__swhatbuf_r+0x22>
 801cef2:	2300      	movs	r3, #0
 801cef4:	602b      	str	r3, [r5, #0]
 801cef6:	89b3      	ldrh	r3, [r6, #12]
 801cef8:	061a      	lsls	r2, r3, #24
 801cefa:	d410      	bmi.n	801cf1e <__swhatbuf_r+0x3e>
 801cefc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cf00:	e00e      	b.n	801cf20 <__swhatbuf_r+0x40>
 801cf02:	466a      	mov	r2, sp
 801cf04:	f000 ff88 	bl	801de18 <_fstat_r>
 801cf08:	2800      	cmp	r0, #0
 801cf0a:	dbf2      	blt.n	801cef2 <__swhatbuf_r+0x12>
 801cf0c:	9a01      	ldr	r2, [sp, #4]
 801cf0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cf12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cf16:	425a      	negs	r2, r3
 801cf18:	415a      	adcs	r2, r3
 801cf1a:	602a      	str	r2, [r5, #0]
 801cf1c:	e7ee      	b.n	801cefc <__swhatbuf_r+0x1c>
 801cf1e:	2340      	movs	r3, #64	; 0x40
 801cf20:	2000      	movs	r0, #0
 801cf22:	6023      	str	r3, [r4, #0]
 801cf24:	b016      	add	sp, #88	; 0x58
 801cf26:	bd70      	pop	{r4, r5, r6, pc}

0801cf28 <__smakebuf_r>:
 801cf28:	898b      	ldrh	r3, [r1, #12]
 801cf2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cf2c:	079d      	lsls	r5, r3, #30
 801cf2e:	4606      	mov	r6, r0
 801cf30:	460c      	mov	r4, r1
 801cf32:	d507      	bpl.n	801cf44 <__smakebuf_r+0x1c>
 801cf34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cf38:	6023      	str	r3, [r4, #0]
 801cf3a:	6123      	str	r3, [r4, #16]
 801cf3c:	2301      	movs	r3, #1
 801cf3e:	6163      	str	r3, [r4, #20]
 801cf40:	b002      	add	sp, #8
 801cf42:	bd70      	pop	{r4, r5, r6, pc}
 801cf44:	ab01      	add	r3, sp, #4
 801cf46:	466a      	mov	r2, sp
 801cf48:	f7ff ffca 	bl	801cee0 <__swhatbuf_r>
 801cf4c:	9900      	ldr	r1, [sp, #0]
 801cf4e:	4605      	mov	r5, r0
 801cf50:	4630      	mov	r0, r6
 801cf52:	f000 fcb7 	bl	801d8c4 <_malloc_r>
 801cf56:	b948      	cbnz	r0, 801cf6c <__smakebuf_r+0x44>
 801cf58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf5c:	059a      	lsls	r2, r3, #22
 801cf5e:	d4ef      	bmi.n	801cf40 <__smakebuf_r+0x18>
 801cf60:	f023 0303 	bic.w	r3, r3, #3
 801cf64:	f043 0302 	orr.w	r3, r3, #2
 801cf68:	81a3      	strh	r3, [r4, #12]
 801cf6a:	e7e3      	b.n	801cf34 <__smakebuf_r+0xc>
 801cf6c:	4b0d      	ldr	r3, [pc, #52]	; (801cfa4 <__smakebuf_r+0x7c>)
 801cf6e:	62b3      	str	r3, [r6, #40]	; 0x28
 801cf70:	89a3      	ldrh	r3, [r4, #12]
 801cf72:	6020      	str	r0, [r4, #0]
 801cf74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cf78:	81a3      	strh	r3, [r4, #12]
 801cf7a:	9b00      	ldr	r3, [sp, #0]
 801cf7c:	6163      	str	r3, [r4, #20]
 801cf7e:	9b01      	ldr	r3, [sp, #4]
 801cf80:	6120      	str	r0, [r4, #16]
 801cf82:	b15b      	cbz	r3, 801cf9c <__smakebuf_r+0x74>
 801cf84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf88:	4630      	mov	r0, r6
 801cf8a:	f000 ff57 	bl	801de3c <_isatty_r>
 801cf8e:	b128      	cbz	r0, 801cf9c <__smakebuf_r+0x74>
 801cf90:	89a3      	ldrh	r3, [r4, #12]
 801cf92:	f023 0303 	bic.w	r3, r3, #3
 801cf96:	f043 0301 	orr.w	r3, r3, #1
 801cf9a:	81a3      	strh	r3, [r4, #12]
 801cf9c:	89a3      	ldrh	r3, [r4, #12]
 801cf9e:	431d      	orrs	r5, r3
 801cfa0:	81a5      	strh	r5, [r4, #12]
 801cfa2:	e7cd      	b.n	801cf40 <__smakebuf_r+0x18>
 801cfa4:	0801c721 	.word	0x0801c721

0801cfa8 <malloc>:
 801cfa8:	4b02      	ldr	r3, [pc, #8]	; (801cfb4 <malloc+0xc>)
 801cfaa:	4601      	mov	r1, r0
 801cfac:	6818      	ldr	r0, [r3, #0]
 801cfae:	f000 bc89 	b.w	801d8c4 <_malloc_r>
 801cfb2:	bf00      	nop
 801cfb4:	200001c4 	.word	0x200001c4

0801cfb8 <__ascii_mbtowc>:
 801cfb8:	b082      	sub	sp, #8
 801cfba:	b901      	cbnz	r1, 801cfbe <__ascii_mbtowc+0x6>
 801cfbc:	a901      	add	r1, sp, #4
 801cfbe:	b142      	cbz	r2, 801cfd2 <__ascii_mbtowc+0x1a>
 801cfc0:	b14b      	cbz	r3, 801cfd6 <__ascii_mbtowc+0x1e>
 801cfc2:	7813      	ldrb	r3, [r2, #0]
 801cfc4:	600b      	str	r3, [r1, #0]
 801cfc6:	7812      	ldrb	r2, [r2, #0]
 801cfc8:	1c10      	adds	r0, r2, #0
 801cfca:	bf18      	it	ne
 801cfcc:	2001      	movne	r0, #1
 801cfce:	b002      	add	sp, #8
 801cfd0:	4770      	bx	lr
 801cfd2:	4610      	mov	r0, r2
 801cfd4:	e7fb      	b.n	801cfce <__ascii_mbtowc+0x16>
 801cfd6:	f06f 0001 	mvn.w	r0, #1
 801cfda:	e7f8      	b.n	801cfce <__ascii_mbtowc+0x16>

0801cfdc <memmove>:
 801cfdc:	4288      	cmp	r0, r1
 801cfde:	b510      	push	{r4, lr}
 801cfe0:	eb01 0302 	add.w	r3, r1, r2
 801cfe4:	d807      	bhi.n	801cff6 <memmove+0x1a>
 801cfe6:	1e42      	subs	r2, r0, #1
 801cfe8:	4299      	cmp	r1, r3
 801cfea:	d00a      	beq.n	801d002 <memmove+0x26>
 801cfec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cff0:	f802 4f01 	strb.w	r4, [r2, #1]!
 801cff4:	e7f8      	b.n	801cfe8 <memmove+0xc>
 801cff6:	4283      	cmp	r3, r0
 801cff8:	d9f5      	bls.n	801cfe6 <memmove+0xa>
 801cffa:	1881      	adds	r1, r0, r2
 801cffc:	1ad2      	subs	r2, r2, r3
 801cffe:	42d3      	cmn	r3, r2
 801d000:	d100      	bne.n	801d004 <memmove+0x28>
 801d002:	bd10      	pop	{r4, pc}
 801d004:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d008:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801d00c:	e7f7      	b.n	801cffe <memmove+0x22>

0801d00e <_Balloc>:
 801d00e:	b570      	push	{r4, r5, r6, lr}
 801d010:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d012:	4604      	mov	r4, r0
 801d014:	460e      	mov	r6, r1
 801d016:	b93d      	cbnz	r5, 801d028 <_Balloc+0x1a>
 801d018:	2010      	movs	r0, #16
 801d01a:	f7ff ffc5 	bl	801cfa8 <malloc>
 801d01e:	6260      	str	r0, [r4, #36]	; 0x24
 801d020:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d024:	6005      	str	r5, [r0, #0]
 801d026:	60c5      	str	r5, [r0, #12]
 801d028:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d02a:	68eb      	ldr	r3, [r5, #12]
 801d02c:	b183      	cbz	r3, 801d050 <_Balloc+0x42>
 801d02e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d030:	68db      	ldr	r3, [r3, #12]
 801d032:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d036:	b9b8      	cbnz	r0, 801d068 <_Balloc+0x5a>
 801d038:	2101      	movs	r1, #1
 801d03a:	fa01 f506 	lsl.w	r5, r1, r6
 801d03e:	1d6a      	adds	r2, r5, #5
 801d040:	0092      	lsls	r2, r2, #2
 801d042:	4620      	mov	r0, r4
 801d044:	f000 fbe1 	bl	801d80a <_calloc_r>
 801d048:	b160      	cbz	r0, 801d064 <_Balloc+0x56>
 801d04a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801d04e:	e00e      	b.n	801d06e <_Balloc+0x60>
 801d050:	2221      	movs	r2, #33	; 0x21
 801d052:	2104      	movs	r1, #4
 801d054:	4620      	mov	r0, r4
 801d056:	f000 fbd8 	bl	801d80a <_calloc_r>
 801d05a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d05c:	60e8      	str	r0, [r5, #12]
 801d05e:	68db      	ldr	r3, [r3, #12]
 801d060:	2b00      	cmp	r3, #0
 801d062:	d1e4      	bne.n	801d02e <_Balloc+0x20>
 801d064:	2000      	movs	r0, #0
 801d066:	bd70      	pop	{r4, r5, r6, pc}
 801d068:	6802      	ldr	r2, [r0, #0]
 801d06a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801d06e:	2300      	movs	r3, #0
 801d070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d074:	e7f7      	b.n	801d066 <_Balloc+0x58>

0801d076 <_Bfree>:
 801d076:	b570      	push	{r4, r5, r6, lr}
 801d078:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801d07a:	4606      	mov	r6, r0
 801d07c:	460d      	mov	r5, r1
 801d07e:	b93c      	cbnz	r4, 801d090 <_Bfree+0x1a>
 801d080:	2010      	movs	r0, #16
 801d082:	f7ff ff91 	bl	801cfa8 <malloc>
 801d086:	6270      	str	r0, [r6, #36]	; 0x24
 801d088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d08c:	6004      	str	r4, [r0, #0]
 801d08e:	60c4      	str	r4, [r0, #12]
 801d090:	b13d      	cbz	r5, 801d0a2 <_Bfree+0x2c>
 801d092:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d094:	686a      	ldr	r2, [r5, #4]
 801d096:	68db      	ldr	r3, [r3, #12]
 801d098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d09c:	6029      	str	r1, [r5, #0]
 801d09e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801d0a2:	bd70      	pop	{r4, r5, r6, pc}

0801d0a4 <__multadd>:
 801d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0a8:	690d      	ldr	r5, [r1, #16]
 801d0aa:	461f      	mov	r7, r3
 801d0ac:	4606      	mov	r6, r0
 801d0ae:	460c      	mov	r4, r1
 801d0b0:	f101 0c14 	add.w	ip, r1, #20
 801d0b4:	2300      	movs	r3, #0
 801d0b6:	f8dc 0000 	ldr.w	r0, [ip]
 801d0ba:	b281      	uxth	r1, r0
 801d0bc:	fb02 7101 	mla	r1, r2, r1, r7
 801d0c0:	0c0f      	lsrs	r7, r1, #16
 801d0c2:	0c00      	lsrs	r0, r0, #16
 801d0c4:	fb02 7000 	mla	r0, r2, r0, r7
 801d0c8:	b289      	uxth	r1, r1
 801d0ca:	3301      	adds	r3, #1
 801d0cc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801d0d0:	429d      	cmp	r5, r3
 801d0d2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801d0d6:	f84c 1b04 	str.w	r1, [ip], #4
 801d0da:	dcec      	bgt.n	801d0b6 <__multadd+0x12>
 801d0dc:	b1d7      	cbz	r7, 801d114 <__multadd+0x70>
 801d0de:	68a3      	ldr	r3, [r4, #8]
 801d0e0:	42ab      	cmp	r3, r5
 801d0e2:	dc12      	bgt.n	801d10a <__multadd+0x66>
 801d0e4:	6861      	ldr	r1, [r4, #4]
 801d0e6:	4630      	mov	r0, r6
 801d0e8:	3101      	adds	r1, #1
 801d0ea:	f7ff ff90 	bl	801d00e <_Balloc>
 801d0ee:	6922      	ldr	r2, [r4, #16]
 801d0f0:	3202      	adds	r2, #2
 801d0f2:	f104 010c 	add.w	r1, r4, #12
 801d0f6:	4680      	mov	r8, r0
 801d0f8:	0092      	lsls	r2, r2, #2
 801d0fa:	300c      	adds	r0, #12
 801d0fc:	f7fc fbb0 	bl	8019860 <memcpy>
 801d100:	4621      	mov	r1, r4
 801d102:	4630      	mov	r0, r6
 801d104:	f7ff ffb7 	bl	801d076 <_Bfree>
 801d108:	4644      	mov	r4, r8
 801d10a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d10e:	3501      	adds	r5, #1
 801d110:	615f      	str	r7, [r3, #20]
 801d112:	6125      	str	r5, [r4, #16]
 801d114:	4620      	mov	r0, r4
 801d116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d11a <__s2b>:
 801d11a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d11e:	460c      	mov	r4, r1
 801d120:	4615      	mov	r5, r2
 801d122:	461f      	mov	r7, r3
 801d124:	2209      	movs	r2, #9
 801d126:	3308      	adds	r3, #8
 801d128:	4606      	mov	r6, r0
 801d12a:	fb93 f3f2 	sdiv	r3, r3, r2
 801d12e:	2100      	movs	r1, #0
 801d130:	2201      	movs	r2, #1
 801d132:	429a      	cmp	r2, r3
 801d134:	db20      	blt.n	801d178 <__s2b+0x5e>
 801d136:	4630      	mov	r0, r6
 801d138:	f7ff ff69 	bl	801d00e <_Balloc>
 801d13c:	9b08      	ldr	r3, [sp, #32]
 801d13e:	6143      	str	r3, [r0, #20]
 801d140:	2d09      	cmp	r5, #9
 801d142:	f04f 0301 	mov.w	r3, #1
 801d146:	6103      	str	r3, [r0, #16]
 801d148:	dd19      	ble.n	801d17e <__s2b+0x64>
 801d14a:	f104 0809 	add.w	r8, r4, #9
 801d14e:	46c1      	mov	r9, r8
 801d150:	442c      	add	r4, r5
 801d152:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d156:	4601      	mov	r1, r0
 801d158:	3b30      	subs	r3, #48	; 0x30
 801d15a:	220a      	movs	r2, #10
 801d15c:	4630      	mov	r0, r6
 801d15e:	f7ff ffa1 	bl	801d0a4 <__multadd>
 801d162:	45a1      	cmp	r9, r4
 801d164:	d1f5      	bne.n	801d152 <__s2b+0x38>
 801d166:	eb08 0405 	add.w	r4, r8, r5
 801d16a:	3c08      	subs	r4, #8
 801d16c:	1b2d      	subs	r5, r5, r4
 801d16e:	1963      	adds	r3, r4, r5
 801d170:	42bb      	cmp	r3, r7
 801d172:	db07      	blt.n	801d184 <__s2b+0x6a>
 801d174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d178:	0052      	lsls	r2, r2, #1
 801d17a:	3101      	adds	r1, #1
 801d17c:	e7d9      	b.n	801d132 <__s2b+0x18>
 801d17e:	340a      	adds	r4, #10
 801d180:	2509      	movs	r5, #9
 801d182:	e7f3      	b.n	801d16c <__s2b+0x52>
 801d184:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d188:	4601      	mov	r1, r0
 801d18a:	3b30      	subs	r3, #48	; 0x30
 801d18c:	220a      	movs	r2, #10
 801d18e:	4630      	mov	r0, r6
 801d190:	f7ff ff88 	bl	801d0a4 <__multadd>
 801d194:	e7eb      	b.n	801d16e <__s2b+0x54>

0801d196 <__hi0bits>:
 801d196:	0c02      	lsrs	r2, r0, #16
 801d198:	0412      	lsls	r2, r2, #16
 801d19a:	4603      	mov	r3, r0
 801d19c:	b9b2      	cbnz	r2, 801d1cc <__hi0bits+0x36>
 801d19e:	0403      	lsls	r3, r0, #16
 801d1a0:	2010      	movs	r0, #16
 801d1a2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d1a6:	bf04      	itt	eq
 801d1a8:	021b      	lsleq	r3, r3, #8
 801d1aa:	3008      	addeq	r0, #8
 801d1ac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d1b0:	bf04      	itt	eq
 801d1b2:	011b      	lsleq	r3, r3, #4
 801d1b4:	3004      	addeq	r0, #4
 801d1b6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d1ba:	bf04      	itt	eq
 801d1bc:	009b      	lsleq	r3, r3, #2
 801d1be:	3002      	addeq	r0, #2
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	db06      	blt.n	801d1d2 <__hi0bits+0x3c>
 801d1c4:	005b      	lsls	r3, r3, #1
 801d1c6:	d503      	bpl.n	801d1d0 <__hi0bits+0x3a>
 801d1c8:	3001      	adds	r0, #1
 801d1ca:	4770      	bx	lr
 801d1cc:	2000      	movs	r0, #0
 801d1ce:	e7e8      	b.n	801d1a2 <__hi0bits+0xc>
 801d1d0:	2020      	movs	r0, #32
 801d1d2:	4770      	bx	lr

0801d1d4 <__lo0bits>:
 801d1d4:	6803      	ldr	r3, [r0, #0]
 801d1d6:	f013 0207 	ands.w	r2, r3, #7
 801d1da:	4601      	mov	r1, r0
 801d1dc:	d00b      	beq.n	801d1f6 <__lo0bits+0x22>
 801d1de:	07da      	lsls	r2, r3, #31
 801d1e0:	d423      	bmi.n	801d22a <__lo0bits+0x56>
 801d1e2:	0798      	lsls	r0, r3, #30
 801d1e4:	bf49      	itett	mi
 801d1e6:	085b      	lsrmi	r3, r3, #1
 801d1e8:	089b      	lsrpl	r3, r3, #2
 801d1ea:	2001      	movmi	r0, #1
 801d1ec:	600b      	strmi	r3, [r1, #0]
 801d1ee:	bf5c      	itt	pl
 801d1f0:	600b      	strpl	r3, [r1, #0]
 801d1f2:	2002      	movpl	r0, #2
 801d1f4:	4770      	bx	lr
 801d1f6:	b298      	uxth	r0, r3
 801d1f8:	b9a8      	cbnz	r0, 801d226 <__lo0bits+0x52>
 801d1fa:	0c1b      	lsrs	r3, r3, #16
 801d1fc:	2010      	movs	r0, #16
 801d1fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d202:	bf04      	itt	eq
 801d204:	0a1b      	lsreq	r3, r3, #8
 801d206:	3008      	addeq	r0, #8
 801d208:	071a      	lsls	r2, r3, #28
 801d20a:	bf04      	itt	eq
 801d20c:	091b      	lsreq	r3, r3, #4
 801d20e:	3004      	addeq	r0, #4
 801d210:	079a      	lsls	r2, r3, #30
 801d212:	bf04      	itt	eq
 801d214:	089b      	lsreq	r3, r3, #2
 801d216:	3002      	addeq	r0, #2
 801d218:	07da      	lsls	r2, r3, #31
 801d21a:	d402      	bmi.n	801d222 <__lo0bits+0x4e>
 801d21c:	085b      	lsrs	r3, r3, #1
 801d21e:	d006      	beq.n	801d22e <__lo0bits+0x5a>
 801d220:	3001      	adds	r0, #1
 801d222:	600b      	str	r3, [r1, #0]
 801d224:	4770      	bx	lr
 801d226:	4610      	mov	r0, r2
 801d228:	e7e9      	b.n	801d1fe <__lo0bits+0x2a>
 801d22a:	2000      	movs	r0, #0
 801d22c:	4770      	bx	lr
 801d22e:	2020      	movs	r0, #32
 801d230:	4770      	bx	lr

0801d232 <__i2b>:
 801d232:	b510      	push	{r4, lr}
 801d234:	460c      	mov	r4, r1
 801d236:	2101      	movs	r1, #1
 801d238:	f7ff fee9 	bl	801d00e <_Balloc>
 801d23c:	2201      	movs	r2, #1
 801d23e:	6144      	str	r4, [r0, #20]
 801d240:	6102      	str	r2, [r0, #16]
 801d242:	bd10      	pop	{r4, pc}

0801d244 <__multiply>:
 801d244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d248:	4614      	mov	r4, r2
 801d24a:	690a      	ldr	r2, [r1, #16]
 801d24c:	6923      	ldr	r3, [r4, #16]
 801d24e:	429a      	cmp	r2, r3
 801d250:	bfb8      	it	lt
 801d252:	460b      	movlt	r3, r1
 801d254:	4688      	mov	r8, r1
 801d256:	bfbc      	itt	lt
 801d258:	46a0      	movlt	r8, r4
 801d25a:	461c      	movlt	r4, r3
 801d25c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d260:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d264:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d268:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d26c:	eb07 0609 	add.w	r6, r7, r9
 801d270:	42b3      	cmp	r3, r6
 801d272:	bfb8      	it	lt
 801d274:	3101      	addlt	r1, #1
 801d276:	f7ff feca 	bl	801d00e <_Balloc>
 801d27a:	f100 0514 	add.w	r5, r0, #20
 801d27e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801d282:	462b      	mov	r3, r5
 801d284:	2200      	movs	r2, #0
 801d286:	4573      	cmp	r3, lr
 801d288:	d316      	bcc.n	801d2b8 <__multiply+0x74>
 801d28a:	f104 0214 	add.w	r2, r4, #20
 801d28e:	f108 0114 	add.w	r1, r8, #20
 801d292:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801d296:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801d29a:	9300      	str	r3, [sp, #0]
 801d29c:	9b00      	ldr	r3, [sp, #0]
 801d29e:	9201      	str	r2, [sp, #4]
 801d2a0:	4293      	cmp	r3, r2
 801d2a2:	d80c      	bhi.n	801d2be <__multiply+0x7a>
 801d2a4:	2e00      	cmp	r6, #0
 801d2a6:	dd03      	ble.n	801d2b0 <__multiply+0x6c>
 801d2a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d05d      	beq.n	801d36c <__multiply+0x128>
 801d2b0:	6106      	str	r6, [r0, #16]
 801d2b2:	b003      	add	sp, #12
 801d2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2b8:	f843 2b04 	str.w	r2, [r3], #4
 801d2bc:	e7e3      	b.n	801d286 <__multiply+0x42>
 801d2be:	f8b2 b000 	ldrh.w	fp, [r2]
 801d2c2:	f1bb 0f00 	cmp.w	fp, #0
 801d2c6:	d023      	beq.n	801d310 <__multiply+0xcc>
 801d2c8:	4689      	mov	r9, r1
 801d2ca:	46ac      	mov	ip, r5
 801d2cc:	f04f 0800 	mov.w	r8, #0
 801d2d0:	f859 4b04 	ldr.w	r4, [r9], #4
 801d2d4:	f8dc a000 	ldr.w	sl, [ip]
 801d2d8:	b2a3      	uxth	r3, r4
 801d2da:	fa1f fa8a 	uxth.w	sl, sl
 801d2de:	fb0b a303 	mla	r3, fp, r3, sl
 801d2e2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d2e6:	f8dc 4000 	ldr.w	r4, [ip]
 801d2ea:	4443      	add	r3, r8
 801d2ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d2f0:	fb0b 840a 	mla	r4, fp, sl, r8
 801d2f4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801d2f8:	46e2      	mov	sl, ip
 801d2fa:	b29b      	uxth	r3, r3
 801d2fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d300:	454f      	cmp	r7, r9
 801d302:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d306:	f84a 3b04 	str.w	r3, [sl], #4
 801d30a:	d82b      	bhi.n	801d364 <__multiply+0x120>
 801d30c:	f8cc 8004 	str.w	r8, [ip, #4]
 801d310:	9b01      	ldr	r3, [sp, #4]
 801d312:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801d316:	3204      	adds	r2, #4
 801d318:	f1ba 0f00 	cmp.w	sl, #0
 801d31c:	d020      	beq.n	801d360 <__multiply+0x11c>
 801d31e:	682b      	ldr	r3, [r5, #0]
 801d320:	4689      	mov	r9, r1
 801d322:	46a8      	mov	r8, r5
 801d324:	f04f 0b00 	mov.w	fp, #0
 801d328:	f8b9 c000 	ldrh.w	ip, [r9]
 801d32c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801d330:	fb0a 440c 	mla	r4, sl, ip, r4
 801d334:	445c      	add	r4, fp
 801d336:	46c4      	mov	ip, r8
 801d338:	b29b      	uxth	r3, r3
 801d33a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d33e:	f84c 3b04 	str.w	r3, [ip], #4
 801d342:	f859 3b04 	ldr.w	r3, [r9], #4
 801d346:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801d34a:	0c1b      	lsrs	r3, r3, #16
 801d34c:	fb0a b303 	mla	r3, sl, r3, fp
 801d350:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d354:	454f      	cmp	r7, r9
 801d356:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801d35a:	d805      	bhi.n	801d368 <__multiply+0x124>
 801d35c:	f8c8 3004 	str.w	r3, [r8, #4]
 801d360:	3504      	adds	r5, #4
 801d362:	e79b      	b.n	801d29c <__multiply+0x58>
 801d364:	46d4      	mov	ip, sl
 801d366:	e7b3      	b.n	801d2d0 <__multiply+0x8c>
 801d368:	46e0      	mov	r8, ip
 801d36a:	e7dd      	b.n	801d328 <__multiply+0xe4>
 801d36c:	3e01      	subs	r6, #1
 801d36e:	e799      	b.n	801d2a4 <__multiply+0x60>

0801d370 <__pow5mult>:
 801d370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d374:	4615      	mov	r5, r2
 801d376:	f012 0203 	ands.w	r2, r2, #3
 801d37a:	4606      	mov	r6, r0
 801d37c:	460f      	mov	r7, r1
 801d37e:	d007      	beq.n	801d390 <__pow5mult+0x20>
 801d380:	3a01      	subs	r2, #1
 801d382:	4c21      	ldr	r4, [pc, #132]	; (801d408 <__pow5mult+0x98>)
 801d384:	2300      	movs	r3, #0
 801d386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d38a:	f7ff fe8b 	bl	801d0a4 <__multadd>
 801d38e:	4607      	mov	r7, r0
 801d390:	10ad      	asrs	r5, r5, #2
 801d392:	d035      	beq.n	801d400 <__pow5mult+0x90>
 801d394:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d396:	b93c      	cbnz	r4, 801d3a8 <__pow5mult+0x38>
 801d398:	2010      	movs	r0, #16
 801d39a:	f7ff fe05 	bl	801cfa8 <malloc>
 801d39e:	6270      	str	r0, [r6, #36]	; 0x24
 801d3a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d3a4:	6004      	str	r4, [r0, #0]
 801d3a6:	60c4      	str	r4, [r0, #12]
 801d3a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d3ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d3b0:	b94c      	cbnz	r4, 801d3c6 <__pow5mult+0x56>
 801d3b2:	f240 2171 	movw	r1, #625	; 0x271
 801d3b6:	4630      	mov	r0, r6
 801d3b8:	f7ff ff3b 	bl	801d232 <__i2b>
 801d3bc:	2300      	movs	r3, #0
 801d3be:	f8c8 0008 	str.w	r0, [r8, #8]
 801d3c2:	4604      	mov	r4, r0
 801d3c4:	6003      	str	r3, [r0, #0]
 801d3c6:	f04f 0800 	mov.w	r8, #0
 801d3ca:	07eb      	lsls	r3, r5, #31
 801d3cc:	d50a      	bpl.n	801d3e4 <__pow5mult+0x74>
 801d3ce:	4639      	mov	r1, r7
 801d3d0:	4622      	mov	r2, r4
 801d3d2:	4630      	mov	r0, r6
 801d3d4:	f7ff ff36 	bl	801d244 <__multiply>
 801d3d8:	4639      	mov	r1, r7
 801d3da:	4681      	mov	r9, r0
 801d3dc:	4630      	mov	r0, r6
 801d3de:	f7ff fe4a 	bl	801d076 <_Bfree>
 801d3e2:	464f      	mov	r7, r9
 801d3e4:	106d      	asrs	r5, r5, #1
 801d3e6:	d00b      	beq.n	801d400 <__pow5mult+0x90>
 801d3e8:	6820      	ldr	r0, [r4, #0]
 801d3ea:	b938      	cbnz	r0, 801d3fc <__pow5mult+0x8c>
 801d3ec:	4622      	mov	r2, r4
 801d3ee:	4621      	mov	r1, r4
 801d3f0:	4630      	mov	r0, r6
 801d3f2:	f7ff ff27 	bl	801d244 <__multiply>
 801d3f6:	6020      	str	r0, [r4, #0]
 801d3f8:	f8c0 8000 	str.w	r8, [r0]
 801d3fc:	4604      	mov	r4, r0
 801d3fe:	e7e4      	b.n	801d3ca <__pow5mult+0x5a>
 801d400:	4638      	mov	r0, r7
 801d402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d406:	bf00      	nop
 801d408:	0801ebc8 	.word	0x0801ebc8

0801d40c <__lshift>:
 801d40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d410:	460c      	mov	r4, r1
 801d412:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d416:	6923      	ldr	r3, [r4, #16]
 801d418:	6849      	ldr	r1, [r1, #4]
 801d41a:	eb0a 0903 	add.w	r9, sl, r3
 801d41e:	68a3      	ldr	r3, [r4, #8]
 801d420:	4607      	mov	r7, r0
 801d422:	4616      	mov	r6, r2
 801d424:	f109 0501 	add.w	r5, r9, #1
 801d428:	42ab      	cmp	r3, r5
 801d42a:	db32      	blt.n	801d492 <__lshift+0x86>
 801d42c:	4638      	mov	r0, r7
 801d42e:	f7ff fdee 	bl	801d00e <_Balloc>
 801d432:	2300      	movs	r3, #0
 801d434:	4680      	mov	r8, r0
 801d436:	f100 0114 	add.w	r1, r0, #20
 801d43a:	461a      	mov	r2, r3
 801d43c:	4553      	cmp	r3, sl
 801d43e:	db2b      	blt.n	801d498 <__lshift+0x8c>
 801d440:	6920      	ldr	r0, [r4, #16]
 801d442:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d446:	f104 0314 	add.w	r3, r4, #20
 801d44a:	f016 021f 	ands.w	r2, r6, #31
 801d44e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d452:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d456:	d025      	beq.n	801d4a4 <__lshift+0x98>
 801d458:	f1c2 0e20 	rsb	lr, r2, #32
 801d45c:	2000      	movs	r0, #0
 801d45e:	681e      	ldr	r6, [r3, #0]
 801d460:	468a      	mov	sl, r1
 801d462:	4096      	lsls	r6, r2
 801d464:	4330      	orrs	r0, r6
 801d466:	f84a 0b04 	str.w	r0, [sl], #4
 801d46a:	f853 0b04 	ldr.w	r0, [r3], #4
 801d46e:	459c      	cmp	ip, r3
 801d470:	fa20 f00e 	lsr.w	r0, r0, lr
 801d474:	d814      	bhi.n	801d4a0 <__lshift+0x94>
 801d476:	6048      	str	r0, [r1, #4]
 801d478:	b108      	cbz	r0, 801d47e <__lshift+0x72>
 801d47a:	f109 0502 	add.w	r5, r9, #2
 801d47e:	3d01      	subs	r5, #1
 801d480:	4638      	mov	r0, r7
 801d482:	f8c8 5010 	str.w	r5, [r8, #16]
 801d486:	4621      	mov	r1, r4
 801d488:	f7ff fdf5 	bl	801d076 <_Bfree>
 801d48c:	4640      	mov	r0, r8
 801d48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d492:	3101      	adds	r1, #1
 801d494:	005b      	lsls	r3, r3, #1
 801d496:	e7c7      	b.n	801d428 <__lshift+0x1c>
 801d498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801d49c:	3301      	adds	r3, #1
 801d49e:	e7cd      	b.n	801d43c <__lshift+0x30>
 801d4a0:	4651      	mov	r1, sl
 801d4a2:	e7dc      	b.n	801d45e <__lshift+0x52>
 801d4a4:	3904      	subs	r1, #4
 801d4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d4aa:	f841 2f04 	str.w	r2, [r1, #4]!
 801d4ae:	459c      	cmp	ip, r3
 801d4b0:	d8f9      	bhi.n	801d4a6 <__lshift+0x9a>
 801d4b2:	e7e4      	b.n	801d47e <__lshift+0x72>

0801d4b4 <__mcmp>:
 801d4b4:	6903      	ldr	r3, [r0, #16]
 801d4b6:	690a      	ldr	r2, [r1, #16]
 801d4b8:	1a9b      	subs	r3, r3, r2
 801d4ba:	b530      	push	{r4, r5, lr}
 801d4bc:	d10c      	bne.n	801d4d8 <__mcmp+0x24>
 801d4be:	0092      	lsls	r2, r2, #2
 801d4c0:	3014      	adds	r0, #20
 801d4c2:	3114      	adds	r1, #20
 801d4c4:	1884      	adds	r4, r0, r2
 801d4c6:	4411      	add	r1, r2
 801d4c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d4cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d4d0:	4295      	cmp	r5, r2
 801d4d2:	d003      	beq.n	801d4dc <__mcmp+0x28>
 801d4d4:	d305      	bcc.n	801d4e2 <__mcmp+0x2e>
 801d4d6:	2301      	movs	r3, #1
 801d4d8:	4618      	mov	r0, r3
 801d4da:	bd30      	pop	{r4, r5, pc}
 801d4dc:	42a0      	cmp	r0, r4
 801d4de:	d3f3      	bcc.n	801d4c8 <__mcmp+0x14>
 801d4e0:	e7fa      	b.n	801d4d8 <__mcmp+0x24>
 801d4e2:	f04f 33ff 	mov.w	r3, #4294967295
 801d4e6:	e7f7      	b.n	801d4d8 <__mcmp+0x24>

0801d4e8 <__mdiff>:
 801d4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4ec:	460d      	mov	r5, r1
 801d4ee:	4607      	mov	r7, r0
 801d4f0:	4611      	mov	r1, r2
 801d4f2:	4628      	mov	r0, r5
 801d4f4:	4614      	mov	r4, r2
 801d4f6:	f7ff ffdd 	bl	801d4b4 <__mcmp>
 801d4fa:	1e06      	subs	r6, r0, #0
 801d4fc:	d108      	bne.n	801d510 <__mdiff+0x28>
 801d4fe:	4631      	mov	r1, r6
 801d500:	4638      	mov	r0, r7
 801d502:	f7ff fd84 	bl	801d00e <_Balloc>
 801d506:	2301      	movs	r3, #1
 801d508:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801d50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d510:	bfa4      	itt	ge
 801d512:	4623      	movge	r3, r4
 801d514:	462c      	movge	r4, r5
 801d516:	4638      	mov	r0, r7
 801d518:	6861      	ldr	r1, [r4, #4]
 801d51a:	bfa6      	itte	ge
 801d51c:	461d      	movge	r5, r3
 801d51e:	2600      	movge	r6, #0
 801d520:	2601      	movlt	r6, #1
 801d522:	f7ff fd74 	bl	801d00e <_Balloc>
 801d526:	692b      	ldr	r3, [r5, #16]
 801d528:	60c6      	str	r6, [r0, #12]
 801d52a:	6926      	ldr	r6, [r4, #16]
 801d52c:	f105 0914 	add.w	r9, r5, #20
 801d530:	f104 0214 	add.w	r2, r4, #20
 801d534:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801d538:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801d53c:	f100 0514 	add.w	r5, r0, #20
 801d540:	f04f 0e00 	mov.w	lr, #0
 801d544:	f852 ab04 	ldr.w	sl, [r2], #4
 801d548:	f859 4b04 	ldr.w	r4, [r9], #4
 801d54c:	fa1e f18a 	uxtah	r1, lr, sl
 801d550:	b2a3      	uxth	r3, r4
 801d552:	1ac9      	subs	r1, r1, r3
 801d554:	0c23      	lsrs	r3, r4, #16
 801d556:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801d55a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801d55e:	b289      	uxth	r1, r1
 801d560:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801d564:	45c8      	cmp	r8, r9
 801d566:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801d56a:	4694      	mov	ip, r2
 801d56c:	f845 3b04 	str.w	r3, [r5], #4
 801d570:	d8e8      	bhi.n	801d544 <__mdiff+0x5c>
 801d572:	45bc      	cmp	ip, r7
 801d574:	d304      	bcc.n	801d580 <__mdiff+0x98>
 801d576:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801d57a:	b183      	cbz	r3, 801d59e <__mdiff+0xb6>
 801d57c:	6106      	str	r6, [r0, #16]
 801d57e:	e7c5      	b.n	801d50c <__mdiff+0x24>
 801d580:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d584:	fa1e f381 	uxtah	r3, lr, r1
 801d588:	141a      	asrs	r2, r3, #16
 801d58a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d58e:	b29b      	uxth	r3, r3
 801d590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d594:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d598:	f845 3b04 	str.w	r3, [r5], #4
 801d59c:	e7e9      	b.n	801d572 <__mdiff+0x8a>
 801d59e:	3e01      	subs	r6, #1
 801d5a0:	e7e9      	b.n	801d576 <__mdiff+0x8e>
	...

0801d5a4 <__ulp>:
 801d5a4:	4b12      	ldr	r3, [pc, #72]	; (801d5f0 <__ulp+0x4c>)
 801d5a6:	ee10 2a90 	vmov	r2, s1
 801d5aa:	401a      	ands	r2, r3
 801d5ac:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	dd04      	ble.n	801d5be <__ulp+0x1a>
 801d5b4:	2000      	movs	r0, #0
 801d5b6:	4619      	mov	r1, r3
 801d5b8:	ec41 0b10 	vmov	d0, r0, r1
 801d5bc:	4770      	bx	lr
 801d5be:	425b      	negs	r3, r3
 801d5c0:	151b      	asrs	r3, r3, #20
 801d5c2:	2b13      	cmp	r3, #19
 801d5c4:	f04f 0000 	mov.w	r0, #0
 801d5c8:	f04f 0100 	mov.w	r1, #0
 801d5cc:	dc04      	bgt.n	801d5d8 <__ulp+0x34>
 801d5ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801d5d2:	fa42 f103 	asr.w	r1, r2, r3
 801d5d6:	e7ef      	b.n	801d5b8 <__ulp+0x14>
 801d5d8:	3b14      	subs	r3, #20
 801d5da:	2b1e      	cmp	r3, #30
 801d5dc:	f04f 0201 	mov.w	r2, #1
 801d5e0:	bfda      	itte	le
 801d5e2:	f1c3 031f 	rsble	r3, r3, #31
 801d5e6:	fa02 f303 	lslle.w	r3, r2, r3
 801d5ea:	4613      	movgt	r3, r2
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	e7e3      	b.n	801d5b8 <__ulp+0x14>
 801d5f0:	7ff00000 	.word	0x7ff00000

0801d5f4 <__b2d>:
 801d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5f6:	6905      	ldr	r5, [r0, #16]
 801d5f8:	f100 0714 	add.w	r7, r0, #20
 801d5fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d600:	1f2e      	subs	r6, r5, #4
 801d602:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d606:	4620      	mov	r0, r4
 801d608:	f7ff fdc5 	bl	801d196 <__hi0bits>
 801d60c:	f1c0 0320 	rsb	r3, r0, #32
 801d610:	280a      	cmp	r0, #10
 801d612:	600b      	str	r3, [r1, #0]
 801d614:	f8df c074 	ldr.w	ip, [pc, #116]	; 801d68c <__b2d+0x98>
 801d618:	dc14      	bgt.n	801d644 <__b2d+0x50>
 801d61a:	f1c0 0e0b 	rsb	lr, r0, #11
 801d61e:	fa24 f10e 	lsr.w	r1, r4, lr
 801d622:	42b7      	cmp	r7, r6
 801d624:	ea41 030c 	orr.w	r3, r1, ip
 801d628:	bf34      	ite	cc
 801d62a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d62e:	2100      	movcs	r1, #0
 801d630:	3015      	adds	r0, #21
 801d632:	fa04 f000 	lsl.w	r0, r4, r0
 801d636:	fa21 f10e 	lsr.w	r1, r1, lr
 801d63a:	ea40 0201 	orr.w	r2, r0, r1
 801d63e:	ec43 2b10 	vmov	d0, r2, r3
 801d642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d644:	42b7      	cmp	r7, r6
 801d646:	bf3a      	itte	cc
 801d648:	f1a5 0608 	subcc.w	r6, r5, #8
 801d64c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d650:	2100      	movcs	r1, #0
 801d652:	380b      	subs	r0, #11
 801d654:	d015      	beq.n	801d682 <__b2d+0x8e>
 801d656:	4084      	lsls	r4, r0
 801d658:	f1c0 0520 	rsb	r5, r0, #32
 801d65c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801d660:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801d664:	42be      	cmp	r6, r7
 801d666:	fa21 fc05 	lsr.w	ip, r1, r5
 801d66a:	ea44 030c 	orr.w	r3, r4, ip
 801d66e:	bf8c      	ite	hi
 801d670:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d674:	2400      	movls	r4, #0
 801d676:	fa01 f000 	lsl.w	r0, r1, r0
 801d67a:	40ec      	lsrs	r4, r5
 801d67c:	ea40 0204 	orr.w	r2, r0, r4
 801d680:	e7dd      	b.n	801d63e <__b2d+0x4a>
 801d682:	ea44 030c 	orr.w	r3, r4, ip
 801d686:	460a      	mov	r2, r1
 801d688:	e7d9      	b.n	801d63e <__b2d+0x4a>
 801d68a:	bf00      	nop
 801d68c:	3ff00000 	.word	0x3ff00000

0801d690 <__d2b>:
 801d690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d694:	460e      	mov	r6, r1
 801d696:	2101      	movs	r1, #1
 801d698:	ec59 8b10 	vmov	r8, r9, d0
 801d69c:	4615      	mov	r5, r2
 801d69e:	f7ff fcb6 	bl	801d00e <_Balloc>
 801d6a2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801d6a6:	4607      	mov	r7, r0
 801d6a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d6ac:	bb34      	cbnz	r4, 801d6fc <__d2b+0x6c>
 801d6ae:	9301      	str	r3, [sp, #4]
 801d6b0:	f1b8 0300 	subs.w	r3, r8, #0
 801d6b4:	d027      	beq.n	801d706 <__d2b+0x76>
 801d6b6:	a802      	add	r0, sp, #8
 801d6b8:	f840 3d08 	str.w	r3, [r0, #-8]!
 801d6bc:	f7ff fd8a 	bl	801d1d4 <__lo0bits>
 801d6c0:	9900      	ldr	r1, [sp, #0]
 801d6c2:	b1f0      	cbz	r0, 801d702 <__d2b+0x72>
 801d6c4:	9a01      	ldr	r2, [sp, #4]
 801d6c6:	f1c0 0320 	rsb	r3, r0, #32
 801d6ca:	fa02 f303 	lsl.w	r3, r2, r3
 801d6ce:	430b      	orrs	r3, r1
 801d6d0:	40c2      	lsrs	r2, r0
 801d6d2:	617b      	str	r3, [r7, #20]
 801d6d4:	9201      	str	r2, [sp, #4]
 801d6d6:	9b01      	ldr	r3, [sp, #4]
 801d6d8:	61bb      	str	r3, [r7, #24]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	bf14      	ite	ne
 801d6de:	2102      	movne	r1, #2
 801d6e0:	2101      	moveq	r1, #1
 801d6e2:	6139      	str	r1, [r7, #16]
 801d6e4:	b1c4      	cbz	r4, 801d718 <__d2b+0x88>
 801d6e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801d6ea:	4404      	add	r4, r0
 801d6ec:	6034      	str	r4, [r6, #0]
 801d6ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d6f2:	6028      	str	r0, [r5, #0]
 801d6f4:	4638      	mov	r0, r7
 801d6f6:	b003      	add	sp, #12
 801d6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d700:	e7d5      	b.n	801d6ae <__d2b+0x1e>
 801d702:	6179      	str	r1, [r7, #20]
 801d704:	e7e7      	b.n	801d6d6 <__d2b+0x46>
 801d706:	a801      	add	r0, sp, #4
 801d708:	f7ff fd64 	bl	801d1d4 <__lo0bits>
 801d70c:	9b01      	ldr	r3, [sp, #4]
 801d70e:	617b      	str	r3, [r7, #20]
 801d710:	2101      	movs	r1, #1
 801d712:	6139      	str	r1, [r7, #16]
 801d714:	3020      	adds	r0, #32
 801d716:	e7e5      	b.n	801d6e4 <__d2b+0x54>
 801d718:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801d71c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d720:	6030      	str	r0, [r6, #0]
 801d722:	6918      	ldr	r0, [r3, #16]
 801d724:	f7ff fd37 	bl	801d196 <__hi0bits>
 801d728:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801d72c:	e7e1      	b.n	801d6f2 <__d2b+0x62>

0801d72e <__ratio>:
 801d72e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d732:	4688      	mov	r8, r1
 801d734:	4669      	mov	r1, sp
 801d736:	4681      	mov	r9, r0
 801d738:	f7ff ff5c 	bl	801d5f4 <__b2d>
 801d73c:	a901      	add	r1, sp, #4
 801d73e:	4640      	mov	r0, r8
 801d740:	ec57 6b10 	vmov	r6, r7, d0
 801d744:	f7ff ff56 	bl	801d5f4 <__b2d>
 801d748:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d74c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d750:	eba3 0c02 	sub.w	ip, r3, r2
 801d754:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d758:	1a9b      	subs	r3, r3, r2
 801d75a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d75e:	ec5b ab10 	vmov	sl, fp, d0
 801d762:	2b00      	cmp	r3, #0
 801d764:	bfce      	itee	gt
 801d766:	463a      	movgt	r2, r7
 801d768:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d76c:	465a      	movle	r2, fp
 801d76e:	4659      	mov	r1, fp
 801d770:	463d      	mov	r5, r7
 801d772:	bfd4      	ite	le
 801d774:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801d778:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801d77c:	4630      	mov	r0, r6
 801d77e:	ee10 2a10 	vmov	r2, s0
 801d782:	460b      	mov	r3, r1
 801d784:	4629      	mov	r1, r5
 801d786:	f7e3 f871 	bl	800086c <__aeabi_ddiv>
 801d78a:	ec41 0b10 	vmov	d0, r0, r1
 801d78e:	b003      	add	sp, #12
 801d790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d794 <__copybits>:
 801d794:	3901      	subs	r1, #1
 801d796:	b510      	push	{r4, lr}
 801d798:	1149      	asrs	r1, r1, #5
 801d79a:	6914      	ldr	r4, [r2, #16]
 801d79c:	3101      	adds	r1, #1
 801d79e:	f102 0314 	add.w	r3, r2, #20
 801d7a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d7a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d7aa:	42a3      	cmp	r3, r4
 801d7ac:	4602      	mov	r2, r0
 801d7ae:	d303      	bcc.n	801d7b8 <__copybits+0x24>
 801d7b0:	2300      	movs	r3, #0
 801d7b2:	428a      	cmp	r2, r1
 801d7b4:	d305      	bcc.n	801d7c2 <__copybits+0x2e>
 801d7b6:	bd10      	pop	{r4, pc}
 801d7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801d7bc:	f840 2b04 	str.w	r2, [r0], #4
 801d7c0:	e7f3      	b.n	801d7aa <__copybits+0x16>
 801d7c2:	f842 3b04 	str.w	r3, [r2], #4
 801d7c6:	e7f4      	b.n	801d7b2 <__copybits+0x1e>

0801d7c8 <__any_on>:
 801d7c8:	f100 0214 	add.w	r2, r0, #20
 801d7cc:	6900      	ldr	r0, [r0, #16]
 801d7ce:	114b      	asrs	r3, r1, #5
 801d7d0:	4298      	cmp	r0, r3
 801d7d2:	b510      	push	{r4, lr}
 801d7d4:	db11      	blt.n	801d7fa <__any_on+0x32>
 801d7d6:	dd0a      	ble.n	801d7ee <__any_on+0x26>
 801d7d8:	f011 011f 	ands.w	r1, r1, #31
 801d7dc:	d007      	beq.n	801d7ee <__any_on+0x26>
 801d7de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d7e2:	fa24 f001 	lsr.w	r0, r4, r1
 801d7e6:	fa00 f101 	lsl.w	r1, r0, r1
 801d7ea:	428c      	cmp	r4, r1
 801d7ec:	d10b      	bne.n	801d806 <__any_on+0x3e>
 801d7ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d7f2:	4293      	cmp	r3, r2
 801d7f4:	d803      	bhi.n	801d7fe <__any_on+0x36>
 801d7f6:	2000      	movs	r0, #0
 801d7f8:	bd10      	pop	{r4, pc}
 801d7fa:	4603      	mov	r3, r0
 801d7fc:	e7f7      	b.n	801d7ee <__any_on+0x26>
 801d7fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d802:	2900      	cmp	r1, #0
 801d804:	d0f5      	beq.n	801d7f2 <__any_on+0x2a>
 801d806:	2001      	movs	r0, #1
 801d808:	e7f6      	b.n	801d7f8 <__any_on+0x30>

0801d80a <_calloc_r>:
 801d80a:	b538      	push	{r3, r4, r5, lr}
 801d80c:	fb02 f401 	mul.w	r4, r2, r1
 801d810:	4621      	mov	r1, r4
 801d812:	f000 f857 	bl	801d8c4 <_malloc_r>
 801d816:	4605      	mov	r5, r0
 801d818:	b118      	cbz	r0, 801d822 <_calloc_r+0x18>
 801d81a:	4622      	mov	r2, r4
 801d81c:	2100      	movs	r1, #0
 801d81e:	f7fc f82a 	bl	8019876 <memset>
 801d822:	4628      	mov	r0, r5
 801d824:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d828 <_free_r>:
 801d828:	b538      	push	{r3, r4, r5, lr}
 801d82a:	4605      	mov	r5, r0
 801d82c:	2900      	cmp	r1, #0
 801d82e:	d045      	beq.n	801d8bc <_free_r+0x94>
 801d830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d834:	1f0c      	subs	r4, r1, #4
 801d836:	2b00      	cmp	r3, #0
 801d838:	bfb8      	it	lt
 801d83a:	18e4      	addlt	r4, r4, r3
 801d83c:	f000 fb20 	bl	801de80 <__malloc_lock>
 801d840:	4a1f      	ldr	r2, [pc, #124]	; (801d8c0 <_free_r+0x98>)
 801d842:	6813      	ldr	r3, [r2, #0]
 801d844:	4610      	mov	r0, r2
 801d846:	b933      	cbnz	r3, 801d856 <_free_r+0x2e>
 801d848:	6063      	str	r3, [r4, #4]
 801d84a:	6014      	str	r4, [r2, #0]
 801d84c:	4628      	mov	r0, r5
 801d84e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d852:	f000 bb16 	b.w	801de82 <__malloc_unlock>
 801d856:	42a3      	cmp	r3, r4
 801d858:	d90c      	bls.n	801d874 <_free_r+0x4c>
 801d85a:	6821      	ldr	r1, [r4, #0]
 801d85c:	1862      	adds	r2, r4, r1
 801d85e:	4293      	cmp	r3, r2
 801d860:	bf04      	itt	eq
 801d862:	681a      	ldreq	r2, [r3, #0]
 801d864:	685b      	ldreq	r3, [r3, #4]
 801d866:	6063      	str	r3, [r4, #4]
 801d868:	bf04      	itt	eq
 801d86a:	1852      	addeq	r2, r2, r1
 801d86c:	6022      	streq	r2, [r4, #0]
 801d86e:	6004      	str	r4, [r0, #0]
 801d870:	e7ec      	b.n	801d84c <_free_r+0x24>
 801d872:	4613      	mov	r3, r2
 801d874:	685a      	ldr	r2, [r3, #4]
 801d876:	b10a      	cbz	r2, 801d87c <_free_r+0x54>
 801d878:	42a2      	cmp	r2, r4
 801d87a:	d9fa      	bls.n	801d872 <_free_r+0x4a>
 801d87c:	6819      	ldr	r1, [r3, #0]
 801d87e:	1858      	adds	r0, r3, r1
 801d880:	42a0      	cmp	r0, r4
 801d882:	d10b      	bne.n	801d89c <_free_r+0x74>
 801d884:	6820      	ldr	r0, [r4, #0]
 801d886:	4401      	add	r1, r0
 801d888:	1858      	adds	r0, r3, r1
 801d88a:	4282      	cmp	r2, r0
 801d88c:	6019      	str	r1, [r3, #0]
 801d88e:	d1dd      	bne.n	801d84c <_free_r+0x24>
 801d890:	6810      	ldr	r0, [r2, #0]
 801d892:	6852      	ldr	r2, [r2, #4]
 801d894:	605a      	str	r2, [r3, #4]
 801d896:	4401      	add	r1, r0
 801d898:	6019      	str	r1, [r3, #0]
 801d89a:	e7d7      	b.n	801d84c <_free_r+0x24>
 801d89c:	d902      	bls.n	801d8a4 <_free_r+0x7c>
 801d89e:	230c      	movs	r3, #12
 801d8a0:	602b      	str	r3, [r5, #0]
 801d8a2:	e7d3      	b.n	801d84c <_free_r+0x24>
 801d8a4:	6820      	ldr	r0, [r4, #0]
 801d8a6:	1821      	adds	r1, r4, r0
 801d8a8:	428a      	cmp	r2, r1
 801d8aa:	bf04      	itt	eq
 801d8ac:	6811      	ldreq	r1, [r2, #0]
 801d8ae:	6852      	ldreq	r2, [r2, #4]
 801d8b0:	6062      	str	r2, [r4, #4]
 801d8b2:	bf04      	itt	eq
 801d8b4:	1809      	addeq	r1, r1, r0
 801d8b6:	6021      	streq	r1, [r4, #0]
 801d8b8:	605c      	str	r4, [r3, #4]
 801d8ba:	e7c7      	b.n	801d84c <_free_r+0x24>
 801d8bc:	bd38      	pop	{r3, r4, r5, pc}
 801d8be:	bf00      	nop
 801d8c0:	20005378 	.word	0x20005378

0801d8c4 <_malloc_r>:
 801d8c4:	b570      	push	{r4, r5, r6, lr}
 801d8c6:	1ccd      	adds	r5, r1, #3
 801d8c8:	f025 0503 	bic.w	r5, r5, #3
 801d8cc:	3508      	adds	r5, #8
 801d8ce:	2d0c      	cmp	r5, #12
 801d8d0:	bf38      	it	cc
 801d8d2:	250c      	movcc	r5, #12
 801d8d4:	2d00      	cmp	r5, #0
 801d8d6:	4606      	mov	r6, r0
 801d8d8:	db01      	blt.n	801d8de <_malloc_r+0x1a>
 801d8da:	42a9      	cmp	r1, r5
 801d8dc:	d903      	bls.n	801d8e6 <_malloc_r+0x22>
 801d8de:	230c      	movs	r3, #12
 801d8e0:	6033      	str	r3, [r6, #0]
 801d8e2:	2000      	movs	r0, #0
 801d8e4:	bd70      	pop	{r4, r5, r6, pc}
 801d8e6:	f000 facb 	bl	801de80 <__malloc_lock>
 801d8ea:	4a21      	ldr	r2, [pc, #132]	; (801d970 <_malloc_r+0xac>)
 801d8ec:	6814      	ldr	r4, [r2, #0]
 801d8ee:	4621      	mov	r1, r4
 801d8f0:	b991      	cbnz	r1, 801d918 <_malloc_r+0x54>
 801d8f2:	4c20      	ldr	r4, [pc, #128]	; (801d974 <_malloc_r+0xb0>)
 801d8f4:	6823      	ldr	r3, [r4, #0]
 801d8f6:	b91b      	cbnz	r3, 801d900 <_malloc_r+0x3c>
 801d8f8:	4630      	mov	r0, r6
 801d8fa:	f000 f9b5 	bl	801dc68 <_sbrk_r>
 801d8fe:	6020      	str	r0, [r4, #0]
 801d900:	4629      	mov	r1, r5
 801d902:	4630      	mov	r0, r6
 801d904:	f000 f9b0 	bl	801dc68 <_sbrk_r>
 801d908:	1c43      	adds	r3, r0, #1
 801d90a:	d124      	bne.n	801d956 <_malloc_r+0x92>
 801d90c:	230c      	movs	r3, #12
 801d90e:	6033      	str	r3, [r6, #0]
 801d910:	4630      	mov	r0, r6
 801d912:	f000 fab6 	bl	801de82 <__malloc_unlock>
 801d916:	e7e4      	b.n	801d8e2 <_malloc_r+0x1e>
 801d918:	680b      	ldr	r3, [r1, #0]
 801d91a:	1b5b      	subs	r3, r3, r5
 801d91c:	d418      	bmi.n	801d950 <_malloc_r+0x8c>
 801d91e:	2b0b      	cmp	r3, #11
 801d920:	d90f      	bls.n	801d942 <_malloc_r+0x7e>
 801d922:	600b      	str	r3, [r1, #0]
 801d924:	50cd      	str	r5, [r1, r3]
 801d926:	18cc      	adds	r4, r1, r3
 801d928:	4630      	mov	r0, r6
 801d92a:	f000 faaa 	bl	801de82 <__malloc_unlock>
 801d92e:	f104 000b 	add.w	r0, r4, #11
 801d932:	1d23      	adds	r3, r4, #4
 801d934:	f020 0007 	bic.w	r0, r0, #7
 801d938:	1ac3      	subs	r3, r0, r3
 801d93a:	d0d3      	beq.n	801d8e4 <_malloc_r+0x20>
 801d93c:	425a      	negs	r2, r3
 801d93e:	50e2      	str	r2, [r4, r3]
 801d940:	e7d0      	b.n	801d8e4 <_malloc_r+0x20>
 801d942:	428c      	cmp	r4, r1
 801d944:	684b      	ldr	r3, [r1, #4]
 801d946:	bf16      	itet	ne
 801d948:	6063      	strne	r3, [r4, #4]
 801d94a:	6013      	streq	r3, [r2, #0]
 801d94c:	460c      	movne	r4, r1
 801d94e:	e7eb      	b.n	801d928 <_malloc_r+0x64>
 801d950:	460c      	mov	r4, r1
 801d952:	6849      	ldr	r1, [r1, #4]
 801d954:	e7cc      	b.n	801d8f0 <_malloc_r+0x2c>
 801d956:	1cc4      	adds	r4, r0, #3
 801d958:	f024 0403 	bic.w	r4, r4, #3
 801d95c:	42a0      	cmp	r0, r4
 801d95e:	d005      	beq.n	801d96c <_malloc_r+0xa8>
 801d960:	1a21      	subs	r1, r4, r0
 801d962:	4630      	mov	r0, r6
 801d964:	f000 f980 	bl	801dc68 <_sbrk_r>
 801d968:	3001      	adds	r0, #1
 801d96a:	d0cf      	beq.n	801d90c <_malloc_r+0x48>
 801d96c:	6025      	str	r5, [r4, #0]
 801d96e:	e7db      	b.n	801d928 <_malloc_r+0x64>
 801d970:	20005378 	.word	0x20005378
 801d974:	2000537c 	.word	0x2000537c

0801d978 <_realloc_r>:
 801d978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d97a:	4607      	mov	r7, r0
 801d97c:	4614      	mov	r4, r2
 801d97e:	460e      	mov	r6, r1
 801d980:	b921      	cbnz	r1, 801d98c <_realloc_r+0x14>
 801d982:	4611      	mov	r1, r2
 801d984:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d988:	f7ff bf9c 	b.w	801d8c4 <_malloc_r>
 801d98c:	b922      	cbnz	r2, 801d998 <_realloc_r+0x20>
 801d98e:	f7ff ff4b 	bl	801d828 <_free_r>
 801d992:	4625      	mov	r5, r4
 801d994:	4628      	mov	r0, r5
 801d996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d998:	f000 fa74 	bl	801de84 <_malloc_usable_size_r>
 801d99c:	42a0      	cmp	r0, r4
 801d99e:	d20f      	bcs.n	801d9c0 <_realloc_r+0x48>
 801d9a0:	4621      	mov	r1, r4
 801d9a2:	4638      	mov	r0, r7
 801d9a4:	f7ff ff8e 	bl	801d8c4 <_malloc_r>
 801d9a8:	4605      	mov	r5, r0
 801d9aa:	2800      	cmp	r0, #0
 801d9ac:	d0f2      	beq.n	801d994 <_realloc_r+0x1c>
 801d9ae:	4631      	mov	r1, r6
 801d9b0:	4622      	mov	r2, r4
 801d9b2:	f7fb ff55 	bl	8019860 <memcpy>
 801d9b6:	4631      	mov	r1, r6
 801d9b8:	4638      	mov	r0, r7
 801d9ba:	f7ff ff35 	bl	801d828 <_free_r>
 801d9be:	e7e9      	b.n	801d994 <_realloc_r+0x1c>
 801d9c0:	4635      	mov	r5, r6
 801d9c2:	e7e7      	b.n	801d994 <_realloc_r+0x1c>

0801d9c4 <__ssputs_r>:
 801d9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9c8:	688e      	ldr	r6, [r1, #8]
 801d9ca:	429e      	cmp	r6, r3
 801d9cc:	4682      	mov	sl, r0
 801d9ce:	460c      	mov	r4, r1
 801d9d0:	4690      	mov	r8, r2
 801d9d2:	4699      	mov	r9, r3
 801d9d4:	d837      	bhi.n	801da46 <__ssputs_r+0x82>
 801d9d6:	898a      	ldrh	r2, [r1, #12]
 801d9d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d9dc:	d031      	beq.n	801da42 <__ssputs_r+0x7e>
 801d9de:	6825      	ldr	r5, [r4, #0]
 801d9e0:	6909      	ldr	r1, [r1, #16]
 801d9e2:	1a6f      	subs	r7, r5, r1
 801d9e4:	6965      	ldr	r5, [r4, #20]
 801d9e6:	2302      	movs	r3, #2
 801d9e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d9ec:	fb95 f5f3 	sdiv	r5, r5, r3
 801d9f0:	f109 0301 	add.w	r3, r9, #1
 801d9f4:	443b      	add	r3, r7
 801d9f6:	429d      	cmp	r5, r3
 801d9f8:	bf38      	it	cc
 801d9fa:	461d      	movcc	r5, r3
 801d9fc:	0553      	lsls	r3, r2, #21
 801d9fe:	d530      	bpl.n	801da62 <__ssputs_r+0x9e>
 801da00:	4629      	mov	r1, r5
 801da02:	f7ff ff5f 	bl	801d8c4 <_malloc_r>
 801da06:	4606      	mov	r6, r0
 801da08:	b950      	cbnz	r0, 801da20 <__ssputs_r+0x5c>
 801da0a:	230c      	movs	r3, #12
 801da0c:	f8ca 3000 	str.w	r3, [sl]
 801da10:	89a3      	ldrh	r3, [r4, #12]
 801da12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da16:	81a3      	strh	r3, [r4, #12]
 801da18:	f04f 30ff 	mov.w	r0, #4294967295
 801da1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da20:	463a      	mov	r2, r7
 801da22:	6921      	ldr	r1, [r4, #16]
 801da24:	f7fb ff1c 	bl	8019860 <memcpy>
 801da28:	89a3      	ldrh	r3, [r4, #12]
 801da2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801da2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801da32:	81a3      	strh	r3, [r4, #12]
 801da34:	6126      	str	r6, [r4, #16]
 801da36:	6165      	str	r5, [r4, #20]
 801da38:	443e      	add	r6, r7
 801da3a:	1bed      	subs	r5, r5, r7
 801da3c:	6026      	str	r6, [r4, #0]
 801da3e:	60a5      	str	r5, [r4, #8]
 801da40:	464e      	mov	r6, r9
 801da42:	454e      	cmp	r6, r9
 801da44:	d900      	bls.n	801da48 <__ssputs_r+0x84>
 801da46:	464e      	mov	r6, r9
 801da48:	4632      	mov	r2, r6
 801da4a:	4641      	mov	r1, r8
 801da4c:	6820      	ldr	r0, [r4, #0]
 801da4e:	f7ff fac5 	bl	801cfdc <memmove>
 801da52:	68a3      	ldr	r3, [r4, #8]
 801da54:	1b9b      	subs	r3, r3, r6
 801da56:	60a3      	str	r3, [r4, #8]
 801da58:	6823      	ldr	r3, [r4, #0]
 801da5a:	441e      	add	r6, r3
 801da5c:	6026      	str	r6, [r4, #0]
 801da5e:	2000      	movs	r0, #0
 801da60:	e7dc      	b.n	801da1c <__ssputs_r+0x58>
 801da62:	462a      	mov	r2, r5
 801da64:	f7ff ff88 	bl	801d978 <_realloc_r>
 801da68:	4606      	mov	r6, r0
 801da6a:	2800      	cmp	r0, #0
 801da6c:	d1e2      	bne.n	801da34 <__ssputs_r+0x70>
 801da6e:	6921      	ldr	r1, [r4, #16]
 801da70:	4650      	mov	r0, sl
 801da72:	f7ff fed9 	bl	801d828 <_free_r>
 801da76:	e7c8      	b.n	801da0a <__ssputs_r+0x46>

0801da78 <_svfiprintf_r>:
 801da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da7c:	461d      	mov	r5, r3
 801da7e:	898b      	ldrh	r3, [r1, #12]
 801da80:	061f      	lsls	r7, r3, #24
 801da82:	b09d      	sub	sp, #116	; 0x74
 801da84:	4680      	mov	r8, r0
 801da86:	460c      	mov	r4, r1
 801da88:	4616      	mov	r6, r2
 801da8a:	d50f      	bpl.n	801daac <_svfiprintf_r+0x34>
 801da8c:	690b      	ldr	r3, [r1, #16]
 801da8e:	b96b      	cbnz	r3, 801daac <_svfiprintf_r+0x34>
 801da90:	2140      	movs	r1, #64	; 0x40
 801da92:	f7ff ff17 	bl	801d8c4 <_malloc_r>
 801da96:	6020      	str	r0, [r4, #0]
 801da98:	6120      	str	r0, [r4, #16]
 801da9a:	b928      	cbnz	r0, 801daa8 <_svfiprintf_r+0x30>
 801da9c:	230c      	movs	r3, #12
 801da9e:	f8c8 3000 	str.w	r3, [r8]
 801daa2:	f04f 30ff 	mov.w	r0, #4294967295
 801daa6:	e0c8      	b.n	801dc3a <_svfiprintf_r+0x1c2>
 801daa8:	2340      	movs	r3, #64	; 0x40
 801daaa:	6163      	str	r3, [r4, #20]
 801daac:	2300      	movs	r3, #0
 801daae:	9309      	str	r3, [sp, #36]	; 0x24
 801dab0:	2320      	movs	r3, #32
 801dab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dab6:	2330      	movs	r3, #48	; 0x30
 801dab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dabc:	9503      	str	r5, [sp, #12]
 801dabe:	f04f 0b01 	mov.w	fp, #1
 801dac2:	4637      	mov	r7, r6
 801dac4:	463d      	mov	r5, r7
 801dac6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801daca:	b10b      	cbz	r3, 801dad0 <_svfiprintf_r+0x58>
 801dacc:	2b25      	cmp	r3, #37	; 0x25
 801dace:	d13e      	bne.n	801db4e <_svfiprintf_r+0xd6>
 801dad0:	ebb7 0a06 	subs.w	sl, r7, r6
 801dad4:	d00b      	beq.n	801daee <_svfiprintf_r+0x76>
 801dad6:	4653      	mov	r3, sl
 801dad8:	4632      	mov	r2, r6
 801dada:	4621      	mov	r1, r4
 801dadc:	4640      	mov	r0, r8
 801dade:	f7ff ff71 	bl	801d9c4 <__ssputs_r>
 801dae2:	3001      	adds	r0, #1
 801dae4:	f000 80a4 	beq.w	801dc30 <_svfiprintf_r+0x1b8>
 801dae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daea:	4453      	add	r3, sl
 801daec:	9309      	str	r3, [sp, #36]	; 0x24
 801daee:	783b      	ldrb	r3, [r7, #0]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	f000 809d 	beq.w	801dc30 <_svfiprintf_r+0x1b8>
 801daf6:	2300      	movs	r3, #0
 801daf8:	f04f 32ff 	mov.w	r2, #4294967295
 801dafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801db00:	9304      	str	r3, [sp, #16]
 801db02:	9307      	str	r3, [sp, #28]
 801db04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801db08:	931a      	str	r3, [sp, #104]	; 0x68
 801db0a:	462f      	mov	r7, r5
 801db0c:	2205      	movs	r2, #5
 801db0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 801db12:	4850      	ldr	r0, [pc, #320]	; (801dc54 <_svfiprintf_r+0x1dc>)
 801db14:	f7e2 fb74 	bl	8000200 <memchr>
 801db18:	9b04      	ldr	r3, [sp, #16]
 801db1a:	b9d0      	cbnz	r0, 801db52 <_svfiprintf_r+0xda>
 801db1c:	06d9      	lsls	r1, r3, #27
 801db1e:	bf44      	itt	mi
 801db20:	2220      	movmi	r2, #32
 801db22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801db26:	071a      	lsls	r2, r3, #28
 801db28:	bf44      	itt	mi
 801db2a:	222b      	movmi	r2, #43	; 0x2b
 801db2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801db30:	782a      	ldrb	r2, [r5, #0]
 801db32:	2a2a      	cmp	r2, #42	; 0x2a
 801db34:	d015      	beq.n	801db62 <_svfiprintf_r+0xea>
 801db36:	9a07      	ldr	r2, [sp, #28]
 801db38:	462f      	mov	r7, r5
 801db3a:	2000      	movs	r0, #0
 801db3c:	250a      	movs	r5, #10
 801db3e:	4639      	mov	r1, r7
 801db40:	f811 3b01 	ldrb.w	r3, [r1], #1
 801db44:	3b30      	subs	r3, #48	; 0x30
 801db46:	2b09      	cmp	r3, #9
 801db48:	d94d      	bls.n	801dbe6 <_svfiprintf_r+0x16e>
 801db4a:	b1b8      	cbz	r0, 801db7c <_svfiprintf_r+0x104>
 801db4c:	e00f      	b.n	801db6e <_svfiprintf_r+0xf6>
 801db4e:	462f      	mov	r7, r5
 801db50:	e7b8      	b.n	801dac4 <_svfiprintf_r+0x4c>
 801db52:	4a40      	ldr	r2, [pc, #256]	; (801dc54 <_svfiprintf_r+0x1dc>)
 801db54:	1a80      	subs	r0, r0, r2
 801db56:	fa0b f000 	lsl.w	r0, fp, r0
 801db5a:	4318      	orrs	r0, r3
 801db5c:	9004      	str	r0, [sp, #16]
 801db5e:	463d      	mov	r5, r7
 801db60:	e7d3      	b.n	801db0a <_svfiprintf_r+0x92>
 801db62:	9a03      	ldr	r2, [sp, #12]
 801db64:	1d11      	adds	r1, r2, #4
 801db66:	6812      	ldr	r2, [r2, #0]
 801db68:	9103      	str	r1, [sp, #12]
 801db6a:	2a00      	cmp	r2, #0
 801db6c:	db01      	blt.n	801db72 <_svfiprintf_r+0xfa>
 801db6e:	9207      	str	r2, [sp, #28]
 801db70:	e004      	b.n	801db7c <_svfiprintf_r+0x104>
 801db72:	4252      	negs	r2, r2
 801db74:	f043 0302 	orr.w	r3, r3, #2
 801db78:	9207      	str	r2, [sp, #28]
 801db7a:	9304      	str	r3, [sp, #16]
 801db7c:	783b      	ldrb	r3, [r7, #0]
 801db7e:	2b2e      	cmp	r3, #46	; 0x2e
 801db80:	d10c      	bne.n	801db9c <_svfiprintf_r+0x124>
 801db82:	787b      	ldrb	r3, [r7, #1]
 801db84:	2b2a      	cmp	r3, #42	; 0x2a
 801db86:	d133      	bne.n	801dbf0 <_svfiprintf_r+0x178>
 801db88:	9b03      	ldr	r3, [sp, #12]
 801db8a:	1d1a      	adds	r2, r3, #4
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	9203      	str	r2, [sp, #12]
 801db90:	2b00      	cmp	r3, #0
 801db92:	bfb8      	it	lt
 801db94:	f04f 33ff 	movlt.w	r3, #4294967295
 801db98:	3702      	adds	r7, #2
 801db9a:	9305      	str	r3, [sp, #20]
 801db9c:	4d2e      	ldr	r5, [pc, #184]	; (801dc58 <_svfiprintf_r+0x1e0>)
 801db9e:	7839      	ldrb	r1, [r7, #0]
 801dba0:	2203      	movs	r2, #3
 801dba2:	4628      	mov	r0, r5
 801dba4:	f7e2 fb2c 	bl	8000200 <memchr>
 801dba8:	b138      	cbz	r0, 801dbba <_svfiprintf_r+0x142>
 801dbaa:	2340      	movs	r3, #64	; 0x40
 801dbac:	1b40      	subs	r0, r0, r5
 801dbae:	fa03 f000 	lsl.w	r0, r3, r0
 801dbb2:	9b04      	ldr	r3, [sp, #16]
 801dbb4:	4303      	orrs	r3, r0
 801dbb6:	3701      	adds	r7, #1
 801dbb8:	9304      	str	r3, [sp, #16]
 801dbba:	7839      	ldrb	r1, [r7, #0]
 801dbbc:	4827      	ldr	r0, [pc, #156]	; (801dc5c <_svfiprintf_r+0x1e4>)
 801dbbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dbc2:	2206      	movs	r2, #6
 801dbc4:	1c7e      	adds	r6, r7, #1
 801dbc6:	f7e2 fb1b 	bl	8000200 <memchr>
 801dbca:	2800      	cmp	r0, #0
 801dbcc:	d038      	beq.n	801dc40 <_svfiprintf_r+0x1c8>
 801dbce:	4b24      	ldr	r3, [pc, #144]	; (801dc60 <_svfiprintf_r+0x1e8>)
 801dbd0:	bb13      	cbnz	r3, 801dc18 <_svfiprintf_r+0x1a0>
 801dbd2:	9b03      	ldr	r3, [sp, #12]
 801dbd4:	3307      	adds	r3, #7
 801dbd6:	f023 0307 	bic.w	r3, r3, #7
 801dbda:	3308      	adds	r3, #8
 801dbdc:	9303      	str	r3, [sp, #12]
 801dbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbe0:	444b      	add	r3, r9
 801dbe2:	9309      	str	r3, [sp, #36]	; 0x24
 801dbe4:	e76d      	b.n	801dac2 <_svfiprintf_r+0x4a>
 801dbe6:	fb05 3202 	mla	r2, r5, r2, r3
 801dbea:	2001      	movs	r0, #1
 801dbec:	460f      	mov	r7, r1
 801dbee:	e7a6      	b.n	801db3e <_svfiprintf_r+0xc6>
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	3701      	adds	r7, #1
 801dbf4:	9305      	str	r3, [sp, #20]
 801dbf6:	4619      	mov	r1, r3
 801dbf8:	250a      	movs	r5, #10
 801dbfa:	4638      	mov	r0, r7
 801dbfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc00:	3a30      	subs	r2, #48	; 0x30
 801dc02:	2a09      	cmp	r2, #9
 801dc04:	d903      	bls.n	801dc0e <_svfiprintf_r+0x196>
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	d0c8      	beq.n	801db9c <_svfiprintf_r+0x124>
 801dc0a:	9105      	str	r1, [sp, #20]
 801dc0c:	e7c6      	b.n	801db9c <_svfiprintf_r+0x124>
 801dc0e:	fb05 2101 	mla	r1, r5, r1, r2
 801dc12:	2301      	movs	r3, #1
 801dc14:	4607      	mov	r7, r0
 801dc16:	e7f0      	b.n	801dbfa <_svfiprintf_r+0x182>
 801dc18:	ab03      	add	r3, sp, #12
 801dc1a:	9300      	str	r3, [sp, #0]
 801dc1c:	4622      	mov	r2, r4
 801dc1e:	4b11      	ldr	r3, [pc, #68]	; (801dc64 <_svfiprintf_r+0x1ec>)
 801dc20:	a904      	add	r1, sp, #16
 801dc22:	4640      	mov	r0, r8
 801dc24:	f7fc f802 	bl	8019c2c <_printf_float>
 801dc28:	f1b0 3fff 	cmp.w	r0, #4294967295
 801dc2c:	4681      	mov	r9, r0
 801dc2e:	d1d6      	bne.n	801dbde <_svfiprintf_r+0x166>
 801dc30:	89a3      	ldrh	r3, [r4, #12]
 801dc32:	065b      	lsls	r3, r3, #25
 801dc34:	f53f af35 	bmi.w	801daa2 <_svfiprintf_r+0x2a>
 801dc38:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dc3a:	b01d      	add	sp, #116	; 0x74
 801dc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc40:	ab03      	add	r3, sp, #12
 801dc42:	9300      	str	r3, [sp, #0]
 801dc44:	4622      	mov	r2, r4
 801dc46:	4b07      	ldr	r3, [pc, #28]	; (801dc64 <_svfiprintf_r+0x1ec>)
 801dc48:	a904      	add	r1, sp, #16
 801dc4a:	4640      	mov	r0, r8
 801dc4c:	f7fc faa4 	bl	801a198 <_printf_i>
 801dc50:	e7ea      	b.n	801dc28 <_svfiprintf_r+0x1b0>
 801dc52:	bf00      	nop
 801dc54:	0801e9bc 	.word	0x0801e9bc
 801dc58:	0801e9c2 	.word	0x0801e9c2
 801dc5c:	0801e9c6 	.word	0x0801e9c6
 801dc60:	08019c2d 	.word	0x08019c2d
 801dc64:	0801d9c5 	.word	0x0801d9c5

0801dc68 <_sbrk_r>:
 801dc68:	b538      	push	{r3, r4, r5, lr}
 801dc6a:	4c06      	ldr	r4, [pc, #24]	; (801dc84 <_sbrk_r+0x1c>)
 801dc6c:	2300      	movs	r3, #0
 801dc6e:	4605      	mov	r5, r0
 801dc70:	4608      	mov	r0, r1
 801dc72:	6023      	str	r3, [r4, #0]
 801dc74:	f7ea fbde 	bl	8008434 <_sbrk>
 801dc78:	1c43      	adds	r3, r0, #1
 801dc7a:	d102      	bne.n	801dc82 <_sbrk_r+0x1a>
 801dc7c:	6823      	ldr	r3, [r4, #0]
 801dc7e:	b103      	cbz	r3, 801dc82 <_sbrk_r+0x1a>
 801dc80:	602b      	str	r3, [r5, #0]
 801dc82:	bd38      	pop	{r3, r4, r5, pc}
 801dc84:	20007dcc 	.word	0x20007dcc

0801dc88 <_raise_r>:
 801dc88:	291f      	cmp	r1, #31
 801dc8a:	b538      	push	{r3, r4, r5, lr}
 801dc8c:	4604      	mov	r4, r0
 801dc8e:	460d      	mov	r5, r1
 801dc90:	d904      	bls.n	801dc9c <_raise_r+0x14>
 801dc92:	2316      	movs	r3, #22
 801dc94:	6003      	str	r3, [r0, #0]
 801dc96:	f04f 30ff 	mov.w	r0, #4294967295
 801dc9a:	bd38      	pop	{r3, r4, r5, pc}
 801dc9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801dc9e:	b112      	cbz	r2, 801dca6 <_raise_r+0x1e>
 801dca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dca4:	b94b      	cbnz	r3, 801dcba <_raise_r+0x32>
 801dca6:	4620      	mov	r0, r4
 801dca8:	f000 f830 	bl	801dd0c <_getpid_r>
 801dcac:	462a      	mov	r2, r5
 801dcae:	4601      	mov	r1, r0
 801dcb0:	4620      	mov	r0, r4
 801dcb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dcb6:	f000 b817 	b.w	801dce8 <_kill_r>
 801dcba:	2b01      	cmp	r3, #1
 801dcbc:	d00a      	beq.n	801dcd4 <_raise_r+0x4c>
 801dcbe:	1c59      	adds	r1, r3, #1
 801dcc0:	d103      	bne.n	801dcca <_raise_r+0x42>
 801dcc2:	2316      	movs	r3, #22
 801dcc4:	6003      	str	r3, [r0, #0]
 801dcc6:	2001      	movs	r0, #1
 801dcc8:	e7e7      	b.n	801dc9a <_raise_r+0x12>
 801dcca:	2400      	movs	r4, #0
 801dccc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dcd0:	4628      	mov	r0, r5
 801dcd2:	4798      	blx	r3
 801dcd4:	2000      	movs	r0, #0
 801dcd6:	e7e0      	b.n	801dc9a <_raise_r+0x12>

0801dcd8 <raise>:
 801dcd8:	4b02      	ldr	r3, [pc, #8]	; (801dce4 <raise+0xc>)
 801dcda:	4601      	mov	r1, r0
 801dcdc:	6818      	ldr	r0, [r3, #0]
 801dcde:	f7ff bfd3 	b.w	801dc88 <_raise_r>
 801dce2:	bf00      	nop
 801dce4:	200001c4 	.word	0x200001c4

0801dce8 <_kill_r>:
 801dce8:	b538      	push	{r3, r4, r5, lr}
 801dcea:	4c07      	ldr	r4, [pc, #28]	; (801dd08 <_kill_r+0x20>)
 801dcec:	2300      	movs	r3, #0
 801dcee:	4605      	mov	r5, r0
 801dcf0:	4608      	mov	r0, r1
 801dcf2:	4611      	mov	r1, r2
 801dcf4:	6023      	str	r3, [r4, #0]
 801dcf6:	f7ea fb15 	bl	8008324 <_kill>
 801dcfa:	1c43      	adds	r3, r0, #1
 801dcfc:	d102      	bne.n	801dd04 <_kill_r+0x1c>
 801dcfe:	6823      	ldr	r3, [r4, #0]
 801dd00:	b103      	cbz	r3, 801dd04 <_kill_r+0x1c>
 801dd02:	602b      	str	r3, [r5, #0]
 801dd04:	bd38      	pop	{r3, r4, r5, pc}
 801dd06:	bf00      	nop
 801dd08:	20007dcc 	.word	0x20007dcc

0801dd0c <_getpid_r>:
 801dd0c:	f7ea bb02 	b.w	8008314 <_getpid>

0801dd10 <__sread>:
 801dd10:	b510      	push	{r4, lr}
 801dd12:	460c      	mov	r4, r1
 801dd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd18:	f000 f8bc 	bl	801de94 <_read_r>
 801dd1c:	2800      	cmp	r0, #0
 801dd1e:	bfab      	itete	ge
 801dd20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dd22:	89a3      	ldrhlt	r3, [r4, #12]
 801dd24:	181b      	addge	r3, r3, r0
 801dd26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dd2a:	bfac      	ite	ge
 801dd2c:	6563      	strge	r3, [r4, #84]	; 0x54
 801dd2e:	81a3      	strhlt	r3, [r4, #12]
 801dd30:	bd10      	pop	{r4, pc}

0801dd32 <__swrite>:
 801dd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd36:	461f      	mov	r7, r3
 801dd38:	898b      	ldrh	r3, [r1, #12]
 801dd3a:	05db      	lsls	r3, r3, #23
 801dd3c:	4605      	mov	r5, r0
 801dd3e:	460c      	mov	r4, r1
 801dd40:	4616      	mov	r6, r2
 801dd42:	d505      	bpl.n	801dd50 <__swrite+0x1e>
 801dd44:	2302      	movs	r3, #2
 801dd46:	2200      	movs	r2, #0
 801dd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd4c:	f000 f886 	bl	801de5c <_lseek_r>
 801dd50:	89a3      	ldrh	r3, [r4, #12]
 801dd52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dd5a:	81a3      	strh	r3, [r4, #12]
 801dd5c:	4632      	mov	r2, r6
 801dd5e:	463b      	mov	r3, r7
 801dd60:	4628      	mov	r0, r5
 801dd62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dd66:	f000 b835 	b.w	801ddd4 <_write_r>

0801dd6a <__sseek>:
 801dd6a:	b510      	push	{r4, lr}
 801dd6c:	460c      	mov	r4, r1
 801dd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd72:	f000 f873 	bl	801de5c <_lseek_r>
 801dd76:	1c43      	adds	r3, r0, #1
 801dd78:	89a3      	ldrh	r3, [r4, #12]
 801dd7a:	bf15      	itete	ne
 801dd7c:	6560      	strne	r0, [r4, #84]	; 0x54
 801dd7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801dd82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dd86:	81a3      	strheq	r3, [r4, #12]
 801dd88:	bf18      	it	ne
 801dd8a:	81a3      	strhne	r3, [r4, #12]
 801dd8c:	bd10      	pop	{r4, pc}

0801dd8e <__sclose>:
 801dd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd92:	f000 b831 	b.w	801ddf8 <_close_r>

0801dd96 <strncmp>:
 801dd96:	b510      	push	{r4, lr}
 801dd98:	b16a      	cbz	r2, 801ddb6 <strncmp+0x20>
 801dd9a:	3901      	subs	r1, #1
 801dd9c:	1884      	adds	r4, r0, r2
 801dd9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801dda2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801dda6:	4293      	cmp	r3, r2
 801dda8:	d103      	bne.n	801ddb2 <strncmp+0x1c>
 801ddaa:	42a0      	cmp	r0, r4
 801ddac:	d001      	beq.n	801ddb2 <strncmp+0x1c>
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d1f5      	bne.n	801dd9e <strncmp+0x8>
 801ddb2:	1a98      	subs	r0, r3, r2
 801ddb4:	bd10      	pop	{r4, pc}
 801ddb6:	4610      	mov	r0, r2
 801ddb8:	e7fc      	b.n	801ddb4 <strncmp+0x1e>

0801ddba <__ascii_wctomb>:
 801ddba:	b149      	cbz	r1, 801ddd0 <__ascii_wctomb+0x16>
 801ddbc:	2aff      	cmp	r2, #255	; 0xff
 801ddbe:	bf85      	ittet	hi
 801ddc0:	238a      	movhi	r3, #138	; 0x8a
 801ddc2:	6003      	strhi	r3, [r0, #0]
 801ddc4:	700a      	strbls	r2, [r1, #0]
 801ddc6:	f04f 30ff 	movhi.w	r0, #4294967295
 801ddca:	bf98      	it	ls
 801ddcc:	2001      	movls	r0, #1
 801ddce:	4770      	bx	lr
 801ddd0:	4608      	mov	r0, r1
 801ddd2:	4770      	bx	lr

0801ddd4 <_write_r>:
 801ddd4:	b538      	push	{r3, r4, r5, lr}
 801ddd6:	4c07      	ldr	r4, [pc, #28]	; (801ddf4 <_write_r+0x20>)
 801ddd8:	4605      	mov	r5, r0
 801ddda:	4608      	mov	r0, r1
 801dddc:	4611      	mov	r1, r2
 801ddde:	2200      	movs	r2, #0
 801dde0:	6022      	str	r2, [r4, #0]
 801dde2:	461a      	mov	r2, r3
 801dde4:	f7ea fad5 	bl	8008392 <_write>
 801dde8:	1c43      	adds	r3, r0, #1
 801ddea:	d102      	bne.n	801ddf2 <_write_r+0x1e>
 801ddec:	6823      	ldr	r3, [r4, #0]
 801ddee:	b103      	cbz	r3, 801ddf2 <_write_r+0x1e>
 801ddf0:	602b      	str	r3, [r5, #0]
 801ddf2:	bd38      	pop	{r3, r4, r5, pc}
 801ddf4:	20007dcc 	.word	0x20007dcc

0801ddf8 <_close_r>:
 801ddf8:	b538      	push	{r3, r4, r5, lr}
 801ddfa:	4c06      	ldr	r4, [pc, #24]	; (801de14 <_close_r+0x1c>)
 801ddfc:	2300      	movs	r3, #0
 801ddfe:	4605      	mov	r5, r0
 801de00:	4608      	mov	r0, r1
 801de02:	6023      	str	r3, [r4, #0]
 801de04:	f7ea fae1 	bl	80083ca <_close>
 801de08:	1c43      	adds	r3, r0, #1
 801de0a:	d102      	bne.n	801de12 <_close_r+0x1a>
 801de0c:	6823      	ldr	r3, [r4, #0]
 801de0e:	b103      	cbz	r3, 801de12 <_close_r+0x1a>
 801de10:	602b      	str	r3, [r5, #0]
 801de12:	bd38      	pop	{r3, r4, r5, pc}
 801de14:	20007dcc 	.word	0x20007dcc

0801de18 <_fstat_r>:
 801de18:	b538      	push	{r3, r4, r5, lr}
 801de1a:	4c07      	ldr	r4, [pc, #28]	; (801de38 <_fstat_r+0x20>)
 801de1c:	2300      	movs	r3, #0
 801de1e:	4605      	mov	r5, r0
 801de20:	4608      	mov	r0, r1
 801de22:	4611      	mov	r1, r2
 801de24:	6023      	str	r3, [r4, #0]
 801de26:	f7ea fadc 	bl	80083e2 <_fstat>
 801de2a:	1c43      	adds	r3, r0, #1
 801de2c:	d102      	bne.n	801de34 <_fstat_r+0x1c>
 801de2e:	6823      	ldr	r3, [r4, #0]
 801de30:	b103      	cbz	r3, 801de34 <_fstat_r+0x1c>
 801de32:	602b      	str	r3, [r5, #0]
 801de34:	bd38      	pop	{r3, r4, r5, pc}
 801de36:	bf00      	nop
 801de38:	20007dcc 	.word	0x20007dcc

0801de3c <_isatty_r>:
 801de3c:	b538      	push	{r3, r4, r5, lr}
 801de3e:	4c06      	ldr	r4, [pc, #24]	; (801de58 <_isatty_r+0x1c>)
 801de40:	2300      	movs	r3, #0
 801de42:	4605      	mov	r5, r0
 801de44:	4608      	mov	r0, r1
 801de46:	6023      	str	r3, [r4, #0]
 801de48:	f7ea fadb 	bl	8008402 <_isatty>
 801de4c:	1c43      	adds	r3, r0, #1
 801de4e:	d102      	bne.n	801de56 <_isatty_r+0x1a>
 801de50:	6823      	ldr	r3, [r4, #0]
 801de52:	b103      	cbz	r3, 801de56 <_isatty_r+0x1a>
 801de54:	602b      	str	r3, [r5, #0]
 801de56:	bd38      	pop	{r3, r4, r5, pc}
 801de58:	20007dcc 	.word	0x20007dcc

0801de5c <_lseek_r>:
 801de5c:	b538      	push	{r3, r4, r5, lr}
 801de5e:	4c07      	ldr	r4, [pc, #28]	; (801de7c <_lseek_r+0x20>)
 801de60:	4605      	mov	r5, r0
 801de62:	4608      	mov	r0, r1
 801de64:	4611      	mov	r1, r2
 801de66:	2200      	movs	r2, #0
 801de68:	6022      	str	r2, [r4, #0]
 801de6a:	461a      	mov	r2, r3
 801de6c:	f7ea fad4 	bl	8008418 <_lseek>
 801de70:	1c43      	adds	r3, r0, #1
 801de72:	d102      	bne.n	801de7a <_lseek_r+0x1e>
 801de74:	6823      	ldr	r3, [r4, #0]
 801de76:	b103      	cbz	r3, 801de7a <_lseek_r+0x1e>
 801de78:	602b      	str	r3, [r5, #0]
 801de7a:	bd38      	pop	{r3, r4, r5, pc}
 801de7c:	20007dcc 	.word	0x20007dcc

0801de80 <__malloc_lock>:
 801de80:	4770      	bx	lr

0801de82 <__malloc_unlock>:
 801de82:	4770      	bx	lr

0801de84 <_malloc_usable_size_r>:
 801de84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de88:	1f18      	subs	r0, r3, #4
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	bfbc      	itt	lt
 801de8e:	580b      	ldrlt	r3, [r1, r0]
 801de90:	18c0      	addlt	r0, r0, r3
 801de92:	4770      	bx	lr

0801de94 <_read_r>:
 801de94:	b538      	push	{r3, r4, r5, lr}
 801de96:	4c07      	ldr	r4, [pc, #28]	; (801deb4 <_read_r+0x20>)
 801de98:	4605      	mov	r5, r0
 801de9a:	4608      	mov	r0, r1
 801de9c:	4611      	mov	r1, r2
 801de9e:	2200      	movs	r2, #0
 801dea0:	6022      	str	r2, [r4, #0]
 801dea2:	461a      	mov	r2, r3
 801dea4:	f7ea fa58 	bl	8008358 <_read>
 801dea8:	1c43      	adds	r3, r0, #1
 801deaa:	d102      	bne.n	801deb2 <_read_r+0x1e>
 801deac:	6823      	ldr	r3, [r4, #0]
 801deae:	b103      	cbz	r3, 801deb2 <_read_r+0x1e>
 801deb0:	602b      	str	r3, [r5, #0]
 801deb2:	bd38      	pop	{r3, r4, r5, pc}
 801deb4:	20007dcc 	.word	0x20007dcc

0801deb8 <_init>:
 801deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deba:	bf00      	nop
 801debc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801debe:	bc08      	pop	{r3}
 801dec0:	469e      	mov	lr, r3
 801dec2:	4770      	bx	lr

0801dec4 <_fini>:
 801dec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dec6:	bf00      	nop
 801dec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801deca:	bc08      	pop	{r3}
 801decc:	469e      	mov	lr, r3
 801dece:	4770      	bx	lr
